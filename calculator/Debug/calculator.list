
calculator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a28  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003ae8  08003ae8  00013ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b20  08003b20  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08003b20  08003b20  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b20  08003b20  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b20  08003b20  00013b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b24  08003b24  00013b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003b28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  2000001c  08003b44  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08003b44  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cbe8  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f1a  00000000  00000000  0002cc2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  0002eb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002f550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011d90  00000000  00000000  0002fe90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da27  00000000  00000000  00041c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000696e1  00000000  00000000  0004f647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b8d28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022d0  00000000  00000000  000b8d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000001c 	.word	0x2000001c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003ad0 	.word	0x08003ad0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000020 	.word	0x20000020
 8000104:	08003ad0 	.word	0x08003ad0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b087      	sub	sp, #28
 8000224:	af02      	add	r7, sp, #8
 8000226:	0002      	movs	r2, r0
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	701a      	strb	r2, [r3, #0]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800022c:	200f      	movs	r0, #15
 800022e:	183b      	adds	r3, r7, r0
 8000230:	1dfa      	adds	r2, r7, #7
 8000232:	7812      	ldrb	r2, [r2, #0]
 8000234:	210f      	movs	r1, #15
 8000236:	438a      	bics	r2, r1
 8000238:	701a      	strb	r2, [r3, #0]
	data_l = ((cmd<<4)&0xf0);
 800023a:	1dfb      	adds	r3, r7, #7
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	011a      	lsls	r2, r3, #4
 8000240:	240e      	movs	r4, #14
 8000242:	193b      	adds	r3, r7, r4
 8000244:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000246:	183b      	adds	r3, r7, r0
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	220c      	movs	r2, #12
 800024c:	4313      	orrs	r3, r2
 800024e:	b2da      	uxtb	r2, r3
 8000250:	2108      	movs	r1, #8
 8000252:	187b      	adds	r3, r7, r1
 8000254:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000256:	183b      	adds	r3, r7, r0
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	2208      	movs	r2, #8
 800025c:	4313      	orrs	r3, r2
 800025e:	b2da      	uxtb	r2, r3
 8000260:	187b      	adds	r3, r7, r1
 8000262:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000264:	193b      	adds	r3, r7, r4
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	220c      	movs	r2, #12
 800026a:	4313      	orrs	r3, r2
 800026c:	b2da      	uxtb	r2, r3
 800026e:	187b      	adds	r3, r7, r1
 8000270:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000272:	193b      	adds	r3, r7, r4
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	2208      	movs	r2, #8
 8000278:	4313      	orrs	r3, r2
 800027a:	b2da      	uxtb	r2, r3
 800027c:	187b      	adds	r3, r7, r1
 800027e:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000280:	187a      	adds	r2, r7, r1
 8000282:	4805      	ldr	r0, [pc, #20]	; (8000298 <lcd_send_cmd+0x78>)
 8000284:	2364      	movs	r3, #100	; 0x64
 8000286:	9300      	str	r3, [sp, #0]
 8000288:	2304      	movs	r3, #4
 800028a:	214e      	movs	r1, #78	; 0x4e
 800028c:	f001 f95c 	bl	8001548 <HAL_I2C_Master_Transmit>
}
 8000290:	46c0      	nop			; (mov r8, r8)
 8000292:	46bd      	mov	sp, r7
 8000294:	b005      	add	sp, #20
 8000296:	bd90      	pop	{r4, r7, pc}
 8000298:	20000038 	.word	0x20000038

0800029c <lcd_init>:
    lcd_send_cmd (col);
}


void lcd_init (void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80002a0:	2032      	movs	r0, #50	; 0x32
 80002a2:	f000 fc15 	bl	8000ad0 <HAL_Delay>
	lcd_send_cmd (0x30);
 80002a6:	2030      	movs	r0, #48	; 0x30
 80002a8:	f7ff ffba 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80002ac:	2005      	movs	r0, #5
 80002ae:	f000 fc0f 	bl	8000ad0 <HAL_Delay>
	lcd_send_cmd (0x30);
 80002b2:	2030      	movs	r0, #48	; 0x30
 80002b4:	f7ff ffb4 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80002b8:	2001      	movs	r0, #1
 80002ba:	f000 fc09 	bl	8000ad0 <HAL_Delay>
	lcd_send_cmd (0x30);
 80002be:	2030      	movs	r0, #48	; 0x30
 80002c0:	f7ff ffae 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(10);
 80002c4:	200a      	movs	r0, #10
 80002c6:	f000 fc03 	bl	8000ad0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80002ca:	2020      	movs	r0, #32
 80002cc:	f7ff ffa8 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(10);
 80002d0:	200a      	movs	r0, #10
 80002d2:	f000 fbfd 	bl	8000ad0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80002d6:	2028      	movs	r0, #40	; 0x28
 80002d8:	f7ff ffa2 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(1);
 80002dc:	2001      	movs	r0, #1
 80002de:	f000 fbf7 	bl	8000ad0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80002e2:	2008      	movs	r0, #8
 80002e4:	f7ff ff9c 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(1);
 80002e8:	2001      	movs	r0, #1
 80002ea:	f000 fbf1 	bl	8000ad0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80002ee:	2001      	movs	r0, #1
 80002f0:	f7ff ff96 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(1);
 80002f4:	2001      	movs	r0, #1
 80002f6:	f000 fbeb 	bl	8000ad0 <HAL_Delay>
	HAL_Delay(1);
 80002fa:	2001      	movs	r0, #1
 80002fc:	f000 fbe8 	bl	8000ad0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000300:	2006      	movs	r0, #6
 8000302:	f7ff ff8d 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(1);
 8000306:	2001      	movs	r0, #1
 8000308:	f000 fbe2 	bl	8000ad0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800030c:	200c      	movs	r0, #12
 800030e:	f7ff ff87 	bl	8000220 <lcd_send_cmd>
}
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}

08000318 <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)//hat boşa cıktığında olması girecek fonksiyon
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	000a      	movs	r2, r1
 8000322:	1cbb      	adds	r3, r7, #2
 8000324:	801a      	strh	r2, [r3, #0]
	if (huart->Instance == USART1)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4a15      	ldr	r2, [pc, #84]	; (8000380 <HAL_UARTEx_RxEventCallback+0x68>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d123      	bne.n	8000378 <HAL_UARTEx_RxEventCallback+0x60>
	{
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Rx_data, SIZE);
 8000330:	4914      	ldr	r1, [pc, #80]	; (8000384 <HAL_UARTEx_RxEventCallback+0x6c>)
 8000332:	4b15      	ldr	r3, [pc, #84]	; (8000388 <HAL_UARTEx_RxEventCallback+0x70>)
 8000334:	220a      	movs	r2, #10
 8000336:	0018      	movs	r0, r3
 8000338:	f003 fb2f 	bl	800399a <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT); // trasferin yarısındayken trasferi kesmeemeesi için kullanılan fonksiyondur.
 800033c:	4b13      	ldr	r3, [pc, #76]	; (800038c <HAL_UARTEx_RxEventCallback+0x74>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	681a      	ldr	r2, [r3, #0]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <HAL_UARTEx_RxEventCallback+0x74>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	2104      	movs	r1, #4
 8000348:	438a      	bics	r2, r1
 800034a:	601a      	str	r2, [r3, #0]
		sizeval = Size;
 800034c:	1cbb      	adds	r3, r7, #2
 800034e:	881a      	ldrh	r2, [r3, #0]
 8000350:	4b0f      	ldr	r3, [pc, #60]	; (8000390 <HAL_UARTEx_RxEventCallback+0x78>)
 8000352:	601a      	str	r2, [r3, #0]
		for (int i = sizeval; i < SIZE; i++)
 8000354:	4b0e      	ldr	r3, [pc, #56]	; (8000390 <HAL_UARTEx_RxEventCallback+0x78>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	60fb      	str	r3, [r7, #12]
 800035a:	e007      	b.n	800036c <HAL_UARTEx_RxEventCallback+0x54>
		{
			Rx_data[i] = 0;
 800035c:	4b09      	ldr	r3, [pc, #36]	; (8000384 <HAL_UARTEx_RxEventCallback+0x6c>)
 800035e:	68fa      	ldr	r2, [r7, #12]
 8000360:	0092      	lsls	r2, r2, #2
 8000362:	2100      	movs	r1, #0
 8000364:	50d1      	str	r1, [r2, r3]
		for (int i = sizeval; i < SIZE; i++)
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	3301      	adds	r3, #1
 800036a:	60fb      	str	r3, [r7, #12]
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	2b09      	cmp	r3, #9
 8000370:	ddf4      	ble.n	800035c <HAL_UARTEx_RxEventCallback+0x44>
		}
		flag = 1; //haberleşmenin bittiği ve gösteren flag
 8000372:	4b08      	ldr	r3, [pc, #32]	; (8000394 <HAL_UARTEx_RxEventCallback+0x7c>)
 8000374:	2201      	movs	r2, #1
 8000376:	701a      	strb	r2, [r3, #0]
	}
}
 8000378:	46c0      	nop			; (mov r8, r8)
 800037a:	46bd      	mov	sp, r7
 800037c:	b004      	add	sp, #16
 800037e:	bd80      	pop	{r7, pc}
 8000380:	40013800 	.word	0x40013800
 8000384:	20000198 	.word	0x20000198
 8000388:	20000084 	.word	0x20000084
 800038c:	20000108 	.word	0x20000108
 8000390:	20000190 	.word	0x20000190
 8000394:	200001c0 	.word	0x200001c0

08000398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800039c:	f000 fb34 	bl	8000a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003a0:	f000 f83e 	bl	8000420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003a4:	f000 f92e 	bl	8000604 <MX_GPIO_Init>
  MX_DMA_Init();
 80003a8:	f000 f90e 	bl	80005c8 <MX_DMA_Init>
  MX_I2C1_Init();
 80003ac:	f000 f89c 	bl	80004e8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80003b0:	f000 f8da 	bl	8000568 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80003b4:	f7ff ff72 	bl	800029c <lcd_init>
  HAL_UART_Transmit_DMA(&huart1, num1arr, sizeof(num1arr));
 80003b8:	4912      	ldr	r1, [pc, #72]	; (8000404 <main+0x6c>)
 80003ba:	4b13      	ldr	r3, [pc, #76]	; (8000408 <main+0x70>)
 80003bc:	2208      	movs	r2, #8
 80003be:	0018      	movs	r0, r3
 80003c0:	f002 f98c 	bl	80026dc <HAL_UART_Transmit_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Rx_data, SIZE);
 80003c4:	4911      	ldr	r1, [pc, #68]	; (800040c <main+0x74>)
 80003c6:	4b10      	ldr	r3, [pc, #64]	; (8000408 <main+0x70>)
 80003c8:	220a      	movs	r2, #10
 80003ca:	0018      	movs	r0, r3
 80003cc:	f003 fae5 	bl	800399a <HAL_UARTEx_ReceiveToIdle_DMA>
	 __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80003d0:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <main+0x78>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <main+0x78>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	2104      	movs	r1, #4
 80003dc:	438a      	bics	r2, r1
 80003de:	601a      	str	r2, [r3, #0]

	 if(flagnum1 == 1)
 80003e0:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <main+0x7c>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d105      	bne.n	80003f4 <main+0x5c>
	 {
		 num1 = Rx_data;
 80003e8:	4a08      	ldr	r2, [pc, #32]	; (800040c <main+0x74>)
 80003ea:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <main+0x80>)
 80003ec:	601a      	str	r2, [r3, #0]
		 flagnum1  = 0;
 80003ee:	4b09      	ldr	r3, [pc, #36]	; (8000414 <main+0x7c>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	701a      	strb	r2, [r3, #0]
	 }

	 HAL_UART_Transmit_DMA(&huart1, num2arr, sizeof(num2arr));
 80003f4:	4909      	ldr	r1, [pc, #36]	; (800041c <main+0x84>)
 80003f6:	4b04      	ldr	r3, [pc, #16]	; (8000408 <main+0x70>)
 80003f8:	2208      	movs	r2, #8
 80003fa:	0018      	movs	r0, r3
 80003fc:	f002 f96e 	bl	80026dc <HAL_UART_Transmit_DMA>
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Rx_data, SIZE);
 8000400:	e7e0      	b.n	80003c4 <main+0x2c>
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	20000000 	.word	0x20000000
 8000408:	20000084 	.word	0x20000084
 800040c:	20000198 	.word	0x20000198
 8000410:	20000108 	.word	0x20000108
 8000414:	200001c1 	.word	0x200001c1
 8000418:	20000194 	.word	0x20000194
 800041c:	20000008 	.word	0x20000008

08000420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000420:	b590      	push	{r4, r7, lr}
 8000422:	b097      	sub	sp, #92	; 0x5c
 8000424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000426:	2428      	movs	r4, #40	; 0x28
 8000428:	193b      	adds	r3, r7, r4
 800042a:	0018      	movs	r0, r3
 800042c:	2330      	movs	r3, #48	; 0x30
 800042e:	001a      	movs	r2, r3
 8000430:	2100      	movs	r1, #0
 8000432:	f003 fb45 	bl	8003ac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000436:	2318      	movs	r3, #24
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	0018      	movs	r0, r3
 800043c:	2310      	movs	r3, #16
 800043e:	001a      	movs	r2, r3
 8000440:	2100      	movs	r1, #0
 8000442:	f003 fb3d 	bl	8003ac0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	0018      	movs	r0, r3
 800044a:	2314      	movs	r3, #20
 800044c:	001a      	movs	r2, r3
 800044e:	2100      	movs	r1, #0
 8000450:	f003 fb36 	bl	8003ac0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000454:	0021      	movs	r1, r4
 8000456:	187b      	adds	r3, r7, r1
 8000458:	2202      	movs	r2, #2
 800045a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800045c:	187b      	adds	r3, r7, r1
 800045e:	2201      	movs	r2, #1
 8000460:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000462:	187b      	adds	r3, r7, r1
 8000464:	2210      	movs	r2, #16
 8000466:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000468:	187b      	adds	r3, r7, r1
 800046a:	2202      	movs	r2, #2
 800046c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800046e:	187b      	adds	r3, r7, r1
 8000470:	2200      	movs	r2, #0
 8000472:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000474:	187b      	adds	r3, r7, r1
 8000476:	22a0      	movs	r2, #160	; 0xa0
 8000478:	0392      	lsls	r2, r2, #14
 800047a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800047c:	187b      	adds	r3, r7, r1
 800047e:	2200      	movs	r2, #0
 8000480:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000482:	187b      	adds	r3, r7, r1
 8000484:	0018      	movs	r0, r3
 8000486:	f001 fb8b 	bl	8001ba0 <HAL_RCC_OscConfig>
 800048a:	1e03      	subs	r3, r0, #0
 800048c:	d001      	beq.n	8000492 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800048e:	f000 f931 	bl	80006f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000492:	2118      	movs	r1, #24
 8000494:	187b      	adds	r3, r7, r1
 8000496:	2207      	movs	r2, #7
 8000498:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800049a:	187b      	adds	r3, r7, r1
 800049c:	2202      	movs	r2, #2
 800049e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	2200      	movs	r2, #0
 80004a4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004a6:	187b      	adds	r3, r7, r1
 80004a8:	2200      	movs	r2, #0
 80004aa:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004ac:	187b      	adds	r3, r7, r1
 80004ae:	2101      	movs	r1, #1
 80004b0:	0018      	movs	r0, r3
 80004b2:	f001 fe8f 	bl	80021d4 <HAL_RCC_ClockConfig>
 80004b6:	1e03      	subs	r3, r0, #0
 80004b8:	d001      	beq.n	80004be <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80004ba:	f000 f91b 	bl	80006f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	2221      	movs	r2, #33	; 0x21
 80004c2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	2200      	movs	r2, #0
 80004c8:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	2200      	movs	r2, #0
 80004ce:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004d0:	1d3b      	adds	r3, r7, #4
 80004d2:	0018      	movs	r0, r3
 80004d4:	f001 ffd0 	bl	8002478 <HAL_RCCEx_PeriphCLKConfig>
 80004d8:	1e03      	subs	r3, r0, #0
 80004da:	d001      	beq.n	80004e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80004dc:	f000 f90a 	bl	80006f4 <Error_Handler>
  }
}
 80004e0:	46c0      	nop			; (mov r8, r8)
 80004e2:	46bd      	mov	sp, r7
 80004e4:	b017      	add	sp, #92	; 0x5c
 80004e6:	bd90      	pop	{r4, r7, pc}

080004e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004ec:	4b1b      	ldr	r3, [pc, #108]	; (800055c <MX_I2C1_Init+0x74>)
 80004ee:	4a1c      	ldr	r2, [pc, #112]	; (8000560 <MX_I2C1_Init+0x78>)
 80004f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80004f2:	4b1a      	ldr	r3, [pc, #104]	; (800055c <MX_I2C1_Init+0x74>)
 80004f4:	4a1b      	ldr	r2, [pc, #108]	; (8000564 <MX_I2C1_Init+0x7c>)
 80004f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004f8:	4b18      	ldr	r3, [pc, #96]	; (800055c <MX_I2C1_Init+0x74>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004fe:	4b17      	ldr	r3, [pc, #92]	; (800055c <MX_I2C1_Init+0x74>)
 8000500:	2201      	movs	r2, #1
 8000502:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000504:	4b15      	ldr	r3, [pc, #84]	; (800055c <MX_I2C1_Init+0x74>)
 8000506:	2200      	movs	r2, #0
 8000508:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800050a:	4b14      	ldr	r3, [pc, #80]	; (800055c <MX_I2C1_Init+0x74>)
 800050c:	2200      	movs	r2, #0
 800050e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <MX_I2C1_Init+0x74>)
 8000512:	2200      	movs	r2, #0
 8000514:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000516:	4b11      	ldr	r3, [pc, #68]	; (800055c <MX_I2C1_Init+0x74>)
 8000518:	2200      	movs	r2, #0
 800051a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800051c:	4b0f      	ldr	r3, [pc, #60]	; (800055c <MX_I2C1_Init+0x74>)
 800051e:	2200      	movs	r2, #0
 8000520:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000522:	4b0e      	ldr	r3, [pc, #56]	; (800055c <MX_I2C1_Init+0x74>)
 8000524:	0018      	movs	r0, r3
 8000526:	f000 ff79 	bl	800141c <HAL_I2C_Init>
 800052a:	1e03      	subs	r3, r0, #0
 800052c:	d001      	beq.n	8000532 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800052e:	f000 f8e1 	bl	80006f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000532:	4b0a      	ldr	r3, [pc, #40]	; (800055c <MX_I2C1_Init+0x74>)
 8000534:	2100      	movs	r1, #0
 8000536:	0018      	movs	r0, r3
 8000538:	f001 fa9a 	bl	8001a70 <HAL_I2CEx_ConfigAnalogFilter>
 800053c:	1e03      	subs	r3, r0, #0
 800053e:	d001      	beq.n	8000544 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000540:	f000 f8d8 	bl	80006f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000544:	4b05      	ldr	r3, [pc, #20]	; (800055c <MX_I2C1_Init+0x74>)
 8000546:	2100      	movs	r1, #0
 8000548:	0018      	movs	r0, r3
 800054a:	f001 fadd 	bl	8001b08 <HAL_I2CEx_ConfigDigitalFilter>
 800054e:	1e03      	subs	r3, r0, #0
 8000550:	d001      	beq.n	8000556 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000552:	f000 f8cf 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20000038 	.word	0x20000038
 8000560:	40005400 	.word	0x40005400
 8000564:	2000090e 	.word	0x2000090e

08000568 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800056c:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <MX_USART1_UART_Init+0x58>)
 800056e:	4a15      	ldr	r2, [pc, #84]	; (80005c4 <MX_USART1_UART_Init+0x5c>)
 8000570:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000572:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <MX_USART1_UART_Init+0x58>)
 8000574:	2296      	movs	r2, #150	; 0x96
 8000576:	0212      	lsls	r2, r2, #8
 8000578:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800057a:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <MX_USART1_UART_Init+0x58>)
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000580:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <MX_USART1_UART_Init+0x58>)
 8000582:	2200      	movs	r2, #0
 8000584:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000586:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <MX_USART1_UART_Init+0x58>)
 8000588:	2200      	movs	r2, #0
 800058a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800058c:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <MX_USART1_UART_Init+0x58>)
 800058e:	220c      	movs	r2, #12
 8000590:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000592:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <MX_USART1_UART_Init+0x58>)
 8000594:	2200      	movs	r2, #0
 8000596:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000598:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <MX_USART1_UART_Init+0x58>)
 800059a:	2200      	movs	r2, #0
 800059c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800059e:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <MX_USART1_UART_Init+0x58>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <MX_USART1_UART_Init+0x58>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005aa:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <MX_USART1_UART_Init+0x58>)
 80005ac:	0018      	movs	r0, r3
 80005ae:	f002 f841 	bl	8002634 <HAL_UART_Init>
 80005b2:	1e03      	subs	r3, r0, #0
 80005b4:	d001      	beq.n	80005ba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80005b6:	f000 f89d 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000084 	.word	0x20000084
 80005c4:	40013800 	.word	0x40013800

080005c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MX_DMA_Init+0x38>)
 80005d0:	695a      	ldr	r2, [r3, #20]
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <MX_DMA_Init+0x38>)
 80005d4:	2101      	movs	r1, #1
 80005d6:	430a      	orrs	r2, r1
 80005d8:	615a      	str	r2, [r3, #20]
 80005da:	4b09      	ldr	r3, [pc, #36]	; (8000600 <MX_DMA_Init+0x38>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	2201      	movs	r2, #1
 80005e0:	4013      	ands	r3, r2
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2100      	movs	r1, #0
 80005ea:	200a      	movs	r0, #10
 80005ec:	f000 fb40 	bl	8000c70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80005f0:	200a      	movs	r0, #10
 80005f2:	f000 fb52 	bl	8000c9a <HAL_NVIC_EnableIRQ>

}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	46bd      	mov	sp, r7
 80005fa:	b002      	add	sp, #8
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	40021000 	.word	0x40021000

08000604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b08b      	sub	sp, #44	; 0x2c
 8000608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	2414      	movs	r4, #20
 800060c:	193b      	adds	r3, r7, r4
 800060e:	0018      	movs	r0, r3
 8000610:	2314      	movs	r3, #20
 8000612:	001a      	movs	r2, r3
 8000614:	2100      	movs	r1, #0
 8000616:	f003 fa53 	bl	8003ac0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800061a:	4b34      	ldr	r3, [pc, #208]	; (80006ec <MX_GPIO_Init+0xe8>)
 800061c:	695a      	ldr	r2, [r3, #20]
 800061e:	4b33      	ldr	r3, [pc, #204]	; (80006ec <MX_GPIO_Init+0xe8>)
 8000620:	2180      	movs	r1, #128	; 0x80
 8000622:	03c9      	lsls	r1, r1, #15
 8000624:	430a      	orrs	r2, r1
 8000626:	615a      	str	r2, [r3, #20]
 8000628:	4b30      	ldr	r3, [pc, #192]	; (80006ec <MX_GPIO_Init+0xe8>)
 800062a:	695a      	ldr	r2, [r3, #20]
 800062c:	2380      	movs	r3, #128	; 0x80
 800062e:	03db      	lsls	r3, r3, #15
 8000630:	4013      	ands	r3, r2
 8000632:	613b      	str	r3, [r7, #16]
 8000634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	4b2d      	ldr	r3, [pc, #180]	; (80006ec <MX_GPIO_Init+0xe8>)
 8000638:	695a      	ldr	r2, [r3, #20]
 800063a:	4b2c      	ldr	r3, [pc, #176]	; (80006ec <MX_GPIO_Init+0xe8>)
 800063c:	2180      	movs	r1, #128	; 0x80
 800063e:	0289      	lsls	r1, r1, #10
 8000640:	430a      	orrs	r2, r1
 8000642:	615a      	str	r2, [r3, #20]
 8000644:	4b29      	ldr	r3, [pc, #164]	; (80006ec <MX_GPIO_Init+0xe8>)
 8000646:	695a      	ldr	r2, [r3, #20]
 8000648:	2380      	movs	r3, #128	; 0x80
 800064a:	029b      	lsls	r3, r3, #10
 800064c:	4013      	ands	r3, r2
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000652:	4b26      	ldr	r3, [pc, #152]	; (80006ec <MX_GPIO_Init+0xe8>)
 8000654:	695a      	ldr	r2, [r3, #20]
 8000656:	4b25      	ldr	r3, [pc, #148]	; (80006ec <MX_GPIO_Init+0xe8>)
 8000658:	2180      	movs	r1, #128	; 0x80
 800065a:	0309      	lsls	r1, r1, #12
 800065c:	430a      	orrs	r2, r1
 800065e:	615a      	str	r2, [r3, #20]
 8000660:	4b22      	ldr	r3, [pc, #136]	; (80006ec <MX_GPIO_Init+0xe8>)
 8000662:	695a      	ldr	r2, [r3, #20]
 8000664:	2380      	movs	r3, #128	; 0x80
 8000666:	031b      	lsls	r3, r3, #12
 8000668:	4013      	ands	r3, r2
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066e:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <MX_GPIO_Init+0xe8>)
 8000670:	695a      	ldr	r2, [r3, #20]
 8000672:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <MX_GPIO_Init+0xe8>)
 8000674:	2180      	movs	r1, #128	; 0x80
 8000676:	02c9      	lsls	r1, r1, #11
 8000678:	430a      	orrs	r2, r1
 800067a:	615a      	str	r2, [r3, #20]
 800067c:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <MX_GPIO_Init+0xe8>)
 800067e:	695a      	ldr	r2, [r3, #20]
 8000680:	2380      	movs	r3, #128	; 0x80
 8000682:	02db      	lsls	r3, r3, #11
 8000684:	4013      	ands	r3, r2
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 800068a:	23c0      	movs	r3, #192	; 0xc0
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	4818      	ldr	r0, [pc, #96]	; (80006f0 <MX_GPIO_Init+0xec>)
 8000690:	2200      	movs	r2, #0
 8000692:	0019      	movs	r1, r3
 8000694:	f000 fea4 	bl	80013e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000698:	193b      	adds	r3, r7, r4
 800069a:	2201      	movs	r2, #1
 800069c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800069e:	193b      	adds	r3, r7, r4
 80006a0:	2290      	movs	r2, #144	; 0x90
 80006a2:	0352      	lsls	r2, r2, #13
 80006a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	193b      	adds	r3, r7, r4
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ac:	193a      	adds	r2, r7, r4
 80006ae:	2390      	movs	r3, #144	; 0x90
 80006b0:	05db      	lsls	r3, r3, #23
 80006b2:	0011      	movs	r1, r2
 80006b4:	0018      	movs	r0, r3
 80006b6:	f000 fd23 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80006ba:	0021      	movs	r1, r4
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	22c0      	movs	r2, #192	; 0xc0
 80006c0:	0092      	lsls	r2, r2, #2
 80006c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2201      	movs	r2, #1
 80006c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	4a05      	ldr	r2, [pc, #20]	; (80006f0 <MX_GPIO_Init+0xec>)
 80006da:	0019      	movs	r1, r3
 80006dc:	0010      	movs	r0, r2
 80006de:	f000 fd0f 	bl	8001100 <HAL_GPIO_Init>

}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b00b      	add	sp, #44	; 0x2c
 80006e8:	bd90      	pop	{r4, r7, pc}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	40021000 	.word	0x40021000
 80006f0:	48000800 	.word	0x48000800

080006f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f8:	b672      	cpsid	i
}
 80006fa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006fc:	e7fe      	b.n	80006fc <Error_Handler+0x8>
	...

08000700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000706:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <HAL_MspInit+0x44>)
 8000708:	699a      	ldr	r2, [r3, #24]
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <HAL_MspInit+0x44>)
 800070c:	2101      	movs	r1, #1
 800070e:	430a      	orrs	r2, r1
 8000710:	619a      	str	r2, [r3, #24]
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <HAL_MspInit+0x44>)
 8000714:	699b      	ldr	r3, [r3, #24]
 8000716:	2201      	movs	r2, #1
 8000718:	4013      	ands	r3, r2
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <HAL_MspInit+0x44>)
 8000720:	69da      	ldr	r2, [r3, #28]
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <HAL_MspInit+0x44>)
 8000724:	2180      	movs	r1, #128	; 0x80
 8000726:	0549      	lsls	r1, r1, #21
 8000728:	430a      	orrs	r2, r1
 800072a:	61da      	str	r2, [r3, #28]
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <HAL_MspInit+0x44>)
 800072e:	69da      	ldr	r2, [r3, #28]
 8000730:	2380      	movs	r3, #128	; 0x80
 8000732:	055b      	lsls	r3, r3, #21
 8000734:	4013      	ands	r3, r2
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	b002      	add	sp, #8
 8000740:	bd80      	pop	{r7, pc}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	40021000 	.word	0x40021000

08000748 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000748:	b590      	push	{r4, r7, lr}
 800074a:	b08b      	sub	sp, #44	; 0x2c
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000750:	2414      	movs	r4, #20
 8000752:	193b      	adds	r3, r7, r4
 8000754:	0018      	movs	r0, r3
 8000756:	2314      	movs	r3, #20
 8000758:	001a      	movs	r2, r3
 800075a:	2100      	movs	r1, #0
 800075c:	f003 f9b0 	bl	8003ac0 <memset>
  if(hi2c->Instance==I2C1)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a1c      	ldr	r2, [pc, #112]	; (80007d8 <HAL_I2C_MspInit+0x90>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d131      	bne.n	80007ce <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <HAL_I2C_MspInit+0x94>)
 800076c:	695a      	ldr	r2, [r3, #20]
 800076e:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <HAL_I2C_MspInit+0x94>)
 8000770:	2180      	movs	r1, #128	; 0x80
 8000772:	02c9      	lsls	r1, r1, #11
 8000774:	430a      	orrs	r2, r1
 8000776:	615a      	str	r2, [r3, #20]
 8000778:	4b18      	ldr	r3, [pc, #96]	; (80007dc <HAL_I2C_MspInit+0x94>)
 800077a:	695a      	ldr	r2, [r3, #20]
 800077c:	2380      	movs	r3, #128	; 0x80
 800077e:	02db      	lsls	r3, r3, #11
 8000780:	4013      	ands	r3, r2
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000786:	0021      	movs	r1, r4
 8000788:	187b      	adds	r3, r7, r1
 800078a:	22c0      	movs	r2, #192	; 0xc0
 800078c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800078e:	187b      	adds	r3, r7, r1
 8000790:	2212      	movs	r2, #18
 8000792:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	187b      	adds	r3, r7, r1
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800079a:	187b      	adds	r3, r7, r1
 800079c:	2203      	movs	r2, #3
 800079e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	2201      	movs	r2, #1
 80007a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	4a0d      	ldr	r2, [pc, #52]	; (80007e0 <HAL_I2C_MspInit+0x98>)
 80007aa:	0019      	movs	r1, r3
 80007ac:	0010      	movs	r0, r2
 80007ae:	f000 fca7 	bl	8001100 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007b2:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <HAL_I2C_MspInit+0x94>)
 80007b4:	69da      	ldr	r2, [r3, #28]
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <HAL_I2C_MspInit+0x94>)
 80007b8:	2180      	movs	r1, #128	; 0x80
 80007ba:	0389      	lsls	r1, r1, #14
 80007bc:	430a      	orrs	r2, r1
 80007be:	61da      	str	r2, [r3, #28]
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <HAL_I2C_MspInit+0x94>)
 80007c2:	69da      	ldr	r2, [r3, #28]
 80007c4:	2380      	movs	r3, #128	; 0x80
 80007c6:	039b      	lsls	r3, r3, #14
 80007c8:	4013      	ands	r3, r2
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	46bd      	mov	sp, r7
 80007d2:	b00b      	add	sp, #44	; 0x2c
 80007d4:	bd90      	pop	{r4, r7, pc}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	40005400 	.word	0x40005400
 80007dc:	40021000 	.word	0x40021000
 80007e0:	48000400 	.word	0x48000400

080007e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007e4:	b590      	push	{r4, r7, lr}
 80007e6:	b08b      	sub	sp, #44	; 0x2c
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	2414      	movs	r4, #20
 80007ee:	193b      	adds	r3, r7, r4
 80007f0:	0018      	movs	r0, r3
 80007f2:	2314      	movs	r3, #20
 80007f4:	001a      	movs	r2, r3
 80007f6:	2100      	movs	r1, #0
 80007f8:	f003 f962 	bl	8003ac0 <memset>
  if(huart->Instance==USART1)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a48      	ldr	r2, [pc, #288]	; (8000924 <HAL_UART_MspInit+0x140>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d000      	beq.n	8000808 <HAL_UART_MspInit+0x24>
 8000806:	e089      	b.n	800091c <HAL_UART_MspInit+0x138>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000808:	4b47      	ldr	r3, [pc, #284]	; (8000928 <HAL_UART_MspInit+0x144>)
 800080a:	699a      	ldr	r2, [r3, #24]
 800080c:	4b46      	ldr	r3, [pc, #280]	; (8000928 <HAL_UART_MspInit+0x144>)
 800080e:	2180      	movs	r1, #128	; 0x80
 8000810:	01c9      	lsls	r1, r1, #7
 8000812:	430a      	orrs	r2, r1
 8000814:	619a      	str	r2, [r3, #24]
 8000816:	4b44      	ldr	r3, [pc, #272]	; (8000928 <HAL_UART_MspInit+0x144>)
 8000818:	699a      	ldr	r2, [r3, #24]
 800081a:	2380      	movs	r3, #128	; 0x80
 800081c:	01db      	lsls	r3, r3, #7
 800081e:	4013      	ands	r3, r2
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000824:	4b40      	ldr	r3, [pc, #256]	; (8000928 <HAL_UART_MspInit+0x144>)
 8000826:	695a      	ldr	r2, [r3, #20]
 8000828:	4b3f      	ldr	r3, [pc, #252]	; (8000928 <HAL_UART_MspInit+0x144>)
 800082a:	2180      	movs	r1, #128	; 0x80
 800082c:	0289      	lsls	r1, r1, #10
 800082e:	430a      	orrs	r2, r1
 8000830:	615a      	str	r2, [r3, #20]
 8000832:	4b3d      	ldr	r3, [pc, #244]	; (8000928 <HAL_UART_MspInit+0x144>)
 8000834:	695a      	ldr	r2, [r3, #20]
 8000836:	2380      	movs	r3, #128	; 0x80
 8000838:	029b      	lsls	r3, r3, #10
 800083a:	4013      	ands	r3, r2
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000840:	193b      	adds	r3, r7, r4
 8000842:	22c0      	movs	r2, #192	; 0xc0
 8000844:	00d2      	lsls	r2, r2, #3
 8000846:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000848:	0021      	movs	r1, r4
 800084a:	187b      	adds	r3, r7, r1
 800084c:	2202      	movs	r2, #2
 800084e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	187b      	adds	r3, r7, r1
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000856:	187b      	adds	r3, r7, r1
 8000858:	2203      	movs	r2, #3
 800085a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2201      	movs	r2, #1
 8000860:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000862:	187a      	adds	r2, r7, r1
 8000864:	2390      	movs	r3, #144	; 0x90
 8000866:	05db      	lsls	r3, r3, #23
 8000868:	0011      	movs	r1, r2
 800086a:	0018      	movs	r0, r3
 800086c:	f000 fc48 	bl	8001100 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8000870:	4b2e      	ldr	r3, [pc, #184]	; (800092c <HAL_UART_MspInit+0x148>)
 8000872:	4a2f      	ldr	r2, [pc, #188]	; (8000930 <HAL_UART_MspInit+0x14c>)
 8000874:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000876:	4b2d      	ldr	r3, [pc, #180]	; (800092c <HAL_UART_MspInit+0x148>)
 8000878:	2200      	movs	r2, #0
 800087a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800087c:	4b2b      	ldr	r3, [pc, #172]	; (800092c <HAL_UART_MspInit+0x148>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000882:	4b2a      	ldr	r3, [pc, #168]	; (800092c <HAL_UART_MspInit+0x148>)
 8000884:	2280      	movs	r2, #128	; 0x80
 8000886:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000888:	4b28      	ldr	r3, [pc, #160]	; (800092c <HAL_UART_MspInit+0x148>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800088e:	4b27      	ldr	r3, [pc, #156]	; (800092c <HAL_UART_MspInit+0x148>)
 8000890:	2200      	movs	r2, #0
 8000892:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000894:	4b25      	ldr	r3, [pc, #148]	; (800092c <HAL_UART_MspInit+0x148>)
 8000896:	2200      	movs	r2, #0
 8000898:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800089a:	4b24      	ldr	r3, [pc, #144]	; (800092c <HAL_UART_MspInit+0x148>)
 800089c:	2280      	movs	r2, #128	; 0x80
 800089e:	0152      	lsls	r2, r2, #5
 80008a0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80008a2:	4b22      	ldr	r3, [pc, #136]	; (800092c <HAL_UART_MspInit+0x148>)
 80008a4:	0018      	movs	r0, r3
 80008a6:	f000 fa15 	bl	8000cd4 <HAL_DMA_Init>
 80008aa:	1e03      	subs	r3, r0, #0
 80008ac:	d001      	beq.n	80008b2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80008ae:	f7ff ff21 	bl	80006f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4a1d      	ldr	r2, [pc, #116]	; (800092c <HAL_UART_MspInit+0x148>)
 80008b6:	671a      	str	r2, [r3, #112]	; 0x70
 80008b8:	4b1c      	ldr	r3, [pc, #112]	; (800092c <HAL_UART_MspInit+0x148>)
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80008be:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <HAL_UART_MspInit+0x150>)
 80008c0:	4a1d      	ldr	r2, [pc, #116]	; (8000938 <HAL_UART_MspInit+0x154>)
 80008c2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008c4:	4b1b      	ldr	r3, [pc, #108]	; (8000934 <HAL_UART_MspInit+0x150>)
 80008c6:	2210      	movs	r2, #16
 80008c8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008ca:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <HAL_UART_MspInit+0x150>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008d0:	4b18      	ldr	r3, [pc, #96]	; (8000934 <HAL_UART_MspInit+0x150>)
 80008d2:	2280      	movs	r2, #128	; 0x80
 80008d4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008d6:	4b17      	ldr	r3, [pc, #92]	; (8000934 <HAL_UART_MspInit+0x150>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008dc:	4b15      	ldr	r3, [pc, #84]	; (8000934 <HAL_UART_MspInit+0x150>)
 80008de:	2200      	movs	r2, #0
 80008e0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <HAL_UART_MspInit+0x150>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <HAL_UART_MspInit+0x150>)
 80008ea:	2280      	movs	r2, #128	; 0x80
 80008ec:	0152      	lsls	r2, r2, #5
 80008ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80008f0:	4b10      	ldr	r3, [pc, #64]	; (8000934 <HAL_UART_MspInit+0x150>)
 80008f2:	0018      	movs	r0, r3
 80008f4:	f000 f9ee 	bl	8000cd4 <HAL_DMA_Init>
 80008f8:	1e03      	subs	r3, r0, #0
 80008fa:	d001      	beq.n	8000900 <HAL_UART_MspInit+0x11c>
    {
      Error_Handler();
 80008fc:	f7ff fefa 	bl	80006f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4a0c      	ldr	r2, [pc, #48]	; (8000934 <HAL_UART_MspInit+0x150>)
 8000904:	66da      	str	r2, [r3, #108]	; 0x6c
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <HAL_UART_MspInit+0x150>)
 8000908:	687a      	ldr	r2, [r7, #4]
 800090a:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800090c:	2200      	movs	r2, #0
 800090e:	2100      	movs	r1, #0
 8000910:	201b      	movs	r0, #27
 8000912:	f000 f9ad 	bl	8000c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000916:	201b      	movs	r0, #27
 8000918:	f000 f9bf 	bl	8000c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800091c:	46c0      	nop			; (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	b00b      	add	sp, #44	; 0x2c
 8000922:	bd90      	pop	{r4, r7, pc}
 8000924:	40013800 	.word	0x40013800
 8000928:	40021000 	.word	0x40021000
 800092c:	20000108 	.word	0x20000108
 8000930:	40020030 	.word	0x40020030
 8000934:	2000014c 	.word	0x2000014c
 8000938:	4002001c 	.word	0x4002001c

0800093c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <NMI_Handler+0x4>

08000942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <HardFault_Handler+0x4>

08000948 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800094c:	46c0      	nop			; (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000960:	f000 f89a 	bl	8000a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000964:	46c0      	nop			; (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
	...

0800096c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000970:	4b05      	ldr	r3, [pc, #20]	; (8000988 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000972:	0018      	movs	r0, r3
 8000974:	f000 fad9 	bl	8000f2a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <DMA1_Channel2_3_IRQHandler+0x20>)
 800097a:	0018      	movs	r0, r3
 800097c:	f000 fad5 	bl	8000f2a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000980:	46c0      	nop			; (mov r8, r8)
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	2000014c 	.word	0x2000014c
 800098c:	20000108 	.word	0x20000108

08000990 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000994:	4b03      	ldr	r3, [pc, #12]	; (80009a4 <USART1_IRQHandler+0x14>)
 8000996:	0018      	movs	r0, r3
 8000998:	f001 ff42 	bl	8002820 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800099c:	46c0      	nop			; (mov r8, r8)
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	20000084 	.word	0x20000084

080009a8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80009ac:	46c0      	nop			; (mov r8, r8)
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009b4:	480d      	ldr	r0, [pc, #52]	; (80009ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009b6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b8:	480d      	ldr	r0, [pc, #52]	; (80009f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ba:	490e      	ldr	r1, [pc, #56]	; (80009f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009bc:	4a0e      	ldr	r2, [pc, #56]	; (80009f8 <LoopForever+0xe>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c0:	e002      	b.n	80009c8 <LoopCopyDataInit>

080009c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c6:	3304      	adds	r3, #4

080009c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009cc:	d3f9      	bcc.n	80009c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ce:	4a0b      	ldr	r2, [pc, #44]	; (80009fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80009d0:	4c0b      	ldr	r4, [pc, #44]	; (8000a00 <LoopForever+0x16>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d4:	e001      	b.n	80009da <LoopFillZerobss>

080009d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d8:	3204      	adds	r2, #4

080009da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009dc:	d3fb      	bcc.n	80009d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009de:	f7ff ffe3 	bl	80009a8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80009e2:	f003 f849 	bl	8003a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009e6:	f7ff fcd7 	bl	8000398 <main>

080009ea <LoopForever>:

LoopForever:
    b LoopForever
 80009ea:	e7fe      	b.n	80009ea <LoopForever>
  ldr   r0, =_estack
 80009ec:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80009f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80009f8:	08003b28 	.word	0x08003b28
  ldr r2, =_sbss
 80009fc:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000a00:	200001c8 	.word	0x200001c8

08000a04 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a04:	e7fe      	b.n	8000a04 <ADC1_COMP_IRQHandler>
	...

08000a08 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a0c:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <HAL_Init+0x24>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_Init+0x24>)
 8000a12:	2110      	movs	r1, #16
 8000a14:	430a      	orrs	r2, r1
 8000a16:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f000 f809 	bl	8000a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a1e:	f7ff fe6f 	bl	8000700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a22:	2300      	movs	r3, #0
}
 8000a24:	0018      	movs	r0, r3
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	40022000 	.word	0x40022000

08000a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <HAL_InitTick+0x5c>)
 8000a3a:	681c      	ldr	r4, [r3, #0]
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <HAL_InitTick+0x60>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	0019      	movs	r1, r3
 8000a42:	23fa      	movs	r3, #250	; 0xfa
 8000a44:	0098      	lsls	r0, r3, #2
 8000a46:	f7ff fb5f 	bl	8000108 <__udivsi3>
 8000a4a:	0003      	movs	r3, r0
 8000a4c:	0019      	movs	r1, r3
 8000a4e:	0020      	movs	r0, r4
 8000a50:	f7ff fb5a 	bl	8000108 <__udivsi3>
 8000a54:	0003      	movs	r3, r0
 8000a56:	0018      	movs	r0, r3
 8000a58:	f000 f92f 	bl	8000cba <HAL_SYSTICK_Config>
 8000a5c:	1e03      	subs	r3, r0, #0
 8000a5e:	d001      	beq.n	8000a64 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a60:	2301      	movs	r3, #1
 8000a62:	e00f      	b.n	8000a84 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2b03      	cmp	r3, #3
 8000a68:	d80b      	bhi.n	8000a82 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a6a:	6879      	ldr	r1, [r7, #4]
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	425b      	negs	r3, r3
 8000a70:	2200      	movs	r2, #0
 8000a72:	0018      	movs	r0, r3
 8000a74:	f000 f8fc 	bl	8000c70 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_InitTick+0x64>)
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e000      	b.n	8000a84 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
}
 8000a84:	0018      	movs	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b003      	add	sp, #12
 8000a8a:	bd90      	pop	{r4, r7, pc}
 8000a8c:	20000010 	.word	0x20000010
 8000a90:	20000018 	.word	0x20000018
 8000a94:	20000014 	.word	0x20000014

08000a98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <HAL_IncTick+0x1c>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	001a      	movs	r2, r3
 8000aa2:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <HAL_IncTick+0x20>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	18d2      	adds	r2, r2, r3
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <HAL_IncTick+0x20>)
 8000aaa:	601a      	str	r2, [r3, #0]
}
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	20000018 	.word	0x20000018
 8000ab8:	200001c4 	.word	0x200001c4

08000abc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac0:	4b02      	ldr	r3, [pc, #8]	; (8000acc <HAL_GetTick+0x10>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
}
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	200001c4 	.word	0x200001c4

08000ad0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad8:	f7ff fff0 	bl	8000abc <HAL_GetTick>
 8000adc:	0003      	movs	r3, r0
 8000ade:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	d005      	beq.n	8000af6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aea:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <HAL_Delay+0x44>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	001a      	movs	r2, r3
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	189b      	adds	r3, r3, r2
 8000af4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	f7ff ffe0 	bl	8000abc <HAL_GetTick>
 8000afc:	0002      	movs	r2, r0
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d8f7      	bhi.n	8000af8 <HAL_Delay+0x28>
  {
  }
}
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b004      	add	sp, #16
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	20000018 	.word	0x20000018

08000b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	0002      	movs	r2, r0
 8000b20:	1dfb      	adds	r3, r7, #7
 8000b22:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b24:	1dfb      	adds	r3, r7, #7
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b7f      	cmp	r3, #127	; 0x7f
 8000b2a:	d809      	bhi.n	8000b40 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b2c:	1dfb      	adds	r3, r7, #7
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	001a      	movs	r2, r3
 8000b32:	231f      	movs	r3, #31
 8000b34:	401a      	ands	r2, r3
 8000b36:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <__NVIC_EnableIRQ+0x30>)
 8000b38:	2101      	movs	r1, #1
 8000b3a:	4091      	lsls	r1, r2
 8000b3c:	000a      	movs	r2, r1
 8000b3e:	601a      	str	r2, [r3, #0]
  }
}
 8000b40:	46c0      	nop			; (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b002      	add	sp, #8
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	e000e100 	.word	0xe000e100

08000b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	0002      	movs	r2, r0
 8000b54:	6039      	str	r1, [r7, #0]
 8000b56:	1dfb      	adds	r3, r7, #7
 8000b58:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b5a:	1dfb      	adds	r3, r7, #7
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b60:	d828      	bhi.n	8000bb4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b62:	4a2f      	ldr	r2, [pc, #188]	; (8000c20 <__NVIC_SetPriority+0xd4>)
 8000b64:	1dfb      	adds	r3, r7, #7
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	b25b      	sxtb	r3, r3
 8000b6a:	089b      	lsrs	r3, r3, #2
 8000b6c:	33c0      	adds	r3, #192	; 0xc0
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	589b      	ldr	r3, [r3, r2]
 8000b72:	1dfa      	adds	r2, r7, #7
 8000b74:	7812      	ldrb	r2, [r2, #0]
 8000b76:	0011      	movs	r1, r2
 8000b78:	2203      	movs	r2, #3
 8000b7a:	400a      	ands	r2, r1
 8000b7c:	00d2      	lsls	r2, r2, #3
 8000b7e:	21ff      	movs	r1, #255	; 0xff
 8000b80:	4091      	lsls	r1, r2
 8000b82:	000a      	movs	r2, r1
 8000b84:	43d2      	mvns	r2, r2
 8000b86:	401a      	ands	r2, r3
 8000b88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	019b      	lsls	r3, r3, #6
 8000b8e:	22ff      	movs	r2, #255	; 0xff
 8000b90:	401a      	ands	r2, r3
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	0018      	movs	r0, r3
 8000b98:	2303      	movs	r3, #3
 8000b9a:	4003      	ands	r3, r0
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ba0:	481f      	ldr	r0, [pc, #124]	; (8000c20 <__NVIC_SetPriority+0xd4>)
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	b25b      	sxtb	r3, r3
 8000ba8:	089b      	lsrs	r3, r3, #2
 8000baa:	430a      	orrs	r2, r1
 8000bac:	33c0      	adds	r3, #192	; 0xc0
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bb2:	e031      	b.n	8000c18 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bb4:	4a1b      	ldr	r2, [pc, #108]	; (8000c24 <__NVIC_SetPriority+0xd8>)
 8000bb6:	1dfb      	adds	r3, r7, #7
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	0019      	movs	r1, r3
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	400b      	ands	r3, r1
 8000bc0:	3b08      	subs	r3, #8
 8000bc2:	089b      	lsrs	r3, r3, #2
 8000bc4:	3306      	adds	r3, #6
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	18d3      	adds	r3, r2, r3
 8000bca:	3304      	adds	r3, #4
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	1dfa      	adds	r2, r7, #7
 8000bd0:	7812      	ldrb	r2, [r2, #0]
 8000bd2:	0011      	movs	r1, r2
 8000bd4:	2203      	movs	r2, #3
 8000bd6:	400a      	ands	r2, r1
 8000bd8:	00d2      	lsls	r2, r2, #3
 8000bda:	21ff      	movs	r1, #255	; 0xff
 8000bdc:	4091      	lsls	r1, r2
 8000bde:	000a      	movs	r2, r1
 8000be0:	43d2      	mvns	r2, r2
 8000be2:	401a      	ands	r2, r3
 8000be4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	019b      	lsls	r3, r3, #6
 8000bea:	22ff      	movs	r2, #255	; 0xff
 8000bec:	401a      	ands	r2, r3
 8000bee:	1dfb      	adds	r3, r7, #7
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	4003      	ands	r3, r0
 8000bf8:	00db      	lsls	r3, r3, #3
 8000bfa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bfc:	4809      	ldr	r0, [pc, #36]	; (8000c24 <__NVIC_SetPriority+0xd8>)
 8000bfe:	1dfb      	adds	r3, r7, #7
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	001c      	movs	r4, r3
 8000c04:	230f      	movs	r3, #15
 8000c06:	4023      	ands	r3, r4
 8000c08:	3b08      	subs	r3, #8
 8000c0a:	089b      	lsrs	r3, r3, #2
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	3306      	adds	r3, #6
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	18c3      	adds	r3, r0, r3
 8000c14:	3304      	adds	r3, #4
 8000c16:	601a      	str	r2, [r3, #0]
}
 8000c18:	46c0      	nop			; (mov r8, r8)
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b003      	add	sp, #12
 8000c1e:	bd90      	pop	{r4, r7, pc}
 8000c20:	e000e100 	.word	0xe000e100
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	1e5a      	subs	r2, r3, #1
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	045b      	lsls	r3, r3, #17
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d301      	bcc.n	8000c40 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	e010      	b.n	8000c62 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c40:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <SysTick_Config+0x44>)
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	3a01      	subs	r2, #1
 8000c46:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c48:	2301      	movs	r3, #1
 8000c4a:	425b      	negs	r3, r3
 8000c4c:	2103      	movs	r1, #3
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f7ff ff7c 	bl	8000b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <SysTick_Config+0x44>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c5a:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <SysTick_Config+0x44>)
 8000c5c:	2207      	movs	r2, #7
 8000c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	0018      	movs	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b002      	add	sp, #8
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	e000e010 	.word	0xe000e010

08000c70 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60b9      	str	r1, [r7, #8]
 8000c78:	607a      	str	r2, [r7, #4]
 8000c7a:	210f      	movs	r1, #15
 8000c7c:	187b      	adds	r3, r7, r1
 8000c7e:	1c02      	adds	r2, r0, #0
 8000c80:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	b25b      	sxtb	r3, r3
 8000c8a:	0011      	movs	r1, r2
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f7ff ff5d 	bl	8000b4c <__NVIC_SetPriority>
}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	b004      	add	sp, #16
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	0002      	movs	r2, r0
 8000ca2:	1dfb      	adds	r3, r7, #7
 8000ca4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ca6:	1dfb      	adds	r3, r7, #7
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	b25b      	sxtb	r3, r3
 8000cac:	0018      	movs	r0, r3
 8000cae:	f7ff ff33 	bl	8000b18 <__NVIC_EnableIRQ>
}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	b002      	add	sp, #8
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f7ff ffaf 	bl	8000c28 <SysTick_Config>
 8000cca:	0003      	movs	r3, r0
}
 8000ccc:	0018      	movs	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	b002      	add	sp, #8
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d101      	bne.n	8000cea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e036      	b.n	8000d58 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2221      	movs	r2, #33	; 0x21
 8000cee:	2102      	movs	r1, #2
 8000cf0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	4a18      	ldr	r2, [pc, #96]	; (8000d60 <HAL_DMA_Init+0x8c>)
 8000cfe:	4013      	ands	r3, r2
 8000d00:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000d0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	695b      	ldr	r3, [r3, #20]
 8000d1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	69db      	ldr	r3, [r3, #28]
 8000d28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d2a:	68fa      	ldr	r2, [r7, #12]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f000 f9c4 	bl	80010c8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2200      	movs	r2, #0
 8000d44:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2221      	movs	r2, #33	; 0x21
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2220      	movs	r2, #32
 8000d52:	2100      	movs	r1, #0
 8000d54:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000d56:	2300      	movs	r3, #0
}  
 8000d58:	0018      	movs	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	b004      	add	sp, #16
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	ffffc00f 	.word	0xffffc00f

08000d64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
 8000d70:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000d72:	2317      	movs	r3, #23
 8000d74:	18fb      	adds	r3, r7, r3
 8000d76:	2200      	movs	r2, #0
 8000d78:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	2220      	movs	r2, #32
 8000d7e:	5c9b      	ldrb	r3, [r3, r2]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d101      	bne.n	8000d88 <HAL_DMA_Start_IT+0x24>
 8000d84:	2302      	movs	r3, #2
 8000d86:	e04f      	b.n	8000e28 <HAL_DMA_Start_IT+0xc4>
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	2220      	movs	r2, #32
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	2221      	movs	r2, #33	; 0x21
 8000d94:	5c9b      	ldrb	r3, [r3, r2]
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d13a      	bne.n	8000e12 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	2221      	movs	r2, #33	; 0x21
 8000da0:	2102      	movs	r1, #2
 8000da2:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	2200      	movs	r2, #0
 8000da8:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2101      	movs	r1, #1
 8000db6:	438a      	bics	r2, r1
 8000db8:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	68b9      	ldr	r1, [r7, #8]
 8000dc0:	68f8      	ldr	r0, [r7, #12]
 8000dc2:	f000 f954 	bl	800106e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d008      	beq.n	8000de0 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	210e      	movs	r1, #14
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	e00f      	b.n	8000e00 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	210a      	movs	r1, #10
 8000dec:	430a      	orrs	r2, r1
 8000dee:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2104      	movs	r1, #4
 8000dfc:	438a      	bics	r2, r1
 8000dfe:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	e007      	b.n	8000e22 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	2220      	movs	r2, #32
 8000e16:	2100      	movs	r1, #0
 8000e18:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000e1a:	2317      	movs	r3, #23
 8000e1c:	18fb      	adds	r3, r7, r3
 8000e1e:	2202      	movs	r2, #2
 8000e20:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8000e22:	2317      	movs	r3, #23
 8000e24:	18fb      	adds	r3, r7, r3
 8000e26:	781b      	ldrb	r3, [r3, #0]
} 
 8000e28:	0018      	movs	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	b006      	add	sp, #24
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2221      	movs	r2, #33	; 0x21
 8000e3c:	5c9b      	ldrb	r3, [r3, r2]
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d008      	beq.n	8000e56 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2204      	movs	r2, #4
 8000e48:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2220      	movs	r2, #32
 8000e4e:	2100      	movs	r1, #0
 8000e50:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e020      	b.n	8000e98 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	210e      	movs	r1, #14
 8000e62:	438a      	bics	r2, r1
 8000e64:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2101      	movs	r1, #1
 8000e72:	438a      	bics	r2, r1
 8000e74:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e7e:	2101      	movs	r1, #1
 8000e80:	4091      	lsls	r1, r2
 8000e82:	000a      	movs	r2, r1
 8000e84:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2221      	movs	r2, #33	; 0x21
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2220      	movs	r2, #32
 8000e92:	2100      	movs	r1, #0
 8000e94:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000e96:	2300      	movs	r3, #0
}
 8000e98:	0018      	movs	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	b002      	add	sp, #8
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ea8:	210f      	movs	r1, #15
 8000eaa:	187b      	adds	r3, r7, r1
 8000eac:	2200      	movs	r2, #0
 8000eae:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2221      	movs	r2, #33	; 0x21
 8000eb4:	5c9b      	ldrb	r3, [r3, r2]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d006      	beq.n	8000eca <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2204      	movs	r2, #4
 8000ec0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ec2:	187b      	adds	r3, r7, r1
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	701a      	strb	r2, [r3, #0]
 8000ec8:	e028      	b.n	8000f1c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	210e      	movs	r1, #14
 8000ed6:	438a      	bics	r2, r1
 8000ed8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	438a      	bics	r2, r1
 8000ee8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	4091      	lsls	r1, r2
 8000ef6:	000a      	movs	r2, r1
 8000ef8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2221      	movs	r2, #33	; 0x21
 8000efe:	2101      	movs	r1, #1
 8000f00:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2220      	movs	r2, #32
 8000f06:	2100      	movs	r1, #0
 8000f08:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d004      	beq.n	8000f1c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	0010      	movs	r0, r2
 8000f1a:	4798      	blx	r3
    } 
  }
  return status;
 8000f1c:	230f      	movs	r3, #15
 8000f1e:	18fb      	adds	r3, r7, r3
 8000f20:	781b      	ldrb	r3, [r3, #0]
}
 8000f22:	0018      	movs	r0, r3
 8000f24:	46bd      	mov	sp, r7
 8000f26:	b004      	add	sp, #16
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b084      	sub	sp, #16
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	2204      	movs	r2, #4
 8000f48:	409a      	lsls	r2, r3
 8000f4a:	0013      	movs	r3, r2
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	d024      	beq.n	8000f9c <HAL_DMA_IRQHandler+0x72>
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	2204      	movs	r2, #4
 8000f56:	4013      	ands	r3, r2
 8000f58:	d020      	beq.n	8000f9c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2220      	movs	r2, #32
 8000f62:	4013      	ands	r3, r2
 8000f64:	d107      	bne.n	8000f76 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2104      	movs	r1, #4
 8000f72:	438a      	bics	r2, r1
 8000f74:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f7e:	2104      	movs	r1, #4
 8000f80:	4091      	lsls	r1, r2
 8000f82:	000a      	movs	r2, r1
 8000f84:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d100      	bne.n	8000f90 <HAL_DMA_IRQHandler+0x66>
 8000f8e:	e06a      	b.n	8001066 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	0010      	movs	r0, r2
 8000f98:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000f9a:	e064      	b.n	8001066 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	2202      	movs	r2, #2
 8000fa2:	409a      	lsls	r2, r3
 8000fa4:	0013      	movs	r3, r2
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	d02b      	beq.n	8001004 <HAL_DMA_IRQHandler+0xda>
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	2202      	movs	r2, #2
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	d027      	beq.n	8001004 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2220      	movs	r2, #32
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	d10b      	bne.n	8000fd8 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	210a      	movs	r1, #10
 8000fcc:	438a      	bics	r2, r1
 8000fce:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2221      	movs	r2, #33	; 0x21
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fe0:	2102      	movs	r1, #2
 8000fe2:	4091      	lsls	r1, r2
 8000fe4:	000a      	movs	r2, r1
 8000fe6:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2220      	movs	r2, #32
 8000fec:	2100      	movs	r1, #0
 8000fee:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d036      	beq.n	8001066 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	0010      	movs	r0, r2
 8001000:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001002:	e030      	b.n	8001066 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	2208      	movs	r2, #8
 800100a:	409a      	lsls	r2, r3
 800100c:	0013      	movs	r3, r2
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	4013      	ands	r3, r2
 8001012:	d028      	beq.n	8001066 <HAL_DMA_IRQHandler+0x13c>
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	2208      	movs	r2, #8
 8001018:	4013      	ands	r3, r2
 800101a:	d024      	beq.n	8001066 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	210e      	movs	r1, #14
 8001028:	438a      	bics	r2, r1
 800102a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001034:	2101      	movs	r1, #1
 8001036:	4091      	lsls	r1, r2
 8001038:	000a      	movs	r2, r1
 800103a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2201      	movs	r2, #1
 8001040:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2221      	movs	r2, #33	; 0x21
 8001046:	2101      	movs	r1, #1
 8001048:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2220      	movs	r2, #32
 800104e:	2100      	movs	r1, #0
 8001050:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	2b00      	cmp	r3, #0
 8001058:	d005      	beq.n	8001066 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	0010      	movs	r0, r2
 8001062:	4798      	blx	r3
    }
   }
}  
 8001064:	e7ff      	b.n	8001066 <HAL_DMA_IRQHandler+0x13c>
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	46bd      	mov	sp, r7
 800106a:	b004      	add	sp, #16
 800106c:	bd80      	pop	{r7, pc}

0800106e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b084      	sub	sp, #16
 8001072:	af00      	add	r7, sp, #0
 8001074:	60f8      	str	r0, [r7, #12]
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
 800107a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001084:	2101      	movs	r1, #1
 8001086:	4091      	lsls	r1, r2
 8001088:	000a      	movs	r2, r1
 800108a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	683a      	ldr	r2, [r7, #0]
 8001092:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2b10      	cmp	r3, #16
 800109a:	d108      	bne.n	80010ae <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	68ba      	ldr	r2, [r7, #8]
 80010aa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80010ac:	e007      	b.n	80010be <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	60da      	str	r2, [r3, #12]
}
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	46bd      	mov	sp, r7
 80010c2:	b004      	add	sp, #16
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a08      	ldr	r2, [pc, #32]	; (80010f8 <DMA_CalcBaseAndBitshift+0x30>)
 80010d6:	4694      	mov	ip, r2
 80010d8:	4463      	add	r3, ip
 80010da:	2114      	movs	r1, #20
 80010dc:	0018      	movs	r0, r3
 80010de:	f7ff f813 	bl	8000108 <__udivsi3>
 80010e2:	0003      	movs	r3, r0
 80010e4:	009a      	lsls	r2, r3, #2
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a03      	ldr	r2, [pc, #12]	; (80010fc <DMA_CalcBaseAndBitshift+0x34>)
 80010ee:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80010f0:	46c0      	nop			; (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b002      	add	sp, #8
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	bffdfff8 	.word	0xbffdfff8
 80010fc:	40020000 	.word	0x40020000

08001100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800110e:	e14f      	b.n	80013b0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2101      	movs	r1, #1
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	4091      	lsls	r1, r2
 800111a:	000a      	movs	r2, r1
 800111c:	4013      	ands	r3, r2
 800111e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d100      	bne.n	8001128 <HAL_GPIO_Init+0x28>
 8001126:	e140      	b.n	80013aa <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	2203      	movs	r2, #3
 800112e:	4013      	ands	r3, r2
 8001130:	2b01      	cmp	r3, #1
 8001132:	d005      	beq.n	8001140 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	2203      	movs	r2, #3
 800113a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800113c:	2b02      	cmp	r3, #2
 800113e:	d130      	bne.n	80011a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	2203      	movs	r2, #3
 800114c:	409a      	lsls	r2, r3
 800114e:	0013      	movs	r3, r2
 8001150:	43da      	mvns	r2, r3
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	68da      	ldr	r2, [r3, #12]
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	409a      	lsls	r2, r3
 8001162:	0013      	movs	r3, r2
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4313      	orrs	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001176:	2201      	movs	r2, #1
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	409a      	lsls	r2, r3
 800117c:	0013      	movs	r3, r2
 800117e:	43da      	mvns	r2, r3
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	4013      	ands	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	091b      	lsrs	r3, r3, #4
 800118c:	2201      	movs	r2, #1
 800118e:	401a      	ands	r2, r3
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	409a      	lsls	r2, r3
 8001194:	0013      	movs	r3, r2
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2203      	movs	r2, #3
 80011a8:	4013      	ands	r3, r2
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	d017      	beq.n	80011de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	2203      	movs	r2, #3
 80011ba:	409a      	lsls	r2, r3
 80011bc:	0013      	movs	r3, r2
 80011be:	43da      	mvns	r2, r3
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	4013      	ands	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	689a      	ldr	r2, [r3, #8]
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	409a      	lsls	r2, r3
 80011d0:	0013      	movs	r3, r2
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2203      	movs	r2, #3
 80011e4:	4013      	ands	r3, r2
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d123      	bne.n	8001232 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	08da      	lsrs	r2, r3, #3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3208      	adds	r2, #8
 80011f2:	0092      	lsls	r2, r2, #2
 80011f4:	58d3      	ldr	r3, [r2, r3]
 80011f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	2207      	movs	r2, #7
 80011fc:	4013      	ands	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	220f      	movs	r2, #15
 8001202:	409a      	lsls	r2, r3
 8001204:	0013      	movs	r3, r2
 8001206:	43da      	mvns	r2, r3
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	4013      	ands	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	691a      	ldr	r2, [r3, #16]
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	2107      	movs	r1, #7
 8001216:	400b      	ands	r3, r1
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	409a      	lsls	r2, r3
 800121c:	0013      	movs	r3, r2
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	08da      	lsrs	r2, r3, #3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3208      	adds	r2, #8
 800122c:	0092      	lsls	r2, r2, #2
 800122e:	6939      	ldr	r1, [r7, #16]
 8001230:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	2203      	movs	r2, #3
 800123e:	409a      	lsls	r2, r3
 8001240:	0013      	movs	r3, r2
 8001242:	43da      	mvns	r2, r3
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	4013      	ands	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2203      	movs	r2, #3
 8001250:	401a      	ands	r2, r3
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	409a      	lsls	r2, r3
 8001258:	0013      	movs	r3, r2
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	23c0      	movs	r3, #192	; 0xc0
 800126c:	029b      	lsls	r3, r3, #10
 800126e:	4013      	ands	r3, r2
 8001270:	d100      	bne.n	8001274 <HAL_GPIO_Init+0x174>
 8001272:	e09a      	b.n	80013aa <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001274:	4b54      	ldr	r3, [pc, #336]	; (80013c8 <HAL_GPIO_Init+0x2c8>)
 8001276:	699a      	ldr	r2, [r3, #24]
 8001278:	4b53      	ldr	r3, [pc, #332]	; (80013c8 <HAL_GPIO_Init+0x2c8>)
 800127a:	2101      	movs	r1, #1
 800127c:	430a      	orrs	r2, r1
 800127e:	619a      	str	r2, [r3, #24]
 8001280:	4b51      	ldr	r3, [pc, #324]	; (80013c8 <HAL_GPIO_Init+0x2c8>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	2201      	movs	r2, #1
 8001286:	4013      	ands	r3, r2
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800128c:	4a4f      	ldr	r2, [pc, #316]	; (80013cc <HAL_GPIO_Init+0x2cc>)
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	089b      	lsrs	r3, r3, #2
 8001292:	3302      	adds	r3, #2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	589b      	ldr	r3, [r3, r2]
 8001298:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	2203      	movs	r2, #3
 800129e:	4013      	ands	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	220f      	movs	r2, #15
 80012a4:	409a      	lsls	r2, r3
 80012a6:	0013      	movs	r3, r2
 80012a8:	43da      	mvns	r2, r3
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	2390      	movs	r3, #144	; 0x90
 80012b4:	05db      	lsls	r3, r3, #23
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d013      	beq.n	80012e2 <HAL_GPIO_Init+0x1e2>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a44      	ldr	r2, [pc, #272]	; (80013d0 <HAL_GPIO_Init+0x2d0>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d00d      	beq.n	80012de <HAL_GPIO_Init+0x1de>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a43      	ldr	r2, [pc, #268]	; (80013d4 <HAL_GPIO_Init+0x2d4>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d007      	beq.n	80012da <HAL_GPIO_Init+0x1da>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a42      	ldr	r2, [pc, #264]	; (80013d8 <HAL_GPIO_Init+0x2d8>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d101      	bne.n	80012d6 <HAL_GPIO_Init+0x1d6>
 80012d2:	2303      	movs	r3, #3
 80012d4:	e006      	b.n	80012e4 <HAL_GPIO_Init+0x1e4>
 80012d6:	2305      	movs	r3, #5
 80012d8:	e004      	b.n	80012e4 <HAL_GPIO_Init+0x1e4>
 80012da:	2302      	movs	r3, #2
 80012dc:	e002      	b.n	80012e4 <HAL_GPIO_Init+0x1e4>
 80012de:	2301      	movs	r3, #1
 80012e0:	e000      	b.n	80012e4 <HAL_GPIO_Init+0x1e4>
 80012e2:	2300      	movs	r3, #0
 80012e4:	697a      	ldr	r2, [r7, #20]
 80012e6:	2103      	movs	r1, #3
 80012e8:	400a      	ands	r2, r1
 80012ea:	0092      	lsls	r2, r2, #2
 80012ec:	4093      	lsls	r3, r2
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012f4:	4935      	ldr	r1, [pc, #212]	; (80013cc <HAL_GPIO_Init+0x2cc>)
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	089b      	lsrs	r3, r3, #2
 80012fa:	3302      	adds	r3, #2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001302:	4b36      	ldr	r3, [pc, #216]	; (80013dc <HAL_GPIO_Init+0x2dc>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	43da      	mvns	r2, r3
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	2380      	movs	r3, #128	; 0x80
 8001318:	025b      	lsls	r3, r3, #9
 800131a:	4013      	ands	r3, r2
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4313      	orrs	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001326:	4b2d      	ldr	r3, [pc, #180]	; (80013dc <HAL_GPIO_Init+0x2dc>)
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800132c:	4b2b      	ldr	r3, [pc, #172]	; (80013dc <HAL_GPIO_Init+0x2dc>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	43da      	mvns	r2, r3
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	4013      	ands	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	2380      	movs	r3, #128	; 0x80
 8001342:	029b      	lsls	r3, r3, #10
 8001344:	4013      	ands	r3, r2
 8001346:	d003      	beq.n	8001350 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	4313      	orrs	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001350:	4b22      	ldr	r3, [pc, #136]	; (80013dc <HAL_GPIO_Init+0x2dc>)
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001356:	4b21      	ldr	r3, [pc, #132]	; (80013dc <HAL_GPIO_Init+0x2dc>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	43da      	mvns	r2, r3
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4013      	ands	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	2380      	movs	r3, #128	; 0x80
 800136c:	035b      	lsls	r3, r3, #13
 800136e:	4013      	ands	r3, r2
 8001370:	d003      	beq.n	800137a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4313      	orrs	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800137a:	4b18      	ldr	r3, [pc, #96]	; (80013dc <HAL_GPIO_Init+0x2dc>)
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001380:	4b16      	ldr	r3, [pc, #88]	; (80013dc <HAL_GPIO_Init+0x2dc>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	43da      	mvns	r2, r3
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	4013      	ands	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	2380      	movs	r3, #128	; 0x80
 8001396:	039b      	lsls	r3, r3, #14
 8001398:	4013      	ands	r3, r2
 800139a:	d003      	beq.n	80013a4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013a4:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <HAL_GPIO_Init+0x2dc>)
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	3301      	adds	r3, #1
 80013ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	40da      	lsrs	r2, r3
 80013b8:	1e13      	subs	r3, r2, #0
 80013ba:	d000      	beq.n	80013be <HAL_GPIO_Init+0x2be>
 80013bc:	e6a8      	b.n	8001110 <HAL_GPIO_Init+0x10>
  } 
}
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	46c0      	nop			; (mov r8, r8)
 80013c2:	46bd      	mov	sp, r7
 80013c4:	b006      	add	sp, #24
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40010000 	.word	0x40010000
 80013d0:	48000400 	.word	0x48000400
 80013d4:	48000800 	.word	0x48000800
 80013d8:	48000c00 	.word	0x48000c00
 80013dc:	40010400 	.word	0x40010400

080013e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	0008      	movs	r0, r1
 80013ea:	0011      	movs	r1, r2
 80013ec:	1cbb      	adds	r3, r7, #2
 80013ee:	1c02      	adds	r2, r0, #0
 80013f0:	801a      	strh	r2, [r3, #0]
 80013f2:	1c7b      	adds	r3, r7, #1
 80013f4:	1c0a      	adds	r2, r1, #0
 80013f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013f8:	1c7b      	adds	r3, r7, #1
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d004      	beq.n	800140a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001400:	1cbb      	adds	r3, r7, #2
 8001402:	881a      	ldrh	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001408:	e003      	b.n	8001412 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800140a:	1cbb      	adds	r3, r7, #2
 800140c:	881a      	ldrh	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001412:	46c0      	nop			; (mov r8, r8)
 8001414:	46bd      	mov	sp, r7
 8001416:	b002      	add	sp, #8
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e082      	b.n	8001534 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2241      	movs	r2, #65	; 0x41
 8001432:	5c9b      	ldrb	r3, [r3, r2]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d107      	bne.n	800144a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2240      	movs	r2, #64	; 0x40
 800143e:	2100      	movs	r1, #0
 8001440:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	0018      	movs	r0, r3
 8001446:	f7ff f97f 	bl	8000748 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2241      	movs	r2, #65	; 0x41
 800144e:	2124      	movs	r1, #36	; 0x24
 8001450:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2101      	movs	r1, #1
 800145e:	438a      	bics	r2, r1
 8001460:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4934      	ldr	r1, [pc, #208]	; (800153c <HAL_I2C_Init+0x120>)
 800146c:	400a      	ands	r2, r1
 800146e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	689a      	ldr	r2, [r3, #8]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4931      	ldr	r1, [pc, #196]	; (8001540 <HAL_I2C_Init+0x124>)
 800147c:	400a      	ands	r2, r1
 800147e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d108      	bne.n	800149a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2180      	movs	r1, #128	; 0x80
 8001492:	0209      	lsls	r1, r1, #8
 8001494:	430a      	orrs	r2, r1
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	e007      	b.n	80014aa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689a      	ldr	r2, [r3, #8]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2184      	movs	r1, #132	; 0x84
 80014a4:	0209      	lsls	r1, r1, #8
 80014a6:	430a      	orrs	r2, r1
 80014a8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d104      	bne.n	80014bc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2280      	movs	r2, #128	; 0x80
 80014b8:	0112      	lsls	r2, r2, #4
 80014ba:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	491f      	ldr	r1, [pc, #124]	; (8001544 <HAL_I2C_Init+0x128>)
 80014c8:	430a      	orrs	r2, r1
 80014ca:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68da      	ldr	r2, [r3, #12]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	491a      	ldr	r1, [pc, #104]	; (8001540 <HAL_I2C_Init+0x124>)
 80014d8:	400a      	ands	r2, r1
 80014da:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	691a      	ldr	r2, [r3, #16]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	695b      	ldr	r3, [r3, #20]
 80014e4:	431a      	orrs	r2, r3
 80014e6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	430a      	orrs	r2, r1
 80014f4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69d9      	ldr	r1, [r3, #28]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a1a      	ldr	r2, [r3, #32]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2101      	movs	r1, #1
 8001512:	430a      	orrs	r2, r1
 8001514:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2241      	movs	r2, #65	; 0x41
 8001520:	2120      	movs	r1, #32
 8001522:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2242      	movs	r2, #66	; 0x42
 800152e:	2100      	movs	r1, #0
 8001530:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001532:	2300      	movs	r3, #0
}
 8001534:	0018      	movs	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	b002      	add	sp, #8
 800153a:	bd80      	pop	{r7, pc}
 800153c:	f0ffffff 	.word	0xf0ffffff
 8001540:	ffff7fff 	.word	0xffff7fff
 8001544:	02008000 	.word	0x02008000

08001548 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b089      	sub	sp, #36	; 0x24
 800154c:	af02      	add	r7, sp, #8
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	0008      	movs	r0, r1
 8001552:	607a      	str	r2, [r7, #4]
 8001554:	0019      	movs	r1, r3
 8001556:	230a      	movs	r3, #10
 8001558:	18fb      	adds	r3, r7, r3
 800155a:	1c02      	adds	r2, r0, #0
 800155c:	801a      	strh	r2, [r3, #0]
 800155e:	2308      	movs	r3, #8
 8001560:	18fb      	adds	r3, r7, r3
 8001562:	1c0a      	adds	r2, r1, #0
 8001564:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2241      	movs	r2, #65	; 0x41
 800156a:	5c9b      	ldrb	r3, [r3, r2]
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b20      	cmp	r3, #32
 8001570:	d000      	beq.n	8001574 <HAL_I2C_Master_Transmit+0x2c>
 8001572:	e0e7      	b.n	8001744 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2240      	movs	r2, #64	; 0x40
 8001578:	5c9b      	ldrb	r3, [r3, r2]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d101      	bne.n	8001582 <HAL_I2C_Master_Transmit+0x3a>
 800157e:	2302      	movs	r3, #2
 8001580:	e0e1      	b.n	8001746 <HAL_I2C_Master_Transmit+0x1fe>
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2240      	movs	r2, #64	; 0x40
 8001586:	2101      	movs	r1, #1
 8001588:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800158a:	f7ff fa97 	bl	8000abc <HAL_GetTick>
 800158e:	0003      	movs	r3, r0
 8001590:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001592:	2380      	movs	r3, #128	; 0x80
 8001594:	0219      	lsls	r1, r3, #8
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	2319      	movs	r3, #25
 800159e:	2201      	movs	r2, #1
 80015a0:	f000 f8fc 	bl	800179c <I2C_WaitOnFlagUntilTimeout>
 80015a4:	1e03      	subs	r3, r0, #0
 80015a6:	d001      	beq.n	80015ac <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e0cc      	b.n	8001746 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2241      	movs	r2, #65	; 0x41
 80015b0:	2121      	movs	r1, #33	; 0x21
 80015b2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2242      	movs	r2, #66	; 0x42
 80015b8:	2110      	movs	r1, #16
 80015ba:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2200      	movs	r2, #0
 80015c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2208      	movs	r2, #8
 80015cc:	18ba      	adds	r2, r7, r2
 80015ce:	8812      	ldrh	r2, [r2, #0]
 80015d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2200      	movs	r2, #0
 80015d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015dc:	b29b      	uxth	r3, r3
 80015de:	2bff      	cmp	r3, #255	; 0xff
 80015e0:	d911      	bls.n	8001606 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	22ff      	movs	r2, #255	; 0xff
 80015e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	2380      	movs	r3, #128	; 0x80
 80015f0:	045c      	lsls	r4, r3, #17
 80015f2:	230a      	movs	r3, #10
 80015f4:	18fb      	adds	r3, r7, r3
 80015f6:	8819      	ldrh	r1, [r3, #0]
 80015f8:	68f8      	ldr	r0, [r7, #12]
 80015fa:	4b55      	ldr	r3, [pc, #340]	; (8001750 <HAL_I2C_Master_Transmit+0x208>)
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	0023      	movs	r3, r4
 8001600:	f000 fa00 	bl	8001a04 <I2C_TransferConfig>
 8001604:	e075      	b.n	80016f2 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800160a:	b29a      	uxth	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001614:	b2da      	uxtb	r2, r3
 8001616:	2380      	movs	r3, #128	; 0x80
 8001618:	049c      	lsls	r4, r3, #18
 800161a:	230a      	movs	r3, #10
 800161c:	18fb      	adds	r3, r7, r3
 800161e:	8819      	ldrh	r1, [r3, #0]
 8001620:	68f8      	ldr	r0, [r7, #12]
 8001622:	4b4b      	ldr	r3, [pc, #300]	; (8001750 <HAL_I2C_Master_Transmit+0x208>)
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	0023      	movs	r3, r4
 8001628:	f000 f9ec 	bl	8001a04 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800162c:	e061      	b.n	80016f2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	0018      	movs	r0, r3
 8001636:	f000 f8f0 	bl	800181a <I2C_WaitOnTXISFlagUntilTimeout>
 800163a:	1e03      	subs	r3, r0, #0
 800163c:	d001      	beq.n	8001642 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e081      	b.n	8001746 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001646:	781a      	ldrb	r2, [r3, #0]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001652:	1c5a      	adds	r2, r3, #1
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800165c:	b29b      	uxth	r3, r3
 800165e:	3b01      	subs	r3, #1
 8001660:	b29a      	uxth	r2, r3
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800166a:	3b01      	subs	r3, #1
 800166c:	b29a      	uxth	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001676:	b29b      	uxth	r3, r3
 8001678:	2b00      	cmp	r3, #0
 800167a:	d03a      	beq.n	80016f2 <HAL_I2C_Master_Transmit+0x1aa>
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001680:	2b00      	cmp	r3, #0
 8001682:	d136      	bne.n	80016f2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001684:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001686:	68f8      	ldr	r0, [r7, #12]
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	0013      	movs	r3, r2
 800168e:	2200      	movs	r2, #0
 8001690:	2180      	movs	r1, #128	; 0x80
 8001692:	f000 f883 	bl	800179c <I2C_WaitOnFlagUntilTimeout>
 8001696:	1e03      	subs	r3, r0, #0
 8001698:	d001      	beq.n	800169e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e053      	b.n	8001746 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	2bff      	cmp	r3, #255	; 0xff
 80016a6:	d911      	bls.n	80016cc <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	22ff      	movs	r2, #255	; 0xff
 80016ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	2380      	movs	r3, #128	; 0x80
 80016b6:	045c      	lsls	r4, r3, #17
 80016b8:	230a      	movs	r3, #10
 80016ba:	18fb      	adds	r3, r7, r3
 80016bc:	8819      	ldrh	r1, [r3, #0]
 80016be:	68f8      	ldr	r0, [r7, #12]
 80016c0:	2300      	movs	r3, #0
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	0023      	movs	r3, r4
 80016c6:	f000 f99d 	bl	8001a04 <I2C_TransferConfig>
 80016ca:	e012      	b.n	80016f2 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	2380      	movs	r3, #128	; 0x80
 80016de:	049c      	lsls	r4, r3, #18
 80016e0:	230a      	movs	r3, #10
 80016e2:	18fb      	adds	r3, r7, r3
 80016e4:	8819      	ldrh	r1, [r3, #0]
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	2300      	movs	r3, #0
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	0023      	movs	r3, r4
 80016ee:	f000 f989 	bl	8001a04 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d198      	bne.n	800162e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	0018      	movs	r0, r3
 8001704:	f000 f8c8 	bl	8001898 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001708:	1e03      	subs	r3, r0, #0
 800170a:	d001      	beq.n	8001710 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e01a      	b.n	8001746 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2220      	movs	r2, #32
 8001716:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	490c      	ldr	r1, [pc, #48]	; (8001754 <HAL_I2C_Master_Transmit+0x20c>)
 8001724:	400a      	ands	r2, r1
 8001726:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2241      	movs	r2, #65	; 0x41
 800172c:	2120      	movs	r1, #32
 800172e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2242      	movs	r2, #66	; 0x42
 8001734:	2100      	movs	r1, #0
 8001736:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2240      	movs	r2, #64	; 0x40
 800173c:	2100      	movs	r1, #0
 800173e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001740:	2300      	movs	r3, #0
 8001742:	e000      	b.n	8001746 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001744:	2302      	movs	r3, #2
  }
}
 8001746:	0018      	movs	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	b007      	add	sp, #28
 800174c:	bd90      	pop	{r4, r7, pc}
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	80002000 	.word	0x80002000
 8001754:	fe00e800 	.word	0xfe00e800

08001758 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	2202      	movs	r2, #2
 8001768:	4013      	ands	r3, r2
 800176a:	2b02      	cmp	r3, #2
 800176c:	d103      	bne.n	8001776 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2200      	movs	r2, #0
 8001774:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	2201      	movs	r2, #1
 800177e:	4013      	ands	r3, r2
 8001780:	2b01      	cmp	r3, #1
 8001782:	d007      	beq.n	8001794 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	699a      	ldr	r2, [r3, #24]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2101      	movs	r1, #1
 8001790:	430a      	orrs	r2, r1
 8001792:	619a      	str	r2, [r3, #24]
  }
}
 8001794:	46c0      	nop			; (mov r8, r8)
 8001796:	46bd      	mov	sp, r7
 8001798:	b002      	add	sp, #8
 800179a:	bd80      	pop	{r7, pc}

0800179c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	1dfb      	adds	r3, r7, #7
 80017aa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017ac:	e021      	b.n	80017f2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	3301      	adds	r3, #1
 80017b2:	d01e      	beq.n	80017f2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017b4:	f7ff f982 	bl	8000abc <HAL_GetTick>
 80017b8:	0002      	movs	r2, r0
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d302      	bcc.n	80017ca <I2C_WaitOnFlagUntilTimeout+0x2e>
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d113      	bne.n	80017f2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	2220      	movs	r2, #32
 80017d0:	431a      	orrs	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2241      	movs	r2, #65	; 0x41
 80017da:	2120      	movs	r1, #32
 80017dc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2242      	movs	r2, #66	; 0x42
 80017e2:	2100      	movs	r1, #0
 80017e4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2240      	movs	r2, #64	; 0x40
 80017ea:	2100      	movs	r1, #0
 80017ec:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00f      	b.n	8001812 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	68ba      	ldr	r2, [r7, #8]
 80017fa:	4013      	ands	r3, r2
 80017fc:	68ba      	ldr	r2, [r7, #8]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	425a      	negs	r2, r3
 8001802:	4153      	adcs	r3, r2
 8001804:	b2db      	uxtb	r3, r3
 8001806:	001a      	movs	r2, r3
 8001808:	1dfb      	adds	r3, r7, #7
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d0ce      	beq.n	80017ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	0018      	movs	r0, r3
 8001814:	46bd      	mov	sp, r7
 8001816:	b004      	add	sp, #16
 8001818:	bd80      	pop	{r7, pc}

0800181a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b084      	sub	sp, #16
 800181e:	af00      	add	r7, sp, #0
 8001820:	60f8      	str	r0, [r7, #12]
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001826:	e02b      	b.n	8001880 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	68b9      	ldr	r1, [r7, #8]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	0018      	movs	r0, r3
 8001830:	f000 f86e 	bl	8001910 <I2C_IsAcknowledgeFailed>
 8001834:	1e03      	subs	r3, r0, #0
 8001836:	d001      	beq.n	800183c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e029      	b.n	8001890 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	3301      	adds	r3, #1
 8001840:	d01e      	beq.n	8001880 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001842:	f7ff f93b 	bl	8000abc <HAL_GetTick>
 8001846:	0002      	movs	r2, r0
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	68ba      	ldr	r2, [r7, #8]
 800184e:	429a      	cmp	r2, r3
 8001850:	d302      	bcc.n	8001858 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d113      	bne.n	8001880 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185c:	2220      	movs	r2, #32
 800185e:	431a      	orrs	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2241      	movs	r2, #65	; 0x41
 8001868:	2120      	movs	r1, #32
 800186a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2242      	movs	r2, #66	; 0x42
 8001870:	2100      	movs	r1, #0
 8001872:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2240      	movs	r2, #64	; 0x40
 8001878:	2100      	movs	r1, #0
 800187a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e007      	b.n	8001890 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	2202      	movs	r2, #2
 8001888:	4013      	ands	r3, r2
 800188a:	2b02      	cmp	r3, #2
 800188c:	d1cc      	bne.n	8001828 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800188e:	2300      	movs	r3, #0
}
 8001890:	0018      	movs	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	b004      	add	sp, #16
 8001896:	bd80      	pop	{r7, pc}

08001898 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018a4:	e028      	b.n	80018f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	68b9      	ldr	r1, [r7, #8]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	0018      	movs	r0, r3
 80018ae:	f000 f82f 	bl	8001910 <I2C_IsAcknowledgeFailed>
 80018b2:	1e03      	subs	r3, r0, #0
 80018b4:	d001      	beq.n	80018ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e026      	b.n	8001908 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018ba:	f7ff f8ff 	bl	8000abc <HAL_GetTick>
 80018be:	0002      	movs	r2, r0
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	68ba      	ldr	r2, [r7, #8]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d302      	bcc.n	80018d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d113      	bne.n	80018f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d4:	2220      	movs	r2, #32
 80018d6:	431a      	orrs	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2241      	movs	r2, #65	; 0x41
 80018e0:	2120      	movs	r1, #32
 80018e2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2242      	movs	r2, #66	; 0x42
 80018e8:	2100      	movs	r1, #0
 80018ea:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2240      	movs	r2, #64	; 0x40
 80018f0:	2100      	movs	r1, #0
 80018f2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e007      	b.n	8001908 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	2220      	movs	r2, #32
 8001900:	4013      	ands	r3, r2
 8001902:	2b20      	cmp	r3, #32
 8001904:	d1cf      	bne.n	80018a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001906:	2300      	movs	r3, #0
}
 8001908:	0018      	movs	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	b004      	add	sp, #16
 800190e:	bd80      	pop	{r7, pc}

08001910 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	2210      	movs	r2, #16
 8001924:	4013      	ands	r3, r2
 8001926:	2b10      	cmp	r3, #16
 8001928:	d164      	bne.n	80019f4 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	2380      	movs	r3, #128	; 0x80
 8001932:	049b      	lsls	r3, r3, #18
 8001934:	401a      	ands	r2, r3
 8001936:	2380      	movs	r3, #128	; 0x80
 8001938:	049b      	lsls	r3, r3, #18
 800193a:	429a      	cmp	r2, r3
 800193c:	d02b      	beq.n	8001996 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2180      	movs	r1, #128	; 0x80
 800194a:	01c9      	lsls	r1, r1, #7
 800194c:	430a      	orrs	r2, r1
 800194e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001950:	e021      	b.n	8001996 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	3301      	adds	r3, #1
 8001956:	d01e      	beq.n	8001996 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001958:	f7ff f8b0 	bl	8000abc <HAL_GetTick>
 800195c:	0002      	movs	r2, r0
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	429a      	cmp	r2, r3
 8001966:	d302      	bcc.n	800196e <I2C_IsAcknowledgeFailed+0x5e>
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d113      	bne.n	8001996 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	2220      	movs	r2, #32
 8001974:	431a      	orrs	r2, r3
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2241      	movs	r2, #65	; 0x41
 800197e:	2120      	movs	r1, #32
 8001980:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2242      	movs	r2, #66	; 0x42
 8001986:	2100      	movs	r1, #0
 8001988:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2240      	movs	r2, #64	; 0x40
 800198e:	2100      	movs	r1, #0
 8001990:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e02f      	b.n	80019f6 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	2220      	movs	r2, #32
 800199e:	4013      	ands	r3, r2
 80019a0:	2b20      	cmp	r3, #32
 80019a2:	d1d6      	bne.n	8001952 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2210      	movs	r2, #16
 80019aa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2220      	movs	r2, #32
 80019b2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	0018      	movs	r0, r3
 80019b8:	f7ff fece 	bl	8001758 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	490e      	ldr	r1, [pc, #56]	; (8001a00 <I2C_IsAcknowledgeFailed+0xf0>)
 80019c8:	400a      	ands	r2, r1
 80019ca:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d0:	2204      	movs	r2, #4
 80019d2:	431a      	orrs	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2241      	movs	r2, #65	; 0x41
 80019dc:	2120      	movs	r1, #32
 80019de:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2242      	movs	r2, #66	; 0x42
 80019e4:	2100      	movs	r1, #0
 80019e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2240      	movs	r2, #64	; 0x40
 80019ec:	2100      	movs	r1, #0
 80019ee:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	0018      	movs	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	b004      	add	sp, #16
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	fe00e800 	.word	0xfe00e800

08001a04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001a04:	b590      	push	{r4, r7, lr}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	0008      	movs	r0, r1
 8001a0e:	0011      	movs	r1, r2
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	240a      	movs	r4, #10
 8001a14:	193b      	adds	r3, r7, r4
 8001a16:	1c02      	adds	r2, r0, #0
 8001a18:	801a      	strh	r2, [r3, #0]
 8001a1a:	2009      	movs	r0, #9
 8001a1c:	183b      	adds	r3, r7, r0
 8001a1e:	1c0a      	adds	r2, r1, #0
 8001a20:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	6a3a      	ldr	r2, [r7, #32]
 8001a2a:	0d51      	lsrs	r1, r2, #21
 8001a2c:	2280      	movs	r2, #128	; 0x80
 8001a2e:	00d2      	lsls	r2, r2, #3
 8001a30:	400a      	ands	r2, r1
 8001a32:	490e      	ldr	r1, [pc, #56]	; (8001a6c <I2C_TransferConfig+0x68>)
 8001a34:	430a      	orrs	r2, r1
 8001a36:	43d2      	mvns	r2, r2
 8001a38:	401a      	ands	r2, r3
 8001a3a:	0011      	movs	r1, r2
 8001a3c:	193b      	adds	r3, r7, r4
 8001a3e:	881b      	ldrh	r3, [r3, #0]
 8001a40:	059b      	lsls	r3, r3, #22
 8001a42:	0d9a      	lsrs	r2, r3, #22
 8001a44:	183b      	adds	r3, r7, r0
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	0418      	lsls	r0, r3, #16
 8001a4a:	23ff      	movs	r3, #255	; 0xff
 8001a4c:	041b      	lsls	r3, r3, #16
 8001a4e:	4003      	ands	r3, r0
 8001a50:	431a      	orrs	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	431a      	orrs	r2, r3
 8001a56:	6a3b      	ldr	r3, [r7, #32]
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	46bd      	mov	sp, r7
 8001a66:	b005      	add	sp, #20
 8001a68:	bd90      	pop	{r4, r7, pc}
 8001a6a:	46c0      	nop			; (mov r8, r8)
 8001a6c:	03ff63ff 	.word	0x03ff63ff

08001a70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2241      	movs	r2, #65	; 0x41
 8001a7e:	5c9b      	ldrb	r3, [r3, r2]
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b20      	cmp	r3, #32
 8001a84:	d138      	bne.n	8001af8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2240      	movs	r2, #64	; 0x40
 8001a8a:	5c9b      	ldrb	r3, [r3, r2]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d101      	bne.n	8001a94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a90:	2302      	movs	r3, #2
 8001a92:	e032      	b.n	8001afa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2240      	movs	r2, #64	; 0x40
 8001a98:	2101      	movs	r1, #1
 8001a9a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2241      	movs	r2, #65	; 0x41
 8001aa0:	2124      	movs	r1, #36	; 0x24
 8001aa2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2101      	movs	r1, #1
 8001ab0:	438a      	bics	r2, r1
 8001ab2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4911      	ldr	r1, [pc, #68]	; (8001b04 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001ac0:	400a      	ands	r2, r1
 8001ac2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6819      	ldr	r1, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2101      	movs	r1, #1
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2241      	movs	r2, #65	; 0x41
 8001ae8:	2120      	movs	r1, #32
 8001aea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2240      	movs	r2, #64	; 0x40
 8001af0:	2100      	movs	r1, #0
 8001af2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	e000      	b.n	8001afa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001af8:	2302      	movs	r3, #2
  }
}
 8001afa:	0018      	movs	r0, r3
 8001afc:	46bd      	mov	sp, r7
 8001afe:	b002      	add	sp, #8
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	ffffefff 	.word	0xffffefff

08001b08 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2241      	movs	r2, #65	; 0x41
 8001b16:	5c9b      	ldrb	r3, [r3, r2]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b20      	cmp	r3, #32
 8001b1c:	d139      	bne.n	8001b92 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2240      	movs	r2, #64	; 0x40
 8001b22:	5c9b      	ldrb	r3, [r3, r2]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d101      	bne.n	8001b2c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b28:	2302      	movs	r3, #2
 8001b2a:	e033      	b.n	8001b94 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2240      	movs	r2, #64	; 0x40
 8001b30:	2101      	movs	r1, #1
 8001b32:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2241      	movs	r2, #65	; 0x41
 8001b38:	2124      	movs	r1, #36	; 0x24
 8001b3a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2101      	movs	r1, #1
 8001b48:	438a      	bics	r2, r1
 8001b4a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4a11      	ldr	r2, [pc, #68]	; (8001b9c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	021b      	lsls	r3, r3, #8
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2101      	movs	r1, #1
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2241      	movs	r2, #65	; 0x41
 8001b82:	2120      	movs	r1, #32
 8001b84:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2240      	movs	r2, #64	; 0x40
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	e000      	b.n	8001b94 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b92:	2302      	movs	r3, #2
  }
}
 8001b94:	0018      	movs	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	b004      	add	sp, #16
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	fffff0ff 	.word	0xfffff0ff

08001ba0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e301      	b.n	80021b6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d100      	bne.n	8001bbe <HAL_RCC_OscConfig+0x1e>
 8001bbc:	e08d      	b.n	8001cda <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001bbe:	4bc3      	ldr	r3, [pc, #780]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	220c      	movs	r2, #12
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	d00e      	beq.n	8001be8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bca:	4bc0      	ldr	r3, [pc, #768]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	220c      	movs	r2, #12
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	2b08      	cmp	r3, #8
 8001bd4:	d116      	bne.n	8001c04 <HAL_RCC_OscConfig+0x64>
 8001bd6:	4bbd      	ldr	r3, [pc, #756]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	2380      	movs	r3, #128	; 0x80
 8001bdc:	025b      	lsls	r3, r3, #9
 8001bde:	401a      	ands	r2, r3
 8001be0:	2380      	movs	r3, #128	; 0x80
 8001be2:	025b      	lsls	r3, r3, #9
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d10d      	bne.n	8001c04 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be8:	4bb8      	ldr	r3, [pc, #736]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	2380      	movs	r3, #128	; 0x80
 8001bee:	029b      	lsls	r3, r3, #10
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	d100      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x56>
 8001bf4:	e070      	b.n	8001cd8 <HAL_RCC_OscConfig+0x138>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d000      	beq.n	8001c00 <HAL_RCC_OscConfig+0x60>
 8001bfe:	e06b      	b.n	8001cd8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e2d8      	b.n	80021b6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d107      	bne.n	8001c1c <HAL_RCC_OscConfig+0x7c>
 8001c0c:	4baf      	ldr	r3, [pc, #700]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4bae      	ldr	r3, [pc, #696]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001c12:	2180      	movs	r1, #128	; 0x80
 8001c14:	0249      	lsls	r1, r1, #9
 8001c16:	430a      	orrs	r2, r1
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	e02f      	b.n	8001c7c <HAL_RCC_OscConfig+0xdc>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d10c      	bne.n	8001c3e <HAL_RCC_OscConfig+0x9e>
 8001c24:	4ba9      	ldr	r3, [pc, #676]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	4ba8      	ldr	r3, [pc, #672]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001c2a:	49a9      	ldr	r1, [pc, #676]	; (8001ed0 <HAL_RCC_OscConfig+0x330>)
 8001c2c:	400a      	ands	r2, r1
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	4ba6      	ldr	r3, [pc, #664]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4ba5      	ldr	r3, [pc, #660]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001c36:	49a7      	ldr	r1, [pc, #668]	; (8001ed4 <HAL_RCC_OscConfig+0x334>)
 8001c38:	400a      	ands	r2, r1
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	e01e      	b.n	8001c7c <HAL_RCC_OscConfig+0xdc>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b05      	cmp	r3, #5
 8001c44:	d10e      	bne.n	8001c64 <HAL_RCC_OscConfig+0xc4>
 8001c46:	4ba1      	ldr	r3, [pc, #644]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	4ba0      	ldr	r3, [pc, #640]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001c4c:	2180      	movs	r1, #128	; 0x80
 8001c4e:	02c9      	lsls	r1, r1, #11
 8001c50:	430a      	orrs	r2, r1
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	4b9d      	ldr	r3, [pc, #628]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4b9c      	ldr	r3, [pc, #624]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001c5a:	2180      	movs	r1, #128	; 0x80
 8001c5c:	0249      	lsls	r1, r1, #9
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	e00b      	b.n	8001c7c <HAL_RCC_OscConfig+0xdc>
 8001c64:	4b99      	ldr	r3, [pc, #612]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b98      	ldr	r3, [pc, #608]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001c6a:	4999      	ldr	r1, [pc, #612]	; (8001ed0 <HAL_RCC_OscConfig+0x330>)
 8001c6c:	400a      	ands	r2, r1
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	4b96      	ldr	r3, [pc, #600]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	4b95      	ldr	r3, [pc, #596]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001c76:	4997      	ldr	r1, [pc, #604]	; (8001ed4 <HAL_RCC_OscConfig+0x334>)
 8001c78:	400a      	ands	r2, r1
 8001c7a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d014      	beq.n	8001cae <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c84:	f7fe ff1a 	bl	8000abc <HAL_GetTick>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c8e:	f7fe ff15 	bl	8000abc <HAL_GetTick>
 8001c92:	0002      	movs	r2, r0
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b64      	cmp	r3, #100	; 0x64
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e28a      	b.n	80021b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca0:	4b8a      	ldr	r3, [pc, #552]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	2380      	movs	r3, #128	; 0x80
 8001ca6:	029b      	lsls	r3, r3, #10
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d0f0      	beq.n	8001c8e <HAL_RCC_OscConfig+0xee>
 8001cac:	e015      	b.n	8001cda <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cae:	f7fe ff05 	bl	8000abc <HAL_GetTick>
 8001cb2:	0003      	movs	r3, r0
 8001cb4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb8:	f7fe ff00 	bl	8000abc <HAL_GetTick>
 8001cbc:	0002      	movs	r2, r0
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b64      	cmp	r3, #100	; 0x64
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e275      	b.n	80021b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cca:	4b80      	ldr	r3, [pc, #512]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	2380      	movs	r3, #128	; 0x80
 8001cd0:	029b      	lsls	r3, r3, #10
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d1f0      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x118>
 8001cd6:	e000      	b.n	8001cda <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	d100      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x146>
 8001ce4:	e069      	b.n	8001dba <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ce6:	4b79      	ldr	r3, [pc, #484]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	220c      	movs	r2, #12
 8001cec:	4013      	ands	r3, r2
 8001cee:	d00b      	beq.n	8001d08 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001cf0:	4b76      	ldr	r3, [pc, #472]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	220c      	movs	r2, #12
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d11c      	bne.n	8001d36 <HAL_RCC_OscConfig+0x196>
 8001cfc:	4b73      	ldr	r3, [pc, #460]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	2380      	movs	r3, #128	; 0x80
 8001d02:	025b      	lsls	r3, r3, #9
 8001d04:	4013      	ands	r3, r2
 8001d06:	d116      	bne.n	8001d36 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d08:	4b70      	ldr	r3, [pc, #448]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d005      	beq.n	8001d1e <HAL_RCC_OscConfig+0x17e>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d001      	beq.n	8001d1e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e24b      	b.n	80021b6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1e:	4b6b      	ldr	r3, [pc, #428]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	22f8      	movs	r2, #248	; 0xf8
 8001d24:	4393      	bics	r3, r2
 8001d26:	0019      	movs	r1, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	00da      	lsls	r2, r3, #3
 8001d2e:	4b67      	ldr	r3, [pc, #412]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001d30:	430a      	orrs	r2, r1
 8001d32:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d34:	e041      	b.n	8001dba <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d024      	beq.n	8001d88 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d3e:	4b63      	ldr	r3, [pc, #396]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	4b62      	ldr	r3, [pc, #392]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001d44:	2101      	movs	r1, #1
 8001d46:	430a      	orrs	r2, r1
 8001d48:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4a:	f7fe feb7 	bl	8000abc <HAL_GetTick>
 8001d4e:	0003      	movs	r3, r0
 8001d50:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d54:	f7fe feb2 	bl	8000abc <HAL_GetTick>
 8001d58:	0002      	movs	r2, r0
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e227      	b.n	80021b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d66:	4b59      	ldr	r3, [pc, #356]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d0f1      	beq.n	8001d54 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d70:	4b56      	ldr	r3, [pc, #344]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	22f8      	movs	r2, #248	; 0xf8
 8001d76:	4393      	bics	r3, r2
 8001d78:	0019      	movs	r1, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	00da      	lsls	r2, r3, #3
 8001d80:	4b52      	ldr	r3, [pc, #328]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001d82:	430a      	orrs	r2, r1
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	e018      	b.n	8001dba <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d88:	4b50      	ldr	r3, [pc, #320]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4b4f      	ldr	r3, [pc, #316]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001d8e:	2101      	movs	r1, #1
 8001d90:	438a      	bics	r2, r1
 8001d92:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d94:	f7fe fe92 	bl	8000abc <HAL_GetTick>
 8001d98:	0003      	movs	r3, r0
 8001d9a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d9e:	f7fe fe8d 	bl	8000abc <HAL_GetTick>
 8001da2:	0002      	movs	r2, r0
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e202      	b.n	80021b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db0:	4b46      	ldr	r3, [pc, #280]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2202      	movs	r2, #2
 8001db6:	4013      	ands	r3, r2
 8001db8:	d1f1      	bne.n	8001d9e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2208      	movs	r2, #8
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d036      	beq.n	8001e32 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d019      	beq.n	8001e00 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dcc:	4b3f      	ldr	r3, [pc, #252]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001dce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dd0:	4b3e      	ldr	r3, [pc, #248]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd8:	f7fe fe70 	bl	8000abc <HAL_GetTick>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001de2:	f7fe fe6b 	bl	8000abc <HAL_GetTick>
 8001de6:	0002      	movs	r2, r0
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e1e0      	b.n	80021b6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df4:	4b35      	ldr	r3, [pc, #212]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	2202      	movs	r2, #2
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d0f1      	beq.n	8001de2 <HAL_RCC_OscConfig+0x242>
 8001dfe:	e018      	b.n	8001e32 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e00:	4b32      	ldr	r3, [pc, #200]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001e02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e04:	4b31      	ldr	r3, [pc, #196]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001e06:	2101      	movs	r1, #1
 8001e08:	438a      	bics	r2, r1
 8001e0a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0c:	f7fe fe56 	bl	8000abc <HAL_GetTick>
 8001e10:	0003      	movs	r3, r0
 8001e12:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e16:	f7fe fe51 	bl	8000abc <HAL_GetTick>
 8001e1a:	0002      	movs	r2, r0
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e1c6      	b.n	80021b6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e28:	4b28      	ldr	r3, [pc, #160]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d1f1      	bne.n	8001e16 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2204      	movs	r2, #4
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d100      	bne.n	8001e3e <HAL_RCC_OscConfig+0x29e>
 8001e3c:	e0b4      	b.n	8001fa8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e3e:	201f      	movs	r0, #31
 8001e40:	183b      	adds	r3, r7, r0
 8001e42:	2200      	movs	r2, #0
 8001e44:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e46:	4b21      	ldr	r3, [pc, #132]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001e48:	69da      	ldr	r2, [r3, #28]
 8001e4a:	2380      	movs	r3, #128	; 0x80
 8001e4c:	055b      	lsls	r3, r3, #21
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d110      	bne.n	8001e74 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e52:	4b1e      	ldr	r3, [pc, #120]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001e54:	69da      	ldr	r2, [r3, #28]
 8001e56:	4b1d      	ldr	r3, [pc, #116]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001e58:	2180      	movs	r1, #128	; 0x80
 8001e5a:	0549      	lsls	r1, r1, #21
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	61da      	str	r2, [r3, #28]
 8001e60:	4b1a      	ldr	r3, [pc, #104]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001e62:	69da      	ldr	r2, [r3, #28]
 8001e64:	2380      	movs	r3, #128	; 0x80
 8001e66:	055b      	lsls	r3, r3, #21
 8001e68:	4013      	ands	r3, r2
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e6e:	183b      	adds	r3, r7, r0
 8001e70:	2201      	movs	r2, #1
 8001e72:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e74:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	2380      	movs	r3, #128	; 0x80
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d11a      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e80:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001e86:	2180      	movs	r1, #128	; 0x80
 8001e88:	0049      	lsls	r1, r1, #1
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e8e:	f7fe fe15 	bl	8000abc <HAL_GetTick>
 8001e92:	0003      	movs	r3, r0
 8001e94:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e98:	f7fe fe10 	bl	8000abc <HAL_GetTick>
 8001e9c:	0002      	movs	r2, r0
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b64      	cmp	r3, #100	; 0x64
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e185      	b.n	80021b6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	2380      	movs	r3, #128	; 0x80
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d10e      	bne.n	8001edc <HAL_RCC_OscConfig+0x33c>
 8001ebe:	4b03      	ldr	r3, [pc, #12]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001ec0:	6a1a      	ldr	r2, [r3, #32]
 8001ec2:	4b02      	ldr	r3, [pc, #8]	; (8001ecc <HAL_RCC_OscConfig+0x32c>)
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	621a      	str	r2, [r3, #32]
 8001eca:	e035      	b.n	8001f38 <HAL_RCC_OscConfig+0x398>
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	fffeffff 	.word	0xfffeffff
 8001ed4:	fffbffff 	.word	0xfffbffff
 8001ed8:	40007000 	.word	0x40007000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10c      	bne.n	8001efe <HAL_RCC_OscConfig+0x35e>
 8001ee4:	4bb6      	ldr	r3, [pc, #728]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 8001ee6:	6a1a      	ldr	r2, [r3, #32]
 8001ee8:	4bb5      	ldr	r3, [pc, #724]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 8001eea:	2101      	movs	r1, #1
 8001eec:	438a      	bics	r2, r1
 8001eee:	621a      	str	r2, [r3, #32]
 8001ef0:	4bb3      	ldr	r3, [pc, #716]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 8001ef2:	6a1a      	ldr	r2, [r3, #32]
 8001ef4:	4bb2      	ldr	r3, [pc, #712]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 8001ef6:	2104      	movs	r1, #4
 8001ef8:	438a      	bics	r2, r1
 8001efa:	621a      	str	r2, [r3, #32]
 8001efc:	e01c      	b.n	8001f38 <HAL_RCC_OscConfig+0x398>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	2b05      	cmp	r3, #5
 8001f04:	d10c      	bne.n	8001f20 <HAL_RCC_OscConfig+0x380>
 8001f06:	4bae      	ldr	r3, [pc, #696]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 8001f08:	6a1a      	ldr	r2, [r3, #32]
 8001f0a:	4bad      	ldr	r3, [pc, #692]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 8001f0c:	2104      	movs	r1, #4
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	621a      	str	r2, [r3, #32]
 8001f12:	4bab      	ldr	r3, [pc, #684]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 8001f14:	6a1a      	ldr	r2, [r3, #32]
 8001f16:	4baa      	ldr	r3, [pc, #680]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 8001f18:	2101      	movs	r1, #1
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	621a      	str	r2, [r3, #32]
 8001f1e:	e00b      	b.n	8001f38 <HAL_RCC_OscConfig+0x398>
 8001f20:	4ba7      	ldr	r3, [pc, #668]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 8001f22:	6a1a      	ldr	r2, [r3, #32]
 8001f24:	4ba6      	ldr	r3, [pc, #664]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 8001f26:	2101      	movs	r1, #1
 8001f28:	438a      	bics	r2, r1
 8001f2a:	621a      	str	r2, [r3, #32]
 8001f2c:	4ba4      	ldr	r3, [pc, #656]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 8001f2e:	6a1a      	ldr	r2, [r3, #32]
 8001f30:	4ba3      	ldr	r3, [pc, #652]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 8001f32:	2104      	movs	r1, #4
 8001f34:	438a      	bics	r2, r1
 8001f36:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d014      	beq.n	8001f6a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f40:	f7fe fdbc 	bl	8000abc <HAL_GetTick>
 8001f44:	0003      	movs	r3, r0
 8001f46:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f48:	e009      	b.n	8001f5e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f4a:	f7fe fdb7 	bl	8000abc <HAL_GetTick>
 8001f4e:	0002      	movs	r2, r0
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	4a9b      	ldr	r2, [pc, #620]	; (80021c4 <HAL_RCC_OscConfig+0x624>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e12b      	b.n	80021b6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f5e:	4b98      	ldr	r3, [pc, #608]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	2202      	movs	r2, #2
 8001f64:	4013      	ands	r3, r2
 8001f66:	d0f0      	beq.n	8001f4a <HAL_RCC_OscConfig+0x3aa>
 8001f68:	e013      	b.n	8001f92 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f6a:	f7fe fda7 	bl	8000abc <HAL_GetTick>
 8001f6e:	0003      	movs	r3, r0
 8001f70:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f72:	e009      	b.n	8001f88 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f74:	f7fe fda2 	bl	8000abc <HAL_GetTick>
 8001f78:	0002      	movs	r2, r0
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	4a91      	ldr	r2, [pc, #580]	; (80021c4 <HAL_RCC_OscConfig+0x624>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e116      	b.n	80021b6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f88:	4b8d      	ldr	r3, [pc, #564]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	2202      	movs	r2, #2
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d1f0      	bne.n	8001f74 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f92:	231f      	movs	r3, #31
 8001f94:	18fb      	adds	r3, r7, r3
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d105      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f9c:	4b88      	ldr	r3, [pc, #544]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 8001f9e:	69da      	ldr	r2, [r3, #28]
 8001fa0:	4b87      	ldr	r3, [pc, #540]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 8001fa2:	4989      	ldr	r1, [pc, #548]	; (80021c8 <HAL_RCC_OscConfig+0x628>)
 8001fa4:	400a      	ands	r2, r1
 8001fa6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2210      	movs	r2, #16
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d063      	beq.n	800207a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d12a      	bne.n	8002010 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001fba:	4b81      	ldr	r3, [pc, #516]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 8001fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fbe:	4b80      	ldr	r3, [pc, #512]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 8001fc0:	2104      	movs	r1, #4
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001fc6:	4b7e      	ldr	r3, [pc, #504]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 8001fc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fca:	4b7d      	ldr	r3, [pc, #500]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 8001fcc:	2101      	movs	r1, #1
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd2:	f7fe fd73 	bl	8000abc <HAL_GetTick>
 8001fd6:	0003      	movs	r3, r0
 8001fd8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001fdc:	f7fe fd6e 	bl	8000abc <HAL_GetTick>
 8001fe0:	0002      	movs	r2, r0
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e0e3      	b.n	80021b6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001fee:	4b74      	ldr	r3, [pc, #464]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 8001ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d0f1      	beq.n	8001fdc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ff8:	4b71      	ldr	r3, [pc, #452]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 8001ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ffc:	22f8      	movs	r2, #248	; 0xf8
 8001ffe:	4393      	bics	r3, r2
 8002000:	0019      	movs	r1, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	00da      	lsls	r2, r3, #3
 8002008:	4b6d      	ldr	r3, [pc, #436]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 800200a:	430a      	orrs	r2, r1
 800200c:	635a      	str	r2, [r3, #52]	; 0x34
 800200e:	e034      	b.n	800207a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	3305      	adds	r3, #5
 8002016:	d111      	bne.n	800203c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002018:	4b69      	ldr	r3, [pc, #420]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 800201a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800201c:	4b68      	ldr	r3, [pc, #416]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 800201e:	2104      	movs	r1, #4
 8002020:	438a      	bics	r2, r1
 8002022:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002024:	4b66      	ldr	r3, [pc, #408]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 8002026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002028:	22f8      	movs	r2, #248	; 0xf8
 800202a:	4393      	bics	r3, r2
 800202c:	0019      	movs	r1, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	00da      	lsls	r2, r3, #3
 8002034:	4b62      	ldr	r3, [pc, #392]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 8002036:	430a      	orrs	r2, r1
 8002038:	635a      	str	r2, [r3, #52]	; 0x34
 800203a:	e01e      	b.n	800207a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800203c:	4b60      	ldr	r3, [pc, #384]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 800203e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002040:	4b5f      	ldr	r3, [pc, #380]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 8002042:	2104      	movs	r1, #4
 8002044:	430a      	orrs	r2, r1
 8002046:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002048:	4b5d      	ldr	r3, [pc, #372]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 800204a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800204c:	4b5c      	ldr	r3, [pc, #368]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 800204e:	2101      	movs	r1, #1
 8002050:	438a      	bics	r2, r1
 8002052:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002054:	f7fe fd32 	bl	8000abc <HAL_GetTick>
 8002058:	0003      	movs	r3, r0
 800205a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800205e:	f7fe fd2d 	bl	8000abc <HAL_GetTick>
 8002062:	0002      	movs	r2, r0
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e0a2      	b.n	80021b6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002070:	4b53      	ldr	r3, [pc, #332]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 8002072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002074:	2202      	movs	r2, #2
 8002076:	4013      	ands	r3, r2
 8002078:	d1f1      	bne.n	800205e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d100      	bne.n	8002084 <HAL_RCC_OscConfig+0x4e4>
 8002082:	e097      	b.n	80021b4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002084:	4b4e      	ldr	r3, [pc, #312]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	220c      	movs	r2, #12
 800208a:	4013      	ands	r3, r2
 800208c:	2b08      	cmp	r3, #8
 800208e:	d100      	bne.n	8002092 <HAL_RCC_OscConfig+0x4f2>
 8002090:	e06b      	b.n	800216a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	2b02      	cmp	r3, #2
 8002098:	d14c      	bne.n	8002134 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800209a:	4b49      	ldr	r3, [pc, #292]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	4b48      	ldr	r3, [pc, #288]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 80020a0:	494a      	ldr	r1, [pc, #296]	; (80021cc <HAL_RCC_OscConfig+0x62c>)
 80020a2:	400a      	ands	r2, r1
 80020a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a6:	f7fe fd09 	bl	8000abc <HAL_GetTick>
 80020aa:	0003      	movs	r3, r0
 80020ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b0:	f7fe fd04 	bl	8000abc <HAL_GetTick>
 80020b4:	0002      	movs	r2, r0
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e079      	b.n	80021b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020c2:	4b3f      	ldr	r3, [pc, #252]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	2380      	movs	r3, #128	; 0x80
 80020c8:	049b      	lsls	r3, r3, #18
 80020ca:	4013      	ands	r3, r2
 80020cc:	d1f0      	bne.n	80020b0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ce:	4b3c      	ldr	r3, [pc, #240]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 80020d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d2:	220f      	movs	r2, #15
 80020d4:	4393      	bics	r3, r2
 80020d6:	0019      	movs	r1, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020dc:	4b38      	ldr	r3, [pc, #224]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 80020de:	430a      	orrs	r2, r1
 80020e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80020e2:	4b37      	ldr	r3, [pc, #220]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	4a3a      	ldr	r2, [pc, #232]	; (80021d0 <HAL_RCC_OscConfig+0x630>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	0019      	movs	r1, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	431a      	orrs	r2, r3
 80020f6:	4b32      	ldr	r3, [pc, #200]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 80020f8:	430a      	orrs	r2, r1
 80020fa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020fc:	4b30      	ldr	r3, [pc, #192]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b2f      	ldr	r3, [pc, #188]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 8002102:	2180      	movs	r1, #128	; 0x80
 8002104:	0449      	lsls	r1, r1, #17
 8002106:	430a      	orrs	r2, r1
 8002108:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210a:	f7fe fcd7 	bl	8000abc <HAL_GetTick>
 800210e:	0003      	movs	r3, r0
 8002110:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002114:	f7fe fcd2 	bl	8000abc <HAL_GetTick>
 8002118:	0002      	movs	r2, r0
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e047      	b.n	80021b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002126:	4b26      	ldr	r3, [pc, #152]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	2380      	movs	r3, #128	; 0x80
 800212c:	049b      	lsls	r3, r3, #18
 800212e:	4013      	ands	r3, r2
 8002130:	d0f0      	beq.n	8002114 <HAL_RCC_OscConfig+0x574>
 8002132:	e03f      	b.n	80021b4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002134:	4b22      	ldr	r3, [pc, #136]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	4b21      	ldr	r3, [pc, #132]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 800213a:	4924      	ldr	r1, [pc, #144]	; (80021cc <HAL_RCC_OscConfig+0x62c>)
 800213c:	400a      	ands	r2, r1
 800213e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002140:	f7fe fcbc 	bl	8000abc <HAL_GetTick>
 8002144:	0003      	movs	r3, r0
 8002146:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800214a:	f7fe fcb7 	bl	8000abc <HAL_GetTick>
 800214e:	0002      	movs	r2, r0
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e02c      	b.n	80021b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800215c:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	2380      	movs	r3, #128	; 0x80
 8002162:	049b      	lsls	r3, r3, #18
 8002164:	4013      	ands	r3, r2
 8002166:	d1f0      	bne.n	800214a <HAL_RCC_OscConfig+0x5aa>
 8002168:	e024      	b.n	80021b4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e01f      	b.n	80021b6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002176:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800217c:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <HAL_RCC_OscConfig+0x620>)
 800217e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002180:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	2380      	movs	r3, #128	; 0x80
 8002186:	025b      	lsls	r3, r3, #9
 8002188:	401a      	ands	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	429a      	cmp	r2, r3
 8002190:	d10e      	bne.n	80021b0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	220f      	movs	r2, #15
 8002196:	401a      	ands	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800219c:	429a      	cmp	r2, r3
 800219e:	d107      	bne.n	80021b0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	23f0      	movs	r3, #240	; 0xf0
 80021a4:	039b      	lsls	r3, r3, #14
 80021a6:	401a      	ands	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d001      	beq.n	80021b4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e000      	b.n	80021b6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	0018      	movs	r0, r3
 80021b8:	46bd      	mov	sp, r7
 80021ba:	b008      	add	sp, #32
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	46c0      	nop			; (mov r8, r8)
 80021c0:	40021000 	.word	0x40021000
 80021c4:	00001388 	.word	0x00001388
 80021c8:	efffffff 	.word	0xefffffff
 80021cc:	feffffff 	.word	0xfeffffff
 80021d0:	ffc2ffff 	.word	0xffc2ffff

080021d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e0b3      	b.n	8002350 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021e8:	4b5b      	ldr	r3, [pc, #364]	; (8002358 <HAL_RCC_ClockConfig+0x184>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2201      	movs	r2, #1
 80021ee:	4013      	ands	r3, r2
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d911      	bls.n	800221a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f6:	4b58      	ldr	r3, [pc, #352]	; (8002358 <HAL_RCC_ClockConfig+0x184>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2201      	movs	r2, #1
 80021fc:	4393      	bics	r3, r2
 80021fe:	0019      	movs	r1, r3
 8002200:	4b55      	ldr	r3, [pc, #340]	; (8002358 <HAL_RCC_ClockConfig+0x184>)
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	430a      	orrs	r2, r1
 8002206:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002208:	4b53      	ldr	r3, [pc, #332]	; (8002358 <HAL_RCC_ClockConfig+0x184>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2201      	movs	r2, #1
 800220e:	4013      	ands	r3, r2
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d001      	beq.n	800221a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e09a      	b.n	8002350 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2202      	movs	r2, #2
 8002220:	4013      	ands	r3, r2
 8002222:	d015      	beq.n	8002250 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2204      	movs	r2, #4
 800222a:	4013      	ands	r3, r2
 800222c:	d006      	beq.n	800223c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800222e:	4b4b      	ldr	r3, [pc, #300]	; (800235c <HAL_RCC_ClockConfig+0x188>)
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	4b4a      	ldr	r3, [pc, #296]	; (800235c <HAL_RCC_ClockConfig+0x188>)
 8002234:	21e0      	movs	r1, #224	; 0xe0
 8002236:	00c9      	lsls	r1, r1, #3
 8002238:	430a      	orrs	r2, r1
 800223a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800223c:	4b47      	ldr	r3, [pc, #284]	; (800235c <HAL_RCC_ClockConfig+0x188>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	22f0      	movs	r2, #240	; 0xf0
 8002242:	4393      	bics	r3, r2
 8002244:	0019      	movs	r1, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	4b44      	ldr	r3, [pc, #272]	; (800235c <HAL_RCC_ClockConfig+0x188>)
 800224c:	430a      	orrs	r2, r1
 800224e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2201      	movs	r2, #1
 8002256:	4013      	ands	r3, r2
 8002258:	d040      	beq.n	80022dc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d107      	bne.n	8002272 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002262:	4b3e      	ldr	r3, [pc, #248]	; (800235c <HAL_RCC_ClockConfig+0x188>)
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	2380      	movs	r3, #128	; 0x80
 8002268:	029b      	lsls	r3, r3, #10
 800226a:	4013      	ands	r3, r2
 800226c:	d114      	bne.n	8002298 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e06e      	b.n	8002350 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b02      	cmp	r3, #2
 8002278:	d107      	bne.n	800228a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800227a:	4b38      	ldr	r3, [pc, #224]	; (800235c <HAL_RCC_ClockConfig+0x188>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	2380      	movs	r3, #128	; 0x80
 8002280:	049b      	lsls	r3, r3, #18
 8002282:	4013      	ands	r3, r2
 8002284:	d108      	bne.n	8002298 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e062      	b.n	8002350 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800228a:	4b34      	ldr	r3, [pc, #208]	; (800235c <HAL_RCC_ClockConfig+0x188>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2202      	movs	r2, #2
 8002290:	4013      	ands	r3, r2
 8002292:	d101      	bne.n	8002298 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e05b      	b.n	8002350 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002298:	4b30      	ldr	r3, [pc, #192]	; (800235c <HAL_RCC_ClockConfig+0x188>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2203      	movs	r2, #3
 800229e:	4393      	bics	r3, r2
 80022a0:	0019      	movs	r1, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	4b2d      	ldr	r3, [pc, #180]	; (800235c <HAL_RCC_ClockConfig+0x188>)
 80022a8:	430a      	orrs	r2, r1
 80022aa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022ac:	f7fe fc06 	bl	8000abc <HAL_GetTick>
 80022b0:	0003      	movs	r3, r0
 80022b2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b4:	e009      	b.n	80022ca <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b6:	f7fe fc01 	bl	8000abc <HAL_GetTick>
 80022ba:	0002      	movs	r2, r0
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	4a27      	ldr	r2, [pc, #156]	; (8002360 <HAL_RCC_ClockConfig+0x18c>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e042      	b.n	8002350 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ca:	4b24      	ldr	r3, [pc, #144]	; (800235c <HAL_RCC_ClockConfig+0x188>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	220c      	movs	r2, #12
 80022d0:	401a      	ands	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	429a      	cmp	r2, r3
 80022da:	d1ec      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022dc:	4b1e      	ldr	r3, [pc, #120]	; (8002358 <HAL_RCC_ClockConfig+0x184>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2201      	movs	r2, #1
 80022e2:	4013      	ands	r3, r2
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d211      	bcs.n	800230e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ea:	4b1b      	ldr	r3, [pc, #108]	; (8002358 <HAL_RCC_ClockConfig+0x184>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2201      	movs	r2, #1
 80022f0:	4393      	bics	r3, r2
 80022f2:	0019      	movs	r1, r3
 80022f4:	4b18      	ldr	r3, [pc, #96]	; (8002358 <HAL_RCC_ClockConfig+0x184>)
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fc:	4b16      	ldr	r3, [pc, #88]	; (8002358 <HAL_RCC_ClockConfig+0x184>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2201      	movs	r2, #1
 8002302:	4013      	ands	r3, r2
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	429a      	cmp	r2, r3
 8002308:	d001      	beq.n	800230e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e020      	b.n	8002350 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2204      	movs	r2, #4
 8002314:	4013      	ands	r3, r2
 8002316:	d009      	beq.n	800232c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002318:	4b10      	ldr	r3, [pc, #64]	; (800235c <HAL_RCC_ClockConfig+0x188>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	4a11      	ldr	r2, [pc, #68]	; (8002364 <HAL_RCC_ClockConfig+0x190>)
 800231e:	4013      	ands	r3, r2
 8002320:	0019      	movs	r1, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68da      	ldr	r2, [r3, #12]
 8002326:	4b0d      	ldr	r3, [pc, #52]	; (800235c <HAL_RCC_ClockConfig+0x188>)
 8002328:	430a      	orrs	r2, r1
 800232a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800232c:	f000 f820 	bl	8002370 <HAL_RCC_GetSysClockFreq>
 8002330:	0001      	movs	r1, r0
 8002332:	4b0a      	ldr	r3, [pc, #40]	; (800235c <HAL_RCC_ClockConfig+0x188>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	091b      	lsrs	r3, r3, #4
 8002338:	220f      	movs	r2, #15
 800233a:	4013      	ands	r3, r2
 800233c:	4a0a      	ldr	r2, [pc, #40]	; (8002368 <HAL_RCC_ClockConfig+0x194>)
 800233e:	5cd3      	ldrb	r3, [r2, r3]
 8002340:	000a      	movs	r2, r1
 8002342:	40da      	lsrs	r2, r3
 8002344:	4b09      	ldr	r3, [pc, #36]	; (800236c <HAL_RCC_ClockConfig+0x198>)
 8002346:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002348:	2000      	movs	r0, #0
 800234a:	f7fe fb71 	bl	8000a30 <HAL_InitTick>
  
  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	0018      	movs	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	b004      	add	sp, #16
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40022000 	.word	0x40022000
 800235c:	40021000 	.word	0x40021000
 8002360:	00001388 	.word	0x00001388
 8002364:	fffff8ff 	.word	0xfffff8ff
 8002368:	08003b08 	.word	0x08003b08
 800236c:	20000010 	.word	0x20000010

08002370 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002370:	b590      	push	{r4, r7, lr}
 8002372:	b08f      	sub	sp, #60	; 0x3c
 8002374:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002376:	2314      	movs	r3, #20
 8002378:	18fb      	adds	r3, r7, r3
 800237a:	4a2b      	ldr	r2, [pc, #172]	; (8002428 <HAL_RCC_GetSysClockFreq+0xb8>)
 800237c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800237e:	c313      	stmia	r3!, {r0, r1, r4}
 8002380:	6812      	ldr	r2, [r2, #0]
 8002382:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002384:	1d3b      	adds	r3, r7, #4
 8002386:	4a29      	ldr	r2, [pc, #164]	; (800242c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002388:	ca13      	ldmia	r2!, {r0, r1, r4}
 800238a:	c313      	stmia	r3!, {r0, r1, r4}
 800238c:	6812      	ldr	r2, [r2, #0]
 800238e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002390:	2300      	movs	r3, #0
 8002392:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002394:	2300      	movs	r3, #0
 8002396:	62bb      	str	r3, [r7, #40]	; 0x28
 8002398:	2300      	movs	r3, #0
 800239a:	637b      	str	r3, [r7, #52]	; 0x34
 800239c:	2300      	movs	r3, #0
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80023a4:	4b22      	ldr	r3, [pc, #136]	; (8002430 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ac:	220c      	movs	r2, #12
 80023ae:	4013      	ands	r3, r2
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d002      	beq.n	80023ba <HAL_RCC_GetSysClockFreq+0x4a>
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d003      	beq.n	80023c0 <HAL_RCC_GetSysClockFreq+0x50>
 80023b8:	e02d      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023ba:	4b1e      	ldr	r3, [pc, #120]	; (8002434 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023bc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023be:	e02d      	b.n	800241c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80023c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c2:	0c9b      	lsrs	r3, r3, #18
 80023c4:	220f      	movs	r2, #15
 80023c6:	4013      	ands	r3, r2
 80023c8:	2214      	movs	r2, #20
 80023ca:	18ba      	adds	r2, r7, r2
 80023cc:	5cd3      	ldrb	r3, [r2, r3]
 80023ce:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80023d0:	4b17      	ldr	r3, [pc, #92]	; (8002430 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d4:	220f      	movs	r2, #15
 80023d6:	4013      	ands	r3, r2
 80023d8:	1d3a      	adds	r2, r7, #4
 80023da:	5cd3      	ldrb	r3, [r2, r3]
 80023dc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80023de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023e0:	2380      	movs	r3, #128	; 0x80
 80023e2:	025b      	lsls	r3, r3, #9
 80023e4:	4013      	ands	r3, r2
 80023e6:	d009      	beq.n	80023fc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023ea:	4812      	ldr	r0, [pc, #72]	; (8002434 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023ec:	f7fd fe8c 	bl	8000108 <__udivsi3>
 80023f0:	0003      	movs	r3, r0
 80023f2:	001a      	movs	r2, r3
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	4353      	muls	r3, r2
 80023f8:	637b      	str	r3, [r7, #52]	; 0x34
 80023fa:	e009      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80023fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023fe:	000a      	movs	r2, r1
 8002400:	0152      	lsls	r2, r2, #5
 8002402:	1a52      	subs	r2, r2, r1
 8002404:	0193      	lsls	r3, r2, #6
 8002406:	1a9b      	subs	r3, r3, r2
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	185b      	adds	r3, r3, r1
 800240c:	021b      	lsls	r3, r3, #8
 800240e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002412:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002414:	e002      	b.n	800241c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002416:	4b07      	ldr	r3, [pc, #28]	; (8002434 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002418:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800241a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800241c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800241e:	0018      	movs	r0, r3
 8002420:	46bd      	mov	sp, r7
 8002422:	b00f      	add	sp, #60	; 0x3c
 8002424:	bd90      	pop	{r4, r7, pc}
 8002426:	46c0      	nop			; (mov r8, r8)
 8002428:	08003ae8 	.word	0x08003ae8
 800242c:	08003af8 	.word	0x08003af8
 8002430:	40021000 	.word	0x40021000
 8002434:	007a1200 	.word	0x007a1200

08002438 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800243c:	4b02      	ldr	r3, [pc, #8]	; (8002448 <HAL_RCC_GetHCLKFreq+0x10>)
 800243e:	681b      	ldr	r3, [r3, #0]
}
 8002440:	0018      	movs	r0, r3
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	46c0      	nop			; (mov r8, r8)
 8002448:	20000010 	.word	0x20000010

0800244c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002450:	f7ff fff2 	bl	8002438 <HAL_RCC_GetHCLKFreq>
 8002454:	0001      	movs	r1, r0
 8002456:	4b06      	ldr	r3, [pc, #24]	; (8002470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	0a1b      	lsrs	r3, r3, #8
 800245c:	2207      	movs	r2, #7
 800245e:	4013      	ands	r3, r2
 8002460:	4a04      	ldr	r2, [pc, #16]	; (8002474 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002462:	5cd3      	ldrb	r3, [r2, r3]
 8002464:	40d9      	lsrs	r1, r3
 8002466:	000b      	movs	r3, r1
}    
 8002468:	0018      	movs	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	40021000 	.word	0x40021000
 8002474:	08003b18 	.word	0x08003b18

08002478 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002480:	2300      	movs	r3, #0
 8002482:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002484:	2300      	movs	r3, #0
 8002486:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	2380      	movs	r3, #128	; 0x80
 800248e:	025b      	lsls	r3, r3, #9
 8002490:	4013      	ands	r3, r2
 8002492:	d100      	bne.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002494:	e08e      	b.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002496:	2017      	movs	r0, #23
 8002498:	183b      	adds	r3, r7, r0
 800249a:	2200      	movs	r2, #0
 800249c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800249e:	4b5f      	ldr	r3, [pc, #380]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024a0:	69da      	ldr	r2, [r3, #28]
 80024a2:	2380      	movs	r3, #128	; 0x80
 80024a4:	055b      	lsls	r3, r3, #21
 80024a6:	4013      	ands	r3, r2
 80024a8:	d110      	bne.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024aa:	4b5c      	ldr	r3, [pc, #368]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024ac:	69da      	ldr	r2, [r3, #28]
 80024ae:	4b5b      	ldr	r3, [pc, #364]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024b0:	2180      	movs	r1, #128	; 0x80
 80024b2:	0549      	lsls	r1, r1, #21
 80024b4:	430a      	orrs	r2, r1
 80024b6:	61da      	str	r2, [r3, #28]
 80024b8:	4b58      	ldr	r3, [pc, #352]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024ba:	69da      	ldr	r2, [r3, #28]
 80024bc:	2380      	movs	r3, #128	; 0x80
 80024be:	055b      	lsls	r3, r3, #21
 80024c0:	4013      	ands	r3, r2
 80024c2:	60bb      	str	r3, [r7, #8]
 80024c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024c6:	183b      	adds	r3, r7, r0
 80024c8:	2201      	movs	r2, #1
 80024ca:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024cc:	4b54      	ldr	r3, [pc, #336]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	2380      	movs	r3, #128	; 0x80
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	4013      	ands	r3, r2
 80024d6:	d11a      	bne.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024d8:	4b51      	ldr	r3, [pc, #324]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	4b50      	ldr	r3, [pc, #320]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80024de:	2180      	movs	r1, #128	; 0x80
 80024e0:	0049      	lsls	r1, r1, #1
 80024e2:	430a      	orrs	r2, r1
 80024e4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024e6:	f7fe fae9 	bl	8000abc <HAL_GetTick>
 80024ea:	0003      	movs	r3, r0
 80024ec:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ee:	e008      	b.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f0:	f7fe fae4 	bl	8000abc <HAL_GetTick>
 80024f4:	0002      	movs	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b64      	cmp	r3, #100	; 0x64
 80024fc:	d901      	bls.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e087      	b.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002502:	4b47      	ldr	r3, [pc, #284]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	2380      	movs	r3, #128	; 0x80
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	4013      	ands	r3, r2
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800250e:	4b43      	ldr	r3, [pc, #268]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002510:	6a1a      	ldr	r2, [r3, #32]
 8002512:	23c0      	movs	r3, #192	; 0xc0
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4013      	ands	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d034      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	23c0      	movs	r3, #192	; 0xc0
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4013      	ands	r3, r2
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	429a      	cmp	r2, r3
 800252e:	d02c      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002530:	4b3a      	ldr	r3, [pc, #232]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	4a3b      	ldr	r2, [pc, #236]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002536:	4013      	ands	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800253a:	4b38      	ldr	r3, [pc, #224]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800253c:	6a1a      	ldr	r2, [r3, #32]
 800253e:	4b37      	ldr	r3, [pc, #220]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002540:	2180      	movs	r1, #128	; 0x80
 8002542:	0249      	lsls	r1, r1, #9
 8002544:	430a      	orrs	r2, r1
 8002546:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002548:	4b34      	ldr	r3, [pc, #208]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800254a:	6a1a      	ldr	r2, [r3, #32]
 800254c:	4b33      	ldr	r3, [pc, #204]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800254e:	4936      	ldr	r1, [pc, #216]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002550:	400a      	ands	r2, r1
 8002552:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002554:	4b31      	ldr	r3, [pc, #196]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2201      	movs	r2, #1
 800255e:	4013      	ands	r3, r2
 8002560:	d013      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002562:	f7fe faab 	bl	8000abc <HAL_GetTick>
 8002566:	0003      	movs	r3, r0
 8002568:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800256a:	e009      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800256c:	f7fe faa6 	bl	8000abc <HAL_GetTick>
 8002570:	0002      	movs	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	4a2d      	ldr	r2, [pc, #180]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d901      	bls.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e048      	b.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002580:	4b26      	ldr	r3, [pc, #152]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	2202      	movs	r2, #2
 8002586:	4013      	ands	r3, r2
 8002588:	d0f0      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800258a:	4b24      	ldr	r3, [pc, #144]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	4a25      	ldr	r2, [pc, #148]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002590:	4013      	ands	r3, r2
 8002592:	0019      	movs	r1, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	4b20      	ldr	r3, [pc, #128]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800259a:	430a      	orrs	r2, r1
 800259c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800259e:	2317      	movs	r3, #23
 80025a0:	18fb      	adds	r3, r7, r3
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d105      	bne.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a8:	4b1c      	ldr	r3, [pc, #112]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80025aa:	69da      	ldr	r2, [r3, #28]
 80025ac:	4b1b      	ldr	r3, [pc, #108]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80025ae:	4920      	ldr	r1, [pc, #128]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80025b0:	400a      	ands	r2, r1
 80025b2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2201      	movs	r2, #1
 80025ba:	4013      	ands	r3, r2
 80025bc:	d009      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025be:	4b17      	ldr	r3, [pc, #92]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	2203      	movs	r2, #3
 80025c4:	4393      	bics	r3, r2
 80025c6:	0019      	movs	r1, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	4b13      	ldr	r3, [pc, #76]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80025ce:	430a      	orrs	r2, r1
 80025d0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2220      	movs	r2, #32
 80025d8:	4013      	ands	r3, r2
 80025da:	d009      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025dc:	4b0f      	ldr	r3, [pc, #60]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e0:	2210      	movs	r2, #16
 80025e2:	4393      	bics	r3, r2
 80025e4:	0019      	movs	r1, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	4b0c      	ldr	r3, [pc, #48]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80025ec:	430a      	orrs	r2, r1
 80025ee:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	2380      	movs	r3, #128	; 0x80
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	4013      	ands	r3, r2
 80025fa:	d009      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80025fc:	4b07      	ldr	r3, [pc, #28]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	2240      	movs	r2, #64	; 0x40
 8002602:	4393      	bics	r3, r2
 8002604:	0019      	movs	r1, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691a      	ldr	r2, [r3, #16]
 800260a:	4b04      	ldr	r3, [pc, #16]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800260c:	430a      	orrs	r2, r1
 800260e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	0018      	movs	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	b006      	add	sp, #24
 8002618:	bd80      	pop	{r7, pc}
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	40021000 	.word	0x40021000
 8002620:	40007000 	.word	0x40007000
 8002624:	fffffcff 	.word	0xfffffcff
 8002628:	fffeffff 	.word	0xfffeffff
 800262c:	00001388 	.word	0x00001388
 8002630:	efffffff 	.word	0xefffffff

08002634 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e044      	b.n	80026d0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800264a:	2b00      	cmp	r3, #0
 800264c:	d107      	bne.n	800265e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2274      	movs	r2, #116	; 0x74
 8002652:	2100      	movs	r1, #0
 8002654:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	0018      	movs	r0, r3
 800265a:	f7fe f8c3 	bl	80007e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2224      	movs	r2, #36	; 0x24
 8002662:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2101      	movs	r1, #1
 8002670:	438a      	bics	r2, r1
 8002672:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	0018      	movs	r0, r3
 8002678:	f000 fbd2 	bl	8002e20 <UART_SetConfig>
 800267c:	0003      	movs	r3, r0
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e024      	b.n	80026d0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	0018      	movs	r0, r3
 8002692:	f000 fd05 	bl	80030a0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	490d      	ldr	r1, [pc, #52]	; (80026d8 <HAL_UART_Init+0xa4>)
 80026a2:	400a      	ands	r2, r1
 80026a4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	212a      	movs	r1, #42	; 0x2a
 80026b2:	438a      	bics	r2, r1
 80026b4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2101      	movs	r1, #1
 80026c2:	430a      	orrs	r2, r1
 80026c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	0018      	movs	r0, r3
 80026ca:	f000 fd9d 	bl	8003208 <UART_CheckIdleState>
 80026ce:	0003      	movs	r3, r0
}
 80026d0:	0018      	movs	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b002      	add	sp, #8
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	ffffb7ff 	.word	0xffffb7ff

080026dc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b088      	sub	sp, #32
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	1dbb      	adds	r3, r7, #6
 80026e8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026ee:	2b20      	cmp	r3, #32
 80026f0:	d000      	beq.n	80026f4 <HAL_UART_Transmit_DMA+0x18>
 80026f2:	e08a      	b.n	800280a <HAL_UART_Transmit_DMA+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_UART_Transmit_DMA+0x26>
 80026fa:	1dbb      	adds	r3, r7, #6
 80026fc:	881b      	ldrh	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e082      	b.n	800280c <HAL_UART_Transmit_DMA+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	689a      	ldr	r2, [r3, #8]
 800270a:	2380      	movs	r3, #128	; 0x80
 800270c:	015b      	lsls	r3, r3, #5
 800270e:	429a      	cmp	r2, r3
 8002710:	d109      	bne.n	8002726 <HAL_UART_Transmit_DMA+0x4a>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d105      	bne.n	8002726 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	2201      	movs	r2, #1
 800271e:	4013      	ands	r3, r2
 8002720:	d001      	beq.n	8002726 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e072      	b.n	800280c <HAL_UART_Transmit_DMA+0x130>
      }
    }

    __HAL_LOCK(huart);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2274      	movs	r2, #116	; 0x74
 800272a:	5c9b      	ldrb	r3, [r3, r2]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d101      	bne.n	8002734 <HAL_UART_Transmit_DMA+0x58>
 8002730:	2302      	movs	r3, #2
 8002732:	e06b      	b.n	800280c <HAL_UART_Transmit_DMA+0x130>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2274      	movs	r2, #116	; 0x74
 8002738:	2101      	movs	r1, #1
 800273a:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	1dba      	adds	r2, r7, #6
 8002746:	2150      	movs	r1, #80	; 0x50
 8002748:	8812      	ldrh	r2, [r2, #0]
 800274a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	1dba      	adds	r2, r7, #6
 8002750:	2152      	movs	r1, #82	; 0x52
 8002752:	8812      	ldrh	r2, [r2, #0]
 8002754:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2280      	movs	r2, #128	; 0x80
 800275a:	2100      	movs	r1, #0
 800275c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2221      	movs	r2, #33	; 0x21
 8002762:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002768:	2b00      	cmp	r3, #0
 800276a:	d02b      	beq.n	80027c4 <HAL_UART_Transmit_DMA+0xe8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002770:	4a28      	ldr	r2, [pc, #160]	; (8002814 <HAL_UART_Transmit_DMA+0x138>)
 8002772:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002778:	4a27      	ldr	r2, [pc, #156]	; (8002818 <HAL_UART_Transmit_DMA+0x13c>)
 800277a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002780:	4a26      	ldr	r2, [pc, #152]	; (800281c <HAL_UART_Transmit_DMA+0x140>)
 8002782:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002788:	2200      	movs	r2, #0
 800278a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002794:	0019      	movs	r1, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	3328      	adds	r3, #40	; 0x28
 800279c:	001a      	movs	r2, r3
 800279e:	1dbb      	adds	r3, r7, #6
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	f7fe fadf 	bl	8000d64 <HAL_DMA_Start_IT>
 80027a6:	1e03      	subs	r3, r0, #0
 80027a8:	d00c      	beq.n	80027c4 <HAL_UART_Transmit_DMA+0xe8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2280      	movs	r2, #128	; 0x80
 80027ae:	2110      	movs	r1, #16
 80027b0:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2274      	movs	r2, #116	; 0x74
 80027b6:	2100      	movs	r1, #0
 80027b8:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2220      	movs	r2, #32
 80027be:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e023      	b.n	800280c <HAL_UART_Transmit_DMA+0x130>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2240      	movs	r2, #64	; 0x40
 80027ca:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2274      	movs	r2, #116	; 0x74
 80027d0:	2100      	movs	r1, #0
 80027d2:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027d4:	f3ef 8310 	mrs	r3, PRIMASK
 80027d8:	613b      	str	r3, [r7, #16]
  return(result);
 80027da:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80027dc:	61fb      	str	r3, [r7, #28]
 80027de:	2301      	movs	r3, #1
 80027e0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f383 8810 	msr	PRIMASK, r3
}
 80027e8:	46c0      	nop			; (mov r8, r8)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2180      	movs	r1, #128	; 0x80
 80027f6:	430a      	orrs	r2, r1
 80027f8:	609a      	str	r2, [r3, #8]
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	f383 8810 	msr	PRIMASK, r3
}
 8002804:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	e000      	b.n	800280c <HAL_UART_Transmit_DMA+0x130>
  }
  else
  {
    return HAL_BUSY;
 800280a:	2302      	movs	r3, #2
  }
}
 800280c:	0018      	movs	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	b008      	add	sp, #32
 8002812:	bd80      	pop	{r7, pc}
 8002814:	08003671 	.word	0x08003671
 8002818:	08003705 	.word	0x08003705
 800281c:	08003885 	.word	0x08003885

08002820 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002820:	b590      	push	{r4, r7, lr}
 8002822:	b0ab      	sub	sp, #172	; 0xac
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	22a4      	movs	r2, #164	; 0xa4
 8002830:	18b9      	adds	r1, r7, r2
 8002832:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	20a0      	movs	r0, #160	; 0xa0
 800283c:	1839      	adds	r1, r7, r0
 800283e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	219c      	movs	r1, #156	; 0x9c
 8002848:	1879      	adds	r1, r7, r1
 800284a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800284c:	0011      	movs	r1, r2
 800284e:	18bb      	adds	r3, r7, r2
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a99      	ldr	r2, [pc, #612]	; (8002ab8 <HAL_UART_IRQHandler+0x298>)
 8002854:	4013      	ands	r3, r2
 8002856:	2298      	movs	r2, #152	; 0x98
 8002858:	18bc      	adds	r4, r7, r2
 800285a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800285c:	18bb      	adds	r3, r7, r2
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d114      	bne.n	800288e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002864:	187b      	adds	r3, r7, r1
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2220      	movs	r2, #32
 800286a:	4013      	ands	r3, r2
 800286c:	d00f      	beq.n	800288e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800286e:	183b      	adds	r3, r7, r0
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2220      	movs	r2, #32
 8002874:	4013      	ands	r3, r2
 8002876:	d00a      	beq.n	800288e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800287c:	2b00      	cmp	r3, #0
 800287e:	d100      	bne.n	8002882 <HAL_UART_IRQHandler+0x62>
 8002880:	e296      	b.n	8002db0 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	0010      	movs	r0, r2
 800288a:	4798      	blx	r3
      }
      return;
 800288c:	e290      	b.n	8002db0 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800288e:	2398      	movs	r3, #152	; 0x98
 8002890:	18fb      	adds	r3, r7, r3
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d100      	bne.n	800289a <HAL_UART_IRQHandler+0x7a>
 8002898:	e114      	b.n	8002ac4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800289a:	239c      	movs	r3, #156	; 0x9c
 800289c:	18fb      	adds	r3, r7, r3
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2201      	movs	r2, #1
 80028a2:	4013      	ands	r3, r2
 80028a4:	d106      	bne.n	80028b4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80028a6:	23a0      	movs	r3, #160	; 0xa0
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a83      	ldr	r2, [pc, #524]	; (8002abc <HAL_UART_IRQHandler+0x29c>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	d100      	bne.n	80028b4 <HAL_UART_IRQHandler+0x94>
 80028b2:	e107      	b.n	8002ac4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80028b4:	23a4      	movs	r3, #164	; 0xa4
 80028b6:	18fb      	adds	r3, r7, r3
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2201      	movs	r2, #1
 80028bc:	4013      	ands	r3, r2
 80028be:	d012      	beq.n	80028e6 <HAL_UART_IRQHandler+0xc6>
 80028c0:	23a0      	movs	r3, #160	; 0xa0
 80028c2:	18fb      	adds	r3, r7, r3
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	2380      	movs	r3, #128	; 0x80
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	4013      	ands	r3, r2
 80028cc:	d00b      	beq.n	80028e6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2201      	movs	r2, #1
 80028d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2280      	movs	r2, #128	; 0x80
 80028da:	589b      	ldr	r3, [r3, r2]
 80028dc:	2201      	movs	r2, #1
 80028de:	431a      	orrs	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2180      	movs	r1, #128	; 0x80
 80028e4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028e6:	23a4      	movs	r3, #164	; 0xa4
 80028e8:	18fb      	adds	r3, r7, r3
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2202      	movs	r2, #2
 80028ee:	4013      	ands	r3, r2
 80028f0:	d011      	beq.n	8002916 <HAL_UART_IRQHandler+0xf6>
 80028f2:	239c      	movs	r3, #156	; 0x9c
 80028f4:	18fb      	adds	r3, r7, r3
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2201      	movs	r2, #1
 80028fa:	4013      	ands	r3, r2
 80028fc:	d00b      	beq.n	8002916 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2202      	movs	r2, #2
 8002904:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2280      	movs	r2, #128	; 0x80
 800290a:	589b      	ldr	r3, [r3, r2]
 800290c:	2204      	movs	r2, #4
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2180      	movs	r1, #128	; 0x80
 8002914:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002916:	23a4      	movs	r3, #164	; 0xa4
 8002918:	18fb      	adds	r3, r7, r3
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2204      	movs	r2, #4
 800291e:	4013      	ands	r3, r2
 8002920:	d011      	beq.n	8002946 <HAL_UART_IRQHandler+0x126>
 8002922:	239c      	movs	r3, #156	; 0x9c
 8002924:	18fb      	adds	r3, r7, r3
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2201      	movs	r2, #1
 800292a:	4013      	ands	r3, r2
 800292c:	d00b      	beq.n	8002946 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2204      	movs	r2, #4
 8002934:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2280      	movs	r2, #128	; 0x80
 800293a:	589b      	ldr	r3, [r3, r2]
 800293c:	2202      	movs	r2, #2
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2180      	movs	r1, #128	; 0x80
 8002944:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002946:	23a4      	movs	r3, #164	; 0xa4
 8002948:	18fb      	adds	r3, r7, r3
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2208      	movs	r2, #8
 800294e:	4013      	ands	r3, r2
 8002950:	d017      	beq.n	8002982 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002952:	23a0      	movs	r3, #160	; 0xa0
 8002954:	18fb      	adds	r3, r7, r3
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2220      	movs	r2, #32
 800295a:	4013      	ands	r3, r2
 800295c:	d105      	bne.n	800296a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800295e:	239c      	movs	r3, #156	; 0x9c
 8002960:	18fb      	adds	r3, r7, r3
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2201      	movs	r2, #1
 8002966:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002968:	d00b      	beq.n	8002982 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2208      	movs	r2, #8
 8002970:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2280      	movs	r2, #128	; 0x80
 8002976:	589b      	ldr	r3, [r3, r2]
 8002978:	2208      	movs	r2, #8
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2180      	movs	r1, #128	; 0x80
 8002980:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002982:	23a4      	movs	r3, #164	; 0xa4
 8002984:	18fb      	adds	r3, r7, r3
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	2380      	movs	r3, #128	; 0x80
 800298a:	011b      	lsls	r3, r3, #4
 800298c:	4013      	ands	r3, r2
 800298e:	d013      	beq.n	80029b8 <HAL_UART_IRQHandler+0x198>
 8002990:	23a0      	movs	r3, #160	; 0xa0
 8002992:	18fb      	adds	r3, r7, r3
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	2380      	movs	r3, #128	; 0x80
 8002998:	04db      	lsls	r3, r3, #19
 800299a:	4013      	ands	r3, r2
 800299c:	d00c      	beq.n	80029b8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2280      	movs	r2, #128	; 0x80
 80029a4:	0112      	lsls	r2, r2, #4
 80029a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2280      	movs	r2, #128	; 0x80
 80029ac:	589b      	ldr	r3, [r3, r2]
 80029ae:	2220      	movs	r2, #32
 80029b0:	431a      	orrs	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2180      	movs	r1, #128	; 0x80
 80029b6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2280      	movs	r2, #128	; 0x80
 80029bc:	589b      	ldr	r3, [r3, r2]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d100      	bne.n	80029c4 <HAL_UART_IRQHandler+0x1a4>
 80029c2:	e1f7      	b.n	8002db4 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80029c4:	23a4      	movs	r3, #164	; 0xa4
 80029c6:	18fb      	adds	r3, r7, r3
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2220      	movs	r2, #32
 80029cc:	4013      	ands	r3, r2
 80029ce:	d00e      	beq.n	80029ee <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80029d0:	23a0      	movs	r3, #160	; 0xa0
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2220      	movs	r2, #32
 80029d8:	4013      	ands	r3, r2
 80029da:	d008      	beq.n	80029ee <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d004      	beq.n	80029ee <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	0010      	movs	r0, r2
 80029ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2280      	movs	r2, #128	; 0x80
 80029f2:	589b      	ldr	r3, [r3, r2]
 80029f4:	2194      	movs	r1, #148	; 0x94
 80029f6:	187a      	adds	r2, r7, r1
 80029f8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	2240      	movs	r2, #64	; 0x40
 8002a02:	4013      	ands	r3, r2
 8002a04:	2b40      	cmp	r3, #64	; 0x40
 8002a06:	d004      	beq.n	8002a12 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002a08:	187b      	adds	r3, r7, r1
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2228      	movs	r2, #40	; 0x28
 8002a0e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a10:	d047      	beq.n	8002aa2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	0018      	movs	r0, r3
 8002a16:	f000 fdc9 	bl	80035ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	2240      	movs	r2, #64	; 0x40
 8002a22:	4013      	ands	r3, r2
 8002a24:	2b40      	cmp	r3, #64	; 0x40
 8002a26:	d137      	bne.n	8002a98 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a28:	f3ef 8310 	mrs	r3, PRIMASK
 8002a2c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002a2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a30:	2090      	movs	r0, #144	; 0x90
 8002a32:	183a      	adds	r2, r7, r0
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	2301      	movs	r3, #1
 8002a38:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a3c:	f383 8810 	msr	PRIMASK, r3
}
 8002a40:	46c0      	nop			; (mov r8, r8)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2140      	movs	r1, #64	; 0x40
 8002a4e:	438a      	bics	r2, r1
 8002a50:	609a      	str	r2, [r3, #8]
 8002a52:	183b      	adds	r3, r7, r0
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a5a:	f383 8810 	msr	PRIMASK, r3
}
 8002a5e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d012      	beq.n	8002a8e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6c:	4a14      	ldr	r2, [pc, #80]	; (8002ac0 <HAL_UART_IRQHandler+0x2a0>)
 8002a6e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a74:	0018      	movs	r0, r3
 8002a76:	f7fe fa13 	bl	8000ea0 <HAL_DMA_Abort_IT>
 8002a7a:	1e03      	subs	r3, r0, #0
 8002a7c:	d01a      	beq.n	8002ab4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a88:	0018      	movs	r0, r3
 8002a8a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a8c:	e012      	b.n	8002ab4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	0018      	movs	r0, r3
 8002a92:	f000 f9bd 	bl	8002e10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a96:	e00d      	b.n	8002ab4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f000 f9b8 	bl	8002e10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aa0:	e008      	b.n	8002ab4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f000 f9b3 	bl	8002e10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2280      	movs	r2, #128	; 0x80
 8002aae:	2100      	movs	r1, #0
 8002ab0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002ab2:	e17f      	b.n	8002db4 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab4:	46c0      	nop			; (mov r8, r8)
    return;
 8002ab6:	e17d      	b.n	8002db4 <HAL_UART_IRQHandler+0x594>
 8002ab8:	0000080f 	.word	0x0000080f
 8002abc:	04000120 	.word	0x04000120
 8002ac0:	08003907 	.word	0x08003907

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d000      	beq.n	8002ace <HAL_UART_IRQHandler+0x2ae>
 8002acc:	e131      	b.n	8002d32 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002ace:	23a4      	movs	r3, #164	; 0xa4
 8002ad0:	18fb      	adds	r3, r7, r3
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2210      	movs	r2, #16
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d100      	bne.n	8002adc <HAL_UART_IRQHandler+0x2bc>
 8002ada:	e12a      	b.n	8002d32 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002adc:	23a0      	movs	r3, #160	; 0xa0
 8002ade:	18fb      	adds	r3, r7, r3
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2210      	movs	r2, #16
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d100      	bne.n	8002aea <HAL_UART_IRQHandler+0x2ca>
 8002ae8:	e123      	b.n	8002d32 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2210      	movs	r2, #16
 8002af0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	2240      	movs	r2, #64	; 0x40
 8002afa:	4013      	ands	r3, r2
 8002afc:	2b40      	cmp	r3, #64	; 0x40
 8002afe:	d000      	beq.n	8002b02 <HAL_UART_IRQHandler+0x2e2>
 8002b00:	e09b      	b.n	8002c3a <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	217e      	movs	r1, #126	; 0x7e
 8002b0c:	187b      	adds	r3, r7, r1
 8002b0e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002b10:	187b      	adds	r3, r7, r1
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d100      	bne.n	8002b1a <HAL_UART_IRQHandler+0x2fa>
 8002b18:	e14e      	b.n	8002db8 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2258      	movs	r2, #88	; 0x58
 8002b1e:	5a9b      	ldrh	r3, [r3, r2]
 8002b20:	187a      	adds	r2, r7, r1
 8002b22:	8812      	ldrh	r2, [r2, #0]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d300      	bcc.n	8002b2a <HAL_UART_IRQHandler+0x30a>
 8002b28:	e146      	b.n	8002db8 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	187a      	adds	r2, r7, r1
 8002b2e:	215a      	movs	r1, #90	; 0x5a
 8002b30:	8812      	ldrh	r2, [r2, #0]
 8002b32:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	2b20      	cmp	r3, #32
 8002b3c:	d06e      	beq.n	8002c1c <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b3e:	f3ef 8310 	mrs	r3, PRIMASK
 8002b42:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b46:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b48:	2301      	movs	r3, #1
 8002b4a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b4e:	f383 8810 	msr	PRIMASK, r3
}
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	499a      	ldr	r1, [pc, #616]	; (8002dc8 <HAL_UART_IRQHandler+0x5a8>)
 8002b60:	400a      	ands	r2, r1
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b66:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6a:	f383 8810 	msr	PRIMASK, r3
}
 8002b6e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b70:	f3ef 8310 	mrs	r3, PRIMASK
 8002b74:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b78:	677b      	str	r3, [r7, #116]	; 0x74
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b80:	f383 8810 	msr	PRIMASK, r3
}
 8002b84:	46c0      	nop			; (mov r8, r8)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2101      	movs	r1, #1
 8002b92:	438a      	bics	r2, r1
 8002b94:	609a      	str	r2, [r3, #8]
 8002b96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b98:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b9c:	f383 8810 	msr	PRIMASK, r3
}
 8002ba0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ba2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ba6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002ba8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002baa:	673b      	str	r3, [r7, #112]	; 0x70
 8002bac:	2301      	movs	r3, #1
 8002bae:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bb2:	f383 8810 	msr	PRIMASK, r3
}
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2140      	movs	r1, #64	; 0x40
 8002bc4:	438a      	bics	r2, r1
 8002bc6:	609a      	str	r2, [r3, #8]
 8002bc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bca:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bce:	f383 8810 	msr	PRIMASK, r3
}
 8002bd2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002be0:	f3ef 8310 	mrs	r3, PRIMASK
 8002be4:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002bea:	2301      	movs	r3, #1
 8002bec:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bf0:	f383 8810 	msr	PRIMASK, r3
}
 8002bf4:	46c0      	nop			; (mov r8, r8)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2110      	movs	r1, #16
 8002c02:	438a      	bics	r2, r1
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c08:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c0c:	f383 8810 	msr	PRIMASK, r3
}
 8002c10:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c16:	0018      	movs	r0, r3
 8002c18:	f7fe f90a 	bl	8000e30 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2258      	movs	r2, #88	; 0x58
 8002c20:	5a9a      	ldrh	r2, [r3, r2]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	215a      	movs	r1, #90	; 0x5a
 8002c26:	5a5b      	ldrh	r3, [r3, r1]
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	0011      	movs	r1, r2
 8002c32:	0018      	movs	r0, r3
 8002c34:	f7fd fb70 	bl	8000318 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c38:	e0be      	b.n	8002db8 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2258      	movs	r2, #88	; 0x58
 8002c3e:	5a99      	ldrh	r1, [r3, r2]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	225a      	movs	r2, #90	; 0x5a
 8002c44:	5a9b      	ldrh	r3, [r3, r2]
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	208e      	movs	r0, #142	; 0x8e
 8002c4a:	183b      	adds	r3, r7, r0
 8002c4c:	1a8a      	subs	r2, r1, r2
 8002c4e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	225a      	movs	r2, #90	; 0x5a
 8002c54:	5a9b      	ldrh	r3, [r3, r2]
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d100      	bne.n	8002c5e <HAL_UART_IRQHandler+0x43e>
 8002c5c:	e0ae      	b.n	8002dbc <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8002c5e:	183b      	adds	r3, r7, r0
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d100      	bne.n	8002c68 <HAL_UART_IRQHandler+0x448>
 8002c66:	e0a9      	b.n	8002dbc <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c68:	f3ef 8310 	mrs	r3, PRIMASK
 8002c6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c70:	2488      	movs	r4, #136	; 0x88
 8002c72:	193a      	adds	r2, r7, r4
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	2301      	movs	r3, #1
 8002c78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	f383 8810 	msr	PRIMASK, r3
}
 8002c80:	46c0      	nop			; (mov r8, r8)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	494f      	ldr	r1, [pc, #316]	; (8002dcc <HAL_UART_IRQHandler+0x5ac>)
 8002c8e:	400a      	ands	r2, r1
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	193b      	adds	r3, r7, r4
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	f383 8810 	msr	PRIMASK, r3
}
 8002c9e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ca0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ca4:	61bb      	str	r3, [r7, #24]
  return(result);
 8002ca6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ca8:	2484      	movs	r4, #132	; 0x84
 8002caa:	193a      	adds	r2, r7, r4
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	2301      	movs	r3, #1
 8002cb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	f383 8810 	msr	PRIMASK, r3
}
 8002cb8:	46c0      	nop			; (mov r8, r8)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	438a      	bics	r2, r1
 8002cc8:	609a      	str	r2, [r3, #8]
 8002cca:	193b      	adds	r3, r7, r4
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	f383 8810 	msr	PRIMASK, r3
}
 8002cd6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cea:	f3ef 8310 	mrs	r3, PRIMASK
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cf2:	2480      	movs	r4, #128	; 0x80
 8002cf4:	193a      	adds	r2, r7, r4
 8002cf6:	6013      	str	r3, [r2, #0]
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfe:	f383 8810 	msr	PRIMASK, r3
}
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2110      	movs	r1, #16
 8002d10:	438a      	bics	r2, r1
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	193b      	adds	r3, r7, r4
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1c:	f383 8810 	msr	PRIMASK, r3
}
 8002d20:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d22:	183b      	adds	r3, r7, r0
 8002d24:	881a      	ldrh	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	0011      	movs	r1, r2
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f7fd faf4 	bl	8000318 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d30:	e044      	b.n	8002dbc <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002d32:	23a4      	movs	r3, #164	; 0xa4
 8002d34:	18fb      	adds	r3, r7, r3
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	2380      	movs	r3, #128	; 0x80
 8002d3a:	035b      	lsls	r3, r3, #13
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d010      	beq.n	8002d62 <HAL_UART_IRQHandler+0x542>
 8002d40:	239c      	movs	r3, #156	; 0x9c
 8002d42:	18fb      	adds	r3, r7, r3
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	2380      	movs	r3, #128	; 0x80
 8002d48:	03db      	lsls	r3, r3, #15
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d009      	beq.n	8002d62 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2280      	movs	r2, #128	; 0x80
 8002d54:	0352      	lsls	r2, r2, #13
 8002d56:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f000 fe15 	bl	800398a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d60:	e02f      	b.n	8002dc2 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002d62:	23a4      	movs	r3, #164	; 0xa4
 8002d64:	18fb      	adds	r3, r7, r3
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2280      	movs	r2, #128	; 0x80
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d00f      	beq.n	8002d8e <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002d6e:	23a0      	movs	r3, #160	; 0xa0
 8002d70:	18fb      	adds	r3, r7, r3
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2280      	movs	r2, #128	; 0x80
 8002d76:	4013      	ands	r3, r2
 8002d78:	d009      	beq.n	8002d8e <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d01e      	beq.n	8002dc0 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	0010      	movs	r0, r2
 8002d8a:	4798      	blx	r3
    }
    return;
 8002d8c:	e018      	b.n	8002dc0 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002d8e:	23a4      	movs	r3, #164	; 0xa4
 8002d90:	18fb      	adds	r3, r7, r3
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2240      	movs	r2, #64	; 0x40
 8002d96:	4013      	ands	r3, r2
 8002d98:	d013      	beq.n	8002dc2 <HAL_UART_IRQHandler+0x5a2>
 8002d9a:	23a0      	movs	r3, #160	; 0xa0
 8002d9c:	18fb      	adds	r3, r7, r3
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2240      	movs	r2, #64	; 0x40
 8002da2:	4013      	ands	r3, r2
 8002da4:	d00d      	beq.n	8002dc2 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	0018      	movs	r0, r3
 8002daa:	f000 fdc3 	bl	8003934 <UART_EndTransmit_IT>
    return;
 8002dae:	e008      	b.n	8002dc2 <HAL_UART_IRQHandler+0x5a2>
      return;
 8002db0:	46c0      	nop			; (mov r8, r8)
 8002db2:	e006      	b.n	8002dc2 <HAL_UART_IRQHandler+0x5a2>
    return;
 8002db4:	46c0      	nop			; (mov r8, r8)
 8002db6:	e004      	b.n	8002dc2 <HAL_UART_IRQHandler+0x5a2>
      return;
 8002db8:	46c0      	nop			; (mov r8, r8)
 8002dba:	e002      	b.n	8002dc2 <HAL_UART_IRQHandler+0x5a2>
      return;
 8002dbc:	46c0      	nop			; (mov r8, r8)
 8002dbe:	e000      	b.n	8002dc2 <HAL_UART_IRQHandler+0x5a2>
    return;
 8002dc0:	46c0      	nop			; (mov r8, r8)
  }

}
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	b02b      	add	sp, #172	; 0xac
 8002dc6:	bd90      	pop	{r4, r7, pc}
 8002dc8:	fffffeff 	.word	0xfffffeff
 8002dcc:	fffffedf 	.word	0xfffffedf

08002dd0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002dd8:	46c0      	nop			; (mov r8, r8)
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	b002      	add	sp, #8
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8002de8:	46c0      	nop			; (mov r8, r8)
 8002dea:	46bd      	mov	sp, r7
 8002dec:	b002      	add	sp, #8
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002df8:	46c0      	nop			; (mov r8, r8)
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	b002      	add	sp, #8
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002e08:	46c0      	nop			; (mov r8, r8)
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	b002      	add	sp, #8
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002e18:	46c0      	nop			; (mov r8, r8)
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	b002      	add	sp, #8
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b088      	sub	sp, #32
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e28:	231e      	movs	r3, #30
 8002e2a:	18fb      	adds	r3, r7, r3
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	69db      	ldr	r3, [r3, #28]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a8d      	ldr	r2, [pc, #564]	; (8003084 <UART_SetConfig+0x264>)
 8002e50:	4013      	ands	r3, r2
 8002e52:	0019      	movs	r1, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	4a88      	ldr	r2, [pc, #544]	; (8003088 <UART_SetConfig+0x268>)
 8002e66:	4013      	ands	r3, r2
 8002e68:	0019      	movs	r1, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	4a7f      	ldr	r2, [pc, #508]	; (800308c <UART_SetConfig+0x26c>)
 8002e8e:	4013      	ands	r3, r2
 8002e90:	0019      	movs	r1, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a7b      	ldr	r2, [pc, #492]	; (8003090 <UART_SetConfig+0x270>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d127      	bne.n	8002ef6 <UART_SetConfig+0xd6>
 8002ea6:	4b7b      	ldr	r3, [pc, #492]	; (8003094 <UART_SetConfig+0x274>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	2203      	movs	r2, #3
 8002eac:	4013      	ands	r3, r2
 8002eae:	2b03      	cmp	r3, #3
 8002eb0:	d00d      	beq.n	8002ece <UART_SetConfig+0xae>
 8002eb2:	d81b      	bhi.n	8002eec <UART_SetConfig+0xcc>
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d014      	beq.n	8002ee2 <UART_SetConfig+0xc2>
 8002eb8:	d818      	bhi.n	8002eec <UART_SetConfig+0xcc>
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d002      	beq.n	8002ec4 <UART_SetConfig+0xa4>
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d00a      	beq.n	8002ed8 <UART_SetConfig+0xb8>
 8002ec2:	e013      	b.n	8002eec <UART_SetConfig+0xcc>
 8002ec4:	231f      	movs	r3, #31
 8002ec6:	18fb      	adds	r3, r7, r3
 8002ec8:	2200      	movs	r2, #0
 8002eca:	701a      	strb	r2, [r3, #0]
 8002ecc:	e021      	b.n	8002f12 <UART_SetConfig+0xf2>
 8002ece:	231f      	movs	r3, #31
 8002ed0:	18fb      	adds	r3, r7, r3
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	701a      	strb	r2, [r3, #0]
 8002ed6:	e01c      	b.n	8002f12 <UART_SetConfig+0xf2>
 8002ed8:	231f      	movs	r3, #31
 8002eda:	18fb      	adds	r3, r7, r3
 8002edc:	2204      	movs	r2, #4
 8002ede:	701a      	strb	r2, [r3, #0]
 8002ee0:	e017      	b.n	8002f12 <UART_SetConfig+0xf2>
 8002ee2:	231f      	movs	r3, #31
 8002ee4:	18fb      	adds	r3, r7, r3
 8002ee6:	2208      	movs	r2, #8
 8002ee8:	701a      	strb	r2, [r3, #0]
 8002eea:	e012      	b.n	8002f12 <UART_SetConfig+0xf2>
 8002eec:	231f      	movs	r3, #31
 8002eee:	18fb      	adds	r3, r7, r3
 8002ef0:	2210      	movs	r2, #16
 8002ef2:	701a      	strb	r2, [r3, #0]
 8002ef4:	e00d      	b.n	8002f12 <UART_SetConfig+0xf2>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a67      	ldr	r2, [pc, #412]	; (8003098 <UART_SetConfig+0x278>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d104      	bne.n	8002f0a <UART_SetConfig+0xea>
 8002f00:	231f      	movs	r3, #31
 8002f02:	18fb      	adds	r3, r7, r3
 8002f04:	2200      	movs	r2, #0
 8002f06:	701a      	strb	r2, [r3, #0]
 8002f08:	e003      	b.n	8002f12 <UART_SetConfig+0xf2>
 8002f0a:	231f      	movs	r3, #31
 8002f0c:	18fb      	adds	r3, r7, r3
 8002f0e:	2210      	movs	r2, #16
 8002f10:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69da      	ldr	r2, [r3, #28]
 8002f16:	2380      	movs	r3, #128	; 0x80
 8002f18:	021b      	lsls	r3, r3, #8
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d15d      	bne.n	8002fda <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8002f1e:	231f      	movs	r3, #31
 8002f20:	18fb      	adds	r3, r7, r3
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d015      	beq.n	8002f54 <UART_SetConfig+0x134>
 8002f28:	dc18      	bgt.n	8002f5c <UART_SetConfig+0x13c>
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	d00d      	beq.n	8002f4a <UART_SetConfig+0x12a>
 8002f2e:	dc15      	bgt.n	8002f5c <UART_SetConfig+0x13c>
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <UART_SetConfig+0x11a>
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d005      	beq.n	8002f44 <UART_SetConfig+0x124>
 8002f38:	e010      	b.n	8002f5c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f3a:	f7ff fa87 	bl	800244c <HAL_RCC_GetPCLK1Freq>
 8002f3e:	0003      	movs	r3, r0
 8002f40:	61bb      	str	r3, [r7, #24]
        break;
 8002f42:	e012      	b.n	8002f6a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f44:	4b55      	ldr	r3, [pc, #340]	; (800309c <UART_SetConfig+0x27c>)
 8002f46:	61bb      	str	r3, [r7, #24]
        break;
 8002f48:	e00f      	b.n	8002f6a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f4a:	f7ff fa11 	bl	8002370 <HAL_RCC_GetSysClockFreq>
 8002f4e:	0003      	movs	r3, r0
 8002f50:	61bb      	str	r3, [r7, #24]
        break;
 8002f52:	e00a      	b.n	8002f6a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f54:	2380      	movs	r3, #128	; 0x80
 8002f56:	021b      	lsls	r3, r3, #8
 8002f58:	61bb      	str	r3, [r7, #24]
        break;
 8002f5a:	e006      	b.n	8002f6a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f60:	231e      	movs	r3, #30
 8002f62:	18fb      	adds	r3, r7, r3
 8002f64:	2201      	movs	r2, #1
 8002f66:	701a      	strb	r2, [r3, #0]
        break;
 8002f68:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d100      	bne.n	8002f72 <UART_SetConfig+0x152>
 8002f70:	e07b      	b.n	800306a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	005a      	lsls	r2, r3, #1
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	085b      	lsrs	r3, r3, #1
 8002f7c:	18d2      	adds	r2, r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	0019      	movs	r1, r3
 8002f84:	0010      	movs	r0, r2
 8002f86:	f7fd f8bf 	bl	8000108 <__udivsi3>
 8002f8a:	0003      	movs	r3, r0
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	2b0f      	cmp	r3, #15
 8002f94:	d91c      	bls.n	8002fd0 <UART_SetConfig+0x1b0>
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	2380      	movs	r3, #128	; 0x80
 8002f9a:	025b      	lsls	r3, r3, #9
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d217      	bcs.n	8002fd0 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	200e      	movs	r0, #14
 8002fa6:	183b      	adds	r3, r7, r0
 8002fa8:	210f      	movs	r1, #15
 8002faa:	438a      	bics	r2, r1
 8002fac:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	085b      	lsrs	r3, r3, #1
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	2207      	movs	r2, #7
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	b299      	uxth	r1, r3
 8002fba:	183b      	adds	r3, r7, r0
 8002fbc:	183a      	adds	r2, r7, r0
 8002fbe:	8812      	ldrh	r2, [r2, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	183a      	adds	r2, r7, r0
 8002fca:	8812      	ldrh	r2, [r2, #0]
 8002fcc:	60da      	str	r2, [r3, #12]
 8002fce:	e04c      	b.n	800306a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002fd0:	231e      	movs	r3, #30
 8002fd2:	18fb      	adds	r3, r7, r3
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	701a      	strb	r2, [r3, #0]
 8002fd8:	e047      	b.n	800306a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fda:	231f      	movs	r3, #31
 8002fdc:	18fb      	adds	r3, r7, r3
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b08      	cmp	r3, #8
 8002fe2:	d015      	beq.n	8003010 <UART_SetConfig+0x1f0>
 8002fe4:	dc18      	bgt.n	8003018 <UART_SetConfig+0x1f8>
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d00d      	beq.n	8003006 <UART_SetConfig+0x1e6>
 8002fea:	dc15      	bgt.n	8003018 <UART_SetConfig+0x1f8>
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d002      	beq.n	8002ff6 <UART_SetConfig+0x1d6>
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d005      	beq.n	8003000 <UART_SetConfig+0x1e0>
 8002ff4:	e010      	b.n	8003018 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ff6:	f7ff fa29 	bl	800244c <HAL_RCC_GetPCLK1Freq>
 8002ffa:	0003      	movs	r3, r0
 8002ffc:	61bb      	str	r3, [r7, #24]
        break;
 8002ffe:	e012      	b.n	8003026 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003000:	4b26      	ldr	r3, [pc, #152]	; (800309c <UART_SetConfig+0x27c>)
 8003002:	61bb      	str	r3, [r7, #24]
        break;
 8003004:	e00f      	b.n	8003026 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003006:	f7ff f9b3 	bl	8002370 <HAL_RCC_GetSysClockFreq>
 800300a:	0003      	movs	r3, r0
 800300c:	61bb      	str	r3, [r7, #24]
        break;
 800300e:	e00a      	b.n	8003026 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003010:	2380      	movs	r3, #128	; 0x80
 8003012:	021b      	lsls	r3, r3, #8
 8003014:	61bb      	str	r3, [r7, #24]
        break;
 8003016:	e006      	b.n	8003026 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8003018:	2300      	movs	r3, #0
 800301a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800301c:	231e      	movs	r3, #30
 800301e:	18fb      	adds	r3, r7, r3
 8003020:	2201      	movs	r2, #1
 8003022:	701a      	strb	r2, [r3, #0]
        break;
 8003024:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d01e      	beq.n	800306a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	085a      	lsrs	r2, r3, #1
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	18d2      	adds	r2, r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	0019      	movs	r1, r3
 800303c:	0010      	movs	r0, r2
 800303e:	f7fd f863 	bl	8000108 <__udivsi3>
 8003042:	0003      	movs	r3, r0
 8003044:	b29b      	uxth	r3, r3
 8003046:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	2b0f      	cmp	r3, #15
 800304c:	d909      	bls.n	8003062 <UART_SetConfig+0x242>
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	2380      	movs	r3, #128	; 0x80
 8003052:	025b      	lsls	r3, r3, #9
 8003054:	429a      	cmp	r2, r3
 8003056:	d204      	bcs.n	8003062 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	60da      	str	r2, [r3, #12]
 8003060:	e003      	b.n	800306a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003062:	231e      	movs	r3, #30
 8003064:	18fb      	adds	r3, r7, r3
 8003066:	2201      	movs	r2, #1
 8003068:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003076:	231e      	movs	r3, #30
 8003078:	18fb      	adds	r3, r7, r3
 800307a:	781b      	ldrb	r3, [r3, #0]
}
 800307c:	0018      	movs	r0, r3
 800307e:	46bd      	mov	sp, r7
 8003080:	b008      	add	sp, #32
 8003082:	bd80      	pop	{r7, pc}
 8003084:	ffff69f3 	.word	0xffff69f3
 8003088:	ffffcfff 	.word	0xffffcfff
 800308c:	fffff4ff 	.word	0xfffff4ff
 8003090:	40013800 	.word	0x40013800
 8003094:	40021000 	.word	0x40021000
 8003098:	40004400 	.word	0x40004400
 800309c:	007a1200 	.word	0x007a1200

080030a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	2201      	movs	r2, #1
 80030ae:	4013      	ands	r3, r2
 80030b0:	d00b      	beq.n	80030ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	4a4a      	ldr	r2, [pc, #296]	; (80031e4 <UART_AdvFeatureConfig+0x144>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	0019      	movs	r1, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ce:	2202      	movs	r2, #2
 80030d0:	4013      	ands	r3, r2
 80030d2:	d00b      	beq.n	80030ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	4a43      	ldr	r2, [pc, #268]	; (80031e8 <UART_AdvFeatureConfig+0x148>)
 80030dc:	4013      	ands	r3, r2
 80030de:	0019      	movs	r1, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	2204      	movs	r2, #4
 80030f2:	4013      	ands	r3, r2
 80030f4:	d00b      	beq.n	800310e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	4a3b      	ldr	r2, [pc, #236]	; (80031ec <UART_AdvFeatureConfig+0x14c>)
 80030fe:	4013      	ands	r3, r2
 8003100:	0019      	movs	r1, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	2208      	movs	r2, #8
 8003114:	4013      	ands	r3, r2
 8003116:	d00b      	beq.n	8003130 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	4a34      	ldr	r2, [pc, #208]	; (80031f0 <UART_AdvFeatureConfig+0x150>)
 8003120:	4013      	ands	r3, r2
 8003122:	0019      	movs	r1, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	2210      	movs	r2, #16
 8003136:	4013      	ands	r3, r2
 8003138:	d00b      	beq.n	8003152 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	4a2c      	ldr	r2, [pc, #176]	; (80031f4 <UART_AdvFeatureConfig+0x154>)
 8003142:	4013      	ands	r3, r2
 8003144:	0019      	movs	r1, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	2220      	movs	r2, #32
 8003158:	4013      	ands	r3, r2
 800315a:	d00b      	beq.n	8003174 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	4a25      	ldr	r2, [pc, #148]	; (80031f8 <UART_AdvFeatureConfig+0x158>)
 8003164:	4013      	ands	r3, r2
 8003166:	0019      	movs	r1, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	2240      	movs	r2, #64	; 0x40
 800317a:	4013      	ands	r3, r2
 800317c:	d01d      	beq.n	80031ba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	4a1d      	ldr	r2, [pc, #116]	; (80031fc <UART_AdvFeatureConfig+0x15c>)
 8003186:	4013      	ands	r3, r2
 8003188:	0019      	movs	r1, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800319a:	2380      	movs	r3, #128	; 0x80
 800319c:	035b      	lsls	r3, r3, #13
 800319e:	429a      	cmp	r2, r3
 80031a0:	d10b      	bne.n	80031ba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	4a15      	ldr	r2, [pc, #84]	; (8003200 <UART_AdvFeatureConfig+0x160>)
 80031aa:	4013      	ands	r3, r2
 80031ac:	0019      	movs	r1, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	2280      	movs	r2, #128	; 0x80
 80031c0:	4013      	ands	r3, r2
 80031c2:	d00b      	beq.n	80031dc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	4a0e      	ldr	r2, [pc, #56]	; (8003204 <UART_AdvFeatureConfig+0x164>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	0019      	movs	r1, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	605a      	str	r2, [r3, #4]
  }
}
 80031dc:	46c0      	nop			; (mov r8, r8)
 80031de:	46bd      	mov	sp, r7
 80031e0:	b002      	add	sp, #8
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	fffdffff 	.word	0xfffdffff
 80031e8:	fffeffff 	.word	0xfffeffff
 80031ec:	fffbffff 	.word	0xfffbffff
 80031f0:	ffff7fff 	.word	0xffff7fff
 80031f4:	ffffefff 	.word	0xffffefff
 80031f8:	ffffdfff 	.word	0xffffdfff
 80031fc:	ffefffff 	.word	0xffefffff
 8003200:	ff9fffff 	.word	0xff9fffff
 8003204:	fff7ffff 	.word	0xfff7ffff

08003208 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af02      	add	r7, sp, #8
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2280      	movs	r2, #128	; 0x80
 8003214:	2100      	movs	r1, #0
 8003216:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003218:	f7fd fc50 	bl	8000abc <HAL_GetTick>
 800321c:	0003      	movs	r3, r0
 800321e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2208      	movs	r2, #8
 8003228:	4013      	ands	r3, r2
 800322a:	2b08      	cmp	r3, #8
 800322c:	d10c      	bne.n	8003248 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2280      	movs	r2, #128	; 0x80
 8003232:	0391      	lsls	r1, r2, #14
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	4a17      	ldr	r2, [pc, #92]	; (8003294 <UART_CheckIdleState+0x8c>)
 8003238:	9200      	str	r2, [sp, #0]
 800323a:	2200      	movs	r2, #0
 800323c:	f000 f82c 	bl	8003298 <UART_WaitOnFlagUntilTimeout>
 8003240:	1e03      	subs	r3, r0, #0
 8003242:	d001      	beq.n	8003248 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e021      	b.n	800328c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2204      	movs	r2, #4
 8003250:	4013      	ands	r3, r2
 8003252:	2b04      	cmp	r3, #4
 8003254:	d10c      	bne.n	8003270 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2280      	movs	r2, #128	; 0x80
 800325a:	03d1      	lsls	r1, r2, #15
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	4a0d      	ldr	r2, [pc, #52]	; (8003294 <UART_CheckIdleState+0x8c>)
 8003260:	9200      	str	r2, [sp, #0]
 8003262:	2200      	movs	r2, #0
 8003264:	f000 f818 	bl	8003298 <UART_WaitOnFlagUntilTimeout>
 8003268:	1e03      	subs	r3, r0, #0
 800326a:	d001      	beq.n	8003270 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e00d      	b.n	800328c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2220      	movs	r2, #32
 8003274:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2220      	movs	r2, #32
 800327a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2274      	movs	r2, #116	; 0x74
 8003286:	2100      	movs	r1, #0
 8003288:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	0018      	movs	r0, r3
 800328e:	46bd      	mov	sp, r7
 8003290:	b004      	add	sp, #16
 8003292:	bd80      	pop	{r7, pc}
 8003294:	01ffffff 	.word	0x01ffffff

08003298 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b094      	sub	sp, #80	; 0x50
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	603b      	str	r3, [r7, #0]
 80032a4:	1dfb      	adds	r3, r7, #7
 80032a6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032a8:	e0a3      	b.n	80033f2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032ac:	3301      	adds	r3, #1
 80032ae:	d100      	bne.n	80032b2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80032b0:	e09f      	b.n	80033f2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b2:	f7fd fc03 	bl	8000abc <HAL_GetTick>
 80032b6:	0002      	movs	r2, r0
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032be:	429a      	cmp	r2, r3
 80032c0:	d302      	bcc.n	80032c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80032c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d13d      	bne.n	8003344 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032c8:	f3ef 8310 	mrs	r3, PRIMASK
 80032cc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80032ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032d0:	647b      	str	r3, [r7, #68]	; 0x44
 80032d2:	2301      	movs	r3, #1
 80032d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d8:	f383 8810 	msr	PRIMASK, r3
}
 80032dc:	46c0      	nop			; (mov r8, r8)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	494c      	ldr	r1, [pc, #304]	; (800341c <UART_WaitOnFlagUntilTimeout+0x184>)
 80032ea:	400a      	ands	r2, r1
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032f0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f4:	f383 8810 	msr	PRIMASK, r3
}
 80032f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032fa:	f3ef 8310 	mrs	r3, PRIMASK
 80032fe:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003302:	643b      	str	r3, [r7, #64]	; 0x40
 8003304:	2301      	movs	r3, #1
 8003306:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330a:	f383 8810 	msr	PRIMASK, r3
}
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689a      	ldr	r2, [r3, #8]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2101      	movs	r1, #1
 800331c:	438a      	bics	r2, r1
 800331e:	609a      	str	r2, [r3, #8]
 8003320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003322:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003326:	f383 8810 	msr	PRIMASK, r3
}
 800332a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2220      	movs	r2, #32
 8003330:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2220      	movs	r2, #32
 8003336:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2274      	movs	r2, #116	; 0x74
 800333c:	2100      	movs	r1, #0
 800333e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e067      	b.n	8003414 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2204      	movs	r2, #4
 800334c:	4013      	ands	r3, r2
 800334e:	d050      	beq.n	80033f2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	69da      	ldr	r2, [r3, #28]
 8003356:	2380      	movs	r3, #128	; 0x80
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	401a      	ands	r2, r3
 800335c:	2380      	movs	r3, #128	; 0x80
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	429a      	cmp	r2, r3
 8003362:	d146      	bne.n	80033f2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2280      	movs	r2, #128	; 0x80
 800336a:	0112      	lsls	r2, r2, #4
 800336c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800336e:	f3ef 8310 	mrs	r3, PRIMASK
 8003372:	613b      	str	r3, [r7, #16]
  return(result);
 8003374:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003376:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003378:	2301      	movs	r3, #1
 800337a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	f383 8810 	msr	PRIMASK, r3
}
 8003382:	46c0      	nop			; (mov r8, r8)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4923      	ldr	r1, [pc, #140]	; (800341c <UART_WaitOnFlagUntilTimeout+0x184>)
 8003390:	400a      	ands	r2, r1
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003396:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	f383 8810 	msr	PRIMASK, r3
}
 800339e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033a0:	f3ef 8310 	mrs	r3, PRIMASK
 80033a4:	61fb      	str	r3, [r7, #28]
  return(result);
 80033a6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80033aa:	2301      	movs	r3, #1
 80033ac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	f383 8810 	msr	PRIMASK, r3
}
 80033b4:	46c0      	nop			; (mov r8, r8)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2101      	movs	r1, #1
 80033c2:	438a      	bics	r2, r1
 80033c4:	609a      	str	r2, [r3, #8]
 80033c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	f383 8810 	msr	PRIMASK, r3
}
 80033d0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2220      	movs	r2, #32
 80033d6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2220      	movs	r2, #32
 80033dc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2280      	movs	r2, #128	; 0x80
 80033e2:	2120      	movs	r1, #32
 80033e4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2274      	movs	r2, #116	; 0x74
 80033ea:	2100      	movs	r1, #0
 80033ec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e010      	b.n	8003414 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	69db      	ldr	r3, [r3, #28]
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	4013      	ands	r3, r2
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	425a      	negs	r2, r3
 8003402:	4153      	adcs	r3, r2
 8003404:	b2db      	uxtb	r3, r3
 8003406:	001a      	movs	r2, r3
 8003408:	1dfb      	adds	r3, r7, #7
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	429a      	cmp	r2, r3
 800340e:	d100      	bne.n	8003412 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003410:	e74b      	b.n	80032aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	0018      	movs	r0, r3
 8003416:	46bd      	mov	sp, r7
 8003418:	b014      	add	sp, #80	; 0x50
 800341a:	bd80      	pop	{r7, pc}
 800341c:	fffffe5f 	.word	0xfffffe5f

08003420 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b090      	sub	sp, #64	; 0x40
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	1dbb      	adds	r3, r7, #6
 800342c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	1dba      	adds	r2, r7, #6
 8003438:	2158      	movs	r1, #88	; 0x58
 800343a:	8812      	ldrh	r2, [r2, #0]
 800343c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2280      	movs	r2, #128	; 0x80
 8003442:	2100      	movs	r1, #0
 8003444:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2222      	movs	r2, #34	; 0x22
 800344a:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003450:	2b00      	cmp	r3, #0
 8003452:	d02b      	beq.n	80034ac <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003458:	4a3f      	ldr	r2, [pc, #252]	; (8003558 <UART_Start_Receive_DMA+0x138>)
 800345a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003460:	4a3e      	ldr	r2, [pc, #248]	; (800355c <UART_Start_Receive_DMA+0x13c>)
 8003462:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003468:	4a3d      	ldr	r2, [pc, #244]	; (8003560 <UART_Start_Receive_DMA+0x140>)
 800346a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003470:	2200      	movs	r2, #0
 8003472:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	3324      	adds	r3, #36	; 0x24
 800347e:	0019      	movs	r1, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003484:	001a      	movs	r2, r3
 8003486:	1dbb      	adds	r3, r7, #6
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	f7fd fc6b 	bl	8000d64 <HAL_DMA_Start_IT>
 800348e:	1e03      	subs	r3, r0, #0
 8003490:	d00c      	beq.n	80034ac <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2280      	movs	r2, #128	; 0x80
 8003496:	2110      	movs	r1, #16
 8003498:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2274      	movs	r2, #116	; 0x74
 800349e:	2100      	movs	r1, #0
 80034a0:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2220      	movs	r2, #32
 80034a6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e050      	b.n	800354e <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2274      	movs	r2, #116	; 0x74
 80034b0:	2100      	movs	r1, #0
 80034b2:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034b4:	f3ef 8310 	mrs	r3, PRIMASK
 80034b8:	613b      	str	r3, [r7, #16]
  return(result);
 80034ba:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034be:	2301      	movs	r3, #1
 80034c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f383 8810 	msr	PRIMASK, r3
}
 80034c8:	46c0      	nop			; (mov r8, r8)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2180      	movs	r1, #128	; 0x80
 80034d6:	0049      	lsls	r1, r1, #1
 80034d8:	430a      	orrs	r2, r1
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034de:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	f383 8810 	msr	PRIMASK, r3
}
 80034e6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034e8:	f3ef 8310 	mrs	r3, PRIMASK
 80034ec:	61fb      	str	r3, [r7, #28]
  return(result);
 80034ee:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80034f2:	2301      	movs	r3, #1
 80034f4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	f383 8810 	msr	PRIMASK, r3
}
 80034fc:	46c0      	nop			; (mov r8, r8)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2101      	movs	r1, #1
 800350a:	430a      	orrs	r2, r1
 800350c:	609a      	str	r2, [r3, #8]
 800350e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003510:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	f383 8810 	msr	PRIMASK, r3
}
 8003518:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800351a:	f3ef 8310 	mrs	r3, PRIMASK
 800351e:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003520:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003522:	637b      	str	r3, [r7, #52]	; 0x34
 8003524:	2301      	movs	r3, #1
 8003526:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352a:	f383 8810 	msr	PRIMASK, r3
}
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2140      	movs	r1, #64	; 0x40
 800353c:	430a      	orrs	r2, r1
 800353e:	609a      	str	r2, [r3, #8]
 8003540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003542:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003546:	f383 8810 	msr	PRIMASK, r3
}
 800354a:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	0018      	movs	r0, r3
 8003550:	46bd      	mov	sp, r7
 8003552:	b010      	add	sp, #64	; 0x40
 8003554:	bd80      	pop	{r7, pc}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	08003725 	.word	0x08003725
 800355c:	08003849 	.word	0x08003849
 8003560:	08003885 	.word	0x08003885

08003564 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800356c:	f3ef 8310 	mrs	r3, PRIMASK
 8003570:	60bb      	str	r3, [r7, #8]
  return(result);
 8003572:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003574:	617b      	str	r3, [r7, #20]
 8003576:	2301      	movs	r3, #1
 8003578:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f383 8810 	msr	PRIMASK, r3
}
 8003580:	46c0      	nop			; (mov r8, r8)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	21c0      	movs	r1, #192	; 0xc0
 800358e:	438a      	bics	r2, r1
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f383 8810 	msr	PRIMASK, r3
}
 800359c:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2220      	movs	r2, #32
 80035a2:	679a      	str	r2, [r3, #120]	; 0x78
}
 80035a4:	46c0      	nop			; (mov r8, r8)
 80035a6:	46bd      	mov	sp, r7
 80035a8:	b006      	add	sp, #24
 80035aa:	bd80      	pop	{r7, pc}

080035ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b08e      	sub	sp, #56	; 0x38
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035b4:	f3ef 8310 	mrs	r3, PRIMASK
 80035b8:	617b      	str	r3, [r7, #20]
  return(result);
 80035ba:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035bc:	637b      	str	r3, [r7, #52]	; 0x34
 80035be:	2301      	movs	r3, #1
 80035c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	f383 8810 	msr	PRIMASK, r3
}
 80035c8:	46c0      	nop			; (mov r8, r8)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4925      	ldr	r1, [pc, #148]	; (800366c <UART_EndRxTransfer+0xc0>)
 80035d6:	400a      	ands	r2, r1
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	f383 8810 	msr	PRIMASK, r3
}
 80035e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035e6:	f3ef 8310 	mrs	r3, PRIMASK
 80035ea:	623b      	str	r3, [r7, #32]
  return(result);
 80035ec:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ee:	633b      	str	r3, [r7, #48]	; 0x30
 80035f0:	2301      	movs	r3, #1
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	f383 8810 	msr	PRIMASK, r3
}
 80035fa:	46c0      	nop			; (mov r8, r8)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2101      	movs	r1, #1
 8003608:	438a      	bics	r2, r1
 800360a:	609a      	str	r2, [r3, #8]
 800360c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003612:	f383 8810 	msr	PRIMASK, r3
}
 8003616:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800361c:	2b01      	cmp	r3, #1
 800361e:	d118      	bne.n	8003652 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003620:	f3ef 8310 	mrs	r3, PRIMASK
 8003624:	60bb      	str	r3, [r7, #8]
  return(result);
 8003626:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003628:	62fb      	str	r3, [r7, #44]	; 0x2c
 800362a:	2301      	movs	r3, #1
 800362c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f383 8810 	msr	PRIMASK, r3
}
 8003634:	46c0      	nop			; (mov r8, r8)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2110      	movs	r1, #16
 8003642:	438a      	bics	r2, r1
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003648:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	f383 8810 	msr	PRIMASK, r3
}
 8003650:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2220      	movs	r2, #32
 8003656:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003664:	46c0      	nop			; (mov r8, r8)
 8003666:	46bd      	mov	sp, r7
 8003668:	b00e      	add	sp, #56	; 0x38
 800366a:	bd80      	pop	{r7, pc}
 800366c:	fffffedf 	.word	0xfffffedf

08003670 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b08c      	sub	sp, #48	; 0x30
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	2b20      	cmp	r3, #32
 8003684:	d035      	beq.n	80036f2 <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 8003686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003688:	2252      	movs	r2, #82	; 0x52
 800368a:	2100      	movs	r1, #0
 800368c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800368e:	f3ef 8310 	mrs	r3, PRIMASK
 8003692:	60fb      	str	r3, [r7, #12]
  return(result);
 8003694:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003696:	62bb      	str	r3, [r7, #40]	; 0x28
 8003698:	2301      	movs	r3, #1
 800369a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	f383 8810 	msr	PRIMASK, r3
}
 80036a2:	46c0      	nop			; (mov r8, r8)
 80036a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2180      	movs	r1, #128	; 0x80
 80036b0:	438a      	bics	r2, r1
 80036b2:	609a      	str	r2, [r3, #8]
 80036b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f383 8810 	msr	PRIMASK, r3
}
 80036be:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036c0:	f3ef 8310 	mrs	r3, PRIMASK
 80036c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80036c6:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80036c8:	627b      	str	r3, [r7, #36]	; 0x24
 80036ca:	2301      	movs	r3, #1
 80036cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	f383 8810 	msr	PRIMASK, r3
}
 80036d4:	46c0      	nop			; (mov r8, r8)
 80036d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2140      	movs	r1, #64	; 0x40
 80036e2:	430a      	orrs	r2, r1
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	f383 8810 	msr	PRIMASK, r3
}
 80036f0:	e004      	b.n	80036fc <UART_DMATransmitCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 80036f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f4:	0018      	movs	r0, r3
 80036f6:	f7ff fb6b 	bl	8002dd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80036fa:	46c0      	nop			; (mov r8, r8)
 80036fc:	46c0      	nop			; (mov r8, r8)
 80036fe:	46bd      	mov	sp, r7
 8003700:	b00c      	add	sp, #48	; 0x30
 8003702:	bd80      	pop	{r7, pc}

08003704 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	0018      	movs	r0, r3
 8003716:	f7ff fb63 	bl	8002de0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	46bd      	mov	sp, r7
 800371e:	b004      	add	sp, #16
 8003720:	bd80      	pop	{r7, pc}
	...

08003724 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b094      	sub	sp, #80	; 0x50
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	2b20      	cmp	r3, #32
 8003738:	d06e      	beq.n	8003818 <UART_DMAReceiveCplt+0xf4>
  {
    huart->RxXferCount = 0U;
 800373a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800373c:	225a      	movs	r2, #90	; 0x5a
 800373e:	2100      	movs	r1, #0
 8003740:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003742:	f3ef 8310 	mrs	r3, PRIMASK
 8003746:	61bb      	str	r3, [r7, #24]
  return(result);
 8003748:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800374a:	64bb      	str	r3, [r7, #72]	; 0x48
 800374c:	2301      	movs	r3, #1
 800374e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	f383 8810 	msr	PRIMASK, r3
}
 8003756:	46c0      	nop			; (mov r8, r8)
 8003758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4938      	ldr	r1, [pc, #224]	; (8003844 <UART_DMAReceiveCplt+0x120>)
 8003764:	400a      	ands	r2, r1
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800376a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800376c:	6a3b      	ldr	r3, [r7, #32]
 800376e:	f383 8810 	msr	PRIMASK, r3
}
 8003772:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003774:	f3ef 8310 	mrs	r3, PRIMASK
 8003778:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800377c:	647b      	str	r3, [r7, #68]	; 0x44
 800377e:	2301      	movs	r3, #1
 8003780:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003784:	f383 8810 	msr	PRIMASK, r3
}
 8003788:	46c0      	nop			; (mov r8, r8)
 800378a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2101      	movs	r1, #1
 8003796:	438a      	bics	r2, r1
 8003798:	609a      	str	r2, [r3, #8]
 800379a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800379c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800379e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a0:	f383 8810 	msr	PRIMASK, r3
}
 80037a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037a6:	f3ef 8310 	mrs	r3, PRIMASK
 80037aa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80037ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037ae:	643b      	str	r3, [r7, #64]	; 0x40
 80037b0:	2301      	movs	r3, #1
 80037b2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b6:	f383 8810 	msr	PRIMASK, r3
}
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2140      	movs	r1, #64	; 0x40
 80037c8:	438a      	bics	r2, r1
 80037ca:	609a      	str	r2, [r3, #8]
 80037cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037ce:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d2:	f383 8810 	msr	PRIMASK, r3
}
 80037d6:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80037d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037da:	2220      	movs	r2, #32
 80037dc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d118      	bne.n	8003818 <UART_DMAReceiveCplt+0xf4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037e6:	f3ef 8310 	mrs	r3, PRIMASK
 80037ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80037ec:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037f0:	2301      	movs	r3, #1
 80037f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	f383 8810 	msr	PRIMASK, r3
}
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2110      	movs	r1, #16
 8003808:	438a      	bics	r2, r1
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800380e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f383 8810 	msr	PRIMASK, r3
}
 8003816:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800381a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800381c:	2b01      	cmp	r3, #1
 800381e:	d108      	bne.n	8003832 <UART_DMAReceiveCplt+0x10e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003822:	2258      	movs	r2, #88	; 0x58
 8003824:	5a9a      	ldrh	r2, [r3, r2]
 8003826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003828:	0011      	movs	r1, r2
 800382a:	0018      	movs	r0, r3
 800382c:	f7fc fd74 	bl	8000318 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003830:	e003      	b.n	800383a <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 8003832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003834:	0018      	movs	r0, r3
 8003836:	f7ff fadb 	bl	8002df0 <HAL_UART_RxCpltCallback>
}
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	46bd      	mov	sp, r7
 800383e:	b014      	add	sp, #80	; 0x50
 8003840:	bd80      	pop	{r7, pc}
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	fffffeff 	.word	0xfffffeff

08003848 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800385a:	2b01      	cmp	r3, #1
 800385c:	d10a      	bne.n	8003874 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2258      	movs	r2, #88	; 0x58
 8003862:	5a9b      	ldrh	r3, [r3, r2]
 8003864:	085b      	lsrs	r3, r3, #1
 8003866:	b29a      	uxth	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	0011      	movs	r1, r2
 800386c:	0018      	movs	r0, r3
 800386e:	f7fc fd53 	bl	8000318 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003872:	e003      	b.n	800387c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	0018      	movs	r0, r3
 8003878:	f7ff fac2 	bl	8002e00 <HAL_UART_RxHalfCpltCallback>
}
 800387c:	46c0      	nop			; (mov r8, r8)
 800387e:	46bd      	mov	sp, r7
 8003880:	b004      	add	sp, #16
 8003882:	bd80      	pop	{r7, pc}

08003884 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003896:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800389c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	2280      	movs	r2, #128	; 0x80
 80038a6:	4013      	ands	r3, r2
 80038a8:	2b80      	cmp	r3, #128	; 0x80
 80038aa:	d10a      	bne.n	80038c2 <UART_DMAError+0x3e>
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	2b21      	cmp	r3, #33	; 0x21
 80038b0:	d107      	bne.n	80038c2 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2252      	movs	r2, #82	; 0x52
 80038b6:	2100      	movs	r1, #0
 80038b8:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	0018      	movs	r0, r3
 80038be:	f7ff fe51 	bl	8003564 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	2240      	movs	r2, #64	; 0x40
 80038ca:	4013      	ands	r3, r2
 80038cc:	2b40      	cmp	r3, #64	; 0x40
 80038ce:	d10a      	bne.n	80038e6 <UART_DMAError+0x62>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2b22      	cmp	r3, #34	; 0x22
 80038d4:	d107      	bne.n	80038e6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	225a      	movs	r2, #90	; 0x5a
 80038da:	2100      	movs	r1, #0
 80038dc:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	0018      	movs	r0, r3
 80038e2:	f7ff fe63 	bl	80035ac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2280      	movs	r2, #128	; 0x80
 80038ea:	589b      	ldr	r3, [r3, r2]
 80038ec:	2210      	movs	r2, #16
 80038ee:	431a      	orrs	r2, r3
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	2180      	movs	r1, #128	; 0x80
 80038f4:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	0018      	movs	r0, r3
 80038fa:	f7ff fa89 	bl	8002e10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038fe:	46c0      	nop			; (mov r8, r8)
 8003900:	46bd      	mov	sp, r7
 8003902:	b006      	add	sp, #24
 8003904:	bd80      	pop	{r7, pc}

08003906 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b084      	sub	sp, #16
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	225a      	movs	r2, #90	; 0x5a
 8003918:	2100      	movs	r1, #0
 800391a:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2252      	movs	r2, #82	; 0x52
 8003920:	2100      	movs	r1, #0
 8003922:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	0018      	movs	r0, r3
 8003928:	f7ff fa72 	bl	8002e10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800392c:	46c0      	nop			; (mov r8, r8)
 800392e:	46bd      	mov	sp, r7
 8003930:	b004      	add	sp, #16
 8003932:	bd80      	pop	{r7, pc}

08003934 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800393c:	f3ef 8310 	mrs	r3, PRIMASK
 8003940:	60bb      	str	r3, [r7, #8]
  return(result);
 8003942:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003944:	617b      	str	r3, [r7, #20]
 8003946:	2301      	movs	r3, #1
 8003948:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f383 8810 	msr	PRIMASK, r3
}
 8003950:	46c0      	nop			; (mov r8, r8)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2140      	movs	r1, #64	; 0x40
 800395e:	438a      	bics	r2, r1
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	f383 8810 	msr	PRIMASK, r3
}
 800396c:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2220      	movs	r2, #32
 8003972:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	0018      	movs	r0, r3
 800397e:	f7ff fa27 	bl	8002dd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003982:	46c0      	nop			; (mov r8, r8)
 8003984:	46bd      	mov	sp, r7
 8003986:	b006      	add	sp, #24
 8003988:	bd80      	pop	{r7, pc}

0800398a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b082      	sub	sp, #8
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	46bd      	mov	sp, r7
 8003996:	b002      	add	sp, #8
 8003998:	bd80      	pop	{r7, pc}

0800399a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800399a:	b5b0      	push	{r4, r5, r7, lr}
 800399c:	b08a      	sub	sp, #40	; 0x28
 800399e:	af00      	add	r7, sp, #0
 80039a0:	60f8      	str	r0, [r7, #12]
 80039a2:	60b9      	str	r1, [r7, #8]
 80039a4:	1dbb      	adds	r3, r7, #6
 80039a6:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039ac:	2b20      	cmp	r3, #32
 80039ae:	d15e      	bne.n	8003a6e <HAL_UARTEx_ReceiveToIdle_DMA+0xd4>
  {
    if ((pData == NULL) || (Size == 0U))
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80039b6:	1dbb      	adds	r3, r7, #6
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e056      	b.n	8003a70 <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	689a      	ldr	r2, [r3, #8]
 80039c6:	2380      	movs	r3, #128	; 0x80
 80039c8:	015b      	lsls	r3, r3, #5
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d109      	bne.n	80039e2 <HAL_UARTEx_ReceiveToIdle_DMA+0x48>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d105      	bne.n	80039e2 <HAL_UARTEx_ReceiveToIdle_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2201      	movs	r2, #1
 80039da:	4013      	ands	r3, r2
 80039dc:	d001      	beq.n	80039e2 <HAL_UARTEx_ReceiveToIdle_DMA+0x48>
      {
        return  HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e046      	b.n	8003a70 <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
      }
    }

    __HAL_LOCK(huart);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2274      	movs	r2, #116	; 0x74
 80039e6:	5c9b      	ldrb	r3, [r3, r2]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d101      	bne.n	80039f0 <HAL_UARTEx_ReceiveToIdle_DMA+0x56>
 80039ec:	2302      	movs	r3, #2
 80039ee:	e03f      	b.n	8003a70 <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2274      	movs	r2, #116	; 0x74
 80039f4:	2101      	movs	r1, #1
 80039f6:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2201      	movs	r2, #1
 80039fc:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80039fe:	2527      	movs	r5, #39	; 0x27
 8003a00:	197c      	adds	r4, r7, r5
 8003a02:	1dbb      	adds	r3, r7, #6
 8003a04:	881a      	ldrh	r2, [r3, #0]
 8003a06:	68b9      	ldr	r1, [r7, #8]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	f7ff fd08 	bl	8003420 <UART_Start_Receive_DMA>
 8003a10:	0003      	movs	r3, r0
 8003a12:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003a14:	197b      	adds	r3, r7, r5
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d124      	bne.n	8003a66 <HAL_UARTEx_ReceiveToIdle_DMA+0xcc>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d11c      	bne.n	8003a5e <HAL_UARTEx_ReceiveToIdle_DMA+0xc4>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2210      	movs	r2, #16
 8003a2a:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a2c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a30:	617b      	str	r3, [r7, #20]
  return(result);
 8003a32:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a34:	623b      	str	r3, [r7, #32]
 8003a36:	2301      	movs	r3, #1
 8003a38:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	f383 8810 	msr	PRIMASK, r3
}
 8003a40:	46c0      	nop			; (mov r8, r8)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2110      	movs	r1, #16
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	f383 8810 	msr	PRIMASK, r3
}
 8003a5c:	e003      	b.n	8003a66 <HAL_UARTEx_ReceiveToIdle_DMA+0xcc>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003a5e:	2327      	movs	r3, #39	; 0x27
 8003a60:	18fb      	adds	r3, r7, r3
 8003a62:	2201      	movs	r2, #1
 8003a64:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8003a66:	2327      	movs	r3, #39	; 0x27
 8003a68:	18fb      	adds	r3, r7, r3
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	e000      	b.n	8003a70 <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
  }
  else
  {
    return HAL_BUSY;
 8003a6e:	2302      	movs	r3, #2
  }
}
 8003a70:	0018      	movs	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	b00a      	add	sp, #40	; 0x28
 8003a76:	bdb0      	pop	{r4, r5, r7, pc}

08003a78 <__libc_init_array>:
 8003a78:	b570      	push	{r4, r5, r6, lr}
 8003a7a:	2600      	movs	r6, #0
 8003a7c:	4d0c      	ldr	r5, [pc, #48]	; (8003ab0 <__libc_init_array+0x38>)
 8003a7e:	4c0d      	ldr	r4, [pc, #52]	; (8003ab4 <__libc_init_array+0x3c>)
 8003a80:	1b64      	subs	r4, r4, r5
 8003a82:	10a4      	asrs	r4, r4, #2
 8003a84:	42a6      	cmp	r6, r4
 8003a86:	d109      	bne.n	8003a9c <__libc_init_array+0x24>
 8003a88:	2600      	movs	r6, #0
 8003a8a:	f000 f821 	bl	8003ad0 <_init>
 8003a8e:	4d0a      	ldr	r5, [pc, #40]	; (8003ab8 <__libc_init_array+0x40>)
 8003a90:	4c0a      	ldr	r4, [pc, #40]	; (8003abc <__libc_init_array+0x44>)
 8003a92:	1b64      	subs	r4, r4, r5
 8003a94:	10a4      	asrs	r4, r4, #2
 8003a96:	42a6      	cmp	r6, r4
 8003a98:	d105      	bne.n	8003aa6 <__libc_init_array+0x2e>
 8003a9a:	bd70      	pop	{r4, r5, r6, pc}
 8003a9c:	00b3      	lsls	r3, r6, #2
 8003a9e:	58eb      	ldr	r3, [r5, r3]
 8003aa0:	4798      	blx	r3
 8003aa2:	3601      	adds	r6, #1
 8003aa4:	e7ee      	b.n	8003a84 <__libc_init_array+0xc>
 8003aa6:	00b3      	lsls	r3, r6, #2
 8003aa8:	58eb      	ldr	r3, [r5, r3]
 8003aaa:	4798      	blx	r3
 8003aac:	3601      	adds	r6, #1
 8003aae:	e7f2      	b.n	8003a96 <__libc_init_array+0x1e>
 8003ab0:	08003b20 	.word	0x08003b20
 8003ab4:	08003b20 	.word	0x08003b20
 8003ab8:	08003b20 	.word	0x08003b20
 8003abc:	08003b24 	.word	0x08003b24

08003ac0 <memset>:
 8003ac0:	0003      	movs	r3, r0
 8003ac2:	1882      	adds	r2, r0, r2
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d100      	bne.n	8003aca <memset+0xa>
 8003ac8:	4770      	bx	lr
 8003aca:	7019      	strb	r1, [r3, #0]
 8003acc:	3301      	adds	r3, #1
 8003ace:	e7f9      	b.n	8003ac4 <memset+0x4>

08003ad0 <_init>:
 8003ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad2:	46c0      	nop			; (mov r8, r8)
 8003ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ad6:	bc08      	pop	{r3}
 8003ad8:	469e      	mov	lr, r3
 8003ada:	4770      	bx	lr

08003adc <_fini>:
 8003adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ade:	46c0      	nop			; (mov r8, r8)
 8003ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ae2:	bc08      	pop	{r3}
 8003ae4:	469e      	mov	lr, r3
 8003ae6:	4770      	bx	lr
