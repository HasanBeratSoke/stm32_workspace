
calculator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abb0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005bc  0800ac70  0800ac70  0001ac70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b22c  0800b22c  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  0800b22c  0800b22c  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b22c  0800b22c  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b22c  0800b22c  0001b22c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b230  0800b230  0001b230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800b234  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000208  0800b438  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003b8  0800b438  000203b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d639  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021d0  00000000  00000000  0002d865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  0002fa38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a08  00000000  00000000  00030510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012b2d  00000000  00000000  00030f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e64d  00000000  00000000  00043a45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006b534  00000000  00000000  00052092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bd5c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bdc  00000000  00000000  000bd618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000208 	.word	0x20000208
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800ac58 	.word	0x0800ac58

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000020c 	.word	0x2000020c
 8000104:	0800ac58 	.word	0x0800ac58

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f8b5 	bl	80015ac <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f805 	bl	800145c <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f8a7 	bl	80015ac <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f89d 	bl	80015ac <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f82d 	bl	80014e0 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f823 	bl	80014e0 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 f90f 	bl	80006d4 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 f89b 	bl	80005fc <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 f901 	bl	80006d4 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 f8f7 	bl	80006d4 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 f8a7 	bl	8000648 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 f89d 	bl	8000648 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_d2uiz>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	2200      	movs	r2, #0
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <__aeabi_d2uiz+0x38>)
 8000522:	0004      	movs	r4, r0
 8000524:	000d      	movs	r5, r1
 8000526:	f7ff ffb5 	bl	8000494 <__aeabi_dcmpge>
 800052a:	2800      	cmp	r0, #0
 800052c:	d104      	bne.n	8000538 <__aeabi_d2uiz+0x1c>
 800052e:	0020      	movs	r0, r4
 8000530:	0029      	movs	r1, r5
 8000532:	f001 febb 	bl	80022ac <__aeabi_d2iz>
 8000536:	bd70      	pop	{r4, r5, r6, pc}
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <__aeabi_d2uiz+0x38>)
 800053a:	2200      	movs	r2, #0
 800053c:	0020      	movs	r0, r4
 800053e:	0029      	movs	r1, r5
 8000540:	f001 fb04 	bl	8001b4c <__aeabi_dsub>
 8000544:	f001 feb2 	bl	80022ac <__aeabi_d2iz>
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	061b      	lsls	r3, r3, #24
 800054c:	469c      	mov	ip, r3
 800054e:	4460      	add	r0, ip
 8000550:	e7f1      	b.n	8000536 <__aeabi_d2uiz+0x1a>
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	41e00000 	.word	0x41e00000

08000558 <__aeabi_d2lz>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	0005      	movs	r5, r0
 800055c:	000c      	movs	r4, r1
 800055e:	2200      	movs	r2, #0
 8000560:	2300      	movs	r3, #0
 8000562:	0028      	movs	r0, r5
 8000564:	0021      	movs	r1, r4
 8000566:	f7ff ff77 	bl	8000458 <__aeabi_dcmplt>
 800056a:	2800      	cmp	r0, #0
 800056c:	d108      	bne.n	8000580 <__aeabi_d2lz+0x28>
 800056e:	0028      	movs	r0, r5
 8000570:	0021      	movs	r1, r4
 8000572:	f000 f80f 	bl	8000594 <__aeabi_d2ulz>
 8000576:	0002      	movs	r2, r0
 8000578:	000b      	movs	r3, r1
 800057a:	0010      	movs	r0, r2
 800057c:	0019      	movs	r1, r3
 800057e:	bd70      	pop	{r4, r5, r6, pc}
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	061b      	lsls	r3, r3, #24
 8000584:	18e1      	adds	r1, r4, r3
 8000586:	0028      	movs	r0, r5
 8000588:	f000 f804 	bl	8000594 <__aeabi_d2ulz>
 800058c:	2300      	movs	r3, #0
 800058e:	4242      	negs	r2, r0
 8000590:	418b      	sbcs	r3, r1
 8000592:	e7f2      	b.n	800057a <__aeabi_d2lz+0x22>

08000594 <__aeabi_d2ulz>:
 8000594:	b570      	push	{r4, r5, r6, lr}
 8000596:	2200      	movs	r2, #0
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <__aeabi_d2ulz+0x34>)
 800059a:	000d      	movs	r5, r1
 800059c:	0004      	movs	r4, r0
 800059e:	f001 f869 	bl	8001674 <__aeabi_dmul>
 80005a2:	f7ff ffbb 	bl	800051c <__aeabi_d2uiz>
 80005a6:	0006      	movs	r6, r0
 80005a8:	f001 fee6 	bl	8002378 <__aeabi_ui2d>
 80005ac:	2200      	movs	r2, #0
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <__aeabi_d2ulz+0x38>)
 80005b0:	f001 f860 	bl	8001674 <__aeabi_dmul>
 80005b4:	0002      	movs	r2, r0
 80005b6:	000b      	movs	r3, r1
 80005b8:	0020      	movs	r0, r4
 80005ba:	0029      	movs	r1, r5
 80005bc:	f001 fac6 	bl	8001b4c <__aeabi_dsub>
 80005c0:	f7ff ffac 	bl	800051c <__aeabi_d2uiz>
 80005c4:	0031      	movs	r1, r6
 80005c6:	bd70      	pop	{r4, r5, r6, pc}
 80005c8:	3df00000 	.word	0x3df00000
 80005cc:	41f00000 	.word	0x41f00000

080005d0 <__aeabi_l2d>:
 80005d0:	b570      	push	{r4, r5, r6, lr}
 80005d2:	0006      	movs	r6, r0
 80005d4:	0008      	movs	r0, r1
 80005d6:	f001 fe9f 	bl	8002318 <__aeabi_i2d>
 80005da:	2200      	movs	r2, #0
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <__aeabi_l2d+0x28>)
 80005de:	f001 f849 	bl	8001674 <__aeabi_dmul>
 80005e2:	000d      	movs	r5, r1
 80005e4:	0004      	movs	r4, r0
 80005e6:	0030      	movs	r0, r6
 80005e8:	f001 fec6 	bl	8002378 <__aeabi_ui2d>
 80005ec:	002b      	movs	r3, r5
 80005ee:	0022      	movs	r2, r4
 80005f0:	f000 f902 	bl	80007f8 <__aeabi_dadd>
 80005f4:	bd70      	pop	{r4, r5, r6, pc}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	41f00000 	.word	0x41f00000

080005fc <__eqsf2>:
 80005fc:	b570      	push	{r4, r5, r6, lr}
 80005fe:	0042      	lsls	r2, r0, #1
 8000600:	0245      	lsls	r5, r0, #9
 8000602:	024e      	lsls	r6, r1, #9
 8000604:	004c      	lsls	r4, r1, #1
 8000606:	0fc3      	lsrs	r3, r0, #31
 8000608:	0a6d      	lsrs	r5, r5, #9
 800060a:	2001      	movs	r0, #1
 800060c:	0e12      	lsrs	r2, r2, #24
 800060e:	0a76      	lsrs	r6, r6, #9
 8000610:	0e24      	lsrs	r4, r4, #24
 8000612:	0fc9      	lsrs	r1, r1, #31
 8000614:	2aff      	cmp	r2, #255	; 0xff
 8000616:	d006      	beq.n	8000626 <__eqsf2+0x2a>
 8000618:	2cff      	cmp	r4, #255	; 0xff
 800061a:	d003      	beq.n	8000624 <__eqsf2+0x28>
 800061c:	42a2      	cmp	r2, r4
 800061e:	d101      	bne.n	8000624 <__eqsf2+0x28>
 8000620:	42b5      	cmp	r5, r6
 8000622:	d006      	beq.n	8000632 <__eqsf2+0x36>
 8000624:	bd70      	pop	{r4, r5, r6, pc}
 8000626:	2d00      	cmp	r5, #0
 8000628:	d1fc      	bne.n	8000624 <__eqsf2+0x28>
 800062a:	2cff      	cmp	r4, #255	; 0xff
 800062c:	d1fa      	bne.n	8000624 <__eqsf2+0x28>
 800062e:	2e00      	cmp	r6, #0
 8000630:	d1f8      	bne.n	8000624 <__eqsf2+0x28>
 8000632:	428b      	cmp	r3, r1
 8000634:	d006      	beq.n	8000644 <__eqsf2+0x48>
 8000636:	2001      	movs	r0, #1
 8000638:	2a00      	cmp	r2, #0
 800063a:	d1f3      	bne.n	8000624 <__eqsf2+0x28>
 800063c:	0028      	movs	r0, r5
 800063e:	1e43      	subs	r3, r0, #1
 8000640:	4198      	sbcs	r0, r3
 8000642:	e7ef      	b.n	8000624 <__eqsf2+0x28>
 8000644:	2000      	movs	r0, #0
 8000646:	e7ed      	b.n	8000624 <__eqsf2+0x28>

08000648 <__gesf2>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	0042      	lsls	r2, r0, #1
 800064c:	0245      	lsls	r5, r0, #9
 800064e:	024e      	lsls	r6, r1, #9
 8000650:	004c      	lsls	r4, r1, #1
 8000652:	0fc3      	lsrs	r3, r0, #31
 8000654:	0a6d      	lsrs	r5, r5, #9
 8000656:	0e12      	lsrs	r2, r2, #24
 8000658:	0a76      	lsrs	r6, r6, #9
 800065a:	0e24      	lsrs	r4, r4, #24
 800065c:	0fc8      	lsrs	r0, r1, #31
 800065e:	2aff      	cmp	r2, #255	; 0xff
 8000660:	d01b      	beq.n	800069a <__gesf2+0x52>
 8000662:	2cff      	cmp	r4, #255	; 0xff
 8000664:	d00e      	beq.n	8000684 <__gesf2+0x3c>
 8000666:	2a00      	cmp	r2, #0
 8000668:	d11b      	bne.n	80006a2 <__gesf2+0x5a>
 800066a:	2c00      	cmp	r4, #0
 800066c:	d101      	bne.n	8000672 <__gesf2+0x2a>
 800066e:	2e00      	cmp	r6, #0
 8000670:	d01c      	beq.n	80006ac <__gesf2+0x64>
 8000672:	2d00      	cmp	r5, #0
 8000674:	d00c      	beq.n	8000690 <__gesf2+0x48>
 8000676:	4283      	cmp	r3, r0
 8000678:	d01c      	beq.n	80006b4 <__gesf2+0x6c>
 800067a:	2102      	movs	r1, #2
 800067c:	1e58      	subs	r0, r3, #1
 800067e:	4008      	ands	r0, r1
 8000680:	3801      	subs	r0, #1
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	2e00      	cmp	r6, #0
 8000686:	d122      	bne.n	80006ce <__gesf2+0x86>
 8000688:	2a00      	cmp	r2, #0
 800068a:	d1f4      	bne.n	8000676 <__gesf2+0x2e>
 800068c:	2d00      	cmp	r5, #0
 800068e:	d1f2      	bne.n	8000676 <__gesf2+0x2e>
 8000690:	2800      	cmp	r0, #0
 8000692:	d1f6      	bne.n	8000682 <__gesf2+0x3a>
 8000694:	2001      	movs	r0, #1
 8000696:	4240      	negs	r0, r0
 8000698:	e7f3      	b.n	8000682 <__gesf2+0x3a>
 800069a:	2d00      	cmp	r5, #0
 800069c:	d117      	bne.n	80006ce <__gesf2+0x86>
 800069e:	2cff      	cmp	r4, #255	; 0xff
 80006a0:	d0f0      	beq.n	8000684 <__gesf2+0x3c>
 80006a2:	2c00      	cmp	r4, #0
 80006a4:	d1e7      	bne.n	8000676 <__gesf2+0x2e>
 80006a6:	2e00      	cmp	r6, #0
 80006a8:	d1e5      	bne.n	8000676 <__gesf2+0x2e>
 80006aa:	e7e6      	b.n	800067a <__gesf2+0x32>
 80006ac:	2000      	movs	r0, #0
 80006ae:	2d00      	cmp	r5, #0
 80006b0:	d0e7      	beq.n	8000682 <__gesf2+0x3a>
 80006b2:	e7e2      	b.n	800067a <__gesf2+0x32>
 80006b4:	42a2      	cmp	r2, r4
 80006b6:	dc05      	bgt.n	80006c4 <__gesf2+0x7c>
 80006b8:	dbea      	blt.n	8000690 <__gesf2+0x48>
 80006ba:	42b5      	cmp	r5, r6
 80006bc:	d802      	bhi.n	80006c4 <__gesf2+0x7c>
 80006be:	d3e7      	bcc.n	8000690 <__gesf2+0x48>
 80006c0:	2000      	movs	r0, #0
 80006c2:	e7de      	b.n	8000682 <__gesf2+0x3a>
 80006c4:	4243      	negs	r3, r0
 80006c6:	4158      	adcs	r0, r3
 80006c8:	0040      	lsls	r0, r0, #1
 80006ca:	3801      	subs	r0, #1
 80006cc:	e7d9      	b.n	8000682 <__gesf2+0x3a>
 80006ce:	2002      	movs	r0, #2
 80006d0:	4240      	negs	r0, r0
 80006d2:	e7d6      	b.n	8000682 <__gesf2+0x3a>

080006d4 <__lesf2>:
 80006d4:	b570      	push	{r4, r5, r6, lr}
 80006d6:	0042      	lsls	r2, r0, #1
 80006d8:	0245      	lsls	r5, r0, #9
 80006da:	024e      	lsls	r6, r1, #9
 80006dc:	004c      	lsls	r4, r1, #1
 80006de:	0fc3      	lsrs	r3, r0, #31
 80006e0:	0a6d      	lsrs	r5, r5, #9
 80006e2:	0e12      	lsrs	r2, r2, #24
 80006e4:	0a76      	lsrs	r6, r6, #9
 80006e6:	0e24      	lsrs	r4, r4, #24
 80006e8:	0fc8      	lsrs	r0, r1, #31
 80006ea:	2aff      	cmp	r2, #255	; 0xff
 80006ec:	d00b      	beq.n	8000706 <__lesf2+0x32>
 80006ee:	2cff      	cmp	r4, #255	; 0xff
 80006f0:	d00d      	beq.n	800070e <__lesf2+0x3a>
 80006f2:	2a00      	cmp	r2, #0
 80006f4:	d11f      	bne.n	8000736 <__lesf2+0x62>
 80006f6:	2c00      	cmp	r4, #0
 80006f8:	d116      	bne.n	8000728 <__lesf2+0x54>
 80006fa:	2e00      	cmp	r6, #0
 80006fc:	d114      	bne.n	8000728 <__lesf2+0x54>
 80006fe:	2000      	movs	r0, #0
 8000700:	2d00      	cmp	r5, #0
 8000702:	d010      	beq.n	8000726 <__lesf2+0x52>
 8000704:	e009      	b.n	800071a <__lesf2+0x46>
 8000706:	2d00      	cmp	r5, #0
 8000708:	d10c      	bne.n	8000724 <__lesf2+0x50>
 800070a:	2cff      	cmp	r4, #255	; 0xff
 800070c:	d113      	bne.n	8000736 <__lesf2+0x62>
 800070e:	2e00      	cmp	r6, #0
 8000710:	d108      	bne.n	8000724 <__lesf2+0x50>
 8000712:	2a00      	cmp	r2, #0
 8000714:	d008      	beq.n	8000728 <__lesf2+0x54>
 8000716:	4283      	cmp	r3, r0
 8000718:	d012      	beq.n	8000740 <__lesf2+0x6c>
 800071a:	2102      	movs	r1, #2
 800071c:	1e58      	subs	r0, r3, #1
 800071e:	4008      	ands	r0, r1
 8000720:	3801      	subs	r0, #1
 8000722:	e000      	b.n	8000726 <__lesf2+0x52>
 8000724:	2002      	movs	r0, #2
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	2d00      	cmp	r5, #0
 800072a:	d1f4      	bne.n	8000716 <__lesf2+0x42>
 800072c:	2800      	cmp	r0, #0
 800072e:	d1fa      	bne.n	8000726 <__lesf2+0x52>
 8000730:	2001      	movs	r0, #1
 8000732:	4240      	negs	r0, r0
 8000734:	e7f7      	b.n	8000726 <__lesf2+0x52>
 8000736:	2c00      	cmp	r4, #0
 8000738:	d1ed      	bne.n	8000716 <__lesf2+0x42>
 800073a:	2e00      	cmp	r6, #0
 800073c:	d1eb      	bne.n	8000716 <__lesf2+0x42>
 800073e:	e7ec      	b.n	800071a <__lesf2+0x46>
 8000740:	42a2      	cmp	r2, r4
 8000742:	dc05      	bgt.n	8000750 <__lesf2+0x7c>
 8000744:	dbf2      	blt.n	800072c <__lesf2+0x58>
 8000746:	42b5      	cmp	r5, r6
 8000748:	d802      	bhi.n	8000750 <__lesf2+0x7c>
 800074a:	d3ef      	bcc.n	800072c <__lesf2+0x58>
 800074c:	2000      	movs	r0, #0
 800074e:	e7ea      	b.n	8000726 <__lesf2+0x52>
 8000750:	4243      	negs	r3, r0
 8000752:	4158      	adcs	r0, r3
 8000754:	0040      	lsls	r0, r0, #1
 8000756:	3801      	subs	r0, #1
 8000758:	e7e5      	b.n	8000726 <__lesf2+0x52>
 800075a:	46c0      	nop			; (mov r8, r8)

0800075c <__aeabi_i2f>:
 800075c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800075e:	2800      	cmp	r0, #0
 8000760:	d013      	beq.n	800078a <__aeabi_i2f+0x2e>
 8000762:	17c3      	asrs	r3, r0, #31
 8000764:	18c6      	adds	r6, r0, r3
 8000766:	405e      	eors	r6, r3
 8000768:	0fc4      	lsrs	r4, r0, #31
 800076a:	0030      	movs	r0, r6
 800076c:	f001 fefa 	bl	8002564 <__clzsi2>
 8000770:	239e      	movs	r3, #158	; 0x9e
 8000772:	0005      	movs	r5, r0
 8000774:	1a1b      	subs	r3, r3, r0
 8000776:	2b96      	cmp	r3, #150	; 0x96
 8000778:	dc0f      	bgt.n	800079a <__aeabi_i2f+0x3e>
 800077a:	2808      	cmp	r0, #8
 800077c:	dd01      	ble.n	8000782 <__aeabi_i2f+0x26>
 800077e:	3d08      	subs	r5, #8
 8000780:	40ae      	lsls	r6, r5
 8000782:	0276      	lsls	r6, r6, #9
 8000784:	0a76      	lsrs	r6, r6, #9
 8000786:	b2d8      	uxtb	r0, r3
 8000788:	e002      	b.n	8000790 <__aeabi_i2f+0x34>
 800078a:	2400      	movs	r4, #0
 800078c:	2000      	movs	r0, #0
 800078e:	2600      	movs	r6, #0
 8000790:	05c0      	lsls	r0, r0, #23
 8000792:	4330      	orrs	r0, r6
 8000794:	07e4      	lsls	r4, r4, #31
 8000796:	4320      	orrs	r0, r4
 8000798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800079a:	2b99      	cmp	r3, #153	; 0x99
 800079c:	dd0c      	ble.n	80007b8 <__aeabi_i2f+0x5c>
 800079e:	2205      	movs	r2, #5
 80007a0:	0031      	movs	r1, r6
 80007a2:	1a12      	subs	r2, r2, r0
 80007a4:	40d1      	lsrs	r1, r2
 80007a6:	000a      	movs	r2, r1
 80007a8:	0001      	movs	r1, r0
 80007aa:	0030      	movs	r0, r6
 80007ac:	311b      	adds	r1, #27
 80007ae:	4088      	lsls	r0, r1
 80007b0:	1e41      	subs	r1, r0, #1
 80007b2:	4188      	sbcs	r0, r1
 80007b4:	4302      	orrs	r2, r0
 80007b6:	0016      	movs	r6, r2
 80007b8:	2d05      	cmp	r5, #5
 80007ba:	dc12      	bgt.n	80007e2 <__aeabi_i2f+0x86>
 80007bc:	0031      	movs	r1, r6
 80007be:	4f0d      	ldr	r7, [pc, #52]	; (80007f4 <__aeabi_i2f+0x98>)
 80007c0:	4039      	ands	r1, r7
 80007c2:	0772      	lsls	r2, r6, #29
 80007c4:	d009      	beq.n	80007da <__aeabi_i2f+0x7e>
 80007c6:	200f      	movs	r0, #15
 80007c8:	4030      	ands	r0, r6
 80007ca:	2804      	cmp	r0, #4
 80007cc:	d005      	beq.n	80007da <__aeabi_i2f+0x7e>
 80007ce:	3104      	adds	r1, #4
 80007d0:	014a      	lsls	r2, r1, #5
 80007d2:	d502      	bpl.n	80007da <__aeabi_i2f+0x7e>
 80007d4:	239f      	movs	r3, #159	; 0x9f
 80007d6:	4039      	ands	r1, r7
 80007d8:	1b5b      	subs	r3, r3, r5
 80007da:	0189      	lsls	r1, r1, #6
 80007dc:	0a4e      	lsrs	r6, r1, #9
 80007de:	b2d8      	uxtb	r0, r3
 80007e0:	e7d6      	b.n	8000790 <__aeabi_i2f+0x34>
 80007e2:	1f6a      	subs	r2, r5, #5
 80007e4:	4096      	lsls	r6, r2
 80007e6:	0031      	movs	r1, r6
 80007e8:	4f02      	ldr	r7, [pc, #8]	; (80007f4 <__aeabi_i2f+0x98>)
 80007ea:	4039      	ands	r1, r7
 80007ec:	0772      	lsls	r2, r6, #29
 80007ee:	d0f4      	beq.n	80007da <__aeabi_i2f+0x7e>
 80007f0:	e7e9      	b.n	80007c6 <__aeabi_i2f+0x6a>
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	fbffffff 	.word	0xfbffffff

080007f8 <__aeabi_dadd>:
 80007f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007fa:	464f      	mov	r7, r9
 80007fc:	4646      	mov	r6, r8
 80007fe:	46d6      	mov	lr, sl
 8000800:	000d      	movs	r5, r1
 8000802:	0004      	movs	r4, r0
 8000804:	b5c0      	push	{r6, r7, lr}
 8000806:	001f      	movs	r7, r3
 8000808:	0011      	movs	r1, r2
 800080a:	0328      	lsls	r0, r5, #12
 800080c:	0f62      	lsrs	r2, r4, #29
 800080e:	0a40      	lsrs	r0, r0, #9
 8000810:	4310      	orrs	r0, r2
 8000812:	007a      	lsls	r2, r7, #1
 8000814:	0d52      	lsrs	r2, r2, #21
 8000816:	00e3      	lsls	r3, r4, #3
 8000818:	033c      	lsls	r4, r7, #12
 800081a:	4691      	mov	r9, r2
 800081c:	0a64      	lsrs	r4, r4, #9
 800081e:	0ffa      	lsrs	r2, r7, #31
 8000820:	0f4f      	lsrs	r7, r1, #29
 8000822:	006e      	lsls	r6, r5, #1
 8000824:	4327      	orrs	r7, r4
 8000826:	4692      	mov	sl, r2
 8000828:	46b8      	mov	r8, r7
 800082a:	0d76      	lsrs	r6, r6, #21
 800082c:	0fed      	lsrs	r5, r5, #31
 800082e:	00c9      	lsls	r1, r1, #3
 8000830:	4295      	cmp	r5, r2
 8000832:	d100      	bne.n	8000836 <__aeabi_dadd+0x3e>
 8000834:	e099      	b.n	800096a <__aeabi_dadd+0x172>
 8000836:	464c      	mov	r4, r9
 8000838:	1b34      	subs	r4, r6, r4
 800083a:	46a4      	mov	ip, r4
 800083c:	2c00      	cmp	r4, #0
 800083e:	dc00      	bgt.n	8000842 <__aeabi_dadd+0x4a>
 8000840:	e07c      	b.n	800093c <__aeabi_dadd+0x144>
 8000842:	464a      	mov	r2, r9
 8000844:	2a00      	cmp	r2, #0
 8000846:	d100      	bne.n	800084a <__aeabi_dadd+0x52>
 8000848:	e0b8      	b.n	80009bc <__aeabi_dadd+0x1c4>
 800084a:	4ac5      	ldr	r2, [pc, #788]	; (8000b60 <__aeabi_dadd+0x368>)
 800084c:	4296      	cmp	r6, r2
 800084e:	d100      	bne.n	8000852 <__aeabi_dadd+0x5a>
 8000850:	e11c      	b.n	8000a8c <__aeabi_dadd+0x294>
 8000852:	2280      	movs	r2, #128	; 0x80
 8000854:	003c      	movs	r4, r7
 8000856:	0412      	lsls	r2, r2, #16
 8000858:	4314      	orrs	r4, r2
 800085a:	46a0      	mov	r8, r4
 800085c:	4662      	mov	r2, ip
 800085e:	2a38      	cmp	r2, #56	; 0x38
 8000860:	dd00      	ble.n	8000864 <__aeabi_dadd+0x6c>
 8000862:	e161      	b.n	8000b28 <__aeabi_dadd+0x330>
 8000864:	2a1f      	cmp	r2, #31
 8000866:	dd00      	ble.n	800086a <__aeabi_dadd+0x72>
 8000868:	e1cc      	b.n	8000c04 <__aeabi_dadd+0x40c>
 800086a:	4664      	mov	r4, ip
 800086c:	2220      	movs	r2, #32
 800086e:	1b12      	subs	r2, r2, r4
 8000870:	4644      	mov	r4, r8
 8000872:	4094      	lsls	r4, r2
 8000874:	000f      	movs	r7, r1
 8000876:	46a1      	mov	r9, r4
 8000878:	4664      	mov	r4, ip
 800087a:	4091      	lsls	r1, r2
 800087c:	40e7      	lsrs	r7, r4
 800087e:	464c      	mov	r4, r9
 8000880:	1e4a      	subs	r2, r1, #1
 8000882:	4191      	sbcs	r1, r2
 8000884:	433c      	orrs	r4, r7
 8000886:	4642      	mov	r2, r8
 8000888:	4321      	orrs	r1, r4
 800088a:	4664      	mov	r4, ip
 800088c:	40e2      	lsrs	r2, r4
 800088e:	1a80      	subs	r0, r0, r2
 8000890:	1a5c      	subs	r4, r3, r1
 8000892:	42a3      	cmp	r3, r4
 8000894:	419b      	sbcs	r3, r3
 8000896:	425f      	negs	r7, r3
 8000898:	1bc7      	subs	r7, r0, r7
 800089a:	023b      	lsls	r3, r7, #8
 800089c:	d400      	bmi.n	80008a0 <__aeabi_dadd+0xa8>
 800089e:	e0d0      	b.n	8000a42 <__aeabi_dadd+0x24a>
 80008a0:	027f      	lsls	r7, r7, #9
 80008a2:	0a7f      	lsrs	r7, r7, #9
 80008a4:	2f00      	cmp	r7, #0
 80008a6:	d100      	bne.n	80008aa <__aeabi_dadd+0xb2>
 80008a8:	e0ff      	b.n	8000aaa <__aeabi_dadd+0x2b2>
 80008aa:	0038      	movs	r0, r7
 80008ac:	f001 fe5a 	bl	8002564 <__clzsi2>
 80008b0:	0001      	movs	r1, r0
 80008b2:	3908      	subs	r1, #8
 80008b4:	2320      	movs	r3, #32
 80008b6:	0022      	movs	r2, r4
 80008b8:	1a5b      	subs	r3, r3, r1
 80008ba:	408f      	lsls	r7, r1
 80008bc:	40da      	lsrs	r2, r3
 80008be:	408c      	lsls	r4, r1
 80008c0:	4317      	orrs	r7, r2
 80008c2:	42b1      	cmp	r1, r6
 80008c4:	da00      	bge.n	80008c8 <__aeabi_dadd+0xd0>
 80008c6:	e0ff      	b.n	8000ac8 <__aeabi_dadd+0x2d0>
 80008c8:	1b89      	subs	r1, r1, r6
 80008ca:	1c4b      	adds	r3, r1, #1
 80008cc:	2b1f      	cmp	r3, #31
 80008ce:	dd00      	ble.n	80008d2 <__aeabi_dadd+0xda>
 80008d0:	e0a8      	b.n	8000a24 <__aeabi_dadd+0x22c>
 80008d2:	2220      	movs	r2, #32
 80008d4:	0039      	movs	r1, r7
 80008d6:	1ad2      	subs	r2, r2, r3
 80008d8:	0020      	movs	r0, r4
 80008da:	4094      	lsls	r4, r2
 80008dc:	4091      	lsls	r1, r2
 80008de:	40d8      	lsrs	r0, r3
 80008e0:	1e62      	subs	r2, r4, #1
 80008e2:	4194      	sbcs	r4, r2
 80008e4:	40df      	lsrs	r7, r3
 80008e6:	2600      	movs	r6, #0
 80008e8:	4301      	orrs	r1, r0
 80008ea:	430c      	orrs	r4, r1
 80008ec:	0763      	lsls	r3, r4, #29
 80008ee:	d009      	beq.n	8000904 <__aeabi_dadd+0x10c>
 80008f0:	230f      	movs	r3, #15
 80008f2:	4023      	ands	r3, r4
 80008f4:	2b04      	cmp	r3, #4
 80008f6:	d005      	beq.n	8000904 <__aeabi_dadd+0x10c>
 80008f8:	1d23      	adds	r3, r4, #4
 80008fa:	42a3      	cmp	r3, r4
 80008fc:	41a4      	sbcs	r4, r4
 80008fe:	4264      	negs	r4, r4
 8000900:	193f      	adds	r7, r7, r4
 8000902:	001c      	movs	r4, r3
 8000904:	023b      	lsls	r3, r7, #8
 8000906:	d400      	bmi.n	800090a <__aeabi_dadd+0x112>
 8000908:	e09e      	b.n	8000a48 <__aeabi_dadd+0x250>
 800090a:	4b95      	ldr	r3, [pc, #596]	; (8000b60 <__aeabi_dadd+0x368>)
 800090c:	3601      	adds	r6, #1
 800090e:	429e      	cmp	r6, r3
 8000910:	d100      	bne.n	8000914 <__aeabi_dadd+0x11c>
 8000912:	e0b7      	b.n	8000a84 <__aeabi_dadd+0x28c>
 8000914:	4a93      	ldr	r2, [pc, #588]	; (8000b64 <__aeabi_dadd+0x36c>)
 8000916:	08e4      	lsrs	r4, r4, #3
 8000918:	4017      	ands	r7, r2
 800091a:	077b      	lsls	r3, r7, #29
 800091c:	0571      	lsls	r1, r6, #21
 800091e:	027f      	lsls	r7, r7, #9
 8000920:	4323      	orrs	r3, r4
 8000922:	0b3f      	lsrs	r7, r7, #12
 8000924:	0d4a      	lsrs	r2, r1, #21
 8000926:	0512      	lsls	r2, r2, #20
 8000928:	433a      	orrs	r2, r7
 800092a:	07ed      	lsls	r5, r5, #31
 800092c:	432a      	orrs	r2, r5
 800092e:	0018      	movs	r0, r3
 8000930:	0011      	movs	r1, r2
 8000932:	bce0      	pop	{r5, r6, r7}
 8000934:	46ba      	mov	sl, r7
 8000936:	46b1      	mov	r9, r6
 8000938:	46a8      	mov	r8, r5
 800093a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800093c:	2c00      	cmp	r4, #0
 800093e:	d04b      	beq.n	80009d8 <__aeabi_dadd+0x1e0>
 8000940:	464c      	mov	r4, r9
 8000942:	1ba4      	subs	r4, r4, r6
 8000944:	46a4      	mov	ip, r4
 8000946:	2e00      	cmp	r6, #0
 8000948:	d000      	beq.n	800094c <__aeabi_dadd+0x154>
 800094a:	e123      	b.n	8000b94 <__aeabi_dadd+0x39c>
 800094c:	0004      	movs	r4, r0
 800094e:	431c      	orrs	r4, r3
 8000950:	d100      	bne.n	8000954 <__aeabi_dadd+0x15c>
 8000952:	e1af      	b.n	8000cb4 <__aeabi_dadd+0x4bc>
 8000954:	4662      	mov	r2, ip
 8000956:	1e54      	subs	r4, r2, #1
 8000958:	2a01      	cmp	r2, #1
 800095a:	d100      	bne.n	800095e <__aeabi_dadd+0x166>
 800095c:	e215      	b.n	8000d8a <__aeabi_dadd+0x592>
 800095e:	4d80      	ldr	r5, [pc, #512]	; (8000b60 <__aeabi_dadd+0x368>)
 8000960:	45ac      	cmp	ip, r5
 8000962:	d100      	bne.n	8000966 <__aeabi_dadd+0x16e>
 8000964:	e1c8      	b.n	8000cf8 <__aeabi_dadd+0x500>
 8000966:	46a4      	mov	ip, r4
 8000968:	e11b      	b.n	8000ba2 <__aeabi_dadd+0x3aa>
 800096a:	464a      	mov	r2, r9
 800096c:	1ab2      	subs	r2, r6, r2
 800096e:	4694      	mov	ip, r2
 8000970:	2a00      	cmp	r2, #0
 8000972:	dc00      	bgt.n	8000976 <__aeabi_dadd+0x17e>
 8000974:	e0ac      	b.n	8000ad0 <__aeabi_dadd+0x2d8>
 8000976:	464a      	mov	r2, r9
 8000978:	2a00      	cmp	r2, #0
 800097a:	d043      	beq.n	8000a04 <__aeabi_dadd+0x20c>
 800097c:	4a78      	ldr	r2, [pc, #480]	; (8000b60 <__aeabi_dadd+0x368>)
 800097e:	4296      	cmp	r6, r2
 8000980:	d100      	bne.n	8000984 <__aeabi_dadd+0x18c>
 8000982:	e1af      	b.n	8000ce4 <__aeabi_dadd+0x4ec>
 8000984:	2280      	movs	r2, #128	; 0x80
 8000986:	003c      	movs	r4, r7
 8000988:	0412      	lsls	r2, r2, #16
 800098a:	4314      	orrs	r4, r2
 800098c:	46a0      	mov	r8, r4
 800098e:	4662      	mov	r2, ip
 8000990:	2a38      	cmp	r2, #56	; 0x38
 8000992:	dc67      	bgt.n	8000a64 <__aeabi_dadd+0x26c>
 8000994:	2a1f      	cmp	r2, #31
 8000996:	dc00      	bgt.n	800099a <__aeabi_dadd+0x1a2>
 8000998:	e15f      	b.n	8000c5a <__aeabi_dadd+0x462>
 800099a:	4647      	mov	r7, r8
 800099c:	3a20      	subs	r2, #32
 800099e:	40d7      	lsrs	r7, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	2a20      	cmp	r2, #32
 80009a4:	d005      	beq.n	80009b2 <__aeabi_dadd+0x1ba>
 80009a6:	4664      	mov	r4, ip
 80009a8:	2240      	movs	r2, #64	; 0x40
 80009aa:	1b12      	subs	r2, r2, r4
 80009ac:	4644      	mov	r4, r8
 80009ae:	4094      	lsls	r4, r2
 80009b0:	4321      	orrs	r1, r4
 80009b2:	1e4a      	subs	r2, r1, #1
 80009b4:	4191      	sbcs	r1, r2
 80009b6:	000c      	movs	r4, r1
 80009b8:	433c      	orrs	r4, r7
 80009ba:	e057      	b.n	8000a6c <__aeabi_dadd+0x274>
 80009bc:	003a      	movs	r2, r7
 80009be:	430a      	orrs	r2, r1
 80009c0:	d100      	bne.n	80009c4 <__aeabi_dadd+0x1cc>
 80009c2:	e105      	b.n	8000bd0 <__aeabi_dadd+0x3d8>
 80009c4:	0022      	movs	r2, r4
 80009c6:	3a01      	subs	r2, #1
 80009c8:	2c01      	cmp	r4, #1
 80009ca:	d100      	bne.n	80009ce <__aeabi_dadd+0x1d6>
 80009cc:	e182      	b.n	8000cd4 <__aeabi_dadd+0x4dc>
 80009ce:	4c64      	ldr	r4, [pc, #400]	; (8000b60 <__aeabi_dadd+0x368>)
 80009d0:	45a4      	cmp	ip, r4
 80009d2:	d05b      	beq.n	8000a8c <__aeabi_dadd+0x294>
 80009d4:	4694      	mov	ip, r2
 80009d6:	e741      	b.n	800085c <__aeabi_dadd+0x64>
 80009d8:	4c63      	ldr	r4, [pc, #396]	; (8000b68 <__aeabi_dadd+0x370>)
 80009da:	1c77      	adds	r7, r6, #1
 80009dc:	4227      	tst	r7, r4
 80009de:	d000      	beq.n	80009e2 <__aeabi_dadd+0x1ea>
 80009e0:	e0c4      	b.n	8000b6c <__aeabi_dadd+0x374>
 80009e2:	0004      	movs	r4, r0
 80009e4:	431c      	orrs	r4, r3
 80009e6:	2e00      	cmp	r6, #0
 80009e8:	d000      	beq.n	80009ec <__aeabi_dadd+0x1f4>
 80009ea:	e169      	b.n	8000cc0 <__aeabi_dadd+0x4c8>
 80009ec:	2c00      	cmp	r4, #0
 80009ee:	d100      	bne.n	80009f2 <__aeabi_dadd+0x1fa>
 80009f0:	e1bf      	b.n	8000d72 <__aeabi_dadd+0x57a>
 80009f2:	4644      	mov	r4, r8
 80009f4:	430c      	orrs	r4, r1
 80009f6:	d000      	beq.n	80009fa <__aeabi_dadd+0x202>
 80009f8:	e1d0      	b.n	8000d9c <__aeabi_dadd+0x5a4>
 80009fa:	0742      	lsls	r2, r0, #29
 80009fc:	08db      	lsrs	r3, r3, #3
 80009fe:	4313      	orrs	r3, r2
 8000a00:	08c0      	lsrs	r0, r0, #3
 8000a02:	e029      	b.n	8000a58 <__aeabi_dadd+0x260>
 8000a04:	003a      	movs	r2, r7
 8000a06:	430a      	orrs	r2, r1
 8000a08:	d100      	bne.n	8000a0c <__aeabi_dadd+0x214>
 8000a0a:	e170      	b.n	8000cee <__aeabi_dadd+0x4f6>
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	4664      	mov	r4, ip
 8000a10:	3a01      	subs	r2, #1
 8000a12:	2c01      	cmp	r4, #1
 8000a14:	d100      	bne.n	8000a18 <__aeabi_dadd+0x220>
 8000a16:	e0e0      	b.n	8000bda <__aeabi_dadd+0x3e2>
 8000a18:	4c51      	ldr	r4, [pc, #324]	; (8000b60 <__aeabi_dadd+0x368>)
 8000a1a:	45a4      	cmp	ip, r4
 8000a1c:	d100      	bne.n	8000a20 <__aeabi_dadd+0x228>
 8000a1e:	e161      	b.n	8000ce4 <__aeabi_dadd+0x4ec>
 8000a20:	4694      	mov	ip, r2
 8000a22:	e7b4      	b.n	800098e <__aeabi_dadd+0x196>
 8000a24:	003a      	movs	r2, r7
 8000a26:	391f      	subs	r1, #31
 8000a28:	40ca      	lsrs	r2, r1
 8000a2a:	0011      	movs	r1, r2
 8000a2c:	2b20      	cmp	r3, #32
 8000a2e:	d003      	beq.n	8000a38 <__aeabi_dadd+0x240>
 8000a30:	2240      	movs	r2, #64	; 0x40
 8000a32:	1ad3      	subs	r3, r2, r3
 8000a34:	409f      	lsls	r7, r3
 8000a36:	433c      	orrs	r4, r7
 8000a38:	1e63      	subs	r3, r4, #1
 8000a3a:	419c      	sbcs	r4, r3
 8000a3c:	2700      	movs	r7, #0
 8000a3e:	2600      	movs	r6, #0
 8000a40:	430c      	orrs	r4, r1
 8000a42:	0763      	lsls	r3, r4, #29
 8000a44:	d000      	beq.n	8000a48 <__aeabi_dadd+0x250>
 8000a46:	e753      	b.n	80008f0 <__aeabi_dadd+0xf8>
 8000a48:	46b4      	mov	ip, r6
 8000a4a:	08e4      	lsrs	r4, r4, #3
 8000a4c:	077b      	lsls	r3, r7, #29
 8000a4e:	4323      	orrs	r3, r4
 8000a50:	08f8      	lsrs	r0, r7, #3
 8000a52:	4a43      	ldr	r2, [pc, #268]	; (8000b60 <__aeabi_dadd+0x368>)
 8000a54:	4594      	cmp	ip, r2
 8000a56:	d01d      	beq.n	8000a94 <__aeabi_dadd+0x29c>
 8000a58:	4662      	mov	r2, ip
 8000a5a:	0307      	lsls	r7, r0, #12
 8000a5c:	0552      	lsls	r2, r2, #21
 8000a5e:	0b3f      	lsrs	r7, r7, #12
 8000a60:	0d52      	lsrs	r2, r2, #21
 8000a62:	e760      	b.n	8000926 <__aeabi_dadd+0x12e>
 8000a64:	4644      	mov	r4, r8
 8000a66:	430c      	orrs	r4, r1
 8000a68:	1e62      	subs	r2, r4, #1
 8000a6a:	4194      	sbcs	r4, r2
 8000a6c:	18e4      	adds	r4, r4, r3
 8000a6e:	429c      	cmp	r4, r3
 8000a70:	419b      	sbcs	r3, r3
 8000a72:	425f      	negs	r7, r3
 8000a74:	183f      	adds	r7, r7, r0
 8000a76:	023b      	lsls	r3, r7, #8
 8000a78:	d5e3      	bpl.n	8000a42 <__aeabi_dadd+0x24a>
 8000a7a:	4b39      	ldr	r3, [pc, #228]	; (8000b60 <__aeabi_dadd+0x368>)
 8000a7c:	3601      	adds	r6, #1
 8000a7e:	429e      	cmp	r6, r3
 8000a80:	d000      	beq.n	8000a84 <__aeabi_dadd+0x28c>
 8000a82:	e0b5      	b.n	8000bf0 <__aeabi_dadd+0x3f8>
 8000a84:	0032      	movs	r2, r6
 8000a86:	2700      	movs	r7, #0
 8000a88:	2300      	movs	r3, #0
 8000a8a:	e74c      	b.n	8000926 <__aeabi_dadd+0x12e>
 8000a8c:	0742      	lsls	r2, r0, #29
 8000a8e:	08db      	lsrs	r3, r3, #3
 8000a90:	4313      	orrs	r3, r2
 8000a92:	08c0      	lsrs	r0, r0, #3
 8000a94:	001a      	movs	r2, r3
 8000a96:	4302      	orrs	r2, r0
 8000a98:	d100      	bne.n	8000a9c <__aeabi_dadd+0x2a4>
 8000a9a:	e1e1      	b.n	8000e60 <__aeabi_dadd+0x668>
 8000a9c:	2780      	movs	r7, #128	; 0x80
 8000a9e:	033f      	lsls	r7, r7, #12
 8000aa0:	4307      	orrs	r7, r0
 8000aa2:	033f      	lsls	r7, r7, #12
 8000aa4:	4a2e      	ldr	r2, [pc, #184]	; (8000b60 <__aeabi_dadd+0x368>)
 8000aa6:	0b3f      	lsrs	r7, r7, #12
 8000aa8:	e73d      	b.n	8000926 <__aeabi_dadd+0x12e>
 8000aaa:	0020      	movs	r0, r4
 8000aac:	f001 fd5a 	bl	8002564 <__clzsi2>
 8000ab0:	0001      	movs	r1, r0
 8000ab2:	3118      	adds	r1, #24
 8000ab4:	291f      	cmp	r1, #31
 8000ab6:	dc00      	bgt.n	8000aba <__aeabi_dadd+0x2c2>
 8000ab8:	e6fc      	b.n	80008b4 <__aeabi_dadd+0xbc>
 8000aba:	3808      	subs	r0, #8
 8000abc:	4084      	lsls	r4, r0
 8000abe:	0027      	movs	r7, r4
 8000ac0:	2400      	movs	r4, #0
 8000ac2:	42b1      	cmp	r1, r6
 8000ac4:	db00      	blt.n	8000ac8 <__aeabi_dadd+0x2d0>
 8000ac6:	e6ff      	b.n	80008c8 <__aeabi_dadd+0xd0>
 8000ac8:	4a26      	ldr	r2, [pc, #152]	; (8000b64 <__aeabi_dadd+0x36c>)
 8000aca:	1a76      	subs	r6, r6, r1
 8000acc:	4017      	ands	r7, r2
 8000ace:	e70d      	b.n	80008ec <__aeabi_dadd+0xf4>
 8000ad0:	2a00      	cmp	r2, #0
 8000ad2:	d02f      	beq.n	8000b34 <__aeabi_dadd+0x33c>
 8000ad4:	464a      	mov	r2, r9
 8000ad6:	1b92      	subs	r2, r2, r6
 8000ad8:	4694      	mov	ip, r2
 8000ada:	2e00      	cmp	r6, #0
 8000adc:	d100      	bne.n	8000ae0 <__aeabi_dadd+0x2e8>
 8000ade:	e0ad      	b.n	8000c3c <__aeabi_dadd+0x444>
 8000ae0:	4a1f      	ldr	r2, [pc, #124]	; (8000b60 <__aeabi_dadd+0x368>)
 8000ae2:	4591      	cmp	r9, r2
 8000ae4:	d100      	bne.n	8000ae8 <__aeabi_dadd+0x2f0>
 8000ae6:	e10f      	b.n	8000d08 <__aeabi_dadd+0x510>
 8000ae8:	2280      	movs	r2, #128	; 0x80
 8000aea:	0412      	lsls	r2, r2, #16
 8000aec:	4310      	orrs	r0, r2
 8000aee:	4662      	mov	r2, ip
 8000af0:	2a38      	cmp	r2, #56	; 0x38
 8000af2:	dd00      	ble.n	8000af6 <__aeabi_dadd+0x2fe>
 8000af4:	e10f      	b.n	8000d16 <__aeabi_dadd+0x51e>
 8000af6:	2a1f      	cmp	r2, #31
 8000af8:	dd00      	ble.n	8000afc <__aeabi_dadd+0x304>
 8000afa:	e180      	b.n	8000dfe <__aeabi_dadd+0x606>
 8000afc:	4664      	mov	r4, ip
 8000afe:	2220      	movs	r2, #32
 8000b00:	001e      	movs	r6, r3
 8000b02:	1b12      	subs	r2, r2, r4
 8000b04:	4667      	mov	r7, ip
 8000b06:	0004      	movs	r4, r0
 8000b08:	4093      	lsls	r3, r2
 8000b0a:	4094      	lsls	r4, r2
 8000b0c:	40fe      	lsrs	r6, r7
 8000b0e:	1e5a      	subs	r2, r3, #1
 8000b10:	4193      	sbcs	r3, r2
 8000b12:	40f8      	lsrs	r0, r7
 8000b14:	4334      	orrs	r4, r6
 8000b16:	431c      	orrs	r4, r3
 8000b18:	4480      	add	r8, r0
 8000b1a:	1864      	adds	r4, r4, r1
 8000b1c:	428c      	cmp	r4, r1
 8000b1e:	41bf      	sbcs	r7, r7
 8000b20:	427f      	negs	r7, r7
 8000b22:	464e      	mov	r6, r9
 8000b24:	4447      	add	r7, r8
 8000b26:	e7a6      	b.n	8000a76 <__aeabi_dadd+0x27e>
 8000b28:	4642      	mov	r2, r8
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	0011      	movs	r1, r2
 8000b2e:	1e4a      	subs	r2, r1, #1
 8000b30:	4191      	sbcs	r1, r2
 8000b32:	e6ad      	b.n	8000890 <__aeabi_dadd+0x98>
 8000b34:	4c0c      	ldr	r4, [pc, #48]	; (8000b68 <__aeabi_dadd+0x370>)
 8000b36:	1c72      	adds	r2, r6, #1
 8000b38:	4222      	tst	r2, r4
 8000b3a:	d000      	beq.n	8000b3e <__aeabi_dadd+0x346>
 8000b3c:	e0a1      	b.n	8000c82 <__aeabi_dadd+0x48a>
 8000b3e:	0002      	movs	r2, r0
 8000b40:	431a      	orrs	r2, r3
 8000b42:	2e00      	cmp	r6, #0
 8000b44:	d000      	beq.n	8000b48 <__aeabi_dadd+0x350>
 8000b46:	e0fa      	b.n	8000d3e <__aeabi_dadd+0x546>
 8000b48:	2a00      	cmp	r2, #0
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_dadd+0x356>
 8000b4c:	e145      	b.n	8000dda <__aeabi_dadd+0x5e2>
 8000b4e:	003a      	movs	r2, r7
 8000b50:	430a      	orrs	r2, r1
 8000b52:	d000      	beq.n	8000b56 <__aeabi_dadd+0x35e>
 8000b54:	e146      	b.n	8000de4 <__aeabi_dadd+0x5ec>
 8000b56:	0742      	lsls	r2, r0, #29
 8000b58:	08db      	lsrs	r3, r3, #3
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	08c0      	lsrs	r0, r0, #3
 8000b5e:	e77b      	b.n	8000a58 <__aeabi_dadd+0x260>
 8000b60:	000007ff 	.word	0x000007ff
 8000b64:	ff7fffff 	.word	0xff7fffff
 8000b68:	000007fe 	.word	0x000007fe
 8000b6c:	4647      	mov	r7, r8
 8000b6e:	1a5c      	subs	r4, r3, r1
 8000b70:	1bc2      	subs	r2, r0, r7
 8000b72:	42a3      	cmp	r3, r4
 8000b74:	41bf      	sbcs	r7, r7
 8000b76:	427f      	negs	r7, r7
 8000b78:	46b9      	mov	r9, r7
 8000b7a:	0017      	movs	r7, r2
 8000b7c:	464a      	mov	r2, r9
 8000b7e:	1abf      	subs	r7, r7, r2
 8000b80:	023a      	lsls	r2, r7, #8
 8000b82:	d500      	bpl.n	8000b86 <__aeabi_dadd+0x38e>
 8000b84:	e08d      	b.n	8000ca2 <__aeabi_dadd+0x4aa>
 8000b86:	0023      	movs	r3, r4
 8000b88:	433b      	orrs	r3, r7
 8000b8a:	d000      	beq.n	8000b8e <__aeabi_dadd+0x396>
 8000b8c:	e68a      	b.n	80008a4 <__aeabi_dadd+0xac>
 8000b8e:	2000      	movs	r0, #0
 8000b90:	2500      	movs	r5, #0
 8000b92:	e761      	b.n	8000a58 <__aeabi_dadd+0x260>
 8000b94:	4cb4      	ldr	r4, [pc, #720]	; (8000e68 <__aeabi_dadd+0x670>)
 8000b96:	45a1      	cmp	r9, r4
 8000b98:	d100      	bne.n	8000b9c <__aeabi_dadd+0x3a4>
 8000b9a:	e0ad      	b.n	8000cf8 <__aeabi_dadd+0x500>
 8000b9c:	2480      	movs	r4, #128	; 0x80
 8000b9e:	0424      	lsls	r4, r4, #16
 8000ba0:	4320      	orrs	r0, r4
 8000ba2:	4664      	mov	r4, ip
 8000ba4:	2c38      	cmp	r4, #56	; 0x38
 8000ba6:	dc3d      	bgt.n	8000c24 <__aeabi_dadd+0x42c>
 8000ba8:	4662      	mov	r2, ip
 8000baa:	2c1f      	cmp	r4, #31
 8000bac:	dd00      	ble.n	8000bb0 <__aeabi_dadd+0x3b8>
 8000bae:	e0b7      	b.n	8000d20 <__aeabi_dadd+0x528>
 8000bb0:	2520      	movs	r5, #32
 8000bb2:	001e      	movs	r6, r3
 8000bb4:	1b2d      	subs	r5, r5, r4
 8000bb6:	0004      	movs	r4, r0
 8000bb8:	40ab      	lsls	r3, r5
 8000bba:	40ac      	lsls	r4, r5
 8000bbc:	40d6      	lsrs	r6, r2
 8000bbe:	40d0      	lsrs	r0, r2
 8000bc0:	4642      	mov	r2, r8
 8000bc2:	1e5d      	subs	r5, r3, #1
 8000bc4:	41ab      	sbcs	r3, r5
 8000bc6:	4334      	orrs	r4, r6
 8000bc8:	1a12      	subs	r2, r2, r0
 8000bca:	4690      	mov	r8, r2
 8000bcc:	4323      	orrs	r3, r4
 8000bce:	e02c      	b.n	8000c2a <__aeabi_dadd+0x432>
 8000bd0:	0742      	lsls	r2, r0, #29
 8000bd2:	08db      	lsrs	r3, r3, #3
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	08c0      	lsrs	r0, r0, #3
 8000bd8:	e73b      	b.n	8000a52 <__aeabi_dadd+0x25a>
 8000bda:	185c      	adds	r4, r3, r1
 8000bdc:	429c      	cmp	r4, r3
 8000bde:	419b      	sbcs	r3, r3
 8000be0:	4440      	add	r0, r8
 8000be2:	425b      	negs	r3, r3
 8000be4:	18c7      	adds	r7, r0, r3
 8000be6:	2601      	movs	r6, #1
 8000be8:	023b      	lsls	r3, r7, #8
 8000bea:	d400      	bmi.n	8000bee <__aeabi_dadd+0x3f6>
 8000bec:	e729      	b.n	8000a42 <__aeabi_dadd+0x24a>
 8000bee:	2602      	movs	r6, #2
 8000bf0:	4a9e      	ldr	r2, [pc, #632]	; (8000e6c <__aeabi_dadd+0x674>)
 8000bf2:	0863      	lsrs	r3, r4, #1
 8000bf4:	4017      	ands	r7, r2
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	4014      	ands	r4, r2
 8000bfa:	431c      	orrs	r4, r3
 8000bfc:	07fb      	lsls	r3, r7, #31
 8000bfe:	431c      	orrs	r4, r3
 8000c00:	087f      	lsrs	r7, r7, #1
 8000c02:	e673      	b.n	80008ec <__aeabi_dadd+0xf4>
 8000c04:	4644      	mov	r4, r8
 8000c06:	3a20      	subs	r2, #32
 8000c08:	40d4      	lsrs	r4, r2
 8000c0a:	4662      	mov	r2, ip
 8000c0c:	2a20      	cmp	r2, #32
 8000c0e:	d005      	beq.n	8000c1c <__aeabi_dadd+0x424>
 8000c10:	4667      	mov	r7, ip
 8000c12:	2240      	movs	r2, #64	; 0x40
 8000c14:	1bd2      	subs	r2, r2, r7
 8000c16:	4647      	mov	r7, r8
 8000c18:	4097      	lsls	r7, r2
 8000c1a:	4339      	orrs	r1, r7
 8000c1c:	1e4a      	subs	r2, r1, #1
 8000c1e:	4191      	sbcs	r1, r2
 8000c20:	4321      	orrs	r1, r4
 8000c22:	e635      	b.n	8000890 <__aeabi_dadd+0x98>
 8000c24:	4303      	orrs	r3, r0
 8000c26:	1e58      	subs	r0, r3, #1
 8000c28:	4183      	sbcs	r3, r0
 8000c2a:	1acc      	subs	r4, r1, r3
 8000c2c:	42a1      	cmp	r1, r4
 8000c2e:	41bf      	sbcs	r7, r7
 8000c30:	4643      	mov	r3, r8
 8000c32:	427f      	negs	r7, r7
 8000c34:	4655      	mov	r5, sl
 8000c36:	464e      	mov	r6, r9
 8000c38:	1bdf      	subs	r7, r3, r7
 8000c3a:	e62e      	b.n	800089a <__aeabi_dadd+0xa2>
 8000c3c:	0002      	movs	r2, r0
 8000c3e:	431a      	orrs	r2, r3
 8000c40:	d100      	bne.n	8000c44 <__aeabi_dadd+0x44c>
 8000c42:	e0bd      	b.n	8000dc0 <__aeabi_dadd+0x5c8>
 8000c44:	4662      	mov	r2, ip
 8000c46:	4664      	mov	r4, ip
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	2c01      	cmp	r4, #1
 8000c4c:	d100      	bne.n	8000c50 <__aeabi_dadd+0x458>
 8000c4e:	e0e5      	b.n	8000e1c <__aeabi_dadd+0x624>
 8000c50:	4c85      	ldr	r4, [pc, #532]	; (8000e68 <__aeabi_dadd+0x670>)
 8000c52:	45a4      	cmp	ip, r4
 8000c54:	d058      	beq.n	8000d08 <__aeabi_dadd+0x510>
 8000c56:	4694      	mov	ip, r2
 8000c58:	e749      	b.n	8000aee <__aeabi_dadd+0x2f6>
 8000c5a:	4664      	mov	r4, ip
 8000c5c:	2220      	movs	r2, #32
 8000c5e:	1b12      	subs	r2, r2, r4
 8000c60:	4644      	mov	r4, r8
 8000c62:	4094      	lsls	r4, r2
 8000c64:	000f      	movs	r7, r1
 8000c66:	46a1      	mov	r9, r4
 8000c68:	4664      	mov	r4, ip
 8000c6a:	4091      	lsls	r1, r2
 8000c6c:	40e7      	lsrs	r7, r4
 8000c6e:	464c      	mov	r4, r9
 8000c70:	1e4a      	subs	r2, r1, #1
 8000c72:	4191      	sbcs	r1, r2
 8000c74:	433c      	orrs	r4, r7
 8000c76:	4642      	mov	r2, r8
 8000c78:	430c      	orrs	r4, r1
 8000c7a:	4661      	mov	r1, ip
 8000c7c:	40ca      	lsrs	r2, r1
 8000c7e:	1880      	adds	r0, r0, r2
 8000c80:	e6f4      	b.n	8000a6c <__aeabi_dadd+0x274>
 8000c82:	4c79      	ldr	r4, [pc, #484]	; (8000e68 <__aeabi_dadd+0x670>)
 8000c84:	42a2      	cmp	r2, r4
 8000c86:	d100      	bne.n	8000c8a <__aeabi_dadd+0x492>
 8000c88:	e6fd      	b.n	8000a86 <__aeabi_dadd+0x28e>
 8000c8a:	1859      	adds	r1, r3, r1
 8000c8c:	4299      	cmp	r1, r3
 8000c8e:	419b      	sbcs	r3, r3
 8000c90:	4440      	add	r0, r8
 8000c92:	425f      	negs	r7, r3
 8000c94:	19c7      	adds	r7, r0, r7
 8000c96:	07fc      	lsls	r4, r7, #31
 8000c98:	0849      	lsrs	r1, r1, #1
 8000c9a:	0016      	movs	r6, r2
 8000c9c:	430c      	orrs	r4, r1
 8000c9e:	087f      	lsrs	r7, r7, #1
 8000ca0:	e6cf      	b.n	8000a42 <__aeabi_dadd+0x24a>
 8000ca2:	1acc      	subs	r4, r1, r3
 8000ca4:	42a1      	cmp	r1, r4
 8000ca6:	41bf      	sbcs	r7, r7
 8000ca8:	4643      	mov	r3, r8
 8000caa:	427f      	negs	r7, r7
 8000cac:	1a18      	subs	r0, r3, r0
 8000cae:	4655      	mov	r5, sl
 8000cb0:	1bc7      	subs	r7, r0, r7
 8000cb2:	e5f7      	b.n	80008a4 <__aeabi_dadd+0xac>
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	077b      	lsls	r3, r7, #29
 8000cb8:	4655      	mov	r5, sl
 8000cba:	430b      	orrs	r3, r1
 8000cbc:	08f8      	lsrs	r0, r7, #3
 8000cbe:	e6c8      	b.n	8000a52 <__aeabi_dadd+0x25a>
 8000cc0:	2c00      	cmp	r4, #0
 8000cc2:	d000      	beq.n	8000cc6 <__aeabi_dadd+0x4ce>
 8000cc4:	e081      	b.n	8000dca <__aeabi_dadd+0x5d2>
 8000cc6:	4643      	mov	r3, r8
 8000cc8:	430b      	orrs	r3, r1
 8000cca:	d115      	bne.n	8000cf8 <__aeabi_dadd+0x500>
 8000ccc:	2080      	movs	r0, #128	; 0x80
 8000cce:	2500      	movs	r5, #0
 8000cd0:	0300      	lsls	r0, r0, #12
 8000cd2:	e6e3      	b.n	8000a9c <__aeabi_dadd+0x2a4>
 8000cd4:	1a5c      	subs	r4, r3, r1
 8000cd6:	42a3      	cmp	r3, r4
 8000cd8:	419b      	sbcs	r3, r3
 8000cda:	1bc7      	subs	r7, r0, r7
 8000cdc:	425b      	negs	r3, r3
 8000cde:	2601      	movs	r6, #1
 8000ce0:	1aff      	subs	r7, r7, r3
 8000ce2:	e5da      	b.n	800089a <__aeabi_dadd+0xa2>
 8000ce4:	0742      	lsls	r2, r0, #29
 8000ce6:	08db      	lsrs	r3, r3, #3
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	08c0      	lsrs	r0, r0, #3
 8000cec:	e6d2      	b.n	8000a94 <__aeabi_dadd+0x29c>
 8000cee:	0742      	lsls	r2, r0, #29
 8000cf0:	08db      	lsrs	r3, r3, #3
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	08c0      	lsrs	r0, r0, #3
 8000cf6:	e6ac      	b.n	8000a52 <__aeabi_dadd+0x25a>
 8000cf8:	4643      	mov	r3, r8
 8000cfa:	4642      	mov	r2, r8
 8000cfc:	08c9      	lsrs	r1, r1, #3
 8000cfe:	075b      	lsls	r3, r3, #29
 8000d00:	4655      	mov	r5, sl
 8000d02:	430b      	orrs	r3, r1
 8000d04:	08d0      	lsrs	r0, r2, #3
 8000d06:	e6c5      	b.n	8000a94 <__aeabi_dadd+0x29c>
 8000d08:	4643      	mov	r3, r8
 8000d0a:	4642      	mov	r2, r8
 8000d0c:	075b      	lsls	r3, r3, #29
 8000d0e:	08c9      	lsrs	r1, r1, #3
 8000d10:	430b      	orrs	r3, r1
 8000d12:	08d0      	lsrs	r0, r2, #3
 8000d14:	e6be      	b.n	8000a94 <__aeabi_dadd+0x29c>
 8000d16:	4303      	orrs	r3, r0
 8000d18:	001c      	movs	r4, r3
 8000d1a:	1e63      	subs	r3, r4, #1
 8000d1c:	419c      	sbcs	r4, r3
 8000d1e:	e6fc      	b.n	8000b1a <__aeabi_dadd+0x322>
 8000d20:	0002      	movs	r2, r0
 8000d22:	3c20      	subs	r4, #32
 8000d24:	40e2      	lsrs	r2, r4
 8000d26:	0014      	movs	r4, r2
 8000d28:	4662      	mov	r2, ip
 8000d2a:	2a20      	cmp	r2, #32
 8000d2c:	d003      	beq.n	8000d36 <__aeabi_dadd+0x53e>
 8000d2e:	2540      	movs	r5, #64	; 0x40
 8000d30:	1aad      	subs	r5, r5, r2
 8000d32:	40a8      	lsls	r0, r5
 8000d34:	4303      	orrs	r3, r0
 8000d36:	1e58      	subs	r0, r3, #1
 8000d38:	4183      	sbcs	r3, r0
 8000d3a:	4323      	orrs	r3, r4
 8000d3c:	e775      	b.n	8000c2a <__aeabi_dadd+0x432>
 8000d3e:	2a00      	cmp	r2, #0
 8000d40:	d0e2      	beq.n	8000d08 <__aeabi_dadd+0x510>
 8000d42:	003a      	movs	r2, r7
 8000d44:	430a      	orrs	r2, r1
 8000d46:	d0cd      	beq.n	8000ce4 <__aeabi_dadd+0x4ec>
 8000d48:	0742      	lsls	r2, r0, #29
 8000d4a:	08db      	lsrs	r3, r3, #3
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	2280      	movs	r2, #128	; 0x80
 8000d50:	08c0      	lsrs	r0, r0, #3
 8000d52:	0312      	lsls	r2, r2, #12
 8000d54:	4210      	tst	r0, r2
 8000d56:	d006      	beq.n	8000d66 <__aeabi_dadd+0x56e>
 8000d58:	08fc      	lsrs	r4, r7, #3
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d103      	bne.n	8000d66 <__aeabi_dadd+0x56e>
 8000d5e:	0020      	movs	r0, r4
 8000d60:	08cb      	lsrs	r3, r1, #3
 8000d62:	077a      	lsls	r2, r7, #29
 8000d64:	4313      	orrs	r3, r2
 8000d66:	0f5a      	lsrs	r2, r3, #29
 8000d68:	00db      	lsls	r3, r3, #3
 8000d6a:	0752      	lsls	r2, r2, #29
 8000d6c:	08db      	lsrs	r3, r3, #3
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	e690      	b.n	8000a94 <__aeabi_dadd+0x29c>
 8000d72:	4643      	mov	r3, r8
 8000d74:	430b      	orrs	r3, r1
 8000d76:	d100      	bne.n	8000d7a <__aeabi_dadd+0x582>
 8000d78:	e709      	b.n	8000b8e <__aeabi_dadd+0x396>
 8000d7a:	4643      	mov	r3, r8
 8000d7c:	4642      	mov	r2, r8
 8000d7e:	08c9      	lsrs	r1, r1, #3
 8000d80:	075b      	lsls	r3, r3, #29
 8000d82:	4655      	mov	r5, sl
 8000d84:	430b      	orrs	r3, r1
 8000d86:	08d0      	lsrs	r0, r2, #3
 8000d88:	e666      	b.n	8000a58 <__aeabi_dadd+0x260>
 8000d8a:	1acc      	subs	r4, r1, r3
 8000d8c:	42a1      	cmp	r1, r4
 8000d8e:	4189      	sbcs	r1, r1
 8000d90:	1a3f      	subs	r7, r7, r0
 8000d92:	4249      	negs	r1, r1
 8000d94:	4655      	mov	r5, sl
 8000d96:	2601      	movs	r6, #1
 8000d98:	1a7f      	subs	r7, r7, r1
 8000d9a:	e57e      	b.n	800089a <__aeabi_dadd+0xa2>
 8000d9c:	4642      	mov	r2, r8
 8000d9e:	1a5c      	subs	r4, r3, r1
 8000da0:	1a87      	subs	r7, r0, r2
 8000da2:	42a3      	cmp	r3, r4
 8000da4:	4192      	sbcs	r2, r2
 8000da6:	4252      	negs	r2, r2
 8000da8:	1abf      	subs	r7, r7, r2
 8000daa:	023a      	lsls	r2, r7, #8
 8000dac:	d53d      	bpl.n	8000e2a <__aeabi_dadd+0x632>
 8000dae:	1acc      	subs	r4, r1, r3
 8000db0:	42a1      	cmp	r1, r4
 8000db2:	4189      	sbcs	r1, r1
 8000db4:	4643      	mov	r3, r8
 8000db6:	4249      	negs	r1, r1
 8000db8:	1a1f      	subs	r7, r3, r0
 8000dba:	4655      	mov	r5, sl
 8000dbc:	1a7f      	subs	r7, r7, r1
 8000dbe:	e595      	b.n	80008ec <__aeabi_dadd+0xf4>
 8000dc0:	077b      	lsls	r3, r7, #29
 8000dc2:	08c9      	lsrs	r1, r1, #3
 8000dc4:	430b      	orrs	r3, r1
 8000dc6:	08f8      	lsrs	r0, r7, #3
 8000dc8:	e643      	b.n	8000a52 <__aeabi_dadd+0x25a>
 8000dca:	4644      	mov	r4, r8
 8000dcc:	08db      	lsrs	r3, r3, #3
 8000dce:	430c      	orrs	r4, r1
 8000dd0:	d130      	bne.n	8000e34 <__aeabi_dadd+0x63c>
 8000dd2:	0742      	lsls	r2, r0, #29
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	08c0      	lsrs	r0, r0, #3
 8000dd8:	e65c      	b.n	8000a94 <__aeabi_dadd+0x29c>
 8000dda:	077b      	lsls	r3, r7, #29
 8000ddc:	08c9      	lsrs	r1, r1, #3
 8000dde:	430b      	orrs	r3, r1
 8000de0:	08f8      	lsrs	r0, r7, #3
 8000de2:	e639      	b.n	8000a58 <__aeabi_dadd+0x260>
 8000de4:	185c      	adds	r4, r3, r1
 8000de6:	429c      	cmp	r4, r3
 8000de8:	419b      	sbcs	r3, r3
 8000dea:	4440      	add	r0, r8
 8000dec:	425b      	negs	r3, r3
 8000dee:	18c7      	adds	r7, r0, r3
 8000df0:	023b      	lsls	r3, r7, #8
 8000df2:	d400      	bmi.n	8000df6 <__aeabi_dadd+0x5fe>
 8000df4:	e625      	b.n	8000a42 <__aeabi_dadd+0x24a>
 8000df6:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <__aeabi_dadd+0x674>)
 8000df8:	2601      	movs	r6, #1
 8000dfa:	401f      	ands	r7, r3
 8000dfc:	e621      	b.n	8000a42 <__aeabi_dadd+0x24a>
 8000dfe:	0004      	movs	r4, r0
 8000e00:	3a20      	subs	r2, #32
 8000e02:	40d4      	lsrs	r4, r2
 8000e04:	4662      	mov	r2, ip
 8000e06:	2a20      	cmp	r2, #32
 8000e08:	d004      	beq.n	8000e14 <__aeabi_dadd+0x61c>
 8000e0a:	2240      	movs	r2, #64	; 0x40
 8000e0c:	4666      	mov	r6, ip
 8000e0e:	1b92      	subs	r2, r2, r6
 8000e10:	4090      	lsls	r0, r2
 8000e12:	4303      	orrs	r3, r0
 8000e14:	1e5a      	subs	r2, r3, #1
 8000e16:	4193      	sbcs	r3, r2
 8000e18:	431c      	orrs	r4, r3
 8000e1a:	e67e      	b.n	8000b1a <__aeabi_dadd+0x322>
 8000e1c:	185c      	adds	r4, r3, r1
 8000e1e:	428c      	cmp	r4, r1
 8000e20:	4189      	sbcs	r1, r1
 8000e22:	4440      	add	r0, r8
 8000e24:	4249      	negs	r1, r1
 8000e26:	1847      	adds	r7, r0, r1
 8000e28:	e6dd      	b.n	8000be6 <__aeabi_dadd+0x3ee>
 8000e2a:	0023      	movs	r3, r4
 8000e2c:	433b      	orrs	r3, r7
 8000e2e:	d100      	bne.n	8000e32 <__aeabi_dadd+0x63a>
 8000e30:	e6ad      	b.n	8000b8e <__aeabi_dadd+0x396>
 8000e32:	e606      	b.n	8000a42 <__aeabi_dadd+0x24a>
 8000e34:	0744      	lsls	r4, r0, #29
 8000e36:	4323      	orrs	r3, r4
 8000e38:	2480      	movs	r4, #128	; 0x80
 8000e3a:	08c0      	lsrs	r0, r0, #3
 8000e3c:	0324      	lsls	r4, r4, #12
 8000e3e:	4220      	tst	r0, r4
 8000e40:	d008      	beq.n	8000e54 <__aeabi_dadd+0x65c>
 8000e42:	4642      	mov	r2, r8
 8000e44:	08d6      	lsrs	r6, r2, #3
 8000e46:	4226      	tst	r6, r4
 8000e48:	d104      	bne.n	8000e54 <__aeabi_dadd+0x65c>
 8000e4a:	4655      	mov	r5, sl
 8000e4c:	0030      	movs	r0, r6
 8000e4e:	08cb      	lsrs	r3, r1, #3
 8000e50:	0751      	lsls	r1, r2, #29
 8000e52:	430b      	orrs	r3, r1
 8000e54:	0f5a      	lsrs	r2, r3, #29
 8000e56:	00db      	lsls	r3, r3, #3
 8000e58:	08db      	lsrs	r3, r3, #3
 8000e5a:	0752      	lsls	r2, r2, #29
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	e619      	b.n	8000a94 <__aeabi_dadd+0x29c>
 8000e60:	2300      	movs	r3, #0
 8000e62:	4a01      	ldr	r2, [pc, #4]	; (8000e68 <__aeabi_dadd+0x670>)
 8000e64:	001f      	movs	r7, r3
 8000e66:	e55e      	b.n	8000926 <__aeabi_dadd+0x12e>
 8000e68:	000007ff 	.word	0x000007ff
 8000e6c:	ff7fffff 	.word	0xff7fffff

08000e70 <__aeabi_ddiv>:
 8000e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e72:	4657      	mov	r7, sl
 8000e74:	464e      	mov	r6, r9
 8000e76:	4645      	mov	r5, r8
 8000e78:	46de      	mov	lr, fp
 8000e7a:	b5e0      	push	{r5, r6, r7, lr}
 8000e7c:	4681      	mov	r9, r0
 8000e7e:	0005      	movs	r5, r0
 8000e80:	030c      	lsls	r4, r1, #12
 8000e82:	0048      	lsls	r0, r1, #1
 8000e84:	4692      	mov	sl, r2
 8000e86:	001f      	movs	r7, r3
 8000e88:	b085      	sub	sp, #20
 8000e8a:	0b24      	lsrs	r4, r4, #12
 8000e8c:	0d40      	lsrs	r0, r0, #21
 8000e8e:	0fce      	lsrs	r6, r1, #31
 8000e90:	2800      	cmp	r0, #0
 8000e92:	d100      	bne.n	8000e96 <__aeabi_ddiv+0x26>
 8000e94:	e156      	b.n	8001144 <__aeabi_ddiv+0x2d4>
 8000e96:	4bd4      	ldr	r3, [pc, #848]	; (80011e8 <__aeabi_ddiv+0x378>)
 8000e98:	4298      	cmp	r0, r3
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x2e>
 8000e9c:	e172      	b.n	8001184 <__aeabi_ddiv+0x314>
 8000e9e:	0f6b      	lsrs	r3, r5, #29
 8000ea0:	00e4      	lsls	r4, r4, #3
 8000ea2:	431c      	orrs	r4, r3
 8000ea4:	2380      	movs	r3, #128	; 0x80
 8000ea6:	041b      	lsls	r3, r3, #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	4698      	mov	r8, r3
 8000eac:	4bcf      	ldr	r3, [pc, #828]	; (80011ec <__aeabi_ddiv+0x37c>)
 8000eae:	00ed      	lsls	r5, r5, #3
 8000eb0:	469b      	mov	fp, r3
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	4699      	mov	r9, r3
 8000eb6:	4483      	add	fp, r0
 8000eb8:	9300      	str	r3, [sp, #0]
 8000eba:	033c      	lsls	r4, r7, #12
 8000ebc:	007b      	lsls	r3, r7, #1
 8000ebe:	4650      	mov	r0, sl
 8000ec0:	0b24      	lsrs	r4, r4, #12
 8000ec2:	0d5b      	lsrs	r3, r3, #21
 8000ec4:	0fff      	lsrs	r7, r7, #31
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d100      	bne.n	8000ecc <__aeabi_ddiv+0x5c>
 8000eca:	e11f      	b.n	800110c <__aeabi_ddiv+0x29c>
 8000ecc:	4ac6      	ldr	r2, [pc, #792]	; (80011e8 <__aeabi_ddiv+0x378>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x64>
 8000ed2:	e162      	b.n	800119a <__aeabi_ddiv+0x32a>
 8000ed4:	49c5      	ldr	r1, [pc, #788]	; (80011ec <__aeabi_ddiv+0x37c>)
 8000ed6:	0f42      	lsrs	r2, r0, #29
 8000ed8:	468c      	mov	ip, r1
 8000eda:	00e4      	lsls	r4, r4, #3
 8000edc:	4659      	mov	r1, fp
 8000ede:	4314      	orrs	r4, r2
 8000ee0:	2280      	movs	r2, #128	; 0x80
 8000ee2:	4463      	add	r3, ip
 8000ee4:	0412      	lsls	r2, r2, #16
 8000ee6:	1acb      	subs	r3, r1, r3
 8000ee8:	4314      	orrs	r4, r2
 8000eea:	469b      	mov	fp, r3
 8000eec:	00c2      	lsls	r2, r0, #3
 8000eee:	2000      	movs	r0, #0
 8000ef0:	0033      	movs	r3, r6
 8000ef2:	407b      	eors	r3, r7
 8000ef4:	469a      	mov	sl, r3
 8000ef6:	464b      	mov	r3, r9
 8000ef8:	2b0f      	cmp	r3, #15
 8000efa:	d827      	bhi.n	8000f4c <__aeabi_ddiv+0xdc>
 8000efc:	49bc      	ldr	r1, [pc, #752]	; (80011f0 <__aeabi_ddiv+0x380>)
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	58cb      	ldr	r3, [r1, r3]
 8000f02:	469f      	mov	pc, r3
 8000f04:	46b2      	mov	sl, r6
 8000f06:	9b00      	ldr	r3, [sp, #0]
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d016      	beq.n	8000f3a <__aeabi_ddiv+0xca>
 8000f0c:	2b03      	cmp	r3, #3
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_ddiv+0xa2>
 8000f10:	e28e      	b.n	8001430 <__aeabi_ddiv+0x5c0>
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d000      	beq.n	8000f18 <__aeabi_ddiv+0xa8>
 8000f16:	e0d9      	b.n	80010cc <__aeabi_ddiv+0x25c>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	2400      	movs	r4, #0
 8000f1c:	2500      	movs	r5, #0
 8000f1e:	4652      	mov	r2, sl
 8000f20:	051b      	lsls	r3, r3, #20
 8000f22:	4323      	orrs	r3, r4
 8000f24:	07d2      	lsls	r2, r2, #31
 8000f26:	4313      	orrs	r3, r2
 8000f28:	0028      	movs	r0, r5
 8000f2a:	0019      	movs	r1, r3
 8000f2c:	b005      	add	sp, #20
 8000f2e:	bcf0      	pop	{r4, r5, r6, r7}
 8000f30:	46bb      	mov	fp, r7
 8000f32:	46b2      	mov	sl, r6
 8000f34:	46a9      	mov	r9, r5
 8000f36:	46a0      	mov	r8, r4
 8000f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f3a:	2400      	movs	r4, #0
 8000f3c:	2500      	movs	r5, #0
 8000f3e:	4baa      	ldr	r3, [pc, #680]	; (80011e8 <__aeabi_ddiv+0x378>)
 8000f40:	e7ed      	b.n	8000f1e <__aeabi_ddiv+0xae>
 8000f42:	46ba      	mov	sl, r7
 8000f44:	46a0      	mov	r8, r4
 8000f46:	0015      	movs	r5, r2
 8000f48:	9000      	str	r0, [sp, #0]
 8000f4a:	e7dc      	b.n	8000f06 <__aeabi_ddiv+0x96>
 8000f4c:	4544      	cmp	r4, r8
 8000f4e:	d200      	bcs.n	8000f52 <__aeabi_ddiv+0xe2>
 8000f50:	e1c7      	b.n	80012e2 <__aeabi_ddiv+0x472>
 8000f52:	d100      	bne.n	8000f56 <__aeabi_ddiv+0xe6>
 8000f54:	e1c2      	b.n	80012dc <__aeabi_ddiv+0x46c>
 8000f56:	2301      	movs	r3, #1
 8000f58:	425b      	negs	r3, r3
 8000f5a:	469c      	mov	ip, r3
 8000f5c:	002e      	movs	r6, r5
 8000f5e:	4640      	mov	r0, r8
 8000f60:	2500      	movs	r5, #0
 8000f62:	44e3      	add	fp, ip
 8000f64:	0223      	lsls	r3, r4, #8
 8000f66:	0e14      	lsrs	r4, r2, #24
 8000f68:	431c      	orrs	r4, r3
 8000f6a:	0c1b      	lsrs	r3, r3, #16
 8000f6c:	4699      	mov	r9, r3
 8000f6e:	0423      	lsls	r3, r4, #16
 8000f70:	0c1f      	lsrs	r7, r3, #16
 8000f72:	0212      	lsls	r2, r2, #8
 8000f74:	4649      	mov	r1, r9
 8000f76:	9200      	str	r2, [sp, #0]
 8000f78:	9701      	str	r7, [sp, #4]
 8000f7a:	f7ff f967 	bl	800024c <__aeabi_uidivmod>
 8000f7e:	0002      	movs	r2, r0
 8000f80:	437a      	muls	r2, r7
 8000f82:	040b      	lsls	r3, r1, #16
 8000f84:	0c31      	lsrs	r1, r6, #16
 8000f86:	4680      	mov	r8, r0
 8000f88:	4319      	orrs	r1, r3
 8000f8a:	428a      	cmp	r2, r1
 8000f8c:	d907      	bls.n	8000f9e <__aeabi_ddiv+0x12e>
 8000f8e:	2301      	movs	r3, #1
 8000f90:	425b      	negs	r3, r3
 8000f92:	469c      	mov	ip, r3
 8000f94:	1909      	adds	r1, r1, r4
 8000f96:	44e0      	add	r8, ip
 8000f98:	428c      	cmp	r4, r1
 8000f9a:	d800      	bhi.n	8000f9e <__aeabi_ddiv+0x12e>
 8000f9c:	e207      	b.n	80013ae <__aeabi_ddiv+0x53e>
 8000f9e:	1a88      	subs	r0, r1, r2
 8000fa0:	4649      	mov	r1, r9
 8000fa2:	f7ff f953 	bl	800024c <__aeabi_uidivmod>
 8000fa6:	0409      	lsls	r1, r1, #16
 8000fa8:	468c      	mov	ip, r1
 8000faa:	0431      	lsls	r1, r6, #16
 8000fac:	4666      	mov	r6, ip
 8000fae:	9a01      	ldr	r2, [sp, #4]
 8000fb0:	0c09      	lsrs	r1, r1, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0003      	movs	r3, r0
 8000fb6:	4331      	orrs	r1, r6
 8000fb8:	428a      	cmp	r2, r1
 8000fba:	d904      	bls.n	8000fc6 <__aeabi_ddiv+0x156>
 8000fbc:	1909      	adds	r1, r1, r4
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	428c      	cmp	r4, r1
 8000fc2:	d800      	bhi.n	8000fc6 <__aeabi_ddiv+0x156>
 8000fc4:	e1ed      	b.n	80013a2 <__aeabi_ddiv+0x532>
 8000fc6:	1a88      	subs	r0, r1, r2
 8000fc8:	4642      	mov	r2, r8
 8000fca:	0412      	lsls	r2, r2, #16
 8000fcc:	431a      	orrs	r2, r3
 8000fce:	4690      	mov	r8, r2
 8000fd0:	4641      	mov	r1, r8
 8000fd2:	9b00      	ldr	r3, [sp, #0]
 8000fd4:	040e      	lsls	r6, r1, #16
 8000fd6:	0c1b      	lsrs	r3, r3, #16
 8000fd8:	001f      	movs	r7, r3
 8000fda:	9302      	str	r3, [sp, #8]
 8000fdc:	9b00      	ldr	r3, [sp, #0]
 8000fde:	0c36      	lsrs	r6, r6, #16
 8000fe0:	041b      	lsls	r3, r3, #16
 8000fe2:	0c19      	lsrs	r1, r3, #16
 8000fe4:	000b      	movs	r3, r1
 8000fe6:	4373      	muls	r3, r6
 8000fe8:	0c12      	lsrs	r2, r2, #16
 8000fea:	437e      	muls	r6, r7
 8000fec:	9103      	str	r1, [sp, #12]
 8000fee:	4351      	muls	r1, r2
 8000ff0:	437a      	muls	r2, r7
 8000ff2:	0c1f      	lsrs	r7, r3, #16
 8000ff4:	46bc      	mov	ip, r7
 8000ff6:	1876      	adds	r6, r6, r1
 8000ff8:	4466      	add	r6, ip
 8000ffa:	42b1      	cmp	r1, r6
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x196>
 8000ffe:	2180      	movs	r1, #128	; 0x80
 8001000:	0249      	lsls	r1, r1, #9
 8001002:	468c      	mov	ip, r1
 8001004:	4462      	add	r2, ip
 8001006:	0c31      	lsrs	r1, r6, #16
 8001008:	188a      	adds	r2, r1, r2
 800100a:	0431      	lsls	r1, r6, #16
 800100c:	041e      	lsls	r6, r3, #16
 800100e:	0c36      	lsrs	r6, r6, #16
 8001010:	198e      	adds	r6, r1, r6
 8001012:	4290      	cmp	r0, r2
 8001014:	d302      	bcc.n	800101c <__aeabi_ddiv+0x1ac>
 8001016:	d112      	bne.n	800103e <__aeabi_ddiv+0x1ce>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d210      	bcs.n	800103e <__aeabi_ddiv+0x1ce>
 800101c:	4643      	mov	r3, r8
 800101e:	1e59      	subs	r1, r3, #1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	469c      	mov	ip, r3
 8001024:	4465      	add	r5, ip
 8001026:	001f      	movs	r7, r3
 8001028:	429d      	cmp	r5, r3
 800102a:	419b      	sbcs	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	191b      	adds	r3, r3, r4
 8001030:	18c0      	adds	r0, r0, r3
 8001032:	4284      	cmp	r4, r0
 8001034:	d200      	bcs.n	8001038 <__aeabi_ddiv+0x1c8>
 8001036:	e1a0      	b.n	800137a <__aeabi_ddiv+0x50a>
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x1cc>
 800103a:	e19b      	b.n	8001374 <__aeabi_ddiv+0x504>
 800103c:	4688      	mov	r8, r1
 800103e:	1bae      	subs	r6, r5, r6
 8001040:	42b5      	cmp	r5, r6
 8001042:	41ad      	sbcs	r5, r5
 8001044:	1a80      	subs	r0, r0, r2
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4284      	cmp	r4, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x1e0>
 800104e:	e1d5      	b.n	80013fc <__aeabi_ddiv+0x58c>
 8001050:	4649      	mov	r1, r9
 8001052:	f7ff f8fb 	bl	800024c <__aeabi_uidivmod>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x1f8>
 8001066:	e16c      	b.n	8001342 <__aeabi_ddiv+0x4d2>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff f8ee 	bl	800024c <__aeabi_uidivmod>
 8001070:	9a01      	ldr	r2, [sp, #4]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c36      	lsrs	r6, r6, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430e      	orrs	r6, r1
 800107e:	42b2      	cmp	r2, r6
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x214>
 8001082:	e153      	b.n	800132c <__aeabi_ddiv+0x4bc>
 8001084:	9803      	ldr	r0, [sp, #12]
 8001086:	1ab6      	subs	r6, r6, r2
 8001088:	0002      	movs	r2, r0
 800108a:	042d      	lsls	r5, r5, #16
 800108c:	431d      	orrs	r5, r3
 800108e:	9f02      	ldr	r7, [sp, #8]
 8001090:	042b      	lsls	r3, r5, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c29      	lsrs	r1, r5, #16
 800109c:	4348      	muls	r0, r1
 800109e:	0c13      	lsrs	r3, r2, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	4379      	muls	r1, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x242>
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4461      	add	r1, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0412      	lsls	r2, r2, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c12      	lsrs	r2, r2, #16
 80010ba:	1841      	adds	r1, r0, r1
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	428e      	cmp	r6, r1
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x254>
 80010c2:	e0ff      	b.n	80012c4 <__aeabi_ddiv+0x454>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x258>
 80010c6:	e0fa      	b.n	80012be <__aeabi_ddiv+0x44e>
 80010c8:	2301      	movs	r3, #1
 80010ca:	431d      	orrs	r5, r3
 80010cc:	4a49      	ldr	r2, [pc, #292]	; (80011f4 <__aeabi_ddiv+0x384>)
 80010ce:	445a      	add	r2, fp
 80010d0:	2a00      	cmp	r2, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_ddiv+0x266>
 80010d4:	e0aa      	b.n	800122c <__aeabi_ddiv+0x3bc>
 80010d6:	076b      	lsls	r3, r5, #29
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x26c>
 80010da:	e13d      	b.n	8001358 <__aeabi_ddiv+0x4e8>
 80010dc:	08ed      	lsrs	r5, r5, #3
 80010de:	4643      	mov	r3, r8
 80010e0:	01db      	lsls	r3, r3, #7
 80010e2:	d506      	bpl.n	80010f2 <__aeabi_ddiv+0x282>
 80010e4:	4642      	mov	r2, r8
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <__aeabi_ddiv+0x388>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	4690      	mov	r8, r2
 80010ec:	2280      	movs	r2, #128	; 0x80
 80010ee:	00d2      	lsls	r2, r2, #3
 80010f0:	445a      	add	r2, fp
 80010f2:	4b42      	ldr	r3, [pc, #264]	; (80011fc <__aeabi_ddiv+0x38c>)
 80010f4:	429a      	cmp	r2, r3
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x28a>
 80010f8:	e71f      	b.n	8000f3a <__aeabi_ddiv+0xca>
 80010fa:	4643      	mov	r3, r8
 80010fc:	075b      	lsls	r3, r3, #29
 80010fe:	431d      	orrs	r5, r3
 8001100:	4643      	mov	r3, r8
 8001102:	0552      	lsls	r2, r2, #21
 8001104:	025c      	lsls	r4, r3, #9
 8001106:	0b24      	lsrs	r4, r4, #12
 8001108:	0d53      	lsrs	r3, r2, #21
 800110a:	e708      	b.n	8000f1e <__aeabi_ddiv+0xae>
 800110c:	4652      	mov	r2, sl
 800110e:	4322      	orrs	r2, r4
 8001110:	d100      	bne.n	8001114 <__aeabi_ddiv+0x2a4>
 8001112:	e07b      	b.n	800120c <__aeabi_ddiv+0x39c>
 8001114:	2c00      	cmp	r4, #0
 8001116:	d100      	bne.n	800111a <__aeabi_ddiv+0x2aa>
 8001118:	e0fa      	b.n	8001310 <__aeabi_ddiv+0x4a0>
 800111a:	0020      	movs	r0, r4
 800111c:	f001 fa22 	bl	8002564 <__clzsi2>
 8001120:	0002      	movs	r2, r0
 8001122:	3a0b      	subs	r2, #11
 8001124:	231d      	movs	r3, #29
 8001126:	0001      	movs	r1, r0
 8001128:	1a9b      	subs	r3, r3, r2
 800112a:	4652      	mov	r2, sl
 800112c:	3908      	subs	r1, #8
 800112e:	40da      	lsrs	r2, r3
 8001130:	408c      	lsls	r4, r1
 8001132:	4314      	orrs	r4, r2
 8001134:	4652      	mov	r2, sl
 8001136:	408a      	lsls	r2, r1
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <__aeabi_ddiv+0x390>)
 800113a:	4458      	add	r0, fp
 800113c:	469b      	mov	fp, r3
 800113e:	4483      	add	fp, r0
 8001140:	2000      	movs	r0, #0
 8001142:	e6d5      	b.n	8000ef0 <__aeabi_ddiv+0x80>
 8001144:	464b      	mov	r3, r9
 8001146:	4323      	orrs	r3, r4
 8001148:	4698      	mov	r8, r3
 800114a:	d044      	beq.n	80011d6 <__aeabi_ddiv+0x366>
 800114c:	2c00      	cmp	r4, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x2e2>
 8001150:	e0ce      	b.n	80012f0 <__aeabi_ddiv+0x480>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 fa06 	bl	8002564 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	0002      	movs	r2, r0
 800115c:	390b      	subs	r1, #11
 800115e:	231d      	movs	r3, #29
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	4649      	mov	r1, r9
 8001164:	0010      	movs	r0, r2
 8001166:	40d9      	lsrs	r1, r3
 8001168:	3808      	subs	r0, #8
 800116a:	4084      	lsls	r4, r0
 800116c:	000b      	movs	r3, r1
 800116e:	464d      	mov	r5, r9
 8001170:	4323      	orrs	r3, r4
 8001172:	4698      	mov	r8, r3
 8001174:	4085      	lsls	r5, r0
 8001176:	4823      	ldr	r0, [pc, #140]	; (8001204 <__aeabi_ddiv+0x394>)
 8001178:	1a83      	subs	r3, r0, r2
 800117a:	469b      	mov	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	e69a      	b.n	8000eba <__aeabi_ddiv+0x4a>
 8001184:	464b      	mov	r3, r9
 8001186:	4323      	orrs	r3, r4
 8001188:	4698      	mov	r8, r3
 800118a:	d11d      	bne.n	80011c8 <__aeabi_ddiv+0x358>
 800118c:	2308      	movs	r3, #8
 800118e:	4699      	mov	r9, r3
 8001190:	3b06      	subs	r3, #6
 8001192:	2500      	movs	r5, #0
 8001194:	4683      	mov	fp, r0
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e68f      	b.n	8000eba <__aeabi_ddiv+0x4a>
 800119a:	4652      	mov	r2, sl
 800119c:	4322      	orrs	r2, r4
 800119e:	d109      	bne.n	80011b4 <__aeabi_ddiv+0x344>
 80011a0:	2302      	movs	r3, #2
 80011a2:	4649      	mov	r1, r9
 80011a4:	4319      	orrs	r1, r3
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <__aeabi_ddiv+0x398>)
 80011a8:	4689      	mov	r9, r1
 80011aa:	469c      	mov	ip, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	44e3      	add	fp, ip
 80011b2:	e69d      	b.n	8000ef0 <__aeabi_ddiv+0x80>
 80011b4:	2303      	movs	r3, #3
 80011b6:	464a      	mov	r2, r9
 80011b8:	431a      	orrs	r2, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__aeabi_ddiv+0x398>)
 80011bc:	4691      	mov	r9, r2
 80011be:	469c      	mov	ip, r3
 80011c0:	4652      	mov	r2, sl
 80011c2:	2003      	movs	r0, #3
 80011c4:	44e3      	add	fp, ip
 80011c6:	e693      	b.n	8000ef0 <__aeabi_ddiv+0x80>
 80011c8:	230c      	movs	r3, #12
 80011ca:	4699      	mov	r9, r3
 80011cc:	3b09      	subs	r3, #9
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4683      	mov	fp, r0
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e671      	b.n	8000eba <__aeabi_ddiv+0x4a>
 80011d6:	2304      	movs	r3, #4
 80011d8:	4699      	mov	r9, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	469b      	mov	fp, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	2500      	movs	r5, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e669      	b.n	8000eba <__aeabi_ddiv+0x4a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	0800acf0 	.word	0x0800acf0
 80011f4:	000003ff 	.word	0x000003ff
 80011f8:	feffffff 	.word	0xfeffffff
 80011fc:	000007fe 	.word	0x000007fe
 8001200:	000003f3 	.word	0x000003f3
 8001204:	fffffc0d 	.word	0xfffffc0d
 8001208:	fffff801 	.word	0xfffff801
 800120c:	4649      	mov	r1, r9
 800120e:	2301      	movs	r3, #1
 8001210:	4319      	orrs	r1, r3
 8001212:	4689      	mov	r9, r1
 8001214:	2400      	movs	r4, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e66a      	b.n	8000ef0 <__aeabi_ddiv+0x80>
 800121a:	2300      	movs	r3, #0
 800121c:	2480      	movs	r4, #128	; 0x80
 800121e:	469a      	mov	sl, r3
 8001220:	2500      	movs	r5, #0
 8001222:	4b8a      	ldr	r3, [pc, #552]	; (800144c <__aeabi_ddiv+0x5dc>)
 8001224:	0324      	lsls	r4, r4, #12
 8001226:	e67a      	b.n	8000f1e <__aeabi_ddiv+0xae>
 8001228:	2501      	movs	r5, #1
 800122a:	426d      	negs	r5, r5
 800122c:	2301      	movs	r3, #1
 800122e:	1a9b      	subs	r3, r3, r2
 8001230:	2b38      	cmp	r3, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x3c6>
 8001234:	e670      	b.n	8000f18 <__aeabi_ddiv+0xa8>
 8001236:	2b1f      	cmp	r3, #31
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x3cc>
 800123a:	e0bf      	b.n	80013bc <__aeabi_ddiv+0x54c>
 800123c:	211f      	movs	r1, #31
 800123e:	4249      	negs	r1, r1
 8001240:	1a8a      	subs	r2, r1, r2
 8001242:	4641      	mov	r1, r8
 8001244:	40d1      	lsrs	r1, r2
 8001246:	000a      	movs	r2, r1
 8001248:	2b20      	cmp	r3, #32
 800124a:	d004      	beq.n	8001256 <__aeabi_ddiv+0x3e6>
 800124c:	4641      	mov	r1, r8
 800124e:	4b80      	ldr	r3, [pc, #512]	; (8001450 <__aeabi_ddiv+0x5e0>)
 8001250:	445b      	add	r3, fp
 8001252:	4099      	lsls	r1, r3
 8001254:	430d      	orrs	r5, r1
 8001256:	1e6b      	subs	r3, r5, #1
 8001258:	419d      	sbcs	r5, r3
 800125a:	2307      	movs	r3, #7
 800125c:	432a      	orrs	r2, r5
 800125e:	001d      	movs	r5, r3
 8001260:	2400      	movs	r4, #0
 8001262:	4015      	ands	r5, r2
 8001264:	4213      	tst	r3, r2
 8001266:	d100      	bne.n	800126a <__aeabi_ddiv+0x3fa>
 8001268:	e0d4      	b.n	8001414 <__aeabi_ddiv+0x5a4>
 800126a:	210f      	movs	r1, #15
 800126c:	2300      	movs	r3, #0
 800126e:	4011      	ands	r1, r2
 8001270:	2904      	cmp	r1, #4
 8001272:	d100      	bne.n	8001276 <__aeabi_ddiv+0x406>
 8001274:	e0cb      	b.n	800140e <__aeabi_ddiv+0x59e>
 8001276:	1d11      	adds	r1, r2, #4
 8001278:	4291      	cmp	r1, r2
 800127a:	4192      	sbcs	r2, r2
 800127c:	4252      	negs	r2, r2
 800127e:	189b      	adds	r3, r3, r2
 8001280:	000a      	movs	r2, r1
 8001282:	0219      	lsls	r1, r3, #8
 8001284:	d400      	bmi.n	8001288 <__aeabi_ddiv+0x418>
 8001286:	e0c2      	b.n	800140e <__aeabi_ddiv+0x59e>
 8001288:	2301      	movs	r3, #1
 800128a:	2400      	movs	r4, #0
 800128c:	2500      	movs	r5, #0
 800128e:	e646      	b.n	8000f1e <__aeabi_ddiv+0xae>
 8001290:	2380      	movs	r3, #128	; 0x80
 8001292:	4641      	mov	r1, r8
 8001294:	031b      	lsls	r3, r3, #12
 8001296:	4219      	tst	r1, r3
 8001298:	d008      	beq.n	80012ac <__aeabi_ddiv+0x43c>
 800129a:	421c      	tst	r4, r3
 800129c:	d106      	bne.n	80012ac <__aeabi_ddiv+0x43c>
 800129e:	431c      	orrs	r4, r3
 80012a0:	0324      	lsls	r4, r4, #12
 80012a2:	46ba      	mov	sl, r7
 80012a4:	0015      	movs	r5, r2
 80012a6:	4b69      	ldr	r3, [pc, #420]	; (800144c <__aeabi_ddiv+0x5dc>)
 80012a8:	0b24      	lsrs	r4, r4, #12
 80012aa:	e638      	b.n	8000f1e <__aeabi_ddiv+0xae>
 80012ac:	2480      	movs	r4, #128	; 0x80
 80012ae:	4643      	mov	r3, r8
 80012b0:	0324      	lsls	r4, r4, #12
 80012b2:	431c      	orrs	r4, r3
 80012b4:	0324      	lsls	r4, r4, #12
 80012b6:	46b2      	mov	sl, r6
 80012b8:	4b64      	ldr	r3, [pc, #400]	; (800144c <__aeabi_ddiv+0x5dc>)
 80012ba:	0b24      	lsrs	r4, r4, #12
 80012bc:	e62f      	b.n	8000f1e <__aeabi_ddiv+0xae>
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d100      	bne.n	80012c4 <__aeabi_ddiv+0x454>
 80012c2:	e703      	b.n	80010cc <__aeabi_ddiv+0x25c>
 80012c4:	19a6      	adds	r6, r4, r6
 80012c6:	1e68      	subs	r0, r5, #1
 80012c8:	42a6      	cmp	r6, r4
 80012ca:	d200      	bcs.n	80012ce <__aeabi_ddiv+0x45e>
 80012cc:	e08d      	b.n	80013ea <__aeabi_ddiv+0x57a>
 80012ce:	428e      	cmp	r6, r1
 80012d0:	d200      	bcs.n	80012d4 <__aeabi_ddiv+0x464>
 80012d2:	e0a3      	b.n	800141c <__aeabi_ddiv+0x5ac>
 80012d4:	d100      	bne.n	80012d8 <__aeabi_ddiv+0x468>
 80012d6:	e0b3      	b.n	8001440 <__aeabi_ddiv+0x5d0>
 80012d8:	0005      	movs	r5, r0
 80012da:	e6f5      	b.n	80010c8 <__aeabi_ddiv+0x258>
 80012dc:	42aa      	cmp	r2, r5
 80012de:	d900      	bls.n	80012e2 <__aeabi_ddiv+0x472>
 80012e0:	e639      	b.n	8000f56 <__aeabi_ddiv+0xe6>
 80012e2:	4643      	mov	r3, r8
 80012e4:	07de      	lsls	r6, r3, #31
 80012e6:	0858      	lsrs	r0, r3, #1
 80012e8:	086b      	lsrs	r3, r5, #1
 80012ea:	431e      	orrs	r6, r3
 80012ec:	07ed      	lsls	r5, r5, #31
 80012ee:	e639      	b.n	8000f64 <__aeabi_ddiv+0xf4>
 80012f0:	4648      	mov	r0, r9
 80012f2:	f001 f937 	bl	8002564 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0002      	movs	r2, r0
 80012fa:	3115      	adds	r1, #21
 80012fc:	3220      	adds	r2, #32
 80012fe:	291c      	cmp	r1, #28
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x494>
 8001302:	e72c      	b.n	800115e <__aeabi_ddiv+0x2ee>
 8001304:	464b      	mov	r3, r9
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2500      	movs	r5, #0
 800130c:	4698      	mov	r8, r3
 800130e:	e732      	b.n	8001176 <__aeabi_ddiv+0x306>
 8001310:	f001 f928 	bl	8002564 <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_ddiv+0x4b2>
 8001320:	e700      	b.n	8001124 <__aeabi_ddiv+0x2b4>
 8001322:	4654      	mov	r4, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2200      	movs	r2, #0
 8001328:	409c      	lsls	r4, r3
 800132a:	e705      	b.n	8001138 <__aeabi_ddiv+0x2c8>
 800132c:	1936      	adds	r6, r6, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	42b4      	cmp	r4, r6
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4c6>
 8001334:	e6a6      	b.n	8001084 <__aeabi_ddiv+0x214>
 8001336:	42b2      	cmp	r2, r6
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x4cc>
 800133a:	e6a3      	b.n	8001084 <__aeabi_ddiv+0x214>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	1936      	adds	r6, r6, r4
 8001340:	e6a0      	b.n	8001084 <__aeabi_ddiv+0x214>
 8001342:	1909      	adds	r1, r1, r4
 8001344:	3d01      	subs	r5, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x4dc>
 800134a:	e68d      	b.n	8001068 <__aeabi_ddiv+0x1f8>
 800134c:	428a      	cmp	r2, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x4e2>
 8001350:	e68a      	b.n	8001068 <__aeabi_ddiv+0x1f8>
 8001352:	1e85      	subs	r5, r0, #2
 8001354:	1909      	adds	r1, r1, r4
 8001356:	e687      	b.n	8001068 <__aeabi_ddiv+0x1f8>
 8001358:	230f      	movs	r3, #15
 800135a:	402b      	ands	r3, r5
 800135c:	2b04      	cmp	r3, #4
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x4f2>
 8001360:	e6bc      	b.n	80010dc <__aeabi_ddiv+0x26c>
 8001362:	2305      	movs	r3, #5
 8001364:	425b      	negs	r3, r3
 8001366:	42ab      	cmp	r3, r5
 8001368:	419b      	sbcs	r3, r3
 800136a:	3504      	adds	r5, #4
 800136c:	425b      	negs	r3, r3
 800136e:	08ed      	lsrs	r5, r5, #3
 8001370:	4498      	add	r8, r3
 8001372:	e6b4      	b.n	80010de <__aeabi_ddiv+0x26e>
 8001374:	42af      	cmp	r7, r5
 8001376:	d900      	bls.n	800137a <__aeabi_ddiv+0x50a>
 8001378:	e660      	b.n	800103c <__aeabi_ddiv+0x1cc>
 800137a:	4282      	cmp	r2, r0
 800137c:	d804      	bhi.n	8001388 <__aeabi_ddiv+0x518>
 800137e:	d000      	beq.n	8001382 <__aeabi_ddiv+0x512>
 8001380:	e65c      	b.n	800103c <__aeabi_ddiv+0x1cc>
 8001382:	42ae      	cmp	r6, r5
 8001384:	d800      	bhi.n	8001388 <__aeabi_ddiv+0x518>
 8001386:	e659      	b.n	800103c <__aeabi_ddiv+0x1cc>
 8001388:	2302      	movs	r3, #2
 800138a:	425b      	negs	r3, r3
 800138c:	469c      	mov	ip, r3
 800138e:	9b00      	ldr	r3, [sp, #0]
 8001390:	44e0      	add	r8, ip
 8001392:	469c      	mov	ip, r3
 8001394:	4465      	add	r5, ip
 8001396:	429d      	cmp	r5, r3
 8001398:	419b      	sbcs	r3, r3
 800139a:	425b      	negs	r3, r3
 800139c:	191b      	adds	r3, r3, r4
 800139e:	18c0      	adds	r0, r0, r3
 80013a0:	e64d      	b.n	800103e <__aeabi_ddiv+0x1ce>
 80013a2:	428a      	cmp	r2, r1
 80013a4:	d800      	bhi.n	80013a8 <__aeabi_ddiv+0x538>
 80013a6:	e60e      	b.n	8000fc6 <__aeabi_ddiv+0x156>
 80013a8:	1e83      	subs	r3, r0, #2
 80013aa:	1909      	adds	r1, r1, r4
 80013ac:	e60b      	b.n	8000fc6 <__aeabi_ddiv+0x156>
 80013ae:	428a      	cmp	r2, r1
 80013b0:	d800      	bhi.n	80013b4 <__aeabi_ddiv+0x544>
 80013b2:	e5f4      	b.n	8000f9e <__aeabi_ddiv+0x12e>
 80013b4:	1e83      	subs	r3, r0, #2
 80013b6:	4698      	mov	r8, r3
 80013b8:	1909      	adds	r1, r1, r4
 80013ba:	e5f0      	b.n	8000f9e <__aeabi_ddiv+0x12e>
 80013bc:	4925      	ldr	r1, [pc, #148]	; (8001454 <__aeabi_ddiv+0x5e4>)
 80013be:	0028      	movs	r0, r5
 80013c0:	4459      	add	r1, fp
 80013c2:	408d      	lsls	r5, r1
 80013c4:	4642      	mov	r2, r8
 80013c6:	408a      	lsls	r2, r1
 80013c8:	1e69      	subs	r1, r5, #1
 80013ca:	418d      	sbcs	r5, r1
 80013cc:	4641      	mov	r1, r8
 80013ce:	40d8      	lsrs	r0, r3
 80013d0:	40d9      	lsrs	r1, r3
 80013d2:	4302      	orrs	r2, r0
 80013d4:	432a      	orrs	r2, r5
 80013d6:	000b      	movs	r3, r1
 80013d8:	0751      	lsls	r1, r2, #29
 80013da:	d100      	bne.n	80013de <__aeabi_ddiv+0x56e>
 80013dc:	e751      	b.n	8001282 <__aeabi_ddiv+0x412>
 80013de:	210f      	movs	r1, #15
 80013e0:	4011      	ands	r1, r2
 80013e2:	2904      	cmp	r1, #4
 80013e4:	d000      	beq.n	80013e8 <__aeabi_ddiv+0x578>
 80013e6:	e746      	b.n	8001276 <__aeabi_ddiv+0x406>
 80013e8:	e74b      	b.n	8001282 <__aeabi_ddiv+0x412>
 80013ea:	0005      	movs	r5, r0
 80013ec:	428e      	cmp	r6, r1
 80013ee:	d000      	beq.n	80013f2 <__aeabi_ddiv+0x582>
 80013f0:	e66a      	b.n	80010c8 <__aeabi_ddiv+0x258>
 80013f2:	9a00      	ldr	r2, [sp, #0]
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d000      	beq.n	80013fa <__aeabi_ddiv+0x58a>
 80013f8:	e666      	b.n	80010c8 <__aeabi_ddiv+0x258>
 80013fa:	e667      	b.n	80010cc <__aeabi_ddiv+0x25c>
 80013fc:	4a16      	ldr	r2, [pc, #88]	; (8001458 <__aeabi_ddiv+0x5e8>)
 80013fe:	445a      	add	r2, fp
 8001400:	2a00      	cmp	r2, #0
 8001402:	dc00      	bgt.n	8001406 <__aeabi_ddiv+0x596>
 8001404:	e710      	b.n	8001228 <__aeabi_ddiv+0x3b8>
 8001406:	2301      	movs	r3, #1
 8001408:	2500      	movs	r5, #0
 800140a:	4498      	add	r8, r3
 800140c:	e667      	b.n	80010de <__aeabi_ddiv+0x26e>
 800140e:	075d      	lsls	r5, r3, #29
 8001410:	025b      	lsls	r3, r3, #9
 8001412:	0b1c      	lsrs	r4, r3, #12
 8001414:	08d2      	lsrs	r2, r2, #3
 8001416:	2300      	movs	r3, #0
 8001418:	4315      	orrs	r5, r2
 800141a:	e580      	b.n	8000f1e <__aeabi_ddiv+0xae>
 800141c:	9800      	ldr	r0, [sp, #0]
 800141e:	3d02      	subs	r5, #2
 8001420:	0042      	lsls	r2, r0, #1
 8001422:	4282      	cmp	r2, r0
 8001424:	41bf      	sbcs	r7, r7
 8001426:	427f      	negs	r7, r7
 8001428:	193c      	adds	r4, r7, r4
 800142a:	1936      	adds	r6, r6, r4
 800142c:	9200      	str	r2, [sp, #0]
 800142e:	e7dd      	b.n	80013ec <__aeabi_ddiv+0x57c>
 8001430:	2480      	movs	r4, #128	; 0x80
 8001432:	4643      	mov	r3, r8
 8001434:	0324      	lsls	r4, r4, #12
 8001436:	431c      	orrs	r4, r3
 8001438:	0324      	lsls	r4, r4, #12
 800143a:	4b04      	ldr	r3, [pc, #16]	; (800144c <__aeabi_ddiv+0x5dc>)
 800143c:	0b24      	lsrs	r4, r4, #12
 800143e:	e56e      	b.n	8000f1e <__aeabi_ddiv+0xae>
 8001440:	9a00      	ldr	r2, [sp, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	d3ea      	bcc.n	800141c <__aeabi_ddiv+0x5ac>
 8001446:	0005      	movs	r5, r0
 8001448:	e7d3      	b.n	80013f2 <__aeabi_ddiv+0x582>
 800144a:	46c0      	nop			; (mov r8, r8)
 800144c:	000007ff 	.word	0x000007ff
 8001450:	0000043e 	.word	0x0000043e
 8001454:	0000041e 	.word	0x0000041e
 8001458:	000003ff 	.word	0x000003ff

0800145c <__eqdf2>:
 800145c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800145e:	464e      	mov	r6, r9
 8001460:	4645      	mov	r5, r8
 8001462:	46de      	mov	lr, fp
 8001464:	4657      	mov	r7, sl
 8001466:	4690      	mov	r8, r2
 8001468:	b5e0      	push	{r5, r6, r7, lr}
 800146a:	0017      	movs	r7, r2
 800146c:	031a      	lsls	r2, r3, #12
 800146e:	0b12      	lsrs	r2, r2, #12
 8001470:	0005      	movs	r5, r0
 8001472:	4684      	mov	ip, r0
 8001474:	4819      	ldr	r0, [pc, #100]	; (80014dc <__eqdf2+0x80>)
 8001476:	030e      	lsls	r6, r1, #12
 8001478:	004c      	lsls	r4, r1, #1
 800147a:	4691      	mov	r9, r2
 800147c:	005a      	lsls	r2, r3, #1
 800147e:	0fdb      	lsrs	r3, r3, #31
 8001480:	469b      	mov	fp, r3
 8001482:	0b36      	lsrs	r6, r6, #12
 8001484:	0d64      	lsrs	r4, r4, #21
 8001486:	0fc9      	lsrs	r1, r1, #31
 8001488:	0d52      	lsrs	r2, r2, #21
 800148a:	4284      	cmp	r4, r0
 800148c:	d019      	beq.n	80014c2 <__eqdf2+0x66>
 800148e:	4282      	cmp	r2, r0
 8001490:	d010      	beq.n	80014b4 <__eqdf2+0x58>
 8001492:	2001      	movs	r0, #1
 8001494:	4294      	cmp	r4, r2
 8001496:	d10e      	bne.n	80014b6 <__eqdf2+0x5a>
 8001498:	454e      	cmp	r6, r9
 800149a:	d10c      	bne.n	80014b6 <__eqdf2+0x5a>
 800149c:	2001      	movs	r0, #1
 800149e:	45c4      	cmp	ip, r8
 80014a0:	d109      	bne.n	80014b6 <__eqdf2+0x5a>
 80014a2:	4559      	cmp	r1, fp
 80014a4:	d017      	beq.n	80014d6 <__eqdf2+0x7a>
 80014a6:	2c00      	cmp	r4, #0
 80014a8:	d105      	bne.n	80014b6 <__eqdf2+0x5a>
 80014aa:	0030      	movs	r0, r6
 80014ac:	4328      	orrs	r0, r5
 80014ae:	1e43      	subs	r3, r0, #1
 80014b0:	4198      	sbcs	r0, r3
 80014b2:	e000      	b.n	80014b6 <__eqdf2+0x5a>
 80014b4:	2001      	movs	r0, #1
 80014b6:	bcf0      	pop	{r4, r5, r6, r7}
 80014b8:	46bb      	mov	fp, r7
 80014ba:	46b2      	mov	sl, r6
 80014bc:	46a9      	mov	r9, r5
 80014be:	46a0      	mov	r8, r4
 80014c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014c2:	0033      	movs	r3, r6
 80014c4:	2001      	movs	r0, #1
 80014c6:	432b      	orrs	r3, r5
 80014c8:	d1f5      	bne.n	80014b6 <__eqdf2+0x5a>
 80014ca:	42a2      	cmp	r2, r4
 80014cc:	d1f3      	bne.n	80014b6 <__eqdf2+0x5a>
 80014ce:	464b      	mov	r3, r9
 80014d0:	433b      	orrs	r3, r7
 80014d2:	d1f0      	bne.n	80014b6 <__eqdf2+0x5a>
 80014d4:	e7e2      	b.n	800149c <__eqdf2+0x40>
 80014d6:	2000      	movs	r0, #0
 80014d8:	e7ed      	b.n	80014b6 <__eqdf2+0x5a>
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	000007ff 	.word	0x000007ff

080014e0 <__gedf2>:
 80014e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014e2:	4647      	mov	r7, r8
 80014e4:	46ce      	mov	lr, r9
 80014e6:	0004      	movs	r4, r0
 80014e8:	0018      	movs	r0, r3
 80014ea:	0016      	movs	r6, r2
 80014ec:	031b      	lsls	r3, r3, #12
 80014ee:	0b1b      	lsrs	r3, r3, #12
 80014f0:	4d2d      	ldr	r5, [pc, #180]	; (80015a8 <__gedf2+0xc8>)
 80014f2:	004a      	lsls	r2, r1, #1
 80014f4:	4699      	mov	r9, r3
 80014f6:	b580      	push	{r7, lr}
 80014f8:	0043      	lsls	r3, r0, #1
 80014fa:	030f      	lsls	r7, r1, #12
 80014fc:	46a4      	mov	ip, r4
 80014fe:	46b0      	mov	r8, r6
 8001500:	0b3f      	lsrs	r7, r7, #12
 8001502:	0d52      	lsrs	r2, r2, #21
 8001504:	0fc9      	lsrs	r1, r1, #31
 8001506:	0d5b      	lsrs	r3, r3, #21
 8001508:	0fc0      	lsrs	r0, r0, #31
 800150a:	42aa      	cmp	r2, r5
 800150c:	d021      	beq.n	8001552 <__gedf2+0x72>
 800150e:	42ab      	cmp	r3, r5
 8001510:	d013      	beq.n	800153a <__gedf2+0x5a>
 8001512:	2a00      	cmp	r2, #0
 8001514:	d122      	bne.n	800155c <__gedf2+0x7c>
 8001516:	433c      	orrs	r4, r7
 8001518:	2b00      	cmp	r3, #0
 800151a:	d102      	bne.n	8001522 <__gedf2+0x42>
 800151c:	464d      	mov	r5, r9
 800151e:	432e      	orrs	r6, r5
 8001520:	d022      	beq.n	8001568 <__gedf2+0x88>
 8001522:	2c00      	cmp	r4, #0
 8001524:	d010      	beq.n	8001548 <__gedf2+0x68>
 8001526:	4281      	cmp	r1, r0
 8001528:	d022      	beq.n	8001570 <__gedf2+0x90>
 800152a:	2002      	movs	r0, #2
 800152c:	3901      	subs	r1, #1
 800152e:	4008      	ands	r0, r1
 8001530:	3801      	subs	r0, #1
 8001532:	bcc0      	pop	{r6, r7}
 8001534:	46b9      	mov	r9, r7
 8001536:	46b0      	mov	r8, r6
 8001538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800153a:	464d      	mov	r5, r9
 800153c:	432e      	orrs	r6, r5
 800153e:	d129      	bne.n	8001594 <__gedf2+0xb4>
 8001540:	2a00      	cmp	r2, #0
 8001542:	d1f0      	bne.n	8001526 <__gedf2+0x46>
 8001544:	433c      	orrs	r4, r7
 8001546:	d1ee      	bne.n	8001526 <__gedf2+0x46>
 8001548:	2800      	cmp	r0, #0
 800154a:	d1f2      	bne.n	8001532 <__gedf2+0x52>
 800154c:	2001      	movs	r0, #1
 800154e:	4240      	negs	r0, r0
 8001550:	e7ef      	b.n	8001532 <__gedf2+0x52>
 8001552:	003d      	movs	r5, r7
 8001554:	4325      	orrs	r5, r4
 8001556:	d11d      	bne.n	8001594 <__gedf2+0xb4>
 8001558:	4293      	cmp	r3, r2
 800155a:	d0ee      	beq.n	800153a <__gedf2+0x5a>
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1e2      	bne.n	8001526 <__gedf2+0x46>
 8001560:	464c      	mov	r4, r9
 8001562:	4326      	orrs	r6, r4
 8001564:	d1df      	bne.n	8001526 <__gedf2+0x46>
 8001566:	e7e0      	b.n	800152a <__gedf2+0x4a>
 8001568:	2000      	movs	r0, #0
 800156a:	2c00      	cmp	r4, #0
 800156c:	d0e1      	beq.n	8001532 <__gedf2+0x52>
 800156e:	e7dc      	b.n	800152a <__gedf2+0x4a>
 8001570:	429a      	cmp	r2, r3
 8001572:	dc0a      	bgt.n	800158a <__gedf2+0xaa>
 8001574:	dbe8      	blt.n	8001548 <__gedf2+0x68>
 8001576:	454f      	cmp	r7, r9
 8001578:	d8d7      	bhi.n	800152a <__gedf2+0x4a>
 800157a:	d00e      	beq.n	800159a <__gedf2+0xba>
 800157c:	2000      	movs	r0, #0
 800157e:	454f      	cmp	r7, r9
 8001580:	d2d7      	bcs.n	8001532 <__gedf2+0x52>
 8001582:	2900      	cmp	r1, #0
 8001584:	d0e2      	beq.n	800154c <__gedf2+0x6c>
 8001586:	0008      	movs	r0, r1
 8001588:	e7d3      	b.n	8001532 <__gedf2+0x52>
 800158a:	4243      	negs	r3, r0
 800158c:	4158      	adcs	r0, r3
 800158e:	0040      	lsls	r0, r0, #1
 8001590:	3801      	subs	r0, #1
 8001592:	e7ce      	b.n	8001532 <__gedf2+0x52>
 8001594:	2002      	movs	r0, #2
 8001596:	4240      	negs	r0, r0
 8001598:	e7cb      	b.n	8001532 <__gedf2+0x52>
 800159a:	45c4      	cmp	ip, r8
 800159c:	d8c5      	bhi.n	800152a <__gedf2+0x4a>
 800159e:	2000      	movs	r0, #0
 80015a0:	45c4      	cmp	ip, r8
 80015a2:	d2c6      	bcs.n	8001532 <__gedf2+0x52>
 80015a4:	e7ed      	b.n	8001582 <__gedf2+0xa2>
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	000007ff 	.word	0x000007ff

080015ac <__ledf2>:
 80015ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ae:	4647      	mov	r7, r8
 80015b0:	46ce      	mov	lr, r9
 80015b2:	0004      	movs	r4, r0
 80015b4:	0018      	movs	r0, r3
 80015b6:	0016      	movs	r6, r2
 80015b8:	031b      	lsls	r3, r3, #12
 80015ba:	0b1b      	lsrs	r3, r3, #12
 80015bc:	4d2c      	ldr	r5, [pc, #176]	; (8001670 <__ledf2+0xc4>)
 80015be:	004a      	lsls	r2, r1, #1
 80015c0:	4699      	mov	r9, r3
 80015c2:	b580      	push	{r7, lr}
 80015c4:	0043      	lsls	r3, r0, #1
 80015c6:	030f      	lsls	r7, r1, #12
 80015c8:	46a4      	mov	ip, r4
 80015ca:	46b0      	mov	r8, r6
 80015cc:	0b3f      	lsrs	r7, r7, #12
 80015ce:	0d52      	lsrs	r2, r2, #21
 80015d0:	0fc9      	lsrs	r1, r1, #31
 80015d2:	0d5b      	lsrs	r3, r3, #21
 80015d4:	0fc0      	lsrs	r0, r0, #31
 80015d6:	42aa      	cmp	r2, r5
 80015d8:	d00d      	beq.n	80015f6 <__ledf2+0x4a>
 80015da:	42ab      	cmp	r3, r5
 80015dc:	d010      	beq.n	8001600 <__ledf2+0x54>
 80015de:	2a00      	cmp	r2, #0
 80015e0:	d127      	bne.n	8001632 <__ledf2+0x86>
 80015e2:	433c      	orrs	r4, r7
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d111      	bne.n	800160c <__ledf2+0x60>
 80015e8:	464d      	mov	r5, r9
 80015ea:	432e      	orrs	r6, r5
 80015ec:	d10e      	bne.n	800160c <__ledf2+0x60>
 80015ee:	2000      	movs	r0, #0
 80015f0:	2c00      	cmp	r4, #0
 80015f2:	d015      	beq.n	8001620 <__ledf2+0x74>
 80015f4:	e00e      	b.n	8001614 <__ledf2+0x68>
 80015f6:	003d      	movs	r5, r7
 80015f8:	4325      	orrs	r5, r4
 80015fa:	d110      	bne.n	800161e <__ledf2+0x72>
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d118      	bne.n	8001632 <__ledf2+0x86>
 8001600:	464d      	mov	r5, r9
 8001602:	432e      	orrs	r6, r5
 8001604:	d10b      	bne.n	800161e <__ledf2+0x72>
 8001606:	2a00      	cmp	r2, #0
 8001608:	d102      	bne.n	8001610 <__ledf2+0x64>
 800160a:	433c      	orrs	r4, r7
 800160c:	2c00      	cmp	r4, #0
 800160e:	d00b      	beq.n	8001628 <__ledf2+0x7c>
 8001610:	4281      	cmp	r1, r0
 8001612:	d014      	beq.n	800163e <__ledf2+0x92>
 8001614:	2002      	movs	r0, #2
 8001616:	3901      	subs	r1, #1
 8001618:	4008      	ands	r0, r1
 800161a:	3801      	subs	r0, #1
 800161c:	e000      	b.n	8001620 <__ledf2+0x74>
 800161e:	2002      	movs	r0, #2
 8001620:	bcc0      	pop	{r6, r7}
 8001622:	46b9      	mov	r9, r7
 8001624:	46b0      	mov	r8, r6
 8001626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001628:	2800      	cmp	r0, #0
 800162a:	d1f9      	bne.n	8001620 <__ledf2+0x74>
 800162c:	2001      	movs	r0, #1
 800162e:	4240      	negs	r0, r0
 8001630:	e7f6      	b.n	8001620 <__ledf2+0x74>
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1ec      	bne.n	8001610 <__ledf2+0x64>
 8001636:	464c      	mov	r4, r9
 8001638:	4326      	orrs	r6, r4
 800163a:	d1e9      	bne.n	8001610 <__ledf2+0x64>
 800163c:	e7ea      	b.n	8001614 <__ledf2+0x68>
 800163e:	429a      	cmp	r2, r3
 8001640:	dd04      	ble.n	800164c <__ledf2+0xa0>
 8001642:	4243      	negs	r3, r0
 8001644:	4158      	adcs	r0, r3
 8001646:	0040      	lsls	r0, r0, #1
 8001648:	3801      	subs	r0, #1
 800164a:	e7e9      	b.n	8001620 <__ledf2+0x74>
 800164c:	429a      	cmp	r2, r3
 800164e:	dbeb      	blt.n	8001628 <__ledf2+0x7c>
 8001650:	454f      	cmp	r7, r9
 8001652:	d8df      	bhi.n	8001614 <__ledf2+0x68>
 8001654:	d006      	beq.n	8001664 <__ledf2+0xb8>
 8001656:	2000      	movs	r0, #0
 8001658:	454f      	cmp	r7, r9
 800165a:	d2e1      	bcs.n	8001620 <__ledf2+0x74>
 800165c:	2900      	cmp	r1, #0
 800165e:	d0e5      	beq.n	800162c <__ledf2+0x80>
 8001660:	0008      	movs	r0, r1
 8001662:	e7dd      	b.n	8001620 <__ledf2+0x74>
 8001664:	45c4      	cmp	ip, r8
 8001666:	d8d5      	bhi.n	8001614 <__ledf2+0x68>
 8001668:	2000      	movs	r0, #0
 800166a:	45c4      	cmp	ip, r8
 800166c:	d2d8      	bcs.n	8001620 <__ledf2+0x74>
 800166e:	e7f5      	b.n	800165c <__ledf2+0xb0>
 8001670:	000007ff 	.word	0x000007ff

08001674 <__aeabi_dmul>:
 8001674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001676:	4657      	mov	r7, sl
 8001678:	464e      	mov	r6, r9
 800167a:	4645      	mov	r5, r8
 800167c:	46de      	mov	lr, fp
 800167e:	b5e0      	push	{r5, r6, r7, lr}
 8001680:	4698      	mov	r8, r3
 8001682:	030c      	lsls	r4, r1, #12
 8001684:	004b      	lsls	r3, r1, #1
 8001686:	0006      	movs	r6, r0
 8001688:	4692      	mov	sl, r2
 800168a:	b087      	sub	sp, #28
 800168c:	0b24      	lsrs	r4, r4, #12
 800168e:	0d5b      	lsrs	r3, r3, #21
 8001690:	0fcf      	lsrs	r7, r1, #31
 8001692:	2b00      	cmp	r3, #0
 8001694:	d100      	bne.n	8001698 <__aeabi_dmul+0x24>
 8001696:	e15c      	b.n	8001952 <__aeabi_dmul+0x2de>
 8001698:	4ad9      	ldr	r2, [pc, #868]	; (8001a00 <__aeabi_dmul+0x38c>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d100      	bne.n	80016a0 <__aeabi_dmul+0x2c>
 800169e:	e175      	b.n	800198c <__aeabi_dmul+0x318>
 80016a0:	0f42      	lsrs	r2, r0, #29
 80016a2:	00e4      	lsls	r4, r4, #3
 80016a4:	4314      	orrs	r4, r2
 80016a6:	2280      	movs	r2, #128	; 0x80
 80016a8:	0412      	lsls	r2, r2, #16
 80016aa:	4314      	orrs	r4, r2
 80016ac:	4ad5      	ldr	r2, [pc, #852]	; (8001a04 <__aeabi_dmul+0x390>)
 80016ae:	00c5      	lsls	r5, r0, #3
 80016b0:	4694      	mov	ip, r2
 80016b2:	4463      	add	r3, ip
 80016b4:	9300      	str	r3, [sp, #0]
 80016b6:	2300      	movs	r3, #0
 80016b8:	4699      	mov	r9, r3
 80016ba:	469b      	mov	fp, r3
 80016bc:	4643      	mov	r3, r8
 80016be:	4642      	mov	r2, r8
 80016c0:	031e      	lsls	r6, r3, #12
 80016c2:	0fd2      	lsrs	r2, r2, #31
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	4650      	mov	r0, sl
 80016c8:	4690      	mov	r8, r2
 80016ca:	0b36      	lsrs	r6, r6, #12
 80016cc:	0d5b      	lsrs	r3, r3, #21
 80016ce:	d100      	bne.n	80016d2 <__aeabi_dmul+0x5e>
 80016d0:	e120      	b.n	8001914 <__aeabi_dmul+0x2a0>
 80016d2:	4acb      	ldr	r2, [pc, #812]	; (8001a00 <__aeabi_dmul+0x38c>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d100      	bne.n	80016da <__aeabi_dmul+0x66>
 80016d8:	e162      	b.n	80019a0 <__aeabi_dmul+0x32c>
 80016da:	49ca      	ldr	r1, [pc, #808]	; (8001a04 <__aeabi_dmul+0x390>)
 80016dc:	0f42      	lsrs	r2, r0, #29
 80016de:	468c      	mov	ip, r1
 80016e0:	9900      	ldr	r1, [sp, #0]
 80016e2:	4463      	add	r3, ip
 80016e4:	00f6      	lsls	r6, r6, #3
 80016e6:	468c      	mov	ip, r1
 80016e8:	4316      	orrs	r6, r2
 80016ea:	2280      	movs	r2, #128	; 0x80
 80016ec:	449c      	add	ip, r3
 80016ee:	0412      	lsls	r2, r2, #16
 80016f0:	4663      	mov	r3, ip
 80016f2:	4316      	orrs	r6, r2
 80016f4:	00c2      	lsls	r2, r0, #3
 80016f6:	2000      	movs	r0, #0
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	9900      	ldr	r1, [sp, #0]
 80016fc:	4643      	mov	r3, r8
 80016fe:	3101      	adds	r1, #1
 8001700:	468c      	mov	ip, r1
 8001702:	4649      	mov	r1, r9
 8001704:	407b      	eors	r3, r7
 8001706:	9301      	str	r3, [sp, #4]
 8001708:	290f      	cmp	r1, #15
 800170a:	d826      	bhi.n	800175a <__aeabi_dmul+0xe6>
 800170c:	4bbe      	ldr	r3, [pc, #760]	; (8001a08 <__aeabi_dmul+0x394>)
 800170e:	0089      	lsls	r1, r1, #2
 8001710:	5859      	ldr	r1, [r3, r1]
 8001712:	468f      	mov	pc, r1
 8001714:	4643      	mov	r3, r8
 8001716:	9301      	str	r3, [sp, #4]
 8001718:	0034      	movs	r4, r6
 800171a:	0015      	movs	r5, r2
 800171c:	4683      	mov	fp, r0
 800171e:	465b      	mov	r3, fp
 8001720:	2b02      	cmp	r3, #2
 8001722:	d016      	beq.n	8001752 <__aeabi_dmul+0xde>
 8001724:	2b03      	cmp	r3, #3
 8001726:	d100      	bne.n	800172a <__aeabi_dmul+0xb6>
 8001728:	e203      	b.n	8001b32 <__aeabi_dmul+0x4be>
 800172a:	2b01      	cmp	r3, #1
 800172c:	d000      	beq.n	8001730 <__aeabi_dmul+0xbc>
 800172e:	e0cd      	b.n	80018cc <__aeabi_dmul+0x258>
 8001730:	2200      	movs	r2, #0
 8001732:	2400      	movs	r4, #0
 8001734:	2500      	movs	r5, #0
 8001736:	9b01      	ldr	r3, [sp, #4]
 8001738:	0512      	lsls	r2, r2, #20
 800173a:	4322      	orrs	r2, r4
 800173c:	07db      	lsls	r3, r3, #31
 800173e:	431a      	orrs	r2, r3
 8001740:	0028      	movs	r0, r5
 8001742:	0011      	movs	r1, r2
 8001744:	b007      	add	sp, #28
 8001746:	bcf0      	pop	{r4, r5, r6, r7}
 8001748:	46bb      	mov	fp, r7
 800174a:	46b2      	mov	sl, r6
 800174c:	46a9      	mov	r9, r5
 800174e:	46a0      	mov	r8, r4
 8001750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001752:	2400      	movs	r4, #0
 8001754:	2500      	movs	r5, #0
 8001756:	4aaa      	ldr	r2, [pc, #680]	; (8001a00 <__aeabi_dmul+0x38c>)
 8001758:	e7ed      	b.n	8001736 <__aeabi_dmul+0xc2>
 800175a:	0c28      	lsrs	r0, r5, #16
 800175c:	042d      	lsls	r5, r5, #16
 800175e:	0c2d      	lsrs	r5, r5, #16
 8001760:	002b      	movs	r3, r5
 8001762:	0c11      	lsrs	r1, r2, #16
 8001764:	0412      	lsls	r2, r2, #16
 8001766:	0c12      	lsrs	r2, r2, #16
 8001768:	4353      	muls	r3, r2
 800176a:	4698      	mov	r8, r3
 800176c:	0013      	movs	r3, r2
 800176e:	002f      	movs	r7, r5
 8001770:	4343      	muls	r3, r0
 8001772:	4699      	mov	r9, r3
 8001774:	434f      	muls	r7, r1
 8001776:	444f      	add	r7, r9
 8001778:	46bb      	mov	fp, r7
 800177a:	4647      	mov	r7, r8
 800177c:	000b      	movs	r3, r1
 800177e:	0c3f      	lsrs	r7, r7, #16
 8001780:	46ba      	mov	sl, r7
 8001782:	4343      	muls	r3, r0
 8001784:	44da      	add	sl, fp
 8001786:	9302      	str	r3, [sp, #8]
 8001788:	45d1      	cmp	r9, sl
 800178a:	d904      	bls.n	8001796 <__aeabi_dmul+0x122>
 800178c:	2780      	movs	r7, #128	; 0x80
 800178e:	027f      	lsls	r7, r7, #9
 8001790:	46b9      	mov	r9, r7
 8001792:	444b      	add	r3, r9
 8001794:	9302      	str	r3, [sp, #8]
 8001796:	4653      	mov	r3, sl
 8001798:	0c1b      	lsrs	r3, r3, #16
 800179a:	469b      	mov	fp, r3
 800179c:	4653      	mov	r3, sl
 800179e:	041f      	lsls	r7, r3, #16
 80017a0:	4643      	mov	r3, r8
 80017a2:	041b      	lsls	r3, r3, #16
 80017a4:	0c1b      	lsrs	r3, r3, #16
 80017a6:	4698      	mov	r8, r3
 80017a8:	003b      	movs	r3, r7
 80017aa:	4443      	add	r3, r8
 80017ac:	9304      	str	r3, [sp, #16]
 80017ae:	0c33      	lsrs	r3, r6, #16
 80017b0:	0436      	lsls	r6, r6, #16
 80017b2:	0c36      	lsrs	r6, r6, #16
 80017b4:	4698      	mov	r8, r3
 80017b6:	0033      	movs	r3, r6
 80017b8:	4343      	muls	r3, r0
 80017ba:	4699      	mov	r9, r3
 80017bc:	4643      	mov	r3, r8
 80017be:	4343      	muls	r3, r0
 80017c0:	002f      	movs	r7, r5
 80017c2:	469a      	mov	sl, r3
 80017c4:	4643      	mov	r3, r8
 80017c6:	4377      	muls	r7, r6
 80017c8:	435d      	muls	r5, r3
 80017ca:	0c38      	lsrs	r0, r7, #16
 80017cc:	444d      	add	r5, r9
 80017ce:	1945      	adds	r5, r0, r5
 80017d0:	45a9      	cmp	r9, r5
 80017d2:	d903      	bls.n	80017dc <__aeabi_dmul+0x168>
 80017d4:	2380      	movs	r3, #128	; 0x80
 80017d6:	025b      	lsls	r3, r3, #9
 80017d8:	4699      	mov	r9, r3
 80017da:	44ca      	add	sl, r9
 80017dc:	043f      	lsls	r7, r7, #16
 80017de:	0c28      	lsrs	r0, r5, #16
 80017e0:	0c3f      	lsrs	r7, r7, #16
 80017e2:	042d      	lsls	r5, r5, #16
 80017e4:	19ed      	adds	r5, r5, r7
 80017e6:	0c27      	lsrs	r7, r4, #16
 80017e8:	0424      	lsls	r4, r4, #16
 80017ea:	0c24      	lsrs	r4, r4, #16
 80017ec:	0003      	movs	r3, r0
 80017ee:	0020      	movs	r0, r4
 80017f0:	4350      	muls	r0, r2
 80017f2:	437a      	muls	r2, r7
 80017f4:	4691      	mov	r9, r2
 80017f6:	003a      	movs	r2, r7
 80017f8:	4453      	add	r3, sl
 80017fa:	9305      	str	r3, [sp, #20]
 80017fc:	0c03      	lsrs	r3, r0, #16
 80017fe:	469a      	mov	sl, r3
 8001800:	434a      	muls	r2, r1
 8001802:	4361      	muls	r1, r4
 8001804:	4449      	add	r1, r9
 8001806:	4451      	add	r1, sl
 8001808:	44ab      	add	fp, r5
 800180a:	4589      	cmp	r9, r1
 800180c:	d903      	bls.n	8001816 <__aeabi_dmul+0x1a2>
 800180e:	2380      	movs	r3, #128	; 0x80
 8001810:	025b      	lsls	r3, r3, #9
 8001812:	4699      	mov	r9, r3
 8001814:	444a      	add	r2, r9
 8001816:	0400      	lsls	r0, r0, #16
 8001818:	0c0b      	lsrs	r3, r1, #16
 800181a:	0c00      	lsrs	r0, r0, #16
 800181c:	0409      	lsls	r1, r1, #16
 800181e:	1809      	adds	r1, r1, r0
 8001820:	0020      	movs	r0, r4
 8001822:	4699      	mov	r9, r3
 8001824:	4643      	mov	r3, r8
 8001826:	4370      	muls	r0, r6
 8001828:	435c      	muls	r4, r3
 800182a:	437e      	muls	r6, r7
 800182c:	435f      	muls	r7, r3
 800182e:	0c03      	lsrs	r3, r0, #16
 8001830:	4698      	mov	r8, r3
 8001832:	19a4      	adds	r4, r4, r6
 8001834:	4444      	add	r4, r8
 8001836:	444a      	add	r2, r9
 8001838:	9703      	str	r7, [sp, #12]
 800183a:	42a6      	cmp	r6, r4
 800183c:	d904      	bls.n	8001848 <__aeabi_dmul+0x1d4>
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	025b      	lsls	r3, r3, #9
 8001842:	4698      	mov	r8, r3
 8001844:	4447      	add	r7, r8
 8001846:	9703      	str	r7, [sp, #12]
 8001848:	0423      	lsls	r3, r4, #16
 800184a:	9e02      	ldr	r6, [sp, #8]
 800184c:	469a      	mov	sl, r3
 800184e:	9b05      	ldr	r3, [sp, #20]
 8001850:	445e      	add	r6, fp
 8001852:	4698      	mov	r8, r3
 8001854:	42ae      	cmp	r6, r5
 8001856:	41ad      	sbcs	r5, r5
 8001858:	1876      	adds	r6, r6, r1
 800185a:	428e      	cmp	r6, r1
 800185c:	4189      	sbcs	r1, r1
 800185e:	0400      	lsls	r0, r0, #16
 8001860:	0c00      	lsrs	r0, r0, #16
 8001862:	4450      	add	r0, sl
 8001864:	4440      	add	r0, r8
 8001866:	426d      	negs	r5, r5
 8001868:	1947      	adds	r7, r0, r5
 800186a:	46b8      	mov	r8, r7
 800186c:	4693      	mov	fp, r2
 800186e:	4249      	negs	r1, r1
 8001870:	4689      	mov	r9, r1
 8001872:	44c3      	add	fp, r8
 8001874:	44d9      	add	r9, fp
 8001876:	4298      	cmp	r0, r3
 8001878:	4180      	sbcs	r0, r0
 800187a:	45a8      	cmp	r8, r5
 800187c:	41ad      	sbcs	r5, r5
 800187e:	4593      	cmp	fp, r2
 8001880:	4192      	sbcs	r2, r2
 8001882:	4589      	cmp	r9, r1
 8001884:	4189      	sbcs	r1, r1
 8001886:	426d      	negs	r5, r5
 8001888:	4240      	negs	r0, r0
 800188a:	4328      	orrs	r0, r5
 800188c:	0c24      	lsrs	r4, r4, #16
 800188e:	4252      	negs	r2, r2
 8001890:	4249      	negs	r1, r1
 8001892:	430a      	orrs	r2, r1
 8001894:	9b03      	ldr	r3, [sp, #12]
 8001896:	1900      	adds	r0, r0, r4
 8001898:	1880      	adds	r0, r0, r2
 800189a:	18c7      	adds	r7, r0, r3
 800189c:	464b      	mov	r3, r9
 800189e:	0ddc      	lsrs	r4, r3, #23
 80018a0:	9b04      	ldr	r3, [sp, #16]
 80018a2:	0275      	lsls	r5, r6, #9
 80018a4:	431d      	orrs	r5, r3
 80018a6:	1e6a      	subs	r2, r5, #1
 80018a8:	4195      	sbcs	r5, r2
 80018aa:	464b      	mov	r3, r9
 80018ac:	0df6      	lsrs	r6, r6, #23
 80018ae:	027f      	lsls	r7, r7, #9
 80018b0:	4335      	orrs	r5, r6
 80018b2:	025a      	lsls	r2, r3, #9
 80018b4:	433c      	orrs	r4, r7
 80018b6:	4315      	orrs	r5, r2
 80018b8:	01fb      	lsls	r3, r7, #7
 80018ba:	d400      	bmi.n	80018be <__aeabi_dmul+0x24a>
 80018bc:	e11c      	b.n	8001af8 <__aeabi_dmul+0x484>
 80018be:	2101      	movs	r1, #1
 80018c0:	086a      	lsrs	r2, r5, #1
 80018c2:	400d      	ands	r5, r1
 80018c4:	4315      	orrs	r5, r2
 80018c6:	07e2      	lsls	r2, r4, #31
 80018c8:	4315      	orrs	r5, r2
 80018ca:	0864      	lsrs	r4, r4, #1
 80018cc:	494f      	ldr	r1, [pc, #316]	; (8001a0c <__aeabi_dmul+0x398>)
 80018ce:	4461      	add	r1, ip
 80018d0:	2900      	cmp	r1, #0
 80018d2:	dc00      	bgt.n	80018d6 <__aeabi_dmul+0x262>
 80018d4:	e0b0      	b.n	8001a38 <__aeabi_dmul+0x3c4>
 80018d6:	076b      	lsls	r3, r5, #29
 80018d8:	d009      	beq.n	80018ee <__aeabi_dmul+0x27a>
 80018da:	220f      	movs	r2, #15
 80018dc:	402a      	ands	r2, r5
 80018de:	2a04      	cmp	r2, #4
 80018e0:	d005      	beq.n	80018ee <__aeabi_dmul+0x27a>
 80018e2:	1d2a      	adds	r2, r5, #4
 80018e4:	42aa      	cmp	r2, r5
 80018e6:	41ad      	sbcs	r5, r5
 80018e8:	426d      	negs	r5, r5
 80018ea:	1964      	adds	r4, r4, r5
 80018ec:	0015      	movs	r5, r2
 80018ee:	01e3      	lsls	r3, r4, #7
 80018f0:	d504      	bpl.n	80018fc <__aeabi_dmul+0x288>
 80018f2:	2180      	movs	r1, #128	; 0x80
 80018f4:	4a46      	ldr	r2, [pc, #280]	; (8001a10 <__aeabi_dmul+0x39c>)
 80018f6:	00c9      	lsls	r1, r1, #3
 80018f8:	4014      	ands	r4, r2
 80018fa:	4461      	add	r1, ip
 80018fc:	4a45      	ldr	r2, [pc, #276]	; (8001a14 <__aeabi_dmul+0x3a0>)
 80018fe:	4291      	cmp	r1, r2
 8001900:	dd00      	ble.n	8001904 <__aeabi_dmul+0x290>
 8001902:	e726      	b.n	8001752 <__aeabi_dmul+0xde>
 8001904:	0762      	lsls	r2, r4, #29
 8001906:	08ed      	lsrs	r5, r5, #3
 8001908:	0264      	lsls	r4, r4, #9
 800190a:	0549      	lsls	r1, r1, #21
 800190c:	4315      	orrs	r5, r2
 800190e:	0b24      	lsrs	r4, r4, #12
 8001910:	0d4a      	lsrs	r2, r1, #21
 8001912:	e710      	b.n	8001736 <__aeabi_dmul+0xc2>
 8001914:	4652      	mov	r2, sl
 8001916:	4332      	orrs	r2, r6
 8001918:	d100      	bne.n	800191c <__aeabi_dmul+0x2a8>
 800191a:	e07f      	b.n	8001a1c <__aeabi_dmul+0x3a8>
 800191c:	2e00      	cmp	r6, #0
 800191e:	d100      	bne.n	8001922 <__aeabi_dmul+0x2ae>
 8001920:	e0dc      	b.n	8001adc <__aeabi_dmul+0x468>
 8001922:	0030      	movs	r0, r6
 8001924:	f000 fe1e 	bl	8002564 <__clzsi2>
 8001928:	0002      	movs	r2, r0
 800192a:	3a0b      	subs	r2, #11
 800192c:	231d      	movs	r3, #29
 800192e:	0001      	movs	r1, r0
 8001930:	1a9b      	subs	r3, r3, r2
 8001932:	4652      	mov	r2, sl
 8001934:	3908      	subs	r1, #8
 8001936:	40da      	lsrs	r2, r3
 8001938:	408e      	lsls	r6, r1
 800193a:	4316      	orrs	r6, r2
 800193c:	4652      	mov	r2, sl
 800193e:	408a      	lsls	r2, r1
 8001940:	9b00      	ldr	r3, [sp, #0]
 8001942:	4935      	ldr	r1, [pc, #212]	; (8001a18 <__aeabi_dmul+0x3a4>)
 8001944:	1a18      	subs	r0, r3, r0
 8001946:	0003      	movs	r3, r0
 8001948:	468c      	mov	ip, r1
 800194a:	4463      	add	r3, ip
 800194c:	2000      	movs	r0, #0
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	e6d3      	b.n	80016fa <__aeabi_dmul+0x86>
 8001952:	0025      	movs	r5, r4
 8001954:	4305      	orrs	r5, r0
 8001956:	d04a      	beq.n	80019ee <__aeabi_dmul+0x37a>
 8001958:	2c00      	cmp	r4, #0
 800195a:	d100      	bne.n	800195e <__aeabi_dmul+0x2ea>
 800195c:	e0b0      	b.n	8001ac0 <__aeabi_dmul+0x44c>
 800195e:	0020      	movs	r0, r4
 8001960:	f000 fe00 	bl	8002564 <__clzsi2>
 8001964:	0001      	movs	r1, r0
 8001966:	0002      	movs	r2, r0
 8001968:	390b      	subs	r1, #11
 800196a:	231d      	movs	r3, #29
 800196c:	0010      	movs	r0, r2
 800196e:	1a5b      	subs	r3, r3, r1
 8001970:	0031      	movs	r1, r6
 8001972:	0035      	movs	r5, r6
 8001974:	3808      	subs	r0, #8
 8001976:	4084      	lsls	r4, r0
 8001978:	40d9      	lsrs	r1, r3
 800197a:	4085      	lsls	r5, r0
 800197c:	430c      	orrs	r4, r1
 800197e:	4826      	ldr	r0, [pc, #152]	; (8001a18 <__aeabi_dmul+0x3a4>)
 8001980:	1a83      	subs	r3, r0, r2
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	2300      	movs	r3, #0
 8001986:	4699      	mov	r9, r3
 8001988:	469b      	mov	fp, r3
 800198a:	e697      	b.n	80016bc <__aeabi_dmul+0x48>
 800198c:	0005      	movs	r5, r0
 800198e:	4325      	orrs	r5, r4
 8001990:	d126      	bne.n	80019e0 <__aeabi_dmul+0x36c>
 8001992:	2208      	movs	r2, #8
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2302      	movs	r3, #2
 8001998:	2400      	movs	r4, #0
 800199a:	4691      	mov	r9, r2
 800199c:	469b      	mov	fp, r3
 800199e:	e68d      	b.n	80016bc <__aeabi_dmul+0x48>
 80019a0:	4652      	mov	r2, sl
 80019a2:	9b00      	ldr	r3, [sp, #0]
 80019a4:	4332      	orrs	r2, r6
 80019a6:	d110      	bne.n	80019ca <__aeabi_dmul+0x356>
 80019a8:	4915      	ldr	r1, [pc, #84]	; (8001a00 <__aeabi_dmul+0x38c>)
 80019aa:	2600      	movs	r6, #0
 80019ac:	468c      	mov	ip, r1
 80019ae:	4463      	add	r3, ip
 80019b0:	4649      	mov	r1, r9
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	2302      	movs	r3, #2
 80019b6:	4319      	orrs	r1, r3
 80019b8:	4689      	mov	r9, r1
 80019ba:	2002      	movs	r0, #2
 80019bc:	e69d      	b.n	80016fa <__aeabi_dmul+0x86>
 80019be:	465b      	mov	r3, fp
 80019c0:	9701      	str	r7, [sp, #4]
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d000      	beq.n	80019c8 <__aeabi_dmul+0x354>
 80019c6:	e6ad      	b.n	8001724 <__aeabi_dmul+0xb0>
 80019c8:	e6c3      	b.n	8001752 <__aeabi_dmul+0xde>
 80019ca:	4a0d      	ldr	r2, [pc, #52]	; (8001a00 <__aeabi_dmul+0x38c>)
 80019cc:	2003      	movs	r0, #3
 80019ce:	4694      	mov	ip, r2
 80019d0:	4463      	add	r3, ip
 80019d2:	464a      	mov	r2, r9
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	2303      	movs	r3, #3
 80019d8:	431a      	orrs	r2, r3
 80019da:	4691      	mov	r9, r2
 80019dc:	4652      	mov	r2, sl
 80019de:	e68c      	b.n	80016fa <__aeabi_dmul+0x86>
 80019e0:	220c      	movs	r2, #12
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	2303      	movs	r3, #3
 80019e6:	0005      	movs	r5, r0
 80019e8:	4691      	mov	r9, r2
 80019ea:	469b      	mov	fp, r3
 80019ec:	e666      	b.n	80016bc <__aeabi_dmul+0x48>
 80019ee:	2304      	movs	r3, #4
 80019f0:	4699      	mov	r9, r3
 80019f2:	2300      	movs	r3, #0
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	3301      	adds	r3, #1
 80019f8:	2400      	movs	r4, #0
 80019fa:	469b      	mov	fp, r3
 80019fc:	e65e      	b.n	80016bc <__aeabi_dmul+0x48>
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	000007ff 	.word	0x000007ff
 8001a04:	fffffc01 	.word	0xfffffc01
 8001a08:	0800ad30 	.word	0x0800ad30
 8001a0c:	000003ff 	.word	0x000003ff
 8001a10:	feffffff 	.word	0xfeffffff
 8001a14:	000007fe 	.word	0x000007fe
 8001a18:	fffffc0d 	.word	0xfffffc0d
 8001a1c:	4649      	mov	r1, r9
 8001a1e:	2301      	movs	r3, #1
 8001a20:	4319      	orrs	r1, r3
 8001a22:	4689      	mov	r9, r1
 8001a24:	2600      	movs	r6, #0
 8001a26:	2001      	movs	r0, #1
 8001a28:	e667      	b.n	80016fa <__aeabi_dmul+0x86>
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	2480      	movs	r4, #128	; 0x80
 8001a2e:	2500      	movs	r5, #0
 8001a30:	4a43      	ldr	r2, [pc, #268]	; (8001b40 <__aeabi_dmul+0x4cc>)
 8001a32:	9301      	str	r3, [sp, #4]
 8001a34:	0324      	lsls	r4, r4, #12
 8001a36:	e67e      	b.n	8001736 <__aeabi_dmul+0xc2>
 8001a38:	2001      	movs	r0, #1
 8001a3a:	1a40      	subs	r0, r0, r1
 8001a3c:	2838      	cmp	r0, #56	; 0x38
 8001a3e:	dd00      	ble.n	8001a42 <__aeabi_dmul+0x3ce>
 8001a40:	e676      	b.n	8001730 <__aeabi_dmul+0xbc>
 8001a42:	281f      	cmp	r0, #31
 8001a44:	dd5b      	ble.n	8001afe <__aeabi_dmul+0x48a>
 8001a46:	221f      	movs	r2, #31
 8001a48:	0023      	movs	r3, r4
 8001a4a:	4252      	negs	r2, r2
 8001a4c:	1a51      	subs	r1, r2, r1
 8001a4e:	40cb      	lsrs	r3, r1
 8001a50:	0019      	movs	r1, r3
 8001a52:	2820      	cmp	r0, #32
 8001a54:	d003      	beq.n	8001a5e <__aeabi_dmul+0x3ea>
 8001a56:	4a3b      	ldr	r2, [pc, #236]	; (8001b44 <__aeabi_dmul+0x4d0>)
 8001a58:	4462      	add	r2, ip
 8001a5a:	4094      	lsls	r4, r2
 8001a5c:	4325      	orrs	r5, r4
 8001a5e:	1e6a      	subs	r2, r5, #1
 8001a60:	4195      	sbcs	r5, r2
 8001a62:	002a      	movs	r2, r5
 8001a64:	430a      	orrs	r2, r1
 8001a66:	2107      	movs	r1, #7
 8001a68:	000d      	movs	r5, r1
 8001a6a:	2400      	movs	r4, #0
 8001a6c:	4015      	ands	r5, r2
 8001a6e:	4211      	tst	r1, r2
 8001a70:	d05b      	beq.n	8001b2a <__aeabi_dmul+0x4b6>
 8001a72:	210f      	movs	r1, #15
 8001a74:	2400      	movs	r4, #0
 8001a76:	4011      	ands	r1, r2
 8001a78:	2904      	cmp	r1, #4
 8001a7a:	d053      	beq.n	8001b24 <__aeabi_dmul+0x4b0>
 8001a7c:	1d11      	adds	r1, r2, #4
 8001a7e:	4291      	cmp	r1, r2
 8001a80:	4192      	sbcs	r2, r2
 8001a82:	4252      	negs	r2, r2
 8001a84:	18a4      	adds	r4, r4, r2
 8001a86:	000a      	movs	r2, r1
 8001a88:	0223      	lsls	r3, r4, #8
 8001a8a:	d54b      	bpl.n	8001b24 <__aeabi_dmul+0x4b0>
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	2400      	movs	r4, #0
 8001a90:	2500      	movs	r5, #0
 8001a92:	e650      	b.n	8001736 <__aeabi_dmul+0xc2>
 8001a94:	2380      	movs	r3, #128	; 0x80
 8001a96:	031b      	lsls	r3, r3, #12
 8001a98:	421c      	tst	r4, r3
 8001a9a:	d009      	beq.n	8001ab0 <__aeabi_dmul+0x43c>
 8001a9c:	421e      	tst	r6, r3
 8001a9e:	d107      	bne.n	8001ab0 <__aeabi_dmul+0x43c>
 8001aa0:	4333      	orrs	r3, r6
 8001aa2:	031c      	lsls	r4, r3, #12
 8001aa4:	4643      	mov	r3, r8
 8001aa6:	0015      	movs	r5, r2
 8001aa8:	0b24      	lsrs	r4, r4, #12
 8001aaa:	4a25      	ldr	r2, [pc, #148]	; (8001b40 <__aeabi_dmul+0x4cc>)
 8001aac:	9301      	str	r3, [sp, #4]
 8001aae:	e642      	b.n	8001736 <__aeabi_dmul+0xc2>
 8001ab0:	2280      	movs	r2, #128	; 0x80
 8001ab2:	0312      	lsls	r2, r2, #12
 8001ab4:	4314      	orrs	r4, r2
 8001ab6:	0324      	lsls	r4, r4, #12
 8001ab8:	4a21      	ldr	r2, [pc, #132]	; (8001b40 <__aeabi_dmul+0x4cc>)
 8001aba:	0b24      	lsrs	r4, r4, #12
 8001abc:	9701      	str	r7, [sp, #4]
 8001abe:	e63a      	b.n	8001736 <__aeabi_dmul+0xc2>
 8001ac0:	f000 fd50 	bl	8002564 <__clzsi2>
 8001ac4:	0001      	movs	r1, r0
 8001ac6:	0002      	movs	r2, r0
 8001ac8:	3115      	adds	r1, #21
 8001aca:	3220      	adds	r2, #32
 8001acc:	291c      	cmp	r1, #28
 8001ace:	dc00      	bgt.n	8001ad2 <__aeabi_dmul+0x45e>
 8001ad0:	e74b      	b.n	800196a <__aeabi_dmul+0x2f6>
 8001ad2:	0034      	movs	r4, r6
 8001ad4:	3808      	subs	r0, #8
 8001ad6:	2500      	movs	r5, #0
 8001ad8:	4084      	lsls	r4, r0
 8001ada:	e750      	b.n	800197e <__aeabi_dmul+0x30a>
 8001adc:	f000 fd42 	bl	8002564 <__clzsi2>
 8001ae0:	0003      	movs	r3, r0
 8001ae2:	001a      	movs	r2, r3
 8001ae4:	3215      	adds	r2, #21
 8001ae6:	3020      	adds	r0, #32
 8001ae8:	2a1c      	cmp	r2, #28
 8001aea:	dc00      	bgt.n	8001aee <__aeabi_dmul+0x47a>
 8001aec:	e71e      	b.n	800192c <__aeabi_dmul+0x2b8>
 8001aee:	4656      	mov	r6, sl
 8001af0:	3b08      	subs	r3, #8
 8001af2:	2200      	movs	r2, #0
 8001af4:	409e      	lsls	r6, r3
 8001af6:	e723      	b.n	8001940 <__aeabi_dmul+0x2cc>
 8001af8:	9b00      	ldr	r3, [sp, #0]
 8001afa:	469c      	mov	ip, r3
 8001afc:	e6e6      	b.n	80018cc <__aeabi_dmul+0x258>
 8001afe:	4912      	ldr	r1, [pc, #72]	; (8001b48 <__aeabi_dmul+0x4d4>)
 8001b00:	0022      	movs	r2, r4
 8001b02:	4461      	add	r1, ip
 8001b04:	002e      	movs	r6, r5
 8001b06:	408d      	lsls	r5, r1
 8001b08:	408a      	lsls	r2, r1
 8001b0a:	40c6      	lsrs	r6, r0
 8001b0c:	1e69      	subs	r1, r5, #1
 8001b0e:	418d      	sbcs	r5, r1
 8001b10:	4332      	orrs	r2, r6
 8001b12:	432a      	orrs	r2, r5
 8001b14:	40c4      	lsrs	r4, r0
 8001b16:	0753      	lsls	r3, r2, #29
 8001b18:	d0b6      	beq.n	8001a88 <__aeabi_dmul+0x414>
 8001b1a:	210f      	movs	r1, #15
 8001b1c:	4011      	ands	r1, r2
 8001b1e:	2904      	cmp	r1, #4
 8001b20:	d1ac      	bne.n	8001a7c <__aeabi_dmul+0x408>
 8001b22:	e7b1      	b.n	8001a88 <__aeabi_dmul+0x414>
 8001b24:	0765      	lsls	r5, r4, #29
 8001b26:	0264      	lsls	r4, r4, #9
 8001b28:	0b24      	lsrs	r4, r4, #12
 8001b2a:	08d2      	lsrs	r2, r2, #3
 8001b2c:	4315      	orrs	r5, r2
 8001b2e:	2200      	movs	r2, #0
 8001b30:	e601      	b.n	8001736 <__aeabi_dmul+0xc2>
 8001b32:	2280      	movs	r2, #128	; 0x80
 8001b34:	0312      	lsls	r2, r2, #12
 8001b36:	4314      	orrs	r4, r2
 8001b38:	0324      	lsls	r4, r4, #12
 8001b3a:	4a01      	ldr	r2, [pc, #4]	; (8001b40 <__aeabi_dmul+0x4cc>)
 8001b3c:	0b24      	lsrs	r4, r4, #12
 8001b3e:	e5fa      	b.n	8001736 <__aeabi_dmul+0xc2>
 8001b40:	000007ff 	.word	0x000007ff
 8001b44:	0000043e 	.word	0x0000043e
 8001b48:	0000041e 	.word	0x0000041e

08001b4c <__aeabi_dsub>:
 8001b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b4e:	4657      	mov	r7, sl
 8001b50:	464e      	mov	r6, r9
 8001b52:	4645      	mov	r5, r8
 8001b54:	46de      	mov	lr, fp
 8001b56:	b5e0      	push	{r5, r6, r7, lr}
 8001b58:	001e      	movs	r6, r3
 8001b5a:	0017      	movs	r7, r2
 8001b5c:	004a      	lsls	r2, r1, #1
 8001b5e:	030b      	lsls	r3, r1, #12
 8001b60:	0d52      	lsrs	r2, r2, #21
 8001b62:	0a5b      	lsrs	r3, r3, #9
 8001b64:	4690      	mov	r8, r2
 8001b66:	0f42      	lsrs	r2, r0, #29
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	0fcd      	lsrs	r5, r1, #31
 8001b6c:	4ccd      	ldr	r4, [pc, #820]	; (8001ea4 <__aeabi_dsub+0x358>)
 8001b6e:	0331      	lsls	r1, r6, #12
 8001b70:	00c3      	lsls	r3, r0, #3
 8001b72:	4694      	mov	ip, r2
 8001b74:	0070      	lsls	r0, r6, #1
 8001b76:	0f7a      	lsrs	r2, r7, #29
 8001b78:	0a49      	lsrs	r1, r1, #9
 8001b7a:	00ff      	lsls	r7, r7, #3
 8001b7c:	469a      	mov	sl, r3
 8001b7e:	46b9      	mov	r9, r7
 8001b80:	0d40      	lsrs	r0, r0, #21
 8001b82:	0ff6      	lsrs	r6, r6, #31
 8001b84:	4311      	orrs	r1, r2
 8001b86:	42a0      	cmp	r0, r4
 8001b88:	d100      	bne.n	8001b8c <__aeabi_dsub+0x40>
 8001b8a:	e0b1      	b.n	8001cf0 <__aeabi_dsub+0x1a4>
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	4056      	eors	r6, r2
 8001b90:	46b3      	mov	fp, r6
 8001b92:	42b5      	cmp	r5, r6
 8001b94:	d100      	bne.n	8001b98 <__aeabi_dsub+0x4c>
 8001b96:	e088      	b.n	8001caa <__aeabi_dsub+0x15e>
 8001b98:	4642      	mov	r2, r8
 8001b9a:	1a12      	subs	r2, r2, r0
 8001b9c:	2a00      	cmp	r2, #0
 8001b9e:	dc00      	bgt.n	8001ba2 <__aeabi_dsub+0x56>
 8001ba0:	e0ae      	b.n	8001d00 <__aeabi_dsub+0x1b4>
 8001ba2:	2800      	cmp	r0, #0
 8001ba4:	d100      	bne.n	8001ba8 <__aeabi_dsub+0x5c>
 8001ba6:	e0c1      	b.n	8001d2c <__aeabi_dsub+0x1e0>
 8001ba8:	48be      	ldr	r0, [pc, #760]	; (8001ea4 <__aeabi_dsub+0x358>)
 8001baa:	4580      	cmp	r8, r0
 8001bac:	d100      	bne.n	8001bb0 <__aeabi_dsub+0x64>
 8001bae:	e151      	b.n	8001e54 <__aeabi_dsub+0x308>
 8001bb0:	2080      	movs	r0, #128	; 0x80
 8001bb2:	0400      	lsls	r0, r0, #16
 8001bb4:	4301      	orrs	r1, r0
 8001bb6:	2a38      	cmp	r2, #56	; 0x38
 8001bb8:	dd00      	ble.n	8001bbc <__aeabi_dsub+0x70>
 8001bba:	e17b      	b.n	8001eb4 <__aeabi_dsub+0x368>
 8001bbc:	2a1f      	cmp	r2, #31
 8001bbe:	dd00      	ble.n	8001bc2 <__aeabi_dsub+0x76>
 8001bc0:	e1ee      	b.n	8001fa0 <__aeabi_dsub+0x454>
 8001bc2:	2020      	movs	r0, #32
 8001bc4:	003e      	movs	r6, r7
 8001bc6:	1a80      	subs	r0, r0, r2
 8001bc8:	000c      	movs	r4, r1
 8001bca:	40d6      	lsrs	r6, r2
 8001bcc:	40d1      	lsrs	r1, r2
 8001bce:	4087      	lsls	r7, r0
 8001bd0:	4662      	mov	r2, ip
 8001bd2:	4084      	lsls	r4, r0
 8001bd4:	1a52      	subs	r2, r2, r1
 8001bd6:	1e78      	subs	r0, r7, #1
 8001bd8:	4187      	sbcs	r7, r0
 8001bda:	4694      	mov	ip, r2
 8001bdc:	4334      	orrs	r4, r6
 8001bde:	4327      	orrs	r7, r4
 8001be0:	1bdc      	subs	r4, r3, r7
 8001be2:	42a3      	cmp	r3, r4
 8001be4:	419b      	sbcs	r3, r3
 8001be6:	4662      	mov	r2, ip
 8001be8:	425b      	negs	r3, r3
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	4699      	mov	r9, r3
 8001bee:	464b      	mov	r3, r9
 8001bf0:	021b      	lsls	r3, r3, #8
 8001bf2:	d400      	bmi.n	8001bf6 <__aeabi_dsub+0xaa>
 8001bf4:	e118      	b.n	8001e28 <__aeabi_dsub+0x2dc>
 8001bf6:	464b      	mov	r3, r9
 8001bf8:	0258      	lsls	r0, r3, #9
 8001bfa:	0a43      	lsrs	r3, r0, #9
 8001bfc:	4699      	mov	r9, r3
 8001bfe:	464b      	mov	r3, r9
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d100      	bne.n	8001c06 <__aeabi_dsub+0xba>
 8001c04:	e137      	b.n	8001e76 <__aeabi_dsub+0x32a>
 8001c06:	4648      	mov	r0, r9
 8001c08:	f000 fcac 	bl	8002564 <__clzsi2>
 8001c0c:	0001      	movs	r1, r0
 8001c0e:	3908      	subs	r1, #8
 8001c10:	2320      	movs	r3, #32
 8001c12:	0022      	movs	r2, r4
 8001c14:	4648      	mov	r0, r9
 8001c16:	1a5b      	subs	r3, r3, r1
 8001c18:	40da      	lsrs	r2, r3
 8001c1a:	4088      	lsls	r0, r1
 8001c1c:	408c      	lsls	r4, r1
 8001c1e:	4643      	mov	r3, r8
 8001c20:	4310      	orrs	r0, r2
 8001c22:	4588      	cmp	r8, r1
 8001c24:	dd00      	ble.n	8001c28 <__aeabi_dsub+0xdc>
 8001c26:	e136      	b.n	8001e96 <__aeabi_dsub+0x34a>
 8001c28:	1ac9      	subs	r1, r1, r3
 8001c2a:	1c4b      	adds	r3, r1, #1
 8001c2c:	2b1f      	cmp	r3, #31
 8001c2e:	dd00      	ble.n	8001c32 <__aeabi_dsub+0xe6>
 8001c30:	e0ea      	b.n	8001e08 <__aeabi_dsub+0x2bc>
 8001c32:	2220      	movs	r2, #32
 8001c34:	0026      	movs	r6, r4
 8001c36:	1ad2      	subs	r2, r2, r3
 8001c38:	0001      	movs	r1, r0
 8001c3a:	4094      	lsls	r4, r2
 8001c3c:	40de      	lsrs	r6, r3
 8001c3e:	40d8      	lsrs	r0, r3
 8001c40:	2300      	movs	r3, #0
 8001c42:	4091      	lsls	r1, r2
 8001c44:	1e62      	subs	r2, r4, #1
 8001c46:	4194      	sbcs	r4, r2
 8001c48:	4681      	mov	r9, r0
 8001c4a:	4698      	mov	r8, r3
 8001c4c:	4331      	orrs	r1, r6
 8001c4e:	430c      	orrs	r4, r1
 8001c50:	0763      	lsls	r3, r4, #29
 8001c52:	d009      	beq.n	8001c68 <__aeabi_dsub+0x11c>
 8001c54:	230f      	movs	r3, #15
 8001c56:	4023      	ands	r3, r4
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d005      	beq.n	8001c68 <__aeabi_dsub+0x11c>
 8001c5c:	1d23      	adds	r3, r4, #4
 8001c5e:	42a3      	cmp	r3, r4
 8001c60:	41a4      	sbcs	r4, r4
 8001c62:	4264      	negs	r4, r4
 8001c64:	44a1      	add	r9, r4
 8001c66:	001c      	movs	r4, r3
 8001c68:	464b      	mov	r3, r9
 8001c6a:	021b      	lsls	r3, r3, #8
 8001c6c:	d400      	bmi.n	8001c70 <__aeabi_dsub+0x124>
 8001c6e:	e0de      	b.n	8001e2e <__aeabi_dsub+0x2e2>
 8001c70:	4641      	mov	r1, r8
 8001c72:	4b8c      	ldr	r3, [pc, #560]	; (8001ea4 <__aeabi_dsub+0x358>)
 8001c74:	3101      	adds	r1, #1
 8001c76:	4299      	cmp	r1, r3
 8001c78:	d100      	bne.n	8001c7c <__aeabi_dsub+0x130>
 8001c7a:	e0e7      	b.n	8001e4c <__aeabi_dsub+0x300>
 8001c7c:	464b      	mov	r3, r9
 8001c7e:	488a      	ldr	r0, [pc, #552]	; (8001ea8 <__aeabi_dsub+0x35c>)
 8001c80:	08e4      	lsrs	r4, r4, #3
 8001c82:	4003      	ands	r3, r0
 8001c84:	0018      	movs	r0, r3
 8001c86:	0549      	lsls	r1, r1, #21
 8001c88:	075b      	lsls	r3, r3, #29
 8001c8a:	0240      	lsls	r0, r0, #9
 8001c8c:	4323      	orrs	r3, r4
 8001c8e:	0d4a      	lsrs	r2, r1, #21
 8001c90:	0b04      	lsrs	r4, r0, #12
 8001c92:	0512      	lsls	r2, r2, #20
 8001c94:	07ed      	lsls	r5, r5, #31
 8001c96:	4322      	orrs	r2, r4
 8001c98:	432a      	orrs	r2, r5
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	0011      	movs	r1, r2
 8001c9e:	bcf0      	pop	{r4, r5, r6, r7}
 8001ca0:	46bb      	mov	fp, r7
 8001ca2:	46b2      	mov	sl, r6
 8001ca4:	46a9      	mov	r9, r5
 8001ca6:	46a0      	mov	r8, r4
 8001ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001caa:	4642      	mov	r2, r8
 8001cac:	1a12      	subs	r2, r2, r0
 8001cae:	2a00      	cmp	r2, #0
 8001cb0:	dd52      	ble.n	8001d58 <__aeabi_dsub+0x20c>
 8001cb2:	2800      	cmp	r0, #0
 8001cb4:	d100      	bne.n	8001cb8 <__aeabi_dsub+0x16c>
 8001cb6:	e09c      	b.n	8001df2 <__aeabi_dsub+0x2a6>
 8001cb8:	45a0      	cmp	r8, r4
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dsub+0x172>
 8001cbc:	e0ca      	b.n	8001e54 <__aeabi_dsub+0x308>
 8001cbe:	2080      	movs	r0, #128	; 0x80
 8001cc0:	0400      	lsls	r0, r0, #16
 8001cc2:	4301      	orrs	r1, r0
 8001cc4:	2a38      	cmp	r2, #56	; 0x38
 8001cc6:	dd00      	ble.n	8001cca <__aeabi_dsub+0x17e>
 8001cc8:	e149      	b.n	8001f5e <__aeabi_dsub+0x412>
 8001cca:	2a1f      	cmp	r2, #31
 8001ccc:	dc00      	bgt.n	8001cd0 <__aeabi_dsub+0x184>
 8001cce:	e197      	b.n	8002000 <__aeabi_dsub+0x4b4>
 8001cd0:	0010      	movs	r0, r2
 8001cd2:	000e      	movs	r6, r1
 8001cd4:	3820      	subs	r0, #32
 8001cd6:	40c6      	lsrs	r6, r0
 8001cd8:	2a20      	cmp	r2, #32
 8001cda:	d004      	beq.n	8001ce6 <__aeabi_dsub+0x19a>
 8001cdc:	2040      	movs	r0, #64	; 0x40
 8001cde:	1a82      	subs	r2, r0, r2
 8001ce0:	4091      	lsls	r1, r2
 8001ce2:	430f      	orrs	r7, r1
 8001ce4:	46b9      	mov	r9, r7
 8001ce6:	464c      	mov	r4, r9
 8001ce8:	1e62      	subs	r2, r4, #1
 8001cea:	4194      	sbcs	r4, r2
 8001cec:	4334      	orrs	r4, r6
 8001cee:	e13a      	b.n	8001f66 <__aeabi_dsub+0x41a>
 8001cf0:	000a      	movs	r2, r1
 8001cf2:	433a      	orrs	r2, r7
 8001cf4:	d028      	beq.n	8001d48 <__aeabi_dsub+0x1fc>
 8001cf6:	46b3      	mov	fp, r6
 8001cf8:	42b5      	cmp	r5, r6
 8001cfa:	d02b      	beq.n	8001d54 <__aeabi_dsub+0x208>
 8001cfc:	4a6b      	ldr	r2, [pc, #428]	; (8001eac <__aeabi_dsub+0x360>)
 8001cfe:	4442      	add	r2, r8
 8001d00:	2a00      	cmp	r2, #0
 8001d02:	d05d      	beq.n	8001dc0 <__aeabi_dsub+0x274>
 8001d04:	4642      	mov	r2, r8
 8001d06:	4644      	mov	r4, r8
 8001d08:	1a82      	subs	r2, r0, r2
 8001d0a:	2c00      	cmp	r4, #0
 8001d0c:	d000      	beq.n	8001d10 <__aeabi_dsub+0x1c4>
 8001d0e:	e0f5      	b.n	8001efc <__aeabi_dsub+0x3b0>
 8001d10:	4665      	mov	r5, ip
 8001d12:	431d      	orrs	r5, r3
 8001d14:	d100      	bne.n	8001d18 <__aeabi_dsub+0x1cc>
 8001d16:	e19c      	b.n	8002052 <__aeabi_dsub+0x506>
 8001d18:	1e55      	subs	r5, r2, #1
 8001d1a:	2a01      	cmp	r2, #1
 8001d1c:	d100      	bne.n	8001d20 <__aeabi_dsub+0x1d4>
 8001d1e:	e1fb      	b.n	8002118 <__aeabi_dsub+0x5cc>
 8001d20:	4c60      	ldr	r4, [pc, #384]	; (8001ea4 <__aeabi_dsub+0x358>)
 8001d22:	42a2      	cmp	r2, r4
 8001d24:	d100      	bne.n	8001d28 <__aeabi_dsub+0x1dc>
 8001d26:	e1bd      	b.n	80020a4 <__aeabi_dsub+0x558>
 8001d28:	002a      	movs	r2, r5
 8001d2a:	e0f0      	b.n	8001f0e <__aeabi_dsub+0x3c2>
 8001d2c:	0008      	movs	r0, r1
 8001d2e:	4338      	orrs	r0, r7
 8001d30:	d100      	bne.n	8001d34 <__aeabi_dsub+0x1e8>
 8001d32:	e0c3      	b.n	8001ebc <__aeabi_dsub+0x370>
 8001d34:	1e50      	subs	r0, r2, #1
 8001d36:	2a01      	cmp	r2, #1
 8001d38:	d100      	bne.n	8001d3c <__aeabi_dsub+0x1f0>
 8001d3a:	e1a8      	b.n	800208e <__aeabi_dsub+0x542>
 8001d3c:	4c59      	ldr	r4, [pc, #356]	; (8001ea4 <__aeabi_dsub+0x358>)
 8001d3e:	42a2      	cmp	r2, r4
 8001d40:	d100      	bne.n	8001d44 <__aeabi_dsub+0x1f8>
 8001d42:	e087      	b.n	8001e54 <__aeabi_dsub+0x308>
 8001d44:	0002      	movs	r2, r0
 8001d46:	e736      	b.n	8001bb6 <__aeabi_dsub+0x6a>
 8001d48:	2201      	movs	r2, #1
 8001d4a:	4056      	eors	r6, r2
 8001d4c:	46b3      	mov	fp, r6
 8001d4e:	42b5      	cmp	r5, r6
 8001d50:	d000      	beq.n	8001d54 <__aeabi_dsub+0x208>
 8001d52:	e721      	b.n	8001b98 <__aeabi_dsub+0x4c>
 8001d54:	4a55      	ldr	r2, [pc, #340]	; (8001eac <__aeabi_dsub+0x360>)
 8001d56:	4442      	add	r2, r8
 8001d58:	2a00      	cmp	r2, #0
 8001d5a:	d100      	bne.n	8001d5e <__aeabi_dsub+0x212>
 8001d5c:	e0b5      	b.n	8001eca <__aeabi_dsub+0x37e>
 8001d5e:	4642      	mov	r2, r8
 8001d60:	4644      	mov	r4, r8
 8001d62:	1a82      	subs	r2, r0, r2
 8001d64:	2c00      	cmp	r4, #0
 8001d66:	d100      	bne.n	8001d6a <__aeabi_dsub+0x21e>
 8001d68:	e138      	b.n	8001fdc <__aeabi_dsub+0x490>
 8001d6a:	4e4e      	ldr	r6, [pc, #312]	; (8001ea4 <__aeabi_dsub+0x358>)
 8001d6c:	42b0      	cmp	r0, r6
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x226>
 8001d70:	e1de      	b.n	8002130 <__aeabi_dsub+0x5e4>
 8001d72:	2680      	movs	r6, #128	; 0x80
 8001d74:	4664      	mov	r4, ip
 8001d76:	0436      	lsls	r6, r6, #16
 8001d78:	4334      	orrs	r4, r6
 8001d7a:	46a4      	mov	ip, r4
 8001d7c:	2a38      	cmp	r2, #56	; 0x38
 8001d7e:	dd00      	ble.n	8001d82 <__aeabi_dsub+0x236>
 8001d80:	e196      	b.n	80020b0 <__aeabi_dsub+0x564>
 8001d82:	2a1f      	cmp	r2, #31
 8001d84:	dd00      	ble.n	8001d88 <__aeabi_dsub+0x23c>
 8001d86:	e224      	b.n	80021d2 <__aeabi_dsub+0x686>
 8001d88:	2620      	movs	r6, #32
 8001d8a:	1ab4      	subs	r4, r6, r2
 8001d8c:	46a2      	mov	sl, r4
 8001d8e:	4664      	mov	r4, ip
 8001d90:	4656      	mov	r6, sl
 8001d92:	40b4      	lsls	r4, r6
 8001d94:	46a1      	mov	r9, r4
 8001d96:	001c      	movs	r4, r3
 8001d98:	464e      	mov	r6, r9
 8001d9a:	40d4      	lsrs	r4, r2
 8001d9c:	4326      	orrs	r6, r4
 8001d9e:	0034      	movs	r4, r6
 8001da0:	4656      	mov	r6, sl
 8001da2:	40b3      	lsls	r3, r6
 8001da4:	1e5e      	subs	r6, r3, #1
 8001da6:	41b3      	sbcs	r3, r6
 8001da8:	431c      	orrs	r4, r3
 8001daa:	4663      	mov	r3, ip
 8001dac:	40d3      	lsrs	r3, r2
 8001dae:	18c9      	adds	r1, r1, r3
 8001db0:	19e4      	adds	r4, r4, r7
 8001db2:	42bc      	cmp	r4, r7
 8001db4:	41bf      	sbcs	r7, r7
 8001db6:	427f      	negs	r7, r7
 8001db8:	46b9      	mov	r9, r7
 8001dba:	4680      	mov	r8, r0
 8001dbc:	4489      	add	r9, r1
 8001dbe:	e0d8      	b.n	8001f72 <__aeabi_dsub+0x426>
 8001dc0:	4640      	mov	r0, r8
 8001dc2:	4c3b      	ldr	r4, [pc, #236]	; (8001eb0 <__aeabi_dsub+0x364>)
 8001dc4:	3001      	adds	r0, #1
 8001dc6:	4220      	tst	r0, r4
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x280>
 8001dca:	e0b4      	b.n	8001f36 <__aeabi_dsub+0x3ea>
 8001dcc:	4640      	mov	r0, r8
 8001dce:	2800      	cmp	r0, #0
 8001dd0:	d000      	beq.n	8001dd4 <__aeabi_dsub+0x288>
 8001dd2:	e144      	b.n	800205e <__aeabi_dsub+0x512>
 8001dd4:	4660      	mov	r0, ip
 8001dd6:	4318      	orrs	r0, r3
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_dsub+0x290>
 8001dda:	e190      	b.n	80020fe <__aeabi_dsub+0x5b2>
 8001ddc:	0008      	movs	r0, r1
 8001dde:	4338      	orrs	r0, r7
 8001de0:	d000      	beq.n	8001de4 <__aeabi_dsub+0x298>
 8001de2:	e1aa      	b.n	800213a <__aeabi_dsub+0x5ee>
 8001de4:	4661      	mov	r1, ip
 8001de6:	08db      	lsrs	r3, r3, #3
 8001de8:	0749      	lsls	r1, r1, #29
 8001dea:	430b      	orrs	r3, r1
 8001dec:	4661      	mov	r1, ip
 8001dee:	08cc      	lsrs	r4, r1, #3
 8001df0:	e027      	b.n	8001e42 <__aeabi_dsub+0x2f6>
 8001df2:	0008      	movs	r0, r1
 8001df4:	4338      	orrs	r0, r7
 8001df6:	d061      	beq.n	8001ebc <__aeabi_dsub+0x370>
 8001df8:	1e50      	subs	r0, r2, #1
 8001dfa:	2a01      	cmp	r2, #1
 8001dfc:	d100      	bne.n	8001e00 <__aeabi_dsub+0x2b4>
 8001dfe:	e139      	b.n	8002074 <__aeabi_dsub+0x528>
 8001e00:	42a2      	cmp	r2, r4
 8001e02:	d027      	beq.n	8001e54 <__aeabi_dsub+0x308>
 8001e04:	0002      	movs	r2, r0
 8001e06:	e75d      	b.n	8001cc4 <__aeabi_dsub+0x178>
 8001e08:	0002      	movs	r2, r0
 8001e0a:	391f      	subs	r1, #31
 8001e0c:	40ca      	lsrs	r2, r1
 8001e0e:	0011      	movs	r1, r2
 8001e10:	2b20      	cmp	r3, #32
 8001e12:	d003      	beq.n	8001e1c <__aeabi_dsub+0x2d0>
 8001e14:	2240      	movs	r2, #64	; 0x40
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	4098      	lsls	r0, r3
 8001e1a:	4304      	orrs	r4, r0
 8001e1c:	1e63      	subs	r3, r4, #1
 8001e1e:	419c      	sbcs	r4, r3
 8001e20:	2300      	movs	r3, #0
 8001e22:	4699      	mov	r9, r3
 8001e24:	4698      	mov	r8, r3
 8001e26:	430c      	orrs	r4, r1
 8001e28:	0763      	lsls	r3, r4, #29
 8001e2a:	d000      	beq.n	8001e2e <__aeabi_dsub+0x2e2>
 8001e2c:	e712      	b.n	8001c54 <__aeabi_dsub+0x108>
 8001e2e:	464b      	mov	r3, r9
 8001e30:	464a      	mov	r2, r9
 8001e32:	08e4      	lsrs	r4, r4, #3
 8001e34:	075b      	lsls	r3, r3, #29
 8001e36:	4323      	orrs	r3, r4
 8001e38:	08d4      	lsrs	r4, r2, #3
 8001e3a:	4642      	mov	r2, r8
 8001e3c:	4919      	ldr	r1, [pc, #100]	; (8001ea4 <__aeabi_dsub+0x358>)
 8001e3e:	428a      	cmp	r2, r1
 8001e40:	d00e      	beq.n	8001e60 <__aeabi_dsub+0x314>
 8001e42:	0324      	lsls	r4, r4, #12
 8001e44:	0552      	lsls	r2, r2, #21
 8001e46:	0b24      	lsrs	r4, r4, #12
 8001e48:	0d52      	lsrs	r2, r2, #21
 8001e4a:	e722      	b.n	8001c92 <__aeabi_dsub+0x146>
 8001e4c:	000a      	movs	r2, r1
 8001e4e:	2400      	movs	r4, #0
 8001e50:	2300      	movs	r3, #0
 8001e52:	e71e      	b.n	8001c92 <__aeabi_dsub+0x146>
 8001e54:	08db      	lsrs	r3, r3, #3
 8001e56:	4662      	mov	r2, ip
 8001e58:	0752      	lsls	r2, r2, #29
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	4662      	mov	r2, ip
 8001e5e:	08d4      	lsrs	r4, r2, #3
 8001e60:	001a      	movs	r2, r3
 8001e62:	4322      	orrs	r2, r4
 8001e64:	d100      	bne.n	8001e68 <__aeabi_dsub+0x31c>
 8001e66:	e1fc      	b.n	8002262 <__aeabi_dsub+0x716>
 8001e68:	2280      	movs	r2, #128	; 0x80
 8001e6a:	0312      	lsls	r2, r2, #12
 8001e6c:	4314      	orrs	r4, r2
 8001e6e:	0324      	lsls	r4, r4, #12
 8001e70:	4a0c      	ldr	r2, [pc, #48]	; (8001ea4 <__aeabi_dsub+0x358>)
 8001e72:	0b24      	lsrs	r4, r4, #12
 8001e74:	e70d      	b.n	8001c92 <__aeabi_dsub+0x146>
 8001e76:	0020      	movs	r0, r4
 8001e78:	f000 fb74 	bl	8002564 <__clzsi2>
 8001e7c:	0001      	movs	r1, r0
 8001e7e:	3118      	adds	r1, #24
 8001e80:	291f      	cmp	r1, #31
 8001e82:	dc00      	bgt.n	8001e86 <__aeabi_dsub+0x33a>
 8001e84:	e6c4      	b.n	8001c10 <__aeabi_dsub+0xc4>
 8001e86:	3808      	subs	r0, #8
 8001e88:	4084      	lsls	r4, r0
 8001e8a:	4643      	mov	r3, r8
 8001e8c:	0020      	movs	r0, r4
 8001e8e:	2400      	movs	r4, #0
 8001e90:	4588      	cmp	r8, r1
 8001e92:	dc00      	bgt.n	8001e96 <__aeabi_dsub+0x34a>
 8001e94:	e6c8      	b.n	8001c28 <__aeabi_dsub+0xdc>
 8001e96:	4a04      	ldr	r2, [pc, #16]	; (8001ea8 <__aeabi_dsub+0x35c>)
 8001e98:	1a5b      	subs	r3, r3, r1
 8001e9a:	4010      	ands	r0, r2
 8001e9c:	4698      	mov	r8, r3
 8001e9e:	4681      	mov	r9, r0
 8001ea0:	e6d6      	b.n	8001c50 <__aeabi_dsub+0x104>
 8001ea2:	46c0      	nop			; (mov r8, r8)
 8001ea4:	000007ff 	.word	0x000007ff
 8001ea8:	ff7fffff 	.word	0xff7fffff
 8001eac:	fffff801 	.word	0xfffff801
 8001eb0:	000007fe 	.word	0x000007fe
 8001eb4:	430f      	orrs	r7, r1
 8001eb6:	1e7a      	subs	r2, r7, #1
 8001eb8:	4197      	sbcs	r7, r2
 8001eba:	e691      	b.n	8001be0 <__aeabi_dsub+0x94>
 8001ebc:	4661      	mov	r1, ip
 8001ebe:	08db      	lsrs	r3, r3, #3
 8001ec0:	0749      	lsls	r1, r1, #29
 8001ec2:	430b      	orrs	r3, r1
 8001ec4:	4661      	mov	r1, ip
 8001ec6:	08cc      	lsrs	r4, r1, #3
 8001ec8:	e7b8      	b.n	8001e3c <__aeabi_dsub+0x2f0>
 8001eca:	4640      	mov	r0, r8
 8001ecc:	4cd3      	ldr	r4, [pc, #844]	; (800221c <__aeabi_dsub+0x6d0>)
 8001ece:	3001      	adds	r0, #1
 8001ed0:	4220      	tst	r0, r4
 8001ed2:	d000      	beq.n	8001ed6 <__aeabi_dsub+0x38a>
 8001ed4:	e0a2      	b.n	800201c <__aeabi_dsub+0x4d0>
 8001ed6:	4640      	mov	r0, r8
 8001ed8:	2800      	cmp	r0, #0
 8001eda:	d000      	beq.n	8001ede <__aeabi_dsub+0x392>
 8001edc:	e101      	b.n	80020e2 <__aeabi_dsub+0x596>
 8001ede:	4660      	mov	r0, ip
 8001ee0:	4318      	orrs	r0, r3
 8001ee2:	d100      	bne.n	8001ee6 <__aeabi_dsub+0x39a>
 8001ee4:	e15e      	b.n	80021a4 <__aeabi_dsub+0x658>
 8001ee6:	0008      	movs	r0, r1
 8001ee8:	4338      	orrs	r0, r7
 8001eea:	d000      	beq.n	8001eee <__aeabi_dsub+0x3a2>
 8001eec:	e15f      	b.n	80021ae <__aeabi_dsub+0x662>
 8001eee:	4661      	mov	r1, ip
 8001ef0:	08db      	lsrs	r3, r3, #3
 8001ef2:	0749      	lsls	r1, r1, #29
 8001ef4:	430b      	orrs	r3, r1
 8001ef6:	4661      	mov	r1, ip
 8001ef8:	08cc      	lsrs	r4, r1, #3
 8001efa:	e7a2      	b.n	8001e42 <__aeabi_dsub+0x2f6>
 8001efc:	4dc8      	ldr	r5, [pc, #800]	; (8002220 <__aeabi_dsub+0x6d4>)
 8001efe:	42a8      	cmp	r0, r5
 8001f00:	d100      	bne.n	8001f04 <__aeabi_dsub+0x3b8>
 8001f02:	e0cf      	b.n	80020a4 <__aeabi_dsub+0x558>
 8001f04:	2580      	movs	r5, #128	; 0x80
 8001f06:	4664      	mov	r4, ip
 8001f08:	042d      	lsls	r5, r5, #16
 8001f0a:	432c      	orrs	r4, r5
 8001f0c:	46a4      	mov	ip, r4
 8001f0e:	2a38      	cmp	r2, #56	; 0x38
 8001f10:	dc56      	bgt.n	8001fc0 <__aeabi_dsub+0x474>
 8001f12:	2a1f      	cmp	r2, #31
 8001f14:	dd00      	ble.n	8001f18 <__aeabi_dsub+0x3cc>
 8001f16:	e0d1      	b.n	80020bc <__aeabi_dsub+0x570>
 8001f18:	2520      	movs	r5, #32
 8001f1a:	001e      	movs	r6, r3
 8001f1c:	1aad      	subs	r5, r5, r2
 8001f1e:	4664      	mov	r4, ip
 8001f20:	40ab      	lsls	r3, r5
 8001f22:	40ac      	lsls	r4, r5
 8001f24:	40d6      	lsrs	r6, r2
 8001f26:	1e5d      	subs	r5, r3, #1
 8001f28:	41ab      	sbcs	r3, r5
 8001f2a:	4334      	orrs	r4, r6
 8001f2c:	4323      	orrs	r3, r4
 8001f2e:	4664      	mov	r4, ip
 8001f30:	40d4      	lsrs	r4, r2
 8001f32:	1b09      	subs	r1, r1, r4
 8001f34:	e049      	b.n	8001fca <__aeabi_dsub+0x47e>
 8001f36:	4660      	mov	r0, ip
 8001f38:	1bdc      	subs	r4, r3, r7
 8001f3a:	1a46      	subs	r6, r0, r1
 8001f3c:	42a3      	cmp	r3, r4
 8001f3e:	4180      	sbcs	r0, r0
 8001f40:	4240      	negs	r0, r0
 8001f42:	4681      	mov	r9, r0
 8001f44:	0030      	movs	r0, r6
 8001f46:	464e      	mov	r6, r9
 8001f48:	1b80      	subs	r0, r0, r6
 8001f4a:	4681      	mov	r9, r0
 8001f4c:	0200      	lsls	r0, r0, #8
 8001f4e:	d476      	bmi.n	800203e <__aeabi_dsub+0x4f2>
 8001f50:	464b      	mov	r3, r9
 8001f52:	4323      	orrs	r3, r4
 8001f54:	d000      	beq.n	8001f58 <__aeabi_dsub+0x40c>
 8001f56:	e652      	b.n	8001bfe <__aeabi_dsub+0xb2>
 8001f58:	2400      	movs	r4, #0
 8001f5a:	2500      	movs	r5, #0
 8001f5c:	e771      	b.n	8001e42 <__aeabi_dsub+0x2f6>
 8001f5e:	4339      	orrs	r1, r7
 8001f60:	000c      	movs	r4, r1
 8001f62:	1e62      	subs	r2, r4, #1
 8001f64:	4194      	sbcs	r4, r2
 8001f66:	18e4      	adds	r4, r4, r3
 8001f68:	429c      	cmp	r4, r3
 8001f6a:	419b      	sbcs	r3, r3
 8001f6c:	425b      	negs	r3, r3
 8001f6e:	4463      	add	r3, ip
 8001f70:	4699      	mov	r9, r3
 8001f72:	464b      	mov	r3, r9
 8001f74:	021b      	lsls	r3, r3, #8
 8001f76:	d400      	bmi.n	8001f7a <__aeabi_dsub+0x42e>
 8001f78:	e756      	b.n	8001e28 <__aeabi_dsub+0x2dc>
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	469c      	mov	ip, r3
 8001f7e:	4ba8      	ldr	r3, [pc, #672]	; (8002220 <__aeabi_dsub+0x6d4>)
 8001f80:	44e0      	add	r8, ip
 8001f82:	4598      	cmp	r8, r3
 8001f84:	d038      	beq.n	8001ff8 <__aeabi_dsub+0x4ac>
 8001f86:	464b      	mov	r3, r9
 8001f88:	48a6      	ldr	r0, [pc, #664]	; (8002224 <__aeabi_dsub+0x6d8>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	4003      	ands	r3, r0
 8001f8e:	0018      	movs	r0, r3
 8001f90:	0863      	lsrs	r3, r4, #1
 8001f92:	4014      	ands	r4, r2
 8001f94:	431c      	orrs	r4, r3
 8001f96:	07c3      	lsls	r3, r0, #31
 8001f98:	431c      	orrs	r4, r3
 8001f9a:	0843      	lsrs	r3, r0, #1
 8001f9c:	4699      	mov	r9, r3
 8001f9e:	e657      	b.n	8001c50 <__aeabi_dsub+0x104>
 8001fa0:	0010      	movs	r0, r2
 8001fa2:	000e      	movs	r6, r1
 8001fa4:	3820      	subs	r0, #32
 8001fa6:	40c6      	lsrs	r6, r0
 8001fa8:	2a20      	cmp	r2, #32
 8001faa:	d004      	beq.n	8001fb6 <__aeabi_dsub+0x46a>
 8001fac:	2040      	movs	r0, #64	; 0x40
 8001fae:	1a82      	subs	r2, r0, r2
 8001fb0:	4091      	lsls	r1, r2
 8001fb2:	430f      	orrs	r7, r1
 8001fb4:	46b9      	mov	r9, r7
 8001fb6:	464f      	mov	r7, r9
 8001fb8:	1e7a      	subs	r2, r7, #1
 8001fba:	4197      	sbcs	r7, r2
 8001fbc:	4337      	orrs	r7, r6
 8001fbe:	e60f      	b.n	8001be0 <__aeabi_dsub+0x94>
 8001fc0:	4662      	mov	r2, ip
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	0013      	movs	r3, r2
 8001fc6:	1e5a      	subs	r2, r3, #1
 8001fc8:	4193      	sbcs	r3, r2
 8001fca:	1afc      	subs	r4, r7, r3
 8001fcc:	42a7      	cmp	r7, r4
 8001fce:	41bf      	sbcs	r7, r7
 8001fd0:	427f      	negs	r7, r7
 8001fd2:	1bcb      	subs	r3, r1, r7
 8001fd4:	4699      	mov	r9, r3
 8001fd6:	465d      	mov	r5, fp
 8001fd8:	4680      	mov	r8, r0
 8001fda:	e608      	b.n	8001bee <__aeabi_dsub+0xa2>
 8001fdc:	4666      	mov	r6, ip
 8001fde:	431e      	orrs	r6, r3
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x498>
 8001fe2:	e0be      	b.n	8002162 <__aeabi_dsub+0x616>
 8001fe4:	1e56      	subs	r6, r2, #1
 8001fe6:	2a01      	cmp	r2, #1
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x4a0>
 8001fea:	e109      	b.n	8002200 <__aeabi_dsub+0x6b4>
 8001fec:	4c8c      	ldr	r4, [pc, #560]	; (8002220 <__aeabi_dsub+0x6d4>)
 8001fee:	42a2      	cmp	r2, r4
 8001ff0:	d100      	bne.n	8001ff4 <__aeabi_dsub+0x4a8>
 8001ff2:	e119      	b.n	8002228 <__aeabi_dsub+0x6dc>
 8001ff4:	0032      	movs	r2, r6
 8001ff6:	e6c1      	b.n	8001d7c <__aeabi_dsub+0x230>
 8001ff8:	4642      	mov	r2, r8
 8001ffa:	2400      	movs	r4, #0
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	e648      	b.n	8001c92 <__aeabi_dsub+0x146>
 8002000:	2020      	movs	r0, #32
 8002002:	000c      	movs	r4, r1
 8002004:	1a80      	subs	r0, r0, r2
 8002006:	003e      	movs	r6, r7
 8002008:	4087      	lsls	r7, r0
 800200a:	4084      	lsls	r4, r0
 800200c:	40d6      	lsrs	r6, r2
 800200e:	1e78      	subs	r0, r7, #1
 8002010:	4187      	sbcs	r7, r0
 8002012:	40d1      	lsrs	r1, r2
 8002014:	4334      	orrs	r4, r6
 8002016:	433c      	orrs	r4, r7
 8002018:	448c      	add	ip, r1
 800201a:	e7a4      	b.n	8001f66 <__aeabi_dsub+0x41a>
 800201c:	4a80      	ldr	r2, [pc, #512]	; (8002220 <__aeabi_dsub+0x6d4>)
 800201e:	4290      	cmp	r0, r2
 8002020:	d100      	bne.n	8002024 <__aeabi_dsub+0x4d8>
 8002022:	e0e9      	b.n	80021f8 <__aeabi_dsub+0x6ac>
 8002024:	19df      	adds	r7, r3, r7
 8002026:	429f      	cmp	r7, r3
 8002028:	419b      	sbcs	r3, r3
 800202a:	4461      	add	r1, ip
 800202c:	425b      	negs	r3, r3
 800202e:	18c9      	adds	r1, r1, r3
 8002030:	07cc      	lsls	r4, r1, #31
 8002032:	087f      	lsrs	r7, r7, #1
 8002034:	084b      	lsrs	r3, r1, #1
 8002036:	4699      	mov	r9, r3
 8002038:	4680      	mov	r8, r0
 800203a:	433c      	orrs	r4, r7
 800203c:	e6f4      	b.n	8001e28 <__aeabi_dsub+0x2dc>
 800203e:	1afc      	subs	r4, r7, r3
 8002040:	42a7      	cmp	r7, r4
 8002042:	41bf      	sbcs	r7, r7
 8002044:	4663      	mov	r3, ip
 8002046:	427f      	negs	r7, r7
 8002048:	1ac9      	subs	r1, r1, r3
 800204a:	1bcb      	subs	r3, r1, r7
 800204c:	4699      	mov	r9, r3
 800204e:	465d      	mov	r5, fp
 8002050:	e5d5      	b.n	8001bfe <__aeabi_dsub+0xb2>
 8002052:	08ff      	lsrs	r7, r7, #3
 8002054:	074b      	lsls	r3, r1, #29
 8002056:	465d      	mov	r5, fp
 8002058:	433b      	orrs	r3, r7
 800205a:	08cc      	lsrs	r4, r1, #3
 800205c:	e6ee      	b.n	8001e3c <__aeabi_dsub+0x2f0>
 800205e:	4662      	mov	r2, ip
 8002060:	431a      	orrs	r2, r3
 8002062:	d000      	beq.n	8002066 <__aeabi_dsub+0x51a>
 8002064:	e082      	b.n	800216c <__aeabi_dsub+0x620>
 8002066:	000b      	movs	r3, r1
 8002068:	433b      	orrs	r3, r7
 800206a:	d11b      	bne.n	80020a4 <__aeabi_dsub+0x558>
 800206c:	2480      	movs	r4, #128	; 0x80
 800206e:	2500      	movs	r5, #0
 8002070:	0324      	lsls	r4, r4, #12
 8002072:	e6f9      	b.n	8001e68 <__aeabi_dsub+0x31c>
 8002074:	19dc      	adds	r4, r3, r7
 8002076:	429c      	cmp	r4, r3
 8002078:	419b      	sbcs	r3, r3
 800207a:	4461      	add	r1, ip
 800207c:	4689      	mov	r9, r1
 800207e:	425b      	negs	r3, r3
 8002080:	4499      	add	r9, r3
 8002082:	464b      	mov	r3, r9
 8002084:	021b      	lsls	r3, r3, #8
 8002086:	d444      	bmi.n	8002112 <__aeabi_dsub+0x5c6>
 8002088:	2301      	movs	r3, #1
 800208a:	4698      	mov	r8, r3
 800208c:	e6cc      	b.n	8001e28 <__aeabi_dsub+0x2dc>
 800208e:	1bdc      	subs	r4, r3, r7
 8002090:	4662      	mov	r2, ip
 8002092:	42a3      	cmp	r3, r4
 8002094:	419b      	sbcs	r3, r3
 8002096:	1a51      	subs	r1, r2, r1
 8002098:	425b      	negs	r3, r3
 800209a:	1acb      	subs	r3, r1, r3
 800209c:	4699      	mov	r9, r3
 800209e:	2301      	movs	r3, #1
 80020a0:	4698      	mov	r8, r3
 80020a2:	e5a4      	b.n	8001bee <__aeabi_dsub+0xa2>
 80020a4:	08ff      	lsrs	r7, r7, #3
 80020a6:	074b      	lsls	r3, r1, #29
 80020a8:	465d      	mov	r5, fp
 80020aa:	433b      	orrs	r3, r7
 80020ac:	08cc      	lsrs	r4, r1, #3
 80020ae:	e6d7      	b.n	8001e60 <__aeabi_dsub+0x314>
 80020b0:	4662      	mov	r2, ip
 80020b2:	431a      	orrs	r2, r3
 80020b4:	0014      	movs	r4, r2
 80020b6:	1e63      	subs	r3, r4, #1
 80020b8:	419c      	sbcs	r4, r3
 80020ba:	e679      	b.n	8001db0 <__aeabi_dsub+0x264>
 80020bc:	0015      	movs	r5, r2
 80020be:	4664      	mov	r4, ip
 80020c0:	3d20      	subs	r5, #32
 80020c2:	40ec      	lsrs	r4, r5
 80020c4:	46a0      	mov	r8, r4
 80020c6:	2a20      	cmp	r2, #32
 80020c8:	d005      	beq.n	80020d6 <__aeabi_dsub+0x58a>
 80020ca:	2540      	movs	r5, #64	; 0x40
 80020cc:	4664      	mov	r4, ip
 80020ce:	1aaa      	subs	r2, r5, r2
 80020d0:	4094      	lsls	r4, r2
 80020d2:	4323      	orrs	r3, r4
 80020d4:	469a      	mov	sl, r3
 80020d6:	4654      	mov	r4, sl
 80020d8:	1e63      	subs	r3, r4, #1
 80020da:	419c      	sbcs	r4, r3
 80020dc:	4643      	mov	r3, r8
 80020de:	4323      	orrs	r3, r4
 80020e0:	e773      	b.n	8001fca <__aeabi_dsub+0x47e>
 80020e2:	4662      	mov	r2, ip
 80020e4:	431a      	orrs	r2, r3
 80020e6:	d023      	beq.n	8002130 <__aeabi_dsub+0x5e4>
 80020e8:	000a      	movs	r2, r1
 80020ea:	433a      	orrs	r2, r7
 80020ec:	d000      	beq.n	80020f0 <__aeabi_dsub+0x5a4>
 80020ee:	e0a0      	b.n	8002232 <__aeabi_dsub+0x6e6>
 80020f0:	4662      	mov	r2, ip
 80020f2:	08db      	lsrs	r3, r3, #3
 80020f4:	0752      	lsls	r2, r2, #29
 80020f6:	4313      	orrs	r3, r2
 80020f8:	4662      	mov	r2, ip
 80020fa:	08d4      	lsrs	r4, r2, #3
 80020fc:	e6b0      	b.n	8001e60 <__aeabi_dsub+0x314>
 80020fe:	000b      	movs	r3, r1
 8002100:	433b      	orrs	r3, r7
 8002102:	d100      	bne.n	8002106 <__aeabi_dsub+0x5ba>
 8002104:	e728      	b.n	8001f58 <__aeabi_dsub+0x40c>
 8002106:	08ff      	lsrs	r7, r7, #3
 8002108:	074b      	lsls	r3, r1, #29
 800210a:	465d      	mov	r5, fp
 800210c:	433b      	orrs	r3, r7
 800210e:	08cc      	lsrs	r4, r1, #3
 8002110:	e697      	b.n	8001e42 <__aeabi_dsub+0x2f6>
 8002112:	2302      	movs	r3, #2
 8002114:	4698      	mov	r8, r3
 8002116:	e736      	b.n	8001f86 <__aeabi_dsub+0x43a>
 8002118:	1afc      	subs	r4, r7, r3
 800211a:	42a7      	cmp	r7, r4
 800211c:	41bf      	sbcs	r7, r7
 800211e:	4663      	mov	r3, ip
 8002120:	427f      	negs	r7, r7
 8002122:	1ac9      	subs	r1, r1, r3
 8002124:	1bcb      	subs	r3, r1, r7
 8002126:	4699      	mov	r9, r3
 8002128:	2301      	movs	r3, #1
 800212a:	465d      	mov	r5, fp
 800212c:	4698      	mov	r8, r3
 800212e:	e55e      	b.n	8001bee <__aeabi_dsub+0xa2>
 8002130:	074b      	lsls	r3, r1, #29
 8002132:	08ff      	lsrs	r7, r7, #3
 8002134:	433b      	orrs	r3, r7
 8002136:	08cc      	lsrs	r4, r1, #3
 8002138:	e692      	b.n	8001e60 <__aeabi_dsub+0x314>
 800213a:	1bdc      	subs	r4, r3, r7
 800213c:	4660      	mov	r0, ip
 800213e:	42a3      	cmp	r3, r4
 8002140:	41b6      	sbcs	r6, r6
 8002142:	1a40      	subs	r0, r0, r1
 8002144:	4276      	negs	r6, r6
 8002146:	1b80      	subs	r0, r0, r6
 8002148:	4681      	mov	r9, r0
 800214a:	0200      	lsls	r0, r0, #8
 800214c:	d560      	bpl.n	8002210 <__aeabi_dsub+0x6c4>
 800214e:	1afc      	subs	r4, r7, r3
 8002150:	42a7      	cmp	r7, r4
 8002152:	41bf      	sbcs	r7, r7
 8002154:	4663      	mov	r3, ip
 8002156:	427f      	negs	r7, r7
 8002158:	1ac9      	subs	r1, r1, r3
 800215a:	1bcb      	subs	r3, r1, r7
 800215c:	4699      	mov	r9, r3
 800215e:	465d      	mov	r5, fp
 8002160:	e576      	b.n	8001c50 <__aeabi_dsub+0x104>
 8002162:	08ff      	lsrs	r7, r7, #3
 8002164:	074b      	lsls	r3, r1, #29
 8002166:	433b      	orrs	r3, r7
 8002168:	08cc      	lsrs	r4, r1, #3
 800216a:	e667      	b.n	8001e3c <__aeabi_dsub+0x2f0>
 800216c:	000a      	movs	r2, r1
 800216e:	08db      	lsrs	r3, r3, #3
 8002170:	433a      	orrs	r2, r7
 8002172:	d100      	bne.n	8002176 <__aeabi_dsub+0x62a>
 8002174:	e66f      	b.n	8001e56 <__aeabi_dsub+0x30a>
 8002176:	4662      	mov	r2, ip
 8002178:	0752      	lsls	r2, r2, #29
 800217a:	4313      	orrs	r3, r2
 800217c:	4662      	mov	r2, ip
 800217e:	08d4      	lsrs	r4, r2, #3
 8002180:	2280      	movs	r2, #128	; 0x80
 8002182:	0312      	lsls	r2, r2, #12
 8002184:	4214      	tst	r4, r2
 8002186:	d007      	beq.n	8002198 <__aeabi_dsub+0x64c>
 8002188:	08c8      	lsrs	r0, r1, #3
 800218a:	4210      	tst	r0, r2
 800218c:	d104      	bne.n	8002198 <__aeabi_dsub+0x64c>
 800218e:	465d      	mov	r5, fp
 8002190:	0004      	movs	r4, r0
 8002192:	08fb      	lsrs	r3, r7, #3
 8002194:	0749      	lsls	r1, r1, #29
 8002196:	430b      	orrs	r3, r1
 8002198:	0f5a      	lsrs	r2, r3, #29
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	08db      	lsrs	r3, r3, #3
 800219e:	0752      	lsls	r2, r2, #29
 80021a0:	4313      	orrs	r3, r2
 80021a2:	e65d      	b.n	8001e60 <__aeabi_dsub+0x314>
 80021a4:	074b      	lsls	r3, r1, #29
 80021a6:	08ff      	lsrs	r7, r7, #3
 80021a8:	433b      	orrs	r3, r7
 80021aa:	08cc      	lsrs	r4, r1, #3
 80021ac:	e649      	b.n	8001e42 <__aeabi_dsub+0x2f6>
 80021ae:	19dc      	adds	r4, r3, r7
 80021b0:	429c      	cmp	r4, r3
 80021b2:	419b      	sbcs	r3, r3
 80021b4:	4461      	add	r1, ip
 80021b6:	4689      	mov	r9, r1
 80021b8:	425b      	negs	r3, r3
 80021ba:	4499      	add	r9, r3
 80021bc:	464b      	mov	r3, r9
 80021be:	021b      	lsls	r3, r3, #8
 80021c0:	d400      	bmi.n	80021c4 <__aeabi_dsub+0x678>
 80021c2:	e631      	b.n	8001e28 <__aeabi_dsub+0x2dc>
 80021c4:	464a      	mov	r2, r9
 80021c6:	4b17      	ldr	r3, [pc, #92]	; (8002224 <__aeabi_dsub+0x6d8>)
 80021c8:	401a      	ands	r2, r3
 80021ca:	2301      	movs	r3, #1
 80021cc:	4691      	mov	r9, r2
 80021ce:	4698      	mov	r8, r3
 80021d0:	e62a      	b.n	8001e28 <__aeabi_dsub+0x2dc>
 80021d2:	0016      	movs	r6, r2
 80021d4:	4664      	mov	r4, ip
 80021d6:	3e20      	subs	r6, #32
 80021d8:	40f4      	lsrs	r4, r6
 80021da:	46a0      	mov	r8, r4
 80021dc:	2a20      	cmp	r2, #32
 80021de:	d005      	beq.n	80021ec <__aeabi_dsub+0x6a0>
 80021e0:	2640      	movs	r6, #64	; 0x40
 80021e2:	4664      	mov	r4, ip
 80021e4:	1ab2      	subs	r2, r6, r2
 80021e6:	4094      	lsls	r4, r2
 80021e8:	4323      	orrs	r3, r4
 80021ea:	469a      	mov	sl, r3
 80021ec:	4654      	mov	r4, sl
 80021ee:	1e63      	subs	r3, r4, #1
 80021f0:	419c      	sbcs	r4, r3
 80021f2:	4643      	mov	r3, r8
 80021f4:	431c      	orrs	r4, r3
 80021f6:	e5db      	b.n	8001db0 <__aeabi_dsub+0x264>
 80021f8:	0002      	movs	r2, r0
 80021fa:	2400      	movs	r4, #0
 80021fc:	2300      	movs	r3, #0
 80021fe:	e548      	b.n	8001c92 <__aeabi_dsub+0x146>
 8002200:	19dc      	adds	r4, r3, r7
 8002202:	42bc      	cmp	r4, r7
 8002204:	41bf      	sbcs	r7, r7
 8002206:	4461      	add	r1, ip
 8002208:	4689      	mov	r9, r1
 800220a:	427f      	negs	r7, r7
 800220c:	44b9      	add	r9, r7
 800220e:	e738      	b.n	8002082 <__aeabi_dsub+0x536>
 8002210:	464b      	mov	r3, r9
 8002212:	4323      	orrs	r3, r4
 8002214:	d100      	bne.n	8002218 <__aeabi_dsub+0x6cc>
 8002216:	e69f      	b.n	8001f58 <__aeabi_dsub+0x40c>
 8002218:	e606      	b.n	8001e28 <__aeabi_dsub+0x2dc>
 800221a:	46c0      	nop			; (mov r8, r8)
 800221c:	000007fe 	.word	0x000007fe
 8002220:	000007ff 	.word	0x000007ff
 8002224:	ff7fffff 	.word	0xff7fffff
 8002228:	08ff      	lsrs	r7, r7, #3
 800222a:	074b      	lsls	r3, r1, #29
 800222c:	433b      	orrs	r3, r7
 800222e:	08cc      	lsrs	r4, r1, #3
 8002230:	e616      	b.n	8001e60 <__aeabi_dsub+0x314>
 8002232:	4662      	mov	r2, ip
 8002234:	08db      	lsrs	r3, r3, #3
 8002236:	0752      	lsls	r2, r2, #29
 8002238:	4313      	orrs	r3, r2
 800223a:	4662      	mov	r2, ip
 800223c:	08d4      	lsrs	r4, r2, #3
 800223e:	2280      	movs	r2, #128	; 0x80
 8002240:	0312      	lsls	r2, r2, #12
 8002242:	4214      	tst	r4, r2
 8002244:	d007      	beq.n	8002256 <__aeabi_dsub+0x70a>
 8002246:	08c8      	lsrs	r0, r1, #3
 8002248:	4210      	tst	r0, r2
 800224a:	d104      	bne.n	8002256 <__aeabi_dsub+0x70a>
 800224c:	465d      	mov	r5, fp
 800224e:	0004      	movs	r4, r0
 8002250:	08fb      	lsrs	r3, r7, #3
 8002252:	0749      	lsls	r1, r1, #29
 8002254:	430b      	orrs	r3, r1
 8002256:	0f5a      	lsrs	r2, r3, #29
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	0752      	lsls	r2, r2, #29
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4313      	orrs	r3, r2
 8002260:	e5fe      	b.n	8001e60 <__aeabi_dsub+0x314>
 8002262:	2300      	movs	r3, #0
 8002264:	4a01      	ldr	r2, [pc, #4]	; (800226c <__aeabi_dsub+0x720>)
 8002266:	001c      	movs	r4, r3
 8002268:	e513      	b.n	8001c92 <__aeabi_dsub+0x146>
 800226a:	46c0      	nop			; (mov r8, r8)
 800226c:	000007ff 	.word	0x000007ff

08002270 <__aeabi_dcmpun>:
 8002270:	b570      	push	{r4, r5, r6, lr}
 8002272:	0005      	movs	r5, r0
 8002274:	480c      	ldr	r0, [pc, #48]	; (80022a8 <__aeabi_dcmpun+0x38>)
 8002276:	031c      	lsls	r4, r3, #12
 8002278:	0016      	movs	r6, r2
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	030a      	lsls	r2, r1, #12
 800227e:	0049      	lsls	r1, r1, #1
 8002280:	0b12      	lsrs	r2, r2, #12
 8002282:	0d49      	lsrs	r1, r1, #21
 8002284:	0b24      	lsrs	r4, r4, #12
 8002286:	0d5b      	lsrs	r3, r3, #21
 8002288:	4281      	cmp	r1, r0
 800228a:	d008      	beq.n	800229e <__aeabi_dcmpun+0x2e>
 800228c:	4a06      	ldr	r2, [pc, #24]	; (80022a8 <__aeabi_dcmpun+0x38>)
 800228e:	2000      	movs	r0, #0
 8002290:	4293      	cmp	r3, r2
 8002292:	d103      	bne.n	800229c <__aeabi_dcmpun+0x2c>
 8002294:	0020      	movs	r0, r4
 8002296:	4330      	orrs	r0, r6
 8002298:	1e43      	subs	r3, r0, #1
 800229a:	4198      	sbcs	r0, r3
 800229c:	bd70      	pop	{r4, r5, r6, pc}
 800229e:	2001      	movs	r0, #1
 80022a0:	432a      	orrs	r2, r5
 80022a2:	d1fb      	bne.n	800229c <__aeabi_dcmpun+0x2c>
 80022a4:	e7f2      	b.n	800228c <__aeabi_dcmpun+0x1c>
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	000007ff 	.word	0x000007ff

080022ac <__aeabi_d2iz>:
 80022ac:	000a      	movs	r2, r1
 80022ae:	b530      	push	{r4, r5, lr}
 80022b0:	4c13      	ldr	r4, [pc, #76]	; (8002300 <__aeabi_d2iz+0x54>)
 80022b2:	0053      	lsls	r3, r2, #1
 80022b4:	0309      	lsls	r1, r1, #12
 80022b6:	0005      	movs	r5, r0
 80022b8:	0b09      	lsrs	r1, r1, #12
 80022ba:	2000      	movs	r0, #0
 80022bc:	0d5b      	lsrs	r3, r3, #21
 80022be:	0fd2      	lsrs	r2, r2, #31
 80022c0:	42a3      	cmp	r3, r4
 80022c2:	dd04      	ble.n	80022ce <__aeabi_d2iz+0x22>
 80022c4:	480f      	ldr	r0, [pc, #60]	; (8002304 <__aeabi_d2iz+0x58>)
 80022c6:	4283      	cmp	r3, r0
 80022c8:	dd02      	ble.n	80022d0 <__aeabi_d2iz+0x24>
 80022ca:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <__aeabi_d2iz+0x5c>)
 80022cc:	18d0      	adds	r0, r2, r3
 80022ce:	bd30      	pop	{r4, r5, pc}
 80022d0:	2080      	movs	r0, #128	; 0x80
 80022d2:	0340      	lsls	r0, r0, #13
 80022d4:	4301      	orrs	r1, r0
 80022d6:	480d      	ldr	r0, [pc, #52]	; (800230c <__aeabi_d2iz+0x60>)
 80022d8:	1ac0      	subs	r0, r0, r3
 80022da:	281f      	cmp	r0, #31
 80022dc:	dd08      	ble.n	80022f0 <__aeabi_d2iz+0x44>
 80022de:	480c      	ldr	r0, [pc, #48]	; (8002310 <__aeabi_d2iz+0x64>)
 80022e0:	1ac3      	subs	r3, r0, r3
 80022e2:	40d9      	lsrs	r1, r3
 80022e4:	000b      	movs	r3, r1
 80022e6:	4258      	negs	r0, r3
 80022e8:	2a00      	cmp	r2, #0
 80022ea:	d1f0      	bne.n	80022ce <__aeabi_d2iz+0x22>
 80022ec:	0018      	movs	r0, r3
 80022ee:	e7ee      	b.n	80022ce <__aeabi_d2iz+0x22>
 80022f0:	4c08      	ldr	r4, [pc, #32]	; (8002314 <__aeabi_d2iz+0x68>)
 80022f2:	40c5      	lsrs	r5, r0
 80022f4:	46a4      	mov	ip, r4
 80022f6:	4463      	add	r3, ip
 80022f8:	4099      	lsls	r1, r3
 80022fa:	000b      	movs	r3, r1
 80022fc:	432b      	orrs	r3, r5
 80022fe:	e7f2      	b.n	80022e6 <__aeabi_d2iz+0x3a>
 8002300:	000003fe 	.word	0x000003fe
 8002304:	0000041d 	.word	0x0000041d
 8002308:	7fffffff 	.word	0x7fffffff
 800230c:	00000433 	.word	0x00000433
 8002310:	00000413 	.word	0x00000413
 8002314:	fffffbed 	.word	0xfffffbed

08002318 <__aeabi_i2d>:
 8002318:	b570      	push	{r4, r5, r6, lr}
 800231a:	2800      	cmp	r0, #0
 800231c:	d016      	beq.n	800234c <__aeabi_i2d+0x34>
 800231e:	17c3      	asrs	r3, r0, #31
 8002320:	18c5      	adds	r5, r0, r3
 8002322:	405d      	eors	r5, r3
 8002324:	0fc4      	lsrs	r4, r0, #31
 8002326:	0028      	movs	r0, r5
 8002328:	f000 f91c 	bl	8002564 <__clzsi2>
 800232c:	4a11      	ldr	r2, [pc, #68]	; (8002374 <__aeabi_i2d+0x5c>)
 800232e:	1a12      	subs	r2, r2, r0
 8002330:	280a      	cmp	r0, #10
 8002332:	dc16      	bgt.n	8002362 <__aeabi_i2d+0x4a>
 8002334:	0003      	movs	r3, r0
 8002336:	002e      	movs	r6, r5
 8002338:	3315      	adds	r3, #21
 800233a:	409e      	lsls	r6, r3
 800233c:	230b      	movs	r3, #11
 800233e:	1a18      	subs	r0, r3, r0
 8002340:	40c5      	lsrs	r5, r0
 8002342:	0552      	lsls	r2, r2, #21
 8002344:	032d      	lsls	r5, r5, #12
 8002346:	0b2d      	lsrs	r5, r5, #12
 8002348:	0d53      	lsrs	r3, r2, #21
 800234a:	e003      	b.n	8002354 <__aeabi_i2d+0x3c>
 800234c:	2400      	movs	r4, #0
 800234e:	2300      	movs	r3, #0
 8002350:	2500      	movs	r5, #0
 8002352:	2600      	movs	r6, #0
 8002354:	051b      	lsls	r3, r3, #20
 8002356:	432b      	orrs	r3, r5
 8002358:	07e4      	lsls	r4, r4, #31
 800235a:	4323      	orrs	r3, r4
 800235c:	0030      	movs	r0, r6
 800235e:	0019      	movs	r1, r3
 8002360:	bd70      	pop	{r4, r5, r6, pc}
 8002362:	380b      	subs	r0, #11
 8002364:	4085      	lsls	r5, r0
 8002366:	0552      	lsls	r2, r2, #21
 8002368:	032d      	lsls	r5, r5, #12
 800236a:	2600      	movs	r6, #0
 800236c:	0b2d      	lsrs	r5, r5, #12
 800236e:	0d53      	lsrs	r3, r2, #21
 8002370:	e7f0      	b.n	8002354 <__aeabi_i2d+0x3c>
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	0000041e 	.word	0x0000041e

08002378 <__aeabi_ui2d>:
 8002378:	b510      	push	{r4, lr}
 800237a:	1e04      	subs	r4, r0, #0
 800237c:	d010      	beq.n	80023a0 <__aeabi_ui2d+0x28>
 800237e:	f000 f8f1 	bl	8002564 <__clzsi2>
 8002382:	4b0f      	ldr	r3, [pc, #60]	; (80023c0 <__aeabi_ui2d+0x48>)
 8002384:	1a1b      	subs	r3, r3, r0
 8002386:	280a      	cmp	r0, #10
 8002388:	dc11      	bgt.n	80023ae <__aeabi_ui2d+0x36>
 800238a:	220b      	movs	r2, #11
 800238c:	0021      	movs	r1, r4
 800238e:	1a12      	subs	r2, r2, r0
 8002390:	40d1      	lsrs	r1, r2
 8002392:	3015      	adds	r0, #21
 8002394:	030a      	lsls	r2, r1, #12
 8002396:	055b      	lsls	r3, r3, #21
 8002398:	4084      	lsls	r4, r0
 800239a:	0b12      	lsrs	r2, r2, #12
 800239c:	0d5b      	lsrs	r3, r3, #21
 800239e:	e001      	b.n	80023a4 <__aeabi_ui2d+0x2c>
 80023a0:	2300      	movs	r3, #0
 80023a2:	2200      	movs	r2, #0
 80023a4:	051b      	lsls	r3, r3, #20
 80023a6:	4313      	orrs	r3, r2
 80023a8:	0020      	movs	r0, r4
 80023aa:	0019      	movs	r1, r3
 80023ac:	bd10      	pop	{r4, pc}
 80023ae:	0022      	movs	r2, r4
 80023b0:	380b      	subs	r0, #11
 80023b2:	4082      	lsls	r2, r0
 80023b4:	055b      	lsls	r3, r3, #21
 80023b6:	0312      	lsls	r2, r2, #12
 80023b8:	2400      	movs	r4, #0
 80023ba:	0b12      	lsrs	r2, r2, #12
 80023bc:	0d5b      	lsrs	r3, r3, #21
 80023be:	e7f1      	b.n	80023a4 <__aeabi_ui2d+0x2c>
 80023c0:	0000041e 	.word	0x0000041e

080023c4 <__aeabi_f2d>:
 80023c4:	b570      	push	{r4, r5, r6, lr}
 80023c6:	0043      	lsls	r3, r0, #1
 80023c8:	0246      	lsls	r6, r0, #9
 80023ca:	0fc4      	lsrs	r4, r0, #31
 80023cc:	20fe      	movs	r0, #254	; 0xfe
 80023ce:	0e1b      	lsrs	r3, r3, #24
 80023d0:	1c59      	adds	r1, r3, #1
 80023d2:	0a75      	lsrs	r5, r6, #9
 80023d4:	4208      	tst	r0, r1
 80023d6:	d00c      	beq.n	80023f2 <__aeabi_f2d+0x2e>
 80023d8:	22e0      	movs	r2, #224	; 0xe0
 80023da:	0092      	lsls	r2, r2, #2
 80023dc:	4694      	mov	ip, r2
 80023de:	076d      	lsls	r5, r5, #29
 80023e0:	0b36      	lsrs	r6, r6, #12
 80023e2:	4463      	add	r3, ip
 80023e4:	051b      	lsls	r3, r3, #20
 80023e6:	4333      	orrs	r3, r6
 80023e8:	07e4      	lsls	r4, r4, #31
 80023ea:	4323      	orrs	r3, r4
 80023ec:	0028      	movs	r0, r5
 80023ee:	0019      	movs	r1, r3
 80023f0:	bd70      	pop	{r4, r5, r6, pc}
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d114      	bne.n	8002420 <__aeabi_f2d+0x5c>
 80023f6:	2d00      	cmp	r5, #0
 80023f8:	d01b      	beq.n	8002432 <__aeabi_f2d+0x6e>
 80023fa:	0028      	movs	r0, r5
 80023fc:	f000 f8b2 	bl	8002564 <__clzsi2>
 8002400:	280a      	cmp	r0, #10
 8002402:	dc1c      	bgt.n	800243e <__aeabi_f2d+0x7a>
 8002404:	230b      	movs	r3, #11
 8002406:	002e      	movs	r6, r5
 8002408:	1a1b      	subs	r3, r3, r0
 800240a:	40de      	lsrs	r6, r3
 800240c:	0003      	movs	r3, r0
 800240e:	3315      	adds	r3, #21
 8002410:	409d      	lsls	r5, r3
 8002412:	4a0e      	ldr	r2, [pc, #56]	; (800244c <__aeabi_f2d+0x88>)
 8002414:	0336      	lsls	r6, r6, #12
 8002416:	1a12      	subs	r2, r2, r0
 8002418:	0552      	lsls	r2, r2, #21
 800241a:	0b36      	lsrs	r6, r6, #12
 800241c:	0d53      	lsrs	r3, r2, #21
 800241e:	e7e1      	b.n	80023e4 <__aeabi_f2d+0x20>
 8002420:	2d00      	cmp	r5, #0
 8002422:	d009      	beq.n	8002438 <__aeabi_f2d+0x74>
 8002424:	2280      	movs	r2, #128	; 0x80
 8002426:	0b36      	lsrs	r6, r6, #12
 8002428:	0312      	lsls	r2, r2, #12
 800242a:	4b09      	ldr	r3, [pc, #36]	; (8002450 <__aeabi_f2d+0x8c>)
 800242c:	076d      	lsls	r5, r5, #29
 800242e:	4316      	orrs	r6, r2
 8002430:	e7d8      	b.n	80023e4 <__aeabi_f2d+0x20>
 8002432:	2300      	movs	r3, #0
 8002434:	2600      	movs	r6, #0
 8002436:	e7d5      	b.n	80023e4 <__aeabi_f2d+0x20>
 8002438:	2600      	movs	r6, #0
 800243a:	4b05      	ldr	r3, [pc, #20]	; (8002450 <__aeabi_f2d+0x8c>)
 800243c:	e7d2      	b.n	80023e4 <__aeabi_f2d+0x20>
 800243e:	0003      	movs	r3, r0
 8002440:	3b0b      	subs	r3, #11
 8002442:	409d      	lsls	r5, r3
 8002444:	002e      	movs	r6, r5
 8002446:	2500      	movs	r5, #0
 8002448:	e7e3      	b.n	8002412 <__aeabi_f2d+0x4e>
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	00000389 	.word	0x00000389
 8002450:	000007ff 	.word	0x000007ff

08002454 <__aeabi_d2f>:
 8002454:	0002      	movs	r2, r0
 8002456:	004b      	lsls	r3, r1, #1
 8002458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800245a:	0d5b      	lsrs	r3, r3, #21
 800245c:	030c      	lsls	r4, r1, #12
 800245e:	4e3d      	ldr	r6, [pc, #244]	; (8002554 <__aeabi_d2f+0x100>)
 8002460:	0a64      	lsrs	r4, r4, #9
 8002462:	0f40      	lsrs	r0, r0, #29
 8002464:	1c5f      	adds	r7, r3, #1
 8002466:	0fc9      	lsrs	r1, r1, #31
 8002468:	4304      	orrs	r4, r0
 800246a:	00d5      	lsls	r5, r2, #3
 800246c:	4237      	tst	r7, r6
 800246e:	d00a      	beq.n	8002486 <__aeabi_d2f+0x32>
 8002470:	4839      	ldr	r0, [pc, #228]	; (8002558 <__aeabi_d2f+0x104>)
 8002472:	181e      	adds	r6, r3, r0
 8002474:	2efe      	cmp	r6, #254	; 0xfe
 8002476:	dd16      	ble.n	80024a6 <__aeabi_d2f+0x52>
 8002478:	20ff      	movs	r0, #255	; 0xff
 800247a:	2400      	movs	r4, #0
 800247c:	05c0      	lsls	r0, r0, #23
 800247e:	4320      	orrs	r0, r4
 8002480:	07c9      	lsls	r1, r1, #31
 8002482:	4308      	orrs	r0, r1
 8002484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002486:	2b00      	cmp	r3, #0
 8002488:	d106      	bne.n	8002498 <__aeabi_d2f+0x44>
 800248a:	432c      	orrs	r4, r5
 800248c:	d026      	beq.n	80024dc <__aeabi_d2f+0x88>
 800248e:	2205      	movs	r2, #5
 8002490:	0192      	lsls	r2, r2, #6
 8002492:	0a54      	lsrs	r4, r2, #9
 8002494:	b2d8      	uxtb	r0, r3
 8002496:	e7f1      	b.n	800247c <__aeabi_d2f+0x28>
 8002498:	4325      	orrs	r5, r4
 800249a:	d0ed      	beq.n	8002478 <__aeabi_d2f+0x24>
 800249c:	2080      	movs	r0, #128	; 0x80
 800249e:	03c0      	lsls	r0, r0, #15
 80024a0:	4304      	orrs	r4, r0
 80024a2:	20ff      	movs	r0, #255	; 0xff
 80024a4:	e7ea      	b.n	800247c <__aeabi_d2f+0x28>
 80024a6:	2e00      	cmp	r6, #0
 80024a8:	dd1b      	ble.n	80024e2 <__aeabi_d2f+0x8e>
 80024aa:	0192      	lsls	r2, r2, #6
 80024ac:	1e53      	subs	r3, r2, #1
 80024ae:	419a      	sbcs	r2, r3
 80024b0:	00e4      	lsls	r4, r4, #3
 80024b2:	0f6d      	lsrs	r5, r5, #29
 80024b4:	4322      	orrs	r2, r4
 80024b6:	432a      	orrs	r2, r5
 80024b8:	0753      	lsls	r3, r2, #29
 80024ba:	d048      	beq.n	800254e <__aeabi_d2f+0xfa>
 80024bc:	230f      	movs	r3, #15
 80024be:	4013      	ands	r3, r2
 80024c0:	2b04      	cmp	r3, #4
 80024c2:	d000      	beq.n	80024c6 <__aeabi_d2f+0x72>
 80024c4:	3204      	adds	r2, #4
 80024c6:	2380      	movs	r3, #128	; 0x80
 80024c8:	04db      	lsls	r3, r3, #19
 80024ca:	4013      	ands	r3, r2
 80024cc:	d03f      	beq.n	800254e <__aeabi_d2f+0xfa>
 80024ce:	1c70      	adds	r0, r6, #1
 80024d0:	2efe      	cmp	r6, #254	; 0xfe
 80024d2:	d0d1      	beq.n	8002478 <__aeabi_d2f+0x24>
 80024d4:	0192      	lsls	r2, r2, #6
 80024d6:	0a54      	lsrs	r4, r2, #9
 80024d8:	b2c0      	uxtb	r0, r0
 80024da:	e7cf      	b.n	800247c <__aeabi_d2f+0x28>
 80024dc:	2000      	movs	r0, #0
 80024de:	2400      	movs	r4, #0
 80024e0:	e7cc      	b.n	800247c <__aeabi_d2f+0x28>
 80024e2:	0032      	movs	r2, r6
 80024e4:	3217      	adds	r2, #23
 80024e6:	db22      	blt.n	800252e <__aeabi_d2f+0xda>
 80024e8:	2080      	movs	r0, #128	; 0x80
 80024ea:	0400      	lsls	r0, r0, #16
 80024ec:	4320      	orrs	r0, r4
 80024ee:	241e      	movs	r4, #30
 80024f0:	1ba4      	subs	r4, r4, r6
 80024f2:	2c1f      	cmp	r4, #31
 80024f4:	dd1d      	ble.n	8002532 <__aeabi_d2f+0xde>
 80024f6:	2202      	movs	r2, #2
 80024f8:	4252      	negs	r2, r2
 80024fa:	1b96      	subs	r6, r2, r6
 80024fc:	0002      	movs	r2, r0
 80024fe:	40f2      	lsrs	r2, r6
 8002500:	0016      	movs	r6, r2
 8002502:	2c20      	cmp	r4, #32
 8002504:	d004      	beq.n	8002510 <__aeabi_d2f+0xbc>
 8002506:	4a15      	ldr	r2, [pc, #84]	; (800255c <__aeabi_d2f+0x108>)
 8002508:	4694      	mov	ip, r2
 800250a:	4463      	add	r3, ip
 800250c:	4098      	lsls	r0, r3
 800250e:	4305      	orrs	r5, r0
 8002510:	002a      	movs	r2, r5
 8002512:	1e53      	subs	r3, r2, #1
 8002514:	419a      	sbcs	r2, r3
 8002516:	4332      	orrs	r2, r6
 8002518:	2600      	movs	r6, #0
 800251a:	0753      	lsls	r3, r2, #29
 800251c:	d1ce      	bne.n	80024bc <__aeabi_d2f+0x68>
 800251e:	2480      	movs	r4, #128	; 0x80
 8002520:	0013      	movs	r3, r2
 8002522:	04e4      	lsls	r4, r4, #19
 8002524:	2001      	movs	r0, #1
 8002526:	4023      	ands	r3, r4
 8002528:	4222      	tst	r2, r4
 800252a:	d1d3      	bne.n	80024d4 <__aeabi_d2f+0x80>
 800252c:	e7b0      	b.n	8002490 <__aeabi_d2f+0x3c>
 800252e:	2300      	movs	r3, #0
 8002530:	e7ad      	b.n	800248e <__aeabi_d2f+0x3a>
 8002532:	4a0b      	ldr	r2, [pc, #44]	; (8002560 <__aeabi_d2f+0x10c>)
 8002534:	4694      	mov	ip, r2
 8002536:	002a      	movs	r2, r5
 8002538:	40e2      	lsrs	r2, r4
 800253a:	0014      	movs	r4, r2
 800253c:	002a      	movs	r2, r5
 800253e:	4463      	add	r3, ip
 8002540:	409a      	lsls	r2, r3
 8002542:	4098      	lsls	r0, r3
 8002544:	1e55      	subs	r5, r2, #1
 8002546:	41aa      	sbcs	r2, r5
 8002548:	4302      	orrs	r2, r0
 800254a:	4322      	orrs	r2, r4
 800254c:	e7e4      	b.n	8002518 <__aeabi_d2f+0xc4>
 800254e:	0033      	movs	r3, r6
 8002550:	e79e      	b.n	8002490 <__aeabi_d2f+0x3c>
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	000007fe 	.word	0x000007fe
 8002558:	fffffc80 	.word	0xfffffc80
 800255c:	fffffca2 	.word	0xfffffca2
 8002560:	fffffc82 	.word	0xfffffc82

08002564 <__clzsi2>:
 8002564:	211c      	movs	r1, #28
 8002566:	2301      	movs	r3, #1
 8002568:	041b      	lsls	r3, r3, #16
 800256a:	4298      	cmp	r0, r3
 800256c:	d301      	bcc.n	8002572 <__clzsi2+0xe>
 800256e:	0c00      	lsrs	r0, r0, #16
 8002570:	3910      	subs	r1, #16
 8002572:	0a1b      	lsrs	r3, r3, #8
 8002574:	4298      	cmp	r0, r3
 8002576:	d301      	bcc.n	800257c <__clzsi2+0x18>
 8002578:	0a00      	lsrs	r0, r0, #8
 800257a:	3908      	subs	r1, #8
 800257c:	091b      	lsrs	r3, r3, #4
 800257e:	4298      	cmp	r0, r3
 8002580:	d301      	bcc.n	8002586 <__clzsi2+0x22>
 8002582:	0900      	lsrs	r0, r0, #4
 8002584:	3904      	subs	r1, #4
 8002586:	a202      	add	r2, pc, #8	; (adr r2, 8002590 <__clzsi2+0x2c>)
 8002588:	5c10      	ldrb	r0, [r2, r0]
 800258a:	1840      	adds	r0, r0, r1
 800258c:	4770      	bx	lr
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	02020304 	.word	0x02020304
 8002594:	01010101 	.word	0x01010101
	...

080025a0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80025a0:	b590      	push	{r4, r7, lr}
 80025a2:	b087      	sub	sp, #28
 80025a4:	af02      	add	r7, sp, #8
 80025a6:	0002      	movs	r2, r0
 80025a8:	1dfb      	adds	r3, r7, #7
 80025aa:	701a      	strb	r2, [r3, #0]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80025ac:	200f      	movs	r0, #15
 80025ae:	183b      	adds	r3, r7, r0
 80025b0:	1dfa      	adds	r2, r7, #7
 80025b2:	7812      	ldrb	r2, [r2, #0]
 80025b4:	210f      	movs	r1, #15
 80025b6:	438a      	bics	r2, r1
 80025b8:	701a      	strb	r2, [r3, #0]
	data_l = ((cmd<<4)&0xf0);
 80025ba:	1dfb      	adds	r3, r7, #7
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	011a      	lsls	r2, r3, #4
 80025c0:	240e      	movs	r4, #14
 80025c2:	193b      	adds	r3, r7, r4
 80025c4:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80025c6:	183b      	adds	r3, r7, r0
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	220c      	movs	r2, #12
 80025cc:	4313      	orrs	r3, r2
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	2108      	movs	r1, #8
 80025d2:	187b      	adds	r3, r7, r1
 80025d4:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80025d6:	183b      	adds	r3, r7, r0
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2208      	movs	r2, #8
 80025dc:	4313      	orrs	r3, r2
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	187b      	adds	r3, r7, r1
 80025e2:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80025e4:	193b      	adds	r3, r7, r4
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	220c      	movs	r2, #12
 80025ea:	4313      	orrs	r3, r2
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	187b      	adds	r3, r7, r1
 80025f0:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80025f2:	193b      	adds	r3, r7, r4
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2208      	movs	r2, #8
 80025f8:	4313      	orrs	r3, r2
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	187b      	adds	r3, r7, r1
 80025fe:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002600:	187a      	adds	r2, r7, r1
 8002602:	4805      	ldr	r0, [pc, #20]	; (8002618 <lcd_send_cmd+0x78>)
 8002604:	2364      	movs	r3, #100	; 0x64
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	2304      	movs	r3, #4
 800260a:	214e      	movs	r1, #78	; 0x4e
 800260c:	f001 fc26 	bl	8003e5c <HAL_I2C_Master_Transmit>
}
 8002610:	46c0      	nop			; (mov r8, r8)
 8002612:	46bd      	mov	sp, r7
 8002614:	b005      	add	sp, #20
 8002616:	bd90      	pop	{r4, r7, pc}
 8002618:	20000224 	.word	0x20000224

0800261c <lcd_send_data>:

void lcd_send_data (char data)
{
 800261c:	b590      	push	{r4, r7, lr}
 800261e:	b087      	sub	sp, #28
 8002620:	af02      	add	r7, sp, #8
 8002622:	0002      	movs	r2, r0
 8002624:	1dfb      	adds	r3, r7, #7
 8002626:	701a      	strb	r2, [r3, #0]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8002628:	200f      	movs	r0, #15
 800262a:	183b      	adds	r3, r7, r0
 800262c:	1dfa      	adds	r2, r7, #7
 800262e:	7812      	ldrb	r2, [r2, #0]
 8002630:	210f      	movs	r1, #15
 8002632:	438a      	bics	r2, r1
 8002634:	701a      	strb	r2, [r3, #0]
	data_l = ((data<<4)&0xf0);
 8002636:	1dfb      	adds	r3, r7, #7
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	011a      	lsls	r2, r3, #4
 800263c:	240e      	movs	r4, #14
 800263e:	193b      	adds	r3, r7, r4
 8002640:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002642:	183b      	adds	r3, r7, r0
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	220d      	movs	r2, #13
 8002648:	4313      	orrs	r3, r2
 800264a:	b2da      	uxtb	r2, r3
 800264c:	2108      	movs	r1, #8
 800264e:	187b      	adds	r3, r7, r1
 8002650:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002652:	183b      	adds	r3, r7, r0
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2209      	movs	r2, #9
 8002658:	4313      	orrs	r3, r2
 800265a:	b2da      	uxtb	r2, r3
 800265c:	187b      	adds	r3, r7, r1
 800265e:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002660:	193b      	adds	r3, r7, r4
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	220d      	movs	r2, #13
 8002666:	4313      	orrs	r3, r2
 8002668:	b2da      	uxtb	r2, r3
 800266a:	187b      	adds	r3, r7, r1
 800266c:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800266e:	193b      	adds	r3, r7, r4
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2209      	movs	r2, #9
 8002674:	4313      	orrs	r3, r2
 8002676:	b2da      	uxtb	r2, r3
 8002678:	187b      	adds	r3, r7, r1
 800267a:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800267c:	187a      	adds	r2, r7, r1
 800267e:	4805      	ldr	r0, [pc, #20]	; (8002694 <lcd_send_data+0x78>)
 8002680:	2364      	movs	r3, #100	; 0x64
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	2304      	movs	r3, #4
 8002686:	214e      	movs	r1, #78	; 0x4e
 8002688:	f001 fbe8 	bl	8003e5c <HAL_I2C_Master_Transmit>
}
 800268c:	46c0      	nop			; (mov r8, r8)
 800268e:	46bd      	mov	sp, r7
 8002690:	b005      	add	sp, #20
 8002692:	bd90      	pop	{r4, r7, pc}
 8002694:	20000224 	.word	0x20000224

08002698 <lcd_clear>:

void lcd_clear (void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800269e:	2080      	movs	r0, #128	; 0x80
 80026a0:	f7ff ff7e 	bl	80025a0 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80026a4:	2300      	movs	r3, #0
 80026a6:	607b      	str	r3, [r7, #4]
 80026a8:	e005      	b.n	80026b6 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80026aa:	2020      	movs	r0, #32
 80026ac:	f7ff ffb6 	bl	800261c <lcd_send_data>
	for (int i=0; i<70; i++)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3301      	adds	r3, #1
 80026b4:	607b      	str	r3, [r7, #4]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b45      	cmp	r3, #69	; 0x45
 80026ba:	ddf6      	ble.n	80026aa <lcd_clear+0x12>
	}
}
 80026bc:	46c0      	nop			; (mov r8, r8)
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	46bd      	mov	sp, r7
 80026c2:	b002      	add	sp, #8
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b082      	sub	sp, #8
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
 80026ce:	6039      	str	r1, [r7, #0]
    switch (row)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <lcd_put_cur+0x18>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d005      	beq.n	80026e8 <lcd_put_cur+0x22>
 80026dc:	e009      	b.n	80026f2 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	2280      	movs	r2, #128	; 0x80
 80026e2:	4313      	orrs	r3, r2
 80026e4:	603b      	str	r3, [r7, #0]
            break;
 80026e6:	e004      	b.n	80026f2 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	22c0      	movs	r2, #192	; 0xc0
 80026ec:	4313      	orrs	r3, r2
 80026ee:	603b      	str	r3, [r7, #0]
            break;
 80026f0:	46c0      	nop			; (mov r8, r8)
    }

    lcd_send_cmd (col);
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	0018      	movs	r0, r3
 80026f8:	f7ff ff52 	bl	80025a0 <lcd_send_cmd>
}
 80026fc:	46c0      	nop			; (mov r8, r8)
 80026fe:	46bd      	mov	sp, r7
 8002700:	b002      	add	sp, #8
 8002702:	bd80      	pop	{r7, pc}

08002704 <lcd_init>:


void lcd_init (void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8002708:	2032      	movs	r0, #50	; 0x32
 800270a:	f000 fe6b 	bl	80033e4 <HAL_Delay>
	lcd_send_cmd (0x30);
 800270e:	2030      	movs	r0, #48	; 0x30
 8002710:	f7ff ff46 	bl	80025a0 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8002714:	2005      	movs	r0, #5
 8002716:	f000 fe65 	bl	80033e4 <HAL_Delay>
	lcd_send_cmd (0x30);
 800271a:	2030      	movs	r0, #48	; 0x30
 800271c:	f7ff ff40 	bl	80025a0 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8002720:	2001      	movs	r0, #1
 8002722:	f000 fe5f 	bl	80033e4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8002726:	2030      	movs	r0, #48	; 0x30
 8002728:	f7ff ff3a 	bl	80025a0 <lcd_send_cmd>
	HAL_Delay(10);
 800272c:	200a      	movs	r0, #10
 800272e:	f000 fe59 	bl	80033e4 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8002732:	2020      	movs	r0, #32
 8002734:	f7ff ff34 	bl	80025a0 <lcd_send_cmd>
	HAL_Delay(10);
 8002738:	200a      	movs	r0, #10
 800273a:	f000 fe53 	bl	80033e4 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800273e:	2028      	movs	r0, #40	; 0x28
 8002740:	f7ff ff2e 	bl	80025a0 <lcd_send_cmd>
	HAL_Delay(1);
 8002744:	2001      	movs	r0, #1
 8002746:	f000 fe4d 	bl	80033e4 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800274a:	2008      	movs	r0, #8
 800274c:	f7ff ff28 	bl	80025a0 <lcd_send_cmd>
	HAL_Delay(1);
 8002750:	2001      	movs	r0, #1
 8002752:	f000 fe47 	bl	80033e4 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8002756:	2001      	movs	r0, #1
 8002758:	f7ff ff22 	bl	80025a0 <lcd_send_cmd>
	HAL_Delay(1);
 800275c:	2001      	movs	r0, #1
 800275e:	f000 fe41 	bl	80033e4 <HAL_Delay>
	HAL_Delay(1);
 8002762:	2001      	movs	r0, #1
 8002764:	f000 fe3e 	bl	80033e4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8002768:	2006      	movs	r0, #6
 800276a:	f7ff ff19 	bl	80025a0 <lcd_send_cmd>
	HAL_Delay(1);
 800276e:	2001      	movs	r0, #1
 8002770:	f000 fe38 	bl	80033e4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8002774:	200c      	movs	r0, #12
 8002776:	f7ff ff13 	bl	80025a0 <lcd_send_cmd>
}
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8002788:	e006      	b.n	8002798 <lcd_send_string+0x18>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	1c5a      	adds	r2, r3, #1
 800278e:	607a      	str	r2, [r7, #4]
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	0018      	movs	r0, r3
 8002794:	f7ff ff42 	bl	800261c <lcd_send_data>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1f4      	bne.n	800278a <lcd_send_string+0xa>
}
 80027a0:	46c0      	nop			; (mov r8, r8)
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	46bd      	mov	sp, r7
 80027a6:	b002      	add	sp, #8
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)//hat boşa cıktığında olması girecek fonksiyon
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	000a      	movs	r2, r1
 80027b6:	1cbb      	adds	r3, r7, #2
 80027b8:	801a      	strh	r2, [r3, #0]
	if (huart->Instance == USART1)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a1e      	ldr	r2, [pc, #120]	; (8002838 <HAL_UARTEx_RxEventCallback+0x8c>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d135      	bne.n	8002830 <HAL_UARTEx_RxEventCallback+0x84>
	{
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Rx_data, SIZE);
 80027c4:	491d      	ldr	r1, [pc, #116]	; (800283c <HAL_UARTEx_RxEventCallback+0x90>)
 80027c6:	4b1e      	ldr	r3, [pc, #120]	; (8002840 <HAL_UARTEx_RxEventCallback+0x94>)
 80027c8:	2205      	movs	r2, #5
 80027ca:	0018      	movs	r0, r3
 80027cc:	f003 fc6b 	bl	80060a6 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT); // trasferin yarısındayken trasferi kesmeemeesi için kullanılan fonksiyondur.
 80027d0:	4b1c      	ldr	r3, [pc, #112]	; (8002844 <HAL_UARTEx_RxEventCallback+0x98>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	4b1b      	ldr	r3, [pc, #108]	; (8002844 <HAL_UARTEx_RxEventCallback+0x98>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2104      	movs	r1, #4
 80027dc:	438a      	bics	r2, r1
 80027de:	601a      	str	r2, [r3, #0]
		sizeval = Size;
 80027e0:	1cbb      	adds	r3, r7, #2
 80027e2:	881a      	ldrh	r2, [r3, #0]
 80027e4:	4b18      	ldr	r3, [pc, #96]	; (8002848 <HAL_UARTEx_RxEventCallback+0x9c>)
 80027e6:	601a      	str	r2, [r3, #0]
		for (int i = sizeval; i < SIZE; i++)
 80027e8:	4b17      	ldr	r3, [pc, #92]	; (8002848 <HAL_UARTEx_RxEventCallback+0x9c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	e007      	b.n	8002800 <HAL_UARTEx_RxEventCallback+0x54>
		{
			Rx_data[i] = 0;
 80027f0:	4a12      	ldr	r2, [pc, #72]	; (800283c <HAL_UARTEx_RxEventCallback+0x90>)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	18d3      	adds	r3, r2, r3
 80027f6:	2200      	movs	r2, #0
 80027f8:	701a      	strb	r2, [r3, #0]
		for (int i = sizeval; i < SIZE; i++)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	3301      	adds	r3, #1
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2b04      	cmp	r3, #4
 8002804:	ddf4      	ble.n	80027f0 <HAL_UARTEx_RxEventCallback+0x44>
		}
		flag = 1; //haberleşmenin bittiği ve gösteren flag
 8002806:	4b11      	ldr	r3, [pc, #68]	; (800284c <HAL_UARTEx_RxEventCallback+0xa0>)
 8002808:	2201      	movs	r2, #1
 800280a:	701a      	strb	r2, [r3, #0]
		count++;
 800280c:	4b10      	ldr	r3, [pc, #64]	; (8002850 <HAL_UARTEx_RxEventCallback+0xa4>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	3301      	adds	r3, #1
 8002812:	b2da      	uxtb	r2, r3
 8002814:	4b0e      	ldr	r3, [pc, #56]	; (8002850 <HAL_UARTEx_RxEventCallback+0xa4>)
 8002816:	701a      	strb	r2, [r3, #0]

		if(count == 1)
 8002818:	4b0d      	ldr	r3, [pc, #52]	; (8002850 <HAL_UARTEx_RxEventCallback+0xa4>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d107      	bne.n	8002830 <HAL_UARTEx_RxEventCallback+0x84>
		{
			lcd_put_cur(0, 0);
 8002820:	2100      	movs	r1, #0
 8002822:	2000      	movs	r0, #0
 8002824:	f7ff ff4f 	bl	80026c6 <lcd_put_cur>
			lcd_send_string("num2 giriniz");
 8002828:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <HAL_UARTEx_RxEventCallback+0xa8>)
 800282a:	0018      	movs	r0, r3
 800282c:	f7ff ffa8 	bl	8002780 <lcd_send_string>

		}


	}
}
 8002830:	46c0      	nop			; (mov r8, r8)
 8002832:	46bd      	mov	sp, r7
 8002834:	b004      	add	sp, #16
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40013800 	.word	0x40013800
 800283c:	20000398 	.word	0x20000398
 8002840:	20000270 	.word	0x20000270
 8002844:	200002f4 	.word	0x200002f4
 8002848:	2000037c 	.word	0x2000037c
 800284c:	2000039d 	.word	0x2000039d
 8002850:	2000039f 	.word	0x2000039f
 8002854:	0800ac70 	.word	0x0800ac70

08002858 <printlcd>:
{

}*/

void printlcd(char numarr[])
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
	//lcd_clear();
	lcd_put_cur(1, 0);
 8002860:	2100      	movs	r1, #0
 8002862:	2001      	movs	r0, #1
 8002864:	f7ff ff2f 	bl	80026c6 <lcd_put_cur>
	lcd_send_string(numarr);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	0018      	movs	r0, r3
 800286c:	f7ff ff88 	bl	8002780 <lcd_send_string>
	HAL_Delay(500);
 8002870:	23fa      	movs	r3, #250	; 0xfa
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	0018      	movs	r0, r3
 8002876:	f000 fdb5 	bl	80033e4 <HAL_Delay>
	lcd_put_cur(1, strlen(numarr)+1);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	0018      	movs	r0, r3
 800287e:	f7fd fc43 	bl	8000108 <strlen>
 8002882:	0003      	movs	r3, r0
 8002884:	3301      	adds	r3, #1
 8002886:	0019      	movs	r1, r3
 8002888:	2001      	movs	r0, #1
 800288a:	f7ff ff1c 	bl	80026c6 <lcd_put_cur>
	lcd_send_string(Rx_data);
 800288e:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <printlcd+0x60>)
 8002890:	0018      	movs	r0, r3
 8002892:	f7ff ff75 	bl	8002780 <lcd_send_string>
	HAL_Delay(1000);
 8002896:	23fa      	movs	r3, #250	; 0xfa
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	0018      	movs	r0, r3
 800289c:	f000 fda2 	bl	80033e4 <HAL_Delay>
	lcd_put_cur(1, 0);
 80028a0:	2100      	movs	r1, #0
 80028a2:	2001      	movs	r0, #1
 80028a4:	f7ff ff0f 	bl	80026c6 <lcd_put_cur>
	lcd_send_string("                ");
 80028a8:	4b04      	ldr	r3, [pc, #16]	; (80028bc <printlcd+0x64>)
 80028aa:	0018      	movs	r0, r3
 80028ac:	f7ff ff68 	bl	8002780 <lcd_send_string>


}
 80028b0:	46c0      	nop			; (mov r8, r8)
 80028b2:	46bd      	mov	sp, r7
 80028b4:	b002      	add	sp, #8
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20000398 	.word	0x20000398
 80028bc:	0800ac80 	.word	0x0800ac80

080028c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028c0:	b5b0      	push	{r4, r5, r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028c4:	f000 fd2a 	bl	800331c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028c8:	f000 f976 	bl	8002bb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028cc:	f000 fa66 	bl	8002d9c <MX_GPIO_Init>
  MX_DMA_Init();
 80028d0:	f000 fa46 	bl	8002d60 <MX_DMA_Init>
  MX_I2C1_Init();
 80028d4:	f000 f9d4 	bl	8002c80 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80028d8:	f000 fa12 	bl	8002d00 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80028dc:	f7ff ff12 	bl	8002704 <lcd_init>
  lcd_clear();
 80028e0:	f7ff feda 	bl	8002698 <lcd_clear>
  lcd_put_cur(0, 0);
 80028e4:	2100      	movs	r1, #0
 80028e6:	2000      	movs	r0, #0
 80028e8:	f7ff feed 	bl	80026c6 <lcd_put_cur>
  lcd_send_string("num1 giriniz");
 80028ec:	4b9f      	ldr	r3, [pc, #636]	; (8002b6c <main+0x2ac>)
 80028ee:	0018      	movs	r0, r3
 80028f0:	f7ff ff46 	bl	8002780 <lcd_send_string>


  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Rx_data, SIZE);
 80028f4:	499e      	ldr	r1, [pc, #632]	; (8002b70 <main+0x2b0>)
 80028f6:	4b9f      	ldr	r3, [pc, #636]	; (8002b74 <main+0x2b4>)
 80028f8:	2205      	movs	r2, #5
 80028fa:	0018      	movs	r0, r3
 80028fc:	f003 fbd3 	bl	80060a6 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8002900:	4b9d      	ldr	r3, [pc, #628]	; (8002b78 <main+0x2b8>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	4b9c      	ldr	r3, [pc, #624]	; (8002b78 <main+0x2b8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2104      	movs	r1, #4
 800290c:	438a      	bics	r2, r1
 800290e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	 if(1 == count && flag == 1 )
 8002910:	4b9a      	ldr	r3, [pc, #616]	; (8002b7c <main+0x2bc>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d118      	bne.n	800294a <main+0x8a>
 8002918:	4b99      	ldr	r3, [pc, #612]	; (8002b80 <main+0x2c0>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d114      	bne.n	800294a <main+0x8a>
	 {
			 flag  = 0;
 8002920:	4b97      	ldr	r3, [pc, #604]	; (8002b80 <main+0x2c0>)
 8002922:	2200      	movs	r2, #0
 8002924:	701a      	strb	r2, [r3, #0]
			 num1 = atoi(Rx_data); //strtof(Rx_data, NULL); //char to float
 8002926:	4b92      	ldr	r3, [pc, #584]	; (8002b70 <main+0x2b0>)
 8002928:	0018      	movs	r0, r3
 800292a:	f003 fc2b 	bl	8006184 <atoi>
 800292e:	0003      	movs	r3, r0
 8002930:	0018      	movs	r0, r3
 8002932:	f7ff fcf1 	bl	8002318 <__aeabi_i2d>
 8002936:	0002      	movs	r2, r0
 8002938:	000b      	movs	r3, r1
 800293a:	4992      	ldr	r1, [pc, #584]	; (8002b84 <main+0x2c4>)
 800293c:	600a      	str	r2, [r1, #0]
 800293e:	604b      	str	r3, [r1, #4]
			 printlcd(num1arr);
 8002940:	4b91      	ldr	r3, [pc, #580]	; (8002b88 <main+0x2c8>)
 8002942:	0018      	movs	r0, r3
 8002944:	f7ff ff88 	bl	8002858 <printlcd>
	 {
 8002948:	e10f      	b.n	8002b6a <main+0x2aa>

	 }

	 else if(2 == count)
 800294a:	4b8c      	ldr	r3, [pc, #560]	; (8002b7c <main+0x2bc>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d132      	bne.n	80029b8 <main+0xf8>
	 {
		 if(num2 !=0){
 8002952:	4b8e      	ldr	r3, [pc, #568]	; (8002b8c <main+0x2cc>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2100      	movs	r1, #0
 8002958:	1c18      	adds	r0, r3, #0
 800295a:	f7fd fdb1 	bl	80004c0 <__aeabi_fcmpeq>
 800295e:	1e03      	subs	r3, r0, #0
 8002960:	d110      	bne.n	8002984 <main+0xc4>
			lcd_put_cur(0, 0);
 8002962:	2100      	movs	r1, #0
 8002964:	2000      	movs	r0, #0
 8002966:	f7ff feae 	bl	80026c6 <lcd_put_cur>
			lcd_send_string("yapilacak islem ?");
 800296a:	4b89      	ldr	r3, [pc, #548]	; (8002b90 <main+0x2d0>)
 800296c:	0018      	movs	r0, r3
 800296e:	f7ff ff07 	bl	8002780 <lcd_send_string>
			lcd_put_cur(1, 0);
 8002972:	2100      	movs	r1, #0
 8002974:	2001      	movs	r0, #1
 8002976:	f7ff fea6 	bl	80026c6 <lcd_put_cur>
			lcd_send_string("                  ");
 800297a:	4b86      	ldr	r3, [pc, #536]	; (8002b94 <main+0x2d4>)
 800297c:	0018      	movs	r0, r3
 800297e:	f7ff feff 	bl	8002780 <lcd_send_string>
 8002982:	e7c5      	b.n	8002910 <main+0x50>
		 }else
		 {
			 flagnum1 = 0;
 8002984:	4b84      	ldr	r3, [pc, #528]	; (8002b98 <main+0x2d8>)
 8002986:	2200      	movs	r2, #0
 8002988:	701a      	strb	r2, [r3, #0]
			 //lcd_clear();
			 num2 = atoi(Rx_data); //atoff
 800298a:	4b79      	ldr	r3, [pc, #484]	; (8002b70 <main+0x2b0>)
 800298c:	0018      	movs	r0, r3
 800298e:	f003 fbf9 	bl	8006184 <atoi>
 8002992:	0003      	movs	r3, r0
 8002994:	0018      	movs	r0, r3
 8002996:	f7fd fee1 	bl	800075c <__aeabi_i2f>
 800299a:	1c02      	adds	r2, r0, #0
 800299c:	4b7b      	ldr	r3, [pc, #492]	; (8002b8c <main+0x2cc>)
 800299e:	601a      	str	r2, [r3, #0]
			 //lcd_send_string(num2arr);
			 printlcd(num2arr);
 80029a0:	4b7e      	ldr	r3, [pc, #504]	; (8002b9c <main+0x2dc>)
 80029a2:	0018      	movs	r0, r3
 80029a4:	f7ff ff58 	bl	8002858 <printlcd>
			 HAL_Delay(1000);
 80029a8:	23fa      	movs	r3, #250	; 0xfa
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	0018      	movs	r0, r3
 80029ae:	f000 fd19 	bl	80033e4 <HAL_Delay>
			 lcd_clear();
 80029b2:	f7ff fe71 	bl	8002698 <lcd_clear>
 80029b6:	e7ab      	b.n	8002910 <main+0x50>
		 }


	 }

	 else if(3 == count)
 80029b8:	4b70      	ldr	r3, [pc, #448]	; (8002b7c <main+0x2bc>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b03      	cmp	r3, #3
 80029be:	d000      	beq.n	80029c2 <main+0x102>
 80029c0:	e0af      	b.n	8002b22 <main+0x262>
	 {
		 flagnum2 == 1;
		 count=1;
 80029c2:	4b6e      	ldr	r3, [pc, #440]	; (8002b7c <main+0x2bc>)
 80029c4:	2201      	movs	r2, #1
 80029c6:	701a      	strb	r2, [r3, #0]
		 lcd_clear();
 80029c8:	f7ff fe66 	bl	8002698 <lcd_clear>
		 islem = Rx_data[0];
 80029cc:	4b68      	ldr	r3, [pc, #416]	; (8002b70 <main+0x2b0>)
 80029ce:	781a      	ldrb	r2, [r3, #0]
 80029d0:	4b73      	ldr	r3, [pc, #460]	; (8002ba0 <main+0x2e0>)
 80029d2:	701a      	strb	r2, [r3, #0]
		 printlcd(islemArr);
 80029d4:	4b73      	ldr	r3, [pc, #460]	; (8002ba4 <main+0x2e4>)
 80029d6:	0018      	movs	r0, r3
 80029d8:	f7ff ff3e 	bl	8002858 <printlcd>

		 switch (Rx_data[0])
 80029dc:	4b64      	ldr	r3, [pc, #400]	; (8002b70 <main+0x2b0>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	2b2f      	cmp	r3, #47	; 0x2f
 80029e2:	d054      	beq.n	8002a8e <main+0x1ce>
 80029e4:	dd00      	ble.n	80029e8 <main+0x128>
 80029e6:	e0bf      	b.n	8002b68 <main+0x2a8>
 80029e8:	2b2d      	cmp	r3, #45	; 0x2d
 80029ea:	d029      	beq.n	8002a40 <main+0x180>
 80029ec:	dd00      	ble.n	80029f0 <main+0x130>
 80029ee:	e0bb      	b.n	8002b68 <main+0x2a8>
 80029f0:	2b2a      	cmp	r3, #42	; 0x2a
 80029f2:	d073      	beq.n	8002adc <main+0x21c>
 80029f4:	2b2b      	cmp	r3, #43	; 0x2b
 80029f6:	d000      	beq.n	80029fa <main+0x13a>
 80029f8:	e0b6      	b.n	8002b68 <main+0x2a8>
		 {
			case '+':
				result = num1+num2;
 80029fa:	4b64      	ldr	r3, [pc, #400]	; (8002b8c <main+0x2cc>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	1c18      	adds	r0, r3, #0
 8002a00:	f7ff fce0 	bl	80023c4 <__aeabi_f2d>
 8002a04:	4b5f      	ldr	r3, [pc, #380]	; (8002b84 <main+0x2c4>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f7fd fef5 	bl	80007f8 <__aeabi_dadd>
 8002a0e:	0002      	movs	r2, r0
 8002a10:	000b      	movs	r3, r1
 8002a12:	0010      	movs	r0, r2
 8002a14:	0019      	movs	r1, r3
 8002a16:	f7ff fd1d 	bl	8002454 <__aeabi_d2f>
 8002a1a:	1c02      	adds	r2, r0, #0
 8002a1c:	4b62      	ldr	r3, [pc, #392]	; (8002ba8 <main+0x2e8>)
 8002a1e:	601a      	str	r2, [r3, #0]
				sprintf(Rx_data, "%f", result);
 8002a20:	4b61      	ldr	r3, [pc, #388]	; (8002ba8 <main+0x2e8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	1c18      	adds	r0, r3, #0
 8002a26:	f7ff fccd 	bl	80023c4 <__aeabi_f2d>
 8002a2a:	0002      	movs	r2, r0
 8002a2c:	000b      	movs	r3, r1
 8002a2e:	495f      	ldr	r1, [pc, #380]	; (8002bac <main+0x2ec>)
 8002a30:	484f      	ldr	r0, [pc, #316]	; (8002b70 <main+0x2b0>)
 8002a32:	f004 fa59 	bl	8006ee8 <siprintf>
				printlcd(resultArr);
 8002a36:	4b5e      	ldr	r3, [pc, #376]	; (8002bb0 <main+0x2f0>)
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f7ff ff0d 	bl	8002858 <printlcd>
				break;
 8002a3e:	e094      	b.n	8002b6a <main+0x2aa>
			case '-':
				result = num1-num2;
 8002a40:	4b50      	ldr	r3, [pc, #320]	; (8002b84 <main+0x2c4>)
 8002a42:	681c      	ldr	r4, [r3, #0]
 8002a44:	685d      	ldr	r5, [r3, #4]
 8002a46:	4b51      	ldr	r3, [pc, #324]	; (8002b8c <main+0x2cc>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	1c18      	adds	r0, r3, #0
 8002a4c:	f7ff fcba 	bl	80023c4 <__aeabi_f2d>
 8002a50:	0002      	movs	r2, r0
 8002a52:	000b      	movs	r3, r1
 8002a54:	0020      	movs	r0, r4
 8002a56:	0029      	movs	r1, r5
 8002a58:	f7ff f878 	bl	8001b4c <__aeabi_dsub>
 8002a5c:	0002      	movs	r2, r0
 8002a5e:	000b      	movs	r3, r1
 8002a60:	0010      	movs	r0, r2
 8002a62:	0019      	movs	r1, r3
 8002a64:	f7ff fcf6 	bl	8002454 <__aeabi_d2f>
 8002a68:	1c02      	adds	r2, r0, #0
 8002a6a:	4b4f      	ldr	r3, [pc, #316]	; (8002ba8 <main+0x2e8>)
 8002a6c:	601a      	str	r2, [r3, #0]
				sprintf(Rx_data, "%f", result);
 8002a6e:	4b4e      	ldr	r3, [pc, #312]	; (8002ba8 <main+0x2e8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	1c18      	adds	r0, r3, #0
 8002a74:	f7ff fca6 	bl	80023c4 <__aeabi_f2d>
 8002a78:	0002      	movs	r2, r0
 8002a7a:	000b      	movs	r3, r1
 8002a7c:	494b      	ldr	r1, [pc, #300]	; (8002bac <main+0x2ec>)
 8002a7e:	483c      	ldr	r0, [pc, #240]	; (8002b70 <main+0x2b0>)
 8002a80:	f004 fa32 	bl	8006ee8 <siprintf>
				printlcd(resultArr);
 8002a84:	4b4a      	ldr	r3, [pc, #296]	; (8002bb0 <main+0x2f0>)
 8002a86:	0018      	movs	r0, r3
 8002a88:	f7ff fee6 	bl	8002858 <printlcd>
				break;
 8002a8c:	e06d      	b.n	8002b6a <main+0x2aa>
			case '/':
				result = num1/num2;
 8002a8e:	4b3d      	ldr	r3, [pc, #244]	; (8002b84 <main+0x2c4>)
 8002a90:	681c      	ldr	r4, [r3, #0]
 8002a92:	685d      	ldr	r5, [r3, #4]
 8002a94:	4b3d      	ldr	r3, [pc, #244]	; (8002b8c <main+0x2cc>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	1c18      	adds	r0, r3, #0
 8002a9a:	f7ff fc93 	bl	80023c4 <__aeabi_f2d>
 8002a9e:	0002      	movs	r2, r0
 8002aa0:	000b      	movs	r3, r1
 8002aa2:	0020      	movs	r0, r4
 8002aa4:	0029      	movs	r1, r5
 8002aa6:	f7fe f9e3 	bl	8000e70 <__aeabi_ddiv>
 8002aaa:	0002      	movs	r2, r0
 8002aac:	000b      	movs	r3, r1
 8002aae:	0010      	movs	r0, r2
 8002ab0:	0019      	movs	r1, r3
 8002ab2:	f7ff fccf 	bl	8002454 <__aeabi_d2f>
 8002ab6:	1c02      	adds	r2, r0, #0
 8002ab8:	4b3b      	ldr	r3, [pc, #236]	; (8002ba8 <main+0x2e8>)
 8002aba:	601a      	str	r2, [r3, #0]
				sprintf(Rx_data, "%f", result); //make the number into string using sprintf function
 8002abc:	4b3a      	ldr	r3, [pc, #232]	; (8002ba8 <main+0x2e8>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	1c18      	adds	r0, r3, #0
 8002ac2:	f7ff fc7f 	bl	80023c4 <__aeabi_f2d>
 8002ac6:	0002      	movs	r2, r0
 8002ac8:	000b      	movs	r3, r1
 8002aca:	4938      	ldr	r1, [pc, #224]	; (8002bac <main+0x2ec>)
 8002acc:	4828      	ldr	r0, [pc, #160]	; (8002b70 <main+0x2b0>)
 8002ace:	f004 fa0b 	bl	8006ee8 <siprintf>
				printlcd(resultArr);
 8002ad2:	4b37      	ldr	r3, [pc, #220]	; (8002bb0 <main+0x2f0>)
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f7ff febf 	bl	8002858 <printlcd>
				break;
 8002ada:	e046      	b.n	8002b6a <main+0x2aa>
			case '*':
				result = num1*num2;
 8002adc:	4b2b      	ldr	r3, [pc, #172]	; (8002b8c <main+0x2cc>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	1c18      	adds	r0, r3, #0
 8002ae2:	f7ff fc6f 	bl	80023c4 <__aeabi_f2d>
 8002ae6:	4b27      	ldr	r3, [pc, #156]	; (8002b84 <main+0x2c4>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f7fe fdc2 	bl	8001674 <__aeabi_dmul>
 8002af0:	0002      	movs	r2, r0
 8002af2:	000b      	movs	r3, r1
 8002af4:	0010      	movs	r0, r2
 8002af6:	0019      	movs	r1, r3
 8002af8:	f7ff fcac 	bl	8002454 <__aeabi_d2f>
 8002afc:	1c02      	adds	r2, r0, #0
 8002afe:	4b2a      	ldr	r3, [pc, #168]	; (8002ba8 <main+0x2e8>)
 8002b00:	601a      	str	r2, [r3, #0]
				sprintf(Rx_data, "%f", result);
 8002b02:	4b29      	ldr	r3, [pc, #164]	; (8002ba8 <main+0x2e8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	1c18      	adds	r0, r3, #0
 8002b08:	f7ff fc5c 	bl	80023c4 <__aeabi_f2d>
 8002b0c:	0002      	movs	r2, r0
 8002b0e:	000b      	movs	r3, r1
 8002b10:	4926      	ldr	r1, [pc, #152]	; (8002bac <main+0x2ec>)
 8002b12:	4817      	ldr	r0, [pc, #92]	; (8002b70 <main+0x2b0>)
 8002b14:	f004 f9e8 	bl	8006ee8 <siprintf>
				printlcd(resultArr);
 8002b18:	4b25      	ldr	r3, [pc, #148]	; (8002bb0 <main+0x2f0>)
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f7ff fe9c 	bl	8002858 <printlcd>
				break;
 8002b20:	e023      	b.n	8002b6a <main+0x2aa>
		}
	}
	 else
	{

		HAL_Delay(500);
 8002b22:	23fa      	movs	r3, #250	; 0xfa
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	0018      	movs	r0, r3
 8002b28:	f000 fc5c 	bl	80033e4 <HAL_Delay>
		resetcount = resetcount-1;
 8002b2c:	4b21      	ldr	r3, [pc, #132]	; (8002bb4 <main+0x2f4>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	1e5a      	subs	r2, r3, #1
 8002b32:	4b20      	ldr	r3, [pc, #128]	; (8002bb4 <main+0x2f4>)
 8002b34:	601a      	str	r2, [r3, #0]
		if(resetcount <=0)
 8002b36:	4b1f      	ldr	r3, [pc, #124]	; (8002bb4 <main+0x2f4>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	dd00      	ble.n	8002b40 <main+0x280>
 8002b3e:	e6e7      	b.n	8002910 <main+0x50>
		{

			flagnum2 == 0;
			lcd_clear();
 8002b40:	f7ff fdaa 	bl	8002698 <lcd_clear>
			lcd_put_cur(0, 0);
 8002b44:	2100      	movs	r1, #0
 8002b46:	2000      	movs	r0, #0
 8002b48:	f7ff fdbd 	bl	80026c6 <lcd_put_cur>
			lcd_send_string("num1 giriniz");
 8002b4c:	4b07      	ldr	r3, [pc, #28]	; (8002b6c <main+0x2ac>)
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f7ff fe16 	bl	8002780 <lcd_send_string>
			count = 0;
 8002b54:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <main+0x2bc>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	701a      	strb	r2, [r3, #0]
			num1, num2 = 0;
 8002b5a:	4b0c      	ldr	r3, [pc, #48]	; (8002b8c <main+0x2cc>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]

			resetcount = 25;
 8002b60:	4b14      	ldr	r3, [pc, #80]	; (8002bb4 <main+0x2f4>)
 8002b62:	2219      	movs	r2, #25
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	e6d3      	b.n	8002910 <main+0x50>
				break;
 8002b68:	46c0      	nop			; (mov r8, r8)
	 if(1 == count && flag == 1 )
 8002b6a:	e6d1      	b.n	8002910 <main+0x50>
 8002b6c:	0800ac94 	.word	0x0800ac94
 8002b70:	20000398 	.word	0x20000398
 8002b74:	20000270 	.word	0x20000270
 8002b78:	200002f4 	.word	0x200002f4
 8002b7c:	2000039f 	.word	0x2000039f
 8002b80:	2000039d 	.word	0x2000039d
 8002b84:	20000388 	.word	0x20000388
 8002b88:	20000004 	.word	0x20000004
 8002b8c:	20000390 	.word	0x20000390
 8002b90:	0800aca4 	.word	0x0800aca4
 8002b94:	0800acb8 	.word	0x0800acb8
 8002b98:	2000039e 	.word	0x2000039e
 8002b9c:	2000000c 	.word	0x2000000c
 8002ba0:	20000394 	.word	0x20000394
 8002ba4:	2000001c 	.word	0x2000001c
 8002ba8:	20000380 	.word	0x20000380
 8002bac:	0800accc 	.word	0x0800accc
 8002bb0:	20000014 	.word	0x20000014
 8002bb4:	20000000 	.word	0x20000000

08002bb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bb8:	b590      	push	{r4, r7, lr}
 8002bba:	b097      	sub	sp, #92	; 0x5c
 8002bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bbe:	2428      	movs	r4, #40	; 0x28
 8002bc0:	193b      	adds	r3, r7, r4
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	2330      	movs	r3, #48	; 0x30
 8002bc6:	001a      	movs	r2, r3
 8002bc8:	2100      	movs	r1, #0
 8002bca:	f003 fb0b 	bl	80061e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bce:	2318      	movs	r3, #24
 8002bd0:	18fb      	adds	r3, r7, r3
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	2310      	movs	r3, #16
 8002bd6:	001a      	movs	r2, r3
 8002bd8:	2100      	movs	r1, #0
 8002bda:	f003 fb03 	bl	80061e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bde:	1d3b      	adds	r3, r7, #4
 8002be0:	0018      	movs	r0, r3
 8002be2:	2314      	movs	r3, #20
 8002be4:	001a      	movs	r2, r3
 8002be6:	2100      	movs	r1, #0
 8002be8:	f003 fafc 	bl	80061e4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002bec:	0021      	movs	r1, r4
 8002bee:	187b      	adds	r3, r7, r1
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bf4:	187b      	adds	r3, r7, r1
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002bfa:	187b      	adds	r3, r7, r1
 8002bfc:	2210      	movs	r2, #16
 8002bfe:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c00:	187b      	adds	r3, r7, r1
 8002c02:	2202      	movs	r2, #2
 8002c04:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c06:	187b      	adds	r3, r7, r1
 8002c08:	2200      	movs	r2, #0
 8002c0a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002c0c:	187b      	adds	r3, r7, r1
 8002c0e:	22a0      	movs	r2, #160	; 0xa0
 8002c10:	0392      	lsls	r2, r2, #14
 8002c12:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002c14:	187b      	adds	r3, r7, r1
 8002c16:	2200      	movs	r2, #0
 8002c18:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c1a:	187b      	adds	r3, r7, r1
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	f001 fc49 	bl	80044b4 <HAL_RCC_OscConfig>
 8002c22:	1e03      	subs	r3, r0, #0
 8002c24:	d001      	beq.n	8002c2a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002c26:	f000 f931 	bl	8002e8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c2a:	2118      	movs	r1, #24
 8002c2c:	187b      	adds	r3, r7, r1
 8002c2e:	2207      	movs	r2, #7
 8002c30:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c32:	187b      	adds	r3, r7, r1
 8002c34:	2202      	movs	r2, #2
 8002c36:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c38:	187b      	adds	r3, r7, r1
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c3e:	187b      	adds	r3, r7, r1
 8002c40:	2200      	movs	r2, #0
 8002c42:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002c44:	187b      	adds	r3, r7, r1
 8002c46:	2101      	movs	r1, #1
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f001 ff4d 	bl	8004ae8 <HAL_RCC_ClockConfig>
 8002c4e:	1e03      	subs	r3, r0, #0
 8002c50:	d001      	beq.n	8002c56 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002c52:	f000 f91b 	bl	8002e8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002c56:	1d3b      	adds	r3, r7, #4
 8002c58:	2221      	movs	r2, #33	; 0x21
 8002c5a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002c5c:	1d3b      	adds	r3, r7, #4
 8002c5e:	2200      	movs	r2, #0
 8002c60:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002c62:	1d3b      	adds	r3, r7, #4
 8002c64:	2200      	movs	r2, #0
 8002c66:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c68:	1d3b      	adds	r3, r7, #4
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	f002 f88e 	bl	8004d8c <HAL_RCCEx_PeriphCLKConfig>
 8002c70:	1e03      	subs	r3, r0, #0
 8002c72:	d001      	beq.n	8002c78 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002c74:	f000 f90a 	bl	8002e8c <Error_Handler>
  }
}
 8002c78:	46c0      	nop			; (mov r8, r8)
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	b017      	add	sp, #92	; 0x5c
 8002c7e:	bd90      	pop	{r4, r7, pc}

08002c80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c84:	4b1b      	ldr	r3, [pc, #108]	; (8002cf4 <MX_I2C1_Init+0x74>)
 8002c86:	4a1c      	ldr	r2, [pc, #112]	; (8002cf8 <MX_I2C1_Init+0x78>)
 8002c88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002c8a:	4b1a      	ldr	r3, [pc, #104]	; (8002cf4 <MX_I2C1_Init+0x74>)
 8002c8c:	4a1b      	ldr	r2, [pc, #108]	; (8002cfc <MX_I2C1_Init+0x7c>)
 8002c8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002c90:	4b18      	ldr	r3, [pc, #96]	; (8002cf4 <MX_I2C1_Init+0x74>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c96:	4b17      	ldr	r3, [pc, #92]	; (8002cf4 <MX_I2C1_Init+0x74>)
 8002c98:	2201      	movs	r2, #1
 8002c9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c9c:	4b15      	ldr	r3, [pc, #84]	; (8002cf4 <MX_I2C1_Init+0x74>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002ca2:	4b14      	ldr	r3, [pc, #80]	; (8002cf4 <MX_I2C1_Init+0x74>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ca8:	4b12      	ldr	r3, [pc, #72]	; (8002cf4 <MX_I2C1_Init+0x74>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002cae:	4b11      	ldr	r3, [pc, #68]	; (8002cf4 <MX_I2C1_Init+0x74>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cb4:	4b0f      	ldr	r3, [pc, #60]	; (8002cf4 <MX_I2C1_Init+0x74>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002cba:	4b0e      	ldr	r3, [pc, #56]	; (8002cf4 <MX_I2C1_Init+0x74>)
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f001 f837 	bl	8003d30 <HAL_I2C_Init>
 8002cc2:	1e03      	subs	r3, r0, #0
 8002cc4:	d001      	beq.n	8002cca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002cc6:	f000 f8e1 	bl	8002e8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002cca:	4b0a      	ldr	r3, [pc, #40]	; (8002cf4 <MX_I2C1_Init+0x74>)
 8002ccc:	2100      	movs	r1, #0
 8002cce:	0018      	movs	r0, r3
 8002cd0:	f001 fb58 	bl	8004384 <HAL_I2CEx_ConfigAnalogFilter>
 8002cd4:	1e03      	subs	r3, r0, #0
 8002cd6:	d001      	beq.n	8002cdc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002cd8:	f000 f8d8 	bl	8002e8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002cdc:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <MX_I2C1_Init+0x74>)
 8002cde:	2100      	movs	r1, #0
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f001 fb9b 	bl	800441c <HAL_I2CEx_ConfigDigitalFilter>
 8002ce6:	1e03      	subs	r3, r0, #0
 8002ce8:	d001      	beq.n	8002cee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002cea:	f000 f8cf 	bl	8002e8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	20000224 	.word	0x20000224
 8002cf8:	40005400 	.word	0x40005400
 8002cfc:	2000090e 	.word	0x2000090e

08002d00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d04:	4b14      	ldr	r3, [pc, #80]	; (8002d58 <MX_USART1_UART_Init+0x58>)
 8002d06:	4a15      	ldr	r2, [pc, #84]	; (8002d5c <MX_USART1_UART_Init+0x5c>)
 8002d08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8002d0a:	4b13      	ldr	r3, [pc, #76]	; (8002d58 <MX_USART1_UART_Init+0x58>)
 8002d0c:	2296      	movs	r2, #150	; 0x96
 8002d0e:	0212      	lsls	r2, r2, #8
 8002d10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d12:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <MX_USART1_UART_Init+0x58>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d18:	4b0f      	ldr	r3, [pc, #60]	; (8002d58 <MX_USART1_UART_Init+0x58>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d1e:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <MX_USART1_UART_Init+0x58>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d24:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <MX_USART1_UART_Init+0x58>)
 8002d26:	220c      	movs	r2, #12
 8002d28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d2a:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <MX_USART1_UART_Init+0x58>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d30:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <MX_USART1_UART_Init+0x58>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d36:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <MX_USART1_UART_Init+0x58>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d3c:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <MX_USART1_UART_Init+0x58>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d42:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <MX_USART1_UART_Init+0x58>)
 8002d44:	0018      	movs	r0, r3
 8002d46:	f002 f8ff 	bl	8004f48 <HAL_UART_Init>
 8002d4a:	1e03      	subs	r3, r0, #0
 8002d4c:	d001      	beq.n	8002d52 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002d4e:	f000 f89d 	bl	8002e8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	20000270 	.word	0x20000270
 8002d5c:	40013800 	.word	0x40013800

08002d60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d66:	4b0c      	ldr	r3, [pc, #48]	; (8002d98 <MX_DMA_Init+0x38>)
 8002d68:	695a      	ldr	r2, [r3, #20]
 8002d6a:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <MX_DMA_Init+0x38>)
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	615a      	str	r2, [r3, #20]
 8002d72:	4b09      	ldr	r3, [pc, #36]	; (8002d98 <MX_DMA_Init+0x38>)
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	2201      	movs	r2, #1
 8002d78:	4013      	ands	r3, r2
 8002d7a:	607b      	str	r3, [r7, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002d7e:	2200      	movs	r2, #0
 8002d80:	2100      	movs	r1, #0
 8002d82:	200a      	movs	r0, #10
 8002d84:	f000 fbfe 	bl	8003584 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002d88:	200a      	movs	r0, #10
 8002d8a:	f000 fc10 	bl	80035ae <HAL_NVIC_EnableIRQ>

}
 8002d8e:	46c0      	nop			; (mov r8, r8)
 8002d90:	46bd      	mov	sp, r7
 8002d92:	b002      	add	sp, #8
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	46c0      	nop			; (mov r8, r8)
 8002d98:	40021000 	.word	0x40021000

08002d9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d9c:	b590      	push	{r4, r7, lr}
 8002d9e:	b08b      	sub	sp, #44	; 0x2c
 8002da0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da2:	2414      	movs	r4, #20
 8002da4:	193b      	adds	r3, r7, r4
 8002da6:	0018      	movs	r0, r3
 8002da8:	2314      	movs	r3, #20
 8002daa:	001a      	movs	r2, r3
 8002dac:	2100      	movs	r1, #0
 8002dae:	f003 fa19 	bl	80061e4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002db2:	4b34      	ldr	r3, [pc, #208]	; (8002e84 <MX_GPIO_Init+0xe8>)
 8002db4:	695a      	ldr	r2, [r3, #20]
 8002db6:	4b33      	ldr	r3, [pc, #204]	; (8002e84 <MX_GPIO_Init+0xe8>)
 8002db8:	2180      	movs	r1, #128	; 0x80
 8002dba:	03c9      	lsls	r1, r1, #15
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	615a      	str	r2, [r3, #20]
 8002dc0:	4b30      	ldr	r3, [pc, #192]	; (8002e84 <MX_GPIO_Init+0xe8>)
 8002dc2:	695a      	ldr	r2, [r3, #20]
 8002dc4:	2380      	movs	r3, #128	; 0x80
 8002dc6:	03db      	lsls	r3, r3, #15
 8002dc8:	4013      	ands	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
 8002dcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dce:	4b2d      	ldr	r3, [pc, #180]	; (8002e84 <MX_GPIO_Init+0xe8>)
 8002dd0:	695a      	ldr	r2, [r3, #20]
 8002dd2:	4b2c      	ldr	r3, [pc, #176]	; (8002e84 <MX_GPIO_Init+0xe8>)
 8002dd4:	2180      	movs	r1, #128	; 0x80
 8002dd6:	0289      	lsls	r1, r1, #10
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	615a      	str	r2, [r3, #20]
 8002ddc:	4b29      	ldr	r3, [pc, #164]	; (8002e84 <MX_GPIO_Init+0xe8>)
 8002dde:	695a      	ldr	r2, [r3, #20]
 8002de0:	2380      	movs	r3, #128	; 0x80
 8002de2:	029b      	lsls	r3, r3, #10
 8002de4:	4013      	ands	r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dea:	4b26      	ldr	r3, [pc, #152]	; (8002e84 <MX_GPIO_Init+0xe8>)
 8002dec:	695a      	ldr	r2, [r3, #20]
 8002dee:	4b25      	ldr	r3, [pc, #148]	; (8002e84 <MX_GPIO_Init+0xe8>)
 8002df0:	2180      	movs	r1, #128	; 0x80
 8002df2:	0309      	lsls	r1, r1, #12
 8002df4:	430a      	orrs	r2, r1
 8002df6:	615a      	str	r2, [r3, #20]
 8002df8:	4b22      	ldr	r3, [pc, #136]	; (8002e84 <MX_GPIO_Init+0xe8>)
 8002dfa:	695a      	ldr	r2, [r3, #20]
 8002dfc:	2380      	movs	r3, #128	; 0x80
 8002dfe:	031b      	lsls	r3, r3, #12
 8002e00:	4013      	ands	r3, r2
 8002e02:	60bb      	str	r3, [r7, #8]
 8002e04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e06:	4b1f      	ldr	r3, [pc, #124]	; (8002e84 <MX_GPIO_Init+0xe8>)
 8002e08:	695a      	ldr	r2, [r3, #20]
 8002e0a:	4b1e      	ldr	r3, [pc, #120]	; (8002e84 <MX_GPIO_Init+0xe8>)
 8002e0c:	2180      	movs	r1, #128	; 0x80
 8002e0e:	02c9      	lsls	r1, r1, #11
 8002e10:	430a      	orrs	r2, r1
 8002e12:	615a      	str	r2, [r3, #20]
 8002e14:	4b1b      	ldr	r3, [pc, #108]	; (8002e84 <MX_GPIO_Init+0xe8>)
 8002e16:	695a      	ldr	r2, [r3, #20]
 8002e18:	2380      	movs	r3, #128	; 0x80
 8002e1a:	02db      	lsls	r3, r3, #11
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	607b      	str	r3, [r7, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8002e22:	23c0      	movs	r3, #192	; 0xc0
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4818      	ldr	r0, [pc, #96]	; (8002e88 <MX_GPIO_Init+0xec>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	0019      	movs	r1, r3
 8002e2c:	f000 ff62 	bl	8003cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002e30:	193b      	adds	r3, r7, r4
 8002e32:	2201      	movs	r2, #1
 8002e34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002e36:	193b      	adds	r3, r7, r4
 8002e38:	2290      	movs	r2, #144	; 0x90
 8002e3a:	0352      	lsls	r2, r2, #13
 8002e3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3e:	193b      	adds	r3, r7, r4
 8002e40:	2200      	movs	r2, #0
 8002e42:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e44:	193a      	adds	r2, r7, r4
 8002e46:	2390      	movs	r3, #144	; 0x90
 8002e48:	05db      	lsls	r3, r3, #23
 8002e4a:	0011      	movs	r1, r2
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	f000 fde1 	bl	8003a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8002e52:	0021      	movs	r1, r4
 8002e54:	187b      	adds	r3, r7, r1
 8002e56:	22c0      	movs	r2, #192	; 0xc0
 8002e58:	0092      	lsls	r2, r2, #2
 8002e5a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e5c:	187b      	adds	r3, r7, r1
 8002e5e:	2201      	movs	r2, #1
 8002e60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e62:	187b      	adds	r3, r7, r1
 8002e64:	2200      	movs	r2, #0
 8002e66:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e68:	187b      	adds	r3, r7, r1
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e6e:	187b      	adds	r3, r7, r1
 8002e70:	4a05      	ldr	r2, [pc, #20]	; (8002e88 <MX_GPIO_Init+0xec>)
 8002e72:	0019      	movs	r1, r3
 8002e74:	0010      	movs	r0, r2
 8002e76:	f000 fdcd 	bl	8003a14 <HAL_GPIO_Init>

}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	b00b      	add	sp, #44	; 0x2c
 8002e80:	bd90      	pop	{r4, r7, pc}
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	40021000 	.word	0x40021000
 8002e88:	48000800 	.word	0x48000800

08002e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e90:	b672      	cpsid	i
}
 8002e92:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e94:	e7fe      	b.n	8002e94 <Error_Handler+0x8>
	...

08002e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e9e:	4b0f      	ldr	r3, [pc, #60]	; (8002edc <HAL_MspInit+0x44>)
 8002ea0:	699a      	ldr	r2, [r3, #24]
 8002ea2:	4b0e      	ldr	r3, [pc, #56]	; (8002edc <HAL_MspInit+0x44>)
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	619a      	str	r2, [r3, #24]
 8002eaa:	4b0c      	ldr	r3, [pc, #48]	; (8002edc <HAL_MspInit+0x44>)
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	607b      	str	r3, [r7, #4]
 8002eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eb6:	4b09      	ldr	r3, [pc, #36]	; (8002edc <HAL_MspInit+0x44>)
 8002eb8:	69da      	ldr	r2, [r3, #28]
 8002eba:	4b08      	ldr	r3, [pc, #32]	; (8002edc <HAL_MspInit+0x44>)
 8002ebc:	2180      	movs	r1, #128	; 0x80
 8002ebe:	0549      	lsls	r1, r1, #21
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	61da      	str	r2, [r3, #28]
 8002ec4:	4b05      	ldr	r3, [pc, #20]	; (8002edc <HAL_MspInit+0x44>)
 8002ec6:	69da      	ldr	r2, [r3, #28]
 8002ec8:	2380      	movs	r3, #128	; 0x80
 8002eca:	055b      	lsls	r3, r3, #21
 8002ecc:	4013      	ands	r3, r2
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	b002      	add	sp, #8
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	40021000 	.word	0x40021000

08002ee0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ee0:	b590      	push	{r4, r7, lr}
 8002ee2:	b08b      	sub	sp, #44	; 0x2c
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee8:	2414      	movs	r4, #20
 8002eea:	193b      	adds	r3, r7, r4
 8002eec:	0018      	movs	r0, r3
 8002eee:	2314      	movs	r3, #20
 8002ef0:	001a      	movs	r2, r3
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	f003 f976 	bl	80061e4 <memset>
  if(hi2c->Instance==I2C1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a1c      	ldr	r2, [pc, #112]	; (8002f70 <HAL_I2C_MspInit+0x90>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d131      	bne.n	8002f66 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f02:	4b1c      	ldr	r3, [pc, #112]	; (8002f74 <HAL_I2C_MspInit+0x94>)
 8002f04:	695a      	ldr	r2, [r3, #20]
 8002f06:	4b1b      	ldr	r3, [pc, #108]	; (8002f74 <HAL_I2C_MspInit+0x94>)
 8002f08:	2180      	movs	r1, #128	; 0x80
 8002f0a:	02c9      	lsls	r1, r1, #11
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	615a      	str	r2, [r3, #20]
 8002f10:	4b18      	ldr	r3, [pc, #96]	; (8002f74 <HAL_I2C_MspInit+0x94>)
 8002f12:	695a      	ldr	r2, [r3, #20]
 8002f14:	2380      	movs	r3, #128	; 0x80
 8002f16:	02db      	lsls	r3, r3, #11
 8002f18:	4013      	ands	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
 8002f1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f1e:	0021      	movs	r1, r4
 8002f20:	187b      	adds	r3, r7, r1
 8002f22:	22c0      	movs	r2, #192	; 0xc0
 8002f24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f26:	187b      	adds	r3, r7, r1
 8002f28:	2212      	movs	r2, #18
 8002f2a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2c:	187b      	adds	r3, r7, r1
 8002f2e:	2200      	movs	r2, #0
 8002f30:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f32:	187b      	adds	r3, r7, r1
 8002f34:	2203      	movs	r2, #3
 8002f36:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002f38:	187b      	adds	r3, r7, r1
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f3e:	187b      	adds	r3, r7, r1
 8002f40:	4a0d      	ldr	r2, [pc, #52]	; (8002f78 <HAL_I2C_MspInit+0x98>)
 8002f42:	0019      	movs	r1, r3
 8002f44:	0010      	movs	r0, r2
 8002f46:	f000 fd65 	bl	8003a14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f4a:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <HAL_I2C_MspInit+0x94>)
 8002f4c:	69da      	ldr	r2, [r3, #28]
 8002f4e:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <HAL_I2C_MspInit+0x94>)
 8002f50:	2180      	movs	r1, #128	; 0x80
 8002f52:	0389      	lsls	r1, r1, #14
 8002f54:	430a      	orrs	r2, r1
 8002f56:	61da      	str	r2, [r3, #28]
 8002f58:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <HAL_I2C_MspInit+0x94>)
 8002f5a:	69da      	ldr	r2, [r3, #28]
 8002f5c:	2380      	movs	r3, #128	; 0x80
 8002f5e:	039b      	lsls	r3, r3, #14
 8002f60:	4013      	ands	r3, r2
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	b00b      	add	sp, #44	; 0x2c
 8002f6c:	bd90      	pop	{r4, r7, pc}
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	40005400 	.word	0x40005400
 8002f74:	40021000 	.word	0x40021000
 8002f78:	48000400 	.word	0x48000400

08002f7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f7c:	b590      	push	{r4, r7, lr}
 8002f7e:	b08b      	sub	sp, #44	; 0x2c
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f84:	2414      	movs	r4, #20
 8002f86:	193b      	adds	r3, r7, r4
 8002f88:	0018      	movs	r0, r3
 8002f8a:	2314      	movs	r3, #20
 8002f8c:	001a      	movs	r2, r3
 8002f8e:	2100      	movs	r1, #0
 8002f90:	f003 f928 	bl	80061e4 <memset>
  if(huart->Instance==USART1)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a48      	ldr	r2, [pc, #288]	; (80030bc <HAL_UART_MspInit+0x140>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d000      	beq.n	8002fa0 <HAL_UART_MspInit+0x24>
 8002f9e:	e089      	b.n	80030b4 <HAL_UART_MspInit+0x138>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fa0:	4b47      	ldr	r3, [pc, #284]	; (80030c0 <HAL_UART_MspInit+0x144>)
 8002fa2:	699a      	ldr	r2, [r3, #24]
 8002fa4:	4b46      	ldr	r3, [pc, #280]	; (80030c0 <HAL_UART_MspInit+0x144>)
 8002fa6:	2180      	movs	r1, #128	; 0x80
 8002fa8:	01c9      	lsls	r1, r1, #7
 8002faa:	430a      	orrs	r2, r1
 8002fac:	619a      	str	r2, [r3, #24]
 8002fae:	4b44      	ldr	r3, [pc, #272]	; (80030c0 <HAL_UART_MspInit+0x144>)
 8002fb0:	699a      	ldr	r2, [r3, #24]
 8002fb2:	2380      	movs	r3, #128	; 0x80
 8002fb4:	01db      	lsls	r3, r3, #7
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]
 8002fba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fbc:	4b40      	ldr	r3, [pc, #256]	; (80030c0 <HAL_UART_MspInit+0x144>)
 8002fbe:	695a      	ldr	r2, [r3, #20]
 8002fc0:	4b3f      	ldr	r3, [pc, #252]	; (80030c0 <HAL_UART_MspInit+0x144>)
 8002fc2:	2180      	movs	r1, #128	; 0x80
 8002fc4:	0289      	lsls	r1, r1, #10
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	615a      	str	r2, [r3, #20]
 8002fca:	4b3d      	ldr	r3, [pc, #244]	; (80030c0 <HAL_UART_MspInit+0x144>)
 8002fcc:	695a      	ldr	r2, [r3, #20]
 8002fce:	2380      	movs	r3, #128	; 0x80
 8002fd0:	029b      	lsls	r3, r3, #10
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002fd8:	193b      	adds	r3, r7, r4
 8002fda:	22c0      	movs	r2, #192	; 0xc0
 8002fdc:	00d2      	lsls	r2, r2, #3
 8002fde:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe0:	0021      	movs	r1, r4
 8002fe2:	187b      	adds	r3, r7, r1
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe8:	187b      	adds	r3, r7, r1
 8002fea:	2200      	movs	r2, #0
 8002fec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fee:	187b      	adds	r3, r7, r1
 8002ff0:	2203      	movs	r2, #3
 8002ff2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002ff4:	187b      	adds	r3, r7, r1
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ffa:	187a      	adds	r2, r7, r1
 8002ffc:	2390      	movs	r3, #144	; 0x90
 8002ffe:	05db      	lsls	r3, r3, #23
 8003000:	0011      	movs	r1, r2
 8003002:	0018      	movs	r0, r3
 8003004:	f000 fd06 	bl	8003a14 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8003008:	4b2e      	ldr	r3, [pc, #184]	; (80030c4 <HAL_UART_MspInit+0x148>)
 800300a:	4a2f      	ldr	r2, [pc, #188]	; (80030c8 <HAL_UART_MspInit+0x14c>)
 800300c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800300e:	4b2d      	ldr	r3, [pc, #180]	; (80030c4 <HAL_UART_MspInit+0x148>)
 8003010:	2200      	movs	r2, #0
 8003012:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003014:	4b2b      	ldr	r3, [pc, #172]	; (80030c4 <HAL_UART_MspInit+0x148>)
 8003016:	2200      	movs	r2, #0
 8003018:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800301a:	4b2a      	ldr	r3, [pc, #168]	; (80030c4 <HAL_UART_MspInit+0x148>)
 800301c:	2280      	movs	r2, #128	; 0x80
 800301e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003020:	4b28      	ldr	r3, [pc, #160]	; (80030c4 <HAL_UART_MspInit+0x148>)
 8003022:	2200      	movs	r2, #0
 8003024:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003026:	4b27      	ldr	r3, [pc, #156]	; (80030c4 <HAL_UART_MspInit+0x148>)
 8003028:	2200      	movs	r2, #0
 800302a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800302c:	4b25      	ldr	r3, [pc, #148]	; (80030c4 <HAL_UART_MspInit+0x148>)
 800302e:	2200      	movs	r2, #0
 8003030:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003032:	4b24      	ldr	r3, [pc, #144]	; (80030c4 <HAL_UART_MspInit+0x148>)
 8003034:	2280      	movs	r2, #128	; 0x80
 8003036:	0152      	lsls	r2, r2, #5
 8003038:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800303a:	4b22      	ldr	r3, [pc, #136]	; (80030c4 <HAL_UART_MspInit+0x148>)
 800303c:	0018      	movs	r0, r3
 800303e:	f000 fad3 	bl	80035e8 <HAL_DMA_Init>
 8003042:	1e03      	subs	r3, r0, #0
 8003044:	d001      	beq.n	800304a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003046:	f7ff ff21 	bl	8002e8c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a1d      	ldr	r2, [pc, #116]	; (80030c4 <HAL_UART_MspInit+0x148>)
 800304e:	671a      	str	r2, [r3, #112]	; 0x70
 8003050:	4b1c      	ldr	r3, [pc, #112]	; (80030c4 <HAL_UART_MspInit+0x148>)
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8003056:	4b1d      	ldr	r3, [pc, #116]	; (80030cc <HAL_UART_MspInit+0x150>)
 8003058:	4a1d      	ldr	r2, [pc, #116]	; (80030d0 <HAL_UART_MspInit+0x154>)
 800305a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800305c:	4b1b      	ldr	r3, [pc, #108]	; (80030cc <HAL_UART_MspInit+0x150>)
 800305e:	2210      	movs	r2, #16
 8003060:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003062:	4b1a      	ldr	r3, [pc, #104]	; (80030cc <HAL_UART_MspInit+0x150>)
 8003064:	2200      	movs	r2, #0
 8003066:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003068:	4b18      	ldr	r3, [pc, #96]	; (80030cc <HAL_UART_MspInit+0x150>)
 800306a:	2280      	movs	r2, #128	; 0x80
 800306c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800306e:	4b17      	ldr	r3, [pc, #92]	; (80030cc <HAL_UART_MspInit+0x150>)
 8003070:	2200      	movs	r2, #0
 8003072:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003074:	4b15      	ldr	r3, [pc, #84]	; (80030cc <HAL_UART_MspInit+0x150>)
 8003076:	2200      	movs	r2, #0
 8003078:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800307a:	4b14      	ldr	r3, [pc, #80]	; (80030cc <HAL_UART_MspInit+0x150>)
 800307c:	2200      	movs	r2, #0
 800307e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003080:	4b12      	ldr	r3, [pc, #72]	; (80030cc <HAL_UART_MspInit+0x150>)
 8003082:	2280      	movs	r2, #128	; 0x80
 8003084:	0152      	lsls	r2, r2, #5
 8003086:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003088:	4b10      	ldr	r3, [pc, #64]	; (80030cc <HAL_UART_MspInit+0x150>)
 800308a:	0018      	movs	r0, r3
 800308c:	f000 faac 	bl	80035e8 <HAL_DMA_Init>
 8003090:	1e03      	subs	r3, r0, #0
 8003092:	d001      	beq.n	8003098 <HAL_UART_MspInit+0x11c>
    {
      Error_Handler();
 8003094:	f7ff fefa 	bl	8002e8c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a0c      	ldr	r2, [pc, #48]	; (80030cc <HAL_UART_MspInit+0x150>)
 800309c:	66da      	str	r2, [r3, #108]	; 0x6c
 800309e:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <HAL_UART_MspInit+0x150>)
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80030a4:	2200      	movs	r2, #0
 80030a6:	2100      	movs	r1, #0
 80030a8:	201b      	movs	r0, #27
 80030aa:	f000 fa6b 	bl	8003584 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80030ae:	201b      	movs	r0, #27
 80030b0:	f000 fa7d 	bl	80035ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80030b4:	46c0      	nop			; (mov r8, r8)
 80030b6:	46bd      	mov	sp, r7
 80030b8:	b00b      	add	sp, #44	; 0x2c
 80030ba:	bd90      	pop	{r4, r7, pc}
 80030bc:	40013800 	.word	0x40013800
 80030c0:	40021000 	.word	0x40021000
 80030c4:	200002f4 	.word	0x200002f4
 80030c8:	40020030 	.word	0x40020030
 80030cc:	20000338 	.word	0x20000338
 80030d0:	4002001c 	.word	0x4002001c

080030d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030d8:	e7fe      	b.n	80030d8 <NMI_Handler+0x4>

080030da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030de:	e7fe      	b.n	80030de <HardFault_Handler+0x4>

080030e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80030e4:	46c0      	nop			; (mov r8, r8)
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030f8:	f000 f958 	bl	80033ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030fc:	46c0      	nop			; (mov r8, r8)
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003108:	4b05      	ldr	r3, [pc, #20]	; (8003120 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800310a:	0018      	movs	r0, r3
 800310c:	f000 fb97 	bl	800383e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003110:	4b04      	ldr	r3, [pc, #16]	; (8003124 <DMA1_Channel2_3_IRQHandler+0x20>)
 8003112:	0018      	movs	r0, r3
 8003114:	f000 fb93 	bl	800383e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003118:	46c0      	nop			; (mov r8, r8)
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	20000338 	.word	0x20000338
 8003124:	200002f4 	.word	0x200002f4

08003128 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800312c:	4b03      	ldr	r3, [pc, #12]	; (800313c <USART1_IRQHandler+0x14>)
 800312e:	0018      	movs	r0, r3
 8003130:	f001 ff5e 	bl	8004ff0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003134:	46c0      	nop			; (mov r8, r8)
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	20000270 	.word	0x20000270

08003140 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
	return 1;
 8003144:	2301      	movs	r3, #1
}
 8003146:	0018      	movs	r0, r3
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <_kill>:

int _kill(int pid, int sig)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003156:	f003 f81b 	bl	8006190 <__errno>
 800315a:	0003      	movs	r3, r0
 800315c:	2216      	movs	r2, #22
 800315e:	601a      	str	r2, [r3, #0]
	return -1;
 8003160:	2301      	movs	r3, #1
 8003162:	425b      	negs	r3, r3
}
 8003164:	0018      	movs	r0, r3
 8003166:	46bd      	mov	sp, r7
 8003168:	b002      	add	sp, #8
 800316a:	bd80      	pop	{r7, pc}

0800316c <_exit>:

void _exit (int status)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003174:	2301      	movs	r3, #1
 8003176:	425a      	negs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	0011      	movs	r1, r2
 800317c:	0018      	movs	r0, r3
 800317e:	f7ff ffe5 	bl	800314c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003182:	e7fe      	b.n	8003182 <_exit+0x16>

08003184 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003190:	2300      	movs	r3, #0
 8003192:	617b      	str	r3, [r7, #20]
 8003194:	e00a      	b.n	80031ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003196:	e000      	b.n	800319a <_read+0x16>
 8003198:	bf00      	nop
 800319a:	0001      	movs	r1, r0
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	1c5a      	adds	r2, r3, #1
 80031a0:	60ba      	str	r2, [r7, #8]
 80031a2:	b2ca      	uxtb	r2, r1
 80031a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	3301      	adds	r3, #1
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	dbf0      	blt.n	8003196 <_read+0x12>
	}

return len;
 80031b4:	687b      	ldr	r3, [r7, #4]
}
 80031b6:	0018      	movs	r0, r3
 80031b8:	46bd      	mov	sp, r7
 80031ba:	b006      	add	sp, #24
 80031bc:	bd80      	pop	{r7, pc}

080031be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b086      	sub	sp, #24
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	60f8      	str	r0, [r7, #12]
 80031c6:	60b9      	str	r1, [r7, #8]
 80031c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ca:	2300      	movs	r3, #0
 80031cc:	617b      	str	r3, [r7, #20]
 80031ce:	e009      	b.n	80031e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	1c5a      	adds	r2, r3, #1
 80031d4:	60ba      	str	r2, [r7, #8]
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	0018      	movs	r0, r3
 80031da:	e000      	b.n	80031de <_write+0x20>
 80031dc:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	3301      	adds	r3, #1
 80031e2:	617b      	str	r3, [r7, #20]
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	dbf1      	blt.n	80031d0 <_write+0x12>
	}
	return len;
 80031ec:	687b      	ldr	r3, [r7, #4]
}
 80031ee:	0018      	movs	r0, r3
 80031f0:	46bd      	mov	sp, r7
 80031f2:	b006      	add	sp, #24
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <_close>:

int _close(int file)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b082      	sub	sp, #8
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
	return -1;
 80031fe:	2301      	movs	r3, #1
 8003200:	425b      	negs	r3, r3
}
 8003202:	0018      	movs	r0, r3
 8003204:	46bd      	mov	sp, r7
 8003206:	b002      	add	sp, #8
 8003208:	bd80      	pop	{r7, pc}

0800320a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b082      	sub	sp, #8
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	2280      	movs	r2, #128	; 0x80
 8003218:	0192      	lsls	r2, r2, #6
 800321a:	605a      	str	r2, [r3, #4]
	return 0;
 800321c:	2300      	movs	r3, #0
}
 800321e:	0018      	movs	r0, r3
 8003220:	46bd      	mov	sp, r7
 8003222:	b002      	add	sp, #8
 8003224:	bd80      	pop	{r7, pc}

08003226 <_isatty>:

int _isatty(int file)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b082      	sub	sp, #8
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
	return 1;
 800322e:	2301      	movs	r3, #1
}
 8003230:	0018      	movs	r0, r3
 8003232:	46bd      	mov	sp, r7
 8003234:	b002      	add	sp, #8
 8003236:	bd80      	pop	{r7, pc}

08003238 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
	return 0;
 8003244:	2300      	movs	r3, #0
}
 8003246:	0018      	movs	r0, r3
 8003248:	46bd      	mov	sp, r7
 800324a:	b004      	add	sp, #16
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003258:	4a14      	ldr	r2, [pc, #80]	; (80032ac <_sbrk+0x5c>)
 800325a:	4b15      	ldr	r3, [pc, #84]	; (80032b0 <_sbrk+0x60>)
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003264:	4b13      	ldr	r3, [pc, #76]	; (80032b4 <_sbrk+0x64>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d102      	bne.n	8003272 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800326c:	4b11      	ldr	r3, [pc, #68]	; (80032b4 <_sbrk+0x64>)
 800326e:	4a12      	ldr	r2, [pc, #72]	; (80032b8 <_sbrk+0x68>)
 8003270:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003272:	4b10      	ldr	r3, [pc, #64]	; (80032b4 <_sbrk+0x64>)
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	18d3      	adds	r3, r2, r3
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	429a      	cmp	r2, r3
 800327e:	d207      	bcs.n	8003290 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003280:	f002 ff86 	bl	8006190 <__errno>
 8003284:	0003      	movs	r3, r0
 8003286:	220c      	movs	r2, #12
 8003288:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800328a:	2301      	movs	r3, #1
 800328c:	425b      	negs	r3, r3
 800328e:	e009      	b.n	80032a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003290:	4b08      	ldr	r3, [pc, #32]	; (80032b4 <_sbrk+0x64>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003296:	4b07      	ldr	r3, [pc, #28]	; (80032b4 <_sbrk+0x64>)
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	18d2      	adds	r2, r2, r3
 800329e:	4b05      	ldr	r3, [pc, #20]	; (80032b4 <_sbrk+0x64>)
 80032a0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80032a2:	68fb      	ldr	r3, [r7, #12]
}
 80032a4:	0018      	movs	r0, r3
 80032a6:	46bd      	mov	sp, r7
 80032a8:	b006      	add	sp, #24
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	20002000 	.word	0x20002000
 80032b0:	00000400 	.word	0x00000400
 80032b4:	200003a0 	.word	0x200003a0
 80032b8:	200003b8 	.word	0x200003b8

080032bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80032c0:	46c0      	nop			; (mov r8, r8)
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
	...

080032c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80032c8:	480d      	ldr	r0, [pc, #52]	; (8003300 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80032ca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032cc:	480d      	ldr	r0, [pc, #52]	; (8003304 <LoopForever+0x6>)
  ldr r1, =_edata
 80032ce:	490e      	ldr	r1, [pc, #56]	; (8003308 <LoopForever+0xa>)
  ldr r2, =_sidata
 80032d0:	4a0e      	ldr	r2, [pc, #56]	; (800330c <LoopForever+0xe>)
  movs r3, #0
 80032d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032d4:	e002      	b.n	80032dc <LoopCopyDataInit>

080032d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032da:	3304      	adds	r3, #4

080032dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032e0:	d3f9      	bcc.n	80032d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032e2:	4a0b      	ldr	r2, [pc, #44]	; (8003310 <LoopForever+0x12>)
  ldr r4, =_ebss
 80032e4:	4c0b      	ldr	r4, [pc, #44]	; (8003314 <LoopForever+0x16>)
  movs r3, #0
 80032e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032e8:	e001      	b.n	80032ee <LoopFillZerobss>

080032ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032ec:	3204      	adds	r2, #4

080032ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032f0:	d3fb      	bcc.n	80032ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80032f2:	f7ff ffe3 	bl	80032bc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80032f6:	f002 ff51 	bl	800619c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80032fa:	f7ff fae1 	bl	80028c0 <main>

080032fe <LoopForever>:

LoopForever:
    b LoopForever
 80032fe:	e7fe      	b.n	80032fe <LoopForever>
  ldr   r0, =_estack
 8003300:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003308:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 800330c:	0800b234 	.word	0x0800b234
  ldr r2, =_sbss
 8003310:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8003314:	200003b8 	.word	0x200003b8

08003318 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003318:	e7fe      	b.n	8003318 <ADC1_COMP_IRQHandler>
	...

0800331c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003320:	4b07      	ldr	r3, [pc, #28]	; (8003340 <HAL_Init+0x24>)
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	4b06      	ldr	r3, [pc, #24]	; (8003340 <HAL_Init+0x24>)
 8003326:	2110      	movs	r1, #16
 8003328:	430a      	orrs	r2, r1
 800332a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800332c:	2000      	movs	r0, #0
 800332e:	f000 f809 	bl	8003344 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003332:	f7ff fdb1 	bl	8002e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	0018      	movs	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	46c0      	nop			; (mov r8, r8)
 8003340:	40022000 	.word	0x40022000

08003344 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003344:	b590      	push	{r4, r7, lr}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800334c:	4b14      	ldr	r3, [pc, #80]	; (80033a0 <HAL_InitTick+0x5c>)
 800334e:	681c      	ldr	r4, [r3, #0]
 8003350:	4b14      	ldr	r3, [pc, #80]	; (80033a4 <HAL_InitTick+0x60>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	0019      	movs	r1, r3
 8003356:	23fa      	movs	r3, #250	; 0xfa
 8003358:	0098      	lsls	r0, r3, #2
 800335a:	f7fc fef1 	bl	8000140 <__udivsi3>
 800335e:	0003      	movs	r3, r0
 8003360:	0019      	movs	r1, r3
 8003362:	0020      	movs	r0, r4
 8003364:	f7fc feec 	bl	8000140 <__udivsi3>
 8003368:	0003      	movs	r3, r0
 800336a:	0018      	movs	r0, r3
 800336c:	f000 f92f 	bl	80035ce <HAL_SYSTICK_Config>
 8003370:	1e03      	subs	r3, r0, #0
 8003372:	d001      	beq.n	8003378 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e00f      	b.n	8003398 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b03      	cmp	r3, #3
 800337c:	d80b      	bhi.n	8003396 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	2301      	movs	r3, #1
 8003382:	425b      	negs	r3, r3
 8003384:	2200      	movs	r2, #0
 8003386:	0018      	movs	r0, r3
 8003388:	f000 f8fc 	bl	8003584 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800338c:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <HAL_InitTick+0x64>)
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003392:	2300      	movs	r3, #0
 8003394:	e000      	b.n	8003398 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
}
 8003398:	0018      	movs	r0, r3
 800339a:	46bd      	mov	sp, r7
 800339c:	b003      	add	sp, #12
 800339e:	bd90      	pop	{r4, r7, pc}
 80033a0:	20000024 	.word	0x20000024
 80033a4:	2000002c 	.word	0x2000002c
 80033a8:	20000028 	.word	0x20000028

080033ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033b0:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <HAL_IncTick+0x1c>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	001a      	movs	r2, r3
 80033b6:	4b05      	ldr	r3, [pc, #20]	; (80033cc <HAL_IncTick+0x20>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	18d2      	adds	r2, r2, r3
 80033bc:	4b03      	ldr	r3, [pc, #12]	; (80033cc <HAL_IncTick+0x20>)
 80033be:	601a      	str	r2, [r3, #0]
}
 80033c0:	46c0      	nop			; (mov r8, r8)
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	46c0      	nop			; (mov r8, r8)
 80033c8:	2000002c 	.word	0x2000002c
 80033cc:	200003a4 	.word	0x200003a4

080033d0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  return uwTick;
 80033d4:	4b02      	ldr	r3, [pc, #8]	; (80033e0 <HAL_GetTick+0x10>)
 80033d6:	681b      	ldr	r3, [r3, #0]
}
 80033d8:	0018      	movs	r0, r3
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	200003a4 	.word	0x200003a4

080033e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033ec:	f7ff fff0 	bl	80033d0 <HAL_GetTick>
 80033f0:	0003      	movs	r3, r0
 80033f2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	3301      	adds	r3, #1
 80033fc:	d005      	beq.n	800340a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033fe:	4b0a      	ldr	r3, [pc, #40]	; (8003428 <HAL_Delay+0x44>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	001a      	movs	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	189b      	adds	r3, r3, r2
 8003408:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	f7ff ffe0 	bl	80033d0 <HAL_GetTick>
 8003410:	0002      	movs	r2, r0
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	429a      	cmp	r2, r3
 800341a:	d8f7      	bhi.n	800340c <HAL_Delay+0x28>
  {
  }
}
 800341c:	46c0      	nop			; (mov r8, r8)
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	46bd      	mov	sp, r7
 8003422:	b004      	add	sp, #16
 8003424:	bd80      	pop	{r7, pc}
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	2000002c 	.word	0x2000002c

0800342c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	0002      	movs	r2, r0
 8003434:	1dfb      	adds	r3, r7, #7
 8003436:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003438:	1dfb      	adds	r3, r7, #7
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b7f      	cmp	r3, #127	; 0x7f
 800343e:	d809      	bhi.n	8003454 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003440:	1dfb      	adds	r3, r7, #7
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	001a      	movs	r2, r3
 8003446:	231f      	movs	r3, #31
 8003448:	401a      	ands	r2, r3
 800344a:	4b04      	ldr	r3, [pc, #16]	; (800345c <__NVIC_EnableIRQ+0x30>)
 800344c:	2101      	movs	r1, #1
 800344e:	4091      	lsls	r1, r2
 8003450:	000a      	movs	r2, r1
 8003452:	601a      	str	r2, [r3, #0]
  }
}
 8003454:	46c0      	nop			; (mov r8, r8)
 8003456:	46bd      	mov	sp, r7
 8003458:	b002      	add	sp, #8
 800345a:	bd80      	pop	{r7, pc}
 800345c:	e000e100 	.word	0xe000e100

08003460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003460:	b590      	push	{r4, r7, lr}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	0002      	movs	r2, r0
 8003468:	6039      	str	r1, [r7, #0]
 800346a:	1dfb      	adds	r3, r7, #7
 800346c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800346e:	1dfb      	adds	r3, r7, #7
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	2b7f      	cmp	r3, #127	; 0x7f
 8003474:	d828      	bhi.n	80034c8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003476:	4a2f      	ldr	r2, [pc, #188]	; (8003534 <__NVIC_SetPriority+0xd4>)
 8003478:	1dfb      	adds	r3, r7, #7
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	b25b      	sxtb	r3, r3
 800347e:	089b      	lsrs	r3, r3, #2
 8003480:	33c0      	adds	r3, #192	; 0xc0
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	589b      	ldr	r3, [r3, r2]
 8003486:	1dfa      	adds	r2, r7, #7
 8003488:	7812      	ldrb	r2, [r2, #0]
 800348a:	0011      	movs	r1, r2
 800348c:	2203      	movs	r2, #3
 800348e:	400a      	ands	r2, r1
 8003490:	00d2      	lsls	r2, r2, #3
 8003492:	21ff      	movs	r1, #255	; 0xff
 8003494:	4091      	lsls	r1, r2
 8003496:	000a      	movs	r2, r1
 8003498:	43d2      	mvns	r2, r2
 800349a:	401a      	ands	r2, r3
 800349c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	019b      	lsls	r3, r3, #6
 80034a2:	22ff      	movs	r2, #255	; 0xff
 80034a4:	401a      	ands	r2, r3
 80034a6:	1dfb      	adds	r3, r7, #7
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	0018      	movs	r0, r3
 80034ac:	2303      	movs	r3, #3
 80034ae:	4003      	ands	r3, r0
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034b4:	481f      	ldr	r0, [pc, #124]	; (8003534 <__NVIC_SetPriority+0xd4>)
 80034b6:	1dfb      	adds	r3, r7, #7
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	b25b      	sxtb	r3, r3
 80034bc:	089b      	lsrs	r3, r3, #2
 80034be:	430a      	orrs	r2, r1
 80034c0:	33c0      	adds	r3, #192	; 0xc0
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80034c6:	e031      	b.n	800352c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034c8:	4a1b      	ldr	r2, [pc, #108]	; (8003538 <__NVIC_SetPriority+0xd8>)
 80034ca:	1dfb      	adds	r3, r7, #7
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	0019      	movs	r1, r3
 80034d0:	230f      	movs	r3, #15
 80034d2:	400b      	ands	r3, r1
 80034d4:	3b08      	subs	r3, #8
 80034d6:	089b      	lsrs	r3, r3, #2
 80034d8:	3306      	adds	r3, #6
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	18d3      	adds	r3, r2, r3
 80034de:	3304      	adds	r3, #4
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	1dfa      	adds	r2, r7, #7
 80034e4:	7812      	ldrb	r2, [r2, #0]
 80034e6:	0011      	movs	r1, r2
 80034e8:	2203      	movs	r2, #3
 80034ea:	400a      	ands	r2, r1
 80034ec:	00d2      	lsls	r2, r2, #3
 80034ee:	21ff      	movs	r1, #255	; 0xff
 80034f0:	4091      	lsls	r1, r2
 80034f2:	000a      	movs	r2, r1
 80034f4:	43d2      	mvns	r2, r2
 80034f6:	401a      	ands	r2, r3
 80034f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	019b      	lsls	r3, r3, #6
 80034fe:	22ff      	movs	r2, #255	; 0xff
 8003500:	401a      	ands	r2, r3
 8003502:	1dfb      	adds	r3, r7, #7
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	0018      	movs	r0, r3
 8003508:	2303      	movs	r3, #3
 800350a:	4003      	ands	r3, r0
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003510:	4809      	ldr	r0, [pc, #36]	; (8003538 <__NVIC_SetPriority+0xd8>)
 8003512:	1dfb      	adds	r3, r7, #7
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	001c      	movs	r4, r3
 8003518:	230f      	movs	r3, #15
 800351a:	4023      	ands	r3, r4
 800351c:	3b08      	subs	r3, #8
 800351e:	089b      	lsrs	r3, r3, #2
 8003520:	430a      	orrs	r2, r1
 8003522:	3306      	adds	r3, #6
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	18c3      	adds	r3, r0, r3
 8003528:	3304      	adds	r3, #4
 800352a:	601a      	str	r2, [r3, #0]
}
 800352c:	46c0      	nop			; (mov r8, r8)
 800352e:	46bd      	mov	sp, r7
 8003530:	b003      	add	sp, #12
 8003532:	bd90      	pop	{r4, r7, pc}
 8003534:	e000e100 	.word	0xe000e100
 8003538:	e000ed00 	.word	0xe000ed00

0800353c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	1e5a      	subs	r2, r3, #1
 8003548:	2380      	movs	r3, #128	; 0x80
 800354a:	045b      	lsls	r3, r3, #17
 800354c:	429a      	cmp	r2, r3
 800354e:	d301      	bcc.n	8003554 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003550:	2301      	movs	r3, #1
 8003552:	e010      	b.n	8003576 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003554:	4b0a      	ldr	r3, [pc, #40]	; (8003580 <SysTick_Config+0x44>)
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	3a01      	subs	r2, #1
 800355a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800355c:	2301      	movs	r3, #1
 800355e:	425b      	negs	r3, r3
 8003560:	2103      	movs	r1, #3
 8003562:	0018      	movs	r0, r3
 8003564:	f7ff ff7c 	bl	8003460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003568:	4b05      	ldr	r3, [pc, #20]	; (8003580 <SysTick_Config+0x44>)
 800356a:	2200      	movs	r2, #0
 800356c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800356e:	4b04      	ldr	r3, [pc, #16]	; (8003580 <SysTick_Config+0x44>)
 8003570:	2207      	movs	r2, #7
 8003572:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003574:	2300      	movs	r3, #0
}
 8003576:	0018      	movs	r0, r3
 8003578:	46bd      	mov	sp, r7
 800357a:	b002      	add	sp, #8
 800357c:	bd80      	pop	{r7, pc}
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	e000e010 	.word	0xe000e010

08003584 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	607a      	str	r2, [r7, #4]
 800358e:	210f      	movs	r1, #15
 8003590:	187b      	adds	r3, r7, r1
 8003592:	1c02      	adds	r2, r0, #0
 8003594:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	187b      	adds	r3, r7, r1
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	b25b      	sxtb	r3, r3
 800359e:	0011      	movs	r1, r2
 80035a0:	0018      	movs	r0, r3
 80035a2:	f7ff ff5d 	bl	8003460 <__NVIC_SetPriority>
}
 80035a6:	46c0      	nop			; (mov r8, r8)
 80035a8:	46bd      	mov	sp, r7
 80035aa:	b004      	add	sp, #16
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b082      	sub	sp, #8
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	0002      	movs	r2, r0
 80035b6:	1dfb      	adds	r3, r7, #7
 80035b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035ba:	1dfb      	adds	r3, r7, #7
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	b25b      	sxtb	r3, r3
 80035c0:	0018      	movs	r0, r3
 80035c2:	f7ff ff33 	bl	800342c <__NVIC_EnableIRQ>
}
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	46bd      	mov	sp, r7
 80035ca:	b002      	add	sp, #8
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b082      	sub	sp, #8
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	0018      	movs	r0, r3
 80035da:	f7ff ffaf 	bl	800353c <SysTick_Config>
 80035de:	0003      	movs	r3, r0
}
 80035e0:	0018      	movs	r0, r3
 80035e2:	46bd      	mov	sp, r7
 80035e4:	b002      	add	sp, #8
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e036      	b.n	800366c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2221      	movs	r2, #33	; 0x21
 8003602:	2102      	movs	r1, #2
 8003604:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	4a18      	ldr	r2, [pc, #96]	; (8003674 <HAL_DMA_Init+0x8c>)
 8003612:	4013      	ands	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800361e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800362a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003636:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	4313      	orrs	r3, r2
 8003642:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	0018      	movs	r0, r3
 8003650:	f000 f9c4 	bl	80039dc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2221      	movs	r2, #33	; 0x21
 800365e:	2101      	movs	r1, #1
 8003660:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2220      	movs	r2, #32
 8003666:	2100      	movs	r1, #0
 8003668:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}  
 800366c:	0018      	movs	r0, r3
 800366e:	46bd      	mov	sp, r7
 8003670:	b004      	add	sp, #16
 8003672:	bd80      	pop	{r7, pc}
 8003674:	ffffc00f 	.word	0xffffc00f

08003678 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
 8003684:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003686:	2317      	movs	r3, #23
 8003688:	18fb      	adds	r3, r7, r3
 800368a:	2200      	movs	r2, #0
 800368c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2220      	movs	r2, #32
 8003692:	5c9b      	ldrb	r3, [r3, r2]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d101      	bne.n	800369c <HAL_DMA_Start_IT+0x24>
 8003698:	2302      	movs	r3, #2
 800369a:	e04f      	b.n	800373c <HAL_DMA_Start_IT+0xc4>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2220      	movs	r2, #32
 80036a0:	2101      	movs	r1, #1
 80036a2:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2221      	movs	r2, #33	; 0x21
 80036a8:	5c9b      	ldrb	r3, [r3, r2]
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d13a      	bne.n	8003726 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2221      	movs	r2, #33	; 0x21
 80036b4:	2102      	movs	r1, #2
 80036b6:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2101      	movs	r1, #1
 80036ca:	438a      	bics	r2, r1
 80036cc:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	68b9      	ldr	r1, [r7, #8]
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f000 f954 	bl	8003982 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d008      	beq.n	80036f4 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	210e      	movs	r1, #14
 80036ee:	430a      	orrs	r2, r1
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	e00f      	b.n	8003714 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	210a      	movs	r1, #10
 8003700:	430a      	orrs	r2, r1
 8003702:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2104      	movs	r1, #4
 8003710:	438a      	bics	r2, r1
 8003712:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2101      	movs	r1, #1
 8003720:	430a      	orrs	r2, r1
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	e007      	b.n	8003736 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2220      	movs	r2, #32
 800372a:	2100      	movs	r1, #0
 800372c:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800372e:	2317      	movs	r3, #23
 8003730:	18fb      	adds	r3, r7, r3
 8003732:	2202      	movs	r2, #2
 8003734:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8003736:	2317      	movs	r3, #23
 8003738:	18fb      	adds	r3, r7, r3
 800373a:	781b      	ldrb	r3, [r3, #0]
} 
 800373c:	0018      	movs	r0, r3
 800373e:	46bd      	mov	sp, r7
 8003740:	b006      	add	sp, #24
 8003742:	bd80      	pop	{r7, pc}

08003744 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2221      	movs	r2, #33	; 0x21
 8003750:	5c9b      	ldrb	r3, [r3, r2]
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d008      	beq.n	800376a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2204      	movs	r2, #4
 800375c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2220      	movs	r2, #32
 8003762:	2100      	movs	r1, #0
 8003764:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e020      	b.n	80037ac <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	210e      	movs	r1, #14
 8003776:	438a      	bics	r2, r1
 8003778:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2101      	movs	r1, #1
 8003786:	438a      	bics	r2, r1
 8003788:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003792:	2101      	movs	r1, #1
 8003794:	4091      	lsls	r1, r2
 8003796:	000a      	movs	r2, r1
 8003798:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2221      	movs	r2, #33	; 0x21
 800379e:	2101      	movs	r1, #1
 80037a0:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2220      	movs	r2, #32
 80037a6:	2100      	movs	r1, #0
 80037a8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	0018      	movs	r0, r3
 80037ae:	46bd      	mov	sp, r7
 80037b0:	b002      	add	sp, #8
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037bc:	210f      	movs	r1, #15
 80037be:	187b      	adds	r3, r7, r1
 80037c0:	2200      	movs	r2, #0
 80037c2:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2221      	movs	r2, #33	; 0x21
 80037c8:	5c9b      	ldrb	r3, [r3, r2]
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d006      	beq.n	80037de <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2204      	movs	r2, #4
 80037d4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80037d6:	187b      	adds	r3, r7, r1
 80037d8:	2201      	movs	r2, #1
 80037da:	701a      	strb	r2, [r3, #0]
 80037dc:	e028      	b.n	8003830 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	210e      	movs	r1, #14
 80037ea:	438a      	bics	r2, r1
 80037ec:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2101      	movs	r1, #1
 80037fa:	438a      	bics	r2, r1
 80037fc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003806:	2101      	movs	r1, #1
 8003808:	4091      	lsls	r1, r2
 800380a:	000a      	movs	r2, r1
 800380c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2221      	movs	r2, #33	; 0x21
 8003812:	2101      	movs	r1, #1
 8003814:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2220      	movs	r2, #32
 800381a:	2100      	movs	r1, #0
 800381c:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003822:	2b00      	cmp	r3, #0
 8003824:	d004      	beq.n	8003830 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	0010      	movs	r0, r2
 800382e:	4798      	blx	r3
    } 
  }
  return status;
 8003830:	230f      	movs	r3, #15
 8003832:	18fb      	adds	r3, r7, r3
 8003834:	781b      	ldrb	r3, [r3, #0]
}
 8003836:	0018      	movs	r0, r3
 8003838:	46bd      	mov	sp, r7
 800383a:	b004      	add	sp, #16
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b084      	sub	sp, #16
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	2204      	movs	r2, #4
 800385c:	409a      	lsls	r2, r3
 800385e:	0013      	movs	r3, r2
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	4013      	ands	r3, r2
 8003864:	d024      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x72>
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	2204      	movs	r2, #4
 800386a:	4013      	ands	r3, r2
 800386c:	d020      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2220      	movs	r2, #32
 8003876:	4013      	ands	r3, r2
 8003878:	d107      	bne.n	800388a <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2104      	movs	r1, #4
 8003886:	438a      	bics	r2, r1
 8003888:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003892:	2104      	movs	r1, #4
 8003894:	4091      	lsls	r1, r2
 8003896:	000a      	movs	r2, r1
 8003898:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d100      	bne.n	80038a4 <HAL_DMA_IRQHandler+0x66>
 80038a2:	e06a      	b.n	800397a <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	0010      	movs	r0, r2
 80038ac:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80038ae:	e064      	b.n	800397a <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	2202      	movs	r2, #2
 80038b6:	409a      	lsls	r2, r3
 80038b8:	0013      	movs	r3, r2
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	4013      	ands	r3, r2
 80038be:	d02b      	beq.n	8003918 <HAL_DMA_IRQHandler+0xda>
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2202      	movs	r2, #2
 80038c4:	4013      	ands	r3, r2
 80038c6:	d027      	beq.n	8003918 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2220      	movs	r2, #32
 80038d0:	4013      	ands	r3, r2
 80038d2:	d10b      	bne.n	80038ec <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	210a      	movs	r1, #10
 80038e0:	438a      	bics	r2, r1
 80038e2:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2221      	movs	r2, #33	; 0x21
 80038e8:	2101      	movs	r1, #1
 80038ea:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f4:	2102      	movs	r1, #2
 80038f6:	4091      	lsls	r1, r2
 80038f8:	000a      	movs	r2, r1
 80038fa:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2220      	movs	r2, #32
 8003900:	2100      	movs	r1, #0
 8003902:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003908:	2b00      	cmp	r3, #0
 800390a:	d036      	beq.n	800397a <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	0010      	movs	r0, r2
 8003914:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003916:	e030      	b.n	800397a <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391c:	2208      	movs	r2, #8
 800391e:	409a      	lsls	r2, r3
 8003920:	0013      	movs	r3, r2
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	4013      	ands	r3, r2
 8003926:	d028      	beq.n	800397a <HAL_DMA_IRQHandler+0x13c>
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	2208      	movs	r2, #8
 800392c:	4013      	ands	r3, r2
 800392e:	d024      	beq.n	800397a <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	210e      	movs	r1, #14
 800393c:	438a      	bics	r2, r1
 800393e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003948:	2101      	movs	r1, #1
 800394a:	4091      	lsls	r1, r2
 800394c:	000a      	movs	r2, r1
 800394e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2221      	movs	r2, #33	; 0x21
 800395a:	2101      	movs	r1, #1
 800395c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2220      	movs	r2, #32
 8003962:	2100      	movs	r1, #0
 8003964:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	2b00      	cmp	r3, #0
 800396c:	d005      	beq.n	800397a <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	0010      	movs	r0, r2
 8003976:	4798      	blx	r3
    }
   }
}  
 8003978:	e7ff      	b.n	800397a <HAL_DMA_IRQHandler+0x13c>
 800397a:	46c0      	nop			; (mov r8, r8)
 800397c:	46bd      	mov	sp, r7
 800397e:	b004      	add	sp, #16
 8003980:	bd80      	pop	{r7, pc}

08003982 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b084      	sub	sp, #16
 8003986:	af00      	add	r7, sp, #0
 8003988:	60f8      	str	r0, [r7, #12]
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	607a      	str	r2, [r7, #4]
 800398e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003998:	2101      	movs	r1, #1
 800399a:	4091      	lsls	r1, r2
 800399c:	000a      	movs	r2, r1
 800399e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2b10      	cmp	r3, #16
 80039ae:	d108      	bne.n	80039c2 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80039c0:	e007      	b.n	80039d2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	60da      	str	r2, [r3, #12]
}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	46bd      	mov	sp, r7
 80039d6:	b004      	add	sp, #16
 80039d8:	bd80      	pop	{r7, pc}
	...

080039dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a08      	ldr	r2, [pc, #32]	; (8003a0c <DMA_CalcBaseAndBitshift+0x30>)
 80039ea:	4694      	mov	ip, r2
 80039ec:	4463      	add	r3, ip
 80039ee:	2114      	movs	r1, #20
 80039f0:	0018      	movs	r0, r3
 80039f2:	f7fc fba5 	bl	8000140 <__udivsi3>
 80039f6:	0003      	movs	r3, r0
 80039f8:	009a      	lsls	r2, r3, #2
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a03      	ldr	r2, [pc, #12]	; (8003a10 <DMA_CalcBaseAndBitshift+0x34>)
 8003a02:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003a04:	46c0      	nop			; (mov r8, r8)
 8003a06:	46bd      	mov	sp, r7
 8003a08:	b002      	add	sp, #8
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	bffdfff8 	.word	0xbffdfff8
 8003a10:	40020000 	.word	0x40020000

08003a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a22:	e14f      	b.n	8003cc4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2101      	movs	r1, #1
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	4091      	lsls	r1, r2
 8003a2e:	000a      	movs	r2, r1
 8003a30:	4013      	ands	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d100      	bne.n	8003a3c <HAL_GPIO_Init+0x28>
 8003a3a:	e140      	b.n	8003cbe <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2203      	movs	r2, #3
 8003a42:	4013      	ands	r3, r2
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d005      	beq.n	8003a54 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2203      	movs	r2, #3
 8003a4e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d130      	bne.n	8003ab6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	2203      	movs	r2, #3
 8003a60:	409a      	lsls	r2, r3
 8003a62:	0013      	movs	r3, r2
 8003a64:	43da      	mvns	r2, r3
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	68da      	ldr	r2, [r3, #12]
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	409a      	lsls	r2, r3
 8003a76:	0013      	movs	r3, r2
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	409a      	lsls	r2, r3
 8003a90:	0013      	movs	r3, r2
 8003a92:	43da      	mvns	r2, r3
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	4013      	ands	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	091b      	lsrs	r3, r3, #4
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	401a      	ands	r2, r3
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	409a      	lsls	r2, r3
 8003aa8:	0013      	movs	r3, r2
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2203      	movs	r2, #3
 8003abc:	4013      	ands	r3, r2
 8003abe:	2b03      	cmp	r3, #3
 8003ac0:	d017      	beq.n	8003af2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	2203      	movs	r2, #3
 8003ace:	409a      	lsls	r2, r3
 8003ad0:	0013      	movs	r3, r2
 8003ad2:	43da      	mvns	r2, r3
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	409a      	lsls	r2, r3
 8003ae4:	0013      	movs	r3, r2
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2203      	movs	r2, #3
 8003af8:	4013      	ands	r3, r2
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d123      	bne.n	8003b46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	08da      	lsrs	r2, r3, #3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	3208      	adds	r2, #8
 8003b06:	0092      	lsls	r2, r2, #2
 8003b08:	58d3      	ldr	r3, [r2, r3]
 8003b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	2207      	movs	r2, #7
 8003b10:	4013      	ands	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	220f      	movs	r2, #15
 8003b16:	409a      	lsls	r2, r3
 8003b18:	0013      	movs	r3, r2
 8003b1a:	43da      	mvns	r2, r3
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	691a      	ldr	r2, [r3, #16]
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2107      	movs	r1, #7
 8003b2a:	400b      	ands	r3, r1
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	409a      	lsls	r2, r3
 8003b30:	0013      	movs	r3, r2
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	08da      	lsrs	r2, r3, #3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3208      	adds	r2, #8
 8003b40:	0092      	lsls	r2, r2, #2
 8003b42:	6939      	ldr	r1, [r7, #16]
 8003b44:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	2203      	movs	r2, #3
 8003b52:	409a      	lsls	r2, r3
 8003b54:	0013      	movs	r3, r2
 8003b56:	43da      	mvns	r2, r3
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2203      	movs	r2, #3
 8003b64:	401a      	ands	r2, r3
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	409a      	lsls	r2, r3
 8003b6c:	0013      	movs	r3, r2
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	23c0      	movs	r3, #192	; 0xc0
 8003b80:	029b      	lsls	r3, r3, #10
 8003b82:	4013      	ands	r3, r2
 8003b84:	d100      	bne.n	8003b88 <HAL_GPIO_Init+0x174>
 8003b86:	e09a      	b.n	8003cbe <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b88:	4b54      	ldr	r3, [pc, #336]	; (8003cdc <HAL_GPIO_Init+0x2c8>)
 8003b8a:	699a      	ldr	r2, [r3, #24]
 8003b8c:	4b53      	ldr	r3, [pc, #332]	; (8003cdc <HAL_GPIO_Init+0x2c8>)
 8003b8e:	2101      	movs	r1, #1
 8003b90:	430a      	orrs	r2, r1
 8003b92:	619a      	str	r2, [r3, #24]
 8003b94:	4b51      	ldr	r3, [pc, #324]	; (8003cdc <HAL_GPIO_Init+0x2c8>)
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	60bb      	str	r3, [r7, #8]
 8003b9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ba0:	4a4f      	ldr	r2, [pc, #316]	; (8003ce0 <HAL_GPIO_Init+0x2cc>)
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	089b      	lsrs	r3, r3, #2
 8003ba6:	3302      	adds	r3, #2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	589b      	ldr	r3, [r3, r2]
 8003bac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	220f      	movs	r2, #15
 8003bb8:	409a      	lsls	r2, r3
 8003bba:	0013      	movs	r3, r2
 8003bbc:	43da      	mvns	r2, r3
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	2390      	movs	r3, #144	; 0x90
 8003bc8:	05db      	lsls	r3, r3, #23
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d013      	beq.n	8003bf6 <HAL_GPIO_Init+0x1e2>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a44      	ldr	r2, [pc, #272]	; (8003ce4 <HAL_GPIO_Init+0x2d0>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d00d      	beq.n	8003bf2 <HAL_GPIO_Init+0x1de>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a43      	ldr	r2, [pc, #268]	; (8003ce8 <HAL_GPIO_Init+0x2d4>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d007      	beq.n	8003bee <HAL_GPIO_Init+0x1da>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a42      	ldr	r2, [pc, #264]	; (8003cec <HAL_GPIO_Init+0x2d8>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d101      	bne.n	8003bea <HAL_GPIO_Init+0x1d6>
 8003be6:	2303      	movs	r3, #3
 8003be8:	e006      	b.n	8003bf8 <HAL_GPIO_Init+0x1e4>
 8003bea:	2305      	movs	r3, #5
 8003bec:	e004      	b.n	8003bf8 <HAL_GPIO_Init+0x1e4>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e002      	b.n	8003bf8 <HAL_GPIO_Init+0x1e4>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e000      	b.n	8003bf8 <HAL_GPIO_Init+0x1e4>
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	2103      	movs	r1, #3
 8003bfc:	400a      	ands	r2, r1
 8003bfe:	0092      	lsls	r2, r2, #2
 8003c00:	4093      	lsls	r3, r2
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c08:	4935      	ldr	r1, [pc, #212]	; (8003ce0 <HAL_GPIO_Init+0x2cc>)
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	089b      	lsrs	r3, r3, #2
 8003c0e:	3302      	adds	r3, #2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c16:	4b36      	ldr	r3, [pc, #216]	; (8003cf0 <HAL_GPIO_Init+0x2dc>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	43da      	mvns	r2, r3
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	4013      	ands	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	2380      	movs	r3, #128	; 0x80
 8003c2c:	025b      	lsls	r3, r3, #9
 8003c2e:	4013      	ands	r3, r2
 8003c30:	d003      	beq.n	8003c3a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003c3a:	4b2d      	ldr	r3, [pc, #180]	; (8003cf0 <HAL_GPIO_Init+0x2dc>)
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003c40:	4b2b      	ldr	r3, [pc, #172]	; (8003cf0 <HAL_GPIO_Init+0x2dc>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	43da      	mvns	r2, r3
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	2380      	movs	r3, #128	; 0x80
 8003c56:	029b      	lsls	r3, r3, #10
 8003c58:	4013      	ands	r3, r2
 8003c5a:	d003      	beq.n	8003c64 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003c64:	4b22      	ldr	r3, [pc, #136]	; (8003cf0 <HAL_GPIO_Init+0x2dc>)
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c6a:	4b21      	ldr	r3, [pc, #132]	; (8003cf0 <HAL_GPIO_Init+0x2dc>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	43da      	mvns	r2, r3
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	4013      	ands	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	2380      	movs	r3, #128	; 0x80
 8003c80:	035b      	lsls	r3, r3, #13
 8003c82:	4013      	ands	r3, r2
 8003c84:	d003      	beq.n	8003c8e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003c8e:	4b18      	ldr	r3, [pc, #96]	; (8003cf0 <HAL_GPIO_Init+0x2dc>)
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003c94:	4b16      	ldr	r3, [pc, #88]	; (8003cf0 <HAL_GPIO_Init+0x2dc>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	43da      	mvns	r2, r3
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685a      	ldr	r2, [r3, #4]
 8003ca8:	2380      	movs	r3, #128	; 0x80
 8003caa:	039b      	lsls	r3, r3, #14
 8003cac:	4013      	ands	r3, r2
 8003cae:	d003      	beq.n	8003cb8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003cb8:	4b0d      	ldr	r3, [pc, #52]	; (8003cf0 <HAL_GPIO_Init+0x2dc>)
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	40da      	lsrs	r2, r3
 8003ccc:	1e13      	subs	r3, r2, #0
 8003cce:	d000      	beq.n	8003cd2 <HAL_GPIO_Init+0x2be>
 8003cd0:	e6a8      	b.n	8003a24 <HAL_GPIO_Init+0x10>
  } 
}
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	46c0      	nop			; (mov r8, r8)
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	b006      	add	sp, #24
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	40010000 	.word	0x40010000
 8003ce4:	48000400 	.word	0x48000400
 8003ce8:	48000800 	.word	0x48000800
 8003cec:	48000c00 	.word	0x48000c00
 8003cf0:	40010400 	.word	0x40010400

08003cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	0008      	movs	r0, r1
 8003cfe:	0011      	movs	r1, r2
 8003d00:	1cbb      	adds	r3, r7, #2
 8003d02:	1c02      	adds	r2, r0, #0
 8003d04:	801a      	strh	r2, [r3, #0]
 8003d06:	1c7b      	adds	r3, r7, #1
 8003d08:	1c0a      	adds	r2, r1, #0
 8003d0a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d0c:	1c7b      	adds	r3, r7, #1
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d004      	beq.n	8003d1e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d14:	1cbb      	adds	r3, r7, #2
 8003d16:	881a      	ldrh	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d1c:	e003      	b.n	8003d26 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d1e:	1cbb      	adds	r3, r7, #2
 8003d20:	881a      	ldrh	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	b002      	add	sp, #8
 8003d2c:	bd80      	pop	{r7, pc}
	...

08003d30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e082      	b.n	8003e48 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2241      	movs	r2, #65	; 0x41
 8003d46:	5c9b      	ldrb	r3, [r3, r2]
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d107      	bne.n	8003d5e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2240      	movs	r2, #64	; 0x40
 8003d52:	2100      	movs	r1, #0
 8003d54:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	0018      	movs	r0, r3
 8003d5a:	f7ff f8c1 	bl	8002ee0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2241      	movs	r2, #65	; 0x41
 8003d62:	2124      	movs	r1, #36	; 0x24
 8003d64:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2101      	movs	r1, #1
 8003d72:	438a      	bics	r2, r1
 8003d74:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4934      	ldr	r1, [pc, #208]	; (8003e50 <HAL_I2C_Init+0x120>)
 8003d80:	400a      	ands	r2, r1
 8003d82:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4931      	ldr	r1, [pc, #196]	; (8003e54 <HAL_I2C_Init+0x124>)
 8003d90:	400a      	ands	r2, r1
 8003d92:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d108      	bne.n	8003dae <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2180      	movs	r1, #128	; 0x80
 8003da6:	0209      	lsls	r1, r1, #8
 8003da8:	430a      	orrs	r2, r1
 8003daa:	609a      	str	r2, [r3, #8]
 8003dac:	e007      	b.n	8003dbe <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689a      	ldr	r2, [r3, #8]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2184      	movs	r1, #132	; 0x84
 8003db8:	0209      	lsls	r1, r1, #8
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d104      	bne.n	8003dd0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2280      	movs	r2, #128	; 0x80
 8003dcc:	0112      	lsls	r2, r2, #4
 8003dce:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	491f      	ldr	r1, [pc, #124]	; (8003e58 <HAL_I2C_Init+0x128>)
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68da      	ldr	r2, [r3, #12]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	491a      	ldr	r1, [pc, #104]	; (8003e54 <HAL_I2C_Init+0x124>)
 8003dec:	400a      	ands	r2, r1
 8003dee:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691a      	ldr	r2, [r3, #16]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69d9      	ldr	r1, [r3, #28]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1a      	ldr	r2, [r3, #32]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2101      	movs	r1, #1
 8003e26:	430a      	orrs	r2, r1
 8003e28:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2241      	movs	r2, #65	; 0x41
 8003e34:	2120      	movs	r1, #32
 8003e36:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2242      	movs	r2, #66	; 0x42
 8003e42:	2100      	movs	r1, #0
 8003e44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	0018      	movs	r0, r3
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	b002      	add	sp, #8
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	f0ffffff 	.word	0xf0ffffff
 8003e54:	ffff7fff 	.word	0xffff7fff
 8003e58:	02008000 	.word	0x02008000

08003e5c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003e5c:	b590      	push	{r4, r7, lr}
 8003e5e:	b089      	sub	sp, #36	; 0x24
 8003e60:	af02      	add	r7, sp, #8
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	0008      	movs	r0, r1
 8003e66:	607a      	str	r2, [r7, #4]
 8003e68:	0019      	movs	r1, r3
 8003e6a:	230a      	movs	r3, #10
 8003e6c:	18fb      	adds	r3, r7, r3
 8003e6e:	1c02      	adds	r2, r0, #0
 8003e70:	801a      	strh	r2, [r3, #0]
 8003e72:	2308      	movs	r3, #8
 8003e74:	18fb      	adds	r3, r7, r3
 8003e76:	1c0a      	adds	r2, r1, #0
 8003e78:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2241      	movs	r2, #65	; 0x41
 8003e7e:	5c9b      	ldrb	r3, [r3, r2]
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b20      	cmp	r3, #32
 8003e84:	d000      	beq.n	8003e88 <HAL_I2C_Master_Transmit+0x2c>
 8003e86:	e0e7      	b.n	8004058 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2240      	movs	r2, #64	; 0x40
 8003e8c:	5c9b      	ldrb	r3, [r3, r2]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d101      	bne.n	8003e96 <HAL_I2C_Master_Transmit+0x3a>
 8003e92:	2302      	movs	r3, #2
 8003e94:	e0e1      	b.n	800405a <HAL_I2C_Master_Transmit+0x1fe>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2240      	movs	r2, #64	; 0x40
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e9e:	f7ff fa97 	bl	80033d0 <HAL_GetTick>
 8003ea2:	0003      	movs	r3, r0
 8003ea4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ea6:	2380      	movs	r3, #128	; 0x80
 8003ea8:	0219      	lsls	r1, r3, #8
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	2319      	movs	r3, #25
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f000 f8fc 	bl	80040b0 <I2C_WaitOnFlagUntilTimeout>
 8003eb8:	1e03      	subs	r3, r0, #0
 8003eba:	d001      	beq.n	8003ec0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e0cc      	b.n	800405a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2241      	movs	r2, #65	; 0x41
 8003ec4:	2121      	movs	r1, #33	; 0x21
 8003ec6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2242      	movs	r2, #66	; 0x42
 8003ecc:	2110      	movs	r1, #16
 8003ece:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2208      	movs	r2, #8
 8003ee0:	18ba      	adds	r2, r7, r2
 8003ee2:	8812      	ldrh	r2, [r2, #0]
 8003ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	2bff      	cmp	r3, #255	; 0xff
 8003ef4:	d911      	bls.n	8003f1a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	22ff      	movs	r2, #255	; 0xff
 8003efa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	2380      	movs	r3, #128	; 0x80
 8003f04:	045c      	lsls	r4, r3, #17
 8003f06:	230a      	movs	r3, #10
 8003f08:	18fb      	adds	r3, r7, r3
 8003f0a:	8819      	ldrh	r1, [r3, #0]
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	4b55      	ldr	r3, [pc, #340]	; (8004064 <HAL_I2C_Master_Transmit+0x208>)
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	0023      	movs	r3, r4
 8003f14:	f000 fa00 	bl	8004318 <I2C_TransferConfig>
 8003f18:	e075      	b.n	8004006 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	2380      	movs	r3, #128	; 0x80
 8003f2c:	049c      	lsls	r4, r3, #18
 8003f2e:	230a      	movs	r3, #10
 8003f30:	18fb      	adds	r3, r7, r3
 8003f32:	8819      	ldrh	r1, [r3, #0]
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	4b4b      	ldr	r3, [pc, #300]	; (8004064 <HAL_I2C_Master_Transmit+0x208>)
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	0023      	movs	r3, r4
 8003f3c:	f000 f9ec 	bl	8004318 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003f40:	e061      	b.n	8004006 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	0018      	movs	r0, r3
 8003f4a:	f000 f8f0 	bl	800412e <I2C_WaitOnTXISFlagUntilTimeout>
 8003f4e:	1e03      	subs	r3, r0, #0
 8003f50:	d001      	beq.n	8003f56 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e081      	b.n	800405a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	781a      	ldrb	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	1c5a      	adds	r2, r3, #1
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d03a      	beq.n	8004006 <HAL_I2C_Master_Transmit+0x1aa>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d136      	bne.n	8004006 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	0013      	movs	r3, r2
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	2180      	movs	r1, #128	; 0x80
 8003fa6:	f000 f883 	bl	80040b0 <I2C_WaitOnFlagUntilTimeout>
 8003faa:	1e03      	subs	r3, r0, #0
 8003fac:	d001      	beq.n	8003fb2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e053      	b.n	800405a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	2bff      	cmp	r3, #255	; 0xff
 8003fba:	d911      	bls.n	8003fe0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	22ff      	movs	r2, #255	; 0xff
 8003fc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	2380      	movs	r3, #128	; 0x80
 8003fca:	045c      	lsls	r4, r3, #17
 8003fcc:	230a      	movs	r3, #10
 8003fce:	18fb      	adds	r3, r7, r3
 8003fd0:	8819      	ldrh	r1, [r3, #0]
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	0023      	movs	r3, r4
 8003fda:	f000 f99d 	bl	8004318 <I2C_TransferConfig>
 8003fde:	e012      	b.n	8004006 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	2380      	movs	r3, #128	; 0x80
 8003ff2:	049c      	lsls	r4, r3, #18
 8003ff4:	230a      	movs	r3, #10
 8003ff6:	18fb      	adds	r3, r7, r3
 8003ff8:	8819      	ldrh	r1, [r3, #0]
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	0023      	movs	r3, r4
 8004002:	f000 f989 	bl	8004318 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400a:	b29b      	uxth	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	d198      	bne.n	8003f42 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	0018      	movs	r0, r3
 8004018:	f000 f8c8 	bl	80041ac <I2C_WaitOnSTOPFlagUntilTimeout>
 800401c:	1e03      	subs	r3, r0, #0
 800401e:	d001      	beq.n	8004024 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e01a      	b.n	800405a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2220      	movs	r2, #32
 800402a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	490c      	ldr	r1, [pc, #48]	; (8004068 <HAL_I2C_Master_Transmit+0x20c>)
 8004038:	400a      	ands	r2, r1
 800403a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2241      	movs	r2, #65	; 0x41
 8004040:	2120      	movs	r1, #32
 8004042:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2242      	movs	r2, #66	; 0x42
 8004048:	2100      	movs	r1, #0
 800404a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2240      	movs	r2, #64	; 0x40
 8004050:	2100      	movs	r1, #0
 8004052:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004054:	2300      	movs	r3, #0
 8004056:	e000      	b.n	800405a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8004058:	2302      	movs	r3, #2
  }
}
 800405a:	0018      	movs	r0, r3
 800405c:	46bd      	mov	sp, r7
 800405e:	b007      	add	sp, #28
 8004060:	bd90      	pop	{r4, r7, pc}
 8004062:	46c0      	nop			; (mov r8, r8)
 8004064:	80002000 	.word	0x80002000
 8004068:	fe00e800 	.word	0xfe00e800

0800406c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	2202      	movs	r2, #2
 800407c:	4013      	ands	r3, r2
 800407e:	2b02      	cmp	r3, #2
 8004080:	d103      	bne.n	800408a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2200      	movs	r2, #0
 8004088:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	2201      	movs	r2, #1
 8004092:	4013      	ands	r3, r2
 8004094:	2b01      	cmp	r3, #1
 8004096:	d007      	beq.n	80040a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	699a      	ldr	r2, [r3, #24]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2101      	movs	r1, #1
 80040a4:	430a      	orrs	r2, r1
 80040a6:	619a      	str	r2, [r3, #24]
  }
}
 80040a8:	46c0      	nop			; (mov r8, r8)
 80040aa:	46bd      	mov	sp, r7
 80040ac:	b002      	add	sp, #8
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	603b      	str	r3, [r7, #0]
 80040bc:	1dfb      	adds	r3, r7, #7
 80040be:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040c0:	e021      	b.n	8004106 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	3301      	adds	r3, #1
 80040c6:	d01e      	beq.n	8004106 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c8:	f7ff f982 	bl	80033d0 <HAL_GetTick>
 80040cc:	0002      	movs	r2, r0
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d302      	bcc.n	80040de <I2C_WaitOnFlagUntilTimeout+0x2e>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d113      	bne.n	8004106 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e2:	2220      	movs	r2, #32
 80040e4:	431a      	orrs	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2241      	movs	r2, #65	; 0x41
 80040ee:	2120      	movs	r1, #32
 80040f0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2242      	movs	r2, #66	; 0x42
 80040f6:	2100      	movs	r1, #0
 80040f8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2240      	movs	r2, #64	; 0x40
 80040fe:	2100      	movs	r1, #0
 8004100:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e00f      	b.n	8004126 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	4013      	ands	r3, r2
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	425a      	negs	r2, r3
 8004116:	4153      	adcs	r3, r2
 8004118:	b2db      	uxtb	r3, r3
 800411a:	001a      	movs	r2, r3
 800411c:	1dfb      	adds	r3, r7, #7
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	429a      	cmp	r2, r3
 8004122:	d0ce      	beq.n	80040c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	0018      	movs	r0, r3
 8004128:	46bd      	mov	sp, r7
 800412a:	b004      	add	sp, #16
 800412c:	bd80      	pop	{r7, pc}

0800412e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b084      	sub	sp, #16
 8004132:	af00      	add	r7, sp, #0
 8004134:	60f8      	str	r0, [r7, #12]
 8004136:	60b9      	str	r1, [r7, #8]
 8004138:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800413a:	e02b      	b.n	8004194 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	68b9      	ldr	r1, [r7, #8]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	0018      	movs	r0, r3
 8004144:	f000 f86e 	bl	8004224 <I2C_IsAcknowledgeFailed>
 8004148:	1e03      	subs	r3, r0, #0
 800414a:	d001      	beq.n	8004150 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e029      	b.n	80041a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	3301      	adds	r3, #1
 8004154:	d01e      	beq.n	8004194 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004156:	f7ff f93b 	bl	80033d0 <HAL_GetTick>
 800415a:	0002      	movs	r2, r0
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	429a      	cmp	r2, r3
 8004164:	d302      	bcc.n	800416c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d113      	bne.n	8004194 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004170:	2220      	movs	r2, #32
 8004172:	431a      	orrs	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2241      	movs	r2, #65	; 0x41
 800417c:	2120      	movs	r1, #32
 800417e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2242      	movs	r2, #66	; 0x42
 8004184:	2100      	movs	r1, #0
 8004186:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2240      	movs	r2, #64	; 0x40
 800418c:	2100      	movs	r1, #0
 800418e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e007      	b.n	80041a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	2202      	movs	r2, #2
 800419c:	4013      	ands	r3, r2
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d1cc      	bne.n	800413c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	0018      	movs	r0, r3
 80041a6:	46bd      	mov	sp, r7
 80041a8:	b004      	add	sp, #16
 80041aa:	bd80      	pop	{r7, pc}

080041ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041b8:	e028      	b.n	800420c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	68b9      	ldr	r1, [r7, #8]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	0018      	movs	r0, r3
 80041c2:	f000 f82f 	bl	8004224 <I2C_IsAcknowledgeFailed>
 80041c6:	1e03      	subs	r3, r0, #0
 80041c8:	d001      	beq.n	80041ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e026      	b.n	800421c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ce:	f7ff f8ff 	bl	80033d0 <HAL_GetTick>
 80041d2:	0002      	movs	r2, r0
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d302      	bcc.n	80041e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d113      	bne.n	800420c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e8:	2220      	movs	r2, #32
 80041ea:	431a      	orrs	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2241      	movs	r2, #65	; 0x41
 80041f4:	2120      	movs	r1, #32
 80041f6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2242      	movs	r2, #66	; 0x42
 80041fc:	2100      	movs	r1, #0
 80041fe:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2240      	movs	r2, #64	; 0x40
 8004204:	2100      	movs	r1, #0
 8004206:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e007      	b.n	800421c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	2220      	movs	r2, #32
 8004214:	4013      	ands	r3, r2
 8004216:	2b20      	cmp	r3, #32
 8004218:	d1cf      	bne.n	80041ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	0018      	movs	r0, r3
 800421e:	46bd      	mov	sp, r7
 8004220:	b004      	add	sp, #16
 8004222:	bd80      	pop	{r7, pc}

08004224 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	2210      	movs	r2, #16
 8004238:	4013      	ands	r3, r2
 800423a:	2b10      	cmp	r3, #16
 800423c:	d164      	bne.n	8004308 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	2380      	movs	r3, #128	; 0x80
 8004246:	049b      	lsls	r3, r3, #18
 8004248:	401a      	ands	r2, r3
 800424a:	2380      	movs	r3, #128	; 0x80
 800424c:	049b      	lsls	r3, r3, #18
 800424e:	429a      	cmp	r2, r3
 8004250:	d02b      	beq.n	80042aa <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2180      	movs	r1, #128	; 0x80
 800425e:	01c9      	lsls	r1, r1, #7
 8004260:	430a      	orrs	r2, r1
 8004262:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004264:	e021      	b.n	80042aa <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	3301      	adds	r3, #1
 800426a:	d01e      	beq.n	80042aa <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800426c:	f7ff f8b0 	bl	80033d0 <HAL_GetTick>
 8004270:	0002      	movs	r2, r0
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	429a      	cmp	r2, r3
 800427a:	d302      	bcc.n	8004282 <I2C_IsAcknowledgeFailed+0x5e>
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d113      	bne.n	80042aa <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004286:	2220      	movs	r2, #32
 8004288:	431a      	orrs	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2241      	movs	r2, #65	; 0x41
 8004292:	2120      	movs	r1, #32
 8004294:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2242      	movs	r2, #66	; 0x42
 800429a:	2100      	movs	r1, #0
 800429c:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2240      	movs	r2, #64	; 0x40
 80042a2:	2100      	movs	r1, #0
 80042a4:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e02f      	b.n	800430a <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	2220      	movs	r2, #32
 80042b2:	4013      	ands	r3, r2
 80042b4:	2b20      	cmp	r3, #32
 80042b6:	d1d6      	bne.n	8004266 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2210      	movs	r2, #16
 80042be:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2220      	movs	r2, #32
 80042c6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	0018      	movs	r0, r3
 80042cc:	f7ff fece 	bl	800406c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	490e      	ldr	r1, [pc, #56]	; (8004314 <I2C_IsAcknowledgeFailed+0xf0>)
 80042dc:	400a      	ands	r2, r1
 80042de:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e4:	2204      	movs	r2, #4
 80042e6:	431a      	orrs	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2241      	movs	r2, #65	; 0x41
 80042f0:	2120      	movs	r1, #32
 80042f2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2242      	movs	r2, #66	; 0x42
 80042f8:	2100      	movs	r1, #0
 80042fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2240      	movs	r2, #64	; 0x40
 8004300:	2100      	movs	r1, #0
 8004302:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e000      	b.n	800430a <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	0018      	movs	r0, r3
 800430c:	46bd      	mov	sp, r7
 800430e:	b004      	add	sp, #16
 8004310:	bd80      	pop	{r7, pc}
 8004312:	46c0      	nop			; (mov r8, r8)
 8004314:	fe00e800 	.word	0xfe00e800

08004318 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004318:	b590      	push	{r4, r7, lr}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	0008      	movs	r0, r1
 8004322:	0011      	movs	r1, r2
 8004324:	607b      	str	r3, [r7, #4]
 8004326:	240a      	movs	r4, #10
 8004328:	193b      	adds	r3, r7, r4
 800432a:	1c02      	adds	r2, r0, #0
 800432c:	801a      	strh	r2, [r3, #0]
 800432e:	2009      	movs	r0, #9
 8004330:	183b      	adds	r3, r7, r0
 8004332:	1c0a      	adds	r2, r1, #0
 8004334:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	6a3a      	ldr	r2, [r7, #32]
 800433e:	0d51      	lsrs	r1, r2, #21
 8004340:	2280      	movs	r2, #128	; 0x80
 8004342:	00d2      	lsls	r2, r2, #3
 8004344:	400a      	ands	r2, r1
 8004346:	490e      	ldr	r1, [pc, #56]	; (8004380 <I2C_TransferConfig+0x68>)
 8004348:	430a      	orrs	r2, r1
 800434a:	43d2      	mvns	r2, r2
 800434c:	401a      	ands	r2, r3
 800434e:	0011      	movs	r1, r2
 8004350:	193b      	adds	r3, r7, r4
 8004352:	881b      	ldrh	r3, [r3, #0]
 8004354:	059b      	lsls	r3, r3, #22
 8004356:	0d9a      	lsrs	r2, r3, #22
 8004358:	183b      	adds	r3, r7, r0
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	0418      	lsls	r0, r3, #16
 800435e:	23ff      	movs	r3, #255	; 0xff
 8004360:	041b      	lsls	r3, r3, #16
 8004362:	4003      	ands	r3, r0
 8004364:	431a      	orrs	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	431a      	orrs	r2, r3
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	431a      	orrs	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004376:	46c0      	nop			; (mov r8, r8)
 8004378:	46bd      	mov	sp, r7
 800437a:	b005      	add	sp, #20
 800437c:	bd90      	pop	{r4, r7, pc}
 800437e:	46c0      	nop			; (mov r8, r8)
 8004380:	03ff63ff 	.word	0x03ff63ff

08004384 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2241      	movs	r2, #65	; 0x41
 8004392:	5c9b      	ldrb	r3, [r3, r2]
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b20      	cmp	r3, #32
 8004398:	d138      	bne.n	800440c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2240      	movs	r2, #64	; 0x40
 800439e:	5c9b      	ldrb	r3, [r3, r2]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d101      	bne.n	80043a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80043a4:	2302      	movs	r3, #2
 80043a6:	e032      	b.n	800440e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2240      	movs	r2, #64	; 0x40
 80043ac:	2101      	movs	r1, #1
 80043ae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2241      	movs	r2, #65	; 0x41
 80043b4:	2124      	movs	r1, #36	; 0x24
 80043b6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2101      	movs	r1, #1
 80043c4:	438a      	bics	r2, r1
 80043c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4911      	ldr	r1, [pc, #68]	; (8004418 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80043d4:	400a      	ands	r2, r1
 80043d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6819      	ldr	r1, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2101      	movs	r1, #1
 80043f4:	430a      	orrs	r2, r1
 80043f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2241      	movs	r2, #65	; 0x41
 80043fc:	2120      	movs	r1, #32
 80043fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2240      	movs	r2, #64	; 0x40
 8004404:	2100      	movs	r1, #0
 8004406:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004408:	2300      	movs	r3, #0
 800440a:	e000      	b.n	800440e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800440c:	2302      	movs	r3, #2
  }
}
 800440e:	0018      	movs	r0, r3
 8004410:	46bd      	mov	sp, r7
 8004412:	b002      	add	sp, #8
 8004414:	bd80      	pop	{r7, pc}
 8004416:	46c0      	nop			; (mov r8, r8)
 8004418:	ffffefff 	.word	0xffffefff

0800441c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2241      	movs	r2, #65	; 0x41
 800442a:	5c9b      	ldrb	r3, [r3, r2]
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b20      	cmp	r3, #32
 8004430:	d139      	bne.n	80044a6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2240      	movs	r2, #64	; 0x40
 8004436:	5c9b      	ldrb	r3, [r3, r2]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d101      	bne.n	8004440 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800443c:	2302      	movs	r3, #2
 800443e:	e033      	b.n	80044a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2240      	movs	r2, #64	; 0x40
 8004444:	2101      	movs	r1, #1
 8004446:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2241      	movs	r2, #65	; 0x41
 800444c:	2124      	movs	r1, #36	; 0x24
 800444e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2101      	movs	r1, #1
 800445c:	438a      	bics	r2, r1
 800445e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	4a11      	ldr	r2, [pc, #68]	; (80044b0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800446c:	4013      	ands	r3, r2
 800446e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	021b      	lsls	r3, r3, #8
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	4313      	orrs	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2101      	movs	r1, #1
 800448e:	430a      	orrs	r2, r1
 8004490:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2241      	movs	r2, #65	; 0x41
 8004496:	2120      	movs	r1, #32
 8004498:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2240      	movs	r2, #64	; 0x40
 800449e:	2100      	movs	r1, #0
 80044a0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80044a2:	2300      	movs	r3, #0
 80044a4:	e000      	b.n	80044a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80044a6:	2302      	movs	r3, #2
  }
}
 80044a8:	0018      	movs	r0, r3
 80044aa:	46bd      	mov	sp, r7
 80044ac:	b004      	add	sp, #16
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	fffff0ff 	.word	0xfffff0ff

080044b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b088      	sub	sp, #32
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e301      	b.n	8004aca <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2201      	movs	r2, #1
 80044cc:	4013      	ands	r3, r2
 80044ce:	d100      	bne.n	80044d2 <HAL_RCC_OscConfig+0x1e>
 80044d0:	e08d      	b.n	80045ee <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80044d2:	4bc3      	ldr	r3, [pc, #780]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	220c      	movs	r2, #12
 80044d8:	4013      	ands	r3, r2
 80044da:	2b04      	cmp	r3, #4
 80044dc:	d00e      	beq.n	80044fc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044de:	4bc0      	ldr	r3, [pc, #768]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	220c      	movs	r2, #12
 80044e4:	4013      	ands	r3, r2
 80044e6:	2b08      	cmp	r3, #8
 80044e8:	d116      	bne.n	8004518 <HAL_RCC_OscConfig+0x64>
 80044ea:	4bbd      	ldr	r3, [pc, #756]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	2380      	movs	r3, #128	; 0x80
 80044f0:	025b      	lsls	r3, r3, #9
 80044f2:	401a      	ands	r2, r3
 80044f4:	2380      	movs	r3, #128	; 0x80
 80044f6:	025b      	lsls	r3, r3, #9
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d10d      	bne.n	8004518 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044fc:	4bb8      	ldr	r3, [pc, #736]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	2380      	movs	r3, #128	; 0x80
 8004502:	029b      	lsls	r3, r3, #10
 8004504:	4013      	ands	r3, r2
 8004506:	d100      	bne.n	800450a <HAL_RCC_OscConfig+0x56>
 8004508:	e070      	b.n	80045ec <HAL_RCC_OscConfig+0x138>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d000      	beq.n	8004514 <HAL_RCC_OscConfig+0x60>
 8004512:	e06b      	b.n	80045ec <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e2d8      	b.n	8004aca <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d107      	bne.n	8004530 <HAL_RCC_OscConfig+0x7c>
 8004520:	4baf      	ldr	r3, [pc, #700]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	4bae      	ldr	r3, [pc, #696]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 8004526:	2180      	movs	r1, #128	; 0x80
 8004528:	0249      	lsls	r1, r1, #9
 800452a:	430a      	orrs	r2, r1
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	e02f      	b.n	8004590 <HAL_RCC_OscConfig+0xdc>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10c      	bne.n	8004552 <HAL_RCC_OscConfig+0x9e>
 8004538:	4ba9      	ldr	r3, [pc, #676]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	4ba8      	ldr	r3, [pc, #672]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 800453e:	49a9      	ldr	r1, [pc, #676]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 8004540:	400a      	ands	r2, r1
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	4ba6      	ldr	r3, [pc, #664]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	4ba5      	ldr	r3, [pc, #660]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 800454a:	49a7      	ldr	r1, [pc, #668]	; (80047e8 <HAL_RCC_OscConfig+0x334>)
 800454c:	400a      	ands	r2, r1
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	e01e      	b.n	8004590 <HAL_RCC_OscConfig+0xdc>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2b05      	cmp	r3, #5
 8004558:	d10e      	bne.n	8004578 <HAL_RCC_OscConfig+0xc4>
 800455a:	4ba1      	ldr	r3, [pc, #644]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	4ba0      	ldr	r3, [pc, #640]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 8004560:	2180      	movs	r1, #128	; 0x80
 8004562:	02c9      	lsls	r1, r1, #11
 8004564:	430a      	orrs	r2, r1
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	4b9d      	ldr	r3, [pc, #628]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	4b9c      	ldr	r3, [pc, #624]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 800456e:	2180      	movs	r1, #128	; 0x80
 8004570:	0249      	lsls	r1, r1, #9
 8004572:	430a      	orrs	r2, r1
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	e00b      	b.n	8004590 <HAL_RCC_OscConfig+0xdc>
 8004578:	4b99      	ldr	r3, [pc, #612]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	4b98      	ldr	r3, [pc, #608]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 800457e:	4999      	ldr	r1, [pc, #612]	; (80047e4 <HAL_RCC_OscConfig+0x330>)
 8004580:	400a      	ands	r2, r1
 8004582:	601a      	str	r2, [r3, #0]
 8004584:	4b96      	ldr	r3, [pc, #600]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	4b95      	ldr	r3, [pc, #596]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 800458a:	4997      	ldr	r1, [pc, #604]	; (80047e8 <HAL_RCC_OscConfig+0x334>)
 800458c:	400a      	ands	r2, r1
 800458e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d014      	beq.n	80045c2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004598:	f7fe ff1a 	bl	80033d0 <HAL_GetTick>
 800459c:	0003      	movs	r3, r0
 800459e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a0:	e008      	b.n	80045b4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045a2:	f7fe ff15 	bl	80033d0 <HAL_GetTick>
 80045a6:	0002      	movs	r2, r0
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b64      	cmp	r3, #100	; 0x64
 80045ae:	d901      	bls.n	80045b4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e28a      	b.n	8004aca <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045b4:	4b8a      	ldr	r3, [pc, #552]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	2380      	movs	r3, #128	; 0x80
 80045ba:	029b      	lsls	r3, r3, #10
 80045bc:	4013      	ands	r3, r2
 80045be:	d0f0      	beq.n	80045a2 <HAL_RCC_OscConfig+0xee>
 80045c0:	e015      	b.n	80045ee <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c2:	f7fe ff05 	bl	80033d0 <HAL_GetTick>
 80045c6:	0003      	movs	r3, r0
 80045c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045cc:	f7fe ff00 	bl	80033d0 <HAL_GetTick>
 80045d0:	0002      	movs	r2, r0
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b64      	cmp	r3, #100	; 0x64
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e275      	b.n	8004aca <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045de:	4b80      	ldr	r3, [pc, #512]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	2380      	movs	r3, #128	; 0x80
 80045e4:	029b      	lsls	r3, r3, #10
 80045e6:	4013      	ands	r3, r2
 80045e8:	d1f0      	bne.n	80045cc <HAL_RCC_OscConfig+0x118>
 80045ea:	e000      	b.n	80045ee <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ec:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2202      	movs	r2, #2
 80045f4:	4013      	ands	r3, r2
 80045f6:	d100      	bne.n	80045fa <HAL_RCC_OscConfig+0x146>
 80045f8:	e069      	b.n	80046ce <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80045fa:	4b79      	ldr	r3, [pc, #484]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	220c      	movs	r2, #12
 8004600:	4013      	ands	r3, r2
 8004602:	d00b      	beq.n	800461c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004604:	4b76      	ldr	r3, [pc, #472]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	220c      	movs	r2, #12
 800460a:	4013      	ands	r3, r2
 800460c:	2b08      	cmp	r3, #8
 800460e:	d11c      	bne.n	800464a <HAL_RCC_OscConfig+0x196>
 8004610:	4b73      	ldr	r3, [pc, #460]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	2380      	movs	r3, #128	; 0x80
 8004616:	025b      	lsls	r3, r3, #9
 8004618:	4013      	ands	r3, r2
 800461a:	d116      	bne.n	800464a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800461c:	4b70      	ldr	r3, [pc, #448]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2202      	movs	r2, #2
 8004622:	4013      	ands	r3, r2
 8004624:	d005      	beq.n	8004632 <HAL_RCC_OscConfig+0x17e>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d001      	beq.n	8004632 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e24b      	b.n	8004aca <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004632:	4b6b      	ldr	r3, [pc, #428]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	22f8      	movs	r2, #248	; 0xf8
 8004638:	4393      	bics	r3, r2
 800463a:	0019      	movs	r1, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	00da      	lsls	r2, r3, #3
 8004642:	4b67      	ldr	r3, [pc, #412]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 8004644:	430a      	orrs	r2, r1
 8004646:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004648:	e041      	b.n	80046ce <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d024      	beq.n	800469c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004652:	4b63      	ldr	r3, [pc, #396]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	4b62      	ldr	r3, [pc, #392]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 8004658:	2101      	movs	r1, #1
 800465a:	430a      	orrs	r2, r1
 800465c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800465e:	f7fe feb7 	bl	80033d0 <HAL_GetTick>
 8004662:	0003      	movs	r3, r0
 8004664:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004666:	e008      	b.n	800467a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004668:	f7fe feb2 	bl	80033d0 <HAL_GetTick>
 800466c:	0002      	movs	r2, r0
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b02      	cmp	r3, #2
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e227      	b.n	8004aca <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800467a:	4b59      	ldr	r3, [pc, #356]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2202      	movs	r2, #2
 8004680:	4013      	ands	r3, r2
 8004682:	d0f1      	beq.n	8004668 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004684:	4b56      	ldr	r3, [pc, #344]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	22f8      	movs	r2, #248	; 0xf8
 800468a:	4393      	bics	r3, r2
 800468c:	0019      	movs	r1, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	00da      	lsls	r2, r3, #3
 8004694:	4b52      	ldr	r3, [pc, #328]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 8004696:	430a      	orrs	r2, r1
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	e018      	b.n	80046ce <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800469c:	4b50      	ldr	r3, [pc, #320]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	4b4f      	ldr	r3, [pc, #316]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 80046a2:	2101      	movs	r1, #1
 80046a4:	438a      	bics	r2, r1
 80046a6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a8:	f7fe fe92 	bl	80033d0 <HAL_GetTick>
 80046ac:	0003      	movs	r3, r0
 80046ae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046b0:	e008      	b.n	80046c4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046b2:	f7fe fe8d 	bl	80033d0 <HAL_GetTick>
 80046b6:	0002      	movs	r2, r0
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d901      	bls.n	80046c4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e202      	b.n	8004aca <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046c4:	4b46      	ldr	r3, [pc, #280]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2202      	movs	r2, #2
 80046ca:	4013      	ands	r3, r2
 80046cc:	d1f1      	bne.n	80046b2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2208      	movs	r2, #8
 80046d4:	4013      	ands	r3, r2
 80046d6:	d036      	beq.n	8004746 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	69db      	ldr	r3, [r3, #28]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d019      	beq.n	8004714 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046e0:	4b3f      	ldr	r3, [pc, #252]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 80046e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046e4:	4b3e      	ldr	r3, [pc, #248]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 80046e6:	2101      	movs	r1, #1
 80046e8:	430a      	orrs	r2, r1
 80046ea:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ec:	f7fe fe70 	bl	80033d0 <HAL_GetTick>
 80046f0:	0003      	movs	r3, r0
 80046f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046f4:	e008      	b.n	8004708 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046f6:	f7fe fe6b 	bl	80033d0 <HAL_GetTick>
 80046fa:	0002      	movs	r2, r0
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d901      	bls.n	8004708 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e1e0      	b.n	8004aca <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004708:	4b35      	ldr	r3, [pc, #212]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 800470a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470c:	2202      	movs	r2, #2
 800470e:	4013      	ands	r3, r2
 8004710:	d0f1      	beq.n	80046f6 <HAL_RCC_OscConfig+0x242>
 8004712:	e018      	b.n	8004746 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004714:	4b32      	ldr	r3, [pc, #200]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 8004716:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004718:	4b31      	ldr	r3, [pc, #196]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 800471a:	2101      	movs	r1, #1
 800471c:	438a      	bics	r2, r1
 800471e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004720:	f7fe fe56 	bl	80033d0 <HAL_GetTick>
 8004724:	0003      	movs	r3, r0
 8004726:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004728:	e008      	b.n	800473c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800472a:	f7fe fe51 	bl	80033d0 <HAL_GetTick>
 800472e:	0002      	movs	r2, r0
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d901      	bls.n	800473c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e1c6      	b.n	8004aca <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800473c:	4b28      	ldr	r3, [pc, #160]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 800473e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004740:	2202      	movs	r2, #2
 8004742:	4013      	ands	r3, r2
 8004744:	d1f1      	bne.n	800472a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2204      	movs	r2, #4
 800474c:	4013      	ands	r3, r2
 800474e:	d100      	bne.n	8004752 <HAL_RCC_OscConfig+0x29e>
 8004750:	e0b4      	b.n	80048bc <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004752:	201f      	movs	r0, #31
 8004754:	183b      	adds	r3, r7, r0
 8004756:	2200      	movs	r2, #0
 8004758:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800475a:	4b21      	ldr	r3, [pc, #132]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 800475c:	69da      	ldr	r2, [r3, #28]
 800475e:	2380      	movs	r3, #128	; 0x80
 8004760:	055b      	lsls	r3, r3, #21
 8004762:	4013      	ands	r3, r2
 8004764:	d110      	bne.n	8004788 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004766:	4b1e      	ldr	r3, [pc, #120]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 8004768:	69da      	ldr	r2, [r3, #28]
 800476a:	4b1d      	ldr	r3, [pc, #116]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 800476c:	2180      	movs	r1, #128	; 0x80
 800476e:	0549      	lsls	r1, r1, #21
 8004770:	430a      	orrs	r2, r1
 8004772:	61da      	str	r2, [r3, #28]
 8004774:	4b1a      	ldr	r3, [pc, #104]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 8004776:	69da      	ldr	r2, [r3, #28]
 8004778:	2380      	movs	r3, #128	; 0x80
 800477a:	055b      	lsls	r3, r3, #21
 800477c:	4013      	ands	r3, r2
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004782:	183b      	adds	r3, r7, r0
 8004784:	2201      	movs	r2, #1
 8004786:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004788:	4b18      	ldr	r3, [pc, #96]	; (80047ec <HAL_RCC_OscConfig+0x338>)
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	2380      	movs	r3, #128	; 0x80
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	4013      	ands	r3, r2
 8004792:	d11a      	bne.n	80047ca <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004794:	4b15      	ldr	r3, [pc, #84]	; (80047ec <HAL_RCC_OscConfig+0x338>)
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	4b14      	ldr	r3, [pc, #80]	; (80047ec <HAL_RCC_OscConfig+0x338>)
 800479a:	2180      	movs	r1, #128	; 0x80
 800479c:	0049      	lsls	r1, r1, #1
 800479e:	430a      	orrs	r2, r1
 80047a0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047a2:	f7fe fe15 	bl	80033d0 <HAL_GetTick>
 80047a6:	0003      	movs	r3, r0
 80047a8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ac:	f7fe fe10 	bl	80033d0 <HAL_GetTick>
 80047b0:	0002      	movs	r2, r0
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b64      	cmp	r3, #100	; 0x64
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e185      	b.n	8004aca <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047be:	4b0b      	ldr	r3, [pc, #44]	; (80047ec <HAL_RCC_OscConfig+0x338>)
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	2380      	movs	r3, #128	; 0x80
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	4013      	ands	r3, r2
 80047c8:	d0f0      	beq.n	80047ac <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d10e      	bne.n	80047f0 <HAL_RCC_OscConfig+0x33c>
 80047d2:	4b03      	ldr	r3, [pc, #12]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 80047d4:	6a1a      	ldr	r2, [r3, #32]
 80047d6:	4b02      	ldr	r3, [pc, #8]	; (80047e0 <HAL_RCC_OscConfig+0x32c>)
 80047d8:	2101      	movs	r1, #1
 80047da:	430a      	orrs	r2, r1
 80047dc:	621a      	str	r2, [r3, #32]
 80047de:	e035      	b.n	800484c <HAL_RCC_OscConfig+0x398>
 80047e0:	40021000 	.word	0x40021000
 80047e4:	fffeffff 	.word	0xfffeffff
 80047e8:	fffbffff 	.word	0xfffbffff
 80047ec:	40007000 	.word	0x40007000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10c      	bne.n	8004812 <HAL_RCC_OscConfig+0x35e>
 80047f8:	4bb6      	ldr	r3, [pc, #728]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 80047fa:	6a1a      	ldr	r2, [r3, #32]
 80047fc:	4bb5      	ldr	r3, [pc, #724]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 80047fe:	2101      	movs	r1, #1
 8004800:	438a      	bics	r2, r1
 8004802:	621a      	str	r2, [r3, #32]
 8004804:	4bb3      	ldr	r3, [pc, #716]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 8004806:	6a1a      	ldr	r2, [r3, #32]
 8004808:	4bb2      	ldr	r3, [pc, #712]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 800480a:	2104      	movs	r1, #4
 800480c:	438a      	bics	r2, r1
 800480e:	621a      	str	r2, [r3, #32]
 8004810:	e01c      	b.n	800484c <HAL_RCC_OscConfig+0x398>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	2b05      	cmp	r3, #5
 8004818:	d10c      	bne.n	8004834 <HAL_RCC_OscConfig+0x380>
 800481a:	4bae      	ldr	r3, [pc, #696]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 800481c:	6a1a      	ldr	r2, [r3, #32]
 800481e:	4bad      	ldr	r3, [pc, #692]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 8004820:	2104      	movs	r1, #4
 8004822:	430a      	orrs	r2, r1
 8004824:	621a      	str	r2, [r3, #32]
 8004826:	4bab      	ldr	r3, [pc, #684]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 8004828:	6a1a      	ldr	r2, [r3, #32]
 800482a:	4baa      	ldr	r3, [pc, #680]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 800482c:	2101      	movs	r1, #1
 800482e:	430a      	orrs	r2, r1
 8004830:	621a      	str	r2, [r3, #32]
 8004832:	e00b      	b.n	800484c <HAL_RCC_OscConfig+0x398>
 8004834:	4ba7      	ldr	r3, [pc, #668]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 8004836:	6a1a      	ldr	r2, [r3, #32]
 8004838:	4ba6      	ldr	r3, [pc, #664]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 800483a:	2101      	movs	r1, #1
 800483c:	438a      	bics	r2, r1
 800483e:	621a      	str	r2, [r3, #32]
 8004840:	4ba4      	ldr	r3, [pc, #656]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 8004842:	6a1a      	ldr	r2, [r3, #32]
 8004844:	4ba3      	ldr	r3, [pc, #652]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 8004846:	2104      	movs	r1, #4
 8004848:	438a      	bics	r2, r1
 800484a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d014      	beq.n	800487e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004854:	f7fe fdbc 	bl	80033d0 <HAL_GetTick>
 8004858:	0003      	movs	r3, r0
 800485a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800485c:	e009      	b.n	8004872 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800485e:	f7fe fdb7 	bl	80033d0 <HAL_GetTick>
 8004862:	0002      	movs	r2, r0
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	4a9b      	ldr	r2, [pc, #620]	; (8004ad8 <HAL_RCC_OscConfig+0x624>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e12b      	b.n	8004aca <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004872:	4b98      	ldr	r3, [pc, #608]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	2202      	movs	r2, #2
 8004878:	4013      	ands	r3, r2
 800487a:	d0f0      	beq.n	800485e <HAL_RCC_OscConfig+0x3aa>
 800487c:	e013      	b.n	80048a6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800487e:	f7fe fda7 	bl	80033d0 <HAL_GetTick>
 8004882:	0003      	movs	r3, r0
 8004884:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004886:	e009      	b.n	800489c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004888:	f7fe fda2 	bl	80033d0 <HAL_GetTick>
 800488c:	0002      	movs	r2, r0
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	4a91      	ldr	r2, [pc, #580]	; (8004ad8 <HAL_RCC_OscConfig+0x624>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e116      	b.n	8004aca <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800489c:	4b8d      	ldr	r3, [pc, #564]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	2202      	movs	r2, #2
 80048a2:	4013      	ands	r3, r2
 80048a4:	d1f0      	bne.n	8004888 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80048a6:	231f      	movs	r3, #31
 80048a8:	18fb      	adds	r3, r7, r3
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d105      	bne.n	80048bc <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048b0:	4b88      	ldr	r3, [pc, #544]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 80048b2:	69da      	ldr	r2, [r3, #28]
 80048b4:	4b87      	ldr	r3, [pc, #540]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 80048b6:	4989      	ldr	r1, [pc, #548]	; (8004adc <HAL_RCC_OscConfig+0x628>)
 80048b8:	400a      	ands	r2, r1
 80048ba:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2210      	movs	r2, #16
 80048c2:	4013      	ands	r3, r2
 80048c4:	d063      	beq.n	800498e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d12a      	bne.n	8004924 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80048ce:	4b81      	ldr	r3, [pc, #516]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 80048d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048d2:	4b80      	ldr	r3, [pc, #512]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 80048d4:	2104      	movs	r1, #4
 80048d6:	430a      	orrs	r2, r1
 80048d8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80048da:	4b7e      	ldr	r3, [pc, #504]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 80048dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048de:	4b7d      	ldr	r3, [pc, #500]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 80048e0:	2101      	movs	r1, #1
 80048e2:	430a      	orrs	r2, r1
 80048e4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048e6:	f7fe fd73 	bl	80033d0 <HAL_GetTick>
 80048ea:	0003      	movs	r3, r0
 80048ec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80048f0:	f7fe fd6e 	bl	80033d0 <HAL_GetTick>
 80048f4:	0002      	movs	r2, r0
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e0e3      	b.n	8004aca <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004902:	4b74      	ldr	r3, [pc, #464]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 8004904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004906:	2202      	movs	r2, #2
 8004908:	4013      	ands	r3, r2
 800490a:	d0f1      	beq.n	80048f0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800490c:	4b71      	ldr	r3, [pc, #452]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 800490e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004910:	22f8      	movs	r2, #248	; 0xf8
 8004912:	4393      	bics	r3, r2
 8004914:	0019      	movs	r1, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	00da      	lsls	r2, r3, #3
 800491c:	4b6d      	ldr	r3, [pc, #436]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 800491e:	430a      	orrs	r2, r1
 8004920:	635a      	str	r2, [r3, #52]	; 0x34
 8004922:	e034      	b.n	800498e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	695b      	ldr	r3, [r3, #20]
 8004928:	3305      	adds	r3, #5
 800492a:	d111      	bne.n	8004950 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800492c:	4b69      	ldr	r3, [pc, #420]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 800492e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004930:	4b68      	ldr	r3, [pc, #416]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 8004932:	2104      	movs	r1, #4
 8004934:	438a      	bics	r2, r1
 8004936:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004938:	4b66      	ldr	r3, [pc, #408]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 800493a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493c:	22f8      	movs	r2, #248	; 0xf8
 800493e:	4393      	bics	r3, r2
 8004940:	0019      	movs	r1, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	00da      	lsls	r2, r3, #3
 8004948:	4b62      	ldr	r3, [pc, #392]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 800494a:	430a      	orrs	r2, r1
 800494c:	635a      	str	r2, [r3, #52]	; 0x34
 800494e:	e01e      	b.n	800498e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004950:	4b60      	ldr	r3, [pc, #384]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 8004952:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004954:	4b5f      	ldr	r3, [pc, #380]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 8004956:	2104      	movs	r1, #4
 8004958:	430a      	orrs	r2, r1
 800495a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800495c:	4b5d      	ldr	r3, [pc, #372]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 800495e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004960:	4b5c      	ldr	r3, [pc, #368]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 8004962:	2101      	movs	r1, #1
 8004964:	438a      	bics	r2, r1
 8004966:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004968:	f7fe fd32 	bl	80033d0 <HAL_GetTick>
 800496c:	0003      	movs	r3, r0
 800496e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004970:	e008      	b.n	8004984 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004972:	f7fe fd2d 	bl	80033d0 <HAL_GetTick>
 8004976:	0002      	movs	r2, r0
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	2b02      	cmp	r3, #2
 800497e:	d901      	bls.n	8004984 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e0a2      	b.n	8004aca <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004984:	4b53      	ldr	r3, [pc, #332]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 8004986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004988:	2202      	movs	r2, #2
 800498a:	4013      	ands	r3, r2
 800498c:	d1f1      	bne.n	8004972 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d100      	bne.n	8004998 <HAL_RCC_OscConfig+0x4e4>
 8004996:	e097      	b.n	8004ac8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004998:	4b4e      	ldr	r3, [pc, #312]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	220c      	movs	r2, #12
 800499e:	4013      	ands	r3, r2
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	d100      	bne.n	80049a6 <HAL_RCC_OscConfig+0x4f2>
 80049a4:	e06b      	b.n	8004a7e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d14c      	bne.n	8004a48 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ae:	4b49      	ldr	r3, [pc, #292]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	4b48      	ldr	r3, [pc, #288]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 80049b4:	494a      	ldr	r1, [pc, #296]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 80049b6:	400a      	ands	r2, r1
 80049b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ba:	f7fe fd09 	bl	80033d0 <HAL_GetTick>
 80049be:	0003      	movs	r3, r0
 80049c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049c2:	e008      	b.n	80049d6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049c4:	f7fe fd04 	bl	80033d0 <HAL_GetTick>
 80049c8:	0002      	movs	r2, r0
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e079      	b.n	8004aca <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049d6:	4b3f      	ldr	r3, [pc, #252]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	2380      	movs	r3, #128	; 0x80
 80049dc:	049b      	lsls	r3, r3, #18
 80049de:	4013      	ands	r3, r2
 80049e0:	d1f0      	bne.n	80049c4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049e2:	4b3c      	ldr	r3, [pc, #240]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 80049e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e6:	220f      	movs	r2, #15
 80049e8:	4393      	bics	r3, r2
 80049ea:	0019      	movs	r1, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f0:	4b38      	ldr	r3, [pc, #224]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 80049f2:	430a      	orrs	r2, r1
 80049f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80049f6:	4b37      	ldr	r3, [pc, #220]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	4a3a      	ldr	r2, [pc, #232]	; (8004ae4 <HAL_RCC_OscConfig+0x630>)
 80049fc:	4013      	ands	r3, r2
 80049fe:	0019      	movs	r1, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	4b32      	ldr	r3, [pc, #200]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a10:	4b30      	ldr	r3, [pc, #192]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	4b2f      	ldr	r3, [pc, #188]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 8004a16:	2180      	movs	r1, #128	; 0x80
 8004a18:	0449      	lsls	r1, r1, #17
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a1e:	f7fe fcd7 	bl	80033d0 <HAL_GetTick>
 8004a22:	0003      	movs	r3, r0
 8004a24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a28:	f7fe fcd2 	bl	80033d0 <HAL_GetTick>
 8004a2c:	0002      	movs	r2, r0
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e047      	b.n	8004aca <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a3a:	4b26      	ldr	r3, [pc, #152]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	2380      	movs	r3, #128	; 0x80
 8004a40:	049b      	lsls	r3, r3, #18
 8004a42:	4013      	ands	r3, r2
 8004a44:	d0f0      	beq.n	8004a28 <HAL_RCC_OscConfig+0x574>
 8004a46:	e03f      	b.n	8004ac8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a48:	4b22      	ldr	r3, [pc, #136]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	4b21      	ldr	r3, [pc, #132]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 8004a4e:	4924      	ldr	r1, [pc, #144]	; (8004ae0 <HAL_RCC_OscConfig+0x62c>)
 8004a50:	400a      	ands	r2, r1
 8004a52:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a54:	f7fe fcbc 	bl	80033d0 <HAL_GetTick>
 8004a58:	0003      	movs	r3, r0
 8004a5a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a5c:	e008      	b.n	8004a70 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a5e:	f7fe fcb7 	bl	80033d0 <HAL_GetTick>
 8004a62:	0002      	movs	r2, r0
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e02c      	b.n	8004aca <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a70:	4b18      	ldr	r3, [pc, #96]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	2380      	movs	r3, #128	; 0x80
 8004a76:	049b      	lsls	r3, r3, #18
 8004a78:	4013      	ands	r3, r2
 8004a7a:	d1f0      	bne.n	8004a5e <HAL_RCC_OscConfig+0x5aa>
 8004a7c:	e024      	b.n	8004ac8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d101      	bne.n	8004a8a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e01f      	b.n	8004aca <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004a8a:	4b12      	ldr	r3, [pc, #72]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004a90:	4b10      	ldr	r3, [pc, #64]	; (8004ad4 <HAL_RCC_OscConfig+0x620>)
 8004a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a94:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	2380      	movs	r3, #128	; 0x80
 8004a9a:	025b      	lsls	r3, r3, #9
 8004a9c:	401a      	ands	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d10e      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	220f      	movs	r2, #15
 8004aaa:	401a      	ands	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d107      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	23f0      	movs	r3, #240	; 0xf0
 8004ab8:	039b      	lsls	r3, r3, #14
 8004aba:	401a      	ands	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d001      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e000      	b.n	8004aca <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	0018      	movs	r0, r3
 8004acc:	46bd      	mov	sp, r7
 8004ace:	b008      	add	sp, #32
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	46c0      	nop			; (mov r8, r8)
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	00001388 	.word	0x00001388
 8004adc:	efffffff 	.word	0xefffffff
 8004ae0:	feffffff 	.word	0xfeffffff
 8004ae4:	ffc2ffff 	.word	0xffc2ffff

08004ae8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e0b3      	b.n	8004c64 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004afc:	4b5b      	ldr	r3, [pc, #364]	; (8004c6c <HAL_RCC_ClockConfig+0x184>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2201      	movs	r2, #1
 8004b02:	4013      	ands	r3, r2
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d911      	bls.n	8004b2e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b0a:	4b58      	ldr	r3, [pc, #352]	; (8004c6c <HAL_RCC_ClockConfig+0x184>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	4393      	bics	r3, r2
 8004b12:	0019      	movs	r1, r3
 8004b14:	4b55      	ldr	r3, [pc, #340]	; (8004c6c <HAL_RCC_ClockConfig+0x184>)
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b1c:	4b53      	ldr	r3, [pc, #332]	; (8004c6c <HAL_RCC_ClockConfig+0x184>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2201      	movs	r2, #1
 8004b22:	4013      	ands	r3, r2
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d001      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e09a      	b.n	8004c64 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2202      	movs	r2, #2
 8004b34:	4013      	ands	r3, r2
 8004b36:	d015      	beq.n	8004b64 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2204      	movs	r2, #4
 8004b3e:	4013      	ands	r3, r2
 8004b40:	d006      	beq.n	8004b50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004b42:	4b4b      	ldr	r3, [pc, #300]	; (8004c70 <HAL_RCC_ClockConfig+0x188>)
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	4b4a      	ldr	r3, [pc, #296]	; (8004c70 <HAL_RCC_ClockConfig+0x188>)
 8004b48:	21e0      	movs	r1, #224	; 0xe0
 8004b4a:	00c9      	lsls	r1, r1, #3
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b50:	4b47      	ldr	r3, [pc, #284]	; (8004c70 <HAL_RCC_ClockConfig+0x188>)
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	22f0      	movs	r2, #240	; 0xf0
 8004b56:	4393      	bics	r3, r2
 8004b58:	0019      	movs	r1, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689a      	ldr	r2, [r3, #8]
 8004b5e:	4b44      	ldr	r3, [pc, #272]	; (8004c70 <HAL_RCC_ClockConfig+0x188>)
 8004b60:	430a      	orrs	r2, r1
 8004b62:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	d040      	beq.n	8004bf0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d107      	bne.n	8004b86 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b76:	4b3e      	ldr	r3, [pc, #248]	; (8004c70 <HAL_RCC_ClockConfig+0x188>)
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	2380      	movs	r3, #128	; 0x80
 8004b7c:	029b      	lsls	r3, r3, #10
 8004b7e:	4013      	ands	r3, r2
 8004b80:	d114      	bne.n	8004bac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e06e      	b.n	8004c64 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d107      	bne.n	8004b9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b8e:	4b38      	ldr	r3, [pc, #224]	; (8004c70 <HAL_RCC_ClockConfig+0x188>)
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	2380      	movs	r3, #128	; 0x80
 8004b94:	049b      	lsls	r3, r3, #18
 8004b96:	4013      	ands	r3, r2
 8004b98:	d108      	bne.n	8004bac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e062      	b.n	8004c64 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b9e:	4b34      	ldr	r3, [pc, #208]	; (8004c70 <HAL_RCC_ClockConfig+0x188>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	d101      	bne.n	8004bac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e05b      	b.n	8004c64 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bac:	4b30      	ldr	r3, [pc, #192]	; (8004c70 <HAL_RCC_ClockConfig+0x188>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	2203      	movs	r2, #3
 8004bb2:	4393      	bics	r3, r2
 8004bb4:	0019      	movs	r1, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	4b2d      	ldr	r3, [pc, #180]	; (8004c70 <HAL_RCC_ClockConfig+0x188>)
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bc0:	f7fe fc06 	bl	80033d0 <HAL_GetTick>
 8004bc4:	0003      	movs	r3, r0
 8004bc6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bc8:	e009      	b.n	8004bde <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bca:	f7fe fc01 	bl	80033d0 <HAL_GetTick>
 8004bce:	0002      	movs	r2, r0
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	4a27      	ldr	r2, [pc, #156]	; (8004c74 <HAL_RCC_ClockConfig+0x18c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e042      	b.n	8004c64 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bde:	4b24      	ldr	r3, [pc, #144]	; (8004c70 <HAL_RCC_ClockConfig+0x188>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	220c      	movs	r2, #12
 8004be4:	401a      	ands	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d1ec      	bne.n	8004bca <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bf0:	4b1e      	ldr	r3, [pc, #120]	; (8004c6c <HAL_RCC_ClockConfig+0x184>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d211      	bcs.n	8004c22 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bfe:	4b1b      	ldr	r3, [pc, #108]	; (8004c6c <HAL_RCC_ClockConfig+0x184>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2201      	movs	r2, #1
 8004c04:	4393      	bics	r3, r2
 8004c06:	0019      	movs	r1, r3
 8004c08:	4b18      	ldr	r3, [pc, #96]	; (8004c6c <HAL_RCC_ClockConfig+0x184>)
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c10:	4b16      	ldr	r3, [pc, #88]	; (8004c6c <HAL_RCC_ClockConfig+0x184>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2201      	movs	r2, #1
 8004c16:	4013      	ands	r3, r2
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d001      	beq.n	8004c22 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e020      	b.n	8004c64 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2204      	movs	r2, #4
 8004c28:	4013      	ands	r3, r2
 8004c2a:	d009      	beq.n	8004c40 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004c2c:	4b10      	ldr	r3, [pc, #64]	; (8004c70 <HAL_RCC_ClockConfig+0x188>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	4a11      	ldr	r2, [pc, #68]	; (8004c78 <HAL_RCC_ClockConfig+0x190>)
 8004c32:	4013      	ands	r3, r2
 8004c34:	0019      	movs	r1, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68da      	ldr	r2, [r3, #12]
 8004c3a:	4b0d      	ldr	r3, [pc, #52]	; (8004c70 <HAL_RCC_ClockConfig+0x188>)
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004c40:	f000 f820 	bl	8004c84 <HAL_RCC_GetSysClockFreq>
 8004c44:	0001      	movs	r1, r0
 8004c46:	4b0a      	ldr	r3, [pc, #40]	; (8004c70 <HAL_RCC_ClockConfig+0x188>)
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	091b      	lsrs	r3, r3, #4
 8004c4c:	220f      	movs	r2, #15
 8004c4e:	4013      	ands	r3, r2
 8004c50:	4a0a      	ldr	r2, [pc, #40]	; (8004c7c <HAL_RCC_ClockConfig+0x194>)
 8004c52:	5cd3      	ldrb	r3, [r2, r3]
 8004c54:	000a      	movs	r2, r1
 8004c56:	40da      	lsrs	r2, r3
 8004c58:	4b09      	ldr	r3, [pc, #36]	; (8004c80 <HAL_RCC_ClockConfig+0x198>)
 8004c5a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004c5c:	2000      	movs	r0, #0
 8004c5e:	f7fe fb71 	bl	8003344 <HAL_InitTick>
  
  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	0018      	movs	r0, r3
 8004c66:	46bd      	mov	sp, r7
 8004c68:	b004      	add	sp, #16
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40022000 	.word	0x40022000
 8004c70:	40021000 	.word	0x40021000
 8004c74:	00001388 	.word	0x00001388
 8004c78:	fffff8ff 	.word	0xfffff8ff
 8004c7c:	0800ad70 	.word	0x0800ad70
 8004c80:	20000024 	.word	0x20000024

08004c84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c84:	b590      	push	{r4, r7, lr}
 8004c86:	b08f      	sub	sp, #60	; 0x3c
 8004c88:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004c8a:	2314      	movs	r3, #20
 8004c8c:	18fb      	adds	r3, r7, r3
 8004c8e:	4a2b      	ldr	r2, [pc, #172]	; (8004d3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c90:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004c92:	c313      	stmia	r3!, {r0, r1, r4}
 8004c94:	6812      	ldr	r2, [r2, #0]
 8004c96:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004c98:	1d3b      	adds	r3, r7, #4
 8004c9a:	4a29      	ldr	r2, [pc, #164]	; (8004d40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c9c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004c9e:	c313      	stmia	r3!, {r0, r1, r4}
 8004ca0:	6812      	ldr	r2, [r2, #0]
 8004ca2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ca8:	2300      	movs	r3, #0
 8004caa:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cac:	2300      	movs	r3, #0
 8004cae:	637b      	str	r3, [r7, #52]	; 0x34
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004cb8:	4b22      	ldr	r3, [pc, #136]	; (8004d44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc0:	220c      	movs	r2, #12
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	d002      	beq.n	8004cce <HAL_RCC_GetSysClockFreq+0x4a>
 8004cc8:	2b08      	cmp	r3, #8
 8004cca:	d003      	beq.n	8004cd4 <HAL_RCC_GetSysClockFreq+0x50>
 8004ccc:	e02d      	b.n	8004d2a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004cce:	4b1e      	ldr	r3, [pc, #120]	; (8004d48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004cd0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004cd2:	e02d      	b.n	8004d30 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd6:	0c9b      	lsrs	r3, r3, #18
 8004cd8:	220f      	movs	r2, #15
 8004cda:	4013      	ands	r3, r2
 8004cdc:	2214      	movs	r2, #20
 8004cde:	18ba      	adds	r2, r7, r2
 8004ce0:	5cd3      	ldrb	r3, [r2, r3]
 8004ce2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004ce4:	4b17      	ldr	r3, [pc, #92]	; (8004d44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce8:	220f      	movs	r2, #15
 8004cea:	4013      	ands	r3, r2
 8004cec:	1d3a      	adds	r2, r7, #4
 8004cee:	5cd3      	ldrb	r3, [r2, r3]
 8004cf0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004cf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cf4:	2380      	movs	r3, #128	; 0x80
 8004cf6:	025b      	lsls	r3, r3, #9
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	d009      	beq.n	8004d10 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004cfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cfe:	4812      	ldr	r0, [pc, #72]	; (8004d48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004d00:	f7fb fa1e 	bl	8000140 <__udivsi3>
 8004d04:	0003      	movs	r3, r0
 8004d06:	001a      	movs	r2, r3
 8004d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0a:	4353      	muls	r3, r2
 8004d0c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d0e:	e009      	b.n	8004d24 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004d10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d12:	000a      	movs	r2, r1
 8004d14:	0152      	lsls	r2, r2, #5
 8004d16:	1a52      	subs	r2, r2, r1
 8004d18:	0193      	lsls	r3, r2, #6
 8004d1a:	1a9b      	subs	r3, r3, r2
 8004d1c:	00db      	lsls	r3, r3, #3
 8004d1e:	185b      	adds	r3, r3, r1
 8004d20:	021b      	lsls	r3, r3, #8
 8004d22:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d26:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004d28:	e002      	b.n	8004d30 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d2a:	4b07      	ldr	r3, [pc, #28]	; (8004d48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004d2c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004d2e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004d32:	0018      	movs	r0, r3
 8004d34:	46bd      	mov	sp, r7
 8004d36:	b00f      	add	sp, #60	; 0x3c
 8004d38:	bd90      	pop	{r4, r7, pc}
 8004d3a:	46c0      	nop			; (mov r8, r8)
 8004d3c:	0800acd0 	.word	0x0800acd0
 8004d40:	0800ace0 	.word	0x0800ace0
 8004d44:	40021000 	.word	0x40021000
 8004d48:	007a1200 	.word	0x007a1200

08004d4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d50:	4b02      	ldr	r3, [pc, #8]	; (8004d5c <HAL_RCC_GetHCLKFreq+0x10>)
 8004d52:	681b      	ldr	r3, [r3, #0]
}
 8004d54:	0018      	movs	r0, r3
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	46c0      	nop			; (mov r8, r8)
 8004d5c:	20000024 	.word	0x20000024

08004d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004d64:	f7ff fff2 	bl	8004d4c <HAL_RCC_GetHCLKFreq>
 8004d68:	0001      	movs	r1, r0
 8004d6a:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	0a1b      	lsrs	r3, r3, #8
 8004d70:	2207      	movs	r2, #7
 8004d72:	4013      	ands	r3, r2
 8004d74:	4a04      	ldr	r2, [pc, #16]	; (8004d88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d76:	5cd3      	ldrb	r3, [r2, r3]
 8004d78:	40d9      	lsrs	r1, r3
 8004d7a:	000b      	movs	r3, r1
}    
 8004d7c:	0018      	movs	r0, r3
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	46c0      	nop			; (mov r8, r8)
 8004d84:	40021000 	.word	0x40021000
 8004d88:	0800ad80 	.word	0x0800ad80

08004d8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	2380      	movs	r3, #128	; 0x80
 8004da2:	025b      	lsls	r3, r3, #9
 8004da4:	4013      	ands	r3, r2
 8004da6:	d100      	bne.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004da8:	e08e      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004daa:	2017      	movs	r0, #23
 8004dac:	183b      	adds	r3, r7, r0
 8004dae:	2200      	movs	r2, #0
 8004db0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004db2:	4b5f      	ldr	r3, [pc, #380]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004db4:	69da      	ldr	r2, [r3, #28]
 8004db6:	2380      	movs	r3, #128	; 0x80
 8004db8:	055b      	lsls	r3, r3, #21
 8004dba:	4013      	ands	r3, r2
 8004dbc:	d110      	bne.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004dbe:	4b5c      	ldr	r3, [pc, #368]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004dc0:	69da      	ldr	r2, [r3, #28]
 8004dc2:	4b5b      	ldr	r3, [pc, #364]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004dc4:	2180      	movs	r1, #128	; 0x80
 8004dc6:	0549      	lsls	r1, r1, #21
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	61da      	str	r2, [r3, #28]
 8004dcc:	4b58      	ldr	r3, [pc, #352]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004dce:	69da      	ldr	r2, [r3, #28]
 8004dd0:	2380      	movs	r3, #128	; 0x80
 8004dd2:	055b      	lsls	r3, r3, #21
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	60bb      	str	r3, [r7, #8]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dda:	183b      	adds	r3, r7, r0
 8004ddc:	2201      	movs	r2, #1
 8004dde:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004de0:	4b54      	ldr	r3, [pc, #336]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	2380      	movs	r3, #128	; 0x80
 8004de6:	005b      	lsls	r3, r3, #1
 8004de8:	4013      	ands	r3, r2
 8004dea:	d11a      	bne.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dec:	4b51      	ldr	r3, [pc, #324]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	4b50      	ldr	r3, [pc, #320]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004df2:	2180      	movs	r1, #128	; 0x80
 8004df4:	0049      	lsls	r1, r1, #1
 8004df6:	430a      	orrs	r2, r1
 8004df8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dfa:	f7fe fae9 	bl	80033d0 <HAL_GetTick>
 8004dfe:	0003      	movs	r3, r0
 8004e00:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e02:	e008      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e04:	f7fe fae4 	bl	80033d0 <HAL_GetTick>
 8004e08:	0002      	movs	r2, r0
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b64      	cmp	r3, #100	; 0x64
 8004e10:	d901      	bls.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e087      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e16:	4b47      	ldr	r3, [pc, #284]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	2380      	movs	r3, #128	; 0x80
 8004e1c:	005b      	lsls	r3, r3, #1
 8004e1e:	4013      	ands	r3, r2
 8004e20:	d0f0      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e22:	4b43      	ldr	r3, [pc, #268]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004e24:	6a1a      	ldr	r2, [r3, #32]
 8004e26:	23c0      	movs	r3, #192	; 0xc0
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d034      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	23c0      	movs	r3, #192	; 0xc0
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d02c      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e44:	4b3a      	ldr	r3, [pc, #232]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004e46:	6a1b      	ldr	r3, [r3, #32]
 8004e48:	4a3b      	ldr	r2, [pc, #236]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e4e:	4b38      	ldr	r3, [pc, #224]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004e50:	6a1a      	ldr	r2, [r3, #32]
 8004e52:	4b37      	ldr	r3, [pc, #220]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004e54:	2180      	movs	r1, #128	; 0x80
 8004e56:	0249      	lsls	r1, r1, #9
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e5c:	4b34      	ldr	r3, [pc, #208]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004e5e:	6a1a      	ldr	r2, [r3, #32]
 8004e60:	4b33      	ldr	r3, [pc, #204]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004e62:	4936      	ldr	r1, [pc, #216]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004e64:	400a      	ands	r2, r1
 8004e66:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e68:	4b31      	ldr	r3, [pc, #196]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2201      	movs	r2, #1
 8004e72:	4013      	ands	r3, r2
 8004e74:	d013      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e76:	f7fe faab 	bl	80033d0 <HAL_GetTick>
 8004e7a:	0003      	movs	r3, r0
 8004e7c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e7e:	e009      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e80:	f7fe faa6 	bl	80033d0 <HAL_GetTick>
 8004e84:	0002      	movs	r2, r0
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	4a2d      	ldr	r2, [pc, #180]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d901      	bls.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e048      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e94:	4b26      	ldr	r3, [pc, #152]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	2202      	movs	r2, #2
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	d0f0      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e9e:	4b24      	ldr	r3, [pc, #144]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	4a25      	ldr	r2, [pc, #148]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	0019      	movs	r1, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	4b20      	ldr	r3, [pc, #128]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004eb2:	2317      	movs	r3, #23
 8004eb4:	18fb      	adds	r3, r7, r3
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d105      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ebc:	4b1c      	ldr	r3, [pc, #112]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004ebe:	69da      	ldr	r2, [r3, #28]
 8004ec0:	4b1b      	ldr	r3, [pc, #108]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004ec2:	4920      	ldr	r1, [pc, #128]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ec4:	400a      	ands	r2, r1
 8004ec6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	4013      	ands	r3, r2
 8004ed0:	d009      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ed2:	4b17      	ldr	r3, [pc, #92]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed6:	2203      	movs	r2, #3
 8004ed8:	4393      	bics	r3, r2
 8004eda:	0019      	movs	r1, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	4b13      	ldr	r3, [pc, #76]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2220      	movs	r2, #32
 8004eec:	4013      	ands	r3, r2
 8004eee:	d009      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ef0:	4b0f      	ldr	r3, [pc, #60]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef4:	2210      	movs	r2, #16
 8004ef6:	4393      	bics	r3, r2
 8004ef8:	0019      	movs	r1, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68da      	ldr	r2, [r3, #12]
 8004efe:	4b0c      	ldr	r3, [pc, #48]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004f00:	430a      	orrs	r2, r1
 8004f02:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	2380      	movs	r3, #128	; 0x80
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	d009      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f10:	4b07      	ldr	r3, [pc, #28]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f14:	2240      	movs	r2, #64	; 0x40
 8004f16:	4393      	bics	r3, r2
 8004f18:	0019      	movs	r1, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	691a      	ldr	r2, [r3, #16]
 8004f1e:	4b04      	ldr	r3, [pc, #16]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004f20:	430a      	orrs	r2, r1
 8004f22:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	0018      	movs	r0, r3
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	b006      	add	sp, #24
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	46c0      	nop			; (mov r8, r8)
 8004f30:	40021000 	.word	0x40021000
 8004f34:	40007000 	.word	0x40007000
 8004f38:	fffffcff 	.word	0xfffffcff
 8004f3c:	fffeffff 	.word	0xfffeffff
 8004f40:	00001388 	.word	0x00001388
 8004f44:	efffffff 	.word	0xefffffff

08004f48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e044      	b.n	8004fe4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d107      	bne.n	8004f72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2274      	movs	r2, #116	; 0x74
 8004f66:	2100      	movs	r1, #0
 8004f68:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	f7fe f805 	bl	8002f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2224      	movs	r2, #36	; 0x24
 8004f76:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2101      	movs	r1, #1
 8004f84:	438a      	bics	r2, r1
 8004f86:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	0018      	movs	r0, r3
 8004f8c:	f000 fb28 	bl	80055e0 <UART_SetConfig>
 8004f90:	0003      	movs	r3, r0
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d101      	bne.n	8004f9a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e024      	b.n	8004fe4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	0018      	movs	r0, r3
 8004fa6:	f000 fc5b 	bl	8005860 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	490d      	ldr	r1, [pc, #52]	; (8004fec <HAL_UART_Init+0xa4>)
 8004fb6:	400a      	ands	r2, r1
 8004fb8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689a      	ldr	r2, [r3, #8]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	212a      	movs	r1, #42	; 0x2a
 8004fc6:	438a      	bics	r2, r1
 8004fc8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	0018      	movs	r0, r3
 8004fde:	f000 fcf3 	bl	80059c8 <UART_CheckIdleState>
 8004fe2:	0003      	movs	r3, r0
}
 8004fe4:	0018      	movs	r0, r3
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	b002      	add	sp, #8
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	ffffb7ff 	.word	0xffffb7ff

08004ff0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ff0:	b590      	push	{r4, r7, lr}
 8004ff2:	b0ab      	sub	sp, #172	; 0xac
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	22a4      	movs	r2, #164	; 0xa4
 8005000:	18b9      	adds	r1, r7, r2
 8005002:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	20a0      	movs	r0, #160	; 0xa0
 800500c:	1839      	adds	r1, r7, r0
 800500e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	219c      	movs	r1, #156	; 0x9c
 8005018:	1879      	adds	r1, r7, r1
 800501a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800501c:	0011      	movs	r1, r2
 800501e:	18bb      	adds	r3, r7, r2
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a99      	ldr	r2, [pc, #612]	; (8005288 <HAL_UART_IRQHandler+0x298>)
 8005024:	4013      	ands	r3, r2
 8005026:	2298      	movs	r2, #152	; 0x98
 8005028:	18bc      	adds	r4, r7, r2
 800502a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800502c:	18bb      	adds	r3, r7, r2
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d114      	bne.n	800505e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005034:	187b      	adds	r3, r7, r1
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2220      	movs	r2, #32
 800503a:	4013      	ands	r3, r2
 800503c:	d00f      	beq.n	800505e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800503e:	183b      	adds	r3, r7, r0
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2220      	movs	r2, #32
 8005044:	4013      	ands	r3, r2
 8005046:	d00a      	beq.n	800505e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800504c:	2b00      	cmp	r3, #0
 800504e:	d100      	bne.n	8005052 <HAL_UART_IRQHandler+0x62>
 8005050:	e296      	b.n	8005580 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	0010      	movs	r0, r2
 800505a:	4798      	blx	r3
      }
      return;
 800505c:	e290      	b.n	8005580 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800505e:	2398      	movs	r3, #152	; 0x98
 8005060:	18fb      	adds	r3, r7, r3
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d100      	bne.n	800506a <HAL_UART_IRQHandler+0x7a>
 8005068:	e114      	b.n	8005294 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800506a:	239c      	movs	r3, #156	; 0x9c
 800506c:	18fb      	adds	r3, r7, r3
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2201      	movs	r2, #1
 8005072:	4013      	ands	r3, r2
 8005074:	d106      	bne.n	8005084 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005076:	23a0      	movs	r3, #160	; 0xa0
 8005078:	18fb      	adds	r3, r7, r3
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a83      	ldr	r2, [pc, #524]	; (800528c <HAL_UART_IRQHandler+0x29c>)
 800507e:	4013      	ands	r3, r2
 8005080:	d100      	bne.n	8005084 <HAL_UART_IRQHandler+0x94>
 8005082:	e107      	b.n	8005294 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005084:	23a4      	movs	r3, #164	; 0xa4
 8005086:	18fb      	adds	r3, r7, r3
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2201      	movs	r2, #1
 800508c:	4013      	ands	r3, r2
 800508e:	d012      	beq.n	80050b6 <HAL_UART_IRQHandler+0xc6>
 8005090:	23a0      	movs	r3, #160	; 0xa0
 8005092:	18fb      	adds	r3, r7, r3
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	2380      	movs	r3, #128	; 0x80
 8005098:	005b      	lsls	r3, r3, #1
 800509a:	4013      	ands	r3, r2
 800509c:	d00b      	beq.n	80050b6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2201      	movs	r2, #1
 80050a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2280      	movs	r2, #128	; 0x80
 80050aa:	589b      	ldr	r3, [r3, r2]
 80050ac:	2201      	movs	r2, #1
 80050ae:	431a      	orrs	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2180      	movs	r1, #128	; 0x80
 80050b4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050b6:	23a4      	movs	r3, #164	; 0xa4
 80050b8:	18fb      	adds	r3, r7, r3
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2202      	movs	r2, #2
 80050be:	4013      	ands	r3, r2
 80050c0:	d011      	beq.n	80050e6 <HAL_UART_IRQHandler+0xf6>
 80050c2:	239c      	movs	r3, #156	; 0x9c
 80050c4:	18fb      	adds	r3, r7, r3
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2201      	movs	r2, #1
 80050ca:	4013      	ands	r3, r2
 80050cc:	d00b      	beq.n	80050e6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2202      	movs	r2, #2
 80050d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2280      	movs	r2, #128	; 0x80
 80050da:	589b      	ldr	r3, [r3, r2]
 80050dc:	2204      	movs	r2, #4
 80050de:	431a      	orrs	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2180      	movs	r1, #128	; 0x80
 80050e4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050e6:	23a4      	movs	r3, #164	; 0xa4
 80050e8:	18fb      	adds	r3, r7, r3
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2204      	movs	r2, #4
 80050ee:	4013      	ands	r3, r2
 80050f0:	d011      	beq.n	8005116 <HAL_UART_IRQHandler+0x126>
 80050f2:	239c      	movs	r3, #156	; 0x9c
 80050f4:	18fb      	adds	r3, r7, r3
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2201      	movs	r2, #1
 80050fa:	4013      	ands	r3, r2
 80050fc:	d00b      	beq.n	8005116 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2204      	movs	r2, #4
 8005104:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2280      	movs	r2, #128	; 0x80
 800510a:	589b      	ldr	r3, [r3, r2]
 800510c:	2202      	movs	r2, #2
 800510e:	431a      	orrs	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2180      	movs	r1, #128	; 0x80
 8005114:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005116:	23a4      	movs	r3, #164	; 0xa4
 8005118:	18fb      	adds	r3, r7, r3
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2208      	movs	r2, #8
 800511e:	4013      	ands	r3, r2
 8005120:	d017      	beq.n	8005152 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005122:	23a0      	movs	r3, #160	; 0xa0
 8005124:	18fb      	adds	r3, r7, r3
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2220      	movs	r2, #32
 800512a:	4013      	ands	r3, r2
 800512c:	d105      	bne.n	800513a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800512e:	239c      	movs	r3, #156	; 0x9c
 8005130:	18fb      	adds	r3, r7, r3
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2201      	movs	r2, #1
 8005136:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005138:	d00b      	beq.n	8005152 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2208      	movs	r2, #8
 8005140:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2280      	movs	r2, #128	; 0x80
 8005146:	589b      	ldr	r3, [r3, r2]
 8005148:	2208      	movs	r2, #8
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2180      	movs	r1, #128	; 0x80
 8005150:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005152:	23a4      	movs	r3, #164	; 0xa4
 8005154:	18fb      	adds	r3, r7, r3
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	2380      	movs	r3, #128	; 0x80
 800515a:	011b      	lsls	r3, r3, #4
 800515c:	4013      	ands	r3, r2
 800515e:	d013      	beq.n	8005188 <HAL_UART_IRQHandler+0x198>
 8005160:	23a0      	movs	r3, #160	; 0xa0
 8005162:	18fb      	adds	r3, r7, r3
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	2380      	movs	r3, #128	; 0x80
 8005168:	04db      	lsls	r3, r3, #19
 800516a:	4013      	ands	r3, r2
 800516c:	d00c      	beq.n	8005188 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2280      	movs	r2, #128	; 0x80
 8005174:	0112      	lsls	r2, r2, #4
 8005176:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2280      	movs	r2, #128	; 0x80
 800517c:	589b      	ldr	r3, [r3, r2]
 800517e:	2220      	movs	r2, #32
 8005180:	431a      	orrs	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2180      	movs	r1, #128	; 0x80
 8005186:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2280      	movs	r2, #128	; 0x80
 800518c:	589b      	ldr	r3, [r3, r2]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d100      	bne.n	8005194 <HAL_UART_IRQHandler+0x1a4>
 8005192:	e1f7      	b.n	8005584 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005194:	23a4      	movs	r3, #164	; 0xa4
 8005196:	18fb      	adds	r3, r7, r3
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2220      	movs	r2, #32
 800519c:	4013      	ands	r3, r2
 800519e:	d00e      	beq.n	80051be <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80051a0:	23a0      	movs	r3, #160	; 0xa0
 80051a2:	18fb      	adds	r3, r7, r3
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2220      	movs	r2, #32
 80051a8:	4013      	ands	r3, r2
 80051aa:	d008      	beq.n	80051be <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d004      	beq.n	80051be <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	0010      	movs	r0, r2
 80051bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2280      	movs	r2, #128	; 0x80
 80051c2:	589b      	ldr	r3, [r3, r2]
 80051c4:	2194      	movs	r1, #148	; 0x94
 80051c6:	187a      	adds	r2, r7, r1
 80051c8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	2240      	movs	r2, #64	; 0x40
 80051d2:	4013      	ands	r3, r2
 80051d4:	2b40      	cmp	r3, #64	; 0x40
 80051d6:	d004      	beq.n	80051e2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80051d8:	187b      	adds	r3, r7, r1
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2228      	movs	r2, #40	; 0x28
 80051de:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051e0:	d047      	beq.n	8005272 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	0018      	movs	r0, r3
 80051e6:	f000 fdc1 	bl	8005d6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	2240      	movs	r2, #64	; 0x40
 80051f2:	4013      	ands	r3, r2
 80051f4:	2b40      	cmp	r3, #64	; 0x40
 80051f6:	d137      	bne.n	8005268 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051f8:	f3ef 8310 	mrs	r3, PRIMASK
 80051fc:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80051fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005200:	2090      	movs	r0, #144	; 0x90
 8005202:	183a      	adds	r2, r7, r0
 8005204:	6013      	str	r3, [r2, #0]
 8005206:	2301      	movs	r3, #1
 8005208:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800520a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800520c:	f383 8810 	msr	PRIMASK, r3
}
 8005210:	46c0      	nop			; (mov r8, r8)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	689a      	ldr	r2, [r3, #8]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2140      	movs	r1, #64	; 0x40
 800521e:	438a      	bics	r2, r1
 8005220:	609a      	str	r2, [r3, #8]
 8005222:	183b      	adds	r3, r7, r0
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005228:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800522a:	f383 8810 	msr	PRIMASK, r3
}
 800522e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005234:	2b00      	cmp	r3, #0
 8005236:	d012      	beq.n	800525e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523c:	4a14      	ldr	r2, [pc, #80]	; (8005290 <HAL_UART_IRQHandler+0x2a0>)
 800523e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005244:	0018      	movs	r0, r3
 8005246:	f7fe fab5 	bl	80037b4 <HAL_DMA_Abort_IT>
 800524a:	1e03      	subs	r3, r0, #0
 800524c:	d01a      	beq.n	8005284 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005252:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005258:	0018      	movs	r0, r3
 800525a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800525c:	e012      	b.n	8005284 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	0018      	movs	r0, r3
 8005262:	f000 f9b5 	bl	80055d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005266:	e00d      	b.n	8005284 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	0018      	movs	r0, r3
 800526c:	f000 f9b0 	bl	80055d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005270:	e008      	b.n	8005284 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	0018      	movs	r0, r3
 8005276:	f000 f9ab 	bl	80055d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2280      	movs	r2, #128	; 0x80
 800527e:	2100      	movs	r1, #0
 8005280:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005282:	e17f      	b.n	8005584 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005284:	46c0      	nop			; (mov r8, r8)
    return;
 8005286:	e17d      	b.n	8005584 <HAL_UART_IRQHandler+0x594>
 8005288:	0000080f 	.word	0x0000080f
 800528c:	04000120 	.word	0x04000120
 8005290:	08006013 	.word	0x08006013

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005298:	2b01      	cmp	r3, #1
 800529a:	d000      	beq.n	800529e <HAL_UART_IRQHandler+0x2ae>
 800529c:	e131      	b.n	8005502 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800529e:	23a4      	movs	r3, #164	; 0xa4
 80052a0:	18fb      	adds	r3, r7, r3
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2210      	movs	r2, #16
 80052a6:	4013      	ands	r3, r2
 80052a8:	d100      	bne.n	80052ac <HAL_UART_IRQHandler+0x2bc>
 80052aa:	e12a      	b.n	8005502 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80052ac:	23a0      	movs	r3, #160	; 0xa0
 80052ae:	18fb      	adds	r3, r7, r3
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2210      	movs	r2, #16
 80052b4:	4013      	ands	r3, r2
 80052b6:	d100      	bne.n	80052ba <HAL_UART_IRQHandler+0x2ca>
 80052b8:	e123      	b.n	8005502 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2210      	movs	r2, #16
 80052c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	2240      	movs	r2, #64	; 0x40
 80052ca:	4013      	ands	r3, r2
 80052cc:	2b40      	cmp	r3, #64	; 0x40
 80052ce:	d000      	beq.n	80052d2 <HAL_UART_IRQHandler+0x2e2>
 80052d0:	e09b      	b.n	800540a <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685a      	ldr	r2, [r3, #4]
 80052da:	217e      	movs	r1, #126	; 0x7e
 80052dc:	187b      	adds	r3, r7, r1
 80052de:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80052e0:	187b      	adds	r3, r7, r1
 80052e2:	881b      	ldrh	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d100      	bne.n	80052ea <HAL_UART_IRQHandler+0x2fa>
 80052e8:	e14e      	b.n	8005588 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2258      	movs	r2, #88	; 0x58
 80052ee:	5a9b      	ldrh	r3, [r3, r2]
 80052f0:	187a      	adds	r2, r7, r1
 80052f2:	8812      	ldrh	r2, [r2, #0]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d300      	bcc.n	80052fa <HAL_UART_IRQHandler+0x30a>
 80052f8:	e146      	b.n	8005588 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	187a      	adds	r2, r7, r1
 80052fe:	215a      	movs	r1, #90	; 0x5a
 8005300:	8812      	ldrh	r2, [r2, #0]
 8005302:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	2b20      	cmp	r3, #32
 800530c:	d06e      	beq.n	80053ec <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800530e:	f3ef 8310 	mrs	r3, PRIMASK
 8005312:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005316:	67bb      	str	r3, [r7, #120]	; 0x78
 8005318:	2301      	movs	r3, #1
 800531a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800531c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800531e:	f383 8810 	msr	PRIMASK, r3
}
 8005322:	46c0      	nop			; (mov r8, r8)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	499a      	ldr	r1, [pc, #616]	; (8005598 <HAL_UART_IRQHandler+0x5a8>)
 8005330:	400a      	ands	r2, r1
 8005332:	601a      	str	r2, [r3, #0]
 8005334:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005336:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533a:	f383 8810 	msr	PRIMASK, r3
}
 800533e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005340:	f3ef 8310 	mrs	r3, PRIMASK
 8005344:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005348:	677b      	str	r3, [r7, #116]	; 0x74
 800534a:	2301      	movs	r3, #1
 800534c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800534e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005350:	f383 8810 	msr	PRIMASK, r3
}
 8005354:	46c0      	nop			; (mov r8, r8)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2101      	movs	r1, #1
 8005362:	438a      	bics	r2, r1
 8005364:	609a      	str	r2, [r3, #8]
 8005366:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005368:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800536a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800536c:	f383 8810 	msr	PRIMASK, r3
}
 8005370:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005372:	f3ef 8310 	mrs	r3, PRIMASK
 8005376:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005378:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800537a:	673b      	str	r3, [r7, #112]	; 0x70
 800537c:	2301      	movs	r3, #1
 800537e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005382:	f383 8810 	msr	PRIMASK, r3
}
 8005386:	46c0      	nop			; (mov r8, r8)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689a      	ldr	r2, [r3, #8]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2140      	movs	r1, #64	; 0x40
 8005394:	438a      	bics	r2, r1
 8005396:	609a      	str	r2, [r3, #8]
 8005398:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800539a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800539c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800539e:	f383 8810 	msr	PRIMASK, r3
}
 80053a2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2220      	movs	r2, #32
 80053a8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053b0:	f3ef 8310 	mrs	r3, PRIMASK
 80053b4:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80053b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053ba:	2301      	movs	r3, #1
 80053bc:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053c0:	f383 8810 	msr	PRIMASK, r3
}
 80053c4:	46c0      	nop			; (mov r8, r8)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2110      	movs	r1, #16
 80053d2:	438a      	bics	r2, r1
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053dc:	f383 8810 	msr	PRIMASK, r3
}
 80053e0:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e6:	0018      	movs	r0, r3
 80053e8:	f7fe f9ac 	bl	8003744 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2258      	movs	r2, #88	; 0x58
 80053f0:	5a9a      	ldrh	r2, [r3, r2]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	215a      	movs	r1, #90	; 0x5a
 80053f6:	5a5b      	ldrh	r3, [r3, r1]
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	0011      	movs	r1, r2
 8005402:	0018      	movs	r0, r3
 8005404:	f7fd f9d2 	bl	80027ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005408:	e0be      	b.n	8005588 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2258      	movs	r2, #88	; 0x58
 800540e:	5a99      	ldrh	r1, [r3, r2]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	225a      	movs	r2, #90	; 0x5a
 8005414:	5a9b      	ldrh	r3, [r3, r2]
 8005416:	b29a      	uxth	r2, r3
 8005418:	208e      	movs	r0, #142	; 0x8e
 800541a:	183b      	adds	r3, r7, r0
 800541c:	1a8a      	subs	r2, r1, r2
 800541e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	225a      	movs	r2, #90	; 0x5a
 8005424:	5a9b      	ldrh	r3, [r3, r2]
 8005426:	b29b      	uxth	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	d100      	bne.n	800542e <HAL_UART_IRQHandler+0x43e>
 800542c:	e0ae      	b.n	800558c <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800542e:	183b      	adds	r3, r7, r0
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d100      	bne.n	8005438 <HAL_UART_IRQHandler+0x448>
 8005436:	e0a9      	b.n	800558c <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005438:	f3ef 8310 	mrs	r3, PRIMASK
 800543c:	60fb      	str	r3, [r7, #12]
  return(result);
 800543e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005440:	2488      	movs	r4, #136	; 0x88
 8005442:	193a      	adds	r2, r7, r4
 8005444:	6013      	str	r3, [r2, #0]
 8005446:	2301      	movs	r3, #1
 8005448:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	f383 8810 	msr	PRIMASK, r3
}
 8005450:	46c0      	nop			; (mov r8, r8)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	494f      	ldr	r1, [pc, #316]	; (800559c <HAL_UART_IRQHandler+0x5ac>)
 800545e:	400a      	ands	r2, r1
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	193b      	adds	r3, r7, r4
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	f383 8810 	msr	PRIMASK, r3
}
 800546e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005470:	f3ef 8310 	mrs	r3, PRIMASK
 8005474:	61bb      	str	r3, [r7, #24]
  return(result);
 8005476:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005478:	2484      	movs	r4, #132	; 0x84
 800547a:	193a      	adds	r2, r7, r4
 800547c:	6013      	str	r3, [r2, #0]
 800547e:	2301      	movs	r3, #1
 8005480:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	f383 8810 	msr	PRIMASK, r3
}
 8005488:	46c0      	nop			; (mov r8, r8)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	689a      	ldr	r2, [r3, #8]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2101      	movs	r1, #1
 8005496:	438a      	bics	r2, r1
 8005498:	609a      	str	r2, [r3, #8]
 800549a:	193b      	adds	r3, r7, r4
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a0:	6a3b      	ldr	r3, [r7, #32]
 80054a2:	f383 8810 	msr	PRIMASK, r3
}
 80054a6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2220      	movs	r2, #32
 80054ac:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054ba:	f3ef 8310 	mrs	r3, PRIMASK
 80054be:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054c2:	2480      	movs	r4, #128	; 0x80
 80054c4:	193a      	adds	r2, r7, r4
 80054c6:	6013      	str	r3, [r2, #0]
 80054c8:	2301      	movs	r3, #1
 80054ca:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ce:	f383 8810 	msr	PRIMASK, r3
}
 80054d2:	46c0      	nop			; (mov r8, r8)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2110      	movs	r1, #16
 80054e0:	438a      	bics	r2, r1
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	193b      	adds	r3, r7, r4
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ec:	f383 8810 	msr	PRIMASK, r3
}
 80054f0:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054f2:	183b      	adds	r3, r7, r0
 80054f4:	881a      	ldrh	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	0011      	movs	r1, r2
 80054fa:	0018      	movs	r0, r3
 80054fc:	f7fd f956 	bl	80027ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005500:	e044      	b.n	800558c <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005502:	23a4      	movs	r3, #164	; 0xa4
 8005504:	18fb      	adds	r3, r7, r3
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	2380      	movs	r3, #128	; 0x80
 800550a:	035b      	lsls	r3, r3, #13
 800550c:	4013      	ands	r3, r2
 800550e:	d010      	beq.n	8005532 <HAL_UART_IRQHandler+0x542>
 8005510:	239c      	movs	r3, #156	; 0x9c
 8005512:	18fb      	adds	r3, r7, r3
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	2380      	movs	r3, #128	; 0x80
 8005518:	03db      	lsls	r3, r3, #15
 800551a:	4013      	ands	r3, r2
 800551c:	d009      	beq.n	8005532 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2280      	movs	r2, #128	; 0x80
 8005524:	0352      	lsls	r2, r2, #13
 8005526:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	0018      	movs	r0, r3
 800552c:	f000 fdb3 	bl	8006096 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005530:	e02f      	b.n	8005592 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005532:	23a4      	movs	r3, #164	; 0xa4
 8005534:	18fb      	adds	r3, r7, r3
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2280      	movs	r2, #128	; 0x80
 800553a:	4013      	ands	r3, r2
 800553c:	d00f      	beq.n	800555e <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800553e:	23a0      	movs	r3, #160	; 0xa0
 8005540:	18fb      	adds	r3, r7, r3
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2280      	movs	r2, #128	; 0x80
 8005546:	4013      	ands	r3, r2
 8005548:	d009      	beq.n	800555e <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800554e:	2b00      	cmp	r3, #0
 8005550:	d01e      	beq.n	8005590 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	0010      	movs	r0, r2
 800555a:	4798      	blx	r3
    }
    return;
 800555c:	e018      	b.n	8005590 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800555e:	23a4      	movs	r3, #164	; 0xa4
 8005560:	18fb      	adds	r3, r7, r3
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2240      	movs	r2, #64	; 0x40
 8005566:	4013      	ands	r3, r2
 8005568:	d013      	beq.n	8005592 <HAL_UART_IRQHandler+0x5a2>
 800556a:	23a0      	movs	r3, #160	; 0xa0
 800556c:	18fb      	adds	r3, r7, r3
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2240      	movs	r2, #64	; 0x40
 8005572:	4013      	ands	r3, r2
 8005574:	d00d      	beq.n	8005592 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	0018      	movs	r0, r3
 800557a:	f000 fd61 	bl	8006040 <UART_EndTransmit_IT>
    return;
 800557e:	e008      	b.n	8005592 <HAL_UART_IRQHandler+0x5a2>
      return;
 8005580:	46c0      	nop			; (mov r8, r8)
 8005582:	e006      	b.n	8005592 <HAL_UART_IRQHandler+0x5a2>
    return;
 8005584:	46c0      	nop			; (mov r8, r8)
 8005586:	e004      	b.n	8005592 <HAL_UART_IRQHandler+0x5a2>
      return;
 8005588:	46c0      	nop			; (mov r8, r8)
 800558a:	e002      	b.n	8005592 <HAL_UART_IRQHandler+0x5a2>
      return;
 800558c:	46c0      	nop			; (mov r8, r8)
 800558e:	e000      	b.n	8005592 <HAL_UART_IRQHandler+0x5a2>
    return;
 8005590:	46c0      	nop			; (mov r8, r8)
  }

}
 8005592:	46bd      	mov	sp, r7
 8005594:	b02b      	add	sp, #172	; 0xac
 8005596:	bd90      	pop	{r4, r7, pc}
 8005598:	fffffeff 	.word	0xfffffeff
 800559c:	fffffedf 	.word	0xfffffedf

080055a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80055a8:	46c0      	nop			; (mov r8, r8)
 80055aa:	46bd      	mov	sp, r7
 80055ac:	b002      	add	sp, #8
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80055b8:	46c0      	nop			; (mov r8, r8)
 80055ba:	46bd      	mov	sp, r7
 80055bc:	b002      	add	sp, #8
 80055be:	bd80      	pop	{r7, pc}

080055c0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80055c8:	46c0      	nop			; (mov r8, r8)
 80055ca:	46bd      	mov	sp, r7
 80055cc:	b002      	add	sp, #8
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80055d8:	46c0      	nop			; (mov r8, r8)
 80055da:	46bd      	mov	sp, r7
 80055dc:	b002      	add	sp, #8
 80055de:	bd80      	pop	{r7, pc}

080055e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b088      	sub	sp, #32
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055e8:	231e      	movs	r3, #30
 80055ea:	18fb      	adds	r3, r7, r3
 80055ec:	2200      	movs	r2, #0
 80055ee:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	431a      	orrs	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	431a      	orrs	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	69db      	ldr	r3, [r3, #28]
 8005604:	4313      	orrs	r3, r2
 8005606:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a8d      	ldr	r2, [pc, #564]	; (8005844 <UART_SetConfig+0x264>)
 8005610:	4013      	ands	r3, r2
 8005612:	0019      	movs	r1, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	430a      	orrs	r2, r1
 800561c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	4a88      	ldr	r2, [pc, #544]	; (8005848 <UART_SetConfig+0x268>)
 8005626:	4013      	ands	r3, r2
 8005628:	0019      	movs	r1, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68da      	ldr	r2, [r3, #12]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	4313      	orrs	r3, r2
 8005644:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	4a7f      	ldr	r2, [pc, #508]	; (800584c <UART_SetConfig+0x26c>)
 800564e:	4013      	ands	r3, r2
 8005650:	0019      	movs	r1, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	430a      	orrs	r2, r1
 800565a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a7b      	ldr	r2, [pc, #492]	; (8005850 <UART_SetConfig+0x270>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d127      	bne.n	80056b6 <UART_SetConfig+0xd6>
 8005666:	4b7b      	ldr	r3, [pc, #492]	; (8005854 <UART_SetConfig+0x274>)
 8005668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566a:	2203      	movs	r2, #3
 800566c:	4013      	ands	r3, r2
 800566e:	2b03      	cmp	r3, #3
 8005670:	d00d      	beq.n	800568e <UART_SetConfig+0xae>
 8005672:	d81b      	bhi.n	80056ac <UART_SetConfig+0xcc>
 8005674:	2b02      	cmp	r3, #2
 8005676:	d014      	beq.n	80056a2 <UART_SetConfig+0xc2>
 8005678:	d818      	bhi.n	80056ac <UART_SetConfig+0xcc>
 800567a:	2b00      	cmp	r3, #0
 800567c:	d002      	beq.n	8005684 <UART_SetConfig+0xa4>
 800567e:	2b01      	cmp	r3, #1
 8005680:	d00a      	beq.n	8005698 <UART_SetConfig+0xb8>
 8005682:	e013      	b.n	80056ac <UART_SetConfig+0xcc>
 8005684:	231f      	movs	r3, #31
 8005686:	18fb      	adds	r3, r7, r3
 8005688:	2200      	movs	r2, #0
 800568a:	701a      	strb	r2, [r3, #0]
 800568c:	e021      	b.n	80056d2 <UART_SetConfig+0xf2>
 800568e:	231f      	movs	r3, #31
 8005690:	18fb      	adds	r3, r7, r3
 8005692:	2202      	movs	r2, #2
 8005694:	701a      	strb	r2, [r3, #0]
 8005696:	e01c      	b.n	80056d2 <UART_SetConfig+0xf2>
 8005698:	231f      	movs	r3, #31
 800569a:	18fb      	adds	r3, r7, r3
 800569c:	2204      	movs	r2, #4
 800569e:	701a      	strb	r2, [r3, #0]
 80056a0:	e017      	b.n	80056d2 <UART_SetConfig+0xf2>
 80056a2:	231f      	movs	r3, #31
 80056a4:	18fb      	adds	r3, r7, r3
 80056a6:	2208      	movs	r2, #8
 80056a8:	701a      	strb	r2, [r3, #0]
 80056aa:	e012      	b.n	80056d2 <UART_SetConfig+0xf2>
 80056ac:	231f      	movs	r3, #31
 80056ae:	18fb      	adds	r3, r7, r3
 80056b0:	2210      	movs	r2, #16
 80056b2:	701a      	strb	r2, [r3, #0]
 80056b4:	e00d      	b.n	80056d2 <UART_SetConfig+0xf2>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a67      	ldr	r2, [pc, #412]	; (8005858 <UART_SetConfig+0x278>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d104      	bne.n	80056ca <UART_SetConfig+0xea>
 80056c0:	231f      	movs	r3, #31
 80056c2:	18fb      	adds	r3, r7, r3
 80056c4:	2200      	movs	r2, #0
 80056c6:	701a      	strb	r2, [r3, #0]
 80056c8:	e003      	b.n	80056d2 <UART_SetConfig+0xf2>
 80056ca:	231f      	movs	r3, #31
 80056cc:	18fb      	adds	r3, r7, r3
 80056ce:	2210      	movs	r2, #16
 80056d0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	69da      	ldr	r2, [r3, #28]
 80056d6:	2380      	movs	r3, #128	; 0x80
 80056d8:	021b      	lsls	r3, r3, #8
 80056da:	429a      	cmp	r2, r3
 80056dc:	d15d      	bne.n	800579a <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80056de:	231f      	movs	r3, #31
 80056e0:	18fb      	adds	r3, r7, r3
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	2b08      	cmp	r3, #8
 80056e6:	d015      	beq.n	8005714 <UART_SetConfig+0x134>
 80056e8:	dc18      	bgt.n	800571c <UART_SetConfig+0x13c>
 80056ea:	2b04      	cmp	r3, #4
 80056ec:	d00d      	beq.n	800570a <UART_SetConfig+0x12a>
 80056ee:	dc15      	bgt.n	800571c <UART_SetConfig+0x13c>
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <UART_SetConfig+0x11a>
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d005      	beq.n	8005704 <UART_SetConfig+0x124>
 80056f8:	e010      	b.n	800571c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056fa:	f7ff fb31 	bl	8004d60 <HAL_RCC_GetPCLK1Freq>
 80056fe:	0003      	movs	r3, r0
 8005700:	61bb      	str	r3, [r7, #24]
        break;
 8005702:	e012      	b.n	800572a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005704:	4b55      	ldr	r3, [pc, #340]	; (800585c <UART_SetConfig+0x27c>)
 8005706:	61bb      	str	r3, [r7, #24]
        break;
 8005708:	e00f      	b.n	800572a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800570a:	f7ff fabb 	bl	8004c84 <HAL_RCC_GetSysClockFreq>
 800570e:	0003      	movs	r3, r0
 8005710:	61bb      	str	r3, [r7, #24]
        break;
 8005712:	e00a      	b.n	800572a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005714:	2380      	movs	r3, #128	; 0x80
 8005716:	021b      	lsls	r3, r3, #8
 8005718:	61bb      	str	r3, [r7, #24]
        break;
 800571a:	e006      	b.n	800572a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800571c:	2300      	movs	r3, #0
 800571e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005720:	231e      	movs	r3, #30
 8005722:	18fb      	adds	r3, r7, r3
 8005724:	2201      	movs	r2, #1
 8005726:	701a      	strb	r2, [r3, #0]
        break;
 8005728:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d100      	bne.n	8005732 <UART_SetConfig+0x152>
 8005730:	e07b      	b.n	800582a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	005a      	lsls	r2, r3, #1
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	085b      	lsrs	r3, r3, #1
 800573c:	18d2      	adds	r2, r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	0019      	movs	r1, r3
 8005744:	0010      	movs	r0, r2
 8005746:	f7fa fcfb 	bl	8000140 <__udivsi3>
 800574a:	0003      	movs	r3, r0
 800574c:	b29b      	uxth	r3, r3
 800574e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	2b0f      	cmp	r3, #15
 8005754:	d91c      	bls.n	8005790 <UART_SetConfig+0x1b0>
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	2380      	movs	r3, #128	; 0x80
 800575a:	025b      	lsls	r3, r3, #9
 800575c:	429a      	cmp	r2, r3
 800575e:	d217      	bcs.n	8005790 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	b29a      	uxth	r2, r3
 8005764:	200e      	movs	r0, #14
 8005766:	183b      	adds	r3, r7, r0
 8005768:	210f      	movs	r1, #15
 800576a:	438a      	bics	r2, r1
 800576c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	085b      	lsrs	r3, r3, #1
 8005772:	b29b      	uxth	r3, r3
 8005774:	2207      	movs	r2, #7
 8005776:	4013      	ands	r3, r2
 8005778:	b299      	uxth	r1, r3
 800577a:	183b      	adds	r3, r7, r0
 800577c:	183a      	adds	r2, r7, r0
 800577e:	8812      	ldrh	r2, [r2, #0]
 8005780:	430a      	orrs	r2, r1
 8005782:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	183a      	adds	r2, r7, r0
 800578a:	8812      	ldrh	r2, [r2, #0]
 800578c:	60da      	str	r2, [r3, #12]
 800578e:	e04c      	b.n	800582a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005790:	231e      	movs	r3, #30
 8005792:	18fb      	adds	r3, r7, r3
 8005794:	2201      	movs	r2, #1
 8005796:	701a      	strb	r2, [r3, #0]
 8005798:	e047      	b.n	800582a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800579a:	231f      	movs	r3, #31
 800579c:	18fb      	adds	r3, r7, r3
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	d015      	beq.n	80057d0 <UART_SetConfig+0x1f0>
 80057a4:	dc18      	bgt.n	80057d8 <UART_SetConfig+0x1f8>
 80057a6:	2b04      	cmp	r3, #4
 80057a8:	d00d      	beq.n	80057c6 <UART_SetConfig+0x1e6>
 80057aa:	dc15      	bgt.n	80057d8 <UART_SetConfig+0x1f8>
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <UART_SetConfig+0x1d6>
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d005      	beq.n	80057c0 <UART_SetConfig+0x1e0>
 80057b4:	e010      	b.n	80057d8 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057b6:	f7ff fad3 	bl	8004d60 <HAL_RCC_GetPCLK1Freq>
 80057ba:	0003      	movs	r3, r0
 80057bc:	61bb      	str	r3, [r7, #24]
        break;
 80057be:	e012      	b.n	80057e6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057c0:	4b26      	ldr	r3, [pc, #152]	; (800585c <UART_SetConfig+0x27c>)
 80057c2:	61bb      	str	r3, [r7, #24]
        break;
 80057c4:	e00f      	b.n	80057e6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057c6:	f7ff fa5d 	bl	8004c84 <HAL_RCC_GetSysClockFreq>
 80057ca:	0003      	movs	r3, r0
 80057cc:	61bb      	str	r3, [r7, #24]
        break;
 80057ce:	e00a      	b.n	80057e6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057d0:	2380      	movs	r3, #128	; 0x80
 80057d2:	021b      	lsls	r3, r3, #8
 80057d4:	61bb      	str	r3, [r7, #24]
        break;
 80057d6:	e006      	b.n	80057e6 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80057d8:	2300      	movs	r3, #0
 80057da:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80057dc:	231e      	movs	r3, #30
 80057de:	18fb      	adds	r3, r7, r3
 80057e0:	2201      	movs	r2, #1
 80057e2:	701a      	strb	r2, [r3, #0]
        break;
 80057e4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d01e      	beq.n	800582a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	085a      	lsrs	r2, r3, #1
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	18d2      	adds	r2, r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	0019      	movs	r1, r3
 80057fc:	0010      	movs	r0, r2
 80057fe:	f7fa fc9f 	bl	8000140 <__udivsi3>
 8005802:	0003      	movs	r3, r0
 8005804:	b29b      	uxth	r3, r3
 8005806:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	2b0f      	cmp	r3, #15
 800580c:	d909      	bls.n	8005822 <UART_SetConfig+0x242>
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	2380      	movs	r3, #128	; 0x80
 8005812:	025b      	lsls	r3, r3, #9
 8005814:	429a      	cmp	r2, r3
 8005816:	d204      	bcs.n	8005822 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	60da      	str	r2, [r3, #12]
 8005820:	e003      	b.n	800582a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005822:	231e      	movs	r3, #30
 8005824:	18fb      	adds	r3, r7, r3
 8005826:	2201      	movs	r2, #1
 8005828:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005836:	231e      	movs	r3, #30
 8005838:	18fb      	adds	r3, r7, r3
 800583a:	781b      	ldrb	r3, [r3, #0]
}
 800583c:	0018      	movs	r0, r3
 800583e:	46bd      	mov	sp, r7
 8005840:	b008      	add	sp, #32
 8005842:	bd80      	pop	{r7, pc}
 8005844:	ffff69f3 	.word	0xffff69f3
 8005848:	ffffcfff 	.word	0xffffcfff
 800584c:	fffff4ff 	.word	0xfffff4ff
 8005850:	40013800 	.word	0x40013800
 8005854:	40021000 	.word	0x40021000
 8005858:	40004400 	.word	0x40004400
 800585c:	007a1200 	.word	0x007a1200

08005860 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586c:	2201      	movs	r2, #1
 800586e:	4013      	ands	r3, r2
 8005870:	d00b      	beq.n	800588a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	4a4a      	ldr	r2, [pc, #296]	; (80059a4 <UART_AdvFeatureConfig+0x144>)
 800587a:	4013      	ands	r3, r2
 800587c:	0019      	movs	r1, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	430a      	orrs	r2, r1
 8005888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588e:	2202      	movs	r2, #2
 8005890:	4013      	ands	r3, r2
 8005892:	d00b      	beq.n	80058ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	4a43      	ldr	r2, [pc, #268]	; (80059a8 <UART_AdvFeatureConfig+0x148>)
 800589c:	4013      	ands	r3, r2
 800589e:	0019      	movs	r1, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b0:	2204      	movs	r2, #4
 80058b2:	4013      	ands	r3, r2
 80058b4:	d00b      	beq.n	80058ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	4a3b      	ldr	r2, [pc, #236]	; (80059ac <UART_AdvFeatureConfig+0x14c>)
 80058be:	4013      	ands	r3, r2
 80058c0:	0019      	movs	r1, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	2208      	movs	r2, #8
 80058d4:	4013      	ands	r3, r2
 80058d6:	d00b      	beq.n	80058f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	4a34      	ldr	r2, [pc, #208]	; (80059b0 <UART_AdvFeatureConfig+0x150>)
 80058e0:	4013      	ands	r3, r2
 80058e2:	0019      	movs	r1, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	430a      	orrs	r2, r1
 80058ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f4:	2210      	movs	r2, #16
 80058f6:	4013      	ands	r3, r2
 80058f8:	d00b      	beq.n	8005912 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	4a2c      	ldr	r2, [pc, #176]	; (80059b4 <UART_AdvFeatureConfig+0x154>)
 8005902:	4013      	ands	r3, r2
 8005904:	0019      	movs	r1, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005916:	2220      	movs	r2, #32
 8005918:	4013      	ands	r3, r2
 800591a:	d00b      	beq.n	8005934 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	4a25      	ldr	r2, [pc, #148]	; (80059b8 <UART_AdvFeatureConfig+0x158>)
 8005924:	4013      	ands	r3, r2
 8005926:	0019      	movs	r1, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	430a      	orrs	r2, r1
 8005932:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005938:	2240      	movs	r2, #64	; 0x40
 800593a:	4013      	ands	r3, r2
 800593c:	d01d      	beq.n	800597a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	4a1d      	ldr	r2, [pc, #116]	; (80059bc <UART_AdvFeatureConfig+0x15c>)
 8005946:	4013      	ands	r3, r2
 8005948:	0019      	movs	r1, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800595a:	2380      	movs	r3, #128	; 0x80
 800595c:	035b      	lsls	r3, r3, #13
 800595e:	429a      	cmp	r2, r3
 8005960:	d10b      	bne.n	800597a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	4a15      	ldr	r2, [pc, #84]	; (80059c0 <UART_AdvFeatureConfig+0x160>)
 800596a:	4013      	ands	r3, r2
 800596c:	0019      	movs	r1, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	2280      	movs	r2, #128	; 0x80
 8005980:	4013      	ands	r3, r2
 8005982:	d00b      	beq.n	800599c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	4a0e      	ldr	r2, [pc, #56]	; (80059c4 <UART_AdvFeatureConfig+0x164>)
 800598c:	4013      	ands	r3, r2
 800598e:	0019      	movs	r1, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	430a      	orrs	r2, r1
 800599a:	605a      	str	r2, [r3, #4]
  }
}
 800599c:	46c0      	nop			; (mov r8, r8)
 800599e:	46bd      	mov	sp, r7
 80059a0:	b002      	add	sp, #8
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	fffdffff 	.word	0xfffdffff
 80059a8:	fffeffff 	.word	0xfffeffff
 80059ac:	fffbffff 	.word	0xfffbffff
 80059b0:	ffff7fff 	.word	0xffff7fff
 80059b4:	ffffefff 	.word	0xffffefff
 80059b8:	ffffdfff 	.word	0xffffdfff
 80059bc:	ffefffff 	.word	0xffefffff
 80059c0:	ff9fffff 	.word	0xff9fffff
 80059c4:	fff7ffff 	.word	0xfff7ffff

080059c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af02      	add	r7, sp, #8
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2280      	movs	r2, #128	; 0x80
 80059d4:	2100      	movs	r1, #0
 80059d6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059d8:	f7fd fcfa 	bl	80033d0 <HAL_GetTick>
 80059dc:	0003      	movs	r3, r0
 80059de:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2208      	movs	r2, #8
 80059e8:	4013      	ands	r3, r2
 80059ea:	2b08      	cmp	r3, #8
 80059ec:	d10c      	bne.n	8005a08 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2280      	movs	r2, #128	; 0x80
 80059f2:	0391      	lsls	r1, r2, #14
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	4a17      	ldr	r2, [pc, #92]	; (8005a54 <UART_CheckIdleState+0x8c>)
 80059f8:	9200      	str	r2, [sp, #0]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f000 f82c 	bl	8005a58 <UART_WaitOnFlagUntilTimeout>
 8005a00:	1e03      	subs	r3, r0, #0
 8005a02:	d001      	beq.n	8005a08 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e021      	b.n	8005a4c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2204      	movs	r2, #4
 8005a10:	4013      	ands	r3, r2
 8005a12:	2b04      	cmp	r3, #4
 8005a14:	d10c      	bne.n	8005a30 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2280      	movs	r2, #128	; 0x80
 8005a1a:	03d1      	lsls	r1, r2, #15
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	4a0d      	ldr	r2, [pc, #52]	; (8005a54 <UART_CheckIdleState+0x8c>)
 8005a20:	9200      	str	r2, [sp, #0]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f000 f818 	bl	8005a58 <UART_WaitOnFlagUntilTimeout>
 8005a28:	1e03      	subs	r3, r0, #0
 8005a2a:	d001      	beq.n	8005a30 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e00d      	b.n	8005a4c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2220      	movs	r2, #32
 8005a34:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2274      	movs	r2, #116	; 0x74
 8005a46:	2100      	movs	r1, #0
 8005a48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	0018      	movs	r0, r3
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	b004      	add	sp, #16
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	01ffffff 	.word	0x01ffffff

08005a58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b094      	sub	sp, #80	; 0x50
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	603b      	str	r3, [r7, #0]
 8005a64:	1dfb      	adds	r3, r7, #7
 8005a66:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a68:	e0a3      	b.n	8005bb2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	d100      	bne.n	8005a72 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005a70:	e09f      	b.n	8005bb2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a72:	f7fd fcad 	bl	80033d0 <HAL_GetTick>
 8005a76:	0002      	movs	r2, r0
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d302      	bcc.n	8005a88 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d13d      	bne.n	8005b04 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a88:	f3ef 8310 	mrs	r3, PRIMASK
 8005a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a90:	647b      	str	r3, [r7, #68]	; 0x44
 8005a92:	2301      	movs	r3, #1
 8005a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a98:	f383 8810 	msr	PRIMASK, r3
}
 8005a9c:	46c0      	nop			; (mov r8, r8)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	494c      	ldr	r1, [pc, #304]	; (8005bdc <UART_WaitOnFlagUntilTimeout+0x184>)
 8005aaa:	400a      	ands	r2, r1
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ab0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab4:	f383 8810 	msr	PRIMASK, r3
}
 8005ab8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aba:	f3ef 8310 	mrs	r3, PRIMASK
 8005abe:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ac2:	643b      	str	r3, [r7, #64]	; 0x40
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aca:	f383 8810 	msr	PRIMASK, r3
}
 8005ace:	46c0      	nop			; (mov r8, r8)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689a      	ldr	r2, [r3, #8]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2101      	movs	r1, #1
 8005adc:	438a      	bics	r2, r1
 8005ade:	609a      	str	r2, [r3, #8]
 8005ae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ae6:	f383 8810 	msr	PRIMASK, r3
}
 8005aea:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2220      	movs	r2, #32
 8005af0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2220      	movs	r2, #32
 8005af6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2274      	movs	r2, #116	; 0x74
 8005afc:	2100      	movs	r1, #0
 8005afe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e067      	b.n	8005bd4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2204      	movs	r2, #4
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	d050      	beq.n	8005bb2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	69da      	ldr	r2, [r3, #28]
 8005b16:	2380      	movs	r3, #128	; 0x80
 8005b18:	011b      	lsls	r3, r3, #4
 8005b1a:	401a      	ands	r2, r3
 8005b1c:	2380      	movs	r3, #128	; 0x80
 8005b1e:	011b      	lsls	r3, r3, #4
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d146      	bne.n	8005bb2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2280      	movs	r2, #128	; 0x80
 8005b2a:	0112      	lsls	r2, r2, #4
 8005b2c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b2e:	f3ef 8310 	mrs	r3, PRIMASK
 8005b32:	613b      	str	r3, [r7, #16]
  return(result);
 8005b34:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b38:	2301      	movs	r3, #1
 8005b3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	f383 8810 	msr	PRIMASK, r3
}
 8005b42:	46c0      	nop			; (mov r8, r8)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4923      	ldr	r1, [pc, #140]	; (8005bdc <UART_WaitOnFlagUntilTimeout+0x184>)
 8005b50:	400a      	ands	r2, r1
 8005b52:	601a      	str	r2, [r3, #0]
 8005b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b56:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	f383 8810 	msr	PRIMASK, r3
}
 8005b5e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b60:	f3ef 8310 	mrs	r3, PRIMASK
 8005b64:	61fb      	str	r3, [r7, #28]
  return(result);
 8005b66:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b68:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b6e:	6a3b      	ldr	r3, [r7, #32]
 8005b70:	f383 8810 	msr	PRIMASK, r3
}
 8005b74:	46c0      	nop			; (mov r8, r8)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	689a      	ldr	r2, [r3, #8]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2101      	movs	r1, #1
 8005b82:	438a      	bics	r2, r1
 8005b84:	609a      	str	r2, [r3, #8]
 8005b86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b88:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8c:	f383 8810 	msr	PRIMASK, r3
}
 8005b90:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2220      	movs	r2, #32
 8005b96:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2280      	movs	r2, #128	; 0x80
 8005ba2:	2120      	movs	r1, #32
 8005ba4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2274      	movs	r2, #116	; 0x74
 8005baa:	2100      	movs	r1, #0
 8005bac:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e010      	b.n	8005bd4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	69db      	ldr	r3, [r3, #28]
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	425a      	negs	r2, r3
 8005bc2:	4153      	adcs	r3, r2
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	001a      	movs	r2, r3
 8005bc8:	1dfb      	adds	r3, r7, #7
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d100      	bne.n	8005bd2 <UART_WaitOnFlagUntilTimeout+0x17a>
 8005bd0:	e74b      	b.n	8005a6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	0018      	movs	r0, r3
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	b014      	add	sp, #80	; 0x50
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	fffffe5f 	.word	0xfffffe5f

08005be0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b090      	sub	sp, #64	; 0x40
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	1dbb      	adds	r3, r7, #6
 8005bec:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	1dba      	adds	r2, r7, #6
 8005bf8:	2158      	movs	r1, #88	; 0x58
 8005bfa:	8812      	ldrh	r2, [r2, #0]
 8005bfc:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2280      	movs	r2, #128	; 0x80
 8005c02:	2100      	movs	r1, #0
 8005c04:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2222      	movs	r2, #34	; 0x22
 8005c0a:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d02b      	beq.n	8005c6c <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c18:	4a3f      	ldr	r2, [pc, #252]	; (8005d18 <UART_Start_Receive_DMA+0x138>)
 8005c1a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c20:	4a3e      	ldr	r2, [pc, #248]	; (8005d1c <UART_Start_Receive_DMA+0x13c>)
 8005c22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c28:	4a3d      	ldr	r2, [pc, #244]	; (8005d20 <UART_Start_Receive_DMA+0x140>)
 8005c2a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c30:	2200      	movs	r2, #0
 8005c32:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3324      	adds	r3, #36	; 0x24
 8005c3e:	0019      	movs	r1, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c44:	001a      	movs	r2, r3
 8005c46:	1dbb      	adds	r3, r7, #6
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	f7fd fd15 	bl	8003678 <HAL_DMA_Start_IT>
 8005c4e:	1e03      	subs	r3, r0, #0
 8005c50:	d00c      	beq.n	8005c6c <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2280      	movs	r2, #128	; 0x80
 8005c56:	2110      	movs	r1, #16
 8005c58:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2274      	movs	r2, #116	; 0x74
 8005c5e:	2100      	movs	r1, #0
 8005c60:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2220      	movs	r2, #32
 8005c66:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e050      	b.n	8005d0e <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2274      	movs	r2, #116	; 0x74
 8005c70:	2100      	movs	r1, #0
 8005c72:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c74:	f3ef 8310 	mrs	r3, PRIMASK
 8005c78:	613b      	str	r3, [r7, #16]
  return(result);
 8005c7a:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c7e:	2301      	movs	r3, #1
 8005c80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f383 8810 	msr	PRIMASK, r3
}
 8005c88:	46c0      	nop			; (mov r8, r8)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2180      	movs	r1, #128	; 0x80
 8005c96:	0049      	lsls	r1, r1, #1
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	601a      	str	r2, [r3, #0]
 8005c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c9e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	f383 8810 	msr	PRIMASK, r3
}
 8005ca6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ca8:	f3ef 8310 	mrs	r3, PRIMASK
 8005cac:	61fb      	str	r3, [r7, #28]
  return(result);
 8005cae:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cb6:	6a3b      	ldr	r3, [r7, #32]
 8005cb8:	f383 8810 	msr	PRIMASK, r3
}
 8005cbc:	46c0      	nop			; (mov r8, r8)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2101      	movs	r1, #1
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	609a      	str	r2, [r3, #8]
 8005cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	f383 8810 	msr	PRIMASK, r3
}
 8005cd8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cda:	f3ef 8310 	mrs	r3, PRIMASK
 8005cde:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ce2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cea:	f383 8810 	msr	PRIMASK, r3
}
 8005cee:	46c0      	nop			; (mov r8, r8)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689a      	ldr	r2, [r3, #8]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2140      	movs	r1, #64	; 0x40
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	609a      	str	r2, [r3, #8]
 8005d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d02:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d06:	f383 8810 	msr	PRIMASK, r3
}
 8005d0a:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	0018      	movs	r0, r3
 8005d10:	46bd      	mov	sp, r7
 8005d12:	b010      	add	sp, #64	; 0x40
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	46c0      	nop			; (mov r8, r8)
 8005d18:	08005e31 	.word	0x08005e31
 8005d1c:	08005f55 	.word	0x08005f55
 8005d20:	08005f91 	.word	0x08005f91

08005d24 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b086      	sub	sp, #24
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8005d30:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d32:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005d34:	617b      	str	r3, [r7, #20]
 8005d36:	2301      	movs	r3, #1
 8005d38:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f383 8810 	msr	PRIMASK, r3
}
 8005d40:	46c0      	nop			; (mov r8, r8)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	21c0      	movs	r1, #192	; 0xc0
 8005d4e:	438a      	bics	r2, r1
 8005d50:	601a      	str	r2, [r3, #0]
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	f383 8810 	msr	PRIMASK, r3
}
 8005d5c:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2220      	movs	r2, #32
 8005d62:	679a      	str	r2, [r3, #120]	; 0x78
}
 8005d64:	46c0      	nop			; (mov r8, r8)
 8005d66:	46bd      	mov	sp, r7
 8005d68:	b006      	add	sp, #24
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b08e      	sub	sp, #56	; 0x38
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d74:	f3ef 8310 	mrs	r3, PRIMASK
 8005d78:	617b      	str	r3, [r7, #20]
  return(result);
 8005d7a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d7e:	2301      	movs	r3, #1
 8005d80:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	f383 8810 	msr	PRIMASK, r3
}
 8005d88:	46c0      	nop			; (mov r8, r8)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4925      	ldr	r1, [pc, #148]	; (8005e2c <UART_EndRxTransfer+0xc0>)
 8005d96:	400a      	ands	r2, r1
 8005d98:	601a      	str	r2, [r3, #0]
 8005d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	f383 8810 	msr	PRIMASK, r3
}
 8005da4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005da6:	f3ef 8310 	mrs	r3, PRIMASK
 8005daa:	623b      	str	r3, [r7, #32]
  return(result);
 8005dac:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dae:	633b      	str	r3, [r7, #48]	; 0x30
 8005db0:	2301      	movs	r3, #1
 8005db2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	f383 8810 	msr	PRIMASK, r3
}
 8005dba:	46c0      	nop			; (mov r8, r8)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	689a      	ldr	r2, [r3, #8]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2101      	movs	r1, #1
 8005dc8:	438a      	bics	r2, r1
 8005dca:	609a      	str	r2, [r3, #8]
 8005dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dce:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd2:	f383 8810 	msr	PRIMASK, r3
}
 8005dd6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d118      	bne.n	8005e12 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005de0:	f3ef 8310 	mrs	r3, PRIMASK
 8005de4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005de6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005de8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dea:	2301      	movs	r3, #1
 8005dec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f383 8810 	msr	PRIMASK, r3
}
 8005df4:	46c0      	nop			; (mov r8, r8)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2110      	movs	r1, #16
 8005e02:	438a      	bics	r2, r1
 8005e04:	601a      	str	r2, [r3, #0]
 8005e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	f383 8810 	msr	PRIMASK, r3
}
 8005e10:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2220      	movs	r2, #32
 8005e16:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005e24:	46c0      	nop			; (mov r8, r8)
 8005e26:	46bd      	mov	sp, r7
 8005e28:	b00e      	add	sp, #56	; 0x38
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	fffffedf 	.word	0xfffffedf

08005e30 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b094      	sub	sp, #80	; 0x50
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3c:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	2b20      	cmp	r3, #32
 8005e44:	d06e      	beq.n	8005f24 <UART_DMAReceiveCplt+0xf4>
  {
    huart->RxXferCount = 0U;
 8005e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e48:	225a      	movs	r2, #90	; 0x5a
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e4e:	f3ef 8310 	mrs	r3, PRIMASK
 8005e52:	61bb      	str	r3, [r7, #24]
  return(result);
 8005e54:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e56:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e58:	2301      	movs	r3, #1
 8005e5a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	f383 8810 	msr	PRIMASK, r3
}
 8005e62:	46c0      	nop			; (mov r8, r8)
 8005e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4938      	ldr	r1, [pc, #224]	; (8005f50 <UART_DMAReceiveCplt+0x120>)
 8005e70:	400a      	ands	r2, r1
 8005e72:	601a      	str	r2, [r3, #0]
 8005e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e76:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e78:	6a3b      	ldr	r3, [r7, #32]
 8005e7a:	f383 8810 	msr	PRIMASK, r3
}
 8005e7e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e80:	f3ef 8310 	mrs	r3, PRIMASK
 8005e84:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e88:	647b      	str	r3, [r7, #68]	; 0x44
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e90:	f383 8810 	msr	PRIMASK, r3
}
 8005e94:	46c0      	nop			; (mov r8, r8)
 8005e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	689a      	ldr	r2, [r3, #8]
 8005e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2101      	movs	r1, #1
 8005ea2:	438a      	bics	r2, r1
 8005ea4:	609a      	str	r2, [r3, #8]
 8005ea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eac:	f383 8810 	msr	PRIMASK, r3
}
 8005eb0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eb2:	f3ef 8310 	mrs	r3, PRIMASK
 8005eb6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eba:	643b      	str	r3, [r7, #64]	; 0x40
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec2:	f383 8810 	msr	PRIMASK, r3
}
 8005ec6:	46c0      	nop			; (mov r8, r8)
 8005ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689a      	ldr	r2, [r3, #8]
 8005ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2140      	movs	r1, #64	; 0x40
 8005ed4:	438a      	bics	r2, r1
 8005ed6:	609a      	str	r2, [r3, #8]
 8005ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eda:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ede:	f383 8810 	msr	PRIMASK, r3
}
 8005ee2:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d118      	bne.n	8005f24 <UART_DMAReceiveCplt+0xf4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ef2:	f3ef 8310 	mrs	r3, PRIMASK
 8005ef6:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005efa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005efc:	2301      	movs	r3, #1
 8005efe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	f383 8810 	msr	PRIMASK, r3
}
 8005f06:	46c0      	nop			; (mov r8, r8)
 8005f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2110      	movs	r1, #16
 8005f14:	438a      	bics	r2, r1
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	f383 8810 	msr	PRIMASK, r3
}
 8005f22:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d108      	bne.n	8005f3e <UART_DMAReceiveCplt+0x10e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f2e:	2258      	movs	r2, #88	; 0x58
 8005f30:	5a9a      	ldrh	r2, [r3, r2]
 8005f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f34:	0011      	movs	r1, r2
 8005f36:	0018      	movs	r0, r3
 8005f38:	f7fc fc38 	bl	80027ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f3c:	e003      	b.n	8005f46 <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 8005f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f40:	0018      	movs	r0, r3
 8005f42:	f7ff fb35 	bl	80055b0 <HAL_UART_RxCpltCallback>
}
 8005f46:	46c0      	nop			; (mov r8, r8)
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	b014      	add	sp, #80	; 0x50
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	46c0      	nop			; (mov r8, r8)
 8005f50:	fffffeff 	.word	0xfffffeff

08005f54 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f60:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d10a      	bne.n	8005f80 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2258      	movs	r2, #88	; 0x58
 8005f6e:	5a9b      	ldrh	r3, [r3, r2]
 8005f70:	085b      	lsrs	r3, r3, #1
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	0011      	movs	r1, r2
 8005f78:	0018      	movs	r0, r3
 8005f7a:	f7fc fc17 	bl	80027ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f7e:	e003      	b.n	8005f88 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	0018      	movs	r0, r3
 8005f84:	f7ff fb1c 	bl	80055c0 <HAL_UART_RxHalfCpltCallback>
}
 8005f88:	46c0      	nop			; (mov r8, r8)
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	b004      	add	sp, #16
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fa2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fa8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	2280      	movs	r2, #128	; 0x80
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	2b80      	cmp	r3, #128	; 0x80
 8005fb6:	d10a      	bne.n	8005fce <UART_DMAError+0x3e>
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	2b21      	cmp	r3, #33	; 0x21
 8005fbc:	d107      	bne.n	8005fce <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	2252      	movs	r2, #82	; 0x52
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	0018      	movs	r0, r3
 8005fca:	f7ff feab 	bl	8005d24 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	2240      	movs	r2, #64	; 0x40
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	2b40      	cmp	r3, #64	; 0x40
 8005fda:	d10a      	bne.n	8005ff2 <UART_DMAError+0x62>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2b22      	cmp	r3, #34	; 0x22
 8005fe0:	d107      	bne.n	8005ff2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	225a      	movs	r2, #90	; 0x5a
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	0018      	movs	r0, r3
 8005fee:	f7ff febd 	bl	8005d6c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	2280      	movs	r2, #128	; 0x80
 8005ff6:	589b      	ldr	r3, [r3, r2]
 8005ff8:	2210      	movs	r2, #16
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	2180      	movs	r1, #128	; 0x80
 8006000:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	0018      	movs	r0, r3
 8006006:	f7ff fae3 	bl	80055d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800600a:	46c0      	nop			; (mov r8, r8)
 800600c:	46bd      	mov	sp, r7
 800600e:	b006      	add	sp, #24
 8006010:	bd80      	pop	{r7, pc}

08006012 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b084      	sub	sp, #16
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	225a      	movs	r2, #90	; 0x5a
 8006024:	2100      	movs	r1, #0
 8006026:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2252      	movs	r2, #82	; 0x52
 800602c:	2100      	movs	r1, #0
 800602e:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	0018      	movs	r0, r3
 8006034:	f7ff facc 	bl	80055d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006038:	46c0      	nop			; (mov r8, r8)
 800603a:	46bd      	mov	sp, r7
 800603c:	b004      	add	sp, #16
 800603e:	bd80      	pop	{r7, pc}

08006040 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006048:	f3ef 8310 	mrs	r3, PRIMASK
 800604c:	60bb      	str	r3, [r7, #8]
  return(result);
 800604e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006050:	617b      	str	r3, [r7, #20]
 8006052:	2301      	movs	r3, #1
 8006054:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f383 8810 	msr	PRIMASK, r3
}
 800605c:	46c0      	nop			; (mov r8, r8)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2140      	movs	r1, #64	; 0x40
 800606a:	438a      	bics	r2, r1
 800606c:	601a      	str	r2, [r3, #0]
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	f383 8810 	msr	PRIMASK, r3
}
 8006078:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2220      	movs	r2, #32
 800607e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	0018      	movs	r0, r3
 800608a:	f7ff fa89 	bl	80055a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800608e:	46c0      	nop			; (mov r8, r8)
 8006090:	46bd      	mov	sp, r7
 8006092:	b006      	add	sp, #24
 8006094:	bd80      	pop	{r7, pc}

08006096 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b082      	sub	sp, #8
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800609e:	46c0      	nop			; (mov r8, r8)
 80060a0:	46bd      	mov	sp, r7
 80060a2:	b002      	add	sp, #8
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060a6:	b5b0      	push	{r4, r5, r7, lr}
 80060a8:	b08a      	sub	sp, #40	; 0x28
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	60f8      	str	r0, [r7, #12]
 80060ae:	60b9      	str	r1, [r7, #8]
 80060b0:	1dbb      	adds	r3, r7, #6
 80060b2:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060b8:	2b20      	cmp	r3, #32
 80060ba:	d15e      	bne.n	800617a <HAL_UARTEx_ReceiveToIdle_DMA+0xd4>
  {
    if ((pData == NULL) || (Size == 0U))
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d003      	beq.n	80060ca <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80060c2:	1dbb      	adds	r3, r7, #6
 80060c4:	881b      	ldrh	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d101      	bne.n	80060ce <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e056      	b.n	800617c <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	689a      	ldr	r2, [r3, #8]
 80060d2:	2380      	movs	r3, #128	; 0x80
 80060d4:	015b      	lsls	r3, r3, #5
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d109      	bne.n	80060ee <HAL_UARTEx_ReceiveToIdle_DMA+0x48>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d105      	bne.n	80060ee <HAL_UARTEx_ReceiveToIdle_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	2201      	movs	r2, #1
 80060e6:	4013      	ands	r3, r2
 80060e8:	d001      	beq.n	80060ee <HAL_UARTEx_ReceiveToIdle_DMA+0x48>
      {
        return  HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e046      	b.n	800617c <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
      }
    }

    __HAL_LOCK(huart);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2274      	movs	r2, #116	; 0x74
 80060f2:	5c9b      	ldrb	r3, [r3, r2]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d101      	bne.n	80060fc <HAL_UARTEx_ReceiveToIdle_DMA+0x56>
 80060f8:	2302      	movs	r3, #2
 80060fa:	e03f      	b.n	800617c <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2274      	movs	r2, #116	; 0x74
 8006100:	2101      	movs	r1, #1
 8006102:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2201      	movs	r2, #1
 8006108:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800610a:	2527      	movs	r5, #39	; 0x27
 800610c:	197c      	adds	r4, r7, r5
 800610e:	1dbb      	adds	r3, r7, #6
 8006110:	881a      	ldrh	r2, [r3, #0]
 8006112:	68b9      	ldr	r1, [r7, #8]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	0018      	movs	r0, r3
 8006118:	f7ff fd62 	bl	8005be0 <UART_Start_Receive_DMA>
 800611c:	0003      	movs	r3, r0
 800611e:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006120:	197b      	adds	r3, r7, r5
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d124      	bne.n	8006172 <HAL_UARTEx_ReceiveToIdle_DMA+0xcc>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800612c:	2b01      	cmp	r3, #1
 800612e:	d11c      	bne.n	800616a <HAL_UARTEx_ReceiveToIdle_DMA+0xc4>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2210      	movs	r2, #16
 8006136:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006138:	f3ef 8310 	mrs	r3, PRIMASK
 800613c:	617b      	str	r3, [r7, #20]
  return(result);
 800613e:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006140:	623b      	str	r3, [r7, #32]
 8006142:	2301      	movs	r3, #1
 8006144:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	f383 8810 	msr	PRIMASK, r3
}
 800614c:	46c0      	nop			; (mov r8, r8)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2110      	movs	r1, #16
 800615a:	430a      	orrs	r2, r1
 800615c:	601a      	str	r2, [r3, #0]
 800615e:	6a3b      	ldr	r3, [r7, #32]
 8006160:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	f383 8810 	msr	PRIMASK, r3
}
 8006168:	e003      	b.n	8006172 <HAL_UARTEx_ReceiveToIdle_DMA+0xcc>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800616a:	2327      	movs	r3, #39	; 0x27
 800616c:	18fb      	adds	r3, r7, r3
 800616e:	2201      	movs	r2, #1
 8006170:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8006172:	2327      	movs	r3, #39	; 0x27
 8006174:	18fb      	adds	r3, r7, r3
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	e000      	b.n	800617c <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
  }
  else
  {
    return HAL_BUSY;
 800617a:	2302      	movs	r3, #2
  }
}
 800617c:	0018      	movs	r0, r3
 800617e:	46bd      	mov	sp, r7
 8006180:	b00a      	add	sp, #40	; 0x28
 8006182:	bdb0      	pop	{r4, r5, r7, pc}

08006184 <atoi>:
 8006184:	b510      	push	{r4, lr}
 8006186:	220a      	movs	r2, #10
 8006188:	2100      	movs	r1, #0
 800618a:	f001 fd93 	bl	8007cb4 <strtol>
 800618e:	bd10      	pop	{r4, pc}

08006190 <__errno>:
 8006190:	4b01      	ldr	r3, [pc, #4]	; (8006198 <__errno+0x8>)
 8006192:	6818      	ldr	r0, [r3, #0]
 8006194:	4770      	bx	lr
 8006196:	46c0      	nop			; (mov r8, r8)
 8006198:	20000030 	.word	0x20000030

0800619c <__libc_init_array>:
 800619c:	b570      	push	{r4, r5, r6, lr}
 800619e:	2600      	movs	r6, #0
 80061a0:	4d0c      	ldr	r5, [pc, #48]	; (80061d4 <__libc_init_array+0x38>)
 80061a2:	4c0d      	ldr	r4, [pc, #52]	; (80061d8 <__libc_init_array+0x3c>)
 80061a4:	1b64      	subs	r4, r4, r5
 80061a6:	10a4      	asrs	r4, r4, #2
 80061a8:	42a6      	cmp	r6, r4
 80061aa:	d109      	bne.n	80061c0 <__libc_init_array+0x24>
 80061ac:	2600      	movs	r6, #0
 80061ae:	f004 fd53 	bl	800ac58 <_init>
 80061b2:	4d0a      	ldr	r5, [pc, #40]	; (80061dc <__libc_init_array+0x40>)
 80061b4:	4c0a      	ldr	r4, [pc, #40]	; (80061e0 <__libc_init_array+0x44>)
 80061b6:	1b64      	subs	r4, r4, r5
 80061b8:	10a4      	asrs	r4, r4, #2
 80061ba:	42a6      	cmp	r6, r4
 80061bc:	d105      	bne.n	80061ca <__libc_init_array+0x2e>
 80061be:	bd70      	pop	{r4, r5, r6, pc}
 80061c0:	00b3      	lsls	r3, r6, #2
 80061c2:	58eb      	ldr	r3, [r5, r3]
 80061c4:	4798      	blx	r3
 80061c6:	3601      	adds	r6, #1
 80061c8:	e7ee      	b.n	80061a8 <__libc_init_array+0xc>
 80061ca:	00b3      	lsls	r3, r6, #2
 80061cc:	58eb      	ldr	r3, [r5, r3]
 80061ce:	4798      	blx	r3
 80061d0:	3601      	adds	r6, #1
 80061d2:	e7f2      	b.n	80061ba <__libc_init_array+0x1e>
 80061d4:	0800b22c 	.word	0x0800b22c
 80061d8:	0800b22c 	.word	0x0800b22c
 80061dc:	0800b22c 	.word	0x0800b22c
 80061e0:	0800b230 	.word	0x0800b230

080061e4 <memset>:
 80061e4:	0003      	movs	r3, r0
 80061e6:	1882      	adds	r2, r0, r2
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d100      	bne.n	80061ee <memset+0xa>
 80061ec:	4770      	bx	lr
 80061ee:	7019      	strb	r1, [r3, #0]
 80061f0:	3301      	adds	r3, #1
 80061f2:	e7f9      	b.n	80061e8 <memset+0x4>

080061f4 <__cvt>:
 80061f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061f6:	001e      	movs	r6, r3
 80061f8:	2300      	movs	r3, #0
 80061fa:	0014      	movs	r4, r2
 80061fc:	b08b      	sub	sp, #44	; 0x2c
 80061fe:	429e      	cmp	r6, r3
 8006200:	da04      	bge.n	800620c <__cvt+0x18>
 8006202:	2180      	movs	r1, #128	; 0x80
 8006204:	0609      	lsls	r1, r1, #24
 8006206:	1873      	adds	r3, r6, r1
 8006208:	001e      	movs	r6, r3
 800620a:	232d      	movs	r3, #45	; 0x2d
 800620c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800620e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006210:	7013      	strb	r3, [r2, #0]
 8006212:	2320      	movs	r3, #32
 8006214:	2203      	movs	r2, #3
 8006216:	439f      	bics	r7, r3
 8006218:	2f46      	cmp	r7, #70	; 0x46
 800621a:	d007      	beq.n	800622c <__cvt+0x38>
 800621c:	003b      	movs	r3, r7
 800621e:	3b45      	subs	r3, #69	; 0x45
 8006220:	4259      	negs	r1, r3
 8006222:	414b      	adcs	r3, r1
 8006224:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006226:	3a01      	subs	r2, #1
 8006228:	18cb      	adds	r3, r1, r3
 800622a:	9310      	str	r3, [sp, #64]	; 0x40
 800622c:	ab09      	add	r3, sp, #36	; 0x24
 800622e:	9304      	str	r3, [sp, #16]
 8006230:	ab08      	add	r3, sp, #32
 8006232:	9303      	str	r3, [sp, #12]
 8006234:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006236:	9200      	str	r2, [sp, #0]
 8006238:	9302      	str	r3, [sp, #8]
 800623a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800623c:	0022      	movs	r2, r4
 800623e:	9301      	str	r3, [sp, #4]
 8006240:	0033      	movs	r3, r6
 8006242:	f001 fdcf 	bl	8007de4 <_dtoa_r>
 8006246:	0005      	movs	r5, r0
 8006248:	2f47      	cmp	r7, #71	; 0x47
 800624a:	d102      	bne.n	8006252 <__cvt+0x5e>
 800624c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800624e:	07db      	lsls	r3, r3, #31
 8006250:	d528      	bpl.n	80062a4 <__cvt+0xb0>
 8006252:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006254:	18eb      	adds	r3, r5, r3
 8006256:	9307      	str	r3, [sp, #28]
 8006258:	2f46      	cmp	r7, #70	; 0x46
 800625a:	d114      	bne.n	8006286 <__cvt+0x92>
 800625c:	782b      	ldrb	r3, [r5, #0]
 800625e:	2b30      	cmp	r3, #48	; 0x30
 8006260:	d10c      	bne.n	800627c <__cvt+0x88>
 8006262:	2200      	movs	r2, #0
 8006264:	2300      	movs	r3, #0
 8006266:	0020      	movs	r0, r4
 8006268:	0031      	movs	r1, r6
 800626a:	f7fa f8ef 	bl	800044c <__aeabi_dcmpeq>
 800626e:	2800      	cmp	r0, #0
 8006270:	d104      	bne.n	800627c <__cvt+0x88>
 8006272:	2301      	movs	r3, #1
 8006274:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006276:	1a9b      	subs	r3, r3, r2
 8006278:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800627a:	6013      	str	r3, [r2, #0]
 800627c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800627e:	9a07      	ldr	r2, [sp, #28]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	18d3      	adds	r3, r2, r3
 8006284:	9307      	str	r3, [sp, #28]
 8006286:	2200      	movs	r2, #0
 8006288:	2300      	movs	r3, #0
 800628a:	0020      	movs	r0, r4
 800628c:	0031      	movs	r1, r6
 800628e:	f7fa f8dd 	bl	800044c <__aeabi_dcmpeq>
 8006292:	2800      	cmp	r0, #0
 8006294:	d001      	beq.n	800629a <__cvt+0xa6>
 8006296:	9b07      	ldr	r3, [sp, #28]
 8006298:	9309      	str	r3, [sp, #36]	; 0x24
 800629a:	2230      	movs	r2, #48	; 0x30
 800629c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800629e:	9907      	ldr	r1, [sp, #28]
 80062a0:	428b      	cmp	r3, r1
 80062a2:	d306      	bcc.n	80062b2 <__cvt+0xbe>
 80062a4:	0028      	movs	r0, r5
 80062a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062a8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80062aa:	1b5b      	subs	r3, r3, r5
 80062ac:	6013      	str	r3, [r2, #0]
 80062ae:	b00b      	add	sp, #44	; 0x2c
 80062b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062b2:	1c59      	adds	r1, r3, #1
 80062b4:	9109      	str	r1, [sp, #36]	; 0x24
 80062b6:	701a      	strb	r2, [r3, #0]
 80062b8:	e7f0      	b.n	800629c <__cvt+0xa8>

080062ba <__exponent>:
 80062ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062bc:	1c83      	adds	r3, r0, #2
 80062be:	b087      	sub	sp, #28
 80062c0:	9303      	str	r3, [sp, #12]
 80062c2:	0005      	movs	r5, r0
 80062c4:	000c      	movs	r4, r1
 80062c6:	232b      	movs	r3, #43	; 0x2b
 80062c8:	7002      	strb	r2, [r0, #0]
 80062ca:	2900      	cmp	r1, #0
 80062cc:	da01      	bge.n	80062d2 <__exponent+0x18>
 80062ce:	424c      	negs	r4, r1
 80062d0:	3302      	adds	r3, #2
 80062d2:	706b      	strb	r3, [r5, #1]
 80062d4:	2c09      	cmp	r4, #9
 80062d6:	dd31      	ble.n	800633c <__exponent+0x82>
 80062d8:	270a      	movs	r7, #10
 80062da:	ab04      	add	r3, sp, #16
 80062dc:	1dde      	adds	r6, r3, #7
 80062de:	0020      	movs	r0, r4
 80062e0:	0039      	movs	r1, r7
 80062e2:	9601      	str	r6, [sp, #4]
 80062e4:	f7fa f89c 	bl	8000420 <__aeabi_idivmod>
 80062e8:	3e01      	subs	r6, #1
 80062ea:	3130      	adds	r1, #48	; 0x30
 80062ec:	0020      	movs	r0, r4
 80062ee:	7031      	strb	r1, [r6, #0]
 80062f0:	0039      	movs	r1, r7
 80062f2:	9402      	str	r4, [sp, #8]
 80062f4:	f7f9 ffae 	bl	8000254 <__divsi3>
 80062f8:	9b02      	ldr	r3, [sp, #8]
 80062fa:	0004      	movs	r4, r0
 80062fc:	2b63      	cmp	r3, #99	; 0x63
 80062fe:	dcee      	bgt.n	80062de <__exponent+0x24>
 8006300:	9b01      	ldr	r3, [sp, #4]
 8006302:	3430      	adds	r4, #48	; 0x30
 8006304:	1e9a      	subs	r2, r3, #2
 8006306:	0013      	movs	r3, r2
 8006308:	9903      	ldr	r1, [sp, #12]
 800630a:	7014      	strb	r4, [r2, #0]
 800630c:	a804      	add	r0, sp, #16
 800630e:	3007      	adds	r0, #7
 8006310:	4298      	cmp	r0, r3
 8006312:	d80e      	bhi.n	8006332 <__exponent+0x78>
 8006314:	ab04      	add	r3, sp, #16
 8006316:	3307      	adds	r3, #7
 8006318:	2000      	movs	r0, #0
 800631a:	429a      	cmp	r2, r3
 800631c:	d804      	bhi.n	8006328 <__exponent+0x6e>
 800631e:	ab04      	add	r3, sp, #16
 8006320:	3009      	adds	r0, #9
 8006322:	18c0      	adds	r0, r0, r3
 8006324:	9b01      	ldr	r3, [sp, #4]
 8006326:	1ac0      	subs	r0, r0, r3
 8006328:	9b03      	ldr	r3, [sp, #12]
 800632a:	1818      	adds	r0, r3, r0
 800632c:	1b40      	subs	r0, r0, r5
 800632e:	b007      	add	sp, #28
 8006330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006332:	7818      	ldrb	r0, [r3, #0]
 8006334:	3301      	adds	r3, #1
 8006336:	7008      	strb	r0, [r1, #0]
 8006338:	3101      	adds	r1, #1
 800633a:	e7e7      	b.n	800630c <__exponent+0x52>
 800633c:	2330      	movs	r3, #48	; 0x30
 800633e:	18e4      	adds	r4, r4, r3
 8006340:	70ab      	strb	r3, [r5, #2]
 8006342:	1d28      	adds	r0, r5, #4
 8006344:	70ec      	strb	r4, [r5, #3]
 8006346:	e7f1      	b.n	800632c <__exponent+0x72>

08006348 <_printf_float>:
 8006348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800634a:	b095      	sub	sp, #84	; 0x54
 800634c:	000c      	movs	r4, r1
 800634e:	9209      	str	r2, [sp, #36]	; 0x24
 8006350:	001e      	movs	r6, r3
 8006352:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006354:	0007      	movs	r7, r0
 8006356:	f002 fed3 	bl	8009100 <_localeconv_r>
 800635a:	6803      	ldr	r3, [r0, #0]
 800635c:	0018      	movs	r0, r3
 800635e:	930c      	str	r3, [sp, #48]	; 0x30
 8006360:	f7f9 fed2 	bl	8000108 <strlen>
 8006364:	2300      	movs	r3, #0
 8006366:	9312      	str	r3, [sp, #72]	; 0x48
 8006368:	7e23      	ldrb	r3, [r4, #24]
 800636a:	2207      	movs	r2, #7
 800636c:	930a      	str	r3, [sp, #40]	; 0x28
 800636e:	6823      	ldr	r3, [r4, #0]
 8006370:	900e      	str	r0, [sp, #56]	; 0x38
 8006372:	930d      	str	r3, [sp, #52]	; 0x34
 8006374:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006376:	682b      	ldr	r3, [r5, #0]
 8006378:	05c9      	lsls	r1, r1, #23
 800637a:	d547      	bpl.n	800640c <_printf_float+0xc4>
 800637c:	189b      	adds	r3, r3, r2
 800637e:	4393      	bics	r3, r2
 8006380:	001a      	movs	r2, r3
 8006382:	3208      	adds	r2, #8
 8006384:	602a      	str	r2, [r5, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	64a2      	str	r2, [r4, #72]	; 0x48
 800638c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800638e:	2201      	movs	r2, #1
 8006390:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006392:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006394:	930b      	str	r3, [sp, #44]	; 0x2c
 8006396:	006b      	lsls	r3, r5, #1
 8006398:	085b      	lsrs	r3, r3, #1
 800639a:	930f      	str	r3, [sp, #60]	; 0x3c
 800639c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800639e:	4ba7      	ldr	r3, [pc, #668]	; (800663c <_printf_float+0x2f4>)
 80063a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80063a2:	4252      	negs	r2, r2
 80063a4:	f7fb ff64 	bl	8002270 <__aeabi_dcmpun>
 80063a8:	2800      	cmp	r0, #0
 80063aa:	d131      	bne.n	8006410 <_printf_float+0xc8>
 80063ac:	2201      	movs	r2, #1
 80063ae:	4ba3      	ldr	r3, [pc, #652]	; (800663c <_printf_float+0x2f4>)
 80063b0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80063b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80063b4:	4252      	negs	r2, r2
 80063b6:	f7fa f859 	bl	800046c <__aeabi_dcmple>
 80063ba:	2800      	cmp	r0, #0
 80063bc:	d128      	bne.n	8006410 <_printf_float+0xc8>
 80063be:	2200      	movs	r2, #0
 80063c0:	2300      	movs	r3, #0
 80063c2:	0029      	movs	r1, r5
 80063c4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80063c6:	f7fa f847 	bl	8000458 <__aeabi_dcmplt>
 80063ca:	2800      	cmp	r0, #0
 80063cc:	d003      	beq.n	80063d6 <_printf_float+0x8e>
 80063ce:	0023      	movs	r3, r4
 80063d0:	222d      	movs	r2, #45	; 0x2d
 80063d2:	3343      	adds	r3, #67	; 0x43
 80063d4:	701a      	strb	r2, [r3, #0]
 80063d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063d8:	4d99      	ldr	r5, [pc, #612]	; (8006640 <_printf_float+0x2f8>)
 80063da:	2b47      	cmp	r3, #71	; 0x47
 80063dc:	d900      	bls.n	80063e0 <_printf_float+0x98>
 80063de:	4d99      	ldr	r5, [pc, #612]	; (8006644 <_printf_float+0x2fc>)
 80063e0:	2303      	movs	r3, #3
 80063e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80063e4:	6123      	str	r3, [r4, #16]
 80063e6:	3301      	adds	r3, #1
 80063e8:	439a      	bics	r2, r3
 80063ea:	2300      	movs	r3, #0
 80063ec:	6022      	str	r2, [r4, #0]
 80063ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80063f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063f2:	0021      	movs	r1, r4
 80063f4:	0038      	movs	r0, r7
 80063f6:	9600      	str	r6, [sp, #0]
 80063f8:	aa13      	add	r2, sp, #76	; 0x4c
 80063fa:	f000 f9e7 	bl	80067cc <_printf_common>
 80063fe:	1c43      	adds	r3, r0, #1
 8006400:	d000      	beq.n	8006404 <_printf_float+0xbc>
 8006402:	e0a2      	b.n	800654a <_printf_float+0x202>
 8006404:	2001      	movs	r0, #1
 8006406:	4240      	negs	r0, r0
 8006408:	b015      	add	sp, #84	; 0x54
 800640a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800640c:	3307      	adds	r3, #7
 800640e:	e7b6      	b.n	800637e <_printf_float+0x36>
 8006410:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006412:	002b      	movs	r3, r5
 8006414:	0010      	movs	r0, r2
 8006416:	0029      	movs	r1, r5
 8006418:	f7fb ff2a 	bl	8002270 <__aeabi_dcmpun>
 800641c:	2800      	cmp	r0, #0
 800641e:	d00b      	beq.n	8006438 <_printf_float+0xf0>
 8006420:	2d00      	cmp	r5, #0
 8006422:	da03      	bge.n	800642c <_printf_float+0xe4>
 8006424:	0023      	movs	r3, r4
 8006426:	222d      	movs	r2, #45	; 0x2d
 8006428:	3343      	adds	r3, #67	; 0x43
 800642a:	701a      	strb	r2, [r3, #0]
 800642c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800642e:	4d86      	ldr	r5, [pc, #536]	; (8006648 <_printf_float+0x300>)
 8006430:	2b47      	cmp	r3, #71	; 0x47
 8006432:	d9d5      	bls.n	80063e0 <_printf_float+0x98>
 8006434:	4d85      	ldr	r5, [pc, #532]	; (800664c <_printf_float+0x304>)
 8006436:	e7d3      	b.n	80063e0 <_printf_float+0x98>
 8006438:	2220      	movs	r2, #32
 800643a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800643c:	6863      	ldr	r3, [r4, #4]
 800643e:	4391      	bics	r1, r2
 8006440:	910f      	str	r1, [sp, #60]	; 0x3c
 8006442:	1c5a      	adds	r2, r3, #1
 8006444:	d149      	bne.n	80064da <_printf_float+0x192>
 8006446:	3307      	adds	r3, #7
 8006448:	6063      	str	r3, [r4, #4]
 800644a:	2380      	movs	r3, #128	; 0x80
 800644c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800644e:	00db      	lsls	r3, r3, #3
 8006450:	4313      	orrs	r3, r2
 8006452:	2200      	movs	r2, #0
 8006454:	9206      	str	r2, [sp, #24]
 8006456:	aa12      	add	r2, sp, #72	; 0x48
 8006458:	9205      	str	r2, [sp, #20]
 800645a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800645c:	a908      	add	r1, sp, #32
 800645e:	9204      	str	r2, [sp, #16]
 8006460:	aa11      	add	r2, sp, #68	; 0x44
 8006462:	9203      	str	r2, [sp, #12]
 8006464:	2223      	movs	r2, #35	; 0x23
 8006466:	6023      	str	r3, [r4, #0]
 8006468:	9301      	str	r3, [sp, #4]
 800646a:	6863      	ldr	r3, [r4, #4]
 800646c:	1852      	adds	r2, r2, r1
 800646e:	9202      	str	r2, [sp, #8]
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	0038      	movs	r0, r7
 8006474:	002b      	movs	r3, r5
 8006476:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006478:	f7ff febc 	bl	80061f4 <__cvt>
 800647c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800647e:	0005      	movs	r5, r0
 8006480:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006482:	2b47      	cmp	r3, #71	; 0x47
 8006484:	d108      	bne.n	8006498 <_printf_float+0x150>
 8006486:	1ccb      	adds	r3, r1, #3
 8006488:	db02      	blt.n	8006490 <_printf_float+0x148>
 800648a:	6863      	ldr	r3, [r4, #4]
 800648c:	4299      	cmp	r1, r3
 800648e:	dd48      	ble.n	8006522 <_printf_float+0x1da>
 8006490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006492:	3b02      	subs	r3, #2
 8006494:	b2db      	uxtb	r3, r3
 8006496:	930a      	str	r3, [sp, #40]	; 0x28
 8006498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800649a:	2b65      	cmp	r3, #101	; 0x65
 800649c:	d824      	bhi.n	80064e8 <_printf_float+0x1a0>
 800649e:	0020      	movs	r0, r4
 80064a0:	001a      	movs	r2, r3
 80064a2:	3901      	subs	r1, #1
 80064a4:	3050      	adds	r0, #80	; 0x50
 80064a6:	9111      	str	r1, [sp, #68]	; 0x44
 80064a8:	f7ff ff07 	bl	80062ba <__exponent>
 80064ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80064ae:	900b      	str	r0, [sp, #44]	; 0x2c
 80064b0:	1813      	adds	r3, r2, r0
 80064b2:	6123      	str	r3, [r4, #16]
 80064b4:	2a01      	cmp	r2, #1
 80064b6:	dc02      	bgt.n	80064be <_printf_float+0x176>
 80064b8:	6822      	ldr	r2, [r4, #0]
 80064ba:	07d2      	lsls	r2, r2, #31
 80064bc:	d501      	bpl.n	80064c2 <_printf_float+0x17a>
 80064be:	3301      	adds	r3, #1
 80064c0:	6123      	str	r3, [r4, #16]
 80064c2:	2323      	movs	r3, #35	; 0x23
 80064c4:	aa08      	add	r2, sp, #32
 80064c6:	189b      	adds	r3, r3, r2
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d100      	bne.n	80064d0 <_printf_float+0x188>
 80064ce:	e78f      	b.n	80063f0 <_printf_float+0xa8>
 80064d0:	0023      	movs	r3, r4
 80064d2:	222d      	movs	r2, #45	; 0x2d
 80064d4:	3343      	adds	r3, #67	; 0x43
 80064d6:	701a      	strb	r2, [r3, #0]
 80064d8:	e78a      	b.n	80063f0 <_printf_float+0xa8>
 80064da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80064dc:	2a47      	cmp	r2, #71	; 0x47
 80064de:	d1b4      	bne.n	800644a <_printf_float+0x102>
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1b2      	bne.n	800644a <_printf_float+0x102>
 80064e4:	3301      	adds	r3, #1
 80064e6:	e7af      	b.n	8006448 <_printf_float+0x100>
 80064e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064ea:	2b66      	cmp	r3, #102	; 0x66
 80064ec:	d11b      	bne.n	8006526 <_printf_float+0x1de>
 80064ee:	6863      	ldr	r3, [r4, #4]
 80064f0:	2900      	cmp	r1, #0
 80064f2:	dd0d      	ble.n	8006510 <_printf_float+0x1c8>
 80064f4:	6121      	str	r1, [r4, #16]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d102      	bne.n	8006500 <_printf_float+0x1b8>
 80064fa:	6822      	ldr	r2, [r4, #0]
 80064fc:	07d2      	lsls	r2, r2, #31
 80064fe:	d502      	bpl.n	8006506 <_printf_float+0x1be>
 8006500:	3301      	adds	r3, #1
 8006502:	1859      	adds	r1, r3, r1
 8006504:	6121      	str	r1, [r4, #16]
 8006506:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006508:	65a3      	str	r3, [r4, #88]	; 0x58
 800650a:	2300      	movs	r3, #0
 800650c:	930b      	str	r3, [sp, #44]	; 0x2c
 800650e:	e7d8      	b.n	80064c2 <_printf_float+0x17a>
 8006510:	2b00      	cmp	r3, #0
 8006512:	d103      	bne.n	800651c <_printf_float+0x1d4>
 8006514:	2201      	movs	r2, #1
 8006516:	6821      	ldr	r1, [r4, #0]
 8006518:	4211      	tst	r1, r2
 800651a:	d000      	beq.n	800651e <_printf_float+0x1d6>
 800651c:	1c9a      	adds	r2, r3, #2
 800651e:	6122      	str	r2, [r4, #16]
 8006520:	e7f1      	b.n	8006506 <_printf_float+0x1be>
 8006522:	2367      	movs	r3, #103	; 0x67
 8006524:	930a      	str	r3, [sp, #40]	; 0x28
 8006526:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006528:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800652a:	4293      	cmp	r3, r2
 800652c:	db06      	blt.n	800653c <_printf_float+0x1f4>
 800652e:	6822      	ldr	r2, [r4, #0]
 8006530:	6123      	str	r3, [r4, #16]
 8006532:	07d2      	lsls	r2, r2, #31
 8006534:	d5e7      	bpl.n	8006506 <_printf_float+0x1be>
 8006536:	3301      	adds	r3, #1
 8006538:	6123      	str	r3, [r4, #16]
 800653a:	e7e4      	b.n	8006506 <_printf_float+0x1be>
 800653c:	2101      	movs	r1, #1
 800653e:	2b00      	cmp	r3, #0
 8006540:	dc01      	bgt.n	8006546 <_printf_float+0x1fe>
 8006542:	1849      	adds	r1, r1, r1
 8006544:	1ac9      	subs	r1, r1, r3
 8006546:	1852      	adds	r2, r2, r1
 8006548:	e7e9      	b.n	800651e <_printf_float+0x1d6>
 800654a:	6822      	ldr	r2, [r4, #0]
 800654c:	0553      	lsls	r3, r2, #21
 800654e:	d407      	bmi.n	8006560 <_printf_float+0x218>
 8006550:	6923      	ldr	r3, [r4, #16]
 8006552:	002a      	movs	r2, r5
 8006554:	0038      	movs	r0, r7
 8006556:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006558:	47b0      	blx	r6
 800655a:	1c43      	adds	r3, r0, #1
 800655c:	d128      	bne.n	80065b0 <_printf_float+0x268>
 800655e:	e751      	b.n	8006404 <_printf_float+0xbc>
 8006560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006562:	2b65      	cmp	r3, #101	; 0x65
 8006564:	d800      	bhi.n	8006568 <_printf_float+0x220>
 8006566:	e0e1      	b.n	800672c <_printf_float+0x3e4>
 8006568:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800656a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800656c:	2200      	movs	r2, #0
 800656e:	2300      	movs	r3, #0
 8006570:	f7f9 ff6c 	bl	800044c <__aeabi_dcmpeq>
 8006574:	2800      	cmp	r0, #0
 8006576:	d031      	beq.n	80065dc <_printf_float+0x294>
 8006578:	2301      	movs	r3, #1
 800657a:	0038      	movs	r0, r7
 800657c:	4a34      	ldr	r2, [pc, #208]	; (8006650 <_printf_float+0x308>)
 800657e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006580:	47b0      	blx	r6
 8006582:	1c43      	adds	r3, r0, #1
 8006584:	d100      	bne.n	8006588 <_printf_float+0x240>
 8006586:	e73d      	b.n	8006404 <_printf_float+0xbc>
 8006588:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800658a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800658c:	4293      	cmp	r3, r2
 800658e:	db02      	blt.n	8006596 <_printf_float+0x24e>
 8006590:	6823      	ldr	r3, [r4, #0]
 8006592:	07db      	lsls	r3, r3, #31
 8006594:	d50c      	bpl.n	80065b0 <_printf_float+0x268>
 8006596:	0038      	movs	r0, r7
 8006598:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800659a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800659c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800659e:	47b0      	blx	r6
 80065a0:	2500      	movs	r5, #0
 80065a2:	1c43      	adds	r3, r0, #1
 80065a4:	d100      	bne.n	80065a8 <_printf_float+0x260>
 80065a6:	e72d      	b.n	8006404 <_printf_float+0xbc>
 80065a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065aa:	3b01      	subs	r3, #1
 80065ac:	42ab      	cmp	r3, r5
 80065ae:	dc0a      	bgt.n	80065c6 <_printf_float+0x27e>
 80065b0:	6823      	ldr	r3, [r4, #0]
 80065b2:	079b      	lsls	r3, r3, #30
 80065b4:	d500      	bpl.n	80065b8 <_printf_float+0x270>
 80065b6:	e106      	b.n	80067c6 <_printf_float+0x47e>
 80065b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80065ba:	68e0      	ldr	r0, [r4, #12]
 80065bc:	4298      	cmp	r0, r3
 80065be:	db00      	blt.n	80065c2 <_printf_float+0x27a>
 80065c0:	e722      	b.n	8006408 <_printf_float+0xc0>
 80065c2:	0018      	movs	r0, r3
 80065c4:	e720      	b.n	8006408 <_printf_float+0xc0>
 80065c6:	0022      	movs	r2, r4
 80065c8:	2301      	movs	r3, #1
 80065ca:	0038      	movs	r0, r7
 80065cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065ce:	321a      	adds	r2, #26
 80065d0:	47b0      	blx	r6
 80065d2:	1c43      	adds	r3, r0, #1
 80065d4:	d100      	bne.n	80065d8 <_printf_float+0x290>
 80065d6:	e715      	b.n	8006404 <_printf_float+0xbc>
 80065d8:	3501      	adds	r5, #1
 80065da:	e7e5      	b.n	80065a8 <_printf_float+0x260>
 80065dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065de:	2b00      	cmp	r3, #0
 80065e0:	dc38      	bgt.n	8006654 <_printf_float+0x30c>
 80065e2:	2301      	movs	r3, #1
 80065e4:	0038      	movs	r0, r7
 80065e6:	4a1a      	ldr	r2, [pc, #104]	; (8006650 <_printf_float+0x308>)
 80065e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065ea:	47b0      	blx	r6
 80065ec:	1c43      	adds	r3, r0, #1
 80065ee:	d100      	bne.n	80065f2 <_printf_float+0x2aa>
 80065f0:	e708      	b.n	8006404 <_printf_float+0xbc>
 80065f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80065f6:	4313      	orrs	r3, r2
 80065f8:	d102      	bne.n	8006600 <_printf_float+0x2b8>
 80065fa:	6823      	ldr	r3, [r4, #0]
 80065fc:	07db      	lsls	r3, r3, #31
 80065fe:	d5d7      	bpl.n	80065b0 <_printf_float+0x268>
 8006600:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006602:	0038      	movs	r0, r7
 8006604:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006606:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006608:	47b0      	blx	r6
 800660a:	1c43      	adds	r3, r0, #1
 800660c:	d100      	bne.n	8006610 <_printf_float+0x2c8>
 800660e:	e6f9      	b.n	8006404 <_printf_float+0xbc>
 8006610:	2300      	movs	r3, #0
 8006612:	930a      	str	r3, [sp, #40]	; 0x28
 8006614:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006616:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006618:	425b      	negs	r3, r3
 800661a:	4293      	cmp	r3, r2
 800661c:	dc01      	bgt.n	8006622 <_printf_float+0x2da>
 800661e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006620:	e797      	b.n	8006552 <_printf_float+0x20a>
 8006622:	0022      	movs	r2, r4
 8006624:	2301      	movs	r3, #1
 8006626:	0038      	movs	r0, r7
 8006628:	9909      	ldr	r1, [sp, #36]	; 0x24
 800662a:	321a      	adds	r2, #26
 800662c:	47b0      	blx	r6
 800662e:	1c43      	adds	r3, r0, #1
 8006630:	d100      	bne.n	8006634 <_printf_float+0x2ec>
 8006632:	e6e7      	b.n	8006404 <_printf_float+0xbc>
 8006634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006636:	3301      	adds	r3, #1
 8006638:	e7eb      	b.n	8006612 <_printf_float+0x2ca>
 800663a:	46c0      	nop			; (mov r8, r8)
 800663c:	7fefffff 	.word	0x7fefffff
 8006640:	0800ad8c 	.word	0x0800ad8c
 8006644:	0800ad90 	.word	0x0800ad90
 8006648:	0800ad94 	.word	0x0800ad94
 800664c:	0800ad98 	.word	0x0800ad98
 8006650:	0800ad9c 	.word	0x0800ad9c
 8006654:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006656:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006658:	920a      	str	r2, [sp, #40]	; 0x28
 800665a:	429a      	cmp	r2, r3
 800665c:	dd00      	ble.n	8006660 <_printf_float+0x318>
 800665e:	930a      	str	r3, [sp, #40]	; 0x28
 8006660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006662:	2b00      	cmp	r3, #0
 8006664:	dc3c      	bgt.n	80066e0 <_printf_float+0x398>
 8006666:	2300      	movs	r3, #0
 8006668:	930d      	str	r3, [sp, #52]	; 0x34
 800666a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800666c:	43db      	mvns	r3, r3
 800666e:	17db      	asrs	r3, r3, #31
 8006670:	930f      	str	r3, [sp, #60]	; 0x3c
 8006672:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006674:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006676:	930b      	str	r3, [sp, #44]	; 0x2c
 8006678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800667a:	4013      	ands	r3, r2
 800667c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006682:	4293      	cmp	r3, r2
 8006684:	dc34      	bgt.n	80066f0 <_printf_float+0x3a8>
 8006686:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006688:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800668a:	4293      	cmp	r3, r2
 800668c:	db3d      	blt.n	800670a <_printf_float+0x3c2>
 800668e:	6823      	ldr	r3, [r4, #0]
 8006690:	07db      	lsls	r3, r3, #31
 8006692:	d43a      	bmi.n	800670a <_printf_float+0x3c2>
 8006694:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006696:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006698:	9911      	ldr	r1, [sp, #68]	; 0x44
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	1a52      	subs	r2, r2, r1
 800669e:	920a      	str	r2, [sp, #40]	; 0x28
 80066a0:	429a      	cmp	r2, r3
 80066a2:	dd00      	ble.n	80066a6 <_printf_float+0x35e>
 80066a4:	930a      	str	r3, [sp, #40]	; 0x28
 80066a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	dc36      	bgt.n	800671a <_printf_float+0x3d2>
 80066ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066ae:	2500      	movs	r5, #0
 80066b0:	43db      	mvns	r3, r3
 80066b2:	17db      	asrs	r3, r3, #31
 80066b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80066b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80066b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80066bc:	1a9b      	subs	r3, r3, r2
 80066be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066c0:	400a      	ands	r2, r1
 80066c2:	1a9b      	subs	r3, r3, r2
 80066c4:	42ab      	cmp	r3, r5
 80066c6:	dc00      	bgt.n	80066ca <_printf_float+0x382>
 80066c8:	e772      	b.n	80065b0 <_printf_float+0x268>
 80066ca:	0022      	movs	r2, r4
 80066cc:	2301      	movs	r3, #1
 80066ce:	0038      	movs	r0, r7
 80066d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066d2:	321a      	adds	r2, #26
 80066d4:	47b0      	blx	r6
 80066d6:	1c43      	adds	r3, r0, #1
 80066d8:	d100      	bne.n	80066dc <_printf_float+0x394>
 80066da:	e693      	b.n	8006404 <_printf_float+0xbc>
 80066dc:	3501      	adds	r5, #1
 80066de:	e7ea      	b.n	80066b6 <_printf_float+0x36e>
 80066e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066e2:	002a      	movs	r2, r5
 80066e4:	0038      	movs	r0, r7
 80066e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066e8:	47b0      	blx	r6
 80066ea:	1c43      	adds	r3, r0, #1
 80066ec:	d1bb      	bne.n	8006666 <_printf_float+0x31e>
 80066ee:	e689      	b.n	8006404 <_printf_float+0xbc>
 80066f0:	0022      	movs	r2, r4
 80066f2:	2301      	movs	r3, #1
 80066f4:	0038      	movs	r0, r7
 80066f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066f8:	321a      	adds	r2, #26
 80066fa:	47b0      	blx	r6
 80066fc:	1c43      	adds	r3, r0, #1
 80066fe:	d100      	bne.n	8006702 <_printf_float+0x3ba>
 8006700:	e680      	b.n	8006404 <_printf_float+0xbc>
 8006702:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006704:	3301      	adds	r3, #1
 8006706:	930d      	str	r3, [sp, #52]	; 0x34
 8006708:	e7b3      	b.n	8006672 <_printf_float+0x32a>
 800670a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800670c:	0038      	movs	r0, r7
 800670e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006710:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006712:	47b0      	blx	r6
 8006714:	1c43      	adds	r3, r0, #1
 8006716:	d1bd      	bne.n	8006694 <_printf_float+0x34c>
 8006718:	e674      	b.n	8006404 <_printf_float+0xbc>
 800671a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800671c:	0038      	movs	r0, r7
 800671e:	18ea      	adds	r2, r5, r3
 8006720:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006724:	47b0      	blx	r6
 8006726:	1c43      	adds	r3, r0, #1
 8006728:	d1c0      	bne.n	80066ac <_printf_float+0x364>
 800672a:	e66b      	b.n	8006404 <_printf_float+0xbc>
 800672c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800672e:	2b01      	cmp	r3, #1
 8006730:	dc02      	bgt.n	8006738 <_printf_float+0x3f0>
 8006732:	2301      	movs	r3, #1
 8006734:	421a      	tst	r2, r3
 8006736:	d034      	beq.n	80067a2 <_printf_float+0x45a>
 8006738:	2301      	movs	r3, #1
 800673a:	002a      	movs	r2, r5
 800673c:	0038      	movs	r0, r7
 800673e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006740:	47b0      	blx	r6
 8006742:	1c43      	adds	r3, r0, #1
 8006744:	d100      	bne.n	8006748 <_printf_float+0x400>
 8006746:	e65d      	b.n	8006404 <_printf_float+0xbc>
 8006748:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800674a:	0038      	movs	r0, r7
 800674c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800674e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006750:	47b0      	blx	r6
 8006752:	1c43      	adds	r3, r0, #1
 8006754:	d100      	bne.n	8006758 <_printf_float+0x410>
 8006756:	e655      	b.n	8006404 <_printf_float+0xbc>
 8006758:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800675a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800675c:	2200      	movs	r2, #0
 800675e:	2300      	movs	r3, #0
 8006760:	f7f9 fe74 	bl	800044c <__aeabi_dcmpeq>
 8006764:	2800      	cmp	r0, #0
 8006766:	d11a      	bne.n	800679e <_printf_float+0x456>
 8006768:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800676a:	1c6a      	adds	r2, r5, #1
 800676c:	3b01      	subs	r3, #1
 800676e:	0038      	movs	r0, r7
 8006770:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006772:	47b0      	blx	r6
 8006774:	1c43      	adds	r3, r0, #1
 8006776:	d10e      	bne.n	8006796 <_printf_float+0x44e>
 8006778:	e644      	b.n	8006404 <_printf_float+0xbc>
 800677a:	0022      	movs	r2, r4
 800677c:	2301      	movs	r3, #1
 800677e:	0038      	movs	r0, r7
 8006780:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006782:	321a      	adds	r2, #26
 8006784:	47b0      	blx	r6
 8006786:	1c43      	adds	r3, r0, #1
 8006788:	d100      	bne.n	800678c <_printf_float+0x444>
 800678a:	e63b      	b.n	8006404 <_printf_float+0xbc>
 800678c:	3501      	adds	r5, #1
 800678e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006790:	3b01      	subs	r3, #1
 8006792:	42ab      	cmp	r3, r5
 8006794:	dcf1      	bgt.n	800677a <_printf_float+0x432>
 8006796:	0022      	movs	r2, r4
 8006798:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800679a:	3250      	adds	r2, #80	; 0x50
 800679c:	e6da      	b.n	8006554 <_printf_float+0x20c>
 800679e:	2500      	movs	r5, #0
 80067a0:	e7f5      	b.n	800678e <_printf_float+0x446>
 80067a2:	002a      	movs	r2, r5
 80067a4:	e7e3      	b.n	800676e <_printf_float+0x426>
 80067a6:	0022      	movs	r2, r4
 80067a8:	2301      	movs	r3, #1
 80067aa:	0038      	movs	r0, r7
 80067ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067ae:	3219      	adds	r2, #25
 80067b0:	47b0      	blx	r6
 80067b2:	1c43      	adds	r3, r0, #1
 80067b4:	d100      	bne.n	80067b8 <_printf_float+0x470>
 80067b6:	e625      	b.n	8006404 <_printf_float+0xbc>
 80067b8:	3501      	adds	r5, #1
 80067ba:	68e3      	ldr	r3, [r4, #12]
 80067bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80067be:	1a9b      	subs	r3, r3, r2
 80067c0:	42ab      	cmp	r3, r5
 80067c2:	dcf0      	bgt.n	80067a6 <_printf_float+0x45e>
 80067c4:	e6f8      	b.n	80065b8 <_printf_float+0x270>
 80067c6:	2500      	movs	r5, #0
 80067c8:	e7f7      	b.n	80067ba <_printf_float+0x472>
 80067ca:	46c0      	nop			; (mov r8, r8)

080067cc <_printf_common>:
 80067cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067ce:	0015      	movs	r5, r2
 80067d0:	9301      	str	r3, [sp, #4]
 80067d2:	688a      	ldr	r2, [r1, #8]
 80067d4:	690b      	ldr	r3, [r1, #16]
 80067d6:	000c      	movs	r4, r1
 80067d8:	9000      	str	r0, [sp, #0]
 80067da:	4293      	cmp	r3, r2
 80067dc:	da00      	bge.n	80067e0 <_printf_common+0x14>
 80067de:	0013      	movs	r3, r2
 80067e0:	0022      	movs	r2, r4
 80067e2:	602b      	str	r3, [r5, #0]
 80067e4:	3243      	adds	r2, #67	; 0x43
 80067e6:	7812      	ldrb	r2, [r2, #0]
 80067e8:	2a00      	cmp	r2, #0
 80067ea:	d001      	beq.n	80067f0 <_printf_common+0x24>
 80067ec:	3301      	adds	r3, #1
 80067ee:	602b      	str	r3, [r5, #0]
 80067f0:	6823      	ldr	r3, [r4, #0]
 80067f2:	069b      	lsls	r3, r3, #26
 80067f4:	d502      	bpl.n	80067fc <_printf_common+0x30>
 80067f6:	682b      	ldr	r3, [r5, #0]
 80067f8:	3302      	adds	r3, #2
 80067fa:	602b      	str	r3, [r5, #0]
 80067fc:	6822      	ldr	r2, [r4, #0]
 80067fe:	2306      	movs	r3, #6
 8006800:	0017      	movs	r7, r2
 8006802:	401f      	ands	r7, r3
 8006804:	421a      	tst	r2, r3
 8006806:	d027      	beq.n	8006858 <_printf_common+0x8c>
 8006808:	0023      	movs	r3, r4
 800680a:	3343      	adds	r3, #67	; 0x43
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	1e5a      	subs	r2, r3, #1
 8006810:	4193      	sbcs	r3, r2
 8006812:	6822      	ldr	r2, [r4, #0]
 8006814:	0692      	lsls	r2, r2, #26
 8006816:	d430      	bmi.n	800687a <_printf_common+0xae>
 8006818:	0022      	movs	r2, r4
 800681a:	9901      	ldr	r1, [sp, #4]
 800681c:	9800      	ldr	r0, [sp, #0]
 800681e:	9e08      	ldr	r6, [sp, #32]
 8006820:	3243      	adds	r2, #67	; 0x43
 8006822:	47b0      	blx	r6
 8006824:	1c43      	adds	r3, r0, #1
 8006826:	d025      	beq.n	8006874 <_printf_common+0xa8>
 8006828:	2306      	movs	r3, #6
 800682a:	6820      	ldr	r0, [r4, #0]
 800682c:	682a      	ldr	r2, [r5, #0]
 800682e:	68e1      	ldr	r1, [r4, #12]
 8006830:	2500      	movs	r5, #0
 8006832:	4003      	ands	r3, r0
 8006834:	2b04      	cmp	r3, #4
 8006836:	d103      	bne.n	8006840 <_printf_common+0x74>
 8006838:	1a8d      	subs	r5, r1, r2
 800683a:	43eb      	mvns	r3, r5
 800683c:	17db      	asrs	r3, r3, #31
 800683e:	401d      	ands	r5, r3
 8006840:	68a3      	ldr	r3, [r4, #8]
 8006842:	6922      	ldr	r2, [r4, #16]
 8006844:	4293      	cmp	r3, r2
 8006846:	dd01      	ble.n	800684c <_printf_common+0x80>
 8006848:	1a9b      	subs	r3, r3, r2
 800684a:	18ed      	adds	r5, r5, r3
 800684c:	2700      	movs	r7, #0
 800684e:	42bd      	cmp	r5, r7
 8006850:	d120      	bne.n	8006894 <_printf_common+0xc8>
 8006852:	2000      	movs	r0, #0
 8006854:	e010      	b.n	8006878 <_printf_common+0xac>
 8006856:	3701      	adds	r7, #1
 8006858:	68e3      	ldr	r3, [r4, #12]
 800685a:	682a      	ldr	r2, [r5, #0]
 800685c:	1a9b      	subs	r3, r3, r2
 800685e:	42bb      	cmp	r3, r7
 8006860:	ddd2      	ble.n	8006808 <_printf_common+0x3c>
 8006862:	0022      	movs	r2, r4
 8006864:	2301      	movs	r3, #1
 8006866:	9901      	ldr	r1, [sp, #4]
 8006868:	9800      	ldr	r0, [sp, #0]
 800686a:	9e08      	ldr	r6, [sp, #32]
 800686c:	3219      	adds	r2, #25
 800686e:	47b0      	blx	r6
 8006870:	1c43      	adds	r3, r0, #1
 8006872:	d1f0      	bne.n	8006856 <_printf_common+0x8a>
 8006874:	2001      	movs	r0, #1
 8006876:	4240      	negs	r0, r0
 8006878:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800687a:	2030      	movs	r0, #48	; 0x30
 800687c:	18e1      	adds	r1, r4, r3
 800687e:	3143      	adds	r1, #67	; 0x43
 8006880:	7008      	strb	r0, [r1, #0]
 8006882:	0021      	movs	r1, r4
 8006884:	1c5a      	adds	r2, r3, #1
 8006886:	3145      	adds	r1, #69	; 0x45
 8006888:	7809      	ldrb	r1, [r1, #0]
 800688a:	18a2      	adds	r2, r4, r2
 800688c:	3243      	adds	r2, #67	; 0x43
 800688e:	3302      	adds	r3, #2
 8006890:	7011      	strb	r1, [r2, #0]
 8006892:	e7c1      	b.n	8006818 <_printf_common+0x4c>
 8006894:	0022      	movs	r2, r4
 8006896:	2301      	movs	r3, #1
 8006898:	9901      	ldr	r1, [sp, #4]
 800689a:	9800      	ldr	r0, [sp, #0]
 800689c:	9e08      	ldr	r6, [sp, #32]
 800689e:	321a      	adds	r2, #26
 80068a0:	47b0      	blx	r6
 80068a2:	1c43      	adds	r3, r0, #1
 80068a4:	d0e6      	beq.n	8006874 <_printf_common+0xa8>
 80068a6:	3701      	adds	r7, #1
 80068a8:	e7d1      	b.n	800684e <_printf_common+0x82>
	...

080068ac <_printf_i>:
 80068ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068ae:	b08b      	sub	sp, #44	; 0x2c
 80068b0:	9206      	str	r2, [sp, #24]
 80068b2:	000a      	movs	r2, r1
 80068b4:	3243      	adds	r2, #67	; 0x43
 80068b6:	9307      	str	r3, [sp, #28]
 80068b8:	9005      	str	r0, [sp, #20]
 80068ba:	9204      	str	r2, [sp, #16]
 80068bc:	7e0a      	ldrb	r2, [r1, #24]
 80068be:	000c      	movs	r4, r1
 80068c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80068c2:	2a78      	cmp	r2, #120	; 0x78
 80068c4:	d807      	bhi.n	80068d6 <_printf_i+0x2a>
 80068c6:	2a62      	cmp	r2, #98	; 0x62
 80068c8:	d809      	bhi.n	80068de <_printf_i+0x32>
 80068ca:	2a00      	cmp	r2, #0
 80068cc:	d100      	bne.n	80068d0 <_printf_i+0x24>
 80068ce:	e0c1      	b.n	8006a54 <_printf_i+0x1a8>
 80068d0:	2a58      	cmp	r2, #88	; 0x58
 80068d2:	d100      	bne.n	80068d6 <_printf_i+0x2a>
 80068d4:	e08c      	b.n	80069f0 <_printf_i+0x144>
 80068d6:	0026      	movs	r6, r4
 80068d8:	3642      	adds	r6, #66	; 0x42
 80068da:	7032      	strb	r2, [r6, #0]
 80068dc:	e022      	b.n	8006924 <_printf_i+0x78>
 80068de:	0010      	movs	r0, r2
 80068e0:	3863      	subs	r0, #99	; 0x63
 80068e2:	2815      	cmp	r0, #21
 80068e4:	d8f7      	bhi.n	80068d6 <_printf_i+0x2a>
 80068e6:	f7f9 fc21 	bl	800012c <__gnu_thumb1_case_shi>
 80068ea:	0016      	.short	0x0016
 80068ec:	fff6001f 	.word	0xfff6001f
 80068f0:	fff6fff6 	.word	0xfff6fff6
 80068f4:	001ffff6 	.word	0x001ffff6
 80068f8:	fff6fff6 	.word	0xfff6fff6
 80068fc:	fff6fff6 	.word	0xfff6fff6
 8006900:	003600a8 	.word	0x003600a8
 8006904:	fff6009a 	.word	0xfff6009a
 8006908:	00b9fff6 	.word	0x00b9fff6
 800690c:	0036fff6 	.word	0x0036fff6
 8006910:	fff6fff6 	.word	0xfff6fff6
 8006914:	009e      	.short	0x009e
 8006916:	0026      	movs	r6, r4
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	3642      	adds	r6, #66	; 0x42
 800691c:	1d11      	adds	r1, r2, #4
 800691e:	6019      	str	r1, [r3, #0]
 8006920:	6813      	ldr	r3, [r2, #0]
 8006922:	7033      	strb	r3, [r6, #0]
 8006924:	2301      	movs	r3, #1
 8006926:	e0a7      	b.n	8006a78 <_printf_i+0x1cc>
 8006928:	6808      	ldr	r0, [r1, #0]
 800692a:	6819      	ldr	r1, [r3, #0]
 800692c:	1d0a      	adds	r2, r1, #4
 800692e:	0605      	lsls	r5, r0, #24
 8006930:	d50b      	bpl.n	800694a <_printf_i+0x9e>
 8006932:	680d      	ldr	r5, [r1, #0]
 8006934:	601a      	str	r2, [r3, #0]
 8006936:	2d00      	cmp	r5, #0
 8006938:	da03      	bge.n	8006942 <_printf_i+0x96>
 800693a:	232d      	movs	r3, #45	; 0x2d
 800693c:	9a04      	ldr	r2, [sp, #16]
 800693e:	426d      	negs	r5, r5
 8006940:	7013      	strb	r3, [r2, #0]
 8006942:	4b61      	ldr	r3, [pc, #388]	; (8006ac8 <_printf_i+0x21c>)
 8006944:	270a      	movs	r7, #10
 8006946:	9303      	str	r3, [sp, #12]
 8006948:	e01b      	b.n	8006982 <_printf_i+0xd6>
 800694a:	680d      	ldr	r5, [r1, #0]
 800694c:	601a      	str	r2, [r3, #0]
 800694e:	0641      	lsls	r1, r0, #25
 8006950:	d5f1      	bpl.n	8006936 <_printf_i+0x8a>
 8006952:	b22d      	sxth	r5, r5
 8006954:	e7ef      	b.n	8006936 <_printf_i+0x8a>
 8006956:	680d      	ldr	r5, [r1, #0]
 8006958:	6819      	ldr	r1, [r3, #0]
 800695a:	1d08      	adds	r0, r1, #4
 800695c:	6018      	str	r0, [r3, #0]
 800695e:	062e      	lsls	r6, r5, #24
 8006960:	d501      	bpl.n	8006966 <_printf_i+0xba>
 8006962:	680d      	ldr	r5, [r1, #0]
 8006964:	e003      	b.n	800696e <_printf_i+0xc2>
 8006966:	066d      	lsls	r5, r5, #25
 8006968:	d5fb      	bpl.n	8006962 <_printf_i+0xb6>
 800696a:	680d      	ldr	r5, [r1, #0]
 800696c:	b2ad      	uxth	r5, r5
 800696e:	4b56      	ldr	r3, [pc, #344]	; (8006ac8 <_printf_i+0x21c>)
 8006970:	2708      	movs	r7, #8
 8006972:	9303      	str	r3, [sp, #12]
 8006974:	2a6f      	cmp	r2, #111	; 0x6f
 8006976:	d000      	beq.n	800697a <_printf_i+0xce>
 8006978:	3702      	adds	r7, #2
 800697a:	0023      	movs	r3, r4
 800697c:	2200      	movs	r2, #0
 800697e:	3343      	adds	r3, #67	; 0x43
 8006980:	701a      	strb	r2, [r3, #0]
 8006982:	6863      	ldr	r3, [r4, #4]
 8006984:	60a3      	str	r3, [r4, #8]
 8006986:	2b00      	cmp	r3, #0
 8006988:	db03      	blt.n	8006992 <_printf_i+0xe6>
 800698a:	2204      	movs	r2, #4
 800698c:	6821      	ldr	r1, [r4, #0]
 800698e:	4391      	bics	r1, r2
 8006990:	6021      	str	r1, [r4, #0]
 8006992:	2d00      	cmp	r5, #0
 8006994:	d102      	bne.n	800699c <_printf_i+0xf0>
 8006996:	9e04      	ldr	r6, [sp, #16]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00c      	beq.n	80069b6 <_printf_i+0x10a>
 800699c:	9e04      	ldr	r6, [sp, #16]
 800699e:	0028      	movs	r0, r5
 80069a0:	0039      	movs	r1, r7
 80069a2:	f7f9 fc53 	bl	800024c <__aeabi_uidivmod>
 80069a6:	9b03      	ldr	r3, [sp, #12]
 80069a8:	3e01      	subs	r6, #1
 80069aa:	5c5b      	ldrb	r3, [r3, r1]
 80069ac:	7033      	strb	r3, [r6, #0]
 80069ae:	002b      	movs	r3, r5
 80069b0:	0005      	movs	r5, r0
 80069b2:	429f      	cmp	r7, r3
 80069b4:	d9f3      	bls.n	800699e <_printf_i+0xf2>
 80069b6:	2f08      	cmp	r7, #8
 80069b8:	d109      	bne.n	80069ce <_printf_i+0x122>
 80069ba:	6823      	ldr	r3, [r4, #0]
 80069bc:	07db      	lsls	r3, r3, #31
 80069be:	d506      	bpl.n	80069ce <_printf_i+0x122>
 80069c0:	6863      	ldr	r3, [r4, #4]
 80069c2:	6922      	ldr	r2, [r4, #16]
 80069c4:	4293      	cmp	r3, r2
 80069c6:	dc02      	bgt.n	80069ce <_printf_i+0x122>
 80069c8:	2330      	movs	r3, #48	; 0x30
 80069ca:	3e01      	subs	r6, #1
 80069cc:	7033      	strb	r3, [r6, #0]
 80069ce:	9b04      	ldr	r3, [sp, #16]
 80069d0:	1b9b      	subs	r3, r3, r6
 80069d2:	6123      	str	r3, [r4, #16]
 80069d4:	9b07      	ldr	r3, [sp, #28]
 80069d6:	0021      	movs	r1, r4
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	9805      	ldr	r0, [sp, #20]
 80069dc:	9b06      	ldr	r3, [sp, #24]
 80069de:	aa09      	add	r2, sp, #36	; 0x24
 80069e0:	f7ff fef4 	bl	80067cc <_printf_common>
 80069e4:	1c43      	adds	r3, r0, #1
 80069e6:	d14c      	bne.n	8006a82 <_printf_i+0x1d6>
 80069e8:	2001      	movs	r0, #1
 80069ea:	4240      	negs	r0, r0
 80069ec:	b00b      	add	sp, #44	; 0x2c
 80069ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069f0:	3145      	adds	r1, #69	; 0x45
 80069f2:	700a      	strb	r2, [r1, #0]
 80069f4:	4a34      	ldr	r2, [pc, #208]	; (8006ac8 <_printf_i+0x21c>)
 80069f6:	9203      	str	r2, [sp, #12]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	6821      	ldr	r1, [r4, #0]
 80069fc:	ca20      	ldmia	r2!, {r5}
 80069fe:	601a      	str	r2, [r3, #0]
 8006a00:	0608      	lsls	r0, r1, #24
 8006a02:	d516      	bpl.n	8006a32 <_printf_i+0x186>
 8006a04:	07cb      	lsls	r3, r1, #31
 8006a06:	d502      	bpl.n	8006a0e <_printf_i+0x162>
 8006a08:	2320      	movs	r3, #32
 8006a0a:	4319      	orrs	r1, r3
 8006a0c:	6021      	str	r1, [r4, #0]
 8006a0e:	2710      	movs	r7, #16
 8006a10:	2d00      	cmp	r5, #0
 8006a12:	d1b2      	bne.n	800697a <_printf_i+0xce>
 8006a14:	2320      	movs	r3, #32
 8006a16:	6822      	ldr	r2, [r4, #0]
 8006a18:	439a      	bics	r2, r3
 8006a1a:	6022      	str	r2, [r4, #0]
 8006a1c:	e7ad      	b.n	800697a <_printf_i+0xce>
 8006a1e:	2220      	movs	r2, #32
 8006a20:	6809      	ldr	r1, [r1, #0]
 8006a22:	430a      	orrs	r2, r1
 8006a24:	6022      	str	r2, [r4, #0]
 8006a26:	0022      	movs	r2, r4
 8006a28:	2178      	movs	r1, #120	; 0x78
 8006a2a:	3245      	adds	r2, #69	; 0x45
 8006a2c:	7011      	strb	r1, [r2, #0]
 8006a2e:	4a27      	ldr	r2, [pc, #156]	; (8006acc <_printf_i+0x220>)
 8006a30:	e7e1      	b.n	80069f6 <_printf_i+0x14a>
 8006a32:	0648      	lsls	r0, r1, #25
 8006a34:	d5e6      	bpl.n	8006a04 <_printf_i+0x158>
 8006a36:	b2ad      	uxth	r5, r5
 8006a38:	e7e4      	b.n	8006a04 <_printf_i+0x158>
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	680d      	ldr	r5, [r1, #0]
 8006a3e:	1d10      	adds	r0, r2, #4
 8006a40:	6949      	ldr	r1, [r1, #20]
 8006a42:	6018      	str	r0, [r3, #0]
 8006a44:	6813      	ldr	r3, [r2, #0]
 8006a46:	062e      	lsls	r6, r5, #24
 8006a48:	d501      	bpl.n	8006a4e <_printf_i+0x1a2>
 8006a4a:	6019      	str	r1, [r3, #0]
 8006a4c:	e002      	b.n	8006a54 <_printf_i+0x1a8>
 8006a4e:	066d      	lsls	r5, r5, #25
 8006a50:	d5fb      	bpl.n	8006a4a <_printf_i+0x19e>
 8006a52:	8019      	strh	r1, [r3, #0]
 8006a54:	2300      	movs	r3, #0
 8006a56:	9e04      	ldr	r6, [sp, #16]
 8006a58:	6123      	str	r3, [r4, #16]
 8006a5a:	e7bb      	b.n	80069d4 <_printf_i+0x128>
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	1d11      	adds	r1, r2, #4
 8006a60:	6019      	str	r1, [r3, #0]
 8006a62:	6816      	ldr	r6, [r2, #0]
 8006a64:	2100      	movs	r1, #0
 8006a66:	0030      	movs	r0, r6
 8006a68:	6862      	ldr	r2, [r4, #4]
 8006a6a:	f002 fb69 	bl	8009140 <memchr>
 8006a6e:	2800      	cmp	r0, #0
 8006a70:	d001      	beq.n	8006a76 <_printf_i+0x1ca>
 8006a72:	1b80      	subs	r0, r0, r6
 8006a74:	6060      	str	r0, [r4, #4]
 8006a76:	6863      	ldr	r3, [r4, #4]
 8006a78:	6123      	str	r3, [r4, #16]
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	9a04      	ldr	r2, [sp, #16]
 8006a7e:	7013      	strb	r3, [r2, #0]
 8006a80:	e7a8      	b.n	80069d4 <_printf_i+0x128>
 8006a82:	6923      	ldr	r3, [r4, #16]
 8006a84:	0032      	movs	r2, r6
 8006a86:	9906      	ldr	r1, [sp, #24]
 8006a88:	9805      	ldr	r0, [sp, #20]
 8006a8a:	9d07      	ldr	r5, [sp, #28]
 8006a8c:	47a8      	blx	r5
 8006a8e:	1c43      	adds	r3, r0, #1
 8006a90:	d0aa      	beq.n	80069e8 <_printf_i+0x13c>
 8006a92:	6823      	ldr	r3, [r4, #0]
 8006a94:	079b      	lsls	r3, r3, #30
 8006a96:	d415      	bmi.n	8006ac4 <_printf_i+0x218>
 8006a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a9a:	68e0      	ldr	r0, [r4, #12]
 8006a9c:	4298      	cmp	r0, r3
 8006a9e:	daa5      	bge.n	80069ec <_printf_i+0x140>
 8006aa0:	0018      	movs	r0, r3
 8006aa2:	e7a3      	b.n	80069ec <_printf_i+0x140>
 8006aa4:	0022      	movs	r2, r4
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	9906      	ldr	r1, [sp, #24]
 8006aaa:	9805      	ldr	r0, [sp, #20]
 8006aac:	9e07      	ldr	r6, [sp, #28]
 8006aae:	3219      	adds	r2, #25
 8006ab0:	47b0      	blx	r6
 8006ab2:	1c43      	adds	r3, r0, #1
 8006ab4:	d098      	beq.n	80069e8 <_printf_i+0x13c>
 8006ab6:	3501      	adds	r5, #1
 8006ab8:	68e3      	ldr	r3, [r4, #12]
 8006aba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006abc:	1a9b      	subs	r3, r3, r2
 8006abe:	42ab      	cmp	r3, r5
 8006ac0:	dcf0      	bgt.n	8006aa4 <_printf_i+0x1f8>
 8006ac2:	e7e9      	b.n	8006a98 <_printf_i+0x1ec>
 8006ac4:	2500      	movs	r5, #0
 8006ac6:	e7f7      	b.n	8006ab8 <_printf_i+0x20c>
 8006ac8:	0800ad9e 	.word	0x0800ad9e
 8006acc:	0800adaf 	.word	0x0800adaf

08006ad0 <_scanf_float>:
 8006ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ad2:	b08b      	sub	sp, #44	; 0x2c
 8006ad4:	0015      	movs	r5, r2
 8006ad6:	9001      	str	r0, [sp, #4]
 8006ad8:	22ae      	movs	r2, #174	; 0xae
 8006ada:	2000      	movs	r0, #0
 8006adc:	9306      	str	r3, [sp, #24]
 8006ade:	688b      	ldr	r3, [r1, #8]
 8006ae0:	000e      	movs	r6, r1
 8006ae2:	1e59      	subs	r1, r3, #1
 8006ae4:	0052      	lsls	r2, r2, #1
 8006ae6:	9005      	str	r0, [sp, #20]
 8006ae8:	4291      	cmp	r1, r2
 8006aea:	d905      	bls.n	8006af8 <_scanf_float+0x28>
 8006aec:	3b5e      	subs	r3, #94	; 0x5e
 8006aee:	3bff      	subs	r3, #255	; 0xff
 8006af0:	9305      	str	r3, [sp, #20]
 8006af2:	235e      	movs	r3, #94	; 0x5e
 8006af4:	33ff      	adds	r3, #255	; 0xff
 8006af6:	60b3      	str	r3, [r6, #8]
 8006af8:	23f0      	movs	r3, #240	; 0xf0
 8006afa:	6832      	ldr	r2, [r6, #0]
 8006afc:	00db      	lsls	r3, r3, #3
 8006afe:	4313      	orrs	r3, r2
 8006b00:	6033      	str	r3, [r6, #0]
 8006b02:	0033      	movs	r3, r6
 8006b04:	2400      	movs	r4, #0
 8006b06:	331c      	adds	r3, #28
 8006b08:	001f      	movs	r7, r3
 8006b0a:	9303      	str	r3, [sp, #12]
 8006b0c:	9402      	str	r4, [sp, #8]
 8006b0e:	9408      	str	r4, [sp, #32]
 8006b10:	9407      	str	r4, [sp, #28]
 8006b12:	9400      	str	r4, [sp, #0]
 8006b14:	9404      	str	r4, [sp, #16]
 8006b16:	68b2      	ldr	r2, [r6, #8]
 8006b18:	2a00      	cmp	r2, #0
 8006b1a:	d00a      	beq.n	8006b32 <_scanf_float+0x62>
 8006b1c:	682b      	ldr	r3, [r5, #0]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	2b4e      	cmp	r3, #78	; 0x4e
 8006b22:	d844      	bhi.n	8006bae <_scanf_float+0xde>
 8006b24:	0018      	movs	r0, r3
 8006b26:	2b40      	cmp	r3, #64	; 0x40
 8006b28:	d82c      	bhi.n	8006b84 <_scanf_float+0xb4>
 8006b2a:	382b      	subs	r0, #43	; 0x2b
 8006b2c:	b2c1      	uxtb	r1, r0
 8006b2e:	290e      	cmp	r1, #14
 8006b30:	d92a      	bls.n	8006b88 <_scanf_float+0xb8>
 8006b32:	9b00      	ldr	r3, [sp, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d003      	beq.n	8006b40 <_scanf_float+0x70>
 8006b38:	6832      	ldr	r2, [r6, #0]
 8006b3a:	4ba4      	ldr	r3, [pc, #656]	; (8006dcc <_scanf_float+0x2fc>)
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	6033      	str	r3, [r6, #0]
 8006b40:	9b02      	ldr	r3, [sp, #8]
 8006b42:	3b01      	subs	r3, #1
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d900      	bls.n	8006b4a <_scanf_float+0x7a>
 8006b48:	e0f9      	b.n	8006d3e <_scanf_float+0x26e>
 8006b4a:	24be      	movs	r4, #190	; 0xbe
 8006b4c:	0064      	lsls	r4, r4, #1
 8006b4e:	9b03      	ldr	r3, [sp, #12]
 8006b50:	429f      	cmp	r7, r3
 8006b52:	d900      	bls.n	8006b56 <_scanf_float+0x86>
 8006b54:	e0e9      	b.n	8006d2a <_scanf_float+0x25a>
 8006b56:	2301      	movs	r3, #1
 8006b58:	9302      	str	r3, [sp, #8]
 8006b5a:	e185      	b.n	8006e68 <_scanf_float+0x398>
 8006b5c:	0018      	movs	r0, r3
 8006b5e:	3861      	subs	r0, #97	; 0x61
 8006b60:	280d      	cmp	r0, #13
 8006b62:	d8e6      	bhi.n	8006b32 <_scanf_float+0x62>
 8006b64:	f7f9 fae2 	bl	800012c <__gnu_thumb1_case_shi>
 8006b68:	ffe50083 	.word	0xffe50083
 8006b6c:	ffe5ffe5 	.word	0xffe5ffe5
 8006b70:	00a200b6 	.word	0x00a200b6
 8006b74:	ffe5ffe5 	.word	0xffe5ffe5
 8006b78:	ffe50089 	.word	0xffe50089
 8006b7c:	ffe5ffe5 	.word	0xffe5ffe5
 8006b80:	0065ffe5 	.word	0x0065ffe5
 8006b84:	3841      	subs	r0, #65	; 0x41
 8006b86:	e7eb      	b.n	8006b60 <_scanf_float+0x90>
 8006b88:	280e      	cmp	r0, #14
 8006b8a:	d8d2      	bhi.n	8006b32 <_scanf_float+0x62>
 8006b8c:	f7f9 face 	bl	800012c <__gnu_thumb1_case_shi>
 8006b90:	ffd1004b 	.word	0xffd1004b
 8006b94:	0098004b 	.word	0x0098004b
 8006b98:	0020ffd1 	.word	0x0020ffd1
 8006b9c:	00400040 	.word	0x00400040
 8006ba0:	00400040 	.word	0x00400040
 8006ba4:	00400040 	.word	0x00400040
 8006ba8:	00400040 	.word	0x00400040
 8006bac:	0040      	.short	0x0040
 8006bae:	2b6e      	cmp	r3, #110	; 0x6e
 8006bb0:	d809      	bhi.n	8006bc6 <_scanf_float+0xf6>
 8006bb2:	2b60      	cmp	r3, #96	; 0x60
 8006bb4:	d8d2      	bhi.n	8006b5c <_scanf_float+0x8c>
 8006bb6:	2b54      	cmp	r3, #84	; 0x54
 8006bb8:	d07d      	beq.n	8006cb6 <_scanf_float+0x1e6>
 8006bba:	2b59      	cmp	r3, #89	; 0x59
 8006bbc:	d1b9      	bne.n	8006b32 <_scanf_float+0x62>
 8006bbe:	2c07      	cmp	r4, #7
 8006bc0:	d1b7      	bne.n	8006b32 <_scanf_float+0x62>
 8006bc2:	2408      	movs	r4, #8
 8006bc4:	e02c      	b.n	8006c20 <_scanf_float+0x150>
 8006bc6:	2b74      	cmp	r3, #116	; 0x74
 8006bc8:	d075      	beq.n	8006cb6 <_scanf_float+0x1e6>
 8006bca:	2b79      	cmp	r3, #121	; 0x79
 8006bcc:	d0f7      	beq.n	8006bbe <_scanf_float+0xee>
 8006bce:	e7b0      	b.n	8006b32 <_scanf_float+0x62>
 8006bd0:	6831      	ldr	r1, [r6, #0]
 8006bd2:	05c8      	lsls	r0, r1, #23
 8006bd4:	d51c      	bpl.n	8006c10 <_scanf_float+0x140>
 8006bd6:	2380      	movs	r3, #128	; 0x80
 8006bd8:	4399      	bics	r1, r3
 8006bda:	9b00      	ldr	r3, [sp, #0]
 8006bdc:	6031      	str	r1, [r6, #0]
 8006bde:	3301      	adds	r3, #1
 8006be0:	9300      	str	r3, [sp, #0]
 8006be2:	9b05      	ldr	r3, [sp, #20]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d003      	beq.n	8006bf0 <_scanf_float+0x120>
 8006be8:	3b01      	subs	r3, #1
 8006bea:	3201      	adds	r2, #1
 8006bec:	9305      	str	r3, [sp, #20]
 8006bee:	60b2      	str	r2, [r6, #8]
 8006bf0:	68b3      	ldr	r3, [r6, #8]
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	60b3      	str	r3, [r6, #8]
 8006bf6:	6933      	ldr	r3, [r6, #16]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	6133      	str	r3, [r6, #16]
 8006bfc:	686b      	ldr	r3, [r5, #4]
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	606b      	str	r3, [r5, #4]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	dc00      	bgt.n	8006c08 <_scanf_float+0x138>
 8006c06:	e086      	b.n	8006d16 <_scanf_float+0x246>
 8006c08:	682b      	ldr	r3, [r5, #0]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	602b      	str	r3, [r5, #0]
 8006c0e:	e782      	b.n	8006b16 <_scanf_float+0x46>
 8006c10:	9a02      	ldr	r2, [sp, #8]
 8006c12:	1912      	adds	r2, r2, r4
 8006c14:	2a00      	cmp	r2, #0
 8006c16:	d18c      	bne.n	8006b32 <_scanf_float+0x62>
 8006c18:	4a6d      	ldr	r2, [pc, #436]	; (8006dd0 <_scanf_float+0x300>)
 8006c1a:	6831      	ldr	r1, [r6, #0]
 8006c1c:	400a      	ands	r2, r1
 8006c1e:	6032      	str	r2, [r6, #0]
 8006c20:	703b      	strb	r3, [r7, #0]
 8006c22:	3701      	adds	r7, #1
 8006c24:	e7e4      	b.n	8006bf0 <_scanf_float+0x120>
 8006c26:	2180      	movs	r1, #128	; 0x80
 8006c28:	6832      	ldr	r2, [r6, #0]
 8006c2a:	420a      	tst	r2, r1
 8006c2c:	d081      	beq.n	8006b32 <_scanf_float+0x62>
 8006c2e:	438a      	bics	r2, r1
 8006c30:	e7f5      	b.n	8006c1e <_scanf_float+0x14e>
 8006c32:	9a02      	ldr	r2, [sp, #8]
 8006c34:	2a00      	cmp	r2, #0
 8006c36:	d10f      	bne.n	8006c58 <_scanf_float+0x188>
 8006c38:	9a00      	ldr	r2, [sp, #0]
 8006c3a:	2a00      	cmp	r2, #0
 8006c3c:	d10f      	bne.n	8006c5e <_scanf_float+0x18e>
 8006c3e:	6832      	ldr	r2, [r6, #0]
 8006c40:	21e0      	movs	r1, #224	; 0xe0
 8006c42:	0010      	movs	r0, r2
 8006c44:	00c9      	lsls	r1, r1, #3
 8006c46:	4008      	ands	r0, r1
 8006c48:	4288      	cmp	r0, r1
 8006c4a:	d108      	bne.n	8006c5e <_scanf_float+0x18e>
 8006c4c:	4961      	ldr	r1, [pc, #388]	; (8006dd4 <_scanf_float+0x304>)
 8006c4e:	400a      	ands	r2, r1
 8006c50:	6032      	str	r2, [r6, #0]
 8006c52:	2201      	movs	r2, #1
 8006c54:	9202      	str	r2, [sp, #8]
 8006c56:	e7e3      	b.n	8006c20 <_scanf_float+0x150>
 8006c58:	9a02      	ldr	r2, [sp, #8]
 8006c5a:	2a02      	cmp	r2, #2
 8006c5c:	d059      	beq.n	8006d12 <_scanf_float+0x242>
 8006c5e:	2c01      	cmp	r4, #1
 8006c60:	d002      	beq.n	8006c68 <_scanf_float+0x198>
 8006c62:	2c04      	cmp	r4, #4
 8006c64:	d000      	beq.n	8006c68 <_scanf_float+0x198>
 8006c66:	e764      	b.n	8006b32 <_scanf_float+0x62>
 8006c68:	3401      	adds	r4, #1
 8006c6a:	b2e4      	uxtb	r4, r4
 8006c6c:	e7d8      	b.n	8006c20 <_scanf_float+0x150>
 8006c6e:	9a02      	ldr	r2, [sp, #8]
 8006c70:	2a01      	cmp	r2, #1
 8006c72:	d000      	beq.n	8006c76 <_scanf_float+0x1a6>
 8006c74:	e75d      	b.n	8006b32 <_scanf_float+0x62>
 8006c76:	2202      	movs	r2, #2
 8006c78:	e7ec      	b.n	8006c54 <_scanf_float+0x184>
 8006c7a:	2c00      	cmp	r4, #0
 8006c7c:	d110      	bne.n	8006ca0 <_scanf_float+0x1d0>
 8006c7e:	9a00      	ldr	r2, [sp, #0]
 8006c80:	2a00      	cmp	r2, #0
 8006c82:	d000      	beq.n	8006c86 <_scanf_float+0x1b6>
 8006c84:	e758      	b.n	8006b38 <_scanf_float+0x68>
 8006c86:	6832      	ldr	r2, [r6, #0]
 8006c88:	21e0      	movs	r1, #224	; 0xe0
 8006c8a:	0010      	movs	r0, r2
 8006c8c:	00c9      	lsls	r1, r1, #3
 8006c8e:	4008      	ands	r0, r1
 8006c90:	4288      	cmp	r0, r1
 8006c92:	d000      	beq.n	8006c96 <_scanf_float+0x1c6>
 8006c94:	e754      	b.n	8006b40 <_scanf_float+0x70>
 8006c96:	494f      	ldr	r1, [pc, #316]	; (8006dd4 <_scanf_float+0x304>)
 8006c98:	3401      	adds	r4, #1
 8006c9a:	400a      	ands	r2, r1
 8006c9c:	6032      	str	r2, [r6, #0]
 8006c9e:	e7bf      	b.n	8006c20 <_scanf_float+0x150>
 8006ca0:	21fd      	movs	r1, #253	; 0xfd
 8006ca2:	1ee2      	subs	r2, r4, #3
 8006ca4:	420a      	tst	r2, r1
 8006ca6:	d000      	beq.n	8006caa <_scanf_float+0x1da>
 8006ca8:	e743      	b.n	8006b32 <_scanf_float+0x62>
 8006caa:	e7dd      	b.n	8006c68 <_scanf_float+0x198>
 8006cac:	2c02      	cmp	r4, #2
 8006cae:	d000      	beq.n	8006cb2 <_scanf_float+0x1e2>
 8006cb0:	e73f      	b.n	8006b32 <_scanf_float+0x62>
 8006cb2:	2403      	movs	r4, #3
 8006cb4:	e7b4      	b.n	8006c20 <_scanf_float+0x150>
 8006cb6:	2c06      	cmp	r4, #6
 8006cb8:	d000      	beq.n	8006cbc <_scanf_float+0x1ec>
 8006cba:	e73a      	b.n	8006b32 <_scanf_float+0x62>
 8006cbc:	2407      	movs	r4, #7
 8006cbe:	e7af      	b.n	8006c20 <_scanf_float+0x150>
 8006cc0:	6832      	ldr	r2, [r6, #0]
 8006cc2:	0591      	lsls	r1, r2, #22
 8006cc4:	d400      	bmi.n	8006cc8 <_scanf_float+0x1f8>
 8006cc6:	e734      	b.n	8006b32 <_scanf_float+0x62>
 8006cc8:	4943      	ldr	r1, [pc, #268]	; (8006dd8 <_scanf_float+0x308>)
 8006cca:	400a      	ands	r2, r1
 8006ccc:	6032      	str	r2, [r6, #0]
 8006cce:	9a00      	ldr	r2, [sp, #0]
 8006cd0:	9204      	str	r2, [sp, #16]
 8006cd2:	e7a5      	b.n	8006c20 <_scanf_float+0x150>
 8006cd4:	21a0      	movs	r1, #160	; 0xa0
 8006cd6:	2080      	movs	r0, #128	; 0x80
 8006cd8:	6832      	ldr	r2, [r6, #0]
 8006cda:	00c9      	lsls	r1, r1, #3
 8006cdc:	4011      	ands	r1, r2
 8006cde:	00c0      	lsls	r0, r0, #3
 8006ce0:	4281      	cmp	r1, r0
 8006ce2:	d006      	beq.n	8006cf2 <_scanf_float+0x222>
 8006ce4:	4202      	tst	r2, r0
 8006ce6:	d100      	bne.n	8006cea <_scanf_float+0x21a>
 8006ce8:	e723      	b.n	8006b32 <_scanf_float+0x62>
 8006cea:	9900      	ldr	r1, [sp, #0]
 8006cec:	2900      	cmp	r1, #0
 8006cee:	d100      	bne.n	8006cf2 <_scanf_float+0x222>
 8006cf0:	e726      	b.n	8006b40 <_scanf_float+0x70>
 8006cf2:	0591      	lsls	r1, r2, #22
 8006cf4:	d404      	bmi.n	8006d00 <_scanf_float+0x230>
 8006cf6:	9900      	ldr	r1, [sp, #0]
 8006cf8:	9804      	ldr	r0, [sp, #16]
 8006cfa:	9708      	str	r7, [sp, #32]
 8006cfc:	1a09      	subs	r1, r1, r0
 8006cfe:	9107      	str	r1, [sp, #28]
 8006d00:	4934      	ldr	r1, [pc, #208]	; (8006dd4 <_scanf_float+0x304>)
 8006d02:	400a      	ands	r2, r1
 8006d04:	21c0      	movs	r1, #192	; 0xc0
 8006d06:	0049      	lsls	r1, r1, #1
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	6032      	str	r2, [r6, #0]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	9200      	str	r2, [sp, #0]
 8006d10:	e786      	b.n	8006c20 <_scanf_float+0x150>
 8006d12:	2203      	movs	r2, #3
 8006d14:	e79e      	b.n	8006c54 <_scanf_float+0x184>
 8006d16:	23c0      	movs	r3, #192	; 0xc0
 8006d18:	005b      	lsls	r3, r3, #1
 8006d1a:	0029      	movs	r1, r5
 8006d1c:	58f3      	ldr	r3, [r6, r3]
 8006d1e:	9801      	ldr	r0, [sp, #4]
 8006d20:	4798      	blx	r3
 8006d22:	2800      	cmp	r0, #0
 8006d24:	d100      	bne.n	8006d28 <_scanf_float+0x258>
 8006d26:	e6f6      	b.n	8006b16 <_scanf_float+0x46>
 8006d28:	e703      	b.n	8006b32 <_scanf_float+0x62>
 8006d2a:	3f01      	subs	r7, #1
 8006d2c:	5933      	ldr	r3, [r6, r4]
 8006d2e:	002a      	movs	r2, r5
 8006d30:	7839      	ldrb	r1, [r7, #0]
 8006d32:	9801      	ldr	r0, [sp, #4]
 8006d34:	4798      	blx	r3
 8006d36:	6933      	ldr	r3, [r6, #16]
 8006d38:	3b01      	subs	r3, #1
 8006d3a:	6133      	str	r3, [r6, #16]
 8006d3c:	e707      	b.n	8006b4e <_scanf_float+0x7e>
 8006d3e:	1e63      	subs	r3, r4, #1
 8006d40:	2b06      	cmp	r3, #6
 8006d42:	d80e      	bhi.n	8006d62 <_scanf_float+0x292>
 8006d44:	9702      	str	r7, [sp, #8]
 8006d46:	2c02      	cmp	r4, #2
 8006d48:	d920      	bls.n	8006d8c <_scanf_float+0x2bc>
 8006d4a:	1be3      	subs	r3, r4, r7
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	9305      	str	r3, [sp, #20]
 8006d50:	9b02      	ldr	r3, [sp, #8]
 8006d52:	9a05      	ldr	r2, [sp, #20]
 8006d54:	189b      	adds	r3, r3, r2
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	2b03      	cmp	r3, #3
 8006d5a:	d827      	bhi.n	8006dac <_scanf_float+0x2dc>
 8006d5c:	3c03      	subs	r4, #3
 8006d5e:	b2e4      	uxtb	r4, r4
 8006d60:	1b3f      	subs	r7, r7, r4
 8006d62:	6833      	ldr	r3, [r6, #0]
 8006d64:	05da      	lsls	r2, r3, #23
 8006d66:	d554      	bpl.n	8006e12 <_scanf_float+0x342>
 8006d68:	055b      	lsls	r3, r3, #21
 8006d6a:	d537      	bpl.n	8006ddc <_scanf_float+0x30c>
 8006d6c:	24be      	movs	r4, #190	; 0xbe
 8006d6e:	0064      	lsls	r4, r4, #1
 8006d70:	9b03      	ldr	r3, [sp, #12]
 8006d72:	429f      	cmp	r7, r3
 8006d74:	d800      	bhi.n	8006d78 <_scanf_float+0x2a8>
 8006d76:	e6ee      	b.n	8006b56 <_scanf_float+0x86>
 8006d78:	3f01      	subs	r7, #1
 8006d7a:	5933      	ldr	r3, [r6, r4]
 8006d7c:	002a      	movs	r2, r5
 8006d7e:	7839      	ldrb	r1, [r7, #0]
 8006d80:	9801      	ldr	r0, [sp, #4]
 8006d82:	4798      	blx	r3
 8006d84:	6933      	ldr	r3, [r6, #16]
 8006d86:	3b01      	subs	r3, #1
 8006d88:	6133      	str	r3, [r6, #16]
 8006d8a:	e7f1      	b.n	8006d70 <_scanf_float+0x2a0>
 8006d8c:	24be      	movs	r4, #190	; 0xbe
 8006d8e:	0064      	lsls	r4, r4, #1
 8006d90:	9b03      	ldr	r3, [sp, #12]
 8006d92:	429f      	cmp	r7, r3
 8006d94:	d800      	bhi.n	8006d98 <_scanf_float+0x2c8>
 8006d96:	e6de      	b.n	8006b56 <_scanf_float+0x86>
 8006d98:	3f01      	subs	r7, #1
 8006d9a:	5933      	ldr	r3, [r6, r4]
 8006d9c:	002a      	movs	r2, r5
 8006d9e:	7839      	ldrb	r1, [r7, #0]
 8006da0:	9801      	ldr	r0, [sp, #4]
 8006da2:	4798      	blx	r3
 8006da4:	6933      	ldr	r3, [r6, #16]
 8006da6:	3b01      	subs	r3, #1
 8006da8:	6133      	str	r3, [r6, #16]
 8006daa:	e7f1      	b.n	8006d90 <_scanf_float+0x2c0>
 8006dac:	9b02      	ldr	r3, [sp, #8]
 8006dae:	002a      	movs	r2, r5
 8006db0:	3b01      	subs	r3, #1
 8006db2:	7819      	ldrb	r1, [r3, #0]
 8006db4:	9302      	str	r3, [sp, #8]
 8006db6:	23be      	movs	r3, #190	; 0xbe
 8006db8:	005b      	lsls	r3, r3, #1
 8006dba:	58f3      	ldr	r3, [r6, r3]
 8006dbc:	9801      	ldr	r0, [sp, #4]
 8006dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8006dc0:	4798      	blx	r3
 8006dc2:	6933      	ldr	r3, [r6, #16]
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	6133      	str	r3, [r6, #16]
 8006dc8:	e7c2      	b.n	8006d50 <_scanf_float+0x280>
 8006dca:	46c0      	nop			; (mov r8, r8)
 8006dcc:	fffffeff 	.word	0xfffffeff
 8006dd0:	fffffe7f 	.word	0xfffffe7f
 8006dd4:	fffff87f 	.word	0xfffff87f
 8006dd8:	fffffd7f 	.word	0xfffffd7f
 8006ddc:	6933      	ldr	r3, [r6, #16]
 8006dde:	1e7c      	subs	r4, r7, #1
 8006de0:	7821      	ldrb	r1, [r4, #0]
 8006de2:	3b01      	subs	r3, #1
 8006de4:	6133      	str	r3, [r6, #16]
 8006de6:	2965      	cmp	r1, #101	; 0x65
 8006de8:	d00c      	beq.n	8006e04 <_scanf_float+0x334>
 8006dea:	2945      	cmp	r1, #69	; 0x45
 8006dec:	d00a      	beq.n	8006e04 <_scanf_float+0x334>
 8006dee:	23be      	movs	r3, #190	; 0xbe
 8006df0:	005b      	lsls	r3, r3, #1
 8006df2:	58f3      	ldr	r3, [r6, r3]
 8006df4:	002a      	movs	r2, r5
 8006df6:	9801      	ldr	r0, [sp, #4]
 8006df8:	4798      	blx	r3
 8006dfa:	6933      	ldr	r3, [r6, #16]
 8006dfc:	1ebc      	subs	r4, r7, #2
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	7821      	ldrb	r1, [r4, #0]
 8006e02:	6133      	str	r3, [r6, #16]
 8006e04:	23be      	movs	r3, #190	; 0xbe
 8006e06:	005b      	lsls	r3, r3, #1
 8006e08:	002a      	movs	r2, r5
 8006e0a:	58f3      	ldr	r3, [r6, r3]
 8006e0c:	9801      	ldr	r0, [sp, #4]
 8006e0e:	4798      	blx	r3
 8006e10:	0027      	movs	r7, r4
 8006e12:	6832      	ldr	r2, [r6, #0]
 8006e14:	2310      	movs	r3, #16
 8006e16:	0011      	movs	r1, r2
 8006e18:	4019      	ands	r1, r3
 8006e1a:	9102      	str	r1, [sp, #8]
 8006e1c:	421a      	tst	r2, r3
 8006e1e:	d158      	bne.n	8006ed2 <_scanf_float+0x402>
 8006e20:	23c0      	movs	r3, #192	; 0xc0
 8006e22:	7039      	strb	r1, [r7, #0]
 8006e24:	6832      	ldr	r2, [r6, #0]
 8006e26:	00db      	lsls	r3, r3, #3
 8006e28:	4013      	ands	r3, r2
 8006e2a:	2280      	movs	r2, #128	; 0x80
 8006e2c:	00d2      	lsls	r2, r2, #3
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d11d      	bne.n	8006e6e <_scanf_float+0x39e>
 8006e32:	9b04      	ldr	r3, [sp, #16]
 8006e34:	9a00      	ldr	r2, [sp, #0]
 8006e36:	9900      	ldr	r1, [sp, #0]
 8006e38:	1a9a      	subs	r2, r3, r2
 8006e3a:	428b      	cmp	r3, r1
 8006e3c:	d124      	bne.n	8006e88 <_scanf_float+0x3b8>
 8006e3e:	2200      	movs	r2, #0
 8006e40:	9903      	ldr	r1, [sp, #12]
 8006e42:	9801      	ldr	r0, [sp, #4]
 8006e44:	f000 fe9c 	bl	8007b80 <_strtod_r>
 8006e48:	9b06      	ldr	r3, [sp, #24]
 8006e4a:	000d      	movs	r5, r1
 8006e4c:	6831      	ldr	r1, [r6, #0]
 8006e4e:	0004      	movs	r4, r0
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	078a      	lsls	r2, r1, #30
 8006e54:	d525      	bpl.n	8006ea2 <_scanf_float+0x3d2>
 8006e56:	1d1a      	adds	r2, r3, #4
 8006e58:	9906      	ldr	r1, [sp, #24]
 8006e5a:	600a      	str	r2, [r1, #0]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	601c      	str	r4, [r3, #0]
 8006e60:	605d      	str	r5, [r3, #4]
 8006e62:	68f3      	ldr	r3, [r6, #12]
 8006e64:	3301      	adds	r3, #1
 8006e66:	60f3      	str	r3, [r6, #12]
 8006e68:	9802      	ldr	r0, [sp, #8]
 8006e6a:	b00b      	add	sp, #44	; 0x2c
 8006e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e6e:	9b07      	ldr	r3, [sp, #28]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d0e4      	beq.n	8006e3e <_scanf_float+0x36e>
 8006e74:	9b08      	ldr	r3, [sp, #32]
 8006e76:	9a02      	ldr	r2, [sp, #8]
 8006e78:	1c59      	adds	r1, r3, #1
 8006e7a:	9801      	ldr	r0, [sp, #4]
 8006e7c:	230a      	movs	r3, #10
 8006e7e:	f000 ff15 	bl	8007cac <_strtol_r>
 8006e82:	9b07      	ldr	r3, [sp, #28]
 8006e84:	9f08      	ldr	r7, [sp, #32]
 8006e86:	1ac2      	subs	r2, r0, r3
 8006e88:	0033      	movs	r3, r6
 8006e8a:	3370      	adds	r3, #112	; 0x70
 8006e8c:	33ff      	adds	r3, #255	; 0xff
 8006e8e:	429f      	cmp	r7, r3
 8006e90:	d302      	bcc.n	8006e98 <_scanf_float+0x3c8>
 8006e92:	0037      	movs	r7, r6
 8006e94:	376f      	adds	r7, #111	; 0x6f
 8006e96:	37ff      	adds	r7, #255	; 0xff
 8006e98:	0038      	movs	r0, r7
 8006e9a:	490f      	ldr	r1, [pc, #60]	; (8006ed8 <_scanf_float+0x408>)
 8006e9c:	f000 f824 	bl	8006ee8 <siprintf>
 8006ea0:	e7cd      	b.n	8006e3e <_scanf_float+0x36e>
 8006ea2:	1d1a      	adds	r2, r3, #4
 8006ea4:	0749      	lsls	r1, r1, #29
 8006ea6:	d4d7      	bmi.n	8006e58 <_scanf_float+0x388>
 8006ea8:	9906      	ldr	r1, [sp, #24]
 8006eaa:	0020      	movs	r0, r4
 8006eac:	600a      	str	r2, [r1, #0]
 8006eae:	681f      	ldr	r7, [r3, #0]
 8006eb0:	0022      	movs	r2, r4
 8006eb2:	002b      	movs	r3, r5
 8006eb4:	0029      	movs	r1, r5
 8006eb6:	f7fb f9db 	bl	8002270 <__aeabi_dcmpun>
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	d004      	beq.n	8006ec8 <_scanf_float+0x3f8>
 8006ebe:	4807      	ldr	r0, [pc, #28]	; (8006edc <_scanf_float+0x40c>)
 8006ec0:	f000 f80e 	bl	8006ee0 <nanf>
 8006ec4:	6038      	str	r0, [r7, #0]
 8006ec6:	e7cc      	b.n	8006e62 <_scanf_float+0x392>
 8006ec8:	0020      	movs	r0, r4
 8006eca:	0029      	movs	r1, r5
 8006ecc:	f7fb fac2 	bl	8002454 <__aeabi_d2f>
 8006ed0:	e7f8      	b.n	8006ec4 <_scanf_float+0x3f4>
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	e640      	b.n	8006b58 <_scanf_float+0x88>
 8006ed6:	46c0      	nop			; (mov r8, r8)
 8006ed8:	0800adc0 	.word	0x0800adc0
 8006edc:	0800b1c8 	.word	0x0800b1c8

08006ee0 <nanf>:
 8006ee0:	4800      	ldr	r0, [pc, #0]	; (8006ee4 <nanf+0x4>)
 8006ee2:	4770      	bx	lr
 8006ee4:	7fc00000 	.word	0x7fc00000

08006ee8 <siprintf>:
 8006ee8:	b40e      	push	{r1, r2, r3}
 8006eea:	b500      	push	{lr}
 8006eec:	490b      	ldr	r1, [pc, #44]	; (8006f1c <siprintf+0x34>)
 8006eee:	b09c      	sub	sp, #112	; 0x70
 8006ef0:	ab1d      	add	r3, sp, #116	; 0x74
 8006ef2:	9002      	str	r0, [sp, #8]
 8006ef4:	9006      	str	r0, [sp, #24]
 8006ef6:	9107      	str	r1, [sp, #28]
 8006ef8:	9104      	str	r1, [sp, #16]
 8006efa:	4809      	ldr	r0, [pc, #36]	; (8006f20 <siprintf+0x38>)
 8006efc:	4909      	ldr	r1, [pc, #36]	; (8006f24 <siprintf+0x3c>)
 8006efe:	cb04      	ldmia	r3!, {r2}
 8006f00:	9105      	str	r1, [sp, #20]
 8006f02:	6800      	ldr	r0, [r0, #0]
 8006f04:	a902      	add	r1, sp, #8
 8006f06:	9301      	str	r3, [sp, #4]
 8006f08:	f002 ff68 	bl	8009ddc <_svfiprintf_r>
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	9a02      	ldr	r2, [sp, #8]
 8006f10:	7013      	strb	r3, [r2, #0]
 8006f12:	b01c      	add	sp, #112	; 0x70
 8006f14:	bc08      	pop	{r3}
 8006f16:	b003      	add	sp, #12
 8006f18:	4718      	bx	r3
 8006f1a:	46c0      	nop			; (mov r8, r8)
 8006f1c:	7fffffff 	.word	0x7fffffff
 8006f20:	20000030 	.word	0x20000030
 8006f24:	ffff0208 	.word	0xffff0208

08006f28 <sulp>:
 8006f28:	b570      	push	{r4, r5, r6, lr}
 8006f2a:	0016      	movs	r6, r2
 8006f2c:	000d      	movs	r5, r1
 8006f2e:	f002 fc9f 	bl	8009870 <__ulp>
 8006f32:	2e00      	cmp	r6, #0
 8006f34:	d00d      	beq.n	8006f52 <sulp+0x2a>
 8006f36:	236b      	movs	r3, #107	; 0x6b
 8006f38:	006a      	lsls	r2, r5, #1
 8006f3a:	0d52      	lsrs	r2, r2, #21
 8006f3c:	1a9b      	subs	r3, r3, r2
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	dd07      	ble.n	8006f52 <sulp+0x2a>
 8006f42:	2400      	movs	r4, #0
 8006f44:	4a03      	ldr	r2, [pc, #12]	; (8006f54 <sulp+0x2c>)
 8006f46:	051b      	lsls	r3, r3, #20
 8006f48:	189d      	adds	r5, r3, r2
 8006f4a:	002b      	movs	r3, r5
 8006f4c:	0022      	movs	r2, r4
 8006f4e:	f7fa fb91 	bl	8001674 <__aeabi_dmul>
 8006f52:	bd70      	pop	{r4, r5, r6, pc}
 8006f54:	3ff00000 	.word	0x3ff00000

08006f58 <_strtod_l>:
 8006f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f5a:	001d      	movs	r5, r3
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	b0a5      	sub	sp, #148	; 0x94
 8006f60:	9320      	str	r3, [sp, #128]	; 0x80
 8006f62:	4bac      	ldr	r3, [pc, #688]	; (8007214 <_strtod_l+0x2bc>)
 8006f64:	9005      	str	r0, [sp, #20]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	9108      	str	r1, [sp, #32]
 8006f6a:	0018      	movs	r0, r3
 8006f6c:	9307      	str	r3, [sp, #28]
 8006f6e:	921b      	str	r2, [sp, #108]	; 0x6c
 8006f70:	f7f9 f8ca 	bl	8000108 <strlen>
 8006f74:	2600      	movs	r6, #0
 8006f76:	0004      	movs	r4, r0
 8006f78:	2700      	movs	r7, #0
 8006f7a:	9b08      	ldr	r3, [sp, #32]
 8006f7c:	931f      	str	r3, [sp, #124]	; 0x7c
 8006f7e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006f80:	7813      	ldrb	r3, [r2, #0]
 8006f82:	2b2b      	cmp	r3, #43	; 0x2b
 8006f84:	d058      	beq.n	8007038 <_strtod_l+0xe0>
 8006f86:	d844      	bhi.n	8007012 <_strtod_l+0xba>
 8006f88:	2b0d      	cmp	r3, #13
 8006f8a:	d83d      	bhi.n	8007008 <_strtod_l+0xb0>
 8006f8c:	2b08      	cmp	r3, #8
 8006f8e:	d83d      	bhi.n	800700c <_strtod_l+0xb4>
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d047      	beq.n	8007024 <_strtod_l+0xcc>
 8006f94:	2300      	movs	r3, #0
 8006f96:	930e      	str	r3, [sp, #56]	; 0x38
 8006f98:	2200      	movs	r2, #0
 8006f9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006f9c:	920a      	str	r2, [sp, #40]	; 0x28
 8006f9e:	9306      	str	r3, [sp, #24]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	2b30      	cmp	r3, #48	; 0x30
 8006fa4:	d000      	beq.n	8006fa8 <_strtod_l+0x50>
 8006fa6:	e07f      	b.n	80070a8 <_strtod_l+0x150>
 8006fa8:	9b06      	ldr	r3, [sp, #24]
 8006faa:	3220      	adds	r2, #32
 8006fac:	785b      	ldrb	r3, [r3, #1]
 8006fae:	4393      	bics	r3, r2
 8006fb0:	2b58      	cmp	r3, #88	; 0x58
 8006fb2:	d000      	beq.n	8006fb6 <_strtod_l+0x5e>
 8006fb4:	e06e      	b.n	8007094 <_strtod_l+0x13c>
 8006fb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fb8:	9502      	str	r5, [sp, #8]
 8006fba:	9301      	str	r3, [sp, #4]
 8006fbc:	ab20      	add	r3, sp, #128	; 0x80
 8006fbe:	9300      	str	r3, [sp, #0]
 8006fc0:	4a95      	ldr	r2, [pc, #596]	; (8007218 <_strtod_l+0x2c0>)
 8006fc2:	ab21      	add	r3, sp, #132	; 0x84
 8006fc4:	9805      	ldr	r0, [sp, #20]
 8006fc6:	a91f      	add	r1, sp, #124	; 0x7c
 8006fc8:	f001 fd90 	bl	8008aec <__gethex>
 8006fcc:	2307      	movs	r3, #7
 8006fce:	0005      	movs	r5, r0
 8006fd0:	0004      	movs	r4, r0
 8006fd2:	401d      	ands	r5, r3
 8006fd4:	4218      	tst	r0, r3
 8006fd6:	d006      	beq.n	8006fe6 <_strtod_l+0x8e>
 8006fd8:	2d06      	cmp	r5, #6
 8006fda:	d12f      	bne.n	800703c <_strtod_l+0xe4>
 8006fdc:	9b06      	ldr	r3, [sp, #24]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	931f      	str	r3, [sp, #124]	; 0x7c
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	930e      	str	r3, [sp, #56]	; 0x38
 8006fe6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d002      	beq.n	8006ff2 <_strtod_l+0x9a>
 8006fec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006fee:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006ff0:	601a      	str	r2, [r3, #0]
 8006ff2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d01c      	beq.n	8007032 <_strtod_l+0xda>
 8006ff8:	2380      	movs	r3, #128	; 0x80
 8006ffa:	0032      	movs	r2, r6
 8006ffc:	061b      	lsls	r3, r3, #24
 8006ffe:	18fb      	adds	r3, r7, r3
 8007000:	0010      	movs	r0, r2
 8007002:	0019      	movs	r1, r3
 8007004:	b025      	add	sp, #148	; 0x94
 8007006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007008:	2b20      	cmp	r3, #32
 800700a:	d1c3      	bne.n	8006f94 <_strtod_l+0x3c>
 800700c:	3201      	adds	r2, #1
 800700e:	921f      	str	r2, [sp, #124]	; 0x7c
 8007010:	e7b5      	b.n	8006f7e <_strtod_l+0x26>
 8007012:	2b2d      	cmp	r3, #45	; 0x2d
 8007014:	d1be      	bne.n	8006f94 <_strtod_l+0x3c>
 8007016:	3b2c      	subs	r3, #44	; 0x2c
 8007018:	930e      	str	r3, [sp, #56]	; 0x38
 800701a:	1c53      	adds	r3, r2, #1
 800701c:	931f      	str	r3, [sp, #124]	; 0x7c
 800701e:	7853      	ldrb	r3, [r2, #1]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1b9      	bne.n	8006f98 <_strtod_l+0x40>
 8007024:	9b08      	ldr	r3, [sp, #32]
 8007026:	931f      	str	r3, [sp, #124]	; 0x7c
 8007028:	2300      	movs	r3, #0
 800702a:	930e      	str	r3, [sp, #56]	; 0x38
 800702c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1dc      	bne.n	8006fec <_strtod_l+0x94>
 8007032:	0032      	movs	r2, r6
 8007034:	003b      	movs	r3, r7
 8007036:	e7e3      	b.n	8007000 <_strtod_l+0xa8>
 8007038:	2300      	movs	r3, #0
 800703a:	e7ed      	b.n	8007018 <_strtod_l+0xc0>
 800703c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800703e:	2a00      	cmp	r2, #0
 8007040:	d007      	beq.n	8007052 <_strtod_l+0xfa>
 8007042:	2135      	movs	r1, #53	; 0x35
 8007044:	a822      	add	r0, sp, #136	; 0x88
 8007046:	f002 fd14 	bl	8009a72 <__copybits>
 800704a:	9920      	ldr	r1, [sp, #128]	; 0x80
 800704c:	9805      	ldr	r0, [sp, #20]
 800704e:	f002 f8cf 	bl	80091f0 <_Bfree>
 8007052:	1e68      	subs	r0, r5, #1
 8007054:	2804      	cmp	r0, #4
 8007056:	d806      	bhi.n	8007066 <_strtod_l+0x10e>
 8007058:	f7f9 f85e 	bl	8000118 <__gnu_thumb1_case_uqi>
 800705c:	1816030b 	.word	0x1816030b
 8007060:	0b          	.byte	0x0b
 8007061:	00          	.byte	0x00
 8007062:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8007064:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8007066:	0723      	lsls	r3, r4, #28
 8007068:	d5bd      	bpl.n	8006fe6 <_strtod_l+0x8e>
 800706a:	2380      	movs	r3, #128	; 0x80
 800706c:	061b      	lsls	r3, r3, #24
 800706e:	431f      	orrs	r7, r3
 8007070:	e7b9      	b.n	8006fe6 <_strtod_l+0x8e>
 8007072:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007074:	4a69      	ldr	r2, [pc, #420]	; (800721c <_strtod_l+0x2c4>)
 8007076:	496a      	ldr	r1, [pc, #424]	; (8007220 <_strtod_l+0x2c8>)
 8007078:	401a      	ands	r2, r3
 800707a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800707c:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800707e:	185b      	adds	r3, r3, r1
 8007080:	051b      	lsls	r3, r3, #20
 8007082:	431a      	orrs	r2, r3
 8007084:	0017      	movs	r7, r2
 8007086:	e7ee      	b.n	8007066 <_strtod_l+0x10e>
 8007088:	4f66      	ldr	r7, [pc, #408]	; (8007224 <_strtod_l+0x2cc>)
 800708a:	e7ec      	b.n	8007066 <_strtod_l+0x10e>
 800708c:	2601      	movs	r6, #1
 800708e:	4f66      	ldr	r7, [pc, #408]	; (8007228 <_strtod_l+0x2d0>)
 8007090:	4276      	negs	r6, r6
 8007092:	e7e8      	b.n	8007066 <_strtod_l+0x10e>
 8007094:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007096:	1c5a      	adds	r2, r3, #1
 8007098:	921f      	str	r2, [sp, #124]	; 0x7c
 800709a:	785b      	ldrb	r3, [r3, #1]
 800709c:	2b30      	cmp	r3, #48	; 0x30
 800709e:	d0f9      	beq.n	8007094 <_strtod_l+0x13c>
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d0a0      	beq.n	8006fe6 <_strtod_l+0x8e>
 80070a4:	2301      	movs	r3, #1
 80070a6:	930a      	str	r3, [sp, #40]	; 0x28
 80070a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80070aa:	220a      	movs	r2, #10
 80070ac:	9310      	str	r3, [sp, #64]	; 0x40
 80070ae:	2300      	movs	r3, #0
 80070b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80070b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80070b4:	9309      	str	r3, [sp, #36]	; 0x24
 80070b6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80070b8:	7805      	ldrb	r5, [r0, #0]
 80070ba:	002b      	movs	r3, r5
 80070bc:	3b30      	subs	r3, #48	; 0x30
 80070be:	b2d9      	uxtb	r1, r3
 80070c0:	2909      	cmp	r1, #9
 80070c2:	d927      	bls.n	8007114 <_strtod_l+0x1bc>
 80070c4:	0022      	movs	r2, r4
 80070c6:	9907      	ldr	r1, [sp, #28]
 80070c8:	f002 ffa0 	bl	800a00c <strncmp>
 80070cc:	2800      	cmp	r0, #0
 80070ce:	d033      	beq.n	8007138 <_strtod_l+0x1e0>
 80070d0:	2000      	movs	r0, #0
 80070d2:	002b      	movs	r3, r5
 80070d4:	4684      	mov	ip, r0
 80070d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070d8:	900c      	str	r0, [sp, #48]	; 0x30
 80070da:	9206      	str	r2, [sp, #24]
 80070dc:	2220      	movs	r2, #32
 80070de:	0019      	movs	r1, r3
 80070e0:	4391      	bics	r1, r2
 80070e2:	000a      	movs	r2, r1
 80070e4:	2100      	movs	r1, #0
 80070e6:	9107      	str	r1, [sp, #28]
 80070e8:	2a45      	cmp	r2, #69	; 0x45
 80070ea:	d000      	beq.n	80070ee <_strtod_l+0x196>
 80070ec:	e0c5      	b.n	800727a <_strtod_l+0x322>
 80070ee:	9b06      	ldr	r3, [sp, #24]
 80070f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070f2:	4303      	orrs	r3, r0
 80070f4:	4313      	orrs	r3, r2
 80070f6:	428b      	cmp	r3, r1
 80070f8:	d094      	beq.n	8007024 <_strtod_l+0xcc>
 80070fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80070fc:	9308      	str	r3, [sp, #32]
 80070fe:	3301      	adds	r3, #1
 8007100:	931f      	str	r3, [sp, #124]	; 0x7c
 8007102:	9b08      	ldr	r3, [sp, #32]
 8007104:	785b      	ldrb	r3, [r3, #1]
 8007106:	2b2b      	cmp	r3, #43	; 0x2b
 8007108:	d076      	beq.n	80071f8 <_strtod_l+0x2a0>
 800710a:	000c      	movs	r4, r1
 800710c:	2b2d      	cmp	r3, #45	; 0x2d
 800710e:	d179      	bne.n	8007204 <_strtod_l+0x2ac>
 8007110:	2401      	movs	r4, #1
 8007112:	e072      	b.n	80071fa <_strtod_l+0x2a2>
 8007114:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007116:	2908      	cmp	r1, #8
 8007118:	dc09      	bgt.n	800712e <_strtod_l+0x1d6>
 800711a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800711c:	4351      	muls	r1, r2
 800711e:	185b      	adds	r3, r3, r1
 8007120:	930b      	str	r3, [sp, #44]	; 0x2c
 8007122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007124:	3001      	adds	r0, #1
 8007126:	3301      	adds	r3, #1
 8007128:	9309      	str	r3, [sp, #36]	; 0x24
 800712a:	901f      	str	r0, [sp, #124]	; 0x7c
 800712c:	e7c3      	b.n	80070b6 <_strtod_l+0x15e>
 800712e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007130:	4351      	muls	r1, r2
 8007132:	185b      	adds	r3, r3, r1
 8007134:	930f      	str	r3, [sp, #60]	; 0x3c
 8007136:	e7f4      	b.n	8007122 <_strtod_l+0x1ca>
 8007138:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800713a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800713c:	191c      	adds	r4, r3, r4
 800713e:	941f      	str	r4, [sp, #124]	; 0x7c
 8007140:	7823      	ldrb	r3, [r4, #0]
 8007142:	2a00      	cmp	r2, #0
 8007144:	d039      	beq.n	80071ba <_strtod_l+0x262>
 8007146:	900c      	str	r0, [sp, #48]	; 0x30
 8007148:	9206      	str	r2, [sp, #24]
 800714a:	001a      	movs	r2, r3
 800714c:	3a30      	subs	r2, #48	; 0x30
 800714e:	2a09      	cmp	r2, #9
 8007150:	d912      	bls.n	8007178 <_strtod_l+0x220>
 8007152:	2201      	movs	r2, #1
 8007154:	4694      	mov	ip, r2
 8007156:	e7c1      	b.n	80070dc <_strtod_l+0x184>
 8007158:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800715a:	3001      	adds	r0, #1
 800715c:	1c5a      	adds	r2, r3, #1
 800715e:	921f      	str	r2, [sp, #124]	; 0x7c
 8007160:	785b      	ldrb	r3, [r3, #1]
 8007162:	2b30      	cmp	r3, #48	; 0x30
 8007164:	d0f8      	beq.n	8007158 <_strtod_l+0x200>
 8007166:	001a      	movs	r2, r3
 8007168:	3a31      	subs	r2, #49	; 0x31
 800716a:	2a08      	cmp	r2, #8
 800716c:	d83f      	bhi.n	80071ee <_strtod_l+0x296>
 800716e:	900c      	str	r0, [sp, #48]	; 0x30
 8007170:	2000      	movs	r0, #0
 8007172:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007174:	9006      	str	r0, [sp, #24]
 8007176:	9210      	str	r2, [sp, #64]	; 0x40
 8007178:	001a      	movs	r2, r3
 800717a:	1c41      	adds	r1, r0, #1
 800717c:	3a30      	subs	r2, #48	; 0x30
 800717e:	2b30      	cmp	r3, #48	; 0x30
 8007180:	d015      	beq.n	80071ae <_strtod_l+0x256>
 8007182:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007184:	185b      	adds	r3, r3, r1
 8007186:	210a      	movs	r1, #10
 8007188:	930c      	str	r3, [sp, #48]	; 0x30
 800718a:	9b06      	ldr	r3, [sp, #24]
 800718c:	18c4      	adds	r4, r0, r3
 800718e:	42a3      	cmp	r3, r4
 8007190:	d115      	bne.n	80071be <_strtod_l+0x266>
 8007192:	9906      	ldr	r1, [sp, #24]
 8007194:	9b06      	ldr	r3, [sp, #24]
 8007196:	3101      	adds	r1, #1
 8007198:	1809      	adds	r1, r1, r0
 800719a:	181b      	adds	r3, r3, r0
 800719c:	9106      	str	r1, [sp, #24]
 800719e:	2b08      	cmp	r3, #8
 80071a0:	dc1b      	bgt.n	80071da <_strtod_l+0x282>
 80071a2:	230a      	movs	r3, #10
 80071a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80071a6:	434b      	muls	r3, r1
 80071a8:	2100      	movs	r1, #0
 80071aa:	18d3      	adds	r3, r2, r3
 80071ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80071ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80071b0:	0008      	movs	r0, r1
 80071b2:	1c5a      	adds	r2, r3, #1
 80071b4:	921f      	str	r2, [sp, #124]	; 0x7c
 80071b6:	785b      	ldrb	r3, [r3, #1]
 80071b8:	e7c7      	b.n	800714a <_strtod_l+0x1f2>
 80071ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071bc:	e7d1      	b.n	8007162 <_strtod_l+0x20a>
 80071be:	2b08      	cmp	r3, #8
 80071c0:	dc04      	bgt.n	80071cc <_strtod_l+0x274>
 80071c2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80071c4:	434d      	muls	r5, r1
 80071c6:	950b      	str	r5, [sp, #44]	; 0x2c
 80071c8:	3301      	adds	r3, #1
 80071ca:	e7e0      	b.n	800718e <_strtod_l+0x236>
 80071cc:	1c5d      	adds	r5, r3, #1
 80071ce:	2d10      	cmp	r5, #16
 80071d0:	dcfa      	bgt.n	80071c8 <_strtod_l+0x270>
 80071d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80071d4:	434d      	muls	r5, r1
 80071d6:	950f      	str	r5, [sp, #60]	; 0x3c
 80071d8:	e7f6      	b.n	80071c8 <_strtod_l+0x270>
 80071da:	9b06      	ldr	r3, [sp, #24]
 80071dc:	2100      	movs	r1, #0
 80071de:	2b10      	cmp	r3, #16
 80071e0:	dce5      	bgt.n	80071ae <_strtod_l+0x256>
 80071e2:	230a      	movs	r3, #10
 80071e4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80071e6:	4343      	muls	r3, r0
 80071e8:	18d3      	adds	r3, r2, r3
 80071ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80071ec:	e7df      	b.n	80071ae <_strtod_l+0x256>
 80071ee:	2200      	movs	r2, #0
 80071f0:	920c      	str	r2, [sp, #48]	; 0x30
 80071f2:	9206      	str	r2, [sp, #24]
 80071f4:	3201      	adds	r2, #1
 80071f6:	e7ad      	b.n	8007154 <_strtod_l+0x1fc>
 80071f8:	2400      	movs	r4, #0
 80071fa:	9b08      	ldr	r3, [sp, #32]
 80071fc:	3302      	adds	r3, #2
 80071fe:	931f      	str	r3, [sp, #124]	; 0x7c
 8007200:	9b08      	ldr	r3, [sp, #32]
 8007202:	789b      	ldrb	r3, [r3, #2]
 8007204:	001a      	movs	r2, r3
 8007206:	3a30      	subs	r2, #48	; 0x30
 8007208:	2a09      	cmp	r2, #9
 800720a:	d913      	bls.n	8007234 <_strtod_l+0x2dc>
 800720c:	9a08      	ldr	r2, [sp, #32]
 800720e:	921f      	str	r2, [sp, #124]	; 0x7c
 8007210:	2200      	movs	r2, #0
 8007212:	e031      	b.n	8007278 <_strtod_l+0x320>
 8007214:	0800b010 	.word	0x0800b010
 8007218:	0800adc8 	.word	0x0800adc8
 800721c:	ffefffff 	.word	0xffefffff
 8007220:	00000433 	.word	0x00000433
 8007224:	7ff00000 	.word	0x7ff00000
 8007228:	7fffffff 	.word	0x7fffffff
 800722c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800722e:	1c5a      	adds	r2, r3, #1
 8007230:	921f      	str	r2, [sp, #124]	; 0x7c
 8007232:	785b      	ldrb	r3, [r3, #1]
 8007234:	2b30      	cmp	r3, #48	; 0x30
 8007236:	d0f9      	beq.n	800722c <_strtod_l+0x2d4>
 8007238:	2200      	movs	r2, #0
 800723a:	9207      	str	r2, [sp, #28]
 800723c:	001a      	movs	r2, r3
 800723e:	3a31      	subs	r2, #49	; 0x31
 8007240:	2a08      	cmp	r2, #8
 8007242:	d81a      	bhi.n	800727a <_strtod_l+0x322>
 8007244:	3b30      	subs	r3, #48	; 0x30
 8007246:	001a      	movs	r2, r3
 8007248:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800724a:	9307      	str	r3, [sp, #28]
 800724c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800724e:	1c59      	adds	r1, r3, #1
 8007250:	911f      	str	r1, [sp, #124]	; 0x7c
 8007252:	785b      	ldrb	r3, [r3, #1]
 8007254:	001d      	movs	r5, r3
 8007256:	3d30      	subs	r5, #48	; 0x30
 8007258:	2d09      	cmp	r5, #9
 800725a:	d939      	bls.n	80072d0 <_strtod_l+0x378>
 800725c:	9d07      	ldr	r5, [sp, #28]
 800725e:	1b49      	subs	r1, r1, r5
 8007260:	4db0      	ldr	r5, [pc, #704]	; (8007524 <_strtod_l+0x5cc>)
 8007262:	9507      	str	r5, [sp, #28]
 8007264:	2908      	cmp	r1, #8
 8007266:	dc03      	bgt.n	8007270 <_strtod_l+0x318>
 8007268:	9207      	str	r2, [sp, #28]
 800726a:	42aa      	cmp	r2, r5
 800726c:	dd00      	ble.n	8007270 <_strtod_l+0x318>
 800726e:	9507      	str	r5, [sp, #28]
 8007270:	2c00      	cmp	r4, #0
 8007272:	d002      	beq.n	800727a <_strtod_l+0x322>
 8007274:	9a07      	ldr	r2, [sp, #28]
 8007276:	4252      	negs	r2, r2
 8007278:	9207      	str	r2, [sp, #28]
 800727a:	9a06      	ldr	r2, [sp, #24]
 800727c:	2a00      	cmp	r2, #0
 800727e:	d14b      	bne.n	8007318 <_strtod_l+0x3c0>
 8007280:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007282:	4310      	orrs	r0, r2
 8007284:	d000      	beq.n	8007288 <_strtod_l+0x330>
 8007286:	e6ae      	b.n	8006fe6 <_strtod_l+0x8e>
 8007288:	4662      	mov	r2, ip
 800728a:	2a00      	cmp	r2, #0
 800728c:	d000      	beq.n	8007290 <_strtod_l+0x338>
 800728e:	e6c9      	b.n	8007024 <_strtod_l+0xcc>
 8007290:	2b69      	cmp	r3, #105	; 0x69
 8007292:	d025      	beq.n	80072e0 <_strtod_l+0x388>
 8007294:	dc21      	bgt.n	80072da <_strtod_l+0x382>
 8007296:	2b49      	cmp	r3, #73	; 0x49
 8007298:	d022      	beq.n	80072e0 <_strtod_l+0x388>
 800729a:	2b4e      	cmp	r3, #78	; 0x4e
 800729c:	d000      	beq.n	80072a0 <_strtod_l+0x348>
 800729e:	e6c1      	b.n	8007024 <_strtod_l+0xcc>
 80072a0:	49a1      	ldr	r1, [pc, #644]	; (8007528 <_strtod_l+0x5d0>)
 80072a2:	a81f      	add	r0, sp, #124	; 0x7c
 80072a4:	f001 fe70 	bl	8008f88 <__match>
 80072a8:	2800      	cmp	r0, #0
 80072aa:	d100      	bne.n	80072ae <_strtod_l+0x356>
 80072ac:	e6ba      	b.n	8007024 <_strtod_l+0xcc>
 80072ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	2b28      	cmp	r3, #40	; 0x28
 80072b4:	d12a      	bne.n	800730c <_strtod_l+0x3b4>
 80072b6:	499d      	ldr	r1, [pc, #628]	; (800752c <_strtod_l+0x5d4>)
 80072b8:	aa22      	add	r2, sp, #136	; 0x88
 80072ba:	a81f      	add	r0, sp, #124	; 0x7c
 80072bc:	f001 fe78 	bl	8008fb0 <__hexnan>
 80072c0:	2805      	cmp	r0, #5
 80072c2:	d123      	bne.n	800730c <_strtod_l+0x3b4>
 80072c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80072c6:	4a9a      	ldr	r2, [pc, #616]	; (8007530 <_strtod_l+0x5d8>)
 80072c8:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80072ca:	431a      	orrs	r2, r3
 80072cc:	0017      	movs	r7, r2
 80072ce:	e68a      	b.n	8006fe6 <_strtod_l+0x8e>
 80072d0:	210a      	movs	r1, #10
 80072d2:	434a      	muls	r2, r1
 80072d4:	18d2      	adds	r2, r2, r3
 80072d6:	3a30      	subs	r2, #48	; 0x30
 80072d8:	e7b8      	b.n	800724c <_strtod_l+0x2f4>
 80072da:	2b6e      	cmp	r3, #110	; 0x6e
 80072dc:	d0e0      	beq.n	80072a0 <_strtod_l+0x348>
 80072de:	e6a1      	b.n	8007024 <_strtod_l+0xcc>
 80072e0:	4994      	ldr	r1, [pc, #592]	; (8007534 <_strtod_l+0x5dc>)
 80072e2:	a81f      	add	r0, sp, #124	; 0x7c
 80072e4:	f001 fe50 	bl	8008f88 <__match>
 80072e8:	2800      	cmp	r0, #0
 80072ea:	d100      	bne.n	80072ee <_strtod_l+0x396>
 80072ec:	e69a      	b.n	8007024 <_strtod_l+0xcc>
 80072ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80072f0:	4991      	ldr	r1, [pc, #580]	; (8007538 <_strtod_l+0x5e0>)
 80072f2:	3b01      	subs	r3, #1
 80072f4:	a81f      	add	r0, sp, #124	; 0x7c
 80072f6:	931f      	str	r3, [sp, #124]	; 0x7c
 80072f8:	f001 fe46 	bl	8008f88 <__match>
 80072fc:	2800      	cmp	r0, #0
 80072fe:	d102      	bne.n	8007306 <_strtod_l+0x3ae>
 8007300:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007302:	3301      	adds	r3, #1
 8007304:	931f      	str	r3, [sp, #124]	; 0x7c
 8007306:	2600      	movs	r6, #0
 8007308:	4f89      	ldr	r7, [pc, #548]	; (8007530 <_strtod_l+0x5d8>)
 800730a:	e66c      	b.n	8006fe6 <_strtod_l+0x8e>
 800730c:	488b      	ldr	r0, [pc, #556]	; (800753c <_strtod_l+0x5e4>)
 800730e:	f002 fe65 	bl	8009fdc <nan>
 8007312:	0006      	movs	r6, r0
 8007314:	000f      	movs	r7, r1
 8007316:	e666      	b.n	8006fe6 <_strtod_l+0x8e>
 8007318:	9b07      	ldr	r3, [sp, #28]
 800731a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800731c:	1a9b      	subs	r3, r3, r2
 800731e:	930a      	str	r3, [sp, #40]	; 0x28
 8007320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007322:	2b00      	cmp	r3, #0
 8007324:	d101      	bne.n	800732a <_strtod_l+0x3d2>
 8007326:	9b06      	ldr	r3, [sp, #24]
 8007328:	9309      	str	r3, [sp, #36]	; 0x24
 800732a:	9c06      	ldr	r4, [sp, #24]
 800732c:	2c10      	cmp	r4, #16
 800732e:	dd00      	ble.n	8007332 <_strtod_l+0x3da>
 8007330:	2410      	movs	r4, #16
 8007332:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007334:	f7fb f820 	bl	8002378 <__aeabi_ui2d>
 8007338:	9b06      	ldr	r3, [sp, #24]
 800733a:	0006      	movs	r6, r0
 800733c:	000f      	movs	r7, r1
 800733e:	2b09      	cmp	r3, #9
 8007340:	dd15      	ble.n	800736e <_strtod_l+0x416>
 8007342:	0022      	movs	r2, r4
 8007344:	4b7e      	ldr	r3, [pc, #504]	; (8007540 <_strtod_l+0x5e8>)
 8007346:	3a09      	subs	r2, #9
 8007348:	00d2      	lsls	r2, r2, #3
 800734a:	189b      	adds	r3, r3, r2
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	f7fa f990 	bl	8001674 <__aeabi_dmul>
 8007354:	0006      	movs	r6, r0
 8007356:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007358:	000f      	movs	r7, r1
 800735a:	f7fb f80d 	bl	8002378 <__aeabi_ui2d>
 800735e:	0002      	movs	r2, r0
 8007360:	000b      	movs	r3, r1
 8007362:	0030      	movs	r0, r6
 8007364:	0039      	movs	r1, r7
 8007366:	f7f9 fa47 	bl	80007f8 <__aeabi_dadd>
 800736a:	0006      	movs	r6, r0
 800736c:	000f      	movs	r7, r1
 800736e:	9b06      	ldr	r3, [sp, #24]
 8007370:	2b0f      	cmp	r3, #15
 8007372:	dc39      	bgt.n	80073e8 <_strtod_l+0x490>
 8007374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007376:	2b00      	cmp	r3, #0
 8007378:	d100      	bne.n	800737c <_strtod_l+0x424>
 800737a:	e634      	b.n	8006fe6 <_strtod_l+0x8e>
 800737c:	dd24      	ble.n	80073c8 <_strtod_l+0x470>
 800737e:	2b16      	cmp	r3, #22
 8007380:	dc09      	bgt.n	8007396 <_strtod_l+0x43e>
 8007382:	496f      	ldr	r1, [pc, #444]	; (8007540 <_strtod_l+0x5e8>)
 8007384:	00db      	lsls	r3, r3, #3
 8007386:	18c9      	adds	r1, r1, r3
 8007388:	0032      	movs	r2, r6
 800738a:	6808      	ldr	r0, [r1, #0]
 800738c:	6849      	ldr	r1, [r1, #4]
 800738e:	003b      	movs	r3, r7
 8007390:	f7fa f970 	bl	8001674 <__aeabi_dmul>
 8007394:	e7bd      	b.n	8007312 <_strtod_l+0x3ba>
 8007396:	2325      	movs	r3, #37	; 0x25
 8007398:	9a06      	ldr	r2, [sp, #24]
 800739a:	1a9b      	subs	r3, r3, r2
 800739c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800739e:	4293      	cmp	r3, r2
 80073a0:	db22      	blt.n	80073e8 <_strtod_l+0x490>
 80073a2:	240f      	movs	r4, #15
 80073a4:	9b06      	ldr	r3, [sp, #24]
 80073a6:	4d66      	ldr	r5, [pc, #408]	; (8007540 <_strtod_l+0x5e8>)
 80073a8:	1ae4      	subs	r4, r4, r3
 80073aa:	00e1      	lsls	r1, r4, #3
 80073ac:	1869      	adds	r1, r5, r1
 80073ae:	0032      	movs	r2, r6
 80073b0:	6808      	ldr	r0, [r1, #0]
 80073b2:	6849      	ldr	r1, [r1, #4]
 80073b4:	003b      	movs	r3, r7
 80073b6:	f7fa f95d 	bl	8001674 <__aeabi_dmul>
 80073ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073bc:	1b1c      	subs	r4, r3, r4
 80073be:	00e4      	lsls	r4, r4, #3
 80073c0:	192c      	adds	r4, r5, r4
 80073c2:	6822      	ldr	r2, [r4, #0]
 80073c4:	6863      	ldr	r3, [r4, #4]
 80073c6:	e7e3      	b.n	8007390 <_strtod_l+0x438>
 80073c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073ca:	3316      	adds	r3, #22
 80073cc:	db0c      	blt.n	80073e8 <_strtod_l+0x490>
 80073ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073d0:	9a07      	ldr	r2, [sp, #28]
 80073d2:	0030      	movs	r0, r6
 80073d4:	1a9a      	subs	r2, r3, r2
 80073d6:	4b5a      	ldr	r3, [pc, #360]	; (8007540 <_strtod_l+0x5e8>)
 80073d8:	00d2      	lsls	r2, r2, #3
 80073da:	189b      	adds	r3, r3, r2
 80073dc:	0039      	movs	r1, r7
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	f7f9 fd45 	bl	8000e70 <__aeabi_ddiv>
 80073e6:	e794      	b.n	8007312 <_strtod_l+0x3ba>
 80073e8:	9b06      	ldr	r3, [sp, #24]
 80073ea:	1b1c      	subs	r4, r3, r4
 80073ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073ee:	18e4      	adds	r4, r4, r3
 80073f0:	2c00      	cmp	r4, #0
 80073f2:	dd72      	ble.n	80074da <_strtod_l+0x582>
 80073f4:	230f      	movs	r3, #15
 80073f6:	0021      	movs	r1, r4
 80073f8:	4019      	ands	r1, r3
 80073fa:	421c      	tst	r4, r3
 80073fc:	d00a      	beq.n	8007414 <_strtod_l+0x4bc>
 80073fe:	00cb      	lsls	r3, r1, #3
 8007400:	494f      	ldr	r1, [pc, #316]	; (8007540 <_strtod_l+0x5e8>)
 8007402:	0032      	movs	r2, r6
 8007404:	18c9      	adds	r1, r1, r3
 8007406:	6808      	ldr	r0, [r1, #0]
 8007408:	6849      	ldr	r1, [r1, #4]
 800740a:	003b      	movs	r3, r7
 800740c:	f7fa f932 	bl	8001674 <__aeabi_dmul>
 8007410:	0006      	movs	r6, r0
 8007412:	000f      	movs	r7, r1
 8007414:	230f      	movs	r3, #15
 8007416:	439c      	bics	r4, r3
 8007418:	d04a      	beq.n	80074b0 <_strtod_l+0x558>
 800741a:	3326      	adds	r3, #38	; 0x26
 800741c:	33ff      	adds	r3, #255	; 0xff
 800741e:	429c      	cmp	r4, r3
 8007420:	dd22      	ble.n	8007468 <_strtod_l+0x510>
 8007422:	2300      	movs	r3, #0
 8007424:	9306      	str	r3, [sp, #24]
 8007426:	9307      	str	r3, [sp, #28]
 8007428:	930b      	str	r3, [sp, #44]	; 0x2c
 800742a:	9309      	str	r3, [sp, #36]	; 0x24
 800742c:	2322      	movs	r3, #34	; 0x22
 800742e:	2600      	movs	r6, #0
 8007430:	9a05      	ldr	r2, [sp, #20]
 8007432:	4f3f      	ldr	r7, [pc, #252]	; (8007530 <_strtod_l+0x5d8>)
 8007434:	6013      	str	r3, [r2, #0]
 8007436:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007438:	42b3      	cmp	r3, r6
 800743a:	d100      	bne.n	800743e <_strtod_l+0x4e6>
 800743c:	e5d3      	b.n	8006fe6 <_strtod_l+0x8e>
 800743e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007440:	9805      	ldr	r0, [sp, #20]
 8007442:	f001 fed5 	bl	80091f0 <_Bfree>
 8007446:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007448:	9805      	ldr	r0, [sp, #20]
 800744a:	f001 fed1 	bl	80091f0 <_Bfree>
 800744e:	9907      	ldr	r1, [sp, #28]
 8007450:	9805      	ldr	r0, [sp, #20]
 8007452:	f001 fecd 	bl	80091f0 <_Bfree>
 8007456:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007458:	9805      	ldr	r0, [sp, #20]
 800745a:	f001 fec9 	bl	80091f0 <_Bfree>
 800745e:	9906      	ldr	r1, [sp, #24]
 8007460:	9805      	ldr	r0, [sp, #20]
 8007462:	f001 fec5 	bl	80091f0 <_Bfree>
 8007466:	e5be      	b.n	8006fe6 <_strtod_l+0x8e>
 8007468:	2300      	movs	r3, #0
 800746a:	0030      	movs	r0, r6
 800746c:	0039      	movs	r1, r7
 800746e:	4d35      	ldr	r5, [pc, #212]	; (8007544 <_strtod_l+0x5ec>)
 8007470:	1124      	asrs	r4, r4, #4
 8007472:	9308      	str	r3, [sp, #32]
 8007474:	2c01      	cmp	r4, #1
 8007476:	dc1e      	bgt.n	80074b6 <_strtod_l+0x55e>
 8007478:	2b00      	cmp	r3, #0
 800747a:	d001      	beq.n	8007480 <_strtod_l+0x528>
 800747c:	0006      	movs	r6, r0
 800747e:	000f      	movs	r7, r1
 8007480:	4b31      	ldr	r3, [pc, #196]	; (8007548 <_strtod_l+0x5f0>)
 8007482:	0032      	movs	r2, r6
 8007484:	18ff      	adds	r7, r7, r3
 8007486:	9b08      	ldr	r3, [sp, #32]
 8007488:	00dd      	lsls	r5, r3, #3
 800748a:	4b2e      	ldr	r3, [pc, #184]	; (8007544 <_strtod_l+0x5ec>)
 800748c:	195d      	adds	r5, r3, r5
 800748e:	6828      	ldr	r0, [r5, #0]
 8007490:	6869      	ldr	r1, [r5, #4]
 8007492:	003b      	movs	r3, r7
 8007494:	f7fa f8ee 	bl	8001674 <__aeabi_dmul>
 8007498:	4b25      	ldr	r3, [pc, #148]	; (8007530 <_strtod_l+0x5d8>)
 800749a:	4a2c      	ldr	r2, [pc, #176]	; (800754c <_strtod_l+0x5f4>)
 800749c:	0006      	movs	r6, r0
 800749e:	400b      	ands	r3, r1
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d8be      	bhi.n	8007422 <_strtod_l+0x4ca>
 80074a4:	4a2a      	ldr	r2, [pc, #168]	; (8007550 <_strtod_l+0x5f8>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d913      	bls.n	80074d2 <_strtod_l+0x57a>
 80074aa:	2601      	movs	r6, #1
 80074ac:	4f29      	ldr	r7, [pc, #164]	; (8007554 <_strtod_l+0x5fc>)
 80074ae:	4276      	negs	r6, r6
 80074b0:	2300      	movs	r3, #0
 80074b2:	9308      	str	r3, [sp, #32]
 80074b4:	e087      	b.n	80075c6 <_strtod_l+0x66e>
 80074b6:	2201      	movs	r2, #1
 80074b8:	4214      	tst	r4, r2
 80074ba:	d004      	beq.n	80074c6 <_strtod_l+0x56e>
 80074bc:	682a      	ldr	r2, [r5, #0]
 80074be:	686b      	ldr	r3, [r5, #4]
 80074c0:	f7fa f8d8 	bl	8001674 <__aeabi_dmul>
 80074c4:	2301      	movs	r3, #1
 80074c6:	9a08      	ldr	r2, [sp, #32]
 80074c8:	1064      	asrs	r4, r4, #1
 80074ca:	3201      	adds	r2, #1
 80074cc:	9208      	str	r2, [sp, #32]
 80074ce:	3508      	adds	r5, #8
 80074d0:	e7d0      	b.n	8007474 <_strtod_l+0x51c>
 80074d2:	23d4      	movs	r3, #212	; 0xd4
 80074d4:	049b      	lsls	r3, r3, #18
 80074d6:	18cf      	adds	r7, r1, r3
 80074d8:	e7ea      	b.n	80074b0 <_strtod_l+0x558>
 80074da:	2c00      	cmp	r4, #0
 80074dc:	d0e8      	beq.n	80074b0 <_strtod_l+0x558>
 80074de:	4264      	negs	r4, r4
 80074e0:	220f      	movs	r2, #15
 80074e2:	0023      	movs	r3, r4
 80074e4:	4013      	ands	r3, r2
 80074e6:	4214      	tst	r4, r2
 80074e8:	d00a      	beq.n	8007500 <_strtod_l+0x5a8>
 80074ea:	00da      	lsls	r2, r3, #3
 80074ec:	4b14      	ldr	r3, [pc, #80]	; (8007540 <_strtod_l+0x5e8>)
 80074ee:	0030      	movs	r0, r6
 80074f0:	189b      	adds	r3, r3, r2
 80074f2:	0039      	movs	r1, r7
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	f7f9 fcba 	bl	8000e70 <__aeabi_ddiv>
 80074fc:	0006      	movs	r6, r0
 80074fe:	000f      	movs	r7, r1
 8007500:	1124      	asrs	r4, r4, #4
 8007502:	d0d5      	beq.n	80074b0 <_strtod_l+0x558>
 8007504:	2c1f      	cmp	r4, #31
 8007506:	dd27      	ble.n	8007558 <_strtod_l+0x600>
 8007508:	2300      	movs	r3, #0
 800750a:	9306      	str	r3, [sp, #24]
 800750c:	9307      	str	r3, [sp, #28]
 800750e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007510:	9309      	str	r3, [sp, #36]	; 0x24
 8007512:	2322      	movs	r3, #34	; 0x22
 8007514:	9a05      	ldr	r2, [sp, #20]
 8007516:	2600      	movs	r6, #0
 8007518:	6013      	str	r3, [r2, #0]
 800751a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800751c:	2700      	movs	r7, #0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d18d      	bne.n	800743e <_strtod_l+0x4e6>
 8007522:	e560      	b.n	8006fe6 <_strtod_l+0x8e>
 8007524:	00004e1f 	.word	0x00004e1f
 8007528:	0800ad99 	.word	0x0800ad99
 800752c:	0800addc 	.word	0x0800addc
 8007530:	7ff00000 	.word	0x7ff00000
 8007534:	0800ad91 	.word	0x0800ad91
 8007538:	0800af1c 	.word	0x0800af1c
 800753c:	0800b1c8 	.word	0x0800b1c8
 8007540:	0800b0a8 	.word	0x0800b0a8
 8007544:	0800b080 	.word	0x0800b080
 8007548:	fcb00000 	.word	0xfcb00000
 800754c:	7ca00000 	.word	0x7ca00000
 8007550:	7c900000 	.word	0x7c900000
 8007554:	7fefffff 	.word	0x7fefffff
 8007558:	2310      	movs	r3, #16
 800755a:	0022      	movs	r2, r4
 800755c:	401a      	ands	r2, r3
 800755e:	9208      	str	r2, [sp, #32]
 8007560:	421c      	tst	r4, r3
 8007562:	d001      	beq.n	8007568 <_strtod_l+0x610>
 8007564:	335a      	adds	r3, #90	; 0x5a
 8007566:	9308      	str	r3, [sp, #32]
 8007568:	0030      	movs	r0, r6
 800756a:	0039      	movs	r1, r7
 800756c:	2300      	movs	r3, #0
 800756e:	4dc5      	ldr	r5, [pc, #788]	; (8007884 <_strtod_l+0x92c>)
 8007570:	2201      	movs	r2, #1
 8007572:	4214      	tst	r4, r2
 8007574:	d004      	beq.n	8007580 <_strtod_l+0x628>
 8007576:	682a      	ldr	r2, [r5, #0]
 8007578:	686b      	ldr	r3, [r5, #4]
 800757a:	f7fa f87b 	bl	8001674 <__aeabi_dmul>
 800757e:	2301      	movs	r3, #1
 8007580:	1064      	asrs	r4, r4, #1
 8007582:	3508      	adds	r5, #8
 8007584:	2c00      	cmp	r4, #0
 8007586:	d1f3      	bne.n	8007570 <_strtod_l+0x618>
 8007588:	2b00      	cmp	r3, #0
 800758a:	d001      	beq.n	8007590 <_strtod_l+0x638>
 800758c:	0006      	movs	r6, r0
 800758e:	000f      	movs	r7, r1
 8007590:	9b08      	ldr	r3, [sp, #32]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00f      	beq.n	80075b6 <_strtod_l+0x65e>
 8007596:	236b      	movs	r3, #107	; 0x6b
 8007598:	007a      	lsls	r2, r7, #1
 800759a:	0d52      	lsrs	r2, r2, #21
 800759c:	0039      	movs	r1, r7
 800759e:	1a9b      	subs	r3, r3, r2
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	dd08      	ble.n	80075b6 <_strtod_l+0x65e>
 80075a4:	2b1f      	cmp	r3, #31
 80075a6:	dc00      	bgt.n	80075aa <_strtod_l+0x652>
 80075a8:	e124      	b.n	80077f4 <_strtod_l+0x89c>
 80075aa:	2600      	movs	r6, #0
 80075ac:	2b34      	cmp	r3, #52	; 0x34
 80075ae:	dc00      	bgt.n	80075b2 <_strtod_l+0x65a>
 80075b0:	e119      	b.n	80077e6 <_strtod_l+0x88e>
 80075b2:	27dc      	movs	r7, #220	; 0xdc
 80075b4:	04bf      	lsls	r7, r7, #18
 80075b6:	2200      	movs	r2, #0
 80075b8:	2300      	movs	r3, #0
 80075ba:	0030      	movs	r0, r6
 80075bc:	0039      	movs	r1, r7
 80075be:	f7f8 ff45 	bl	800044c <__aeabi_dcmpeq>
 80075c2:	2800      	cmp	r0, #0
 80075c4:	d1a0      	bne.n	8007508 <_strtod_l+0x5b0>
 80075c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075ca:	9300      	str	r3, [sp, #0]
 80075cc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80075ce:	9b06      	ldr	r3, [sp, #24]
 80075d0:	9805      	ldr	r0, [sp, #20]
 80075d2:	f001 fe75 	bl	80092c0 <__s2b>
 80075d6:	900b      	str	r0, [sp, #44]	; 0x2c
 80075d8:	2800      	cmp	r0, #0
 80075da:	d100      	bne.n	80075de <_strtod_l+0x686>
 80075dc:	e721      	b.n	8007422 <_strtod_l+0x4ca>
 80075de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075e0:	9907      	ldr	r1, [sp, #28]
 80075e2:	17da      	asrs	r2, r3, #31
 80075e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075e6:	1a5b      	subs	r3, r3, r1
 80075e8:	401a      	ands	r2, r3
 80075ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075ec:	9215      	str	r2, [sp, #84]	; 0x54
 80075ee:	43db      	mvns	r3, r3
 80075f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075f2:	17db      	asrs	r3, r3, #31
 80075f4:	401a      	ands	r2, r3
 80075f6:	2300      	movs	r3, #0
 80075f8:	921a      	str	r2, [sp, #104]	; 0x68
 80075fa:	9306      	str	r3, [sp, #24]
 80075fc:	9307      	str	r3, [sp, #28]
 80075fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007600:	9805      	ldr	r0, [sp, #20]
 8007602:	6859      	ldr	r1, [r3, #4]
 8007604:	f001 fdb0 	bl	8009168 <_Balloc>
 8007608:	9009      	str	r0, [sp, #36]	; 0x24
 800760a:	2800      	cmp	r0, #0
 800760c:	d100      	bne.n	8007610 <_strtod_l+0x6b8>
 800760e:	e70d      	b.n	800742c <_strtod_l+0x4d4>
 8007610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007612:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	310c      	adds	r1, #12
 8007618:	1c9a      	adds	r2, r3, #2
 800761a:	0092      	lsls	r2, r2, #2
 800761c:	300c      	adds	r0, #12
 800761e:	930c      	str	r3, [sp, #48]	; 0x30
 8007620:	f001 fd99 	bl	8009156 <memcpy>
 8007624:	ab22      	add	r3, sp, #136	; 0x88
 8007626:	9301      	str	r3, [sp, #4]
 8007628:	ab21      	add	r3, sp, #132	; 0x84
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	0032      	movs	r2, r6
 800762e:	003b      	movs	r3, r7
 8007630:	9805      	ldr	r0, [sp, #20]
 8007632:	9612      	str	r6, [sp, #72]	; 0x48
 8007634:	9713      	str	r7, [sp, #76]	; 0x4c
 8007636:	f002 f98f 	bl	8009958 <__d2b>
 800763a:	9020      	str	r0, [sp, #128]	; 0x80
 800763c:	2800      	cmp	r0, #0
 800763e:	d100      	bne.n	8007642 <_strtod_l+0x6ea>
 8007640:	e6f4      	b.n	800742c <_strtod_l+0x4d4>
 8007642:	2101      	movs	r1, #1
 8007644:	9805      	ldr	r0, [sp, #20]
 8007646:	f001 fecf 	bl	80093e8 <__i2b>
 800764a:	9007      	str	r0, [sp, #28]
 800764c:	2800      	cmp	r0, #0
 800764e:	d100      	bne.n	8007652 <_strtod_l+0x6fa>
 8007650:	e6ec      	b.n	800742c <_strtod_l+0x4d4>
 8007652:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007654:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007656:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007658:	1ad4      	subs	r4, r2, r3
 800765a:	2b00      	cmp	r3, #0
 800765c:	db01      	blt.n	8007662 <_strtod_l+0x70a>
 800765e:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8007660:	195d      	adds	r5, r3, r5
 8007662:	9908      	ldr	r1, [sp, #32]
 8007664:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007666:	1a5b      	subs	r3, r3, r1
 8007668:	2136      	movs	r1, #54	; 0x36
 800766a:	189b      	adds	r3, r3, r2
 800766c:	1a8a      	subs	r2, r1, r2
 800766e:	4986      	ldr	r1, [pc, #536]	; (8007888 <_strtod_l+0x930>)
 8007670:	2001      	movs	r0, #1
 8007672:	468c      	mov	ip, r1
 8007674:	2100      	movs	r1, #0
 8007676:	3b01      	subs	r3, #1
 8007678:	9110      	str	r1, [sp, #64]	; 0x40
 800767a:	9014      	str	r0, [sp, #80]	; 0x50
 800767c:	4563      	cmp	r3, ip
 800767e:	da07      	bge.n	8007690 <_strtod_l+0x738>
 8007680:	4661      	mov	r1, ip
 8007682:	1ac9      	subs	r1, r1, r3
 8007684:	1a52      	subs	r2, r2, r1
 8007686:	291f      	cmp	r1, #31
 8007688:	dd00      	ble.n	800768c <_strtod_l+0x734>
 800768a:	e0b8      	b.n	80077fe <_strtod_l+0x8a6>
 800768c:	4088      	lsls	r0, r1
 800768e:	9014      	str	r0, [sp, #80]	; 0x50
 8007690:	18ab      	adds	r3, r5, r2
 8007692:	930c      	str	r3, [sp, #48]	; 0x30
 8007694:	18a4      	adds	r4, r4, r2
 8007696:	9b08      	ldr	r3, [sp, #32]
 8007698:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800769a:	191c      	adds	r4, r3, r4
 800769c:	002b      	movs	r3, r5
 800769e:	4295      	cmp	r5, r2
 80076a0:	dd00      	ble.n	80076a4 <_strtod_l+0x74c>
 80076a2:	0013      	movs	r3, r2
 80076a4:	42a3      	cmp	r3, r4
 80076a6:	dd00      	ble.n	80076aa <_strtod_l+0x752>
 80076a8:	0023      	movs	r3, r4
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	dd04      	ble.n	80076b8 <_strtod_l+0x760>
 80076ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076b0:	1ae4      	subs	r4, r4, r3
 80076b2:	1ad2      	subs	r2, r2, r3
 80076b4:	920c      	str	r2, [sp, #48]	; 0x30
 80076b6:	1aed      	subs	r5, r5, r3
 80076b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	dd17      	ble.n	80076ee <_strtod_l+0x796>
 80076be:	001a      	movs	r2, r3
 80076c0:	9907      	ldr	r1, [sp, #28]
 80076c2:	9805      	ldr	r0, [sp, #20]
 80076c4:	f001 ff56 	bl	8009574 <__pow5mult>
 80076c8:	9007      	str	r0, [sp, #28]
 80076ca:	2800      	cmp	r0, #0
 80076cc:	d100      	bne.n	80076d0 <_strtod_l+0x778>
 80076ce:	e6ad      	b.n	800742c <_strtod_l+0x4d4>
 80076d0:	0001      	movs	r1, r0
 80076d2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80076d4:	9805      	ldr	r0, [sp, #20]
 80076d6:	f001 fe9d 	bl	8009414 <__multiply>
 80076da:	900f      	str	r0, [sp, #60]	; 0x3c
 80076dc:	2800      	cmp	r0, #0
 80076de:	d100      	bne.n	80076e2 <_strtod_l+0x78a>
 80076e0:	e6a4      	b.n	800742c <_strtod_l+0x4d4>
 80076e2:	9920      	ldr	r1, [sp, #128]	; 0x80
 80076e4:	9805      	ldr	r0, [sp, #20]
 80076e6:	f001 fd83 	bl	80091f0 <_Bfree>
 80076ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076ec:	9320      	str	r3, [sp, #128]	; 0x80
 80076ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	dd00      	ble.n	80076f6 <_strtod_l+0x79e>
 80076f4:	e089      	b.n	800780a <_strtod_l+0x8b2>
 80076f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	dd08      	ble.n	800770e <_strtod_l+0x7b6>
 80076fc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80076fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007700:	9805      	ldr	r0, [sp, #20]
 8007702:	f001 ff37 	bl	8009574 <__pow5mult>
 8007706:	9009      	str	r0, [sp, #36]	; 0x24
 8007708:	2800      	cmp	r0, #0
 800770a:	d100      	bne.n	800770e <_strtod_l+0x7b6>
 800770c:	e68e      	b.n	800742c <_strtod_l+0x4d4>
 800770e:	2c00      	cmp	r4, #0
 8007710:	dd08      	ble.n	8007724 <_strtod_l+0x7cc>
 8007712:	0022      	movs	r2, r4
 8007714:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007716:	9805      	ldr	r0, [sp, #20]
 8007718:	f001 ff88 	bl	800962c <__lshift>
 800771c:	9009      	str	r0, [sp, #36]	; 0x24
 800771e:	2800      	cmp	r0, #0
 8007720:	d100      	bne.n	8007724 <_strtod_l+0x7cc>
 8007722:	e683      	b.n	800742c <_strtod_l+0x4d4>
 8007724:	2d00      	cmp	r5, #0
 8007726:	dd08      	ble.n	800773a <_strtod_l+0x7e2>
 8007728:	002a      	movs	r2, r5
 800772a:	9907      	ldr	r1, [sp, #28]
 800772c:	9805      	ldr	r0, [sp, #20]
 800772e:	f001 ff7d 	bl	800962c <__lshift>
 8007732:	9007      	str	r0, [sp, #28]
 8007734:	2800      	cmp	r0, #0
 8007736:	d100      	bne.n	800773a <_strtod_l+0x7e2>
 8007738:	e678      	b.n	800742c <_strtod_l+0x4d4>
 800773a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800773c:	9920      	ldr	r1, [sp, #128]	; 0x80
 800773e:	9805      	ldr	r0, [sp, #20]
 8007740:	f001 fffe 	bl	8009740 <__mdiff>
 8007744:	9006      	str	r0, [sp, #24]
 8007746:	2800      	cmp	r0, #0
 8007748:	d100      	bne.n	800774c <_strtod_l+0x7f4>
 800774a:	e66f      	b.n	800742c <_strtod_l+0x4d4>
 800774c:	2200      	movs	r2, #0
 800774e:	68c3      	ldr	r3, [r0, #12]
 8007750:	9907      	ldr	r1, [sp, #28]
 8007752:	60c2      	str	r2, [r0, #12]
 8007754:	930f      	str	r3, [sp, #60]	; 0x3c
 8007756:	f001 ffd7 	bl	8009708 <__mcmp>
 800775a:	2800      	cmp	r0, #0
 800775c:	da5f      	bge.n	800781e <_strtod_l+0x8c6>
 800775e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007760:	4333      	orrs	r3, r6
 8007762:	d000      	beq.n	8007766 <_strtod_l+0x80e>
 8007764:	e08a      	b.n	800787c <_strtod_l+0x924>
 8007766:	033b      	lsls	r3, r7, #12
 8007768:	d000      	beq.n	800776c <_strtod_l+0x814>
 800776a:	e087      	b.n	800787c <_strtod_l+0x924>
 800776c:	22d6      	movs	r2, #214	; 0xd6
 800776e:	4b47      	ldr	r3, [pc, #284]	; (800788c <_strtod_l+0x934>)
 8007770:	04d2      	lsls	r2, r2, #19
 8007772:	403b      	ands	r3, r7
 8007774:	4293      	cmp	r3, r2
 8007776:	d800      	bhi.n	800777a <_strtod_l+0x822>
 8007778:	e080      	b.n	800787c <_strtod_l+0x924>
 800777a:	9b06      	ldr	r3, [sp, #24]
 800777c:	695b      	ldr	r3, [r3, #20]
 800777e:	930a      	str	r3, [sp, #40]	; 0x28
 8007780:	2b00      	cmp	r3, #0
 8007782:	d104      	bne.n	800778e <_strtod_l+0x836>
 8007784:	9b06      	ldr	r3, [sp, #24]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	930a      	str	r3, [sp, #40]	; 0x28
 800778a:	2b01      	cmp	r3, #1
 800778c:	dd76      	ble.n	800787c <_strtod_l+0x924>
 800778e:	9906      	ldr	r1, [sp, #24]
 8007790:	2201      	movs	r2, #1
 8007792:	9805      	ldr	r0, [sp, #20]
 8007794:	f001 ff4a 	bl	800962c <__lshift>
 8007798:	9907      	ldr	r1, [sp, #28]
 800779a:	9006      	str	r0, [sp, #24]
 800779c:	f001 ffb4 	bl	8009708 <__mcmp>
 80077a0:	2800      	cmp	r0, #0
 80077a2:	dd6b      	ble.n	800787c <_strtod_l+0x924>
 80077a4:	9908      	ldr	r1, [sp, #32]
 80077a6:	003b      	movs	r3, r7
 80077a8:	4a38      	ldr	r2, [pc, #224]	; (800788c <_strtod_l+0x934>)
 80077aa:	2900      	cmp	r1, #0
 80077ac:	d100      	bne.n	80077b0 <_strtod_l+0x858>
 80077ae:	e092      	b.n	80078d6 <_strtod_l+0x97e>
 80077b0:	0011      	movs	r1, r2
 80077b2:	20d6      	movs	r0, #214	; 0xd6
 80077b4:	4039      	ands	r1, r7
 80077b6:	04c0      	lsls	r0, r0, #19
 80077b8:	4281      	cmp	r1, r0
 80077ba:	dd00      	ble.n	80077be <_strtod_l+0x866>
 80077bc:	e08b      	b.n	80078d6 <_strtod_l+0x97e>
 80077be:	23dc      	movs	r3, #220	; 0xdc
 80077c0:	049b      	lsls	r3, r3, #18
 80077c2:	4299      	cmp	r1, r3
 80077c4:	dc00      	bgt.n	80077c8 <_strtod_l+0x870>
 80077c6:	e6a4      	b.n	8007512 <_strtod_l+0x5ba>
 80077c8:	0030      	movs	r0, r6
 80077ca:	0039      	movs	r1, r7
 80077cc:	2200      	movs	r2, #0
 80077ce:	4b30      	ldr	r3, [pc, #192]	; (8007890 <_strtod_l+0x938>)
 80077d0:	f7f9 ff50 	bl	8001674 <__aeabi_dmul>
 80077d4:	0006      	movs	r6, r0
 80077d6:	000f      	movs	r7, r1
 80077d8:	4308      	orrs	r0, r1
 80077da:	d000      	beq.n	80077de <_strtod_l+0x886>
 80077dc:	e62f      	b.n	800743e <_strtod_l+0x4e6>
 80077de:	2322      	movs	r3, #34	; 0x22
 80077e0:	9a05      	ldr	r2, [sp, #20]
 80077e2:	6013      	str	r3, [r2, #0]
 80077e4:	e62b      	b.n	800743e <_strtod_l+0x4e6>
 80077e6:	234b      	movs	r3, #75	; 0x4b
 80077e8:	1a9a      	subs	r2, r3, r2
 80077ea:	3b4c      	subs	r3, #76	; 0x4c
 80077ec:	4093      	lsls	r3, r2
 80077ee:	4019      	ands	r1, r3
 80077f0:	000f      	movs	r7, r1
 80077f2:	e6e0      	b.n	80075b6 <_strtod_l+0x65e>
 80077f4:	2201      	movs	r2, #1
 80077f6:	4252      	negs	r2, r2
 80077f8:	409a      	lsls	r2, r3
 80077fa:	4016      	ands	r6, r2
 80077fc:	e6db      	b.n	80075b6 <_strtod_l+0x65e>
 80077fe:	4925      	ldr	r1, [pc, #148]	; (8007894 <_strtod_l+0x93c>)
 8007800:	1acb      	subs	r3, r1, r3
 8007802:	0001      	movs	r1, r0
 8007804:	4099      	lsls	r1, r3
 8007806:	9110      	str	r1, [sp, #64]	; 0x40
 8007808:	e741      	b.n	800768e <_strtod_l+0x736>
 800780a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800780c:	9920      	ldr	r1, [sp, #128]	; 0x80
 800780e:	9805      	ldr	r0, [sp, #20]
 8007810:	f001 ff0c 	bl	800962c <__lshift>
 8007814:	9020      	str	r0, [sp, #128]	; 0x80
 8007816:	2800      	cmp	r0, #0
 8007818:	d000      	beq.n	800781c <_strtod_l+0x8c4>
 800781a:	e76c      	b.n	80076f6 <_strtod_l+0x79e>
 800781c:	e606      	b.n	800742c <_strtod_l+0x4d4>
 800781e:	970c      	str	r7, [sp, #48]	; 0x30
 8007820:	2800      	cmp	r0, #0
 8007822:	d176      	bne.n	8007912 <_strtod_l+0x9ba>
 8007824:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007826:	033b      	lsls	r3, r7, #12
 8007828:	0b1b      	lsrs	r3, r3, #12
 800782a:	2a00      	cmp	r2, #0
 800782c:	d038      	beq.n	80078a0 <_strtod_l+0x948>
 800782e:	4a1a      	ldr	r2, [pc, #104]	; (8007898 <_strtod_l+0x940>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d138      	bne.n	80078a6 <_strtod_l+0x94e>
 8007834:	2201      	movs	r2, #1
 8007836:	9b08      	ldr	r3, [sp, #32]
 8007838:	4252      	negs	r2, r2
 800783a:	0031      	movs	r1, r6
 800783c:	0010      	movs	r0, r2
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00b      	beq.n	800785a <_strtod_l+0x902>
 8007842:	24d4      	movs	r4, #212	; 0xd4
 8007844:	4b11      	ldr	r3, [pc, #68]	; (800788c <_strtod_l+0x934>)
 8007846:	0010      	movs	r0, r2
 8007848:	403b      	ands	r3, r7
 800784a:	04e4      	lsls	r4, r4, #19
 800784c:	42a3      	cmp	r3, r4
 800784e:	d804      	bhi.n	800785a <_strtod_l+0x902>
 8007850:	306c      	adds	r0, #108	; 0x6c
 8007852:	0d1b      	lsrs	r3, r3, #20
 8007854:	1ac3      	subs	r3, r0, r3
 8007856:	409a      	lsls	r2, r3
 8007858:	0010      	movs	r0, r2
 800785a:	4281      	cmp	r1, r0
 800785c:	d123      	bne.n	80078a6 <_strtod_l+0x94e>
 800785e:	4b0f      	ldr	r3, [pc, #60]	; (800789c <_strtod_l+0x944>)
 8007860:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007862:	429a      	cmp	r2, r3
 8007864:	d102      	bne.n	800786c <_strtod_l+0x914>
 8007866:	1c4b      	adds	r3, r1, #1
 8007868:	d100      	bne.n	800786c <_strtod_l+0x914>
 800786a:	e5df      	b.n	800742c <_strtod_l+0x4d4>
 800786c:	4b07      	ldr	r3, [pc, #28]	; (800788c <_strtod_l+0x934>)
 800786e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007870:	2600      	movs	r6, #0
 8007872:	401a      	ands	r2, r3
 8007874:	0013      	movs	r3, r2
 8007876:	2280      	movs	r2, #128	; 0x80
 8007878:	0352      	lsls	r2, r2, #13
 800787a:	189f      	adds	r7, r3, r2
 800787c:	9b08      	ldr	r3, [sp, #32]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d1a2      	bne.n	80077c8 <_strtod_l+0x870>
 8007882:	e5dc      	b.n	800743e <_strtod_l+0x4e6>
 8007884:	0800adf0 	.word	0x0800adf0
 8007888:	fffffc02 	.word	0xfffffc02
 800788c:	7ff00000 	.word	0x7ff00000
 8007890:	39500000 	.word	0x39500000
 8007894:	fffffbe2 	.word	0xfffffbe2
 8007898:	000fffff 	.word	0x000fffff
 800789c:	7fefffff 	.word	0x7fefffff
 80078a0:	4333      	orrs	r3, r6
 80078a2:	d100      	bne.n	80078a6 <_strtod_l+0x94e>
 80078a4:	e77e      	b.n	80077a4 <_strtod_l+0x84c>
 80078a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d01d      	beq.n	80078e8 <_strtod_l+0x990>
 80078ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80078b0:	4213      	tst	r3, r2
 80078b2:	d0e3      	beq.n	800787c <_strtod_l+0x924>
 80078b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078b6:	0030      	movs	r0, r6
 80078b8:	0039      	movs	r1, r7
 80078ba:	9a08      	ldr	r2, [sp, #32]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d017      	beq.n	80078f0 <_strtod_l+0x998>
 80078c0:	f7ff fb32 	bl	8006f28 <sulp>
 80078c4:	0002      	movs	r2, r0
 80078c6:	000b      	movs	r3, r1
 80078c8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80078ca:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80078cc:	f7f8 ff94 	bl	80007f8 <__aeabi_dadd>
 80078d0:	0006      	movs	r6, r0
 80078d2:	000f      	movs	r7, r1
 80078d4:	e7d2      	b.n	800787c <_strtod_l+0x924>
 80078d6:	2601      	movs	r6, #1
 80078d8:	4013      	ands	r3, r2
 80078da:	4a99      	ldr	r2, [pc, #612]	; (8007b40 <_strtod_l+0xbe8>)
 80078dc:	4276      	negs	r6, r6
 80078de:	189b      	adds	r3, r3, r2
 80078e0:	4a98      	ldr	r2, [pc, #608]	; (8007b44 <_strtod_l+0xbec>)
 80078e2:	431a      	orrs	r2, r3
 80078e4:	0017      	movs	r7, r2
 80078e6:	e7c9      	b.n	800787c <_strtod_l+0x924>
 80078e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80078ea:	4233      	tst	r3, r6
 80078ec:	d0c6      	beq.n	800787c <_strtod_l+0x924>
 80078ee:	e7e1      	b.n	80078b4 <_strtod_l+0x95c>
 80078f0:	f7ff fb1a 	bl	8006f28 <sulp>
 80078f4:	0002      	movs	r2, r0
 80078f6:	000b      	movs	r3, r1
 80078f8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80078fa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80078fc:	f7fa f926 	bl	8001b4c <__aeabi_dsub>
 8007900:	2200      	movs	r2, #0
 8007902:	2300      	movs	r3, #0
 8007904:	0006      	movs	r6, r0
 8007906:	000f      	movs	r7, r1
 8007908:	f7f8 fda0 	bl	800044c <__aeabi_dcmpeq>
 800790c:	2800      	cmp	r0, #0
 800790e:	d0b5      	beq.n	800787c <_strtod_l+0x924>
 8007910:	e5ff      	b.n	8007512 <_strtod_l+0x5ba>
 8007912:	9907      	ldr	r1, [sp, #28]
 8007914:	9806      	ldr	r0, [sp, #24]
 8007916:	f002 f883 	bl	8009a20 <__ratio>
 800791a:	2380      	movs	r3, #128	; 0x80
 800791c:	2200      	movs	r2, #0
 800791e:	05db      	lsls	r3, r3, #23
 8007920:	0004      	movs	r4, r0
 8007922:	000d      	movs	r5, r1
 8007924:	f7f8 fda2 	bl	800046c <__aeabi_dcmple>
 8007928:	2800      	cmp	r0, #0
 800792a:	d075      	beq.n	8007a18 <_strtod_l+0xac0>
 800792c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800792e:	2b00      	cmp	r3, #0
 8007930:	d047      	beq.n	80079c2 <_strtod_l+0xa6a>
 8007932:	2300      	movs	r3, #0
 8007934:	4c84      	ldr	r4, [pc, #528]	; (8007b48 <_strtod_l+0xbf0>)
 8007936:	2500      	movs	r5, #0
 8007938:	9310      	str	r3, [sp, #64]	; 0x40
 800793a:	9411      	str	r4, [sp, #68]	; 0x44
 800793c:	4c82      	ldr	r4, [pc, #520]	; (8007b48 <_strtod_l+0xbf0>)
 800793e:	4a83      	ldr	r2, [pc, #524]	; (8007b4c <_strtod_l+0xbf4>)
 8007940:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007942:	4013      	ands	r3, r2
 8007944:	9314      	str	r3, [sp, #80]	; 0x50
 8007946:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007948:	4b81      	ldr	r3, [pc, #516]	; (8007b50 <_strtod_l+0xbf8>)
 800794a:	429a      	cmp	r2, r3
 800794c:	d000      	beq.n	8007950 <_strtod_l+0x9f8>
 800794e:	e0ac      	b.n	8007aaa <_strtod_l+0xb52>
 8007950:	4a80      	ldr	r2, [pc, #512]	; (8007b54 <_strtod_l+0xbfc>)
 8007952:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007954:	4694      	mov	ip, r2
 8007956:	4463      	add	r3, ip
 8007958:	001f      	movs	r7, r3
 800795a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800795c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800795e:	0030      	movs	r0, r6
 8007960:	0039      	movs	r1, r7
 8007962:	920c      	str	r2, [sp, #48]	; 0x30
 8007964:	930d      	str	r3, [sp, #52]	; 0x34
 8007966:	f001 ff83 	bl	8009870 <__ulp>
 800796a:	0002      	movs	r2, r0
 800796c:	000b      	movs	r3, r1
 800796e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007970:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007972:	f7f9 fe7f 	bl	8001674 <__aeabi_dmul>
 8007976:	0032      	movs	r2, r6
 8007978:	003b      	movs	r3, r7
 800797a:	f7f8 ff3d 	bl	80007f8 <__aeabi_dadd>
 800797e:	4a73      	ldr	r2, [pc, #460]	; (8007b4c <_strtod_l+0xbf4>)
 8007980:	4b75      	ldr	r3, [pc, #468]	; (8007b58 <_strtod_l+0xc00>)
 8007982:	0006      	movs	r6, r0
 8007984:	400a      	ands	r2, r1
 8007986:	429a      	cmp	r2, r3
 8007988:	d95e      	bls.n	8007a48 <_strtod_l+0xaf0>
 800798a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800798c:	4b73      	ldr	r3, [pc, #460]	; (8007b5c <_strtod_l+0xc04>)
 800798e:	429a      	cmp	r2, r3
 8007990:	d103      	bne.n	800799a <_strtod_l+0xa42>
 8007992:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007994:	3301      	adds	r3, #1
 8007996:	d100      	bne.n	800799a <_strtod_l+0xa42>
 8007998:	e548      	b.n	800742c <_strtod_l+0x4d4>
 800799a:	2601      	movs	r6, #1
 800799c:	4f6f      	ldr	r7, [pc, #444]	; (8007b5c <_strtod_l+0xc04>)
 800799e:	4276      	negs	r6, r6
 80079a0:	9920      	ldr	r1, [sp, #128]	; 0x80
 80079a2:	9805      	ldr	r0, [sp, #20]
 80079a4:	f001 fc24 	bl	80091f0 <_Bfree>
 80079a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079aa:	9805      	ldr	r0, [sp, #20]
 80079ac:	f001 fc20 	bl	80091f0 <_Bfree>
 80079b0:	9907      	ldr	r1, [sp, #28]
 80079b2:	9805      	ldr	r0, [sp, #20]
 80079b4:	f001 fc1c 	bl	80091f0 <_Bfree>
 80079b8:	9906      	ldr	r1, [sp, #24]
 80079ba:	9805      	ldr	r0, [sp, #20]
 80079bc:	f001 fc18 	bl	80091f0 <_Bfree>
 80079c0:	e61d      	b.n	80075fe <_strtod_l+0x6a6>
 80079c2:	2e00      	cmp	r6, #0
 80079c4:	d11c      	bne.n	8007a00 <_strtod_l+0xaa8>
 80079c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079c8:	031b      	lsls	r3, r3, #12
 80079ca:	d11f      	bne.n	8007a0c <_strtod_l+0xab4>
 80079cc:	2200      	movs	r2, #0
 80079ce:	0020      	movs	r0, r4
 80079d0:	0029      	movs	r1, r5
 80079d2:	4b5d      	ldr	r3, [pc, #372]	; (8007b48 <_strtod_l+0xbf0>)
 80079d4:	f7f8 fd40 	bl	8000458 <__aeabi_dcmplt>
 80079d8:	2800      	cmp	r0, #0
 80079da:	d11a      	bne.n	8007a12 <_strtod_l+0xaba>
 80079dc:	0020      	movs	r0, r4
 80079de:	0029      	movs	r1, r5
 80079e0:	2200      	movs	r2, #0
 80079e2:	4b5f      	ldr	r3, [pc, #380]	; (8007b60 <_strtod_l+0xc08>)
 80079e4:	f7f9 fe46 	bl	8001674 <__aeabi_dmul>
 80079e8:	0005      	movs	r5, r0
 80079ea:	000c      	movs	r4, r1
 80079ec:	2380      	movs	r3, #128	; 0x80
 80079ee:	061b      	lsls	r3, r3, #24
 80079f0:	18e3      	adds	r3, r4, r3
 80079f2:	951c      	str	r5, [sp, #112]	; 0x70
 80079f4:	931d      	str	r3, [sp, #116]	; 0x74
 80079f6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80079f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80079fa:	9210      	str	r2, [sp, #64]	; 0x40
 80079fc:	9311      	str	r3, [sp, #68]	; 0x44
 80079fe:	e79e      	b.n	800793e <_strtod_l+0x9e6>
 8007a00:	2e01      	cmp	r6, #1
 8007a02:	d103      	bne.n	8007a0c <_strtod_l+0xab4>
 8007a04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d100      	bne.n	8007a0c <_strtod_l+0xab4>
 8007a0a:	e582      	b.n	8007512 <_strtod_l+0x5ba>
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	4c55      	ldr	r4, [pc, #340]	; (8007b64 <_strtod_l+0xc0c>)
 8007a10:	e791      	b.n	8007936 <_strtod_l+0x9de>
 8007a12:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007a14:	4c52      	ldr	r4, [pc, #328]	; (8007b60 <_strtod_l+0xc08>)
 8007a16:	e7e9      	b.n	80079ec <_strtod_l+0xa94>
 8007a18:	2200      	movs	r2, #0
 8007a1a:	0020      	movs	r0, r4
 8007a1c:	0029      	movs	r1, r5
 8007a1e:	4b50      	ldr	r3, [pc, #320]	; (8007b60 <_strtod_l+0xc08>)
 8007a20:	f7f9 fe28 	bl	8001674 <__aeabi_dmul>
 8007a24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a26:	0005      	movs	r5, r0
 8007a28:	000b      	movs	r3, r1
 8007a2a:	000c      	movs	r4, r1
 8007a2c:	2a00      	cmp	r2, #0
 8007a2e:	d107      	bne.n	8007a40 <_strtod_l+0xae8>
 8007a30:	2280      	movs	r2, #128	; 0x80
 8007a32:	0612      	lsls	r2, r2, #24
 8007a34:	188b      	adds	r3, r1, r2
 8007a36:	9016      	str	r0, [sp, #88]	; 0x58
 8007a38:	9317      	str	r3, [sp, #92]	; 0x5c
 8007a3a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007a3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a3e:	e7dc      	b.n	80079fa <_strtod_l+0xaa2>
 8007a40:	0002      	movs	r2, r0
 8007a42:	9216      	str	r2, [sp, #88]	; 0x58
 8007a44:	9317      	str	r3, [sp, #92]	; 0x5c
 8007a46:	e7f8      	b.n	8007a3a <_strtod_l+0xae2>
 8007a48:	23d4      	movs	r3, #212	; 0xd4
 8007a4a:	049b      	lsls	r3, r3, #18
 8007a4c:	18cf      	adds	r7, r1, r3
 8007a4e:	9b08      	ldr	r3, [sp, #32]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d1a5      	bne.n	80079a0 <_strtod_l+0xa48>
 8007a54:	4b3d      	ldr	r3, [pc, #244]	; (8007b4c <_strtod_l+0xbf4>)
 8007a56:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007a58:	403b      	ands	r3, r7
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d1a0      	bne.n	80079a0 <_strtod_l+0xa48>
 8007a5e:	0028      	movs	r0, r5
 8007a60:	0021      	movs	r1, r4
 8007a62:	f7f8 fd79 	bl	8000558 <__aeabi_d2lz>
 8007a66:	f7f8 fdb3 	bl	80005d0 <__aeabi_l2d>
 8007a6a:	0002      	movs	r2, r0
 8007a6c:	000b      	movs	r3, r1
 8007a6e:	0028      	movs	r0, r5
 8007a70:	0021      	movs	r1, r4
 8007a72:	f7fa f86b 	bl	8001b4c <__aeabi_dsub>
 8007a76:	033b      	lsls	r3, r7, #12
 8007a78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a7a:	0b1b      	lsrs	r3, r3, #12
 8007a7c:	4333      	orrs	r3, r6
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	0004      	movs	r4, r0
 8007a82:	000d      	movs	r5, r1
 8007a84:	4a38      	ldr	r2, [pc, #224]	; (8007b68 <_strtod_l+0xc10>)
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d055      	beq.n	8007b36 <_strtod_l+0xbde>
 8007a8a:	4b38      	ldr	r3, [pc, #224]	; (8007b6c <_strtod_l+0xc14>)
 8007a8c:	f7f8 fce4 	bl	8000458 <__aeabi_dcmplt>
 8007a90:	2800      	cmp	r0, #0
 8007a92:	d000      	beq.n	8007a96 <_strtod_l+0xb3e>
 8007a94:	e4d3      	b.n	800743e <_strtod_l+0x4e6>
 8007a96:	0020      	movs	r0, r4
 8007a98:	0029      	movs	r1, r5
 8007a9a:	4a35      	ldr	r2, [pc, #212]	; (8007b70 <_strtod_l+0xc18>)
 8007a9c:	4b30      	ldr	r3, [pc, #192]	; (8007b60 <_strtod_l+0xc08>)
 8007a9e:	f7f8 fcef 	bl	8000480 <__aeabi_dcmpgt>
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	d100      	bne.n	8007aa8 <_strtod_l+0xb50>
 8007aa6:	e77b      	b.n	80079a0 <_strtod_l+0xa48>
 8007aa8:	e4c9      	b.n	800743e <_strtod_l+0x4e6>
 8007aaa:	9b08      	ldr	r3, [sp, #32]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d02b      	beq.n	8007b08 <_strtod_l+0xbb0>
 8007ab0:	23d4      	movs	r3, #212	; 0xd4
 8007ab2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007ab4:	04db      	lsls	r3, r3, #19
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d826      	bhi.n	8007b08 <_strtod_l+0xbb0>
 8007aba:	0028      	movs	r0, r5
 8007abc:	0021      	movs	r1, r4
 8007abe:	4a2d      	ldr	r2, [pc, #180]	; (8007b74 <_strtod_l+0xc1c>)
 8007ac0:	4b2d      	ldr	r3, [pc, #180]	; (8007b78 <_strtod_l+0xc20>)
 8007ac2:	f7f8 fcd3 	bl	800046c <__aeabi_dcmple>
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	d017      	beq.n	8007afa <_strtod_l+0xba2>
 8007aca:	0028      	movs	r0, r5
 8007acc:	0021      	movs	r1, r4
 8007ace:	f7f8 fd25 	bl	800051c <__aeabi_d2uiz>
 8007ad2:	2800      	cmp	r0, #0
 8007ad4:	d100      	bne.n	8007ad8 <_strtod_l+0xb80>
 8007ad6:	3001      	adds	r0, #1
 8007ad8:	f7fa fc4e 	bl	8002378 <__aeabi_ui2d>
 8007adc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007ade:	0005      	movs	r5, r0
 8007ae0:	000b      	movs	r3, r1
 8007ae2:	000c      	movs	r4, r1
 8007ae4:	2a00      	cmp	r2, #0
 8007ae6:	d122      	bne.n	8007b2e <_strtod_l+0xbd6>
 8007ae8:	2280      	movs	r2, #128	; 0x80
 8007aea:	0612      	lsls	r2, r2, #24
 8007aec:	188b      	adds	r3, r1, r2
 8007aee:	9018      	str	r0, [sp, #96]	; 0x60
 8007af0:	9319      	str	r3, [sp, #100]	; 0x64
 8007af2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007af4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007af6:	9210      	str	r2, [sp, #64]	; 0x40
 8007af8:	9311      	str	r3, [sp, #68]	; 0x44
 8007afa:	22d6      	movs	r2, #214	; 0xd6
 8007afc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007afe:	04d2      	lsls	r2, r2, #19
 8007b00:	189b      	adds	r3, r3, r2
 8007b02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007b04:	1a9b      	subs	r3, r3, r2
 8007b06:	9311      	str	r3, [sp, #68]	; 0x44
 8007b08:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007b0a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007b0c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8007b0e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8007b10:	f001 feae 	bl	8009870 <__ulp>
 8007b14:	0002      	movs	r2, r0
 8007b16:	000b      	movs	r3, r1
 8007b18:	0030      	movs	r0, r6
 8007b1a:	0039      	movs	r1, r7
 8007b1c:	f7f9 fdaa 	bl	8001674 <__aeabi_dmul>
 8007b20:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007b22:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007b24:	f7f8 fe68 	bl	80007f8 <__aeabi_dadd>
 8007b28:	0006      	movs	r6, r0
 8007b2a:	000f      	movs	r7, r1
 8007b2c:	e78f      	b.n	8007a4e <_strtod_l+0xaf6>
 8007b2e:	0002      	movs	r2, r0
 8007b30:	9218      	str	r2, [sp, #96]	; 0x60
 8007b32:	9319      	str	r3, [sp, #100]	; 0x64
 8007b34:	e7dd      	b.n	8007af2 <_strtod_l+0xb9a>
 8007b36:	4b11      	ldr	r3, [pc, #68]	; (8007b7c <_strtod_l+0xc24>)
 8007b38:	f7f8 fc8e 	bl	8000458 <__aeabi_dcmplt>
 8007b3c:	e7b1      	b.n	8007aa2 <_strtod_l+0xb4a>
 8007b3e:	46c0      	nop			; (mov r8, r8)
 8007b40:	fff00000 	.word	0xfff00000
 8007b44:	000fffff 	.word	0x000fffff
 8007b48:	3ff00000 	.word	0x3ff00000
 8007b4c:	7ff00000 	.word	0x7ff00000
 8007b50:	7fe00000 	.word	0x7fe00000
 8007b54:	fcb00000 	.word	0xfcb00000
 8007b58:	7c9fffff 	.word	0x7c9fffff
 8007b5c:	7fefffff 	.word	0x7fefffff
 8007b60:	3fe00000 	.word	0x3fe00000
 8007b64:	bff00000 	.word	0xbff00000
 8007b68:	94a03595 	.word	0x94a03595
 8007b6c:	3fdfffff 	.word	0x3fdfffff
 8007b70:	35afe535 	.word	0x35afe535
 8007b74:	ffc00000 	.word	0xffc00000
 8007b78:	41dfffff 	.word	0x41dfffff
 8007b7c:	3fcfffff 	.word	0x3fcfffff

08007b80 <_strtod_r>:
 8007b80:	b510      	push	{r4, lr}
 8007b82:	4b02      	ldr	r3, [pc, #8]	; (8007b8c <_strtod_r+0xc>)
 8007b84:	f7ff f9e8 	bl	8006f58 <_strtod_l>
 8007b88:	bd10      	pop	{r4, pc}
 8007b8a:	46c0      	nop			; (mov r8, r8)
 8007b8c:	20000098 	.word	0x20000098

08007b90 <_strtol_l.constprop.0>:
 8007b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b92:	b087      	sub	sp, #28
 8007b94:	001e      	movs	r6, r3
 8007b96:	9005      	str	r0, [sp, #20]
 8007b98:	9101      	str	r1, [sp, #4]
 8007b9a:	9202      	str	r2, [sp, #8]
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d045      	beq.n	8007c2c <_strtol_l.constprop.0+0x9c>
 8007ba0:	000b      	movs	r3, r1
 8007ba2:	2e24      	cmp	r6, #36	; 0x24
 8007ba4:	d842      	bhi.n	8007c2c <_strtol_l.constprop.0+0x9c>
 8007ba6:	4a3f      	ldr	r2, [pc, #252]	; (8007ca4 <_strtol_l.constprop.0+0x114>)
 8007ba8:	2108      	movs	r1, #8
 8007baa:	4694      	mov	ip, r2
 8007bac:	001a      	movs	r2, r3
 8007bae:	4660      	mov	r0, ip
 8007bb0:	7814      	ldrb	r4, [r2, #0]
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	5d00      	ldrb	r0, [r0, r4]
 8007bb6:	001d      	movs	r5, r3
 8007bb8:	0007      	movs	r7, r0
 8007bba:	400f      	ands	r7, r1
 8007bbc:	4208      	tst	r0, r1
 8007bbe:	d1f5      	bne.n	8007bac <_strtol_l.constprop.0+0x1c>
 8007bc0:	2c2d      	cmp	r4, #45	; 0x2d
 8007bc2:	d13a      	bne.n	8007c3a <_strtol_l.constprop.0+0xaa>
 8007bc4:	2701      	movs	r7, #1
 8007bc6:	781c      	ldrb	r4, [r3, #0]
 8007bc8:	1c95      	adds	r5, r2, #2
 8007bca:	2e00      	cmp	r6, #0
 8007bcc:	d065      	beq.n	8007c9a <_strtol_l.constprop.0+0x10a>
 8007bce:	2e10      	cmp	r6, #16
 8007bd0:	d109      	bne.n	8007be6 <_strtol_l.constprop.0+0x56>
 8007bd2:	2c30      	cmp	r4, #48	; 0x30
 8007bd4:	d107      	bne.n	8007be6 <_strtol_l.constprop.0+0x56>
 8007bd6:	2220      	movs	r2, #32
 8007bd8:	782b      	ldrb	r3, [r5, #0]
 8007bda:	4393      	bics	r3, r2
 8007bdc:	2b58      	cmp	r3, #88	; 0x58
 8007bde:	d157      	bne.n	8007c90 <_strtol_l.constprop.0+0x100>
 8007be0:	2610      	movs	r6, #16
 8007be2:	786c      	ldrb	r4, [r5, #1]
 8007be4:	3502      	adds	r5, #2
 8007be6:	4b30      	ldr	r3, [pc, #192]	; (8007ca8 <_strtol_l.constprop.0+0x118>)
 8007be8:	0031      	movs	r1, r6
 8007bea:	18fb      	adds	r3, r7, r3
 8007bec:	0018      	movs	r0, r3
 8007bee:	9303      	str	r3, [sp, #12]
 8007bf0:	f7f8 fb2c 	bl	800024c <__aeabi_uidivmod>
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	4684      	mov	ip, r0
 8007bfa:	0018      	movs	r0, r3
 8007bfc:	9104      	str	r1, [sp, #16]
 8007bfe:	4252      	negs	r2, r2
 8007c00:	0021      	movs	r1, r4
 8007c02:	3930      	subs	r1, #48	; 0x30
 8007c04:	2909      	cmp	r1, #9
 8007c06:	d81d      	bhi.n	8007c44 <_strtol_l.constprop.0+0xb4>
 8007c08:	000c      	movs	r4, r1
 8007c0a:	42a6      	cmp	r6, r4
 8007c0c:	dd28      	ble.n	8007c60 <_strtol_l.constprop.0+0xd0>
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	db24      	blt.n	8007c5c <_strtol_l.constprop.0+0xcc>
 8007c12:	0013      	movs	r3, r2
 8007c14:	4584      	cmp	ip, r0
 8007c16:	d306      	bcc.n	8007c26 <_strtol_l.constprop.0+0x96>
 8007c18:	d102      	bne.n	8007c20 <_strtol_l.constprop.0+0x90>
 8007c1a:	9904      	ldr	r1, [sp, #16]
 8007c1c:	42a1      	cmp	r1, r4
 8007c1e:	db02      	blt.n	8007c26 <_strtol_l.constprop.0+0x96>
 8007c20:	2301      	movs	r3, #1
 8007c22:	4370      	muls	r0, r6
 8007c24:	1820      	adds	r0, r4, r0
 8007c26:	782c      	ldrb	r4, [r5, #0]
 8007c28:	3501      	adds	r5, #1
 8007c2a:	e7e9      	b.n	8007c00 <_strtol_l.constprop.0+0x70>
 8007c2c:	f7fe fab0 	bl	8006190 <__errno>
 8007c30:	2316      	movs	r3, #22
 8007c32:	6003      	str	r3, [r0, #0]
 8007c34:	2000      	movs	r0, #0
 8007c36:	b007      	add	sp, #28
 8007c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c3a:	2c2b      	cmp	r4, #43	; 0x2b
 8007c3c:	d1c5      	bne.n	8007bca <_strtol_l.constprop.0+0x3a>
 8007c3e:	781c      	ldrb	r4, [r3, #0]
 8007c40:	1c95      	adds	r5, r2, #2
 8007c42:	e7c2      	b.n	8007bca <_strtol_l.constprop.0+0x3a>
 8007c44:	0021      	movs	r1, r4
 8007c46:	3941      	subs	r1, #65	; 0x41
 8007c48:	2919      	cmp	r1, #25
 8007c4a:	d801      	bhi.n	8007c50 <_strtol_l.constprop.0+0xc0>
 8007c4c:	3c37      	subs	r4, #55	; 0x37
 8007c4e:	e7dc      	b.n	8007c0a <_strtol_l.constprop.0+0x7a>
 8007c50:	0021      	movs	r1, r4
 8007c52:	3961      	subs	r1, #97	; 0x61
 8007c54:	2919      	cmp	r1, #25
 8007c56:	d803      	bhi.n	8007c60 <_strtol_l.constprop.0+0xd0>
 8007c58:	3c57      	subs	r4, #87	; 0x57
 8007c5a:	e7d6      	b.n	8007c0a <_strtol_l.constprop.0+0x7a>
 8007c5c:	0013      	movs	r3, r2
 8007c5e:	e7e2      	b.n	8007c26 <_strtol_l.constprop.0+0x96>
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	da09      	bge.n	8007c78 <_strtol_l.constprop.0+0xe8>
 8007c64:	2322      	movs	r3, #34	; 0x22
 8007c66:	9a05      	ldr	r2, [sp, #20]
 8007c68:	9803      	ldr	r0, [sp, #12]
 8007c6a:	6013      	str	r3, [r2, #0]
 8007c6c:	9b02      	ldr	r3, [sp, #8]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d0e1      	beq.n	8007c36 <_strtol_l.constprop.0+0xa6>
 8007c72:	1e6b      	subs	r3, r5, #1
 8007c74:	9301      	str	r3, [sp, #4]
 8007c76:	e007      	b.n	8007c88 <_strtol_l.constprop.0+0xf8>
 8007c78:	2f00      	cmp	r7, #0
 8007c7a:	d000      	beq.n	8007c7e <_strtol_l.constprop.0+0xee>
 8007c7c:	4240      	negs	r0, r0
 8007c7e:	9a02      	ldr	r2, [sp, #8]
 8007c80:	2a00      	cmp	r2, #0
 8007c82:	d0d8      	beq.n	8007c36 <_strtol_l.constprop.0+0xa6>
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1f4      	bne.n	8007c72 <_strtol_l.constprop.0+0xe2>
 8007c88:	9b02      	ldr	r3, [sp, #8]
 8007c8a:	9a01      	ldr	r2, [sp, #4]
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	e7d2      	b.n	8007c36 <_strtol_l.constprop.0+0xa6>
 8007c90:	2430      	movs	r4, #48	; 0x30
 8007c92:	2e00      	cmp	r6, #0
 8007c94:	d1a7      	bne.n	8007be6 <_strtol_l.constprop.0+0x56>
 8007c96:	3608      	adds	r6, #8
 8007c98:	e7a5      	b.n	8007be6 <_strtol_l.constprop.0+0x56>
 8007c9a:	2c30      	cmp	r4, #48	; 0x30
 8007c9c:	d09b      	beq.n	8007bd6 <_strtol_l.constprop.0+0x46>
 8007c9e:	260a      	movs	r6, #10
 8007ca0:	e7a1      	b.n	8007be6 <_strtol_l.constprop.0+0x56>
 8007ca2:	46c0      	nop			; (mov r8, r8)
 8007ca4:	0800ae19 	.word	0x0800ae19
 8007ca8:	7fffffff 	.word	0x7fffffff

08007cac <_strtol_r>:
 8007cac:	b510      	push	{r4, lr}
 8007cae:	f7ff ff6f 	bl	8007b90 <_strtol_l.constprop.0>
 8007cb2:	bd10      	pop	{r4, pc}

08007cb4 <strtol>:
 8007cb4:	b510      	push	{r4, lr}
 8007cb6:	0013      	movs	r3, r2
 8007cb8:	000a      	movs	r2, r1
 8007cba:	0001      	movs	r1, r0
 8007cbc:	4802      	ldr	r0, [pc, #8]	; (8007cc8 <strtol+0x14>)
 8007cbe:	6800      	ldr	r0, [r0, #0]
 8007cc0:	f7ff ff66 	bl	8007b90 <_strtol_l.constprop.0>
 8007cc4:	bd10      	pop	{r4, pc}
 8007cc6:	46c0      	nop			; (mov r8, r8)
 8007cc8:	20000030 	.word	0x20000030

08007ccc <quorem>:
 8007ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cce:	0006      	movs	r6, r0
 8007cd0:	690b      	ldr	r3, [r1, #16]
 8007cd2:	6932      	ldr	r2, [r6, #16]
 8007cd4:	b087      	sub	sp, #28
 8007cd6:	2000      	movs	r0, #0
 8007cd8:	9103      	str	r1, [sp, #12]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	db65      	blt.n	8007daa <quorem+0xde>
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	009c      	lsls	r4, r3, #2
 8007ce2:	9300      	str	r3, [sp, #0]
 8007ce4:	000b      	movs	r3, r1
 8007ce6:	3314      	adds	r3, #20
 8007ce8:	9305      	str	r3, [sp, #20]
 8007cea:	191b      	adds	r3, r3, r4
 8007cec:	9304      	str	r3, [sp, #16]
 8007cee:	0033      	movs	r3, r6
 8007cf0:	3314      	adds	r3, #20
 8007cf2:	9302      	str	r3, [sp, #8]
 8007cf4:	191c      	adds	r4, r3, r4
 8007cf6:	9b04      	ldr	r3, [sp, #16]
 8007cf8:	6827      	ldr	r7, [r4, #0]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	0038      	movs	r0, r7
 8007cfe:	1c5d      	adds	r5, r3, #1
 8007d00:	0029      	movs	r1, r5
 8007d02:	9301      	str	r3, [sp, #4]
 8007d04:	f7f8 fa1c 	bl	8000140 <__udivsi3>
 8007d08:	9001      	str	r0, [sp, #4]
 8007d0a:	42af      	cmp	r7, r5
 8007d0c:	d324      	bcc.n	8007d58 <quorem+0x8c>
 8007d0e:	2500      	movs	r5, #0
 8007d10:	46ac      	mov	ip, r5
 8007d12:	9802      	ldr	r0, [sp, #8]
 8007d14:	9f05      	ldr	r7, [sp, #20]
 8007d16:	cf08      	ldmia	r7!, {r3}
 8007d18:	9a01      	ldr	r2, [sp, #4]
 8007d1a:	b299      	uxth	r1, r3
 8007d1c:	4351      	muls	r1, r2
 8007d1e:	0c1b      	lsrs	r3, r3, #16
 8007d20:	4353      	muls	r3, r2
 8007d22:	1949      	adds	r1, r1, r5
 8007d24:	0c0a      	lsrs	r2, r1, #16
 8007d26:	189b      	adds	r3, r3, r2
 8007d28:	6802      	ldr	r2, [r0, #0]
 8007d2a:	b289      	uxth	r1, r1
 8007d2c:	b292      	uxth	r2, r2
 8007d2e:	4462      	add	r2, ip
 8007d30:	1a52      	subs	r2, r2, r1
 8007d32:	6801      	ldr	r1, [r0, #0]
 8007d34:	0c1d      	lsrs	r5, r3, #16
 8007d36:	0c09      	lsrs	r1, r1, #16
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	1acb      	subs	r3, r1, r3
 8007d3c:	1411      	asrs	r1, r2, #16
 8007d3e:	185b      	adds	r3, r3, r1
 8007d40:	1419      	asrs	r1, r3, #16
 8007d42:	b292      	uxth	r2, r2
 8007d44:	041b      	lsls	r3, r3, #16
 8007d46:	431a      	orrs	r2, r3
 8007d48:	9b04      	ldr	r3, [sp, #16]
 8007d4a:	468c      	mov	ip, r1
 8007d4c:	c004      	stmia	r0!, {r2}
 8007d4e:	42bb      	cmp	r3, r7
 8007d50:	d2e1      	bcs.n	8007d16 <quorem+0x4a>
 8007d52:	6823      	ldr	r3, [r4, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d030      	beq.n	8007dba <quorem+0xee>
 8007d58:	0030      	movs	r0, r6
 8007d5a:	9903      	ldr	r1, [sp, #12]
 8007d5c:	f001 fcd4 	bl	8009708 <__mcmp>
 8007d60:	2800      	cmp	r0, #0
 8007d62:	db21      	blt.n	8007da8 <quorem+0xdc>
 8007d64:	0030      	movs	r0, r6
 8007d66:	2400      	movs	r4, #0
 8007d68:	9b01      	ldr	r3, [sp, #4]
 8007d6a:	9903      	ldr	r1, [sp, #12]
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	9301      	str	r3, [sp, #4]
 8007d70:	3014      	adds	r0, #20
 8007d72:	3114      	adds	r1, #20
 8007d74:	6803      	ldr	r3, [r0, #0]
 8007d76:	c920      	ldmia	r1!, {r5}
 8007d78:	b29a      	uxth	r2, r3
 8007d7a:	1914      	adds	r4, r2, r4
 8007d7c:	b2aa      	uxth	r2, r5
 8007d7e:	1aa2      	subs	r2, r4, r2
 8007d80:	0c1b      	lsrs	r3, r3, #16
 8007d82:	0c2d      	lsrs	r5, r5, #16
 8007d84:	1414      	asrs	r4, r2, #16
 8007d86:	1b5b      	subs	r3, r3, r5
 8007d88:	191b      	adds	r3, r3, r4
 8007d8a:	141c      	asrs	r4, r3, #16
 8007d8c:	b292      	uxth	r2, r2
 8007d8e:	041b      	lsls	r3, r3, #16
 8007d90:	4313      	orrs	r3, r2
 8007d92:	c008      	stmia	r0!, {r3}
 8007d94:	9b04      	ldr	r3, [sp, #16]
 8007d96:	428b      	cmp	r3, r1
 8007d98:	d2ec      	bcs.n	8007d74 <quorem+0xa8>
 8007d9a:	9b00      	ldr	r3, [sp, #0]
 8007d9c:	9a02      	ldr	r2, [sp, #8]
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	18d3      	adds	r3, r2, r3
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	2a00      	cmp	r2, #0
 8007da6:	d015      	beq.n	8007dd4 <quorem+0x108>
 8007da8:	9801      	ldr	r0, [sp, #4]
 8007daa:	b007      	add	sp, #28
 8007dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dae:	6823      	ldr	r3, [r4, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d106      	bne.n	8007dc2 <quorem+0xf6>
 8007db4:	9b00      	ldr	r3, [sp, #0]
 8007db6:	3b01      	subs	r3, #1
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	9b02      	ldr	r3, [sp, #8]
 8007dbc:	3c04      	subs	r4, #4
 8007dbe:	42a3      	cmp	r3, r4
 8007dc0:	d3f5      	bcc.n	8007dae <quorem+0xe2>
 8007dc2:	9b00      	ldr	r3, [sp, #0]
 8007dc4:	6133      	str	r3, [r6, #16]
 8007dc6:	e7c7      	b.n	8007d58 <quorem+0x8c>
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	2a00      	cmp	r2, #0
 8007dcc:	d106      	bne.n	8007ddc <quorem+0x110>
 8007dce:	9a00      	ldr	r2, [sp, #0]
 8007dd0:	3a01      	subs	r2, #1
 8007dd2:	9200      	str	r2, [sp, #0]
 8007dd4:	9a02      	ldr	r2, [sp, #8]
 8007dd6:	3b04      	subs	r3, #4
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d3f5      	bcc.n	8007dc8 <quorem+0xfc>
 8007ddc:	9b00      	ldr	r3, [sp, #0]
 8007dde:	6133      	str	r3, [r6, #16]
 8007de0:	e7e2      	b.n	8007da8 <quorem+0xdc>
	...

08007de4 <_dtoa_r>:
 8007de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007de6:	b09d      	sub	sp, #116	; 0x74
 8007de8:	9202      	str	r2, [sp, #8]
 8007dea:	9303      	str	r3, [sp, #12]
 8007dec:	9b02      	ldr	r3, [sp, #8]
 8007dee:	9c03      	ldr	r4, [sp, #12]
 8007df0:	9308      	str	r3, [sp, #32]
 8007df2:	9409      	str	r4, [sp, #36]	; 0x24
 8007df4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007df6:	0007      	movs	r7, r0
 8007df8:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8007dfa:	2c00      	cmp	r4, #0
 8007dfc:	d10e      	bne.n	8007e1c <_dtoa_r+0x38>
 8007dfe:	2010      	movs	r0, #16
 8007e00:	f001 f982 	bl	8009108 <malloc>
 8007e04:	1e02      	subs	r2, r0, #0
 8007e06:	6278      	str	r0, [r7, #36]	; 0x24
 8007e08:	d104      	bne.n	8007e14 <_dtoa_r+0x30>
 8007e0a:	21ea      	movs	r1, #234	; 0xea
 8007e0c:	4bc7      	ldr	r3, [pc, #796]	; (800812c <_dtoa_r+0x348>)
 8007e0e:	48c8      	ldr	r0, [pc, #800]	; (8008130 <_dtoa_r+0x34c>)
 8007e10:	f002 f91c 	bl	800a04c <__assert_func>
 8007e14:	6044      	str	r4, [r0, #4]
 8007e16:	6084      	str	r4, [r0, #8]
 8007e18:	6004      	str	r4, [r0, #0]
 8007e1a:	60c4      	str	r4, [r0, #12]
 8007e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1e:	6819      	ldr	r1, [r3, #0]
 8007e20:	2900      	cmp	r1, #0
 8007e22:	d00a      	beq.n	8007e3a <_dtoa_r+0x56>
 8007e24:	685a      	ldr	r2, [r3, #4]
 8007e26:	2301      	movs	r3, #1
 8007e28:	4093      	lsls	r3, r2
 8007e2a:	604a      	str	r2, [r1, #4]
 8007e2c:	608b      	str	r3, [r1, #8]
 8007e2e:	0038      	movs	r0, r7
 8007e30:	f001 f9de 	bl	80091f0 <_Bfree>
 8007e34:	2200      	movs	r2, #0
 8007e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e38:	601a      	str	r2, [r3, #0]
 8007e3a:	9b03      	ldr	r3, [sp, #12]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	da20      	bge.n	8007e82 <_dtoa_r+0x9e>
 8007e40:	2301      	movs	r3, #1
 8007e42:	602b      	str	r3, [r5, #0]
 8007e44:	9b03      	ldr	r3, [sp, #12]
 8007e46:	005b      	lsls	r3, r3, #1
 8007e48:	085b      	lsrs	r3, r3, #1
 8007e4a:	9309      	str	r3, [sp, #36]	; 0x24
 8007e4c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007e4e:	4bb9      	ldr	r3, [pc, #740]	; (8008134 <_dtoa_r+0x350>)
 8007e50:	4ab8      	ldr	r2, [pc, #736]	; (8008134 <_dtoa_r+0x350>)
 8007e52:	402b      	ands	r3, r5
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d117      	bne.n	8007e88 <_dtoa_r+0xa4>
 8007e58:	4bb7      	ldr	r3, [pc, #732]	; (8008138 <_dtoa_r+0x354>)
 8007e5a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007e5c:	0328      	lsls	r0, r5, #12
 8007e5e:	6013      	str	r3, [r2, #0]
 8007e60:	9b02      	ldr	r3, [sp, #8]
 8007e62:	0b00      	lsrs	r0, r0, #12
 8007e64:	4318      	orrs	r0, r3
 8007e66:	d101      	bne.n	8007e6c <_dtoa_r+0x88>
 8007e68:	f000 fdbf 	bl	80089ea <_dtoa_r+0xc06>
 8007e6c:	48b3      	ldr	r0, [pc, #716]	; (800813c <_dtoa_r+0x358>)
 8007e6e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007e70:	9006      	str	r0, [sp, #24]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d002      	beq.n	8007e7c <_dtoa_r+0x98>
 8007e76:	4bb2      	ldr	r3, [pc, #712]	; (8008140 <_dtoa_r+0x35c>)
 8007e78:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007e7a:	6013      	str	r3, [r2, #0]
 8007e7c:	9806      	ldr	r0, [sp, #24]
 8007e7e:	b01d      	add	sp, #116	; 0x74
 8007e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e82:	2300      	movs	r3, #0
 8007e84:	602b      	str	r3, [r5, #0]
 8007e86:	e7e1      	b.n	8007e4c <_dtoa_r+0x68>
 8007e88:	9b08      	ldr	r3, [sp, #32]
 8007e8a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007e8c:	9312      	str	r3, [sp, #72]	; 0x48
 8007e8e:	9413      	str	r4, [sp, #76]	; 0x4c
 8007e90:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007e92:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007e94:	2200      	movs	r2, #0
 8007e96:	2300      	movs	r3, #0
 8007e98:	f7f8 fad8 	bl	800044c <__aeabi_dcmpeq>
 8007e9c:	1e04      	subs	r4, r0, #0
 8007e9e:	d009      	beq.n	8007eb4 <_dtoa_r+0xd0>
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007ea4:	6013      	str	r3, [r2, #0]
 8007ea6:	4ba7      	ldr	r3, [pc, #668]	; (8008144 <_dtoa_r+0x360>)
 8007ea8:	9306      	str	r3, [sp, #24]
 8007eaa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d0e5      	beq.n	8007e7c <_dtoa_r+0x98>
 8007eb0:	4ba5      	ldr	r3, [pc, #660]	; (8008148 <_dtoa_r+0x364>)
 8007eb2:	e7e1      	b.n	8007e78 <_dtoa_r+0x94>
 8007eb4:	ab1a      	add	r3, sp, #104	; 0x68
 8007eb6:	9301      	str	r3, [sp, #4]
 8007eb8:	ab1b      	add	r3, sp, #108	; 0x6c
 8007eba:	9300      	str	r3, [sp, #0]
 8007ebc:	0038      	movs	r0, r7
 8007ebe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007ec0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ec2:	f001 fd49 	bl	8009958 <__d2b>
 8007ec6:	006e      	lsls	r6, r5, #1
 8007ec8:	9005      	str	r0, [sp, #20]
 8007eca:	0d76      	lsrs	r6, r6, #21
 8007ecc:	d100      	bne.n	8007ed0 <_dtoa_r+0xec>
 8007ece:	e07c      	b.n	8007fca <_dtoa_r+0x1e6>
 8007ed0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007ed2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007ed4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ed6:	4a9d      	ldr	r2, [pc, #628]	; (800814c <_dtoa_r+0x368>)
 8007ed8:	031b      	lsls	r3, r3, #12
 8007eda:	0b1b      	lsrs	r3, r3, #12
 8007edc:	431a      	orrs	r2, r3
 8007ede:	0011      	movs	r1, r2
 8007ee0:	4b9b      	ldr	r3, [pc, #620]	; (8008150 <_dtoa_r+0x36c>)
 8007ee2:	9418      	str	r4, [sp, #96]	; 0x60
 8007ee4:	18f6      	adds	r6, r6, r3
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	4b9a      	ldr	r3, [pc, #616]	; (8008154 <_dtoa_r+0x370>)
 8007eea:	f7f9 fe2f 	bl	8001b4c <__aeabi_dsub>
 8007eee:	4a9a      	ldr	r2, [pc, #616]	; (8008158 <_dtoa_r+0x374>)
 8007ef0:	4b9a      	ldr	r3, [pc, #616]	; (800815c <_dtoa_r+0x378>)
 8007ef2:	f7f9 fbbf 	bl	8001674 <__aeabi_dmul>
 8007ef6:	4a9a      	ldr	r2, [pc, #616]	; (8008160 <_dtoa_r+0x37c>)
 8007ef8:	4b9a      	ldr	r3, [pc, #616]	; (8008164 <_dtoa_r+0x380>)
 8007efa:	f7f8 fc7d 	bl	80007f8 <__aeabi_dadd>
 8007efe:	0004      	movs	r4, r0
 8007f00:	0030      	movs	r0, r6
 8007f02:	000d      	movs	r5, r1
 8007f04:	f7fa fa08 	bl	8002318 <__aeabi_i2d>
 8007f08:	4a97      	ldr	r2, [pc, #604]	; (8008168 <_dtoa_r+0x384>)
 8007f0a:	4b98      	ldr	r3, [pc, #608]	; (800816c <_dtoa_r+0x388>)
 8007f0c:	f7f9 fbb2 	bl	8001674 <__aeabi_dmul>
 8007f10:	0002      	movs	r2, r0
 8007f12:	000b      	movs	r3, r1
 8007f14:	0020      	movs	r0, r4
 8007f16:	0029      	movs	r1, r5
 8007f18:	f7f8 fc6e 	bl	80007f8 <__aeabi_dadd>
 8007f1c:	0004      	movs	r4, r0
 8007f1e:	000d      	movs	r5, r1
 8007f20:	f7fa f9c4 	bl	80022ac <__aeabi_d2iz>
 8007f24:	2200      	movs	r2, #0
 8007f26:	9002      	str	r0, [sp, #8]
 8007f28:	2300      	movs	r3, #0
 8007f2a:	0020      	movs	r0, r4
 8007f2c:	0029      	movs	r1, r5
 8007f2e:	f7f8 fa93 	bl	8000458 <__aeabi_dcmplt>
 8007f32:	2800      	cmp	r0, #0
 8007f34:	d00b      	beq.n	8007f4e <_dtoa_r+0x16a>
 8007f36:	9802      	ldr	r0, [sp, #8]
 8007f38:	f7fa f9ee 	bl	8002318 <__aeabi_i2d>
 8007f3c:	002b      	movs	r3, r5
 8007f3e:	0022      	movs	r2, r4
 8007f40:	f7f8 fa84 	bl	800044c <__aeabi_dcmpeq>
 8007f44:	4243      	negs	r3, r0
 8007f46:	4158      	adcs	r0, r3
 8007f48:	9b02      	ldr	r3, [sp, #8]
 8007f4a:	1a1b      	subs	r3, r3, r0
 8007f4c:	9302      	str	r3, [sp, #8]
 8007f4e:	2301      	movs	r3, #1
 8007f50:	9316      	str	r3, [sp, #88]	; 0x58
 8007f52:	9b02      	ldr	r3, [sp, #8]
 8007f54:	2b16      	cmp	r3, #22
 8007f56:	d80f      	bhi.n	8007f78 <_dtoa_r+0x194>
 8007f58:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007f5a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007f5c:	00da      	lsls	r2, r3, #3
 8007f5e:	4b84      	ldr	r3, [pc, #528]	; (8008170 <_dtoa_r+0x38c>)
 8007f60:	189b      	adds	r3, r3, r2
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	f7f8 fa77 	bl	8000458 <__aeabi_dcmplt>
 8007f6a:	2800      	cmp	r0, #0
 8007f6c:	d049      	beq.n	8008002 <_dtoa_r+0x21e>
 8007f6e:	9b02      	ldr	r3, [sp, #8]
 8007f70:	3b01      	subs	r3, #1
 8007f72:	9302      	str	r3, [sp, #8]
 8007f74:	2300      	movs	r3, #0
 8007f76:	9316      	str	r3, [sp, #88]	; 0x58
 8007f78:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007f7a:	1b9e      	subs	r6, r3, r6
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	930a      	str	r3, [sp, #40]	; 0x28
 8007f80:	0033      	movs	r3, r6
 8007f82:	3b01      	subs	r3, #1
 8007f84:	930d      	str	r3, [sp, #52]	; 0x34
 8007f86:	d504      	bpl.n	8007f92 <_dtoa_r+0x1ae>
 8007f88:	2301      	movs	r3, #1
 8007f8a:	1b9b      	subs	r3, r3, r6
 8007f8c:	930a      	str	r3, [sp, #40]	; 0x28
 8007f8e:	2300      	movs	r3, #0
 8007f90:	930d      	str	r3, [sp, #52]	; 0x34
 8007f92:	9b02      	ldr	r3, [sp, #8]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	db36      	blt.n	8008006 <_dtoa_r+0x222>
 8007f98:	9a02      	ldr	r2, [sp, #8]
 8007f9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f9c:	4694      	mov	ip, r2
 8007f9e:	4463      	add	r3, ip
 8007fa0:	930d      	str	r3, [sp, #52]	; 0x34
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	9215      	str	r2, [sp, #84]	; 0x54
 8007fa6:	930e      	str	r3, [sp, #56]	; 0x38
 8007fa8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007faa:	2401      	movs	r4, #1
 8007fac:	2b09      	cmp	r3, #9
 8007fae:	d864      	bhi.n	800807a <_dtoa_r+0x296>
 8007fb0:	2b05      	cmp	r3, #5
 8007fb2:	dd02      	ble.n	8007fba <_dtoa_r+0x1d6>
 8007fb4:	2400      	movs	r4, #0
 8007fb6:	3b04      	subs	r3, #4
 8007fb8:	9322      	str	r3, [sp, #136]	; 0x88
 8007fba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007fbc:	1e98      	subs	r0, r3, #2
 8007fbe:	2803      	cmp	r0, #3
 8007fc0:	d864      	bhi.n	800808c <_dtoa_r+0x2a8>
 8007fc2:	f7f8 f8a9 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007fc6:	3829      	.short	0x3829
 8007fc8:	5836      	.short	0x5836
 8007fca:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007fcc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007fce:	189e      	adds	r6, r3, r2
 8007fd0:	4b68      	ldr	r3, [pc, #416]	; (8008174 <_dtoa_r+0x390>)
 8007fd2:	18f2      	adds	r2, r6, r3
 8007fd4:	2a20      	cmp	r2, #32
 8007fd6:	dd0f      	ble.n	8007ff8 <_dtoa_r+0x214>
 8007fd8:	2340      	movs	r3, #64	; 0x40
 8007fda:	1a9b      	subs	r3, r3, r2
 8007fdc:	409d      	lsls	r5, r3
 8007fde:	4b66      	ldr	r3, [pc, #408]	; (8008178 <_dtoa_r+0x394>)
 8007fe0:	9802      	ldr	r0, [sp, #8]
 8007fe2:	18f3      	adds	r3, r6, r3
 8007fe4:	40d8      	lsrs	r0, r3
 8007fe6:	4328      	orrs	r0, r5
 8007fe8:	f7fa f9c6 	bl	8002378 <__aeabi_ui2d>
 8007fec:	2301      	movs	r3, #1
 8007fee:	4c63      	ldr	r4, [pc, #396]	; (800817c <_dtoa_r+0x398>)
 8007ff0:	3e01      	subs	r6, #1
 8007ff2:	1909      	adds	r1, r1, r4
 8007ff4:	9318      	str	r3, [sp, #96]	; 0x60
 8007ff6:	e776      	b.n	8007ee6 <_dtoa_r+0x102>
 8007ff8:	2320      	movs	r3, #32
 8007ffa:	9802      	ldr	r0, [sp, #8]
 8007ffc:	1a9b      	subs	r3, r3, r2
 8007ffe:	4098      	lsls	r0, r3
 8008000:	e7f2      	b.n	8007fe8 <_dtoa_r+0x204>
 8008002:	9016      	str	r0, [sp, #88]	; 0x58
 8008004:	e7b8      	b.n	8007f78 <_dtoa_r+0x194>
 8008006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008008:	9a02      	ldr	r2, [sp, #8]
 800800a:	1a9b      	subs	r3, r3, r2
 800800c:	930a      	str	r3, [sp, #40]	; 0x28
 800800e:	4253      	negs	r3, r2
 8008010:	930e      	str	r3, [sp, #56]	; 0x38
 8008012:	2300      	movs	r3, #0
 8008014:	9315      	str	r3, [sp, #84]	; 0x54
 8008016:	e7c7      	b.n	8007fa8 <_dtoa_r+0x1c4>
 8008018:	2300      	movs	r3, #0
 800801a:	930f      	str	r3, [sp, #60]	; 0x3c
 800801c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800801e:	930c      	str	r3, [sp, #48]	; 0x30
 8008020:	9307      	str	r3, [sp, #28]
 8008022:	2b00      	cmp	r3, #0
 8008024:	dc13      	bgt.n	800804e <_dtoa_r+0x26a>
 8008026:	2301      	movs	r3, #1
 8008028:	001a      	movs	r2, r3
 800802a:	930c      	str	r3, [sp, #48]	; 0x30
 800802c:	9307      	str	r3, [sp, #28]
 800802e:	9223      	str	r2, [sp, #140]	; 0x8c
 8008030:	e00d      	b.n	800804e <_dtoa_r+0x26a>
 8008032:	2301      	movs	r3, #1
 8008034:	e7f1      	b.n	800801a <_dtoa_r+0x236>
 8008036:	2300      	movs	r3, #0
 8008038:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800803a:	930f      	str	r3, [sp, #60]	; 0x3c
 800803c:	4694      	mov	ip, r2
 800803e:	9b02      	ldr	r3, [sp, #8]
 8008040:	4463      	add	r3, ip
 8008042:	930c      	str	r3, [sp, #48]	; 0x30
 8008044:	3301      	adds	r3, #1
 8008046:	9307      	str	r3, [sp, #28]
 8008048:	2b00      	cmp	r3, #0
 800804a:	dc00      	bgt.n	800804e <_dtoa_r+0x26a>
 800804c:	2301      	movs	r3, #1
 800804e:	2200      	movs	r2, #0
 8008050:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008052:	6042      	str	r2, [r0, #4]
 8008054:	3204      	adds	r2, #4
 8008056:	0015      	movs	r5, r2
 8008058:	3514      	adds	r5, #20
 800805a:	6841      	ldr	r1, [r0, #4]
 800805c:	429d      	cmp	r5, r3
 800805e:	d919      	bls.n	8008094 <_dtoa_r+0x2b0>
 8008060:	0038      	movs	r0, r7
 8008062:	f001 f881 	bl	8009168 <_Balloc>
 8008066:	9006      	str	r0, [sp, #24]
 8008068:	2800      	cmp	r0, #0
 800806a:	d117      	bne.n	800809c <_dtoa_r+0x2b8>
 800806c:	21d5      	movs	r1, #213	; 0xd5
 800806e:	0002      	movs	r2, r0
 8008070:	4b43      	ldr	r3, [pc, #268]	; (8008180 <_dtoa_r+0x39c>)
 8008072:	0049      	lsls	r1, r1, #1
 8008074:	e6cb      	b.n	8007e0e <_dtoa_r+0x2a>
 8008076:	2301      	movs	r3, #1
 8008078:	e7de      	b.n	8008038 <_dtoa_r+0x254>
 800807a:	2300      	movs	r3, #0
 800807c:	940f      	str	r4, [sp, #60]	; 0x3c
 800807e:	9322      	str	r3, [sp, #136]	; 0x88
 8008080:	3b01      	subs	r3, #1
 8008082:	930c      	str	r3, [sp, #48]	; 0x30
 8008084:	9307      	str	r3, [sp, #28]
 8008086:	2200      	movs	r2, #0
 8008088:	3313      	adds	r3, #19
 800808a:	e7d0      	b.n	800802e <_dtoa_r+0x24a>
 800808c:	2301      	movs	r3, #1
 800808e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008090:	3b02      	subs	r3, #2
 8008092:	e7f6      	b.n	8008082 <_dtoa_r+0x29e>
 8008094:	3101      	adds	r1, #1
 8008096:	6041      	str	r1, [r0, #4]
 8008098:	0052      	lsls	r2, r2, #1
 800809a:	e7dc      	b.n	8008056 <_dtoa_r+0x272>
 800809c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809e:	9a06      	ldr	r2, [sp, #24]
 80080a0:	601a      	str	r2, [r3, #0]
 80080a2:	9b07      	ldr	r3, [sp, #28]
 80080a4:	2b0e      	cmp	r3, #14
 80080a6:	d900      	bls.n	80080aa <_dtoa_r+0x2c6>
 80080a8:	e0eb      	b.n	8008282 <_dtoa_r+0x49e>
 80080aa:	2c00      	cmp	r4, #0
 80080ac:	d100      	bne.n	80080b0 <_dtoa_r+0x2cc>
 80080ae:	e0e8      	b.n	8008282 <_dtoa_r+0x49e>
 80080b0:	9b02      	ldr	r3, [sp, #8]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	dd68      	ble.n	8008188 <_dtoa_r+0x3a4>
 80080b6:	001a      	movs	r2, r3
 80080b8:	210f      	movs	r1, #15
 80080ba:	4b2d      	ldr	r3, [pc, #180]	; (8008170 <_dtoa_r+0x38c>)
 80080bc:	400a      	ands	r2, r1
 80080be:	00d2      	lsls	r2, r2, #3
 80080c0:	189b      	adds	r3, r3, r2
 80080c2:	681d      	ldr	r5, [r3, #0]
 80080c4:	685e      	ldr	r6, [r3, #4]
 80080c6:	9b02      	ldr	r3, [sp, #8]
 80080c8:	111c      	asrs	r4, r3, #4
 80080ca:	2302      	movs	r3, #2
 80080cc:	9310      	str	r3, [sp, #64]	; 0x40
 80080ce:	9b02      	ldr	r3, [sp, #8]
 80080d0:	05db      	lsls	r3, r3, #23
 80080d2:	d50b      	bpl.n	80080ec <_dtoa_r+0x308>
 80080d4:	4b2b      	ldr	r3, [pc, #172]	; (8008184 <_dtoa_r+0x3a0>)
 80080d6:	400c      	ands	r4, r1
 80080d8:	6a1a      	ldr	r2, [r3, #32]
 80080da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080dc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80080de:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80080e0:	f7f8 fec6 	bl	8000e70 <__aeabi_ddiv>
 80080e4:	2303      	movs	r3, #3
 80080e6:	9008      	str	r0, [sp, #32]
 80080e8:	9109      	str	r1, [sp, #36]	; 0x24
 80080ea:	9310      	str	r3, [sp, #64]	; 0x40
 80080ec:	4b25      	ldr	r3, [pc, #148]	; (8008184 <_dtoa_r+0x3a0>)
 80080ee:	9314      	str	r3, [sp, #80]	; 0x50
 80080f0:	2c00      	cmp	r4, #0
 80080f2:	d108      	bne.n	8008106 <_dtoa_r+0x322>
 80080f4:	9808      	ldr	r0, [sp, #32]
 80080f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080f8:	002a      	movs	r2, r5
 80080fa:	0033      	movs	r3, r6
 80080fc:	f7f8 feb8 	bl	8000e70 <__aeabi_ddiv>
 8008100:	9008      	str	r0, [sp, #32]
 8008102:	9109      	str	r1, [sp, #36]	; 0x24
 8008104:	e05c      	b.n	80081c0 <_dtoa_r+0x3dc>
 8008106:	2301      	movs	r3, #1
 8008108:	421c      	tst	r4, r3
 800810a:	d00b      	beq.n	8008124 <_dtoa_r+0x340>
 800810c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800810e:	0028      	movs	r0, r5
 8008110:	3301      	adds	r3, #1
 8008112:	9310      	str	r3, [sp, #64]	; 0x40
 8008114:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008116:	0031      	movs	r1, r6
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	f7f9 faaa 	bl	8001674 <__aeabi_dmul>
 8008120:	0005      	movs	r5, r0
 8008122:	000e      	movs	r6, r1
 8008124:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008126:	1064      	asrs	r4, r4, #1
 8008128:	3308      	adds	r3, #8
 800812a:	e7e0      	b.n	80080ee <_dtoa_r+0x30a>
 800812c:	0800af26 	.word	0x0800af26
 8008130:	0800af3d 	.word	0x0800af3d
 8008134:	7ff00000 	.word	0x7ff00000
 8008138:	0000270f 	.word	0x0000270f
 800813c:	0800af22 	.word	0x0800af22
 8008140:	0800af25 	.word	0x0800af25
 8008144:	0800ad9c 	.word	0x0800ad9c
 8008148:	0800ad9d 	.word	0x0800ad9d
 800814c:	3ff00000 	.word	0x3ff00000
 8008150:	fffffc01 	.word	0xfffffc01
 8008154:	3ff80000 	.word	0x3ff80000
 8008158:	636f4361 	.word	0x636f4361
 800815c:	3fd287a7 	.word	0x3fd287a7
 8008160:	8b60c8b3 	.word	0x8b60c8b3
 8008164:	3fc68a28 	.word	0x3fc68a28
 8008168:	509f79fb 	.word	0x509f79fb
 800816c:	3fd34413 	.word	0x3fd34413
 8008170:	0800b0a8 	.word	0x0800b0a8
 8008174:	00000432 	.word	0x00000432
 8008178:	00000412 	.word	0x00000412
 800817c:	fe100000 	.word	0xfe100000
 8008180:	0800af98 	.word	0x0800af98
 8008184:	0800b080 	.word	0x0800b080
 8008188:	2302      	movs	r3, #2
 800818a:	9310      	str	r3, [sp, #64]	; 0x40
 800818c:	9b02      	ldr	r3, [sp, #8]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d016      	beq.n	80081c0 <_dtoa_r+0x3dc>
 8008192:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008194:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008196:	425c      	negs	r4, r3
 8008198:	230f      	movs	r3, #15
 800819a:	4ab6      	ldr	r2, [pc, #728]	; (8008474 <_dtoa_r+0x690>)
 800819c:	4023      	ands	r3, r4
 800819e:	00db      	lsls	r3, r3, #3
 80081a0:	18d3      	adds	r3, r2, r3
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	f7f9 fa65 	bl	8001674 <__aeabi_dmul>
 80081aa:	2601      	movs	r6, #1
 80081ac:	2300      	movs	r3, #0
 80081ae:	9008      	str	r0, [sp, #32]
 80081b0:	9109      	str	r1, [sp, #36]	; 0x24
 80081b2:	4db1      	ldr	r5, [pc, #708]	; (8008478 <_dtoa_r+0x694>)
 80081b4:	1124      	asrs	r4, r4, #4
 80081b6:	2c00      	cmp	r4, #0
 80081b8:	d000      	beq.n	80081bc <_dtoa_r+0x3d8>
 80081ba:	e094      	b.n	80082e6 <_dtoa_r+0x502>
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d19f      	bne.n	8008100 <_dtoa_r+0x31c>
 80081c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d100      	bne.n	80081c8 <_dtoa_r+0x3e4>
 80081c6:	e09b      	b.n	8008300 <_dtoa_r+0x51c>
 80081c8:	9c08      	ldr	r4, [sp, #32]
 80081ca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80081cc:	2200      	movs	r2, #0
 80081ce:	0020      	movs	r0, r4
 80081d0:	0029      	movs	r1, r5
 80081d2:	4baa      	ldr	r3, [pc, #680]	; (800847c <_dtoa_r+0x698>)
 80081d4:	f7f8 f940 	bl	8000458 <__aeabi_dcmplt>
 80081d8:	2800      	cmp	r0, #0
 80081da:	d100      	bne.n	80081de <_dtoa_r+0x3fa>
 80081dc:	e090      	b.n	8008300 <_dtoa_r+0x51c>
 80081de:	9b07      	ldr	r3, [sp, #28]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d100      	bne.n	80081e6 <_dtoa_r+0x402>
 80081e4:	e08c      	b.n	8008300 <_dtoa_r+0x51c>
 80081e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	dd46      	ble.n	800827a <_dtoa_r+0x496>
 80081ec:	9b02      	ldr	r3, [sp, #8]
 80081ee:	2200      	movs	r2, #0
 80081f0:	0020      	movs	r0, r4
 80081f2:	0029      	movs	r1, r5
 80081f4:	1e5e      	subs	r6, r3, #1
 80081f6:	4ba2      	ldr	r3, [pc, #648]	; (8008480 <_dtoa_r+0x69c>)
 80081f8:	f7f9 fa3c 	bl	8001674 <__aeabi_dmul>
 80081fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80081fe:	9008      	str	r0, [sp, #32]
 8008200:	9109      	str	r1, [sp, #36]	; 0x24
 8008202:	3301      	adds	r3, #1
 8008204:	9310      	str	r3, [sp, #64]	; 0x40
 8008206:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008208:	9810      	ldr	r0, [sp, #64]	; 0x40
 800820a:	9c08      	ldr	r4, [sp, #32]
 800820c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800820e:	9314      	str	r3, [sp, #80]	; 0x50
 8008210:	f7fa f882 	bl	8002318 <__aeabi_i2d>
 8008214:	0022      	movs	r2, r4
 8008216:	002b      	movs	r3, r5
 8008218:	f7f9 fa2c 	bl	8001674 <__aeabi_dmul>
 800821c:	2200      	movs	r2, #0
 800821e:	4b99      	ldr	r3, [pc, #612]	; (8008484 <_dtoa_r+0x6a0>)
 8008220:	f7f8 faea 	bl	80007f8 <__aeabi_dadd>
 8008224:	9010      	str	r0, [sp, #64]	; 0x40
 8008226:	9111      	str	r1, [sp, #68]	; 0x44
 8008228:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800822a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800822c:	9208      	str	r2, [sp, #32]
 800822e:	9309      	str	r3, [sp, #36]	; 0x24
 8008230:	4a95      	ldr	r2, [pc, #596]	; (8008488 <_dtoa_r+0x6a4>)
 8008232:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008234:	4694      	mov	ip, r2
 8008236:	4463      	add	r3, ip
 8008238:	9317      	str	r3, [sp, #92]	; 0x5c
 800823a:	9309      	str	r3, [sp, #36]	; 0x24
 800823c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800823e:	2b00      	cmp	r3, #0
 8008240:	d161      	bne.n	8008306 <_dtoa_r+0x522>
 8008242:	2200      	movs	r2, #0
 8008244:	0020      	movs	r0, r4
 8008246:	0029      	movs	r1, r5
 8008248:	4b90      	ldr	r3, [pc, #576]	; (800848c <_dtoa_r+0x6a8>)
 800824a:	f7f9 fc7f 	bl	8001b4c <__aeabi_dsub>
 800824e:	9a08      	ldr	r2, [sp, #32]
 8008250:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008252:	0004      	movs	r4, r0
 8008254:	000d      	movs	r5, r1
 8008256:	f7f8 f913 	bl	8000480 <__aeabi_dcmpgt>
 800825a:	2800      	cmp	r0, #0
 800825c:	d000      	beq.n	8008260 <_dtoa_r+0x47c>
 800825e:	e2af      	b.n	80087c0 <_dtoa_r+0x9dc>
 8008260:	488b      	ldr	r0, [pc, #556]	; (8008490 <_dtoa_r+0x6ac>)
 8008262:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008264:	4684      	mov	ip, r0
 8008266:	4461      	add	r1, ip
 8008268:	000b      	movs	r3, r1
 800826a:	0020      	movs	r0, r4
 800826c:	0029      	movs	r1, r5
 800826e:	9a08      	ldr	r2, [sp, #32]
 8008270:	f7f8 f8f2 	bl	8000458 <__aeabi_dcmplt>
 8008274:	2800      	cmp	r0, #0
 8008276:	d000      	beq.n	800827a <_dtoa_r+0x496>
 8008278:	e29f      	b.n	80087ba <_dtoa_r+0x9d6>
 800827a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800827c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800827e:	9308      	str	r3, [sp, #32]
 8008280:	9409      	str	r4, [sp, #36]	; 0x24
 8008282:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008284:	2b00      	cmp	r3, #0
 8008286:	da00      	bge.n	800828a <_dtoa_r+0x4a6>
 8008288:	e172      	b.n	8008570 <_dtoa_r+0x78c>
 800828a:	9a02      	ldr	r2, [sp, #8]
 800828c:	2a0e      	cmp	r2, #14
 800828e:	dd00      	ble.n	8008292 <_dtoa_r+0x4ae>
 8008290:	e16e      	b.n	8008570 <_dtoa_r+0x78c>
 8008292:	4b78      	ldr	r3, [pc, #480]	; (8008474 <_dtoa_r+0x690>)
 8008294:	00d2      	lsls	r2, r2, #3
 8008296:	189b      	adds	r3, r3, r2
 8008298:	685c      	ldr	r4, [r3, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	930a      	str	r3, [sp, #40]	; 0x28
 800829e:	940b      	str	r4, [sp, #44]	; 0x2c
 80082a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	db00      	blt.n	80082a8 <_dtoa_r+0x4c4>
 80082a6:	e0f7      	b.n	8008498 <_dtoa_r+0x6b4>
 80082a8:	9b07      	ldr	r3, [sp, #28]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	dd00      	ble.n	80082b0 <_dtoa_r+0x4cc>
 80082ae:	e0f3      	b.n	8008498 <_dtoa_r+0x6b4>
 80082b0:	d000      	beq.n	80082b4 <_dtoa_r+0x4d0>
 80082b2:	e282      	b.n	80087ba <_dtoa_r+0x9d6>
 80082b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80082b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082b8:	2200      	movs	r2, #0
 80082ba:	4b74      	ldr	r3, [pc, #464]	; (800848c <_dtoa_r+0x6a8>)
 80082bc:	f7f9 f9da 	bl	8001674 <__aeabi_dmul>
 80082c0:	9a08      	ldr	r2, [sp, #32]
 80082c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082c4:	f7f8 f8e6 	bl	8000494 <__aeabi_dcmpge>
 80082c8:	9e07      	ldr	r6, [sp, #28]
 80082ca:	0035      	movs	r5, r6
 80082cc:	2800      	cmp	r0, #0
 80082ce:	d000      	beq.n	80082d2 <_dtoa_r+0x4ee>
 80082d0:	e259      	b.n	8008786 <_dtoa_r+0x9a2>
 80082d2:	9b06      	ldr	r3, [sp, #24]
 80082d4:	9a06      	ldr	r2, [sp, #24]
 80082d6:	3301      	adds	r3, #1
 80082d8:	9308      	str	r3, [sp, #32]
 80082da:	2331      	movs	r3, #49	; 0x31
 80082dc:	7013      	strb	r3, [r2, #0]
 80082de:	9b02      	ldr	r3, [sp, #8]
 80082e0:	3301      	adds	r3, #1
 80082e2:	9302      	str	r3, [sp, #8]
 80082e4:	e254      	b.n	8008790 <_dtoa_r+0x9ac>
 80082e6:	4234      	tst	r4, r6
 80082e8:	d007      	beq.n	80082fa <_dtoa_r+0x516>
 80082ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082ec:	3301      	adds	r3, #1
 80082ee:	9310      	str	r3, [sp, #64]	; 0x40
 80082f0:	682a      	ldr	r2, [r5, #0]
 80082f2:	686b      	ldr	r3, [r5, #4]
 80082f4:	f7f9 f9be 	bl	8001674 <__aeabi_dmul>
 80082f8:	0033      	movs	r3, r6
 80082fa:	1064      	asrs	r4, r4, #1
 80082fc:	3508      	adds	r5, #8
 80082fe:	e75a      	b.n	80081b6 <_dtoa_r+0x3d2>
 8008300:	9e02      	ldr	r6, [sp, #8]
 8008302:	9b07      	ldr	r3, [sp, #28]
 8008304:	e780      	b.n	8008208 <_dtoa_r+0x424>
 8008306:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008308:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800830a:	1e5a      	subs	r2, r3, #1
 800830c:	4b59      	ldr	r3, [pc, #356]	; (8008474 <_dtoa_r+0x690>)
 800830e:	00d2      	lsls	r2, r2, #3
 8008310:	189b      	adds	r3, r3, r2
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	2900      	cmp	r1, #0
 8008318:	d051      	beq.n	80083be <_dtoa_r+0x5da>
 800831a:	2000      	movs	r0, #0
 800831c:	495d      	ldr	r1, [pc, #372]	; (8008494 <_dtoa_r+0x6b0>)
 800831e:	f7f8 fda7 	bl	8000e70 <__aeabi_ddiv>
 8008322:	9a08      	ldr	r2, [sp, #32]
 8008324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008326:	f7f9 fc11 	bl	8001b4c <__aeabi_dsub>
 800832a:	9a06      	ldr	r2, [sp, #24]
 800832c:	9b06      	ldr	r3, [sp, #24]
 800832e:	4694      	mov	ip, r2
 8008330:	9317      	str	r3, [sp, #92]	; 0x5c
 8008332:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008334:	9010      	str	r0, [sp, #64]	; 0x40
 8008336:	9111      	str	r1, [sp, #68]	; 0x44
 8008338:	4463      	add	r3, ip
 800833a:	9319      	str	r3, [sp, #100]	; 0x64
 800833c:	0029      	movs	r1, r5
 800833e:	0020      	movs	r0, r4
 8008340:	f7f9 ffb4 	bl	80022ac <__aeabi_d2iz>
 8008344:	9014      	str	r0, [sp, #80]	; 0x50
 8008346:	f7f9 ffe7 	bl	8002318 <__aeabi_i2d>
 800834a:	0002      	movs	r2, r0
 800834c:	000b      	movs	r3, r1
 800834e:	0020      	movs	r0, r4
 8008350:	0029      	movs	r1, r5
 8008352:	f7f9 fbfb 	bl	8001b4c <__aeabi_dsub>
 8008356:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008358:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800835a:	3301      	adds	r3, #1
 800835c:	9308      	str	r3, [sp, #32]
 800835e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008360:	0004      	movs	r4, r0
 8008362:	3330      	adds	r3, #48	; 0x30
 8008364:	7013      	strb	r3, [r2, #0]
 8008366:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008368:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800836a:	000d      	movs	r5, r1
 800836c:	f7f8 f874 	bl	8000458 <__aeabi_dcmplt>
 8008370:	2800      	cmp	r0, #0
 8008372:	d175      	bne.n	8008460 <_dtoa_r+0x67c>
 8008374:	0022      	movs	r2, r4
 8008376:	002b      	movs	r3, r5
 8008378:	2000      	movs	r0, #0
 800837a:	4940      	ldr	r1, [pc, #256]	; (800847c <_dtoa_r+0x698>)
 800837c:	f7f9 fbe6 	bl	8001b4c <__aeabi_dsub>
 8008380:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008382:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008384:	f7f8 f868 	bl	8000458 <__aeabi_dcmplt>
 8008388:	2800      	cmp	r0, #0
 800838a:	d000      	beq.n	800838e <_dtoa_r+0x5aa>
 800838c:	e0d2      	b.n	8008534 <_dtoa_r+0x750>
 800838e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008390:	9a08      	ldr	r2, [sp, #32]
 8008392:	4293      	cmp	r3, r2
 8008394:	d100      	bne.n	8008398 <_dtoa_r+0x5b4>
 8008396:	e770      	b.n	800827a <_dtoa_r+0x496>
 8008398:	9810      	ldr	r0, [sp, #64]	; 0x40
 800839a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800839c:	2200      	movs	r2, #0
 800839e:	4b38      	ldr	r3, [pc, #224]	; (8008480 <_dtoa_r+0x69c>)
 80083a0:	f7f9 f968 	bl	8001674 <__aeabi_dmul>
 80083a4:	4b36      	ldr	r3, [pc, #216]	; (8008480 <_dtoa_r+0x69c>)
 80083a6:	9010      	str	r0, [sp, #64]	; 0x40
 80083a8:	9111      	str	r1, [sp, #68]	; 0x44
 80083aa:	2200      	movs	r2, #0
 80083ac:	0020      	movs	r0, r4
 80083ae:	0029      	movs	r1, r5
 80083b0:	f7f9 f960 	bl	8001674 <__aeabi_dmul>
 80083b4:	9b08      	ldr	r3, [sp, #32]
 80083b6:	0004      	movs	r4, r0
 80083b8:	000d      	movs	r5, r1
 80083ba:	9317      	str	r3, [sp, #92]	; 0x5c
 80083bc:	e7be      	b.n	800833c <_dtoa_r+0x558>
 80083be:	9808      	ldr	r0, [sp, #32]
 80083c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083c2:	f7f9 f957 	bl	8001674 <__aeabi_dmul>
 80083c6:	9a06      	ldr	r2, [sp, #24]
 80083c8:	9b06      	ldr	r3, [sp, #24]
 80083ca:	4694      	mov	ip, r2
 80083cc:	9308      	str	r3, [sp, #32]
 80083ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80083d0:	9010      	str	r0, [sp, #64]	; 0x40
 80083d2:	9111      	str	r1, [sp, #68]	; 0x44
 80083d4:	4463      	add	r3, ip
 80083d6:	9319      	str	r3, [sp, #100]	; 0x64
 80083d8:	0029      	movs	r1, r5
 80083da:	0020      	movs	r0, r4
 80083dc:	f7f9 ff66 	bl	80022ac <__aeabi_d2iz>
 80083e0:	9017      	str	r0, [sp, #92]	; 0x5c
 80083e2:	f7f9 ff99 	bl	8002318 <__aeabi_i2d>
 80083e6:	0002      	movs	r2, r0
 80083e8:	000b      	movs	r3, r1
 80083ea:	0020      	movs	r0, r4
 80083ec:	0029      	movs	r1, r5
 80083ee:	f7f9 fbad 	bl	8001b4c <__aeabi_dsub>
 80083f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80083f4:	9a08      	ldr	r2, [sp, #32]
 80083f6:	3330      	adds	r3, #48	; 0x30
 80083f8:	7013      	strb	r3, [r2, #0]
 80083fa:	0013      	movs	r3, r2
 80083fc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80083fe:	3301      	adds	r3, #1
 8008400:	0004      	movs	r4, r0
 8008402:	000d      	movs	r5, r1
 8008404:	9308      	str	r3, [sp, #32]
 8008406:	4293      	cmp	r3, r2
 8008408:	d12c      	bne.n	8008464 <_dtoa_r+0x680>
 800840a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800840c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800840e:	9a06      	ldr	r2, [sp, #24]
 8008410:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008412:	4694      	mov	ip, r2
 8008414:	4463      	add	r3, ip
 8008416:	2200      	movs	r2, #0
 8008418:	9308      	str	r3, [sp, #32]
 800841a:	4b1e      	ldr	r3, [pc, #120]	; (8008494 <_dtoa_r+0x6b0>)
 800841c:	f7f8 f9ec 	bl	80007f8 <__aeabi_dadd>
 8008420:	0002      	movs	r2, r0
 8008422:	000b      	movs	r3, r1
 8008424:	0020      	movs	r0, r4
 8008426:	0029      	movs	r1, r5
 8008428:	f7f8 f82a 	bl	8000480 <__aeabi_dcmpgt>
 800842c:	2800      	cmp	r0, #0
 800842e:	d000      	beq.n	8008432 <_dtoa_r+0x64e>
 8008430:	e080      	b.n	8008534 <_dtoa_r+0x750>
 8008432:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008434:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008436:	2000      	movs	r0, #0
 8008438:	4916      	ldr	r1, [pc, #88]	; (8008494 <_dtoa_r+0x6b0>)
 800843a:	f7f9 fb87 	bl	8001b4c <__aeabi_dsub>
 800843e:	0002      	movs	r2, r0
 8008440:	000b      	movs	r3, r1
 8008442:	0020      	movs	r0, r4
 8008444:	0029      	movs	r1, r5
 8008446:	f7f8 f807 	bl	8000458 <__aeabi_dcmplt>
 800844a:	2800      	cmp	r0, #0
 800844c:	d100      	bne.n	8008450 <_dtoa_r+0x66c>
 800844e:	e714      	b.n	800827a <_dtoa_r+0x496>
 8008450:	9b08      	ldr	r3, [sp, #32]
 8008452:	001a      	movs	r2, r3
 8008454:	3a01      	subs	r2, #1
 8008456:	9208      	str	r2, [sp, #32]
 8008458:	7812      	ldrb	r2, [r2, #0]
 800845a:	2a30      	cmp	r2, #48	; 0x30
 800845c:	d0f8      	beq.n	8008450 <_dtoa_r+0x66c>
 800845e:	9308      	str	r3, [sp, #32]
 8008460:	9602      	str	r6, [sp, #8]
 8008462:	e055      	b.n	8008510 <_dtoa_r+0x72c>
 8008464:	2200      	movs	r2, #0
 8008466:	4b06      	ldr	r3, [pc, #24]	; (8008480 <_dtoa_r+0x69c>)
 8008468:	f7f9 f904 	bl	8001674 <__aeabi_dmul>
 800846c:	0004      	movs	r4, r0
 800846e:	000d      	movs	r5, r1
 8008470:	e7b2      	b.n	80083d8 <_dtoa_r+0x5f4>
 8008472:	46c0      	nop			; (mov r8, r8)
 8008474:	0800b0a8 	.word	0x0800b0a8
 8008478:	0800b080 	.word	0x0800b080
 800847c:	3ff00000 	.word	0x3ff00000
 8008480:	40240000 	.word	0x40240000
 8008484:	401c0000 	.word	0x401c0000
 8008488:	fcc00000 	.word	0xfcc00000
 800848c:	40140000 	.word	0x40140000
 8008490:	7cc00000 	.word	0x7cc00000
 8008494:	3fe00000 	.word	0x3fe00000
 8008498:	9b07      	ldr	r3, [sp, #28]
 800849a:	9e06      	ldr	r6, [sp, #24]
 800849c:	3b01      	subs	r3, #1
 800849e:	199b      	adds	r3, r3, r6
 80084a0:	930c      	str	r3, [sp, #48]	; 0x30
 80084a2:	9c08      	ldr	r4, [sp, #32]
 80084a4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80084a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084aa:	0020      	movs	r0, r4
 80084ac:	0029      	movs	r1, r5
 80084ae:	f7f8 fcdf 	bl	8000e70 <__aeabi_ddiv>
 80084b2:	f7f9 fefb 	bl	80022ac <__aeabi_d2iz>
 80084b6:	9007      	str	r0, [sp, #28]
 80084b8:	f7f9 ff2e 	bl	8002318 <__aeabi_i2d>
 80084bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084c0:	f7f9 f8d8 	bl	8001674 <__aeabi_dmul>
 80084c4:	0002      	movs	r2, r0
 80084c6:	000b      	movs	r3, r1
 80084c8:	0020      	movs	r0, r4
 80084ca:	0029      	movs	r1, r5
 80084cc:	f7f9 fb3e 	bl	8001b4c <__aeabi_dsub>
 80084d0:	0033      	movs	r3, r6
 80084d2:	9a07      	ldr	r2, [sp, #28]
 80084d4:	3601      	adds	r6, #1
 80084d6:	3230      	adds	r2, #48	; 0x30
 80084d8:	701a      	strb	r2, [r3, #0]
 80084da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084dc:	9608      	str	r6, [sp, #32]
 80084de:	429a      	cmp	r2, r3
 80084e0:	d139      	bne.n	8008556 <_dtoa_r+0x772>
 80084e2:	0002      	movs	r2, r0
 80084e4:	000b      	movs	r3, r1
 80084e6:	f7f8 f987 	bl	80007f8 <__aeabi_dadd>
 80084ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084ee:	0004      	movs	r4, r0
 80084f0:	000d      	movs	r5, r1
 80084f2:	f7f7 ffc5 	bl	8000480 <__aeabi_dcmpgt>
 80084f6:	2800      	cmp	r0, #0
 80084f8:	d11b      	bne.n	8008532 <_dtoa_r+0x74e>
 80084fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084fe:	0020      	movs	r0, r4
 8008500:	0029      	movs	r1, r5
 8008502:	f7f7 ffa3 	bl	800044c <__aeabi_dcmpeq>
 8008506:	2800      	cmp	r0, #0
 8008508:	d002      	beq.n	8008510 <_dtoa_r+0x72c>
 800850a:	9b07      	ldr	r3, [sp, #28]
 800850c:	07db      	lsls	r3, r3, #31
 800850e:	d410      	bmi.n	8008532 <_dtoa_r+0x74e>
 8008510:	0038      	movs	r0, r7
 8008512:	9905      	ldr	r1, [sp, #20]
 8008514:	f000 fe6c 	bl	80091f0 <_Bfree>
 8008518:	2300      	movs	r3, #0
 800851a:	9a08      	ldr	r2, [sp, #32]
 800851c:	9802      	ldr	r0, [sp, #8]
 800851e:	7013      	strb	r3, [r2, #0]
 8008520:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008522:	3001      	adds	r0, #1
 8008524:	6018      	str	r0, [r3, #0]
 8008526:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008528:	2b00      	cmp	r3, #0
 800852a:	d100      	bne.n	800852e <_dtoa_r+0x74a>
 800852c:	e4a6      	b.n	8007e7c <_dtoa_r+0x98>
 800852e:	601a      	str	r2, [r3, #0]
 8008530:	e4a4      	b.n	8007e7c <_dtoa_r+0x98>
 8008532:	9e02      	ldr	r6, [sp, #8]
 8008534:	9b08      	ldr	r3, [sp, #32]
 8008536:	9308      	str	r3, [sp, #32]
 8008538:	3b01      	subs	r3, #1
 800853a:	781a      	ldrb	r2, [r3, #0]
 800853c:	2a39      	cmp	r2, #57	; 0x39
 800853e:	d106      	bne.n	800854e <_dtoa_r+0x76a>
 8008540:	9a06      	ldr	r2, [sp, #24]
 8008542:	429a      	cmp	r2, r3
 8008544:	d1f7      	bne.n	8008536 <_dtoa_r+0x752>
 8008546:	2230      	movs	r2, #48	; 0x30
 8008548:	9906      	ldr	r1, [sp, #24]
 800854a:	3601      	adds	r6, #1
 800854c:	700a      	strb	r2, [r1, #0]
 800854e:	781a      	ldrb	r2, [r3, #0]
 8008550:	3201      	adds	r2, #1
 8008552:	701a      	strb	r2, [r3, #0]
 8008554:	e784      	b.n	8008460 <_dtoa_r+0x67c>
 8008556:	2200      	movs	r2, #0
 8008558:	4baa      	ldr	r3, [pc, #680]	; (8008804 <_dtoa_r+0xa20>)
 800855a:	f7f9 f88b 	bl	8001674 <__aeabi_dmul>
 800855e:	2200      	movs	r2, #0
 8008560:	2300      	movs	r3, #0
 8008562:	0004      	movs	r4, r0
 8008564:	000d      	movs	r5, r1
 8008566:	f7f7 ff71 	bl	800044c <__aeabi_dcmpeq>
 800856a:	2800      	cmp	r0, #0
 800856c:	d09b      	beq.n	80084a6 <_dtoa_r+0x6c2>
 800856e:	e7cf      	b.n	8008510 <_dtoa_r+0x72c>
 8008570:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008572:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008574:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008576:	2d00      	cmp	r5, #0
 8008578:	d012      	beq.n	80085a0 <_dtoa_r+0x7bc>
 800857a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800857c:	2a01      	cmp	r2, #1
 800857e:	dc66      	bgt.n	800864e <_dtoa_r+0x86a>
 8008580:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008582:	2a00      	cmp	r2, #0
 8008584:	d05d      	beq.n	8008642 <_dtoa_r+0x85e>
 8008586:	4aa0      	ldr	r2, [pc, #640]	; (8008808 <_dtoa_r+0xa24>)
 8008588:	189b      	adds	r3, r3, r2
 800858a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800858c:	2101      	movs	r1, #1
 800858e:	18d2      	adds	r2, r2, r3
 8008590:	920a      	str	r2, [sp, #40]	; 0x28
 8008592:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008594:	0038      	movs	r0, r7
 8008596:	18d3      	adds	r3, r2, r3
 8008598:	930d      	str	r3, [sp, #52]	; 0x34
 800859a:	f000 ff25 	bl	80093e8 <__i2b>
 800859e:	0005      	movs	r5, r0
 80085a0:	2c00      	cmp	r4, #0
 80085a2:	dd0e      	ble.n	80085c2 <_dtoa_r+0x7de>
 80085a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	dd0b      	ble.n	80085c2 <_dtoa_r+0x7de>
 80085aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80085ac:	0023      	movs	r3, r4
 80085ae:	4294      	cmp	r4, r2
 80085b0:	dd00      	ble.n	80085b4 <_dtoa_r+0x7d0>
 80085b2:	0013      	movs	r3, r2
 80085b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085b6:	1ae4      	subs	r4, r4, r3
 80085b8:	1ad2      	subs	r2, r2, r3
 80085ba:	920a      	str	r2, [sp, #40]	; 0x28
 80085bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	930d      	str	r3, [sp, #52]	; 0x34
 80085c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d01f      	beq.n	8008608 <_dtoa_r+0x824>
 80085c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d054      	beq.n	8008678 <_dtoa_r+0x894>
 80085ce:	2e00      	cmp	r6, #0
 80085d0:	dd11      	ble.n	80085f6 <_dtoa_r+0x812>
 80085d2:	0029      	movs	r1, r5
 80085d4:	0032      	movs	r2, r6
 80085d6:	0038      	movs	r0, r7
 80085d8:	f000 ffcc 	bl	8009574 <__pow5mult>
 80085dc:	9a05      	ldr	r2, [sp, #20]
 80085de:	0001      	movs	r1, r0
 80085e0:	0005      	movs	r5, r0
 80085e2:	0038      	movs	r0, r7
 80085e4:	f000 ff16 	bl	8009414 <__multiply>
 80085e8:	9905      	ldr	r1, [sp, #20]
 80085ea:	9014      	str	r0, [sp, #80]	; 0x50
 80085ec:	0038      	movs	r0, r7
 80085ee:	f000 fdff 	bl	80091f0 <_Bfree>
 80085f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80085f4:	9305      	str	r3, [sp, #20]
 80085f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085f8:	1b9a      	subs	r2, r3, r6
 80085fa:	42b3      	cmp	r3, r6
 80085fc:	d004      	beq.n	8008608 <_dtoa_r+0x824>
 80085fe:	0038      	movs	r0, r7
 8008600:	9905      	ldr	r1, [sp, #20]
 8008602:	f000 ffb7 	bl	8009574 <__pow5mult>
 8008606:	9005      	str	r0, [sp, #20]
 8008608:	2101      	movs	r1, #1
 800860a:	0038      	movs	r0, r7
 800860c:	f000 feec 	bl	80093e8 <__i2b>
 8008610:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008612:	0006      	movs	r6, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	dd31      	ble.n	800867c <_dtoa_r+0x898>
 8008618:	001a      	movs	r2, r3
 800861a:	0001      	movs	r1, r0
 800861c:	0038      	movs	r0, r7
 800861e:	f000 ffa9 	bl	8009574 <__pow5mult>
 8008622:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008624:	0006      	movs	r6, r0
 8008626:	2b01      	cmp	r3, #1
 8008628:	dd2d      	ble.n	8008686 <_dtoa_r+0x8a2>
 800862a:	2300      	movs	r3, #0
 800862c:	930e      	str	r3, [sp, #56]	; 0x38
 800862e:	6933      	ldr	r3, [r6, #16]
 8008630:	3303      	adds	r3, #3
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	18f3      	adds	r3, r6, r3
 8008636:	6858      	ldr	r0, [r3, #4]
 8008638:	f000 fe8e 	bl	8009358 <__hi0bits>
 800863c:	2320      	movs	r3, #32
 800863e:	1a18      	subs	r0, r3, r0
 8008640:	e039      	b.n	80086b6 <_dtoa_r+0x8d2>
 8008642:	2336      	movs	r3, #54	; 0x36
 8008644:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008646:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008648:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800864a:	1a9b      	subs	r3, r3, r2
 800864c:	e79d      	b.n	800858a <_dtoa_r+0x7a6>
 800864e:	9b07      	ldr	r3, [sp, #28]
 8008650:	1e5e      	subs	r6, r3, #1
 8008652:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008654:	42b3      	cmp	r3, r6
 8008656:	db07      	blt.n	8008668 <_dtoa_r+0x884>
 8008658:	1b9e      	subs	r6, r3, r6
 800865a:	9b07      	ldr	r3, [sp, #28]
 800865c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800865e:	2b00      	cmp	r3, #0
 8008660:	da93      	bge.n	800858a <_dtoa_r+0x7a6>
 8008662:	1ae4      	subs	r4, r4, r3
 8008664:	2300      	movs	r3, #0
 8008666:	e790      	b.n	800858a <_dtoa_r+0x7a6>
 8008668:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800866a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800866c:	1af3      	subs	r3, r6, r3
 800866e:	18d3      	adds	r3, r2, r3
 8008670:	960e      	str	r6, [sp, #56]	; 0x38
 8008672:	9315      	str	r3, [sp, #84]	; 0x54
 8008674:	2600      	movs	r6, #0
 8008676:	e7f0      	b.n	800865a <_dtoa_r+0x876>
 8008678:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800867a:	e7c0      	b.n	80085fe <_dtoa_r+0x81a>
 800867c:	2300      	movs	r3, #0
 800867e:	930e      	str	r3, [sp, #56]	; 0x38
 8008680:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008682:	2b01      	cmp	r3, #1
 8008684:	dc13      	bgt.n	80086ae <_dtoa_r+0x8ca>
 8008686:	2300      	movs	r3, #0
 8008688:	930e      	str	r3, [sp, #56]	; 0x38
 800868a:	9b08      	ldr	r3, [sp, #32]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d10e      	bne.n	80086ae <_dtoa_r+0x8ca>
 8008690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008692:	031b      	lsls	r3, r3, #12
 8008694:	d10b      	bne.n	80086ae <_dtoa_r+0x8ca>
 8008696:	4b5d      	ldr	r3, [pc, #372]	; (800880c <_dtoa_r+0xa28>)
 8008698:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800869a:	4213      	tst	r3, r2
 800869c:	d007      	beq.n	80086ae <_dtoa_r+0x8ca>
 800869e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086a0:	3301      	adds	r3, #1
 80086a2:	930a      	str	r3, [sp, #40]	; 0x28
 80086a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086a6:	3301      	adds	r3, #1
 80086a8:	930d      	str	r3, [sp, #52]	; 0x34
 80086aa:	2301      	movs	r3, #1
 80086ac:	930e      	str	r3, [sp, #56]	; 0x38
 80086ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086b0:	2001      	movs	r0, #1
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d1bb      	bne.n	800862e <_dtoa_r+0x84a>
 80086b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086b8:	221f      	movs	r2, #31
 80086ba:	1818      	adds	r0, r3, r0
 80086bc:	0003      	movs	r3, r0
 80086be:	4013      	ands	r3, r2
 80086c0:	4210      	tst	r0, r2
 80086c2:	d046      	beq.n	8008752 <_dtoa_r+0x96e>
 80086c4:	3201      	adds	r2, #1
 80086c6:	1ad2      	subs	r2, r2, r3
 80086c8:	2a04      	cmp	r2, #4
 80086ca:	dd3f      	ble.n	800874c <_dtoa_r+0x968>
 80086cc:	221c      	movs	r2, #28
 80086ce:	1ad3      	subs	r3, r2, r3
 80086d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086d2:	18e4      	adds	r4, r4, r3
 80086d4:	18d2      	adds	r2, r2, r3
 80086d6:	920a      	str	r2, [sp, #40]	; 0x28
 80086d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80086da:	18d3      	adds	r3, r2, r3
 80086dc:	930d      	str	r3, [sp, #52]	; 0x34
 80086de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	dd05      	ble.n	80086f0 <_dtoa_r+0x90c>
 80086e4:	001a      	movs	r2, r3
 80086e6:	0038      	movs	r0, r7
 80086e8:	9905      	ldr	r1, [sp, #20]
 80086ea:	f000 ff9f 	bl	800962c <__lshift>
 80086ee:	9005      	str	r0, [sp, #20]
 80086f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	dd05      	ble.n	8008702 <_dtoa_r+0x91e>
 80086f6:	0031      	movs	r1, r6
 80086f8:	001a      	movs	r2, r3
 80086fa:	0038      	movs	r0, r7
 80086fc:	f000 ff96 	bl	800962c <__lshift>
 8008700:	0006      	movs	r6, r0
 8008702:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008704:	2b00      	cmp	r3, #0
 8008706:	d026      	beq.n	8008756 <_dtoa_r+0x972>
 8008708:	0031      	movs	r1, r6
 800870a:	9805      	ldr	r0, [sp, #20]
 800870c:	f000 fffc 	bl	8009708 <__mcmp>
 8008710:	2800      	cmp	r0, #0
 8008712:	da20      	bge.n	8008756 <_dtoa_r+0x972>
 8008714:	9b02      	ldr	r3, [sp, #8]
 8008716:	220a      	movs	r2, #10
 8008718:	3b01      	subs	r3, #1
 800871a:	9302      	str	r3, [sp, #8]
 800871c:	0038      	movs	r0, r7
 800871e:	2300      	movs	r3, #0
 8008720:	9905      	ldr	r1, [sp, #20]
 8008722:	f000 fd89 	bl	8009238 <__multadd>
 8008726:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008728:	9005      	str	r0, [sp, #20]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d100      	bne.n	8008730 <_dtoa_r+0x94c>
 800872e:	e166      	b.n	80089fe <_dtoa_r+0xc1a>
 8008730:	2300      	movs	r3, #0
 8008732:	0029      	movs	r1, r5
 8008734:	220a      	movs	r2, #10
 8008736:	0038      	movs	r0, r7
 8008738:	f000 fd7e 	bl	8009238 <__multadd>
 800873c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800873e:	0005      	movs	r5, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	dc47      	bgt.n	80087d4 <_dtoa_r+0x9f0>
 8008744:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008746:	2b02      	cmp	r3, #2
 8008748:	dc0d      	bgt.n	8008766 <_dtoa_r+0x982>
 800874a:	e043      	b.n	80087d4 <_dtoa_r+0x9f0>
 800874c:	2a04      	cmp	r2, #4
 800874e:	d0c6      	beq.n	80086de <_dtoa_r+0x8fa>
 8008750:	0013      	movs	r3, r2
 8008752:	331c      	adds	r3, #28
 8008754:	e7bc      	b.n	80086d0 <_dtoa_r+0x8ec>
 8008756:	9b07      	ldr	r3, [sp, #28]
 8008758:	2b00      	cmp	r3, #0
 800875a:	dc35      	bgt.n	80087c8 <_dtoa_r+0x9e4>
 800875c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800875e:	2b02      	cmp	r3, #2
 8008760:	dd32      	ble.n	80087c8 <_dtoa_r+0x9e4>
 8008762:	9b07      	ldr	r3, [sp, #28]
 8008764:	930c      	str	r3, [sp, #48]	; 0x30
 8008766:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008768:	2b00      	cmp	r3, #0
 800876a:	d10c      	bne.n	8008786 <_dtoa_r+0x9a2>
 800876c:	0031      	movs	r1, r6
 800876e:	2205      	movs	r2, #5
 8008770:	0038      	movs	r0, r7
 8008772:	f000 fd61 	bl	8009238 <__multadd>
 8008776:	0006      	movs	r6, r0
 8008778:	0001      	movs	r1, r0
 800877a:	9805      	ldr	r0, [sp, #20]
 800877c:	f000 ffc4 	bl	8009708 <__mcmp>
 8008780:	2800      	cmp	r0, #0
 8008782:	dd00      	ble.n	8008786 <_dtoa_r+0x9a2>
 8008784:	e5a5      	b.n	80082d2 <_dtoa_r+0x4ee>
 8008786:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008788:	43db      	mvns	r3, r3
 800878a:	9302      	str	r3, [sp, #8]
 800878c:	9b06      	ldr	r3, [sp, #24]
 800878e:	9308      	str	r3, [sp, #32]
 8008790:	2400      	movs	r4, #0
 8008792:	0031      	movs	r1, r6
 8008794:	0038      	movs	r0, r7
 8008796:	f000 fd2b 	bl	80091f0 <_Bfree>
 800879a:	2d00      	cmp	r5, #0
 800879c:	d100      	bne.n	80087a0 <_dtoa_r+0x9bc>
 800879e:	e6b7      	b.n	8008510 <_dtoa_r+0x72c>
 80087a0:	2c00      	cmp	r4, #0
 80087a2:	d005      	beq.n	80087b0 <_dtoa_r+0x9cc>
 80087a4:	42ac      	cmp	r4, r5
 80087a6:	d003      	beq.n	80087b0 <_dtoa_r+0x9cc>
 80087a8:	0021      	movs	r1, r4
 80087aa:	0038      	movs	r0, r7
 80087ac:	f000 fd20 	bl	80091f0 <_Bfree>
 80087b0:	0029      	movs	r1, r5
 80087b2:	0038      	movs	r0, r7
 80087b4:	f000 fd1c 	bl	80091f0 <_Bfree>
 80087b8:	e6aa      	b.n	8008510 <_dtoa_r+0x72c>
 80087ba:	2600      	movs	r6, #0
 80087bc:	0035      	movs	r5, r6
 80087be:	e7e2      	b.n	8008786 <_dtoa_r+0x9a2>
 80087c0:	9602      	str	r6, [sp, #8]
 80087c2:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80087c4:	0035      	movs	r5, r6
 80087c6:	e584      	b.n	80082d2 <_dtoa_r+0x4ee>
 80087c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d100      	bne.n	80087d0 <_dtoa_r+0x9ec>
 80087ce:	e0ce      	b.n	800896e <_dtoa_r+0xb8a>
 80087d0:	9b07      	ldr	r3, [sp, #28]
 80087d2:	930c      	str	r3, [sp, #48]	; 0x30
 80087d4:	2c00      	cmp	r4, #0
 80087d6:	dd05      	ble.n	80087e4 <_dtoa_r+0xa00>
 80087d8:	0029      	movs	r1, r5
 80087da:	0022      	movs	r2, r4
 80087dc:	0038      	movs	r0, r7
 80087de:	f000 ff25 	bl	800962c <__lshift>
 80087e2:	0005      	movs	r5, r0
 80087e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087e6:	0028      	movs	r0, r5
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d022      	beq.n	8008832 <_dtoa_r+0xa4e>
 80087ec:	0038      	movs	r0, r7
 80087ee:	6869      	ldr	r1, [r5, #4]
 80087f0:	f000 fcba 	bl	8009168 <_Balloc>
 80087f4:	1e04      	subs	r4, r0, #0
 80087f6:	d10f      	bne.n	8008818 <_dtoa_r+0xa34>
 80087f8:	0002      	movs	r2, r0
 80087fa:	4b05      	ldr	r3, [pc, #20]	; (8008810 <_dtoa_r+0xa2c>)
 80087fc:	4905      	ldr	r1, [pc, #20]	; (8008814 <_dtoa_r+0xa30>)
 80087fe:	f7ff fb06 	bl	8007e0e <_dtoa_r+0x2a>
 8008802:	46c0      	nop			; (mov r8, r8)
 8008804:	40240000 	.word	0x40240000
 8008808:	00000433 	.word	0x00000433
 800880c:	7ff00000 	.word	0x7ff00000
 8008810:	0800af98 	.word	0x0800af98
 8008814:	000002ea 	.word	0x000002ea
 8008818:	0029      	movs	r1, r5
 800881a:	692b      	ldr	r3, [r5, #16]
 800881c:	310c      	adds	r1, #12
 800881e:	1c9a      	adds	r2, r3, #2
 8008820:	0092      	lsls	r2, r2, #2
 8008822:	300c      	adds	r0, #12
 8008824:	f000 fc97 	bl	8009156 <memcpy>
 8008828:	2201      	movs	r2, #1
 800882a:	0021      	movs	r1, r4
 800882c:	0038      	movs	r0, r7
 800882e:	f000 fefd 	bl	800962c <__lshift>
 8008832:	9b06      	ldr	r3, [sp, #24]
 8008834:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008836:	930a      	str	r3, [sp, #40]	; 0x28
 8008838:	3b01      	subs	r3, #1
 800883a:	189b      	adds	r3, r3, r2
 800883c:	2201      	movs	r2, #1
 800883e:	002c      	movs	r4, r5
 8008840:	0005      	movs	r5, r0
 8008842:	9314      	str	r3, [sp, #80]	; 0x50
 8008844:	9b08      	ldr	r3, [sp, #32]
 8008846:	4013      	ands	r3, r2
 8008848:	930f      	str	r3, [sp, #60]	; 0x3c
 800884a:	0031      	movs	r1, r6
 800884c:	9805      	ldr	r0, [sp, #20]
 800884e:	f7ff fa3d 	bl	8007ccc <quorem>
 8008852:	0003      	movs	r3, r0
 8008854:	0021      	movs	r1, r4
 8008856:	3330      	adds	r3, #48	; 0x30
 8008858:	900d      	str	r0, [sp, #52]	; 0x34
 800885a:	9805      	ldr	r0, [sp, #20]
 800885c:	9307      	str	r3, [sp, #28]
 800885e:	f000 ff53 	bl	8009708 <__mcmp>
 8008862:	002a      	movs	r2, r5
 8008864:	900e      	str	r0, [sp, #56]	; 0x38
 8008866:	0031      	movs	r1, r6
 8008868:	0038      	movs	r0, r7
 800886a:	f000 ff69 	bl	8009740 <__mdiff>
 800886e:	68c3      	ldr	r3, [r0, #12]
 8008870:	9008      	str	r0, [sp, #32]
 8008872:	9310      	str	r3, [sp, #64]	; 0x40
 8008874:	2301      	movs	r3, #1
 8008876:	930c      	str	r3, [sp, #48]	; 0x30
 8008878:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800887a:	2b00      	cmp	r3, #0
 800887c:	d104      	bne.n	8008888 <_dtoa_r+0xaa4>
 800887e:	0001      	movs	r1, r0
 8008880:	9805      	ldr	r0, [sp, #20]
 8008882:	f000 ff41 	bl	8009708 <__mcmp>
 8008886:	900c      	str	r0, [sp, #48]	; 0x30
 8008888:	0038      	movs	r0, r7
 800888a:	9908      	ldr	r1, [sp, #32]
 800888c:	f000 fcb0 	bl	80091f0 <_Bfree>
 8008890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008892:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008894:	3301      	adds	r3, #1
 8008896:	9308      	str	r3, [sp, #32]
 8008898:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800889a:	4313      	orrs	r3, r2
 800889c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800889e:	4313      	orrs	r3, r2
 80088a0:	d10c      	bne.n	80088bc <_dtoa_r+0xad8>
 80088a2:	9b07      	ldr	r3, [sp, #28]
 80088a4:	2b39      	cmp	r3, #57	; 0x39
 80088a6:	d026      	beq.n	80088f6 <_dtoa_r+0xb12>
 80088a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	dd02      	ble.n	80088b4 <_dtoa_r+0xad0>
 80088ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088b0:	3331      	adds	r3, #49	; 0x31
 80088b2:	9307      	str	r3, [sp, #28]
 80088b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088b6:	9a07      	ldr	r2, [sp, #28]
 80088b8:	701a      	strb	r2, [r3, #0]
 80088ba:	e76a      	b.n	8008792 <_dtoa_r+0x9ae>
 80088bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088be:	2b00      	cmp	r3, #0
 80088c0:	db04      	blt.n	80088cc <_dtoa_r+0xae8>
 80088c2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80088c4:	4313      	orrs	r3, r2
 80088c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80088c8:	4313      	orrs	r3, r2
 80088ca:	d11f      	bne.n	800890c <_dtoa_r+0xb28>
 80088cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	ddf0      	ble.n	80088b4 <_dtoa_r+0xad0>
 80088d2:	9905      	ldr	r1, [sp, #20]
 80088d4:	2201      	movs	r2, #1
 80088d6:	0038      	movs	r0, r7
 80088d8:	f000 fea8 	bl	800962c <__lshift>
 80088dc:	0031      	movs	r1, r6
 80088de:	9005      	str	r0, [sp, #20]
 80088e0:	f000 ff12 	bl	8009708 <__mcmp>
 80088e4:	2800      	cmp	r0, #0
 80088e6:	dc03      	bgt.n	80088f0 <_dtoa_r+0xb0c>
 80088e8:	d1e4      	bne.n	80088b4 <_dtoa_r+0xad0>
 80088ea:	9b07      	ldr	r3, [sp, #28]
 80088ec:	07db      	lsls	r3, r3, #31
 80088ee:	d5e1      	bpl.n	80088b4 <_dtoa_r+0xad0>
 80088f0:	9b07      	ldr	r3, [sp, #28]
 80088f2:	2b39      	cmp	r3, #57	; 0x39
 80088f4:	d1db      	bne.n	80088ae <_dtoa_r+0xaca>
 80088f6:	2339      	movs	r3, #57	; 0x39
 80088f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088fa:	7013      	strb	r3, [r2, #0]
 80088fc:	9b08      	ldr	r3, [sp, #32]
 80088fe:	9308      	str	r3, [sp, #32]
 8008900:	3b01      	subs	r3, #1
 8008902:	781a      	ldrb	r2, [r3, #0]
 8008904:	2a39      	cmp	r2, #57	; 0x39
 8008906:	d068      	beq.n	80089da <_dtoa_r+0xbf6>
 8008908:	3201      	adds	r2, #1
 800890a:	e7d5      	b.n	80088b8 <_dtoa_r+0xad4>
 800890c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800890e:	2b00      	cmp	r3, #0
 8008910:	dd07      	ble.n	8008922 <_dtoa_r+0xb3e>
 8008912:	9b07      	ldr	r3, [sp, #28]
 8008914:	2b39      	cmp	r3, #57	; 0x39
 8008916:	d0ee      	beq.n	80088f6 <_dtoa_r+0xb12>
 8008918:	9b07      	ldr	r3, [sp, #28]
 800891a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800891c:	3301      	adds	r3, #1
 800891e:	7013      	strb	r3, [r2, #0]
 8008920:	e737      	b.n	8008792 <_dtoa_r+0x9ae>
 8008922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008924:	9a07      	ldr	r2, [sp, #28]
 8008926:	701a      	strb	r2, [r3, #0]
 8008928:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800892a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800892c:	4293      	cmp	r3, r2
 800892e:	d03e      	beq.n	80089ae <_dtoa_r+0xbca>
 8008930:	2300      	movs	r3, #0
 8008932:	220a      	movs	r2, #10
 8008934:	9905      	ldr	r1, [sp, #20]
 8008936:	0038      	movs	r0, r7
 8008938:	f000 fc7e 	bl	8009238 <__multadd>
 800893c:	2300      	movs	r3, #0
 800893e:	9005      	str	r0, [sp, #20]
 8008940:	220a      	movs	r2, #10
 8008942:	0021      	movs	r1, r4
 8008944:	0038      	movs	r0, r7
 8008946:	42ac      	cmp	r4, r5
 8008948:	d106      	bne.n	8008958 <_dtoa_r+0xb74>
 800894a:	f000 fc75 	bl	8009238 <__multadd>
 800894e:	0004      	movs	r4, r0
 8008950:	0005      	movs	r5, r0
 8008952:	9b08      	ldr	r3, [sp, #32]
 8008954:	930a      	str	r3, [sp, #40]	; 0x28
 8008956:	e778      	b.n	800884a <_dtoa_r+0xa66>
 8008958:	f000 fc6e 	bl	8009238 <__multadd>
 800895c:	0029      	movs	r1, r5
 800895e:	0004      	movs	r4, r0
 8008960:	2300      	movs	r3, #0
 8008962:	220a      	movs	r2, #10
 8008964:	0038      	movs	r0, r7
 8008966:	f000 fc67 	bl	8009238 <__multadd>
 800896a:	0005      	movs	r5, r0
 800896c:	e7f1      	b.n	8008952 <_dtoa_r+0xb6e>
 800896e:	9b07      	ldr	r3, [sp, #28]
 8008970:	930c      	str	r3, [sp, #48]	; 0x30
 8008972:	2400      	movs	r4, #0
 8008974:	0031      	movs	r1, r6
 8008976:	9805      	ldr	r0, [sp, #20]
 8008978:	f7ff f9a8 	bl	8007ccc <quorem>
 800897c:	9b06      	ldr	r3, [sp, #24]
 800897e:	3030      	adds	r0, #48	; 0x30
 8008980:	5518      	strb	r0, [r3, r4]
 8008982:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008984:	3401      	adds	r4, #1
 8008986:	9007      	str	r0, [sp, #28]
 8008988:	42a3      	cmp	r3, r4
 800898a:	dd07      	ble.n	800899c <_dtoa_r+0xbb8>
 800898c:	2300      	movs	r3, #0
 800898e:	220a      	movs	r2, #10
 8008990:	0038      	movs	r0, r7
 8008992:	9905      	ldr	r1, [sp, #20]
 8008994:	f000 fc50 	bl	8009238 <__multadd>
 8008998:	9005      	str	r0, [sp, #20]
 800899a:	e7eb      	b.n	8008974 <_dtoa_r+0xb90>
 800899c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800899e:	2001      	movs	r0, #1
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	dd00      	ble.n	80089a6 <_dtoa_r+0xbc2>
 80089a4:	0018      	movs	r0, r3
 80089a6:	2400      	movs	r4, #0
 80089a8:	9b06      	ldr	r3, [sp, #24]
 80089aa:	181b      	adds	r3, r3, r0
 80089ac:	9308      	str	r3, [sp, #32]
 80089ae:	9905      	ldr	r1, [sp, #20]
 80089b0:	2201      	movs	r2, #1
 80089b2:	0038      	movs	r0, r7
 80089b4:	f000 fe3a 	bl	800962c <__lshift>
 80089b8:	0031      	movs	r1, r6
 80089ba:	9005      	str	r0, [sp, #20]
 80089bc:	f000 fea4 	bl	8009708 <__mcmp>
 80089c0:	2800      	cmp	r0, #0
 80089c2:	dc9b      	bgt.n	80088fc <_dtoa_r+0xb18>
 80089c4:	d102      	bne.n	80089cc <_dtoa_r+0xbe8>
 80089c6:	9b07      	ldr	r3, [sp, #28]
 80089c8:	07db      	lsls	r3, r3, #31
 80089ca:	d497      	bmi.n	80088fc <_dtoa_r+0xb18>
 80089cc:	9b08      	ldr	r3, [sp, #32]
 80089ce:	9308      	str	r3, [sp, #32]
 80089d0:	3b01      	subs	r3, #1
 80089d2:	781a      	ldrb	r2, [r3, #0]
 80089d4:	2a30      	cmp	r2, #48	; 0x30
 80089d6:	d0fa      	beq.n	80089ce <_dtoa_r+0xbea>
 80089d8:	e6db      	b.n	8008792 <_dtoa_r+0x9ae>
 80089da:	9a06      	ldr	r2, [sp, #24]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d18e      	bne.n	80088fe <_dtoa_r+0xb1a>
 80089e0:	9b02      	ldr	r3, [sp, #8]
 80089e2:	3301      	adds	r3, #1
 80089e4:	9302      	str	r3, [sp, #8]
 80089e6:	2331      	movs	r3, #49	; 0x31
 80089e8:	e799      	b.n	800891e <_dtoa_r+0xb3a>
 80089ea:	4b09      	ldr	r3, [pc, #36]	; (8008a10 <_dtoa_r+0xc2c>)
 80089ec:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80089ee:	9306      	str	r3, [sp, #24]
 80089f0:	4b08      	ldr	r3, [pc, #32]	; (8008a14 <_dtoa_r+0xc30>)
 80089f2:	2a00      	cmp	r2, #0
 80089f4:	d001      	beq.n	80089fa <_dtoa_r+0xc16>
 80089f6:	f7ff fa3f 	bl	8007e78 <_dtoa_r+0x94>
 80089fa:	f7ff fa3f 	bl	8007e7c <_dtoa_r+0x98>
 80089fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	dcb6      	bgt.n	8008972 <_dtoa_r+0xb8e>
 8008a04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	dd00      	ble.n	8008a0c <_dtoa_r+0xc28>
 8008a0a:	e6ac      	b.n	8008766 <_dtoa_r+0x982>
 8008a0c:	e7b1      	b.n	8008972 <_dtoa_r+0xb8e>
 8008a0e:	46c0      	nop			; (mov r8, r8)
 8008a10:	0800af19 	.word	0x0800af19
 8008a14:	0800af21 	.word	0x0800af21

08008a18 <rshift>:
 8008a18:	0002      	movs	r2, r0
 8008a1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a1c:	6904      	ldr	r4, [r0, #16]
 8008a1e:	3214      	adds	r2, #20
 8008a20:	0013      	movs	r3, r2
 8008a22:	b085      	sub	sp, #20
 8008a24:	114f      	asrs	r7, r1, #5
 8008a26:	42bc      	cmp	r4, r7
 8008a28:	dd31      	ble.n	8008a8e <rshift+0x76>
 8008a2a:	00bb      	lsls	r3, r7, #2
 8008a2c:	18d3      	adds	r3, r2, r3
 8008a2e:	261f      	movs	r6, #31
 8008a30:	9301      	str	r3, [sp, #4]
 8008a32:	000b      	movs	r3, r1
 8008a34:	00a5      	lsls	r5, r4, #2
 8008a36:	4033      	ands	r3, r6
 8008a38:	1955      	adds	r5, r2, r5
 8008a3a:	9302      	str	r3, [sp, #8]
 8008a3c:	4231      	tst	r1, r6
 8008a3e:	d10c      	bne.n	8008a5a <rshift+0x42>
 8008a40:	0016      	movs	r6, r2
 8008a42:	9901      	ldr	r1, [sp, #4]
 8008a44:	428d      	cmp	r5, r1
 8008a46:	d838      	bhi.n	8008aba <rshift+0xa2>
 8008a48:	9901      	ldr	r1, [sp, #4]
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	3903      	subs	r1, #3
 8008a4e:	428d      	cmp	r5, r1
 8008a50:	d301      	bcc.n	8008a56 <rshift+0x3e>
 8008a52:	1be3      	subs	r3, r4, r7
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	18d3      	adds	r3, r2, r3
 8008a58:	e019      	b.n	8008a8e <rshift+0x76>
 8008a5a:	2120      	movs	r1, #32
 8008a5c:	9b02      	ldr	r3, [sp, #8]
 8008a5e:	9e01      	ldr	r6, [sp, #4]
 8008a60:	1acb      	subs	r3, r1, r3
 8008a62:	9303      	str	r3, [sp, #12]
 8008a64:	ce02      	ldmia	r6!, {r1}
 8008a66:	9b02      	ldr	r3, [sp, #8]
 8008a68:	4694      	mov	ip, r2
 8008a6a:	40d9      	lsrs	r1, r3
 8008a6c:	9100      	str	r1, [sp, #0]
 8008a6e:	42b5      	cmp	r5, r6
 8008a70:	d816      	bhi.n	8008aa0 <rshift+0x88>
 8008a72:	9e01      	ldr	r6, [sp, #4]
 8008a74:	2300      	movs	r3, #0
 8008a76:	3601      	adds	r6, #1
 8008a78:	42b5      	cmp	r5, r6
 8008a7a:	d302      	bcc.n	8008a82 <rshift+0x6a>
 8008a7c:	1be3      	subs	r3, r4, r7
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	3b04      	subs	r3, #4
 8008a82:	9900      	ldr	r1, [sp, #0]
 8008a84:	18d3      	adds	r3, r2, r3
 8008a86:	6019      	str	r1, [r3, #0]
 8008a88:	2900      	cmp	r1, #0
 8008a8a:	d000      	beq.n	8008a8e <rshift+0x76>
 8008a8c:	3304      	adds	r3, #4
 8008a8e:	1a99      	subs	r1, r3, r2
 8008a90:	1089      	asrs	r1, r1, #2
 8008a92:	6101      	str	r1, [r0, #16]
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d101      	bne.n	8008a9c <rshift+0x84>
 8008a98:	2300      	movs	r3, #0
 8008a9a:	6143      	str	r3, [r0, #20]
 8008a9c:	b005      	add	sp, #20
 8008a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008aa0:	6833      	ldr	r3, [r6, #0]
 8008aa2:	9903      	ldr	r1, [sp, #12]
 8008aa4:	408b      	lsls	r3, r1
 8008aa6:	9900      	ldr	r1, [sp, #0]
 8008aa8:	4319      	orrs	r1, r3
 8008aaa:	4663      	mov	r3, ip
 8008aac:	c302      	stmia	r3!, {r1}
 8008aae:	469c      	mov	ip, r3
 8008ab0:	ce02      	ldmia	r6!, {r1}
 8008ab2:	9b02      	ldr	r3, [sp, #8]
 8008ab4:	40d9      	lsrs	r1, r3
 8008ab6:	9100      	str	r1, [sp, #0]
 8008ab8:	e7d9      	b.n	8008a6e <rshift+0x56>
 8008aba:	c908      	ldmia	r1!, {r3}
 8008abc:	c608      	stmia	r6!, {r3}
 8008abe:	e7c1      	b.n	8008a44 <rshift+0x2c>

08008ac0 <__hexdig_fun>:
 8008ac0:	0002      	movs	r2, r0
 8008ac2:	3a30      	subs	r2, #48	; 0x30
 8008ac4:	0003      	movs	r3, r0
 8008ac6:	2a09      	cmp	r2, #9
 8008ac8:	d802      	bhi.n	8008ad0 <__hexdig_fun+0x10>
 8008aca:	3b20      	subs	r3, #32
 8008acc:	b2d8      	uxtb	r0, r3
 8008ace:	4770      	bx	lr
 8008ad0:	0002      	movs	r2, r0
 8008ad2:	3a61      	subs	r2, #97	; 0x61
 8008ad4:	2a05      	cmp	r2, #5
 8008ad6:	d801      	bhi.n	8008adc <__hexdig_fun+0x1c>
 8008ad8:	3b47      	subs	r3, #71	; 0x47
 8008ada:	e7f7      	b.n	8008acc <__hexdig_fun+0xc>
 8008adc:	001a      	movs	r2, r3
 8008ade:	3a41      	subs	r2, #65	; 0x41
 8008ae0:	2000      	movs	r0, #0
 8008ae2:	2a05      	cmp	r2, #5
 8008ae4:	d8f3      	bhi.n	8008ace <__hexdig_fun+0xe>
 8008ae6:	3b27      	subs	r3, #39	; 0x27
 8008ae8:	e7f0      	b.n	8008acc <__hexdig_fun+0xc>
	...

08008aec <__gethex>:
 8008aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008aee:	b08d      	sub	sp, #52	; 0x34
 8008af0:	930a      	str	r3, [sp, #40]	; 0x28
 8008af2:	4bbf      	ldr	r3, [pc, #764]	; (8008df0 <__gethex+0x304>)
 8008af4:	9005      	str	r0, [sp, #20]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	9109      	str	r1, [sp, #36]	; 0x24
 8008afa:	0018      	movs	r0, r3
 8008afc:	9202      	str	r2, [sp, #8]
 8008afe:	9307      	str	r3, [sp, #28]
 8008b00:	f7f7 fb02 	bl	8000108 <strlen>
 8008b04:	2202      	movs	r2, #2
 8008b06:	9b07      	ldr	r3, [sp, #28]
 8008b08:	4252      	negs	r2, r2
 8008b0a:	181b      	adds	r3, r3, r0
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	9003      	str	r0, [sp, #12]
 8008b12:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b16:	6819      	ldr	r1, [r3, #0]
 8008b18:	1c8b      	adds	r3, r1, #2
 8008b1a:	1a52      	subs	r2, r2, r1
 8008b1c:	18d1      	adds	r1, r2, r3
 8008b1e:	9301      	str	r3, [sp, #4]
 8008b20:	9108      	str	r1, [sp, #32]
 8008b22:	9901      	ldr	r1, [sp, #4]
 8008b24:	3301      	adds	r3, #1
 8008b26:	7808      	ldrb	r0, [r1, #0]
 8008b28:	2830      	cmp	r0, #48	; 0x30
 8008b2a:	d0f7      	beq.n	8008b1c <__gethex+0x30>
 8008b2c:	f7ff ffc8 	bl	8008ac0 <__hexdig_fun>
 8008b30:	2300      	movs	r3, #0
 8008b32:	001c      	movs	r4, r3
 8008b34:	9304      	str	r3, [sp, #16]
 8008b36:	4298      	cmp	r0, r3
 8008b38:	d11f      	bne.n	8008b7a <__gethex+0x8e>
 8008b3a:	9a03      	ldr	r2, [sp, #12]
 8008b3c:	9907      	ldr	r1, [sp, #28]
 8008b3e:	9801      	ldr	r0, [sp, #4]
 8008b40:	f001 fa64 	bl	800a00c <strncmp>
 8008b44:	0007      	movs	r7, r0
 8008b46:	42a0      	cmp	r0, r4
 8008b48:	d000      	beq.n	8008b4c <__gethex+0x60>
 8008b4a:	e06b      	b.n	8008c24 <__gethex+0x138>
 8008b4c:	9b01      	ldr	r3, [sp, #4]
 8008b4e:	9a03      	ldr	r2, [sp, #12]
 8008b50:	5c98      	ldrb	r0, [r3, r2]
 8008b52:	189d      	adds	r5, r3, r2
 8008b54:	f7ff ffb4 	bl	8008ac0 <__hexdig_fun>
 8008b58:	2301      	movs	r3, #1
 8008b5a:	9304      	str	r3, [sp, #16]
 8008b5c:	42a0      	cmp	r0, r4
 8008b5e:	d030      	beq.n	8008bc2 <__gethex+0xd6>
 8008b60:	9501      	str	r5, [sp, #4]
 8008b62:	9b01      	ldr	r3, [sp, #4]
 8008b64:	7818      	ldrb	r0, [r3, #0]
 8008b66:	2830      	cmp	r0, #48	; 0x30
 8008b68:	d009      	beq.n	8008b7e <__gethex+0x92>
 8008b6a:	f7ff ffa9 	bl	8008ac0 <__hexdig_fun>
 8008b6e:	4242      	negs	r2, r0
 8008b70:	4142      	adcs	r2, r0
 8008b72:	2301      	movs	r3, #1
 8008b74:	002c      	movs	r4, r5
 8008b76:	9204      	str	r2, [sp, #16]
 8008b78:	9308      	str	r3, [sp, #32]
 8008b7a:	9d01      	ldr	r5, [sp, #4]
 8008b7c:	e004      	b.n	8008b88 <__gethex+0x9c>
 8008b7e:	9b01      	ldr	r3, [sp, #4]
 8008b80:	3301      	adds	r3, #1
 8008b82:	9301      	str	r3, [sp, #4]
 8008b84:	e7ed      	b.n	8008b62 <__gethex+0x76>
 8008b86:	3501      	adds	r5, #1
 8008b88:	7828      	ldrb	r0, [r5, #0]
 8008b8a:	f7ff ff99 	bl	8008ac0 <__hexdig_fun>
 8008b8e:	1e07      	subs	r7, r0, #0
 8008b90:	d1f9      	bne.n	8008b86 <__gethex+0x9a>
 8008b92:	0028      	movs	r0, r5
 8008b94:	9a03      	ldr	r2, [sp, #12]
 8008b96:	9907      	ldr	r1, [sp, #28]
 8008b98:	f001 fa38 	bl	800a00c <strncmp>
 8008b9c:	2800      	cmp	r0, #0
 8008b9e:	d10e      	bne.n	8008bbe <__gethex+0xd2>
 8008ba0:	2c00      	cmp	r4, #0
 8008ba2:	d107      	bne.n	8008bb4 <__gethex+0xc8>
 8008ba4:	9b03      	ldr	r3, [sp, #12]
 8008ba6:	18ed      	adds	r5, r5, r3
 8008ba8:	002c      	movs	r4, r5
 8008baa:	7828      	ldrb	r0, [r5, #0]
 8008bac:	f7ff ff88 	bl	8008ac0 <__hexdig_fun>
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	d102      	bne.n	8008bba <__gethex+0xce>
 8008bb4:	1b64      	subs	r4, r4, r5
 8008bb6:	00a7      	lsls	r7, r4, #2
 8008bb8:	e003      	b.n	8008bc2 <__gethex+0xd6>
 8008bba:	3501      	adds	r5, #1
 8008bbc:	e7f5      	b.n	8008baa <__gethex+0xbe>
 8008bbe:	2c00      	cmp	r4, #0
 8008bc0:	d1f8      	bne.n	8008bb4 <__gethex+0xc8>
 8008bc2:	2220      	movs	r2, #32
 8008bc4:	782b      	ldrb	r3, [r5, #0]
 8008bc6:	002e      	movs	r6, r5
 8008bc8:	4393      	bics	r3, r2
 8008bca:	2b50      	cmp	r3, #80	; 0x50
 8008bcc:	d11d      	bne.n	8008c0a <__gethex+0x11e>
 8008bce:	786b      	ldrb	r3, [r5, #1]
 8008bd0:	2b2b      	cmp	r3, #43	; 0x2b
 8008bd2:	d02c      	beq.n	8008c2e <__gethex+0x142>
 8008bd4:	2b2d      	cmp	r3, #45	; 0x2d
 8008bd6:	d02e      	beq.n	8008c36 <__gethex+0x14a>
 8008bd8:	2300      	movs	r3, #0
 8008bda:	1c6e      	adds	r6, r5, #1
 8008bdc:	9306      	str	r3, [sp, #24]
 8008bde:	7830      	ldrb	r0, [r6, #0]
 8008be0:	f7ff ff6e 	bl	8008ac0 <__hexdig_fun>
 8008be4:	1e43      	subs	r3, r0, #1
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	2b18      	cmp	r3, #24
 8008bea:	d82b      	bhi.n	8008c44 <__gethex+0x158>
 8008bec:	3810      	subs	r0, #16
 8008bee:	0004      	movs	r4, r0
 8008bf0:	7870      	ldrb	r0, [r6, #1]
 8008bf2:	f7ff ff65 	bl	8008ac0 <__hexdig_fun>
 8008bf6:	1e43      	subs	r3, r0, #1
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	3601      	adds	r6, #1
 8008bfc:	2b18      	cmp	r3, #24
 8008bfe:	d91c      	bls.n	8008c3a <__gethex+0x14e>
 8008c00:	9b06      	ldr	r3, [sp, #24]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d000      	beq.n	8008c08 <__gethex+0x11c>
 8008c06:	4264      	negs	r4, r4
 8008c08:	193f      	adds	r7, r7, r4
 8008c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c0c:	601e      	str	r6, [r3, #0]
 8008c0e:	9b04      	ldr	r3, [sp, #16]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d019      	beq.n	8008c48 <__gethex+0x15c>
 8008c14:	2600      	movs	r6, #0
 8008c16:	9b08      	ldr	r3, [sp, #32]
 8008c18:	42b3      	cmp	r3, r6
 8008c1a:	d100      	bne.n	8008c1e <__gethex+0x132>
 8008c1c:	3606      	adds	r6, #6
 8008c1e:	0030      	movs	r0, r6
 8008c20:	b00d      	add	sp, #52	; 0x34
 8008c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c24:	2301      	movs	r3, #1
 8008c26:	2700      	movs	r7, #0
 8008c28:	9d01      	ldr	r5, [sp, #4]
 8008c2a:	9304      	str	r3, [sp, #16]
 8008c2c:	e7c9      	b.n	8008bc2 <__gethex+0xd6>
 8008c2e:	2300      	movs	r3, #0
 8008c30:	9306      	str	r3, [sp, #24]
 8008c32:	1cae      	adds	r6, r5, #2
 8008c34:	e7d3      	b.n	8008bde <__gethex+0xf2>
 8008c36:	2301      	movs	r3, #1
 8008c38:	e7fa      	b.n	8008c30 <__gethex+0x144>
 8008c3a:	230a      	movs	r3, #10
 8008c3c:	435c      	muls	r4, r3
 8008c3e:	1824      	adds	r4, r4, r0
 8008c40:	3c10      	subs	r4, #16
 8008c42:	e7d5      	b.n	8008bf0 <__gethex+0x104>
 8008c44:	002e      	movs	r6, r5
 8008c46:	e7e0      	b.n	8008c0a <__gethex+0x11e>
 8008c48:	9b01      	ldr	r3, [sp, #4]
 8008c4a:	9904      	ldr	r1, [sp, #16]
 8008c4c:	1aeb      	subs	r3, r5, r3
 8008c4e:	3b01      	subs	r3, #1
 8008c50:	2b07      	cmp	r3, #7
 8008c52:	dc0a      	bgt.n	8008c6a <__gethex+0x17e>
 8008c54:	9805      	ldr	r0, [sp, #20]
 8008c56:	f000 fa87 	bl	8009168 <_Balloc>
 8008c5a:	1e04      	subs	r4, r0, #0
 8008c5c:	d108      	bne.n	8008c70 <__gethex+0x184>
 8008c5e:	0002      	movs	r2, r0
 8008c60:	21de      	movs	r1, #222	; 0xde
 8008c62:	4b64      	ldr	r3, [pc, #400]	; (8008df4 <__gethex+0x308>)
 8008c64:	4864      	ldr	r0, [pc, #400]	; (8008df8 <__gethex+0x30c>)
 8008c66:	f001 f9f1 	bl	800a04c <__assert_func>
 8008c6a:	3101      	adds	r1, #1
 8008c6c:	105b      	asrs	r3, r3, #1
 8008c6e:	e7ef      	b.n	8008c50 <__gethex+0x164>
 8008c70:	0003      	movs	r3, r0
 8008c72:	3314      	adds	r3, #20
 8008c74:	9304      	str	r3, [sp, #16]
 8008c76:	9309      	str	r3, [sp, #36]	; 0x24
 8008c78:	2300      	movs	r3, #0
 8008c7a:	001e      	movs	r6, r3
 8008c7c:	9306      	str	r3, [sp, #24]
 8008c7e:	9b01      	ldr	r3, [sp, #4]
 8008c80:	42ab      	cmp	r3, r5
 8008c82:	d340      	bcc.n	8008d06 <__gethex+0x21a>
 8008c84:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008c86:	9b04      	ldr	r3, [sp, #16]
 8008c88:	c540      	stmia	r5!, {r6}
 8008c8a:	1aed      	subs	r5, r5, r3
 8008c8c:	10ad      	asrs	r5, r5, #2
 8008c8e:	0030      	movs	r0, r6
 8008c90:	6125      	str	r5, [r4, #16]
 8008c92:	f000 fb61 	bl	8009358 <__hi0bits>
 8008c96:	9b02      	ldr	r3, [sp, #8]
 8008c98:	016d      	lsls	r5, r5, #5
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	1a2e      	subs	r6, r5, r0
 8008c9e:	9301      	str	r3, [sp, #4]
 8008ca0:	429e      	cmp	r6, r3
 8008ca2:	dd5a      	ble.n	8008d5a <__gethex+0x26e>
 8008ca4:	1af6      	subs	r6, r6, r3
 8008ca6:	0031      	movs	r1, r6
 8008ca8:	0020      	movs	r0, r4
 8008caa:	f000 ff03 	bl	8009ab4 <__any_on>
 8008cae:	1e05      	subs	r5, r0, #0
 8008cb0:	d016      	beq.n	8008ce0 <__gethex+0x1f4>
 8008cb2:	2501      	movs	r5, #1
 8008cb4:	211f      	movs	r1, #31
 8008cb6:	0028      	movs	r0, r5
 8008cb8:	1e73      	subs	r3, r6, #1
 8008cba:	4019      	ands	r1, r3
 8008cbc:	4088      	lsls	r0, r1
 8008cbe:	0001      	movs	r1, r0
 8008cc0:	115a      	asrs	r2, r3, #5
 8008cc2:	9804      	ldr	r0, [sp, #16]
 8008cc4:	0092      	lsls	r2, r2, #2
 8008cc6:	5812      	ldr	r2, [r2, r0]
 8008cc8:	420a      	tst	r2, r1
 8008cca:	d009      	beq.n	8008ce0 <__gethex+0x1f4>
 8008ccc:	42ab      	cmp	r3, r5
 8008cce:	dd06      	ble.n	8008cde <__gethex+0x1f2>
 8008cd0:	0020      	movs	r0, r4
 8008cd2:	1eb1      	subs	r1, r6, #2
 8008cd4:	f000 feee 	bl	8009ab4 <__any_on>
 8008cd8:	3502      	adds	r5, #2
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	d100      	bne.n	8008ce0 <__gethex+0x1f4>
 8008cde:	2502      	movs	r5, #2
 8008ce0:	0031      	movs	r1, r6
 8008ce2:	0020      	movs	r0, r4
 8008ce4:	f7ff fe98 	bl	8008a18 <rshift>
 8008ce8:	19bf      	adds	r7, r7, r6
 8008cea:	9b02      	ldr	r3, [sp, #8]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	9303      	str	r3, [sp, #12]
 8008cf0:	42bb      	cmp	r3, r7
 8008cf2:	da42      	bge.n	8008d7a <__gethex+0x28e>
 8008cf4:	0021      	movs	r1, r4
 8008cf6:	9805      	ldr	r0, [sp, #20]
 8008cf8:	f000 fa7a 	bl	80091f0 <_Bfree>
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d00:	26a3      	movs	r6, #163	; 0xa3
 8008d02:	6013      	str	r3, [r2, #0]
 8008d04:	e78b      	b.n	8008c1e <__gethex+0x132>
 8008d06:	1e6b      	subs	r3, r5, #1
 8008d08:	9308      	str	r3, [sp, #32]
 8008d0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d014      	beq.n	8008d3c <__gethex+0x250>
 8008d12:	9b06      	ldr	r3, [sp, #24]
 8008d14:	2b20      	cmp	r3, #32
 8008d16:	d104      	bne.n	8008d22 <__gethex+0x236>
 8008d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d1a:	c340      	stmia	r3!, {r6}
 8008d1c:	2600      	movs	r6, #0
 8008d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8008d20:	9606      	str	r6, [sp, #24]
 8008d22:	9b08      	ldr	r3, [sp, #32]
 8008d24:	7818      	ldrb	r0, [r3, #0]
 8008d26:	f7ff fecb 	bl	8008ac0 <__hexdig_fun>
 8008d2a:	230f      	movs	r3, #15
 8008d2c:	4018      	ands	r0, r3
 8008d2e:	9b06      	ldr	r3, [sp, #24]
 8008d30:	9d08      	ldr	r5, [sp, #32]
 8008d32:	4098      	lsls	r0, r3
 8008d34:	3304      	adds	r3, #4
 8008d36:	4306      	orrs	r6, r0
 8008d38:	9306      	str	r3, [sp, #24]
 8008d3a:	e7a0      	b.n	8008c7e <__gethex+0x192>
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	9a03      	ldr	r2, [sp, #12]
 8008d40:	1a9d      	subs	r5, r3, r2
 8008d42:	9b08      	ldr	r3, [sp, #32]
 8008d44:	195d      	adds	r5, r3, r5
 8008d46:	9b01      	ldr	r3, [sp, #4]
 8008d48:	429d      	cmp	r5, r3
 8008d4a:	d3e2      	bcc.n	8008d12 <__gethex+0x226>
 8008d4c:	0028      	movs	r0, r5
 8008d4e:	9907      	ldr	r1, [sp, #28]
 8008d50:	f001 f95c 	bl	800a00c <strncmp>
 8008d54:	2800      	cmp	r0, #0
 8008d56:	d1dc      	bne.n	8008d12 <__gethex+0x226>
 8008d58:	e791      	b.n	8008c7e <__gethex+0x192>
 8008d5a:	9b01      	ldr	r3, [sp, #4]
 8008d5c:	2500      	movs	r5, #0
 8008d5e:	429e      	cmp	r6, r3
 8008d60:	dac3      	bge.n	8008cea <__gethex+0x1fe>
 8008d62:	1b9e      	subs	r6, r3, r6
 8008d64:	0021      	movs	r1, r4
 8008d66:	0032      	movs	r2, r6
 8008d68:	9805      	ldr	r0, [sp, #20]
 8008d6a:	f000 fc5f 	bl	800962c <__lshift>
 8008d6e:	0003      	movs	r3, r0
 8008d70:	3314      	adds	r3, #20
 8008d72:	0004      	movs	r4, r0
 8008d74:	1bbf      	subs	r7, r7, r6
 8008d76:	9304      	str	r3, [sp, #16]
 8008d78:	e7b7      	b.n	8008cea <__gethex+0x1fe>
 8008d7a:	9b02      	ldr	r3, [sp, #8]
 8008d7c:	685e      	ldr	r6, [r3, #4]
 8008d7e:	42be      	cmp	r6, r7
 8008d80:	dd71      	ble.n	8008e66 <__gethex+0x37a>
 8008d82:	9b01      	ldr	r3, [sp, #4]
 8008d84:	1bf6      	subs	r6, r6, r7
 8008d86:	42b3      	cmp	r3, r6
 8008d88:	dc38      	bgt.n	8008dfc <__gethex+0x310>
 8008d8a:	9b02      	ldr	r3, [sp, #8]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	2b02      	cmp	r3, #2
 8008d90:	d026      	beq.n	8008de0 <__gethex+0x2f4>
 8008d92:	2b03      	cmp	r3, #3
 8008d94:	d028      	beq.n	8008de8 <__gethex+0x2fc>
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d119      	bne.n	8008dce <__gethex+0x2e2>
 8008d9a:	9b01      	ldr	r3, [sp, #4]
 8008d9c:	42b3      	cmp	r3, r6
 8008d9e:	d116      	bne.n	8008dce <__gethex+0x2e2>
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d10d      	bne.n	8008dc0 <__gethex+0x2d4>
 8008da4:	9b02      	ldr	r3, [sp, #8]
 8008da6:	2662      	movs	r6, #98	; 0x62
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	9301      	str	r3, [sp, #4]
 8008dac:	9a01      	ldr	r2, [sp, #4]
 8008dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008db0:	601a      	str	r2, [r3, #0]
 8008db2:	2301      	movs	r3, #1
 8008db4:	9a04      	ldr	r2, [sp, #16]
 8008db6:	6123      	str	r3, [r4, #16]
 8008db8:	6013      	str	r3, [r2, #0]
 8008dba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008dbc:	601c      	str	r4, [r3, #0]
 8008dbe:	e72e      	b.n	8008c1e <__gethex+0x132>
 8008dc0:	9901      	ldr	r1, [sp, #4]
 8008dc2:	0020      	movs	r0, r4
 8008dc4:	3901      	subs	r1, #1
 8008dc6:	f000 fe75 	bl	8009ab4 <__any_on>
 8008dca:	2800      	cmp	r0, #0
 8008dcc:	d1ea      	bne.n	8008da4 <__gethex+0x2b8>
 8008dce:	0021      	movs	r1, r4
 8008dd0:	9805      	ldr	r0, [sp, #20]
 8008dd2:	f000 fa0d 	bl	80091f0 <_Bfree>
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008dda:	2650      	movs	r6, #80	; 0x50
 8008ddc:	6013      	str	r3, [r2, #0]
 8008dde:	e71e      	b.n	8008c1e <__gethex+0x132>
 8008de0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d1f3      	bne.n	8008dce <__gethex+0x2e2>
 8008de6:	e7dd      	b.n	8008da4 <__gethex+0x2b8>
 8008de8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d1da      	bne.n	8008da4 <__gethex+0x2b8>
 8008dee:	e7ee      	b.n	8008dce <__gethex+0x2e2>
 8008df0:	0800b010 	.word	0x0800b010
 8008df4:	0800af98 	.word	0x0800af98
 8008df8:	0800afa9 	.word	0x0800afa9
 8008dfc:	1e77      	subs	r7, r6, #1
 8008dfe:	2d00      	cmp	r5, #0
 8008e00:	d12f      	bne.n	8008e62 <__gethex+0x376>
 8008e02:	2f00      	cmp	r7, #0
 8008e04:	d004      	beq.n	8008e10 <__gethex+0x324>
 8008e06:	0039      	movs	r1, r7
 8008e08:	0020      	movs	r0, r4
 8008e0a:	f000 fe53 	bl	8009ab4 <__any_on>
 8008e0e:	0005      	movs	r5, r0
 8008e10:	231f      	movs	r3, #31
 8008e12:	117a      	asrs	r2, r7, #5
 8008e14:	401f      	ands	r7, r3
 8008e16:	3b1e      	subs	r3, #30
 8008e18:	40bb      	lsls	r3, r7
 8008e1a:	9904      	ldr	r1, [sp, #16]
 8008e1c:	0092      	lsls	r2, r2, #2
 8008e1e:	5852      	ldr	r2, [r2, r1]
 8008e20:	421a      	tst	r2, r3
 8008e22:	d001      	beq.n	8008e28 <__gethex+0x33c>
 8008e24:	2302      	movs	r3, #2
 8008e26:	431d      	orrs	r5, r3
 8008e28:	9b01      	ldr	r3, [sp, #4]
 8008e2a:	0031      	movs	r1, r6
 8008e2c:	1b9b      	subs	r3, r3, r6
 8008e2e:	2602      	movs	r6, #2
 8008e30:	0020      	movs	r0, r4
 8008e32:	9301      	str	r3, [sp, #4]
 8008e34:	f7ff fdf0 	bl	8008a18 <rshift>
 8008e38:	9b02      	ldr	r3, [sp, #8]
 8008e3a:	685f      	ldr	r7, [r3, #4]
 8008e3c:	2d00      	cmp	r5, #0
 8008e3e:	d041      	beq.n	8008ec4 <__gethex+0x3d8>
 8008e40:	9b02      	ldr	r3, [sp, #8]
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	2b02      	cmp	r3, #2
 8008e46:	d010      	beq.n	8008e6a <__gethex+0x37e>
 8008e48:	2b03      	cmp	r3, #3
 8008e4a:	d012      	beq.n	8008e72 <__gethex+0x386>
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d106      	bne.n	8008e5e <__gethex+0x372>
 8008e50:	07aa      	lsls	r2, r5, #30
 8008e52:	d504      	bpl.n	8008e5e <__gethex+0x372>
 8008e54:	9a04      	ldr	r2, [sp, #16]
 8008e56:	6810      	ldr	r0, [r2, #0]
 8008e58:	4305      	orrs	r5, r0
 8008e5a:	421d      	tst	r5, r3
 8008e5c:	d10c      	bne.n	8008e78 <__gethex+0x38c>
 8008e5e:	2310      	movs	r3, #16
 8008e60:	e02f      	b.n	8008ec2 <__gethex+0x3d6>
 8008e62:	2501      	movs	r5, #1
 8008e64:	e7d4      	b.n	8008e10 <__gethex+0x324>
 8008e66:	2601      	movs	r6, #1
 8008e68:	e7e8      	b.n	8008e3c <__gethex+0x350>
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008e6e:	1a9b      	subs	r3, r3, r2
 8008e70:	9313      	str	r3, [sp, #76]	; 0x4c
 8008e72:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d0f2      	beq.n	8008e5e <__gethex+0x372>
 8008e78:	6923      	ldr	r3, [r4, #16]
 8008e7a:	2000      	movs	r0, #0
 8008e7c:	9303      	str	r3, [sp, #12]
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	9304      	str	r3, [sp, #16]
 8008e82:	0023      	movs	r3, r4
 8008e84:	9a04      	ldr	r2, [sp, #16]
 8008e86:	3314      	adds	r3, #20
 8008e88:	1899      	adds	r1, r3, r2
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	1c55      	adds	r5, r2, #1
 8008e8e:	d01e      	beq.n	8008ece <__gethex+0x3e2>
 8008e90:	3201      	adds	r2, #1
 8008e92:	601a      	str	r2, [r3, #0]
 8008e94:	0023      	movs	r3, r4
 8008e96:	3314      	adds	r3, #20
 8008e98:	2e02      	cmp	r6, #2
 8008e9a:	d140      	bne.n	8008f1e <__gethex+0x432>
 8008e9c:	9a02      	ldr	r2, [sp, #8]
 8008e9e:	9901      	ldr	r1, [sp, #4]
 8008ea0:	6812      	ldr	r2, [r2, #0]
 8008ea2:	3a01      	subs	r2, #1
 8008ea4:	428a      	cmp	r2, r1
 8008ea6:	d10b      	bne.n	8008ec0 <__gethex+0x3d4>
 8008ea8:	114a      	asrs	r2, r1, #5
 8008eaa:	211f      	movs	r1, #31
 8008eac:	9801      	ldr	r0, [sp, #4]
 8008eae:	0092      	lsls	r2, r2, #2
 8008eb0:	4001      	ands	r1, r0
 8008eb2:	2001      	movs	r0, #1
 8008eb4:	0005      	movs	r5, r0
 8008eb6:	408d      	lsls	r5, r1
 8008eb8:	58d3      	ldr	r3, [r2, r3]
 8008eba:	422b      	tst	r3, r5
 8008ebc:	d000      	beq.n	8008ec0 <__gethex+0x3d4>
 8008ebe:	2601      	movs	r6, #1
 8008ec0:	2320      	movs	r3, #32
 8008ec2:	431e      	orrs	r6, r3
 8008ec4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ec6:	601c      	str	r4, [r3, #0]
 8008ec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008eca:	601f      	str	r7, [r3, #0]
 8008ecc:	e6a7      	b.n	8008c1e <__gethex+0x132>
 8008ece:	c301      	stmia	r3!, {r0}
 8008ed0:	4299      	cmp	r1, r3
 8008ed2:	d8da      	bhi.n	8008e8a <__gethex+0x39e>
 8008ed4:	9b03      	ldr	r3, [sp, #12]
 8008ed6:	68a2      	ldr	r2, [r4, #8]
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	db17      	blt.n	8008f0c <__gethex+0x420>
 8008edc:	6863      	ldr	r3, [r4, #4]
 8008ede:	9805      	ldr	r0, [sp, #20]
 8008ee0:	1c59      	adds	r1, r3, #1
 8008ee2:	f000 f941 	bl	8009168 <_Balloc>
 8008ee6:	1e05      	subs	r5, r0, #0
 8008ee8:	d103      	bne.n	8008ef2 <__gethex+0x406>
 8008eea:	0002      	movs	r2, r0
 8008eec:	2184      	movs	r1, #132	; 0x84
 8008eee:	4b1c      	ldr	r3, [pc, #112]	; (8008f60 <__gethex+0x474>)
 8008ef0:	e6b8      	b.n	8008c64 <__gethex+0x178>
 8008ef2:	0021      	movs	r1, r4
 8008ef4:	6923      	ldr	r3, [r4, #16]
 8008ef6:	310c      	adds	r1, #12
 8008ef8:	1c9a      	adds	r2, r3, #2
 8008efa:	0092      	lsls	r2, r2, #2
 8008efc:	300c      	adds	r0, #12
 8008efe:	f000 f92a 	bl	8009156 <memcpy>
 8008f02:	0021      	movs	r1, r4
 8008f04:	9805      	ldr	r0, [sp, #20]
 8008f06:	f000 f973 	bl	80091f0 <_Bfree>
 8008f0a:	002c      	movs	r4, r5
 8008f0c:	6923      	ldr	r3, [r4, #16]
 8008f0e:	1c5a      	adds	r2, r3, #1
 8008f10:	6122      	str	r2, [r4, #16]
 8008f12:	2201      	movs	r2, #1
 8008f14:	3304      	adds	r3, #4
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	18e3      	adds	r3, r4, r3
 8008f1a:	605a      	str	r2, [r3, #4]
 8008f1c:	e7ba      	b.n	8008e94 <__gethex+0x3a8>
 8008f1e:	6922      	ldr	r2, [r4, #16]
 8008f20:	9903      	ldr	r1, [sp, #12]
 8008f22:	428a      	cmp	r2, r1
 8008f24:	dd09      	ble.n	8008f3a <__gethex+0x44e>
 8008f26:	2101      	movs	r1, #1
 8008f28:	0020      	movs	r0, r4
 8008f2a:	f7ff fd75 	bl	8008a18 <rshift>
 8008f2e:	9b02      	ldr	r3, [sp, #8]
 8008f30:	3701      	adds	r7, #1
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	42bb      	cmp	r3, r7
 8008f36:	dac2      	bge.n	8008ebe <__gethex+0x3d2>
 8008f38:	e6dc      	b.n	8008cf4 <__gethex+0x208>
 8008f3a:	221f      	movs	r2, #31
 8008f3c:	9d01      	ldr	r5, [sp, #4]
 8008f3e:	9901      	ldr	r1, [sp, #4]
 8008f40:	2601      	movs	r6, #1
 8008f42:	4015      	ands	r5, r2
 8008f44:	4211      	tst	r1, r2
 8008f46:	d0bb      	beq.n	8008ec0 <__gethex+0x3d4>
 8008f48:	9a04      	ldr	r2, [sp, #16]
 8008f4a:	189b      	adds	r3, r3, r2
 8008f4c:	3b04      	subs	r3, #4
 8008f4e:	6818      	ldr	r0, [r3, #0]
 8008f50:	f000 fa02 	bl	8009358 <__hi0bits>
 8008f54:	2320      	movs	r3, #32
 8008f56:	1b5d      	subs	r5, r3, r5
 8008f58:	42a8      	cmp	r0, r5
 8008f5a:	dbe4      	blt.n	8008f26 <__gethex+0x43a>
 8008f5c:	e7b0      	b.n	8008ec0 <__gethex+0x3d4>
 8008f5e:	46c0      	nop			; (mov r8, r8)
 8008f60:	0800af98 	.word	0x0800af98

08008f64 <L_shift>:
 8008f64:	2308      	movs	r3, #8
 8008f66:	b570      	push	{r4, r5, r6, lr}
 8008f68:	2520      	movs	r5, #32
 8008f6a:	1a9a      	subs	r2, r3, r2
 8008f6c:	0092      	lsls	r2, r2, #2
 8008f6e:	1aad      	subs	r5, r5, r2
 8008f70:	6843      	ldr	r3, [r0, #4]
 8008f72:	6806      	ldr	r6, [r0, #0]
 8008f74:	001c      	movs	r4, r3
 8008f76:	40ac      	lsls	r4, r5
 8008f78:	40d3      	lsrs	r3, r2
 8008f7a:	4334      	orrs	r4, r6
 8008f7c:	6004      	str	r4, [r0, #0]
 8008f7e:	6043      	str	r3, [r0, #4]
 8008f80:	3004      	adds	r0, #4
 8008f82:	4288      	cmp	r0, r1
 8008f84:	d3f4      	bcc.n	8008f70 <L_shift+0xc>
 8008f86:	bd70      	pop	{r4, r5, r6, pc}

08008f88 <__match>:
 8008f88:	b530      	push	{r4, r5, lr}
 8008f8a:	6803      	ldr	r3, [r0, #0]
 8008f8c:	780c      	ldrb	r4, [r1, #0]
 8008f8e:	3301      	adds	r3, #1
 8008f90:	2c00      	cmp	r4, #0
 8008f92:	d102      	bne.n	8008f9a <__match+0x12>
 8008f94:	6003      	str	r3, [r0, #0]
 8008f96:	2001      	movs	r0, #1
 8008f98:	bd30      	pop	{r4, r5, pc}
 8008f9a:	781a      	ldrb	r2, [r3, #0]
 8008f9c:	0015      	movs	r5, r2
 8008f9e:	3d41      	subs	r5, #65	; 0x41
 8008fa0:	2d19      	cmp	r5, #25
 8008fa2:	d800      	bhi.n	8008fa6 <__match+0x1e>
 8008fa4:	3220      	adds	r2, #32
 8008fa6:	3101      	adds	r1, #1
 8008fa8:	42a2      	cmp	r2, r4
 8008faa:	d0ef      	beq.n	8008f8c <__match+0x4>
 8008fac:	2000      	movs	r0, #0
 8008fae:	e7f3      	b.n	8008f98 <__match+0x10>

08008fb0 <__hexnan>:
 8008fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fb2:	680b      	ldr	r3, [r1, #0]
 8008fb4:	b08b      	sub	sp, #44	; 0x2c
 8008fb6:	9201      	str	r2, [sp, #4]
 8008fb8:	9901      	ldr	r1, [sp, #4]
 8008fba:	115a      	asrs	r2, r3, #5
 8008fbc:	0092      	lsls	r2, r2, #2
 8008fbe:	188a      	adds	r2, r1, r2
 8008fc0:	9202      	str	r2, [sp, #8]
 8008fc2:	0019      	movs	r1, r3
 8008fc4:	221f      	movs	r2, #31
 8008fc6:	4011      	ands	r1, r2
 8008fc8:	9008      	str	r0, [sp, #32]
 8008fca:	9106      	str	r1, [sp, #24]
 8008fcc:	4213      	tst	r3, r2
 8008fce:	d002      	beq.n	8008fd6 <__hexnan+0x26>
 8008fd0:	9b02      	ldr	r3, [sp, #8]
 8008fd2:	3304      	adds	r3, #4
 8008fd4:	9302      	str	r3, [sp, #8]
 8008fd6:	9b02      	ldr	r3, [sp, #8]
 8008fd8:	2500      	movs	r5, #0
 8008fda:	1f1e      	subs	r6, r3, #4
 8008fdc:	0037      	movs	r7, r6
 8008fde:	0034      	movs	r4, r6
 8008fe0:	9b08      	ldr	r3, [sp, #32]
 8008fe2:	6035      	str	r5, [r6, #0]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	9507      	str	r5, [sp, #28]
 8008fe8:	9305      	str	r3, [sp, #20]
 8008fea:	9503      	str	r5, [sp, #12]
 8008fec:	9b05      	ldr	r3, [sp, #20]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ff2:	9b05      	ldr	r3, [sp, #20]
 8008ff4:	785b      	ldrb	r3, [r3, #1]
 8008ff6:	9304      	str	r3, [sp, #16]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d028      	beq.n	800904e <__hexnan+0x9e>
 8008ffc:	9804      	ldr	r0, [sp, #16]
 8008ffe:	f7ff fd5f 	bl	8008ac0 <__hexdig_fun>
 8009002:	2800      	cmp	r0, #0
 8009004:	d154      	bne.n	80090b0 <__hexnan+0x100>
 8009006:	9b04      	ldr	r3, [sp, #16]
 8009008:	2b20      	cmp	r3, #32
 800900a:	d819      	bhi.n	8009040 <__hexnan+0x90>
 800900c:	9b03      	ldr	r3, [sp, #12]
 800900e:	9a07      	ldr	r2, [sp, #28]
 8009010:	4293      	cmp	r3, r2
 8009012:	dd12      	ble.n	800903a <__hexnan+0x8a>
 8009014:	42bc      	cmp	r4, r7
 8009016:	d206      	bcs.n	8009026 <__hexnan+0x76>
 8009018:	2d07      	cmp	r5, #7
 800901a:	dc04      	bgt.n	8009026 <__hexnan+0x76>
 800901c:	002a      	movs	r2, r5
 800901e:	0039      	movs	r1, r7
 8009020:	0020      	movs	r0, r4
 8009022:	f7ff ff9f 	bl	8008f64 <L_shift>
 8009026:	9b01      	ldr	r3, [sp, #4]
 8009028:	2508      	movs	r5, #8
 800902a:	429c      	cmp	r4, r3
 800902c:	d905      	bls.n	800903a <__hexnan+0x8a>
 800902e:	1f27      	subs	r7, r4, #4
 8009030:	2500      	movs	r5, #0
 8009032:	003c      	movs	r4, r7
 8009034:	9b03      	ldr	r3, [sp, #12]
 8009036:	603d      	str	r5, [r7, #0]
 8009038:	9307      	str	r3, [sp, #28]
 800903a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800903c:	9305      	str	r3, [sp, #20]
 800903e:	e7d5      	b.n	8008fec <__hexnan+0x3c>
 8009040:	9b04      	ldr	r3, [sp, #16]
 8009042:	2b29      	cmp	r3, #41	; 0x29
 8009044:	d159      	bne.n	80090fa <__hexnan+0x14a>
 8009046:	9b05      	ldr	r3, [sp, #20]
 8009048:	9a08      	ldr	r2, [sp, #32]
 800904a:	3302      	adds	r3, #2
 800904c:	6013      	str	r3, [r2, #0]
 800904e:	9b03      	ldr	r3, [sp, #12]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d052      	beq.n	80090fa <__hexnan+0x14a>
 8009054:	42bc      	cmp	r4, r7
 8009056:	d206      	bcs.n	8009066 <__hexnan+0xb6>
 8009058:	2d07      	cmp	r5, #7
 800905a:	dc04      	bgt.n	8009066 <__hexnan+0xb6>
 800905c:	002a      	movs	r2, r5
 800905e:	0039      	movs	r1, r7
 8009060:	0020      	movs	r0, r4
 8009062:	f7ff ff7f 	bl	8008f64 <L_shift>
 8009066:	9b01      	ldr	r3, [sp, #4]
 8009068:	429c      	cmp	r4, r3
 800906a:	d935      	bls.n	80090d8 <__hexnan+0x128>
 800906c:	001a      	movs	r2, r3
 800906e:	0023      	movs	r3, r4
 8009070:	cb02      	ldmia	r3!, {r1}
 8009072:	c202      	stmia	r2!, {r1}
 8009074:	429e      	cmp	r6, r3
 8009076:	d2fb      	bcs.n	8009070 <__hexnan+0xc0>
 8009078:	9b02      	ldr	r3, [sp, #8]
 800907a:	1c61      	adds	r1, r4, #1
 800907c:	1eda      	subs	r2, r3, #3
 800907e:	2304      	movs	r3, #4
 8009080:	4291      	cmp	r1, r2
 8009082:	d805      	bhi.n	8009090 <__hexnan+0xe0>
 8009084:	9b02      	ldr	r3, [sp, #8]
 8009086:	3b04      	subs	r3, #4
 8009088:	1b1b      	subs	r3, r3, r4
 800908a:	089b      	lsrs	r3, r3, #2
 800908c:	3301      	adds	r3, #1
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	9a01      	ldr	r2, [sp, #4]
 8009092:	18d3      	adds	r3, r2, r3
 8009094:	2200      	movs	r2, #0
 8009096:	c304      	stmia	r3!, {r2}
 8009098:	429e      	cmp	r6, r3
 800909a:	d2fc      	bcs.n	8009096 <__hexnan+0xe6>
 800909c:	6833      	ldr	r3, [r6, #0]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d104      	bne.n	80090ac <__hexnan+0xfc>
 80090a2:	9b01      	ldr	r3, [sp, #4]
 80090a4:	429e      	cmp	r6, r3
 80090a6:	d126      	bne.n	80090f6 <__hexnan+0x146>
 80090a8:	2301      	movs	r3, #1
 80090aa:	6033      	str	r3, [r6, #0]
 80090ac:	2005      	movs	r0, #5
 80090ae:	e025      	b.n	80090fc <__hexnan+0x14c>
 80090b0:	9b03      	ldr	r3, [sp, #12]
 80090b2:	3501      	adds	r5, #1
 80090b4:	3301      	adds	r3, #1
 80090b6:	9303      	str	r3, [sp, #12]
 80090b8:	2d08      	cmp	r5, #8
 80090ba:	dd06      	ble.n	80090ca <__hexnan+0x11a>
 80090bc:	9b01      	ldr	r3, [sp, #4]
 80090be:	429c      	cmp	r4, r3
 80090c0:	d9bb      	bls.n	800903a <__hexnan+0x8a>
 80090c2:	2300      	movs	r3, #0
 80090c4:	2501      	movs	r5, #1
 80090c6:	3c04      	subs	r4, #4
 80090c8:	6023      	str	r3, [r4, #0]
 80090ca:	220f      	movs	r2, #15
 80090cc:	6823      	ldr	r3, [r4, #0]
 80090ce:	4010      	ands	r0, r2
 80090d0:	011b      	lsls	r3, r3, #4
 80090d2:	4318      	orrs	r0, r3
 80090d4:	6020      	str	r0, [r4, #0]
 80090d6:	e7b0      	b.n	800903a <__hexnan+0x8a>
 80090d8:	9b06      	ldr	r3, [sp, #24]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d0de      	beq.n	800909c <__hexnan+0xec>
 80090de:	2120      	movs	r1, #32
 80090e0:	9a06      	ldr	r2, [sp, #24]
 80090e2:	9b02      	ldr	r3, [sp, #8]
 80090e4:	1a89      	subs	r1, r1, r2
 80090e6:	2201      	movs	r2, #1
 80090e8:	4252      	negs	r2, r2
 80090ea:	40ca      	lsrs	r2, r1
 80090ec:	3b04      	subs	r3, #4
 80090ee:	6819      	ldr	r1, [r3, #0]
 80090f0:	400a      	ands	r2, r1
 80090f2:	601a      	str	r2, [r3, #0]
 80090f4:	e7d2      	b.n	800909c <__hexnan+0xec>
 80090f6:	3e04      	subs	r6, #4
 80090f8:	e7d0      	b.n	800909c <__hexnan+0xec>
 80090fa:	2004      	movs	r0, #4
 80090fc:	b00b      	add	sp, #44	; 0x2c
 80090fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009100 <_localeconv_r>:
 8009100:	4800      	ldr	r0, [pc, #0]	; (8009104 <_localeconv_r+0x4>)
 8009102:	4770      	bx	lr
 8009104:	20000188 	.word	0x20000188

08009108 <malloc>:
 8009108:	b510      	push	{r4, lr}
 800910a:	4b03      	ldr	r3, [pc, #12]	; (8009118 <malloc+0x10>)
 800910c:	0001      	movs	r1, r0
 800910e:	6818      	ldr	r0, [r3, #0]
 8009110:	f000 fd8c 	bl	8009c2c <_malloc_r>
 8009114:	bd10      	pop	{r4, pc}
 8009116:	46c0      	nop			; (mov r8, r8)
 8009118:	20000030 	.word	0x20000030

0800911c <__ascii_mbtowc>:
 800911c:	b082      	sub	sp, #8
 800911e:	2900      	cmp	r1, #0
 8009120:	d100      	bne.n	8009124 <__ascii_mbtowc+0x8>
 8009122:	a901      	add	r1, sp, #4
 8009124:	1e10      	subs	r0, r2, #0
 8009126:	d006      	beq.n	8009136 <__ascii_mbtowc+0x1a>
 8009128:	2b00      	cmp	r3, #0
 800912a:	d006      	beq.n	800913a <__ascii_mbtowc+0x1e>
 800912c:	7813      	ldrb	r3, [r2, #0]
 800912e:	600b      	str	r3, [r1, #0]
 8009130:	7810      	ldrb	r0, [r2, #0]
 8009132:	1e43      	subs	r3, r0, #1
 8009134:	4198      	sbcs	r0, r3
 8009136:	b002      	add	sp, #8
 8009138:	4770      	bx	lr
 800913a:	2002      	movs	r0, #2
 800913c:	4240      	negs	r0, r0
 800913e:	e7fa      	b.n	8009136 <__ascii_mbtowc+0x1a>

08009140 <memchr>:
 8009140:	b2c9      	uxtb	r1, r1
 8009142:	1882      	adds	r2, r0, r2
 8009144:	4290      	cmp	r0, r2
 8009146:	d101      	bne.n	800914c <memchr+0xc>
 8009148:	2000      	movs	r0, #0
 800914a:	4770      	bx	lr
 800914c:	7803      	ldrb	r3, [r0, #0]
 800914e:	428b      	cmp	r3, r1
 8009150:	d0fb      	beq.n	800914a <memchr+0xa>
 8009152:	3001      	adds	r0, #1
 8009154:	e7f6      	b.n	8009144 <memchr+0x4>

08009156 <memcpy>:
 8009156:	2300      	movs	r3, #0
 8009158:	b510      	push	{r4, lr}
 800915a:	429a      	cmp	r2, r3
 800915c:	d100      	bne.n	8009160 <memcpy+0xa>
 800915e:	bd10      	pop	{r4, pc}
 8009160:	5ccc      	ldrb	r4, [r1, r3]
 8009162:	54c4      	strb	r4, [r0, r3]
 8009164:	3301      	adds	r3, #1
 8009166:	e7f8      	b.n	800915a <memcpy+0x4>

08009168 <_Balloc>:
 8009168:	b570      	push	{r4, r5, r6, lr}
 800916a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800916c:	0006      	movs	r6, r0
 800916e:	000c      	movs	r4, r1
 8009170:	2d00      	cmp	r5, #0
 8009172:	d10e      	bne.n	8009192 <_Balloc+0x2a>
 8009174:	2010      	movs	r0, #16
 8009176:	f7ff ffc7 	bl	8009108 <malloc>
 800917a:	1e02      	subs	r2, r0, #0
 800917c:	6270      	str	r0, [r6, #36]	; 0x24
 800917e:	d104      	bne.n	800918a <_Balloc+0x22>
 8009180:	2166      	movs	r1, #102	; 0x66
 8009182:	4b19      	ldr	r3, [pc, #100]	; (80091e8 <_Balloc+0x80>)
 8009184:	4819      	ldr	r0, [pc, #100]	; (80091ec <_Balloc+0x84>)
 8009186:	f000 ff61 	bl	800a04c <__assert_func>
 800918a:	6045      	str	r5, [r0, #4]
 800918c:	6085      	str	r5, [r0, #8]
 800918e:	6005      	str	r5, [r0, #0]
 8009190:	60c5      	str	r5, [r0, #12]
 8009192:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8009194:	68eb      	ldr	r3, [r5, #12]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d013      	beq.n	80091c2 <_Balloc+0x5a>
 800919a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800919c:	00a2      	lsls	r2, r4, #2
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	189b      	adds	r3, r3, r2
 80091a2:	6818      	ldr	r0, [r3, #0]
 80091a4:	2800      	cmp	r0, #0
 80091a6:	d118      	bne.n	80091da <_Balloc+0x72>
 80091a8:	2101      	movs	r1, #1
 80091aa:	000d      	movs	r5, r1
 80091ac:	40a5      	lsls	r5, r4
 80091ae:	1d6a      	adds	r2, r5, #5
 80091b0:	0030      	movs	r0, r6
 80091b2:	0092      	lsls	r2, r2, #2
 80091b4:	f000 fca1 	bl	8009afa <_calloc_r>
 80091b8:	2800      	cmp	r0, #0
 80091ba:	d00c      	beq.n	80091d6 <_Balloc+0x6e>
 80091bc:	6044      	str	r4, [r0, #4]
 80091be:	6085      	str	r5, [r0, #8]
 80091c0:	e00d      	b.n	80091de <_Balloc+0x76>
 80091c2:	2221      	movs	r2, #33	; 0x21
 80091c4:	2104      	movs	r1, #4
 80091c6:	0030      	movs	r0, r6
 80091c8:	f000 fc97 	bl	8009afa <_calloc_r>
 80091cc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80091ce:	60e8      	str	r0, [r5, #12]
 80091d0:	68db      	ldr	r3, [r3, #12]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d1e1      	bne.n	800919a <_Balloc+0x32>
 80091d6:	2000      	movs	r0, #0
 80091d8:	bd70      	pop	{r4, r5, r6, pc}
 80091da:	6802      	ldr	r2, [r0, #0]
 80091dc:	601a      	str	r2, [r3, #0]
 80091de:	2300      	movs	r3, #0
 80091e0:	6103      	str	r3, [r0, #16]
 80091e2:	60c3      	str	r3, [r0, #12]
 80091e4:	e7f8      	b.n	80091d8 <_Balloc+0x70>
 80091e6:	46c0      	nop			; (mov r8, r8)
 80091e8:	0800af26 	.word	0x0800af26
 80091ec:	0800b024 	.word	0x0800b024

080091f0 <_Bfree>:
 80091f0:	b570      	push	{r4, r5, r6, lr}
 80091f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80091f4:	0005      	movs	r5, r0
 80091f6:	000c      	movs	r4, r1
 80091f8:	2e00      	cmp	r6, #0
 80091fa:	d10e      	bne.n	800921a <_Bfree+0x2a>
 80091fc:	2010      	movs	r0, #16
 80091fe:	f7ff ff83 	bl	8009108 <malloc>
 8009202:	1e02      	subs	r2, r0, #0
 8009204:	6268      	str	r0, [r5, #36]	; 0x24
 8009206:	d104      	bne.n	8009212 <_Bfree+0x22>
 8009208:	218a      	movs	r1, #138	; 0x8a
 800920a:	4b09      	ldr	r3, [pc, #36]	; (8009230 <_Bfree+0x40>)
 800920c:	4809      	ldr	r0, [pc, #36]	; (8009234 <_Bfree+0x44>)
 800920e:	f000 ff1d 	bl	800a04c <__assert_func>
 8009212:	6046      	str	r6, [r0, #4]
 8009214:	6086      	str	r6, [r0, #8]
 8009216:	6006      	str	r6, [r0, #0]
 8009218:	60c6      	str	r6, [r0, #12]
 800921a:	2c00      	cmp	r4, #0
 800921c:	d007      	beq.n	800922e <_Bfree+0x3e>
 800921e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009220:	6862      	ldr	r2, [r4, #4]
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	0092      	lsls	r2, r2, #2
 8009226:	189b      	adds	r3, r3, r2
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	6022      	str	r2, [r4, #0]
 800922c:	601c      	str	r4, [r3, #0]
 800922e:	bd70      	pop	{r4, r5, r6, pc}
 8009230:	0800af26 	.word	0x0800af26
 8009234:	0800b024 	.word	0x0800b024

08009238 <__multadd>:
 8009238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800923a:	000e      	movs	r6, r1
 800923c:	9001      	str	r0, [sp, #4]
 800923e:	000c      	movs	r4, r1
 8009240:	001d      	movs	r5, r3
 8009242:	2000      	movs	r0, #0
 8009244:	690f      	ldr	r7, [r1, #16]
 8009246:	3614      	adds	r6, #20
 8009248:	6833      	ldr	r3, [r6, #0]
 800924a:	3001      	adds	r0, #1
 800924c:	b299      	uxth	r1, r3
 800924e:	4351      	muls	r1, r2
 8009250:	0c1b      	lsrs	r3, r3, #16
 8009252:	4353      	muls	r3, r2
 8009254:	1949      	adds	r1, r1, r5
 8009256:	0c0d      	lsrs	r5, r1, #16
 8009258:	195b      	adds	r3, r3, r5
 800925a:	0c1d      	lsrs	r5, r3, #16
 800925c:	b289      	uxth	r1, r1
 800925e:	041b      	lsls	r3, r3, #16
 8009260:	185b      	adds	r3, r3, r1
 8009262:	c608      	stmia	r6!, {r3}
 8009264:	4287      	cmp	r7, r0
 8009266:	dcef      	bgt.n	8009248 <__multadd+0x10>
 8009268:	2d00      	cmp	r5, #0
 800926a:	d022      	beq.n	80092b2 <__multadd+0x7a>
 800926c:	68a3      	ldr	r3, [r4, #8]
 800926e:	42bb      	cmp	r3, r7
 8009270:	dc19      	bgt.n	80092a6 <__multadd+0x6e>
 8009272:	6863      	ldr	r3, [r4, #4]
 8009274:	9801      	ldr	r0, [sp, #4]
 8009276:	1c59      	adds	r1, r3, #1
 8009278:	f7ff ff76 	bl	8009168 <_Balloc>
 800927c:	1e06      	subs	r6, r0, #0
 800927e:	d105      	bne.n	800928c <__multadd+0x54>
 8009280:	0002      	movs	r2, r0
 8009282:	21b5      	movs	r1, #181	; 0xb5
 8009284:	4b0c      	ldr	r3, [pc, #48]	; (80092b8 <__multadd+0x80>)
 8009286:	480d      	ldr	r0, [pc, #52]	; (80092bc <__multadd+0x84>)
 8009288:	f000 fee0 	bl	800a04c <__assert_func>
 800928c:	0021      	movs	r1, r4
 800928e:	6923      	ldr	r3, [r4, #16]
 8009290:	310c      	adds	r1, #12
 8009292:	1c9a      	adds	r2, r3, #2
 8009294:	0092      	lsls	r2, r2, #2
 8009296:	300c      	adds	r0, #12
 8009298:	f7ff ff5d 	bl	8009156 <memcpy>
 800929c:	0021      	movs	r1, r4
 800929e:	9801      	ldr	r0, [sp, #4]
 80092a0:	f7ff ffa6 	bl	80091f0 <_Bfree>
 80092a4:	0034      	movs	r4, r6
 80092a6:	1d3b      	adds	r3, r7, #4
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	18e3      	adds	r3, r4, r3
 80092ac:	605d      	str	r5, [r3, #4]
 80092ae:	1c7b      	adds	r3, r7, #1
 80092b0:	6123      	str	r3, [r4, #16]
 80092b2:	0020      	movs	r0, r4
 80092b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80092b6:	46c0      	nop			; (mov r8, r8)
 80092b8:	0800af98 	.word	0x0800af98
 80092bc:	0800b024 	.word	0x0800b024

080092c0 <__s2b>:
 80092c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092c2:	0006      	movs	r6, r0
 80092c4:	0018      	movs	r0, r3
 80092c6:	000c      	movs	r4, r1
 80092c8:	3008      	adds	r0, #8
 80092ca:	2109      	movs	r1, #9
 80092cc:	9301      	str	r3, [sp, #4]
 80092ce:	0015      	movs	r5, r2
 80092d0:	f7f6 ffc0 	bl	8000254 <__divsi3>
 80092d4:	2301      	movs	r3, #1
 80092d6:	2100      	movs	r1, #0
 80092d8:	4283      	cmp	r3, r0
 80092da:	db0a      	blt.n	80092f2 <__s2b+0x32>
 80092dc:	0030      	movs	r0, r6
 80092de:	f7ff ff43 	bl	8009168 <_Balloc>
 80092e2:	1e01      	subs	r1, r0, #0
 80092e4:	d108      	bne.n	80092f8 <__s2b+0x38>
 80092e6:	0002      	movs	r2, r0
 80092e8:	4b19      	ldr	r3, [pc, #100]	; (8009350 <__s2b+0x90>)
 80092ea:	481a      	ldr	r0, [pc, #104]	; (8009354 <__s2b+0x94>)
 80092ec:	31ce      	adds	r1, #206	; 0xce
 80092ee:	f000 fead 	bl	800a04c <__assert_func>
 80092f2:	005b      	lsls	r3, r3, #1
 80092f4:	3101      	adds	r1, #1
 80092f6:	e7ef      	b.n	80092d8 <__s2b+0x18>
 80092f8:	9b08      	ldr	r3, [sp, #32]
 80092fa:	6143      	str	r3, [r0, #20]
 80092fc:	2301      	movs	r3, #1
 80092fe:	6103      	str	r3, [r0, #16]
 8009300:	2d09      	cmp	r5, #9
 8009302:	dd18      	ble.n	8009336 <__s2b+0x76>
 8009304:	0023      	movs	r3, r4
 8009306:	3309      	adds	r3, #9
 8009308:	001f      	movs	r7, r3
 800930a:	9300      	str	r3, [sp, #0]
 800930c:	1964      	adds	r4, r4, r5
 800930e:	783b      	ldrb	r3, [r7, #0]
 8009310:	220a      	movs	r2, #10
 8009312:	0030      	movs	r0, r6
 8009314:	3b30      	subs	r3, #48	; 0x30
 8009316:	f7ff ff8f 	bl	8009238 <__multadd>
 800931a:	3701      	adds	r7, #1
 800931c:	0001      	movs	r1, r0
 800931e:	42a7      	cmp	r7, r4
 8009320:	d1f5      	bne.n	800930e <__s2b+0x4e>
 8009322:	002c      	movs	r4, r5
 8009324:	9b00      	ldr	r3, [sp, #0]
 8009326:	3c08      	subs	r4, #8
 8009328:	191c      	adds	r4, r3, r4
 800932a:	002f      	movs	r7, r5
 800932c:	9b01      	ldr	r3, [sp, #4]
 800932e:	429f      	cmp	r7, r3
 8009330:	db04      	blt.n	800933c <__s2b+0x7c>
 8009332:	0008      	movs	r0, r1
 8009334:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009336:	2509      	movs	r5, #9
 8009338:	340a      	adds	r4, #10
 800933a:	e7f6      	b.n	800932a <__s2b+0x6a>
 800933c:	1b63      	subs	r3, r4, r5
 800933e:	5ddb      	ldrb	r3, [r3, r7]
 8009340:	220a      	movs	r2, #10
 8009342:	0030      	movs	r0, r6
 8009344:	3b30      	subs	r3, #48	; 0x30
 8009346:	f7ff ff77 	bl	8009238 <__multadd>
 800934a:	3701      	adds	r7, #1
 800934c:	0001      	movs	r1, r0
 800934e:	e7ed      	b.n	800932c <__s2b+0x6c>
 8009350:	0800af98 	.word	0x0800af98
 8009354:	0800b024 	.word	0x0800b024

08009358 <__hi0bits>:
 8009358:	0003      	movs	r3, r0
 800935a:	0c02      	lsrs	r2, r0, #16
 800935c:	2000      	movs	r0, #0
 800935e:	4282      	cmp	r2, r0
 8009360:	d101      	bne.n	8009366 <__hi0bits+0xe>
 8009362:	041b      	lsls	r3, r3, #16
 8009364:	3010      	adds	r0, #16
 8009366:	0e1a      	lsrs	r2, r3, #24
 8009368:	d101      	bne.n	800936e <__hi0bits+0x16>
 800936a:	3008      	adds	r0, #8
 800936c:	021b      	lsls	r3, r3, #8
 800936e:	0f1a      	lsrs	r2, r3, #28
 8009370:	d101      	bne.n	8009376 <__hi0bits+0x1e>
 8009372:	3004      	adds	r0, #4
 8009374:	011b      	lsls	r3, r3, #4
 8009376:	0f9a      	lsrs	r2, r3, #30
 8009378:	d101      	bne.n	800937e <__hi0bits+0x26>
 800937a:	3002      	adds	r0, #2
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	2b00      	cmp	r3, #0
 8009380:	db03      	blt.n	800938a <__hi0bits+0x32>
 8009382:	3001      	adds	r0, #1
 8009384:	005b      	lsls	r3, r3, #1
 8009386:	d400      	bmi.n	800938a <__hi0bits+0x32>
 8009388:	2020      	movs	r0, #32
 800938a:	4770      	bx	lr

0800938c <__lo0bits>:
 800938c:	6803      	ldr	r3, [r0, #0]
 800938e:	0002      	movs	r2, r0
 8009390:	2107      	movs	r1, #7
 8009392:	0018      	movs	r0, r3
 8009394:	4008      	ands	r0, r1
 8009396:	420b      	tst	r3, r1
 8009398:	d00d      	beq.n	80093b6 <__lo0bits+0x2a>
 800939a:	3906      	subs	r1, #6
 800939c:	2000      	movs	r0, #0
 800939e:	420b      	tst	r3, r1
 80093a0:	d105      	bne.n	80093ae <__lo0bits+0x22>
 80093a2:	3002      	adds	r0, #2
 80093a4:	4203      	tst	r3, r0
 80093a6:	d003      	beq.n	80093b0 <__lo0bits+0x24>
 80093a8:	40cb      	lsrs	r3, r1
 80093aa:	0008      	movs	r0, r1
 80093ac:	6013      	str	r3, [r2, #0]
 80093ae:	4770      	bx	lr
 80093b0:	089b      	lsrs	r3, r3, #2
 80093b2:	6013      	str	r3, [r2, #0]
 80093b4:	e7fb      	b.n	80093ae <__lo0bits+0x22>
 80093b6:	b299      	uxth	r1, r3
 80093b8:	2900      	cmp	r1, #0
 80093ba:	d101      	bne.n	80093c0 <__lo0bits+0x34>
 80093bc:	2010      	movs	r0, #16
 80093be:	0c1b      	lsrs	r3, r3, #16
 80093c0:	b2d9      	uxtb	r1, r3
 80093c2:	2900      	cmp	r1, #0
 80093c4:	d101      	bne.n	80093ca <__lo0bits+0x3e>
 80093c6:	3008      	adds	r0, #8
 80093c8:	0a1b      	lsrs	r3, r3, #8
 80093ca:	0719      	lsls	r1, r3, #28
 80093cc:	d101      	bne.n	80093d2 <__lo0bits+0x46>
 80093ce:	3004      	adds	r0, #4
 80093d0:	091b      	lsrs	r3, r3, #4
 80093d2:	0799      	lsls	r1, r3, #30
 80093d4:	d101      	bne.n	80093da <__lo0bits+0x4e>
 80093d6:	3002      	adds	r0, #2
 80093d8:	089b      	lsrs	r3, r3, #2
 80093da:	07d9      	lsls	r1, r3, #31
 80093dc:	d4e9      	bmi.n	80093b2 <__lo0bits+0x26>
 80093de:	3001      	adds	r0, #1
 80093e0:	085b      	lsrs	r3, r3, #1
 80093e2:	d1e6      	bne.n	80093b2 <__lo0bits+0x26>
 80093e4:	2020      	movs	r0, #32
 80093e6:	e7e2      	b.n	80093ae <__lo0bits+0x22>

080093e8 <__i2b>:
 80093e8:	b510      	push	{r4, lr}
 80093ea:	000c      	movs	r4, r1
 80093ec:	2101      	movs	r1, #1
 80093ee:	f7ff febb 	bl	8009168 <_Balloc>
 80093f2:	2800      	cmp	r0, #0
 80093f4:	d106      	bne.n	8009404 <__i2b+0x1c>
 80093f6:	21a0      	movs	r1, #160	; 0xa0
 80093f8:	0002      	movs	r2, r0
 80093fa:	4b04      	ldr	r3, [pc, #16]	; (800940c <__i2b+0x24>)
 80093fc:	4804      	ldr	r0, [pc, #16]	; (8009410 <__i2b+0x28>)
 80093fe:	0049      	lsls	r1, r1, #1
 8009400:	f000 fe24 	bl	800a04c <__assert_func>
 8009404:	2301      	movs	r3, #1
 8009406:	6144      	str	r4, [r0, #20]
 8009408:	6103      	str	r3, [r0, #16]
 800940a:	bd10      	pop	{r4, pc}
 800940c:	0800af98 	.word	0x0800af98
 8009410:	0800b024 	.word	0x0800b024

08009414 <__multiply>:
 8009414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009416:	690b      	ldr	r3, [r1, #16]
 8009418:	0014      	movs	r4, r2
 800941a:	6912      	ldr	r2, [r2, #16]
 800941c:	000d      	movs	r5, r1
 800941e:	b089      	sub	sp, #36	; 0x24
 8009420:	4293      	cmp	r3, r2
 8009422:	da01      	bge.n	8009428 <__multiply+0x14>
 8009424:	0025      	movs	r5, r4
 8009426:	000c      	movs	r4, r1
 8009428:	692f      	ldr	r7, [r5, #16]
 800942a:	6926      	ldr	r6, [r4, #16]
 800942c:	6869      	ldr	r1, [r5, #4]
 800942e:	19bb      	adds	r3, r7, r6
 8009430:	9302      	str	r3, [sp, #8]
 8009432:	68ab      	ldr	r3, [r5, #8]
 8009434:	19ba      	adds	r2, r7, r6
 8009436:	4293      	cmp	r3, r2
 8009438:	da00      	bge.n	800943c <__multiply+0x28>
 800943a:	3101      	adds	r1, #1
 800943c:	f7ff fe94 	bl	8009168 <_Balloc>
 8009440:	9001      	str	r0, [sp, #4]
 8009442:	2800      	cmp	r0, #0
 8009444:	d106      	bne.n	8009454 <__multiply+0x40>
 8009446:	215e      	movs	r1, #94	; 0x5e
 8009448:	0002      	movs	r2, r0
 800944a:	4b48      	ldr	r3, [pc, #288]	; (800956c <__multiply+0x158>)
 800944c:	4848      	ldr	r0, [pc, #288]	; (8009570 <__multiply+0x15c>)
 800944e:	31ff      	adds	r1, #255	; 0xff
 8009450:	f000 fdfc 	bl	800a04c <__assert_func>
 8009454:	9b01      	ldr	r3, [sp, #4]
 8009456:	2200      	movs	r2, #0
 8009458:	3314      	adds	r3, #20
 800945a:	469c      	mov	ip, r3
 800945c:	19bb      	adds	r3, r7, r6
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	4463      	add	r3, ip
 8009462:	9303      	str	r3, [sp, #12]
 8009464:	4663      	mov	r3, ip
 8009466:	9903      	ldr	r1, [sp, #12]
 8009468:	428b      	cmp	r3, r1
 800946a:	d32c      	bcc.n	80094c6 <__multiply+0xb2>
 800946c:	002b      	movs	r3, r5
 800946e:	0022      	movs	r2, r4
 8009470:	3314      	adds	r3, #20
 8009472:	00bf      	lsls	r7, r7, #2
 8009474:	3214      	adds	r2, #20
 8009476:	9306      	str	r3, [sp, #24]
 8009478:	00b6      	lsls	r6, r6, #2
 800947a:	19db      	adds	r3, r3, r7
 800947c:	9304      	str	r3, [sp, #16]
 800947e:	1993      	adds	r3, r2, r6
 8009480:	9307      	str	r3, [sp, #28]
 8009482:	2304      	movs	r3, #4
 8009484:	9305      	str	r3, [sp, #20]
 8009486:	002b      	movs	r3, r5
 8009488:	9904      	ldr	r1, [sp, #16]
 800948a:	3315      	adds	r3, #21
 800948c:	9200      	str	r2, [sp, #0]
 800948e:	4299      	cmp	r1, r3
 8009490:	d305      	bcc.n	800949e <__multiply+0x8a>
 8009492:	1b4b      	subs	r3, r1, r5
 8009494:	3b15      	subs	r3, #21
 8009496:	089b      	lsrs	r3, r3, #2
 8009498:	3301      	adds	r3, #1
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	9305      	str	r3, [sp, #20]
 800949e:	9b07      	ldr	r3, [sp, #28]
 80094a0:	9a00      	ldr	r2, [sp, #0]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d311      	bcc.n	80094ca <__multiply+0xb6>
 80094a6:	9b02      	ldr	r3, [sp, #8]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	dd06      	ble.n	80094ba <__multiply+0xa6>
 80094ac:	9b03      	ldr	r3, [sp, #12]
 80094ae:	3b04      	subs	r3, #4
 80094b0:	9303      	str	r3, [sp, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	9300      	str	r3, [sp, #0]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d053      	beq.n	8009562 <__multiply+0x14e>
 80094ba:	9b01      	ldr	r3, [sp, #4]
 80094bc:	9a02      	ldr	r2, [sp, #8]
 80094be:	0018      	movs	r0, r3
 80094c0:	611a      	str	r2, [r3, #16]
 80094c2:	b009      	add	sp, #36	; 0x24
 80094c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094c6:	c304      	stmia	r3!, {r2}
 80094c8:	e7cd      	b.n	8009466 <__multiply+0x52>
 80094ca:	9b00      	ldr	r3, [sp, #0]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	b298      	uxth	r0, r3
 80094d0:	2800      	cmp	r0, #0
 80094d2:	d01b      	beq.n	800950c <__multiply+0xf8>
 80094d4:	4667      	mov	r7, ip
 80094d6:	2400      	movs	r4, #0
 80094d8:	9e06      	ldr	r6, [sp, #24]
 80094da:	ce02      	ldmia	r6!, {r1}
 80094dc:	683a      	ldr	r2, [r7, #0]
 80094de:	b28b      	uxth	r3, r1
 80094e0:	4343      	muls	r3, r0
 80094e2:	b292      	uxth	r2, r2
 80094e4:	189b      	adds	r3, r3, r2
 80094e6:	191b      	adds	r3, r3, r4
 80094e8:	0c0c      	lsrs	r4, r1, #16
 80094ea:	4344      	muls	r4, r0
 80094ec:	683a      	ldr	r2, [r7, #0]
 80094ee:	0c11      	lsrs	r1, r2, #16
 80094f0:	1861      	adds	r1, r4, r1
 80094f2:	0c1c      	lsrs	r4, r3, #16
 80094f4:	1909      	adds	r1, r1, r4
 80094f6:	0c0c      	lsrs	r4, r1, #16
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	0409      	lsls	r1, r1, #16
 80094fc:	430b      	orrs	r3, r1
 80094fe:	c708      	stmia	r7!, {r3}
 8009500:	9b04      	ldr	r3, [sp, #16]
 8009502:	42b3      	cmp	r3, r6
 8009504:	d8e9      	bhi.n	80094da <__multiply+0xc6>
 8009506:	4663      	mov	r3, ip
 8009508:	9a05      	ldr	r2, [sp, #20]
 800950a:	509c      	str	r4, [r3, r2]
 800950c:	9b00      	ldr	r3, [sp, #0]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	0c1e      	lsrs	r6, r3, #16
 8009512:	d020      	beq.n	8009556 <__multiply+0x142>
 8009514:	4663      	mov	r3, ip
 8009516:	002c      	movs	r4, r5
 8009518:	4660      	mov	r0, ip
 800951a:	2700      	movs	r7, #0
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	3414      	adds	r4, #20
 8009520:	6822      	ldr	r2, [r4, #0]
 8009522:	b29b      	uxth	r3, r3
 8009524:	b291      	uxth	r1, r2
 8009526:	4371      	muls	r1, r6
 8009528:	6802      	ldr	r2, [r0, #0]
 800952a:	0c12      	lsrs	r2, r2, #16
 800952c:	1889      	adds	r1, r1, r2
 800952e:	19cf      	adds	r7, r1, r7
 8009530:	0439      	lsls	r1, r7, #16
 8009532:	430b      	orrs	r3, r1
 8009534:	6003      	str	r3, [r0, #0]
 8009536:	cc02      	ldmia	r4!, {r1}
 8009538:	6843      	ldr	r3, [r0, #4]
 800953a:	0c09      	lsrs	r1, r1, #16
 800953c:	4371      	muls	r1, r6
 800953e:	b29b      	uxth	r3, r3
 8009540:	0c3f      	lsrs	r7, r7, #16
 8009542:	18cb      	adds	r3, r1, r3
 8009544:	9a04      	ldr	r2, [sp, #16]
 8009546:	19db      	adds	r3, r3, r7
 8009548:	0c1f      	lsrs	r7, r3, #16
 800954a:	3004      	adds	r0, #4
 800954c:	42a2      	cmp	r2, r4
 800954e:	d8e7      	bhi.n	8009520 <__multiply+0x10c>
 8009550:	4662      	mov	r2, ip
 8009552:	9905      	ldr	r1, [sp, #20]
 8009554:	5053      	str	r3, [r2, r1]
 8009556:	9b00      	ldr	r3, [sp, #0]
 8009558:	3304      	adds	r3, #4
 800955a:	9300      	str	r3, [sp, #0]
 800955c:	2304      	movs	r3, #4
 800955e:	449c      	add	ip, r3
 8009560:	e79d      	b.n	800949e <__multiply+0x8a>
 8009562:	9b02      	ldr	r3, [sp, #8]
 8009564:	3b01      	subs	r3, #1
 8009566:	9302      	str	r3, [sp, #8]
 8009568:	e79d      	b.n	80094a6 <__multiply+0x92>
 800956a:	46c0      	nop			; (mov r8, r8)
 800956c:	0800af98 	.word	0x0800af98
 8009570:	0800b024 	.word	0x0800b024

08009574 <__pow5mult>:
 8009574:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009576:	2303      	movs	r3, #3
 8009578:	0015      	movs	r5, r2
 800957a:	0007      	movs	r7, r0
 800957c:	000e      	movs	r6, r1
 800957e:	401a      	ands	r2, r3
 8009580:	421d      	tst	r5, r3
 8009582:	d008      	beq.n	8009596 <__pow5mult+0x22>
 8009584:	4925      	ldr	r1, [pc, #148]	; (800961c <__pow5mult+0xa8>)
 8009586:	3a01      	subs	r2, #1
 8009588:	0092      	lsls	r2, r2, #2
 800958a:	5852      	ldr	r2, [r2, r1]
 800958c:	2300      	movs	r3, #0
 800958e:	0031      	movs	r1, r6
 8009590:	f7ff fe52 	bl	8009238 <__multadd>
 8009594:	0006      	movs	r6, r0
 8009596:	10ad      	asrs	r5, r5, #2
 8009598:	d03d      	beq.n	8009616 <__pow5mult+0xa2>
 800959a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800959c:	2c00      	cmp	r4, #0
 800959e:	d10f      	bne.n	80095c0 <__pow5mult+0x4c>
 80095a0:	2010      	movs	r0, #16
 80095a2:	f7ff fdb1 	bl	8009108 <malloc>
 80095a6:	1e02      	subs	r2, r0, #0
 80095a8:	6278      	str	r0, [r7, #36]	; 0x24
 80095aa:	d105      	bne.n	80095b8 <__pow5mult+0x44>
 80095ac:	21d7      	movs	r1, #215	; 0xd7
 80095ae:	4b1c      	ldr	r3, [pc, #112]	; (8009620 <__pow5mult+0xac>)
 80095b0:	481c      	ldr	r0, [pc, #112]	; (8009624 <__pow5mult+0xb0>)
 80095b2:	0049      	lsls	r1, r1, #1
 80095b4:	f000 fd4a 	bl	800a04c <__assert_func>
 80095b8:	6044      	str	r4, [r0, #4]
 80095ba:	6084      	str	r4, [r0, #8]
 80095bc:	6004      	str	r4, [r0, #0]
 80095be:	60c4      	str	r4, [r0, #12]
 80095c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c2:	689c      	ldr	r4, [r3, #8]
 80095c4:	9301      	str	r3, [sp, #4]
 80095c6:	2c00      	cmp	r4, #0
 80095c8:	d108      	bne.n	80095dc <__pow5mult+0x68>
 80095ca:	0038      	movs	r0, r7
 80095cc:	4916      	ldr	r1, [pc, #88]	; (8009628 <__pow5mult+0xb4>)
 80095ce:	f7ff ff0b 	bl	80093e8 <__i2b>
 80095d2:	9b01      	ldr	r3, [sp, #4]
 80095d4:	0004      	movs	r4, r0
 80095d6:	6098      	str	r0, [r3, #8]
 80095d8:	2300      	movs	r3, #0
 80095da:	6003      	str	r3, [r0, #0]
 80095dc:	2301      	movs	r3, #1
 80095de:	421d      	tst	r5, r3
 80095e0:	d00a      	beq.n	80095f8 <__pow5mult+0x84>
 80095e2:	0031      	movs	r1, r6
 80095e4:	0022      	movs	r2, r4
 80095e6:	0038      	movs	r0, r7
 80095e8:	f7ff ff14 	bl	8009414 <__multiply>
 80095ec:	0031      	movs	r1, r6
 80095ee:	9001      	str	r0, [sp, #4]
 80095f0:	0038      	movs	r0, r7
 80095f2:	f7ff fdfd 	bl	80091f0 <_Bfree>
 80095f6:	9e01      	ldr	r6, [sp, #4]
 80095f8:	106d      	asrs	r5, r5, #1
 80095fa:	d00c      	beq.n	8009616 <__pow5mult+0xa2>
 80095fc:	6820      	ldr	r0, [r4, #0]
 80095fe:	2800      	cmp	r0, #0
 8009600:	d107      	bne.n	8009612 <__pow5mult+0x9e>
 8009602:	0022      	movs	r2, r4
 8009604:	0021      	movs	r1, r4
 8009606:	0038      	movs	r0, r7
 8009608:	f7ff ff04 	bl	8009414 <__multiply>
 800960c:	2300      	movs	r3, #0
 800960e:	6020      	str	r0, [r4, #0]
 8009610:	6003      	str	r3, [r0, #0]
 8009612:	0004      	movs	r4, r0
 8009614:	e7e2      	b.n	80095dc <__pow5mult+0x68>
 8009616:	0030      	movs	r0, r6
 8009618:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800961a:	46c0      	nop			; (mov r8, r8)
 800961c:	0800b170 	.word	0x0800b170
 8009620:	0800af26 	.word	0x0800af26
 8009624:	0800b024 	.word	0x0800b024
 8009628:	00000271 	.word	0x00000271

0800962c <__lshift>:
 800962c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800962e:	000c      	movs	r4, r1
 8009630:	0017      	movs	r7, r2
 8009632:	6923      	ldr	r3, [r4, #16]
 8009634:	1155      	asrs	r5, r2, #5
 8009636:	b087      	sub	sp, #28
 8009638:	18eb      	adds	r3, r5, r3
 800963a:	9302      	str	r3, [sp, #8]
 800963c:	3301      	adds	r3, #1
 800963e:	9301      	str	r3, [sp, #4]
 8009640:	6849      	ldr	r1, [r1, #4]
 8009642:	68a3      	ldr	r3, [r4, #8]
 8009644:	9004      	str	r0, [sp, #16]
 8009646:	9a01      	ldr	r2, [sp, #4]
 8009648:	4293      	cmp	r3, r2
 800964a:	db10      	blt.n	800966e <__lshift+0x42>
 800964c:	9804      	ldr	r0, [sp, #16]
 800964e:	f7ff fd8b 	bl	8009168 <_Balloc>
 8009652:	2300      	movs	r3, #0
 8009654:	0002      	movs	r2, r0
 8009656:	0006      	movs	r6, r0
 8009658:	0019      	movs	r1, r3
 800965a:	3214      	adds	r2, #20
 800965c:	4298      	cmp	r0, r3
 800965e:	d10c      	bne.n	800967a <__lshift+0x4e>
 8009660:	21da      	movs	r1, #218	; 0xda
 8009662:	0002      	movs	r2, r0
 8009664:	4b26      	ldr	r3, [pc, #152]	; (8009700 <__lshift+0xd4>)
 8009666:	4827      	ldr	r0, [pc, #156]	; (8009704 <__lshift+0xd8>)
 8009668:	31ff      	adds	r1, #255	; 0xff
 800966a:	f000 fcef 	bl	800a04c <__assert_func>
 800966e:	3101      	adds	r1, #1
 8009670:	005b      	lsls	r3, r3, #1
 8009672:	e7e8      	b.n	8009646 <__lshift+0x1a>
 8009674:	0098      	lsls	r0, r3, #2
 8009676:	5011      	str	r1, [r2, r0]
 8009678:	3301      	adds	r3, #1
 800967a:	42ab      	cmp	r3, r5
 800967c:	dbfa      	blt.n	8009674 <__lshift+0x48>
 800967e:	43eb      	mvns	r3, r5
 8009680:	17db      	asrs	r3, r3, #31
 8009682:	401d      	ands	r5, r3
 8009684:	211f      	movs	r1, #31
 8009686:	0023      	movs	r3, r4
 8009688:	0038      	movs	r0, r7
 800968a:	00ad      	lsls	r5, r5, #2
 800968c:	1955      	adds	r5, r2, r5
 800968e:	6922      	ldr	r2, [r4, #16]
 8009690:	3314      	adds	r3, #20
 8009692:	0092      	lsls	r2, r2, #2
 8009694:	4008      	ands	r0, r1
 8009696:	4684      	mov	ip, r0
 8009698:	189a      	adds	r2, r3, r2
 800969a:	420f      	tst	r7, r1
 800969c:	d02a      	beq.n	80096f4 <__lshift+0xc8>
 800969e:	3101      	adds	r1, #1
 80096a0:	1a09      	subs	r1, r1, r0
 80096a2:	9105      	str	r1, [sp, #20]
 80096a4:	2100      	movs	r1, #0
 80096a6:	9503      	str	r5, [sp, #12]
 80096a8:	4667      	mov	r7, ip
 80096aa:	6818      	ldr	r0, [r3, #0]
 80096ac:	40b8      	lsls	r0, r7
 80096ae:	4301      	orrs	r1, r0
 80096b0:	9803      	ldr	r0, [sp, #12]
 80096b2:	c002      	stmia	r0!, {r1}
 80096b4:	cb02      	ldmia	r3!, {r1}
 80096b6:	9003      	str	r0, [sp, #12]
 80096b8:	9805      	ldr	r0, [sp, #20]
 80096ba:	40c1      	lsrs	r1, r0
 80096bc:	429a      	cmp	r2, r3
 80096be:	d8f3      	bhi.n	80096a8 <__lshift+0x7c>
 80096c0:	0020      	movs	r0, r4
 80096c2:	3015      	adds	r0, #21
 80096c4:	2304      	movs	r3, #4
 80096c6:	4282      	cmp	r2, r0
 80096c8:	d304      	bcc.n	80096d4 <__lshift+0xa8>
 80096ca:	1b13      	subs	r3, r2, r4
 80096cc:	3b15      	subs	r3, #21
 80096ce:	089b      	lsrs	r3, r3, #2
 80096d0:	3301      	adds	r3, #1
 80096d2:	009b      	lsls	r3, r3, #2
 80096d4:	50e9      	str	r1, [r5, r3]
 80096d6:	2900      	cmp	r1, #0
 80096d8:	d002      	beq.n	80096e0 <__lshift+0xb4>
 80096da:	9b02      	ldr	r3, [sp, #8]
 80096dc:	3302      	adds	r3, #2
 80096de:	9301      	str	r3, [sp, #4]
 80096e0:	9b01      	ldr	r3, [sp, #4]
 80096e2:	9804      	ldr	r0, [sp, #16]
 80096e4:	3b01      	subs	r3, #1
 80096e6:	0021      	movs	r1, r4
 80096e8:	6133      	str	r3, [r6, #16]
 80096ea:	f7ff fd81 	bl	80091f0 <_Bfree>
 80096ee:	0030      	movs	r0, r6
 80096f0:	b007      	add	sp, #28
 80096f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096f4:	cb02      	ldmia	r3!, {r1}
 80096f6:	c502      	stmia	r5!, {r1}
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d8fb      	bhi.n	80096f4 <__lshift+0xc8>
 80096fc:	e7f0      	b.n	80096e0 <__lshift+0xb4>
 80096fe:	46c0      	nop			; (mov r8, r8)
 8009700:	0800af98 	.word	0x0800af98
 8009704:	0800b024 	.word	0x0800b024

08009708 <__mcmp>:
 8009708:	6902      	ldr	r2, [r0, #16]
 800970a:	690b      	ldr	r3, [r1, #16]
 800970c:	b530      	push	{r4, r5, lr}
 800970e:	0004      	movs	r4, r0
 8009710:	1ad0      	subs	r0, r2, r3
 8009712:	429a      	cmp	r2, r3
 8009714:	d10d      	bne.n	8009732 <__mcmp+0x2a>
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	3414      	adds	r4, #20
 800971a:	3114      	adds	r1, #20
 800971c:	18e2      	adds	r2, r4, r3
 800971e:	18c9      	adds	r1, r1, r3
 8009720:	3a04      	subs	r2, #4
 8009722:	3904      	subs	r1, #4
 8009724:	6815      	ldr	r5, [r2, #0]
 8009726:	680b      	ldr	r3, [r1, #0]
 8009728:	429d      	cmp	r5, r3
 800972a:	d003      	beq.n	8009734 <__mcmp+0x2c>
 800972c:	2001      	movs	r0, #1
 800972e:	429d      	cmp	r5, r3
 8009730:	d303      	bcc.n	800973a <__mcmp+0x32>
 8009732:	bd30      	pop	{r4, r5, pc}
 8009734:	4294      	cmp	r4, r2
 8009736:	d3f3      	bcc.n	8009720 <__mcmp+0x18>
 8009738:	e7fb      	b.n	8009732 <__mcmp+0x2a>
 800973a:	4240      	negs	r0, r0
 800973c:	e7f9      	b.n	8009732 <__mcmp+0x2a>
	...

08009740 <__mdiff>:
 8009740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009742:	000e      	movs	r6, r1
 8009744:	0007      	movs	r7, r0
 8009746:	0011      	movs	r1, r2
 8009748:	0030      	movs	r0, r6
 800974a:	b087      	sub	sp, #28
 800974c:	0014      	movs	r4, r2
 800974e:	f7ff ffdb 	bl	8009708 <__mcmp>
 8009752:	1e05      	subs	r5, r0, #0
 8009754:	d110      	bne.n	8009778 <__mdiff+0x38>
 8009756:	0001      	movs	r1, r0
 8009758:	0038      	movs	r0, r7
 800975a:	f7ff fd05 	bl	8009168 <_Balloc>
 800975e:	1e02      	subs	r2, r0, #0
 8009760:	d104      	bne.n	800976c <__mdiff+0x2c>
 8009762:	4b40      	ldr	r3, [pc, #256]	; (8009864 <__mdiff+0x124>)
 8009764:	4940      	ldr	r1, [pc, #256]	; (8009868 <__mdiff+0x128>)
 8009766:	4841      	ldr	r0, [pc, #260]	; (800986c <__mdiff+0x12c>)
 8009768:	f000 fc70 	bl	800a04c <__assert_func>
 800976c:	2301      	movs	r3, #1
 800976e:	6145      	str	r5, [r0, #20]
 8009770:	6103      	str	r3, [r0, #16]
 8009772:	0010      	movs	r0, r2
 8009774:	b007      	add	sp, #28
 8009776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009778:	2301      	movs	r3, #1
 800977a:	9301      	str	r3, [sp, #4]
 800977c:	2800      	cmp	r0, #0
 800977e:	db04      	blt.n	800978a <__mdiff+0x4a>
 8009780:	0023      	movs	r3, r4
 8009782:	0034      	movs	r4, r6
 8009784:	001e      	movs	r6, r3
 8009786:	2300      	movs	r3, #0
 8009788:	9301      	str	r3, [sp, #4]
 800978a:	0038      	movs	r0, r7
 800978c:	6861      	ldr	r1, [r4, #4]
 800978e:	f7ff fceb 	bl	8009168 <_Balloc>
 8009792:	1e02      	subs	r2, r0, #0
 8009794:	d103      	bne.n	800979e <__mdiff+0x5e>
 8009796:	2190      	movs	r1, #144	; 0x90
 8009798:	4b32      	ldr	r3, [pc, #200]	; (8009864 <__mdiff+0x124>)
 800979a:	0089      	lsls	r1, r1, #2
 800979c:	e7e3      	b.n	8009766 <__mdiff+0x26>
 800979e:	9b01      	ldr	r3, [sp, #4]
 80097a0:	2700      	movs	r7, #0
 80097a2:	60c3      	str	r3, [r0, #12]
 80097a4:	6920      	ldr	r0, [r4, #16]
 80097a6:	3414      	adds	r4, #20
 80097a8:	9401      	str	r4, [sp, #4]
 80097aa:	9b01      	ldr	r3, [sp, #4]
 80097ac:	0084      	lsls	r4, r0, #2
 80097ae:	191b      	adds	r3, r3, r4
 80097b0:	0034      	movs	r4, r6
 80097b2:	9302      	str	r3, [sp, #8]
 80097b4:	6933      	ldr	r3, [r6, #16]
 80097b6:	3414      	adds	r4, #20
 80097b8:	0099      	lsls	r1, r3, #2
 80097ba:	1863      	adds	r3, r4, r1
 80097bc:	9303      	str	r3, [sp, #12]
 80097be:	0013      	movs	r3, r2
 80097c0:	3314      	adds	r3, #20
 80097c2:	469c      	mov	ip, r3
 80097c4:	9305      	str	r3, [sp, #20]
 80097c6:	9b01      	ldr	r3, [sp, #4]
 80097c8:	9304      	str	r3, [sp, #16]
 80097ca:	9b04      	ldr	r3, [sp, #16]
 80097cc:	cc02      	ldmia	r4!, {r1}
 80097ce:	cb20      	ldmia	r3!, {r5}
 80097d0:	9304      	str	r3, [sp, #16]
 80097d2:	b2ab      	uxth	r3, r5
 80097d4:	19df      	adds	r7, r3, r7
 80097d6:	b28b      	uxth	r3, r1
 80097d8:	1afb      	subs	r3, r7, r3
 80097da:	0c09      	lsrs	r1, r1, #16
 80097dc:	0c2d      	lsrs	r5, r5, #16
 80097de:	1a6d      	subs	r5, r5, r1
 80097e0:	1419      	asrs	r1, r3, #16
 80097e2:	186d      	adds	r5, r5, r1
 80097e4:	4661      	mov	r1, ip
 80097e6:	142f      	asrs	r7, r5, #16
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	042d      	lsls	r5, r5, #16
 80097ec:	432b      	orrs	r3, r5
 80097ee:	c108      	stmia	r1!, {r3}
 80097f0:	9b03      	ldr	r3, [sp, #12]
 80097f2:	468c      	mov	ip, r1
 80097f4:	42a3      	cmp	r3, r4
 80097f6:	d8e8      	bhi.n	80097ca <__mdiff+0x8a>
 80097f8:	0031      	movs	r1, r6
 80097fa:	9c03      	ldr	r4, [sp, #12]
 80097fc:	3115      	adds	r1, #21
 80097fe:	2304      	movs	r3, #4
 8009800:	428c      	cmp	r4, r1
 8009802:	d304      	bcc.n	800980e <__mdiff+0xce>
 8009804:	1ba3      	subs	r3, r4, r6
 8009806:	3b15      	subs	r3, #21
 8009808:	089b      	lsrs	r3, r3, #2
 800980a:	3301      	adds	r3, #1
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	9901      	ldr	r1, [sp, #4]
 8009810:	18cc      	adds	r4, r1, r3
 8009812:	9905      	ldr	r1, [sp, #20]
 8009814:	0026      	movs	r6, r4
 8009816:	18cb      	adds	r3, r1, r3
 8009818:	469c      	mov	ip, r3
 800981a:	9902      	ldr	r1, [sp, #8]
 800981c:	428e      	cmp	r6, r1
 800981e:	d310      	bcc.n	8009842 <__mdiff+0x102>
 8009820:	9e02      	ldr	r6, [sp, #8]
 8009822:	1ee1      	subs	r1, r4, #3
 8009824:	2500      	movs	r5, #0
 8009826:	428e      	cmp	r6, r1
 8009828:	d304      	bcc.n	8009834 <__mdiff+0xf4>
 800982a:	0031      	movs	r1, r6
 800982c:	3103      	adds	r1, #3
 800982e:	1b0c      	subs	r4, r1, r4
 8009830:	08a4      	lsrs	r4, r4, #2
 8009832:	00a5      	lsls	r5, r4, #2
 8009834:	195b      	adds	r3, r3, r5
 8009836:	3b04      	subs	r3, #4
 8009838:	6819      	ldr	r1, [r3, #0]
 800983a:	2900      	cmp	r1, #0
 800983c:	d00f      	beq.n	800985e <__mdiff+0x11e>
 800983e:	6110      	str	r0, [r2, #16]
 8009840:	e797      	b.n	8009772 <__mdiff+0x32>
 8009842:	ce02      	ldmia	r6!, {r1}
 8009844:	b28d      	uxth	r5, r1
 8009846:	19ed      	adds	r5, r5, r7
 8009848:	0c0f      	lsrs	r7, r1, #16
 800984a:	1429      	asrs	r1, r5, #16
 800984c:	1879      	adds	r1, r7, r1
 800984e:	140f      	asrs	r7, r1, #16
 8009850:	b2ad      	uxth	r5, r5
 8009852:	0409      	lsls	r1, r1, #16
 8009854:	430d      	orrs	r5, r1
 8009856:	4661      	mov	r1, ip
 8009858:	c120      	stmia	r1!, {r5}
 800985a:	468c      	mov	ip, r1
 800985c:	e7dd      	b.n	800981a <__mdiff+0xda>
 800985e:	3801      	subs	r0, #1
 8009860:	e7e9      	b.n	8009836 <__mdiff+0xf6>
 8009862:	46c0      	nop			; (mov r8, r8)
 8009864:	0800af98 	.word	0x0800af98
 8009868:	00000232 	.word	0x00000232
 800986c:	0800b024 	.word	0x0800b024

08009870 <__ulp>:
 8009870:	4b0f      	ldr	r3, [pc, #60]	; (80098b0 <__ulp+0x40>)
 8009872:	4019      	ands	r1, r3
 8009874:	4b0f      	ldr	r3, [pc, #60]	; (80098b4 <__ulp+0x44>)
 8009876:	18c9      	adds	r1, r1, r3
 8009878:	2900      	cmp	r1, #0
 800987a:	dd04      	ble.n	8009886 <__ulp+0x16>
 800987c:	2200      	movs	r2, #0
 800987e:	000b      	movs	r3, r1
 8009880:	0010      	movs	r0, r2
 8009882:	0019      	movs	r1, r3
 8009884:	4770      	bx	lr
 8009886:	4249      	negs	r1, r1
 8009888:	2200      	movs	r2, #0
 800988a:	2300      	movs	r3, #0
 800988c:	1509      	asrs	r1, r1, #20
 800988e:	2913      	cmp	r1, #19
 8009890:	dc04      	bgt.n	800989c <__ulp+0x2c>
 8009892:	2080      	movs	r0, #128	; 0x80
 8009894:	0300      	lsls	r0, r0, #12
 8009896:	4108      	asrs	r0, r1
 8009898:	0003      	movs	r3, r0
 800989a:	e7f1      	b.n	8009880 <__ulp+0x10>
 800989c:	3914      	subs	r1, #20
 800989e:	2001      	movs	r0, #1
 80098a0:	291e      	cmp	r1, #30
 80098a2:	dc02      	bgt.n	80098aa <__ulp+0x3a>
 80098a4:	2080      	movs	r0, #128	; 0x80
 80098a6:	0600      	lsls	r0, r0, #24
 80098a8:	40c8      	lsrs	r0, r1
 80098aa:	0002      	movs	r2, r0
 80098ac:	e7e8      	b.n	8009880 <__ulp+0x10>
 80098ae:	46c0      	nop			; (mov r8, r8)
 80098b0:	7ff00000 	.word	0x7ff00000
 80098b4:	fcc00000 	.word	0xfcc00000

080098b8 <__b2d>:
 80098b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098ba:	0006      	movs	r6, r0
 80098bc:	6903      	ldr	r3, [r0, #16]
 80098be:	3614      	adds	r6, #20
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	18f3      	adds	r3, r6, r3
 80098c4:	1f1d      	subs	r5, r3, #4
 80098c6:	682c      	ldr	r4, [r5, #0]
 80098c8:	000f      	movs	r7, r1
 80098ca:	0020      	movs	r0, r4
 80098cc:	9301      	str	r3, [sp, #4]
 80098ce:	f7ff fd43 	bl	8009358 <__hi0bits>
 80098d2:	2320      	movs	r3, #32
 80098d4:	1a1b      	subs	r3, r3, r0
 80098d6:	491f      	ldr	r1, [pc, #124]	; (8009954 <__b2d+0x9c>)
 80098d8:	603b      	str	r3, [r7, #0]
 80098da:	280a      	cmp	r0, #10
 80098dc:	dc16      	bgt.n	800990c <__b2d+0x54>
 80098de:	230b      	movs	r3, #11
 80098e0:	0027      	movs	r7, r4
 80098e2:	1a1b      	subs	r3, r3, r0
 80098e4:	40df      	lsrs	r7, r3
 80098e6:	4339      	orrs	r1, r7
 80098e8:	469c      	mov	ip, r3
 80098ea:	000b      	movs	r3, r1
 80098ec:	2100      	movs	r1, #0
 80098ee:	42ae      	cmp	r6, r5
 80098f0:	d202      	bcs.n	80098f8 <__b2d+0x40>
 80098f2:	9901      	ldr	r1, [sp, #4]
 80098f4:	3908      	subs	r1, #8
 80098f6:	6809      	ldr	r1, [r1, #0]
 80098f8:	3015      	adds	r0, #21
 80098fa:	4084      	lsls	r4, r0
 80098fc:	4660      	mov	r0, ip
 80098fe:	40c1      	lsrs	r1, r0
 8009900:	430c      	orrs	r4, r1
 8009902:	0022      	movs	r2, r4
 8009904:	0010      	movs	r0, r2
 8009906:	0019      	movs	r1, r3
 8009908:	b003      	add	sp, #12
 800990a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800990c:	2700      	movs	r7, #0
 800990e:	42ae      	cmp	r6, r5
 8009910:	d202      	bcs.n	8009918 <__b2d+0x60>
 8009912:	9d01      	ldr	r5, [sp, #4]
 8009914:	3d08      	subs	r5, #8
 8009916:	682f      	ldr	r7, [r5, #0]
 8009918:	230b      	movs	r3, #11
 800991a:	425b      	negs	r3, r3
 800991c:	469c      	mov	ip, r3
 800991e:	4484      	add	ip, r0
 8009920:	280b      	cmp	r0, #11
 8009922:	d013      	beq.n	800994c <__b2d+0x94>
 8009924:	4663      	mov	r3, ip
 8009926:	2020      	movs	r0, #32
 8009928:	409c      	lsls	r4, r3
 800992a:	1ac0      	subs	r0, r0, r3
 800992c:	003b      	movs	r3, r7
 800992e:	40c3      	lsrs	r3, r0
 8009930:	431c      	orrs	r4, r3
 8009932:	4321      	orrs	r1, r4
 8009934:	000b      	movs	r3, r1
 8009936:	2100      	movs	r1, #0
 8009938:	42b5      	cmp	r5, r6
 800993a:	d901      	bls.n	8009940 <__b2d+0x88>
 800993c:	3d04      	subs	r5, #4
 800993e:	6829      	ldr	r1, [r5, #0]
 8009940:	4664      	mov	r4, ip
 8009942:	40c1      	lsrs	r1, r0
 8009944:	40a7      	lsls	r7, r4
 8009946:	430f      	orrs	r7, r1
 8009948:	003a      	movs	r2, r7
 800994a:	e7db      	b.n	8009904 <__b2d+0x4c>
 800994c:	4321      	orrs	r1, r4
 800994e:	000b      	movs	r3, r1
 8009950:	e7fa      	b.n	8009948 <__b2d+0x90>
 8009952:	46c0      	nop			; (mov r8, r8)
 8009954:	3ff00000 	.word	0x3ff00000

08009958 <__d2b>:
 8009958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800995a:	2101      	movs	r1, #1
 800995c:	0014      	movs	r4, r2
 800995e:	001e      	movs	r6, r3
 8009960:	9f08      	ldr	r7, [sp, #32]
 8009962:	f7ff fc01 	bl	8009168 <_Balloc>
 8009966:	1e05      	subs	r5, r0, #0
 8009968:	d105      	bne.n	8009976 <__d2b+0x1e>
 800996a:	0002      	movs	r2, r0
 800996c:	4b26      	ldr	r3, [pc, #152]	; (8009a08 <__d2b+0xb0>)
 800996e:	4927      	ldr	r1, [pc, #156]	; (8009a0c <__d2b+0xb4>)
 8009970:	4827      	ldr	r0, [pc, #156]	; (8009a10 <__d2b+0xb8>)
 8009972:	f000 fb6b 	bl	800a04c <__assert_func>
 8009976:	0333      	lsls	r3, r6, #12
 8009978:	0076      	lsls	r6, r6, #1
 800997a:	0b1b      	lsrs	r3, r3, #12
 800997c:	0d76      	lsrs	r6, r6, #21
 800997e:	d124      	bne.n	80099ca <__d2b+0x72>
 8009980:	9301      	str	r3, [sp, #4]
 8009982:	2c00      	cmp	r4, #0
 8009984:	d027      	beq.n	80099d6 <__d2b+0x7e>
 8009986:	4668      	mov	r0, sp
 8009988:	9400      	str	r4, [sp, #0]
 800998a:	f7ff fcff 	bl	800938c <__lo0bits>
 800998e:	9c00      	ldr	r4, [sp, #0]
 8009990:	2800      	cmp	r0, #0
 8009992:	d01e      	beq.n	80099d2 <__d2b+0x7a>
 8009994:	9b01      	ldr	r3, [sp, #4]
 8009996:	2120      	movs	r1, #32
 8009998:	001a      	movs	r2, r3
 800999a:	1a09      	subs	r1, r1, r0
 800999c:	408a      	lsls	r2, r1
 800999e:	40c3      	lsrs	r3, r0
 80099a0:	4322      	orrs	r2, r4
 80099a2:	616a      	str	r2, [r5, #20]
 80099a4:	9301      	str	r3, [sp, #4]
 80099a6:	9c01      	ldr	r4, [sp, #4]
 80099a8:	61ac      	str	r4, [r5, #24]
 80099aa:	1e63      	subs	r3, r4, #1
 80099ac:	419c      	sbcs	r4, r3
 80099ae:	3401      	adds	r4, #1
 80099b0:	612c      	str	r4, [r5, #16]
 80099b2:	2e00      	cmp	r6, #0
 80099b4:	d018      	beq.n	80099e8 <__d2b+0x90>
 80099b6:	4b17      	ldr	r3, [pc, #92]	; (8009a14 <__d2b+0xbc>)
 80099b8:	18f6      	adds	r6, r6, r3
 80099ba:	2335      	movs	r3, #53	; 0x35
 80099bc:	1836      	adds	r6, r6, r0
 80099be:	1a18      	subs	r0, r3, r0
 80099c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099c2:	603e      	str	r6, [r7, #0]
 80099c4:	6018      	str	r0, [r3, #0]
 80099c6:	0028      	movs	r0, r5
 80099c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80099ca:	2280      	movs	r2, #128	; 0x80
 80099cc:	0352      	lsls	r2, r2, #13
 80099ce:	4313      	orrs	r3, r2
 80099d0:	e7d6      	b.n	8009980 <__d2b+0x28>
 80099d2:	616c      	str	r4, [r5, #20]
 80099d4:	e7e7      	b.n	80099a6 <__d2b+0x4e>
 80099d6:	a801      	add	r0, sp, #4
 80099d8:	f7ff fcd8 	bl	800938c <__lo0bits>
 80099dc:	2401      	movs	r4, #1
 80099de:	9b01      	ldr	r3, [sp, #4]
 80099e0:	612c      	str	r4, [r5, #16]
 80099e2:	616b      	str	r3, [r5, #20]
 80099e4:	3020      	adds	r0, #32
 80099e6:	e7e4      	b.n	80099b2 <__d2b+0x5a>
 80099e8:	4b0b      	ldr	r3, [pc, #44]	; (8009a18 <__d2b+0xc0>)
 80099ea:	18c0      	adds	r0, r0, r3
 80099ec:	4b0b      	ldr	r3, [pc, #44]	; (8009a1c <__d2b+0xc4>)
 80099ee:	6038      	str	r0, [r7, #0]
 80099f0:	18e3      	adds	r3, r4, r3
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	18eb      	adds	r3, r5, r3
 80099f6:	6958      	ldr	r0, [r3, #20]
 80099f8:	f7ff fcae 	bl	8009358 <__hi0bits>
 80099fc:	0164      	lsls	r4, r4, #5
 80099fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a00:	1a24      	subs	r4, r4, r0
 8009a02:	601c      	str	r4, [r3, #0]
 8009a04:	e7df      	b.n	80099c6 <__d2b+0x6e>
 8009a06:	46c0      	nop			; (mov r8, r8)
 8009a08:	0800af98 	.word	0x0800af98
 8009a0c:	0000030a 	.word	0x0000030a
 8009a10:	0800b024 	.word	0x0800b024
 8009a14:	fffffbcd 	.word	0xfffffbcd
 8009a18:	fffffbce 	.word	0xfffffbce
 8009a1c:	3fffffff 	.word	0x3fffffff

08009a20 <__ratio>:
 8009a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a22:	b087      	sub	sp, #28
 8009a24:	000f      	movs	r7, r1
 8009a26:	a904      	add	r1, sp, #16
 8009a28:	0006      	movs	r6, r0
 8009a2a:	f7ff ff45 	bl	80098b8 <__b2d>
 8009a2e:	9000      	str	r0, [sp, #0]
 8009a30:	9101      	str	r1, [sp, #4]
 8009a32:	9c00      	ldr	r4, [sp, #0]
 8009a34:	9d01      	ldr	r5, [sp, #4]
 8009a36:	0038      	movs	r0, r7
 8009a38:	a905      	add	r1, sp, #20
 8009a3a:	f7ff ff3d 	bl	80098b8 <__b2d>
 8009a3e:	9002      	str	r0, [sp, #8]
 8009a40:	9103      	str	r1, [sp, #12]
 8009a42:	9a02      	ldr	r2, [sp, #8]
 8009a44:	9b03      	ldr	r3, [sp, #12]
 8009a46:	6931      	ldr	r1, [r6, #16]
 8009a48:	6938      	ldr	r0, [r7, #16]
 8009a4a:	9e05      	ldr	r6, [sp, #20]
 8009a4c:	1a08      	subs	r0, r1, r0
 8009a4e:	9904      	ldr	r1, [sp, #16]
 8009a50:	0140      	lsls	r0, r0, #5
 8009a52:	1b89      	subs	r1, r1, r6
 8009a54:	1841      	adds	r1, r0, r1
 8009a56:	0508      	lsls	r0, r1, #20
 8009a58:	2900      	cmp	r1, #0
 8009a5a:	dd07      	ble.n	8009a6c <__ratio+0x4c>
 8009a5c:	9901      	ldr	r1, [sp, #4]
 8009a5e:	1845      	adds	r5, r0, r1
 8009a60:	0020      	movs	r0, r4
 8009a62:	0029      	movs	r1, r5
 8009a64:	f7f7 fa04 	bl	8000e70 <__aeabi_ddiv>
 8009a68:	b007      	add	sp, #28
 8009a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a6c:	9903      	ldr	r1, [sp, #12]
 8009a6e:	1a0b      	subs	r3, r1, r0
 8009a70:	e7f6      	b.n	8009a60 <__ratio+0x40>

08009a72 <__copybits>:
 8009a72:	b570      	push	{r4, r5, r6, lr}
 8009a74:	0014      	movs	r4, r2
 8009a76:	0005      	movs	r5, r0
 8009a78:	3901      	subs	r1, #1
 8009a7a:	6913      	ldr	r3, [r2, #16]
 8009a7c:	1149      	asrs	r1, r1, #5
 8009a7e:	3101      	adds	r1, #1
 8009a80:	0089      	lsls	r1, r1, #2
 8009a82:	3414      	adds	r4, #20
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	1841      	adds	r1, r0, r1
 8009a88:	18e3      	adds	r3, r4, r3
 8009a8a:	42a3      	cmp	r3, r4
 8009a8c:	d80d      	bhi.n	8009aaa <__copybits+0x38>
 8009a8e:	0014      	movs	r4, r2
 8009a90:	3411      	adds	r4, #17
 8009a92:	2500      	movs	r5, #0
 8009a94:	429c      	cmp	r4, r3
 8009a96:	d803      	bhi.n	8009aa0 <__copybits+0x2e>
 8009a98:	1a9b      	subs	r3, r3, r2
 8009a9a:	3b11      	subs	r3, #17
 8009a9c:	089b      	lsrs	r3, r3, #2
 8009a9e:	009d      	lsls	r5, r3, #2
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	1940      	adds	r0, r0, r5
 8009aa4:	4281      	cmp	r1, r0
 8009aa6:	d803      	bhi.n	8009ab0 <__copybits+0x3e>
 8009aa8:	bd70      	pop	{r4, r5, r6, pc}
 8009aaa:	cc40      	ldmia	r4!, {r6}
 8009aac:	c540      	stmia	r5!, {r6}
 8009aae:	e7ec      	b.n	8009a8a <__copybits+0x18>
 8009ab0:	c008      	stmia	r0!, {r3}
 8009ab2:	e7f7      	b.n	8009aa4 <__copybits+0x32>

08009ab4 <__any_on>:
 8009ab4:	0002      	movs	r2, r0
 8009ab6:	6900      	ldr	r0, [r0, #16]
 8009ab8:	b510      	push	{r4, lr}
 8009aba:	3214      	adds	r2, #20
 8009abc:	114b      	asrs	r3, r1, #5
 8009abe:	4298      	cmp	r0, r3
 8009ac0:	db13      	blt.n	8009aea <__any_on+0x36>
 8009ac2:	dd0c      	ble.n	8009ade <__any_on+0x2a>
 8009ac4:	241f      	movs	r4, #31
 8009ac6:	0008      	movs	r0, r1
 8009ac8:	4020      	ands	r0, r4
 8009aca:	4221      	tst	r1, r4
 8009acc:	d007      	beq.n	8009ade <__any_on+0x2a>
 8009ace:	0099      	lsls	r1, r3, #2
 8009ad0:	588c      	ldr	r4, [r1, r2]
 8009ad2:	0021      	movs	r1, r4
 8009ad4:	40c1      	lsrs	r1, r0
 8009ad6:	4081      	lsls	r1, r0
 8009ad8:	2001      	movs	r0, #1
 8009ada:	428c      	cmp	r4, r1
 8009adc:	d104      	bne.n	8009ae8 <__any_on+0x34>
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	18d3      	adds	r3, r2, r3
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d803      	bhi.n	8009aee <__any_on+0x3a>
 8009ae6:	2000      	movs	r0, #0
 8009ae8:	bd10      	pop	{r4, pc}
 8009aea:	0003      	movs	r3, r0
 8009aec:	e7f7      	b.n	8009ade <__any_on+0x2a>
 8009aee:	3b04      	subs	r3, #4
 8009af0:	6819      	ldr	r1, [r3, #0]
 8009af2:	2900      	cmp	r1, #0
 8009af4:	d0f5      	beq.n	8009ae2 <__any_on+0x2e>
 8009af6:	2001      	movs	r0, #1
 8009af8:	e7f6      	b.n	8009ae8 <__any_on+0x34>

08009afa <_calloc_r>:
 8009afa:	b570      	push	{r4, r5, r6, lr}
 8009afc:	0c13      	lsrs	r3, r2, #16
 8009afe:	0c0d      	lsrs	r5, r1, #16
 8009b00:	d11e      	bne.n	8009b40 <_calloc_r+0x46>
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d10c      	bne.n	8009b20 <_calloc_r+0x26>
 8009b06:	b289      	uxth	r1, r1
 8009b08:	b294      	uxth	r4, r2
 8009b0a:	434c      	muls	r4, r1
 8009b0c:	0021      	movs	r1, r4
 8009b0e:	f000 f88d 	bl	8009c2c <_malloc_r>
 8009b12:	1e05      	subs	r5, r0, #0
 8009b14:	d01b      	beq.n	8009b4e <_calloc_r+0x54>
 8009b16:	0022      	movs	r2, r4
 8009b18:	2100      	movs	r1, #0
 8009b1a:	f7fc fb63 	bl	80061e4 <memset>
 8009b1e:	e016      	b.n	8009b4e <_calloc_r+0x54>
 8009b20:	1c1d      	adds	r5, r3, #0
 8009b22:	1c0b      	adds	r3, r1, #0
 8009b24:	b292      	uxth	r2, r2
 8009b26:	b289      	uxth	r1, r1
 8009b28:	b29c      	uxth	r4, r3
 8009b2a:	4351      	muls	r1, r2
 8009b2c:	b2ab      	uxth	r3, r5
 8009b2e:	4363      	muls	r3, r4
 8009b30:	0c0c      	lsrs	r4, r1, #16
 8009b32:	191c      	adds	r4, r3, r4
 8009b34:	0c22      	lsrs	r2, r4, #16
 8009b36:	d107      	bne.n	8009b48 <_calloc_r+0x4e>
 8009b38:	0424      	lsls	r4, r4, #16
 8009b3a:	b289      	uxth	r1, r1
 8009b3c:	430c      	orrs	r4, r1
 8009b3e:	e7e5      	b.n	8009b0c <_calloc_r+0x12>
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d101      	bne.n	8009b48 <_calloc_r+0x4e>
 8009b44:	1c13      	adds	r3, r2, #0
 8009b46:	e7ed      	b.n	8009b24 <_calloc_r+0x2a>
 8009b48:	230c      	movs	r3, #12
 8009b4a:	2500      	movs	r5, #0
 8009b4c:	6003      	str	r3, [r0, #0]
 8009b4e:	0028      	movs	r0, r5
 8009b50:	bd70      	pop	{r4, r5, r6, pc}
	...

08009b54 <_free_r>:
 8009b54:	b570      	push	{r4, r5, r6, lr}
 8009b56:	0005      	movs	r5, r0
 8009b58:	2900      	cmp	r1, #0
 8009b5a:	d010      	beq.n	8009b7e <_free_r+0x2a>
 8009b5c:	1f0c      	subs	r4, r1, #4
 8009b5e:	6823      	ldr	r3, [r4, #0]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	da00      	bge.n	8009b66 <_free_r+0x12>
 8009b64:	18e4      	adds	r4, r4, r3
 8009b66:	0028      	movs	r0, r5
 8009b68:	f000 fab2 	bl	800a0d0 <__malloc_lock>
 8009b6c:	4a1d      	ldr	r2, [pc, #116]	; (8009be4 <_free_r+0x90>)
 8009b6e:	6813      	ldr	r3, [r2, #0]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d105      	bne.n	8009b80 <_free_r+0x2c>
 8009b74:	6063      	str	r3, [r4, #4]
 8009b76:	6014      	str	r4, [r2, #0]
 8009b78:	0028      	movs	r0, r5
 8009b7a:	f000 fab1 	bl	800a0e0 <__malloc_unlock>
 8009b7e:	bd70      	pop	{r4, r5, r6, pc}
 8009b80:	42a3      	cmp	r3, r4
 8009b82:	d908      	bls.n	8009b96 <_free_r+0x42>
 8009b84:	6821      	ldr	r1, [r4, #0]
 8009b86:	1860      	adds	r0, r4, r1
 8009b88:	4283      	cmp	r3, r0
 8009b8a:	d1f3      	bne.n	8009b74 <_free_r+0x20>
 8009b8c:	6818      	ldr	r0, [r3, #0]
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	1841      	adds	r1, r0, r1
 8009b92:	6021      	str	r1, [r4, #0]
 8009b94:	e7ee      	b.n	8009b74 <_free_r+0x20>
 8009b96:	001a      	movs	r2, r3
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d001      	beq.n	8009ba2 <_free_r+0x4e>
 8009b9e:	42a3      	cmp	r3, r4
 8009ba0:	d9f9      	bls.n	8009b96 <_free_r+0x42>
 8009ba2:	6811      	ldr	r1, [r2, #0]
 8009ba4:	1850      	adds	r0, r2, r1
 8009ba6:	42a0      	cmp	r0, r4
 8009ba8:	d10b      	bne.n	8009bc2 <_free_r+0x6e>
 8009baa:	6820      	ldr	r0, [r4, #0]
 8009bac:	1809      	adds	r1, r1, r0
 8009bae:	1850      	adds	r0, r2, r1
 8009bb0:	6011      	str	r1, [r2, #0]
 8009bb2:	4283      	cmp	r3, r0
 8009bb4:	d1e0      	bne.n	8009b78 <_free_r+0x24>
 8009bb6:	6818      	ldr	r0, [r3, #0]
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	1841      	adds	r1, r0, r1
 8009bbc:	6011      	str	r1, [r2, #0]
 8009bbe:	6053      	str	r3, [r2, #4]
 8009bc0:	e7da      	b.n	8009b78 <_free_r+0x24>
 8009bc2:	42a0      	cmp	r0, r4
 8009bc4:	d902      	bls.n	8009bcc <_free_r+0x78>
 8009bc6:	230c      	movs	r3, #12
 8009bc8:	602b      	str	r3, [r5, #0]
 8009bca:	e7d5      	b.n	8009b78 <_free_r+0x24>
 8009bcc:	6821      	ldr	r1, [r4, #0]
 8009bce:	1860      	adds	r0, r4, r1
 8009bd0:	4283      	cmp	r3, r0
 8009bd2:	d103      	bne.n	8009bdc <_free_r+0x88>
 8009bd4:	6818      	ldr	r0, [r3, #0]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	1841      	adds	r1, r0, r1
 8009bda:	6021      	str	r1, [r4, #0]
 8009bdc:	6063      	str	r3, [r4, #4]
 8009bde:	6054      	str	r4, [r2, #4]
 8009be0:	e7ca      	b.n	8009b78 <_free_r+0x24>
 8009be2:	46c0      	nop			; (mov r8, r8)
 8009be4:	200003a8 	.word	0x200003a8

08009be8 <sbrk_aligned>:
 8009be8:	b570      	push	{r4, r5, r6, lr}
 8009bea:	4e0f      	ldr	r6, [pc, #60]	; (8009c28 <sbrk_aligned+0x40>)
 8009bec:	000d      	movs	r5, r1
 8009bee:	6831      	ldr	r1, [r6, #0]
 8009bf0:	0004      	movs	r4, r0
 8009bf2:	2900      	cmp	r1, #0
 8009bf4:	d102      	bne.n	8009bfc <sbrk_aligned+0x14>
 8009bf6:	f000 f9f7 	bl	8009fe8 <_sbrk_r>
 8009bfa:	6030      	str	r0, [r6, #0]
 8009bfc:	0029      	movs	r1, r5
 8009bfe:	0020      	movs	r0, r4
 8009c00:	f000 f9f2 	bl	8009fe8 <_sbrk_r>
 8009c04:	1c43      	adds	r3, r0, #1
 8009c06:	d00a      	beq.n	8009c1e <sbrk_aligned+0x36>
 8009c08:	2303      	movs	r3, #3
 8009c0a:	1cc5      	adds	r5, r0, #3
 8009c0c:	439d      	bics	r5, r3
 8009c0e:	42a8      	cmp	r0, r5
 8009c10:	d007      	beq.n	8009c22 <sbrk_aligned+0x3a>
 8009c12:	1a29      	subs	r1, r5, r0
 8009c14:	0020      	movs	r0, r4
 8009c16:	f000 f9e7 	bl	8009fe8 <_sbrk_r>
 8009c1a:	1c43      	adds	r3, r0, #1
 8009c1c:	d101      	bne.n	8009c22 <sbrk_aligned+0x3a>
 8009c1e:	2501      	movs	r5, #1
 8009c20:	426d      	negs	r5, r5
 8009c22:	0028      	movs	r0, r5
 8009c24:	bd70      	pop	{r4, r5, r6, pc}
 8009c26:	46c0      	nop			; (mov r8, r8)
 8009c28:	200003ac 	.word	0x200003ac

08009c2c <_malloc_r>:
 8009c2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c2e:	2203      	movs	r2, #3
 8009c30:	1ccb      	adds	r3, r1, #3
 8009c32:	4393      	bics	r3, r2
 8009c34:	3308      	adds	r3, #8
 8009c36:	0006      	movs	r6, r0
 8009c38:	001f      	movs	r7, r3
 8009c3a:	2b0c      	cmp	r3, #12
 8009c3c:	d232      	bcs.n	8009ca4 <_malloc_r+0x78>
 8009c3e:	270c      	movs	r7, #12
 8009c40:	42b9      	cmp	r1, r7
 8009c42:	d831      	bhi.n	8009ca8 <_malloc_r+0x7c>
 8009c44:	0030      	movs	r0, r6
 8009c46:	f000 fa43 	bl	800a0d0 <__malloc_lock>
 8009c4a:	4d32      	ldr	r5, [pc, #200]	; (8009d14 <_malloc_r+0xe8>)
 8009c4c:	682b      	ldr	r3, [r5, #0]
 8009c4e:	001c      	movs	r4, r3
 8009c50:	2c00      	cmp	r4, #0
 8009c52:	d12e      	bne.n	8009cb2 <_malloc_r+0x86>
 8009c54:	0039      	movs	r1, r7
 8009c56:	0030      	movs	r0, r6
 8009c58:	f7ff ffc6 	bl	8009be8 <sbrk_aligned>
 8009c5c:	0004      	movs	r4, r0
 8009c5e:	1c43      	adds	r3, r0, #1
 8009c60:	d11e      	bne.n	8009ca0 <_malloc_r+0x74>
 8009c62:	682c      	ldr	r4, [r5, #0]
 8009c64:	0025      	movs	r5, r4
 8009c66:	2d00      	cmp	r5, #0
 8009c68:	d14a      	bne.n	8009d00 <_malloc_r+0xd4>
 8009c6a:	6823      	ldr	r3, [r4, #0]
 8009c6c:	0029      	movs	r1, r5
 8009c6e:	18e3      	adds	r3, r4, r3
 8009c70:	0030      	movs	r0, r6
 8009c72:	9301      	str	r3, [sp, #4]
 8009c74:	f000 f9b8 	bl	8009fe8 <_sbrk_r>
 8009c78:	9b01      	ldr	r3, [sp, #4]
 8009c7a:	4283      	cmp	r3, r0
 8009c7c:	d143      	bne.n	8009d06 <_malloc_r+0xda>
 8009c7e:	6823      	ldr	r3, [r4, #0]
 8009c80:	3703      	adds	r7, #3
 8009c82:	1aff      	subs	r7, r7, r3
 8009c84:	2303      	movs	r3, #3
 8009c86:	439f      	bics	r7, r3
 8009c88:	3708      	adds	r7, #8
 8009c8a:	2f0c      	cmp	r7, #12
 8009c8c:	d200      	bcs.n	8009c90 <_malloc_r+0x64>
 8009c8e:	270c      	movs	r7, #12
 8009c90:	0039      	movs	r1, r7
 8009c92:	0030      	movs	r0, r6
 8009c94:	f7ff ffa8 	bl	8009be8 <sbrk_aligned>
 8009c98:	1c43      	adds	r3, r0, #1
 8009c9a:	d034      	beq.n	8009d06 <_malloc_r+0xda>
 8009c9c:	6823      	ldr	r3, [r4, #0]
 8009c9e:	19df      	adds	r7, r3, r7
 8009ca0:	6027      	str	r7, [r4, #0]
 8009ca2:	e013      	b.n	8009ccc <_malloc_r+0xa0>
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	dacb      	bge.n	8009c40 <_malloc_r+0x14>
 8009ca8:	230c      	movs	r3, #12
 8009caa:	2500      	movs	r5, #0
 8009cac:	6033      	str	r3, [r6, #0]
 8009cae:	0028      	movs	r0, r5
 8009cb0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009cb2:	6822      	ldr	r2, [r4, #0]
 8009cb4:	1bd1      	subs	r1, r2, r7
 8009cb6:	d420      	bmi.n	8009cfa <_malloc_r+0xce>
 8009cb8:	290b      	cmp	r1, #11
 8009cba:	d917      	bls.n	8009cec <_malloc_r+0xc0>
 8009cbc:	19e2      	adds	r2, r4, r7
 8009cbe:	6027      	str	r7, [r4, #0]
 8009cc0:	42a3      	cmp	r3, r4
 8009cc2:	d111      	bne.n	8009ce8 <_malloc_r+0xbc>
 8009cc4:	602a      	str	r2, [r5, #0]
 8009cc6:	6863      	ldr	r3, [r4, #4]
 8009cc8:	6011      	str	r1, [r2, #0]
 8009cca:	6053      	str	r3, [r2, #4]
 8009ccc:	0030      	movs	r0, r6
 8009cce:	0025      	movs	r5, r4
 8009cd0:	f000 fa06 	bl	800a0e0 <__malloc_unlock>
 8009cd4:	2207      	movs	r2, #7
 8009cd6:	350b      	adds	r5, #11
 8009cd8:	1d23      	adds	r3, r4, #4
 8009cda:	4395      	bics	r5, r2
 8009cdc:	1aea      	subs	r2, r5, r3
 8009cde:	429d      	cmp	r5, r3
 8009ce0:	d0e5      	beq.n	8009cae <_malloc_r+0x82>
 8009ce2:	1b5b      	subs	r3, r3, r5
 8009ce4:	50a3      	str	r3, [r4, r2]
 8009ce6:	e7e2      	b.n	8009cae <_malloc_r+0x82>
 8009ce8:	605a      	str	r2, [r3, #4]
 8009cea:	e7ec      	b.n	8009cc6 <_malloc_r+0x9a>
 8009cec:	6862      	ldr	r2, [r4, #4]
 8009cee:	42a3      	cmp	r3, r4
 8009cf0:	d101      	bne.n	8009cf6 <_malloc_r+0xca>
 8009cf2:	602a      	str	r2, [r5, #0]
 8009cf4:	e7ea      	b.n	8009ccc <_malloc_r+0xa0>
 8009cf6:	605a      	str	r2, [r3, #4]
 8009cf8:	e7e8      	b.n	8009ccc <_malloc_r+0xa0>
 8009cfa:	0023      	movs	r3, r4
 8009cfc:	6864      	ldr	r4, [r4, #4]
 8009cfe:	e7a7      	b.n	8009c50 <_malloc_r+0x24>
 8009d00:	002c      	movs	r4, r5
 8009d02:	686d      	ldr	r5, [r5, #4]
 8009d04:	e7af      	b.n	8009c66 <_malloc_r+0x3a>
 8009d06:	230c      	movs	r3, #12
 8009d08:	0030      	movs	r0, r6
 8009d0a:	6033      	str	r3, [r6, #0]
 8009d0c:	f000 f9e8 	bl	800a0e0 <__malloc_unlock>
 8009d10:	e7cd      	b.n	8009cae <_malloc_r+0x82>
 8009d12:	46c0      	nop			; (mov r8, r8)
 8009d14:	200003a8 	.word	0x200003a8

08009d18 <__ssputs_r>:
 8009d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d1a:	688e      	ldr	r6, [r1, #8]
 8009d1c:	b085      	sub	sp, #20
 8009d1e:	0007      	movs	r7, r0
 8009d20:	000c      	movs	r4, r1
 8009d22:	9203      	str	r2, [sp, #12]
 8009d24:	9301      	str	r3, [sp, #4]
 8009d26:	429e      	cmp	r6, r3
 8009d28:	d83c      	bhi.n	8009da4 <__ssputs_r+0x8c>
 8009d2a:	2390      	movs	r3, #144	; 0x90
 8009d2c:	898a      	ldrh	r2, [r1, #12]
 8009d2e:	00db      	lsls	r3, r3, #3
 8009d30:	421a      	tst	r2, r3
 8009d32:	d034      	beq.n	8009d9e <__ssputs_r+0x86>
 8009d34:	6909      	ldr	r1, [r1, #16]
 8009d36:	6823      	ldr	r3, [r4, #0]
 8009d38:	6960      	ldr	r0, [r4, #20]
 8009d3a:	1a5b      	subs	r3, r3, r1
 8009d3c:	9302      	str	r3, [sp, #8]
 8009d3e:	2303      	movs	r3, #3
 8009d40:	4343      	muls	r3, r0
 8009d42:	0fdd      	lsrs	r5, r3, #31
 8009d44:	18ed      	adds	r5, r5, r3
 8009d46:	9b01      	ldr	r3, [sp, #4]
 8009d48:	9802      	ldr	r0, [sp, #8]
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	181b      	adds	r3, r3, r0
 8009d4e:	106d      	asrs	r5, r5, #1
 8009d50:	42ab      	cmp	r3, r5
 8009d52:	d900      	bls.n	8009d56 <__ssputs_r+0x3e>
 8009d54:	001d      	movs	r5, r3
 8009d56:	0553      	lsls	r3, r2, #21
 8009d58:	d532      	bpl.n	8009dc0 <__ssputs_r+0xa8>
 8009d5a:	0029      	movs	r1, r5
 8009d5c:	0038      	movs	r0, r7
 8009d5e:	f7ff ff65 	bl	8009c2c <_malloc_r>
 8009d62:	1e06      	subs	r6, r0, #0
 8009d64:	d109      	bne.n	8009d7a <__ssputs_r+0x62>
 8009d66:	230c      	movs	r3, #12
 8009d68:	603b      	str	r3, [r7, #0]
 8009d6a:	2340      	movs	r3, #64	; 0x40
 8009d6c:	2001      	movs	r0, #1
 8009d6e:	89a2      	ldrh	r2, [r4, #12]
 8009d70:	4240      	negs	r0, r0
 8009d72:	4313      	orrs	r3, r2
 8009d74:	81a3      	strh	r3, [r4, #12]
 8009d76:	b005      	add	sp, #20
 8009d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d7a:	9a02      	ldr	r2, [sp, #8]
 8009d7c:	6921      	ldr	r1, [r4, #16]
 8009d7e:	f7ff f9ea 	bl	8009156 <memcpy>
 8009d82:	89a3      	ldrh	r3, [r4, #12]
 8009d84:	4a14      	ldr	r2, [pc, #80]	; (8009dd8 <__ssputs_r+0xc0>)
 8009d86:	401a      	ands	r2, r3
 8009d88:	2380      	movs	r3, #128	; 0x80
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	81a3      	strh	r3, [r4, #12]
 8009d8e:	9b02      	ldr	r3, [sp, #8]
 8009d90:	6126      	str	r6, [r4, #16]
 8009d92:	18f6      	adds	r6, r6, r3
 8009d94:	6026      	str	r6, [r4, #0]
 8009d96:	6165      	str	r5, [r4, #20]
 8009d98:	9e01      	ldr	r6, [sp, #4]
 8009d9a:	1aed      	subs	r5, r5, r3
 8009d9c:	60a5      	str	r5, [r4, #8]
 8009d9e:	9b01      	ldr	r3, [sp, #4]
 8009da0:	429e      	cmp	r6, r3
 8009da2:	d900      	bls.n	8009da6 <__ssputs_r+0x8e>
 8009da4:	9e01      	ldr	r6, [sp, #4]
 8009da6:	0032      	movs	r2, r6
 8009da8:	9903      	ldr	r1, [sp, #12]
 8009daa:	6820      	ldr	r0, [r4, #0]
 8009dac:	f000 f97c 	bl	800a0a8 <memmove>
 8009db0:	68a3      	ldr	r3, [r4, #8]
 8009db2:	2000      	movs	r0, #0
 8009db4:	1b9b      	subs	r3, r3, r6
 8009db6:	60a3      	str	r3, [r4, #8]
 8009db8:	6823      	ldr	r3, [r4, #0]
 8009dba:	199e      	adds	r6, r3, r6
 8009dbc:	6026      	str	r6, [r4, #0]
 8009dbe:	e7da      	b.n	8009d76 <__ssputs_r+0x5e>
 8009dc0:	002a      	movs	r2, r5
 8009dc2:	0038      	movs	r0, r7
 8009dc4:	f000 f994 	bl	800a0f0 <_realloc_r>
 8009dc8:	1e06      	subs	r6, r0, #0
 8009dca:	d1e0      	bne.n	8009d8e <__ssputs_r+0x76>
 8009dcc:	0038      	movs	r0, r7
 8009dce:	6921      	ldr	r1, [r4, #16]
 8009dd0:	f7ff fec0 	bl	8009b54 <_free_r>
 8009dd4:	e7c7      	b.n	8009d66 <__ssputs_r+0x4e>
 8009dd6:	46c0      	nop			; (mov r8, r8)
 8009dd8:	fffffb7f 	.word	0xfffffb7f

08009ddc <_svfiprintf_r>:
 8009ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dde:	b0a1      	sub	sp, #132	; 0x84
 8009de0:	9003      	str	r0, [sp, #12]
 8009de2:	001d      	movs	r5, r3
 8009de4:	898b      	ldrh	r3, [r1, #12]
 8009de6:	000f      	movs	r7, r1
 8009de8:	0016      	movs	r6, r2
 8009dea:	061b      	lsls	r3, r3, #24
 8009dec:	d511      	bpl.n	8009e12 <_svfiprintf_r+0x36>
 8009dee:	690b      	ldr	r3, [r1, #16]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d10e      	bne.n	8009e12 <_svfiprintf_r+0x36>
 8009df4:	2140      	movs	r1, #64	; 0x40
 8009df6:	f7ff ff19 	bl	8009c2c <_malloc_r>
 8009dfa:	6038      	str	r0, [r7, #0]
 8009dfc:	6138      	str	r0, [r7, #16]
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	d105      	bne.n	8009e0e <_svfiprintf_r+0x32>
 8009e02:	230c      	movs	r3, #12
 8009e04:	9a03      	ldr	r2, [sp, #12]
 8009e06:	3801      	subs	r0, #1
 8009e08:	6013      	str	r3, [r2, #0]
 8009e0a:	b021      	add	sp, #132	; 0x84
 8009e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e0e:	2340      	movs	r3, #64	; 0x40
 8009e10:	617b      	str	r3, [r7, #20]
 8009e12:	2300      	movs	r3, #0
 8009e14:	ac08      	add	r4, sp, #32
 8009e16:	6163      	str	r3, [r4, #20]
 8009e18:	3320      	adds	r3, #32
 8009e1a:	7663      	strb	r3, [r4, #25]
 8009e1c:	3310      	adds	r3, #16
 8009e1e:	76a3      	strb	r3, [r4, #26]
 8009e20:	9507      	str	r5, [sp, #28]
 8009e22:	0035      	movs	r5, r6
 8009e24:	782b      	ldrb	r3, [r5, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d001      	beq.n	8009e2e <_svfiprintf_r+0x52>
 8009e2a:	2b25      	cmp	r3, #37	; 0x25
 8009e2c:	d147      	bne.n	8009ebe <_svfiprintf_r+0xe2>
 8009e2e:	1bab      	subs	r3, r5, r6
 8009e30:	9305      	str	r3, [sp, #20]
 8009e32:	42b5      	cmp	r5, r6
 8009e34:	d00c      	beq.n	8009e50 <_svfiprintf_r+0x74>
 8009e36:	0032      	movs	r2, r6
 8009e38:	0039      	movs	r1, r7
 8009e3a:	9803      	ldr	r0, [sp, #12]
 8009e3c:	f7ff ff6c 	bl	8009d18 <__ssputs_r>
 8009e40:	1c43      	adds	r3, r0, #1
 8009e42:	d100      	bne.n	8009e46 <_svfiprintf_r+0x6a>
 8009e44:	e0ae      	b.n	8009fa4 <_svfiprintf_r+0x1c8>
 8009e46:	6962      	ldr	r2, [r4, #20]
 8009e48:	9b05      	ldr	r3, [sp, #20]
 8009e4a:	4694      	mov	ip, r2
 8009e4c:	4463      	add	r3, ip
 8009e4e:	6163      	str	r3, [r4, #20]
 8009e50:	782b      	ldrb	r3, [r5, #0]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d100      	bne.n	8009e58 <_svfiprintf_r+0x7c>
 8009e56:	e0a5      	b.n	8009fa4 <_svfiprintf_r+0x1c8>
 8009e58:	2201      	movs	r2, #1
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	4252      	negs	r2, r2
 8009e5e:	6062      	str	r2, [r4, #4]
 8009e60:	a904      	add	r1, sp, #16
 8009e62:	3254      	adds	r2, #84	; 0x54
 8009e64:	1852      	adds	r2, r2, r1
 8009e66:	1c6e      	adds	r6, r5, #1
 8009e68:	6023      	str	r3, [r4, #0]
 8009e6a:	60e3      	str	r3, [r4, #12]
 8009e6c:	60a3      	str	r3, [r4, #8]
 8009e6e:	7013      	strb	r3, [r2, #0]
 8009e70:	65a3      	str	r3, [r4, #88]	; 0x58
 8009e72:	2205      	movs	r2, #5
 8009e74:	7831      	ldrb	r1, [r6, #0]
 8009e76:	4854      	ldr	r0, [pc, #336]	; (8009fc8 <_svfiprintf_r+0x1ec>)
 8009e78:	f7ff f962 	bl	8009140 <memchr>
 8009e7c:	1c75      	adds	r5, r6, #1
 8009e7e:	2800      	cmp	r0, #0
 8009e80:	d11f      	bne.n	8009ec2 <_svfiprintf_r+0xe6>
 8009e82:	6822      	ldr	r2, [r4, #0]
 8009e84:	06d3      	lsls	r3, r2, #27
 8009e86:	d504      	bpl.n	8009e92 <_svfiprintf_r+0xb6>
 8009e88:	2353      	movs	r3, #83	; 0x53
 8009e8a:	a904      	add	r1, sp, #16
 8009e8c:	185b      	adds	r3, r3, r1
 8009e8e:	2120      	movs	r1, #32
 8009e90:	7019      	strb	r1, [r3, #0]
 8009e92:	0713      	lsls	r3, r2, #28
 8009e94:	d504      	bpl.n	8009ea0 <_svfiprintf_r+0xc4>
 8009e96:	2353      	movs	r3, #83	; 0x53
 8009e98:	a904      	add	r1, sp, #16
 8009e9a:	185b      	adds	r3, r3, r1
 8009e9c:	212b      	movs	r1, #43	; 0x2b
 8009e9e:	7019      	strb	r1, [r3, #0]
 8009ea0:	7833      	ldrb	r3, [r6, #0]
 8009ea2:	2b2a      	cmp	r3, #42	; 0x2a
 8009ea4:	d016      	beq.n	8009ed4 <_svfiprintf_r+0xf8>
 8009ea6:	0035      	movs	r5, r6
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	200a      	movs	r0, #10
 8009eac:	68e3      	ldr	r3, [r4, #12]
 8009eae:	782a      	ldrb	r2, [r5, #0]
 8009eb0:	1c6e      	adds	r6, r5, #1
 8009eb2:	3a30      	subs	r2, #48	; 0x30
 8009eb4:	2a09      	cmp	r2, #9
 8009eb6:	d94e      	bls.n	8009f56 <_svfiprintf_r+0x17a>
 8009eb8:	2900      	cmp	r1, #0
 8009eba:	d111      	bne.n	8009ee0 <_svfiprintf_r+0x104>
 8009ebc:	e017      	b.n	8009eee <_svfiprintf_r+0x112>
 8009ebe:	3501      	adds	r5, #1
 8009ec0:	e7b0      	b.n	8009e24 <_svfiprintf_r+0x48>
 8009ec2:	4b41      	ldr	r3, [pc, #260]	; (8009fc8 <_svfiprintf_r+0x1ec>)
 8009ec4:	6822      	ldr	r2, [r4, #0]
 8009ec6:	1ac0      	subs	r0, r0, r3
 8009ec8:	2301      	movs	r3, #1
 8009eca:	4083      	lsls	r3, r0
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	002e      	movs	r6, r5
 8009ed0:	6023      	str	r3, [r4, #0]
 8009ed2:	e7ce      	b.n	8009e72 <_svfiprintf_r+0x96>
 8009ed4:	9b07      	ldr	r3, [sp, #28]
 8009ed6:	1d19      	adds	r1, r3, #4
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	9107      	str	r1, [sp, #28]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	db01      	blt.n	8009ee4 <_svfiprintf_r+0x108>
 8009ee0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ee2:	e004      	b.n	8009eee <_svfiprintf_r+0x112>
 8009ee4:	425b      	negs	r3, r3
 8009ee6:	60e3      	str	r3, [r4, #12]
 8009ee8:	2302      	movs	r3, #2
 8009eea:	4313      	orrs	r3, r2
 8009eec:	6023      	str	r3, [r4, #0]
 8009eee:	782b      	ldrb	r3, [r5, #0]
 8009ef0:	2b2e      	cmp	r3, #46	; 0x2e
 8009ef2:	d10a      	bne.n	8009f0a <_svfiprintf_r+0x12e>
 8009ef4:	786b      	ldrb	r3, [r5, #1]
 8009ef6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ef8:	d135      	bne.n	8009f66 <_svfiprintf_r+0x18a>
 8009efa:	9b07      	ldr	r3, [sp, #28]
 8009efc:	3502      	adds	r5, #2
 8009efe:	1d1a      	adds	r2, r3, #4
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	9207      	str	r2, [sp, #28]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	db2b      	blt.n	8009f60 <_svfiprintf_r+0x184>
 8009f08:	9309      	str	r3, [sp, #36]	; 0x24
 8009f0a:	4e30      	ldr	r6, [pc, #192]	; (8009fcc <_svfiprintf_r+0x1f0>)
 8009f0c:	2203      	movs	r2, #3
 8009f0e:	0030      	movs	r0, r6
 8009f10:	7829      	ldrb	r1, [r5, #0]
 8009f12:	f7ff f915 	bl	8009140 <memchr>
 8009f16:	2800      	cmp	r0, #0
 8009f18:	d006      	beq.n	8009f28 <_svfiprintf_r+0x14c>
 8009f1a:	2340      	movs	r3, #64	; 0x40
 8009f1c:	1b80      	subs	r0, r0, r6
 8009f1e:	4083      	lsls	r3, r0
 8009f20:	6822      	ldr	r2, [r4, #0]
 8009f22:	3501      	adds	r5, #1
 8009f24:	4313      	orrs	r3, r2
 8009f26:	6023      	str	r3, [r4, #0]
 8009f28:	7829      	ldrb	r1, [r5, #0]
 8009f2a:	2206      	movs	r2, #6
 8009f2c:	4828      	ldr	r0, [pc, #160]	; (8009fd0 <_svfiprintf_r+0x1f4>)
 8009f2e:	1c6e      	adds	r6, r5, #1
 8009f30:	7621      	strb	r1, [r4, #24]
 8009f32:	f7ff f905 	bl	8009140 <memchr>
 8009f36:	2800      	cmp	r0, #0
 8009f38:	d03c      	beq.n	8009fb4 <_svfiprintf_r+0x1d8>
 8009f3a:	4b26      	ldr	r3, [pc, #152]	; (8009fd4 <_svfiprintf_r+0x1f8>)
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d125      	bne.n	8009f8c <_svfiprintf_r+0x1b0>
 8009f40:	2207      	movs	r2, #7
 8009f42:	9b07      	ldr	r3, [sp, #28]
 8009f44:	3307      	adds	r3, #7
 8009f46:	4393      	bics	r3, r2
 8009f48:	3308      	adds	r3, #8
 8009f4a:	9307      	str	r3, [sp, #28]
 8009f4c:	6963      	ldr	r3, [r4, #20]
 8009f4e:	9a04      	ldr	r2, [sp, #16]
 8009f50:	189b      	adds	r3, r3, r2
 8009f52:	6163      	str	r3, [r4, #20]
 8009f54:	e765      	b.n	8009e22 <_svfiprintf_r+0x46>
 8009f56:	4343      	muls	r3, r0
 8009f58:	0035      	movs	r5, r6
 8009f5a:	2101      	movs	r1, #1
 8009f5c:	189b      	adds	r3, r3, r2
 8009f5e:	e7a6      	b.n	8009eae <_svfiprintf_r+0xd2>
 8009f60:	2301      	movs	r3, #1
 8009f62:	425b      	negs	r3, r3
 8009f64:	e7d0      	b.n	8009f08 <_svfiprintf_r+0x12c>
 8009f66:	2300      	movs	r3, #0
 8009f68:	200a      	movs	r0, #10
 8009f6a:	001a      	movs	r2, r3
 8009f6c:	3501      	adds	r5, #1
 8009f6e:	6063      	str	r3, [r4, #4]
 8009f70:	7829      	ldrb	r1, [r5, #0]
 8009f72:	1c6e      	adds	r6, r5, #1
 8009f74:	3930      	subs	r1, #48	; 0x30
 8009f76:	2909      	cmp	r1, #9
 8009f78:	d903      	bls.n	8009f82 <_svfiprintf_r+0x1a6>
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d0c5      	beq.n	8009f0a <_svfiprintf_r+0x12e>
 8009f7e:	9209      	str	r2, [sp, #36]	; 0x24
 8009f80:	e7c3      	b.n	8009f0a <_svfiprintf_r+0x12e>
 8009f82:	4342      	muls	r2, r0
 8009f84:	0035      	movs	r5, r6
 8009f86:	2301      	movs	r3, #1
 8009f88:	1852      	adds	r2, r2, r1
 8009f8a:	e7f1      	b.n	8009f70 <_svfiprintf_r+0x194>
 8009f8c:	ab07      	add	r3, sp, #28
 8009f8e:	9300      	str	r3, [sp, #0]
 8009f90:	003a      	movs	r2, r7
 8009f92:	0021      	movs	r1, r4
 8009f94:	4b10      	ldr	r3, [pc, #64]	; (8009fd8 <_svfiprintf_r+0x1fc>)
 8009f96:	9803      	ldr	r0, [sp, #12]
 8009f98:	f7fc f9d6 	bl	8006348 <_printf_float>
 8009f9c:	9004      	str	r0, [sp, #16]
 8009f9e:	9b04      	ldr	r3, [sp, #16]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	d1d3      	bne.n	8009f4c <_svfiprintf_r+0x170>
 8009fa4:	89bb      	ldrh	r3, [r7, #12]
 8009fa6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009fa8:	065b      	lsls	r3, r3, #25
 8009faa:	d400      	bmi.n	8009fae <_svfiprintf_r+0x1d2>
 8009fac:	e72d      	b.n	8009e0a <_svfiprintf_r+0x2e>
 8009fae:	2001      	movs	r0, #1
 8009fb0:	4240      	negs	r0, r0
 8009fb2:	e72a      	b.n	8009e0a <_svfiprintf_r+0x2e>
 8009fb4:	ab07      	add	r3, sp, #28
 8009fb6:	9300      	str	r3, [sp, #0]
 8009fb8:	003a      	movs	r2, r7
 8009fba:	0021      	movs	r1, r4
 8009fbc:	4b06      	ldr	r3, [pc, #24]	; (8009fd8 <_svfiprintf_r+0x1fc>)
 8009fbe:	9803      	ldr	r0, [sp, #12]
 8009fc0:	f7fc fc74 	bl	80068ac <_printf_i>
 8009fc4:	e7ea      	b.n	8009f9c <_svfiprintf_r+0x1c0>
 8009fc6:	46c0      	nop			; (mov r8, r8)
 8009fc8:	0800b17c 	.word	0x0800b17c
 8009fcc:	0800b182 	.word	0x0800b182
 8009fd0:	0800b186 	.word	0x0800b186
 8009fd4:	08006349 	.word	0x08006349
 8009fd8:	08009d19 	.word	0x08009d19

08009fdc <nan>:
 8009fdc:	2000      	movs	r0, #0
 8009fde:	4901      	ldr	r1, [pc, #4]	; (8009fe4 <nan+0x8>)
 8009fe0:	4770      	bx	lr
 8009fe2:	46c0      	nop			; (mov r8, r8)
 8009fe4:	7ff80000 	.word	0x7ff80000

08009fe8 <_sbrk_r>:
 8009fe8:	2300      	movs	r3, #0
 8009fea:	b570      	push	{r4, r5, r6, lr}
 8009fec:	4d06      	ldr	r5, [pc, #24]	; (800a008 <_sbrk_r+0x20>)
 8009fee:	0004      	movs	r4, r0
 8009ff0:	0008      	movs	r0, r1
 8009ff2:	602b      	str	r3, [r5, #0]
 8009ff4:	f7f9 f92c 	bl	8003250 <_sbrk>
 8009ff8:	1c43      	adds	r3, r0, #1
 8009ffa:	d103      	bne.n	800a004 <_sbrk_r+0x1c>
 8009ffc:	682b      	ldr	r3, [r5, #0]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d000      	beq.n	800a004 <_sbrk_r+0x1c>
 800a002:	6023      	str	r3, [r4, #0]
 800a004:	bd70      	pop	{r4, r5, r6, pc}
 800a006:	46c0      	nop			; (mov r8, r8)
 800a008:	200003b0 	.word	0x200003b0

0800a00c <strncmp>:
 800a00c:	b530      	push	{r4, r5, lr}
 800a00e:	0005      	movs	r5, r0
 800a010:	1e10      	subs	r0, r2, #0
 800a012:	d008      	beq.n	800a026 <strncmp+0x1a>
 800a014:	2400      	movs	r4, #0
 800a016:	3a01      	subs	r2, #1
 800a018:	5d2b      	ldrb	r3, [r5, r4]
 800a01a:	5d08      	ldrb	r0, [r1, r4]
 800a01c:	4283      	cmp	r3, r0
 800a01e:	d101      	bne.n	800a024 <strncmp+0x18>
 800a020:	4294      	cmp	r4, r2
 800a022:	d101      	bne.n	800a028 <strncmp+0x1c>
 800a024:	1a18      	subs	r0, r3, r0
 800a026:	bd30      	pop	{r4, r5, pc}
 800a028:	3401      	adds	r4, #1
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d1f4      	bne.n	800a018 <strncmp+0xc>
 800a02e:	e7f9      	b.n	800a024 <strncmp+0x18>

0800a030 <__ascii_wctomb>:
 800a030:	0003      	movs	r3, r0
 800a032:	1e08      	subs	r0, r1, #0
 800a034:	d005      	beq.n	800a042 <__ascii_wctomb+0x12>
 800a036:	2aff      	cmp	r2, #255	; 0xff
 800a038:	d904      	bls.n	800a044 <__ascii_wctomb+0x14>
 800a03a:	228a      	movs	r2, #138	; 0x8a
 800a03c:	2001      	movs	r0, #1
 800a03e:	601a      	str	r2, [r3, #0]
 800a040:	4240      	negs	r0, r0
 800a042:	4770      	bx	lr
 800a044:	2001      	movs	r0, #1
 800a046:	700a      	strb	r2, [r1, #0]
 800a048:	e7fb      	b.n	800a042 <__ascii_wctomb+0x12>
	...

0800a04c <__assert_func>:
 800a04c:	b530      	push	{r4, r5, lr}
 800a04e:	0014      	movs	r4, r2
 800a050:	001a      	movs	r2, r3
 800a052:	4b09      	ldr	r3, [pc, #36]	; (800a078 <__assert_func+0x2c>)
 800a054:	0005      	movs	r5, r0
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	b085      	sub	sp, #20
 800a05a:	68d8      	ldr	r0, [r3, #12]
 800a05c:	4b07      	ldr	r3, [pc, #28]	; (800a07c <__assert_func+0x30>)
 800a05e:	2c00      	cmp	r4, #0
 800a060:	d101      	bne.n	800a066 <__assert_func+0x1a>
 800a062:	4b07      	ldr	r3, [pc, #28]	; (800a080 <__assert_func+0x34>)
 800a064:	001c      	movs	r4, r3
 800a066:	9301      	str	r3, [sp, #4]
 800a068:	9100      	str	r1, [sp, #0]
 800a06a:	002b      	movs	r3, r5
 800a06c:	4905      	ldr	r1, [pc, #20]	; (800a084 <__assert_func+0x38>)
 800a06e:	9402      	str	r4, [sp, #8]
 800a070:	f000 f80a 	bl	800a088 <fiprintf>
 800a074:	f000 fa9a 	bl	800a5ac <abort>
 800a078:	20000030 	.word	0x20000030
 800a07c:	0800b18d 	.word	0x0800b18d
 800a080:	0800b1c8 	.word	0x0800b1c8
 800a084:	0800b19a 	.word	0x0800b19a

0800a088 <fiprintf>:
 800a088:	b40e      	push	{r1, r2, r3}
 800a08a:	b503      	push	{r0, r1, lr}
 800a08c:	0001      	movs	r1, r0
 800a08e:	ab03      	add	r3, sp, #12
 800a090:	4804      	ldr	r0, [pc, #16]	; (800a0a4 <fiprintf+0x1c>)
 800a092:	cb04      	ldmia	r3!, {r2}
 800a094:	6800      	ldr	r0, [r0, #0]
 800a096:	9301      	str	r3, [sp, #4]
 800a098:	f000 f880 	bl	800a19c <_vfiprintf_r>
 800a09c:	b002      	add	sp, #8
 800a09e:	bc08      	pop	{r3}
 800a0a0:	b003      	add	sp, #12
 800a0a2:	4718      	bx	r3
 800a0a4:	20000030 	.word	0x20000030

0800a0a8 <memmove>:
 800a0a8:	b510      	push	{r4, lr}
 800a0aa:	4288      	cmp	r0, r1
 800a0ac:	d902      	bls.n	800a0b4 <memmove+0xc>
 800a0ae:	188b      	adds	r3, r1, r2
 800a0b0:	4298      	cmp	r0, r3
 800a0b2:	d303      	bcc.n	800a0bc <memmove+0x14>
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	e007      	b.n	800a0c8 <memmove+0x20>
 800a0b8:	5c8b      	ldrb	r3, [r1, r2]
 800a0ba:	5483      	strb	r3, [r0, r2]
 800a0bc:	3a01      	subs	r2, #1
 800a0be:	d2fb      	bcs.n	800a0b8 <memmove+0x10>
 800a0c0:	bd10      	pop	{r4, pc}
 800a0c2:	5ccc      	ldrb	r4, [r1, r3]
 800a0c4:	54c4      	strb	r4, [r0, r3]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d1fa      	bne.n	800a0c2 <memmove+0x1a>
 800a0cc:	e7f8      	b.n	800a0c0 <memmove+0x18>
	...

0800a0d0 <__malloc_lock>:
 800a0d0:	b510      	push	{r4, lr}
 800a0d2:	4802      	ldr	r0, [pc, #8]	; (800a0dc <__malloc_lock+0xc>)
 800a0d4:	f000 fc41 	bl	800a95a <__retarget_lock_acquire_recursive>
 800a0d8:	bd10      	pop	{r4, pc}
 800a0da:	46c0      	nop			; (mov r8, r8)
 800a0dc:	200003b4 	.word	0x200003b4

0800a0e0 <__malloc_unlock>:
 800a0e0:	b510      	push	{r4, lr}
 800a0e2:	4802      	ldr	r0, [pc, #8]	; (800a0ec <__malloc_unlock+0xc>)
 800a0e4:	f000 fc3a 	bl	800a95c <__retarget_lock_release_recursive>
 800a0e8:	bd10      	pop	{r4, pc}
 800a0ea:	46c0      	nop			; (mov r8, r8)
 800a0ec:	200003b4 	.word	0x200003b4

0800a0f0 <_realloc_r>:
 800a0f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0f2:	0007      	movs	r7, r0
 800a0f4:	000e      	movs	r6, r1
 800a0f6:	0014      	movs	r4, r2
 800a0f8:	2900      	cmp	r1, #0
 800a0fa:	d105      	bne.n	800a108 <_realloc_r+0x18>
 800a0fc:	0011      	movs	r1, r2
 800a0fe:	f7ff fd95 	bl	8009c2c <_malloc_r>
 800a102:	0005      	movs	r5, r0
 800a104:	0028      	movs	r0, r5
 800a106:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a108:	2a00      	cmp	r2, #0
 800a10a:	d103      	bne.n	800a114 <_realloc_r+0x24>
 800a10c:	f7ff fd22 	bl	8009b54 <_free_r>
 800a110:	0025      	movs	r5, r4
 800a112:	e7f7      	b.n	800a104 <_realloc_r+0x14>
 800a114:	f000 fc90 	bl	800aa38 <_malloc_usable_size_r>
 800a118:	9001      	str	r0, [sp, #4]
 800a11a:	4284      	cmp	r4, r0
 800a11c:	d803      	bhi.n	800a126 <_realloc_r+0x36>
 800a11e:	0035      	movs	r5, r6
 800a120:	0843      	lsrs	r3, r0, #1
 800a122:	42a3      	cmp	r3, r4
 800a124:	d3ee      	bcc.n	800a104 <_realloc_r+0x14>
 800a126:	0021      	movs	r1, r4
 800a128:	0038      	movs	r0, r7
 800a12a:	f7ff fd7f 	bl	8009c2c <_malloc_r>
 800a12e:	1e05      	subs	r5, r0, #0
 800a130:	d0e8      	beq.n	800a104 <_realloc_r+0x14>
 800a132:	9b01      	ldr	r3, [sp, #4]
 800a134:	0022      	movs	r2, r4
 800a136:	429c      	cmp	r4, r3
 800a138:	d900      	bls.n	800a13c <_realloc_r+0x4c>
 800a13a:	001a      	movs	r2, r3
 800a13c:	0031      	movs	r1, r6
 800a13e:	0028      	movs	r0, r5
 800a140:	f7ff f809 	bl	8009156 <memcpy>
 800a144:	0031      	movs	r1, r6
 800a146:	0038      	movs	r0, r7
 800a148:	f7ff fd04 	bl	8009b54 <_free_r>
 800a14c:	e7da      	b.n	800a104 <_realloc_r+0x14>

0800a14e <__sfputc_r>:
 800a14e:	6893      	ldr	r3, [r2, #8]
 800a150:	b510      	push	{r4, lr}
 800a152:	3b01      	subs	r3, #1
 800a154:	6093      	str	r3, [r2, #8]
 800a156:	2b00      	cmp	r3, #0
 800a158:	da04      	bge.n	800a164 <__sfputc_r+0x16>
 800a15a:	6994      	ldr	r4, [r2, #24]
 800a15c:	42a3      	cmp	r3, r4
 800a15e:	db07      	blt.n	800a170 <__sfputc_r+0x22>
 800a160:	290a      	cmp	r1, #10
 800a162:	d005      	beq.n	800a170 <__sfputc_r+0x22>
 800a164:	6813      	ldr	r3, [r2, #0]
 800a166:	1c58      	adds	r0, r3, #1
 800a168:	6010      	str	r0, [r2, #0]
 800a16a:	7019      	strb	r1, [r3, #0]
 800a16c:	0008      	movs	r0, r1
 800a16e:	bd10      	pop	{r4, pc}
 800a170:	f000 f94e 	bl	800a410 <__swbuf_r>
 800a174:	0001      	movs	r1, r0
 800a176:	e7f9      	b.n	800a16c <__sfputc_r+0x1e>

0800a178 <__sfputs_r>:
 800a178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a17a:	0006      	movs	r6, r0
 800a17c:	000f      	movs	r7, r1
 800a17e:	0014      	movs	r4, r2
 800a180:	18d5      	adds	r5, r2, r3
 800a182:	42ac      	cmp	r4, r5
 800a184:	d101      	bne.n	800a18a <__sfputs_r+0x12>
 800a186:	2000      	movs	r0, #0
 800a188:	e007      	b.n	800a19a <__sfputs_r+0x22>
 800a18a:	7821      	ldrb	r1, [r4, #0]
 800a18c:	003a      	movs	r2, r7
 800a18e:	0030      	movs	r0, r6
 800a190:	f7ff ffdd 	bl	800a14e <__sfputc_r>
 800a194:	3401      	adds	r4, #1
 800a196:	1c43      	adds	r3, r0, #1
 800a198:	d1f3      	bne.n	800a182 <__sfputs_r+0xa>
 800a19a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a19c <_vfiprintf_r>:
 800a19c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a19e:	b0a1      	sub	sp, #132	; 0x84
 800a1a0:	0006      	movs	r6, r0
 800a1a2:	000c      	movs	r4, r1
 800a1a4:	001f      	movs	r7, r3
 800a1a6:	9203      	str	r2, [sp, #12]
 800a1a8:	2800      	cmp	r0, #0
 800a1aa:	d004      	beq.n	800a1b6 <_vfiprintf_r+0x1a>
 800a1ac:	6983      	ldr	r3, [r0, #24]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d101      	bne.n	800a1b6 <_vfiprintf_r+0x1a>
 800a1b2:	f000 fb31 	bl	800a818 <__sinit>
 800a1b6:	4b8e      	ldr	r3, [pc, #568]	; (800a3f0 <_vfiprintf_r+0x254>)
 800a1b8:	429c      	cmp	r4, r3
 800a1ba:	d11c      	bne.n	800a1f6 <_vfiprintf_r+0x5a>
 800a1bc:	6874      	ldr	r4, [r6, #4]
 800a1be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1c0:	07db      	lsls	r3, r3, #31
 800a1c2:	d405      	bmi.n	800a1d0 <_vfiprintf_r+0x34>
 800a1c4:	89a3      	ldrh	r3, [r4, #12]
 800a1c6:	059b      	lsls	r3, r3, #22
 800a1c8:	d402      	bmi.n	800a1d0 <_vfiprintf_r+0x34>
 800a1ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1cc:	f000 fbc5 	bl	800a95a <__retarget_lock_acquire_recursive>
 800a1d0:	89a3      	ldrh	r3, [r4, #12]
 800a1d2:	071b      	lsls	r3, r3, #28
 800a1d4:	d502      	bpl.n	800a1dc <_vfiprintf_r+0x40>
 800a1d6:	6923      	ldr	r3, [r4, #16]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d11d      	bne.n	800a218 <_vfiprintf_r+0x7c>
 800a1dc:	0021      	movs	r1, r4
 800a1de:	0030      	movs	r0, r6
 800a1e0:	f000 f96c 	bl	800a4bc <__swsetup_r>
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	d017      	beq.n	800a218 <_vfiprintf_r+0x7c>
 800a1e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1ea:	07db      	lsls	r3, r3, #31
 800a1ec:	d50d      	bpl.n	800a20a <_vfiprintf_r+0x6e>
 800a1ee:	2001      	movs	r0, #1
 800a1f0:	4240      	negs	r0, r0
 800a1f2:	b021      	add	sp, #132	; 0x84
 800a1f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1f6:	4b7f      	ldr	r3, [pc, #508]	; (800a3f4 <_vfiprintf_r+0x258>)
 800a1f8:	429c      	cmp	r4, r3
 800a1fa:	d101      	bne.n	800a200 <_vfiprintf_r+0x64>
 800a1fc:	68b4      	ldr	r4, [r6, #8]
 800a1fe:	e7de      	b.n	800a1be <_vfiprintf_r+0x22>
 800a200:	4b7d      	ldr	r3, [pc, #500]	; (800a3f8 <_vfiprintf_r+0x25c>)
 800a202:	429c      	cmp	r4, r3
 800a204:	d1db      	bne.n	800a1be <_vfiprintf_r+0x22>
 800a206:	68f4      	ldr	r4, [r6, #12]
 800a208:	e7d9      	b.n	800a1be <_vfiprintf_r+0x22>
 800a20a:	89a3      	ldrh	r3, [r4, #12]
 800a20c:	059b      	lsls	r3, r3, #22
 800a20e:	d4ee      	bmi.n	800a1ee <_vfiprintf_r+0x52>
 800a210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a212:	f000 fba3 	bl	800a95c <__retarget_lock_release_recursive>
 800a216:	e7ea      	b.n	800a1ee <_vfiprintf_r+0x52>
 800a218:	2300      	movs	r3, #0
 800a21a:	ad08      	add	r5, sp, #32
 800a21c:	616b      	str	r3, [r5, #20]
 800a21e:	3320      	adds	r3, #32
 800a220:	766b      	strb	r3, [r5, #25]
 800a222:	3310      	adds	r3, #16
 800a224:	76ab      	strb	r3, [r5, #26]
 800a226:	9707      	str	r7, [sp, #28]
 800a228:	9f03      	ldr	r7, [sp, #12]
 800a22a:	783b      	ldrb	r3, [r7, #0]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d001      	beq.n	800a234 <_vfiprintf_r+0x98>
 800a230:	2b25      	cmp	r3, #37	; 0x25
 800a232:	d14e      	bne.n	800a2d2 <_vfiprintf_r+0x136>
 800a234:	9b03      	ldr	r3, [sp, #12]
 800a236:	1afb      	subs	r3, r7, r3
 800a238:	9305      	str	r3, [sp, #20]
 800a23a:	9b03      	ldr	r3, [sp, #12]
 800a23c:	429f      	cmp	r7, r3
 800a23e:	d00d      	beq.n	800a25c <_vfiprintf_r+0xc0>
 800a240:	9b05      	ldr	r3, [sp, #20]
 800a242:	0021      	movs	r1, r4
 800a244:	0030      	movs	r0, r6
 800a246:	9a03      	ldr	r2, [sp, #12]
 800a248:	f7ff ff96 	bl	800a178 <__sfputs_r>
 800a24c:	1c43      	adds	r3, r0, #1
 800a24e:	d100      	bne.n	800a252 <_vfiprintf_r+0xb6>
 800a250:	e0b5      	b.n	800a3be <_vfiprintf_r+0x222>
 800a252:	696a      	ldr	r2, [r5, #20]
 800a254:	9b05      	ldr	r3, [sp, #20]
 800a256:	4694      	mov	ip, r2
 800a258:	4463      	add	r3, ip
 800a25a:	616b      	str	r3, [r5, #20]
 800a25c:	783b      	ldrb	r3, [r7, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d100      	bne.n	800a264 <_vfiprintf_r+0xc8>
 800a262:	e0ac      	b.n	800a3be <_vfiprintf_r+0x222>
 800a264:	2201      	movs	r2, #1
 800a266:	1c7b      	adds	r3, r7, #1
 800a268:	9303      	str	r3, [sp, #12]
 800a26a:	2300      	movs	r3, #0
 800a26c:	4252      	negs	r2, r2
 800a26e:	606a      	str	r2, [r5, #4]
 800a270:	a904      	add	r1, sp, #16
 800a272:	3254      	adds	r2, #84	; 0x54
 800a274:	1852      	adds	r2, r2, r1
 800a276:	602b      	str	r3, [r5, #0]
 800a278:	60eb      	str	r3, [r5, #12]
 800a27a:	60ab      	str	r3, [r5, #8]
 800a27c:	7013      	strb	r3, [r2, #0]
 800a27e:	65ab      	str	r3, [r5, #88]	; 0x58
 800a280:	9b03      	ldr	r3, [sp, #12]
 800a282:	2205      	movs	r2, #5
 800a284:	7819      	ldrb	r1, [r3, #0]
 800a286:	485d      	ldr	r0, [pc, #372]	; (800a3fc <_vfiprintf_r+0x260>)
 800a288:	f7fe ff5a 	bl	8009140 <memchr>
 800a28c:	9b03      	ldr	r3, [sp, #12]
 800a28e:	1c5f      	adds	r7, r3, #1
 800a290:	2800      	cmp	r0, #0
 800a292:	d120      	bne.n	800a2d6 <_vfiprintf_r+0x13a>
 800a294:	682a      	ldr	r2, [r5, #0]
 800a296:	06d3      	lsls	r3, r2, #27
 800a298:	d504      	bpl.n	800a2a4 <_vfiprintf_r+0x108>
 800a29a:	2353      	movs	r3, #83	; 0x53
 800a29c:	a904      	add	r1, sp, #16
 800a29e:	185b      	adds	r3, r3, r1
 800a2a0:	2120      	movs	r1, #32
 800a2a2:	7019      	strb	r1, [r3, #0]
 800a2a4:	0713      	lsls	r3, r2, #28
 800a2a6:	d504      	bpl.n	800a2b2 <_vfiprintf_r+0x116>
 800a2a8:	2353      	movs	r3, #83	; 0x53
 800a2aa:	a904      	add	r1, sp, #16
 800a2ac:	185b      	adds	r3, r3, r1
 800a2ae:	212b      	movs	r1, #43	; 0x2b
 800a2b0:	7019      	strb	r1, [r3, #0]
 800a2b2:	9b03      	ldr	r3, [sp, #12]
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	2b2a      	cmp	r3, #42	; 0x2a
 800a2b8:	d016      	beq.n	800a2e8 <_vfiprintf_r+0x14c>
 800a2ba:	2100      	movs	r1, #0
 800a2bc:	68eb      	ldr	r3, [r5, #12]
 800a2be:	9f03      	ldr	r7, [sp, #12]
 800a2c0:	783a      	ldrb	r2, [r7, #0]
 800a2c2:	1c78      	adds	r0, r7, #1
 800a2c4:	3a30      	subs	r2, #48	; 0x30
 800a2c6:	4684      	mov	ip, r0
 800a2c8:	2a09      	cmp	r2, #9
 800a2ca:	d94f      	bls.n	800a36c <_vfiprintf_r+0x1d0>
 800a2cc:	2900      	cmp	r1, #0
 800a2ce:	d111      	bne.n	800a2f4 <_vfiprintf_r+0x158>
 800a2d0:	e017      	b.n	800a302 <_vfiprintf_r+0x166>
 800a2d2:	3701      	adds	r7, #1
 800a2d4:	e7a9      	b.n	800a22a <_vfiprintf_r+0x8e>
 800a2d6:	4b49      	ldr	r3, [pc, #292]	; (800a3fc <_vfiprintf_r+0x260>)
 800a2d8:	682a      	ldr	r2, [r5, #0]
 800a2da:	1ac0      	subs	r0, r0, r3
 800a2dc:	2301      	movs	r3, #1
 800a2de:	4083      	lsls	r3, r0
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	602b      	str	r3, [r5, #0]
 800a2e4:	9703      	str	r7, [sp, #12]
 800a2e6:	e7cb      	b.n	800a280 <_vfiprintf_r+0xe4>
 800a2e8:	9b07      	ldr	r3, [sp, #28]
 800a2ea:	1d19      	adds	r1, r3, #4
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	9107      	str	r1, [sp, #28]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	db01      	blt.n	800a2f8 <_vfiprintf_r+0x15c>
 800a2f4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2f6:	e004      	b.n	800a302 <_vfiprintf_r+0x166>
 800a2f8:	425b      	negs	r3, r3
 800a2fa:	60eb      	str	r3, [r5, #12]
 800a2fc:	2302      	movs	r3, #2
 800a2fe:	4313      	orrs	r3, r2
 800a300:	602b      	str	r3, [r5, #0]
 800a302:	783b      	ldrb	r3, [r7, #0]
 800a304:	2b2e      	cmp	r3, #46	; 0x2e
 800a306:	d10a      	bne.n	800a31e <_vfiprintf_r+0x182>
 800a308:	787b      	ldrb	r3, [r7, #1]
 800a30a:	2b2a      	cmp	r3, #42	; 0x2a
 800a30c:	d137      	bne.n	800a37e <_vfiprintf_r+0x1e2>
 800a30e:	9b07      	ldr	r3, [sp, #28]
 800a310:	3702      	adds	r7, #2
 800a312:	1d1a      	adds	r2, r3, #4
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	9207      	str	r2, [sp, #28]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	db2d      	blt.n	800a378 <_vfiprintf_r+0x1dc>
 800a31c:	9309      	str	r3, [sp, #36]	; 0x24
 800a31e:	2203      	movs	r2, #3
 800a320:	7839      	ldrb	r1, [r7, #0]
 800a322:	4837      	ldr	r0, [pc, #220]	; (800a400 <_vfiprintf_r+0x264>)
 800a324:	f7fe ff0c 	bl	8009140 <memchr>
 800a328:	2800      	cmp	r0, #0
 800a32a:	d007      	beq.n	800a33c <_vfiprintf_r+0x1a0>
 800a32c:	4b34      	ldr	r3, [pc, #208]	; (800a400 <_vfiprintf_r+0x264>)
 800a32e:	682a      	ldr	r2, [r5, #0]
 800a330:	1ac0      	subs	r0, r0, r3
 800a332:	2340      	movs	r3, #64	; 0x40
 800a334:	4083      	lsls	r3, r0
 800a336:	4313      	orrs	r3, r2
 800a338:	3701      	adds	r7, #1
 800a33a:	602b      	str	r3, [r5, #0]
 800a33c:	7839      	ldrb	r1, [r7, #0]
 800a33e:	1c7b      	adds	r3, r7, #1
 800a340:	2206      	movs	r2, #6
 800a342:	4830      	ldr	r0, [pc, #192]	; (800a404 <_vfiprintf_r+0x268>)
 800a344:	9303      	str	r3, [sp, #12]
 800a346:	7629      	strb	r1, [r5, #24]
 800a348:	f7fe fefa 	bl	8009140 <memchr>
 800a34c:	2800      	cmp	r0, #0
 800a34e:	d045      	beq.n	800a3dc <_vfiprintf_r+0x240>
 800a350:	4b2d      	ldr	r3, [pc, #180]	; (800a408 <_vfiprintf_r+0x26c>)
 800a352:	2b00      	cmp	r3, #0
 800a354:	d127      	bne.n	800a3a6 <_vfiprintf_r+0x20a>
 800a356:	2207      	movs	r2, #7
 800a358:	9b07      	ldr	r3, [sp, #28]
 800a35a:	3307      	adds	r3, #7
 800a35c:	4393      	bics	r3, r2
 800a35e:	3308      	adds	r3, #8
 800a360:	9307      	str	r3, [sp, #28]
 800a362:	696b      	ldr	r3, [r5, #20]
 800a364:	9a04      	ldr	r2, [sp, #16]
 800a366:	189b      	adds	r3, r3, r2
 800a368:	616b      	str	r3, [r5, #20]
 800a36a:	e75d      	b.n	800a228 <_vfiprintf_r+0x8c>
 800a36c:	210a      	movs	r1, #10
 800a36e:	434b      	muls	r3, r1
 800a370:	4667      	mov	r7, ip
 800a372:	189b      	adds	r3, r3, r2
 800a374:	3909      	subs	r1, #9
 800a376:	e7a3      	b.n	800a2c0 <_vfiprintf_r+0x124>
 800a378:	2301      	movs	r3, #1
 800a37a:	425b      	negs	r3, r3
 800a37c:	e7ce      	b.n	800a31c <_vfiprintf_r+0x180>
 800a37e:	2300      	movs	r3, #0
 800a380:	001a      	movs	r2, r3
 800a382:	3701      	adds	r7, #1
 800a384:	606b      	str	r3, [r5, #4]
 800a386:	7839      	ldrb	r1, [r7, #0]
 800a388:	1c78      	adds	r0, r7, #1
 800a38a:	3930      	subs	r1, #48	; 0x30
 800a38c:	4684      	mov	ip, r0
 800a38e:	2909      	cmp	r1, #9
 800a390:	d903      	bls.n	800a39a <_vfiprintf_r+0x1fe>
 800a392:	2b00      	cmp	r3, #0
 800a394:	d0c3      	beq.n	800a31e <_vfiprintf_r+0x182>
 800a396:	9209      	str	r2, [sp, #36]	; 0x24
 800a398:	e7c1      	b.n	800a31e <_vfiprintf_r+0x182>
 800a39a:	230a      	movs	r3, #10
 800a39c:	435a      	muls	r2, r3
 800a39e:	4667      	mov	r7, ip
 800a3a0:	1852      	adds	r2, r2, r1
 800a3a2:	3b09      	subs	r3, #9
 800a3a4:	e7ef      	b.n	800a386 <_vfiprintf_r+0x1ea>
 800a3a6:	ab07      	add	r3, sp, #28
 800a3a8:	9300      	str	r3, [sp, #0]
 800a3aa:	0022      	movs	r2, r4
 800a3ac:	0029      	movs	r1, r5
 800a3ae:	0030      	movs	r0, r6
 800a3b0:	4b16      	ldr	r3, [pc, #88]	; (800a40c <_vfiprintf_r+0x270>)
 800a3b2:	f7fb ffc9 	bl	8006348 <_printf_float>
 800a3b6:	9004      	str	r0, [sp, #16]
 800a3b8:	9b04      	ldr	r3, [sp, #16]
 800a3ba:	3301      	adds	r3, #1
 800a3bc:	d1d1      	bne.n	800a362 <_vfiprintf_r+0x1c6>
 800a3be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3c0:	07db      	lsls	r3, r3, #31
 800a3c2:	d405      	bmi.n	800a3d0 <_vfiprintf_r+0x234>
 800a3c4:	89a3      	ldrh	r3, [r4, #12]
 800a3c6:	059b      	lsls	r3, r3, #22
 800a3c8:	d402      	bmi.n	800a3d0 <_vfiprintf_r+0x234>
 800a3ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3cc:	f000 fac6 	bl	800a95c <__retarget_lock_release_recursive>
 800a3d0:	89a3      	ldrh	r3, [r4, #12]
 800a3d2:	065b      	lsls	r3, r3, #25
 800a3d4:	d500      	bpl.n	800a3d8 <_vfiprintf_r+0x23c>
 800a3d6:	e70a      	b.n	800a1ee <_vfiprintf_r+0x52>
 800a3d8:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a3da:	e70a      	b.n	800a1f2 <_vfiprintf_r+0x56>
 800a3dc:	ab07      	add	r3, sp, #28
 800a3de:	9300      	str	r3, [sp, #0]
 800a3e0:	0022      	movs	r2, r4
 800a3e2:	0029      	movs	r1, r5
 800a3e4:	0030      	movs	r0, r6
 800a3e6:	4b09      	ldr	r3, [pc, #36]	; (800a40c <_vfiprintf_r+0x270>)
 800a3e8:	f7fc fa60 	bl	80068ac <_printf_i>
 800a3ec:	e7e3      	b.n	800a3b6 <_vfiprintf_r+0x21a>
 800a3ee:	46c0      	nop			; (mov r8, r8)
 800a3f0:	0800b1ec 	.word	0x0800b1ec
 800a3f4:	0800b20c 	.word	0x0800b20c
 800a3f8:	0800b1cc 	.word	0x0800b1cc
 800a3fc:	0800b17c 	.word	0x0800b17c
 800a400:	0800b182 	.word	0x0800b182
 800a404:	0800b186 	.word	0x0800b186
 800a408:	08006349 	.word	0x08006349
 800a40c:	0800a179 	.word	0x0800a179

0800a410 <__swbuf_r>:
 800a410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a412:	0005      	movs	r5, r0
 800a414:	000e      	movs	r6, r1
 800a416:	0014      	movs	r4, r2
 800a418:	2800      	cmp	r0, #0
 800a41a:	d004      	beq.n	800a426 <__swbuf_r+0x16>
 800a41c:	6983      	ldr	r3, [r0, #24]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d101      	bne.n	800a426 <__swbuf_r+0x16>
 800a422:	f000 f9f9 	bl	800a818 <__sinit>
 800a426:	4b22      	ldr	r3, [pc, #136]	; (800a4b0 <__swbuf_r+0xa0>)
 800a428:	429c      	cmp	r4, r3
 800a42a:	d12e      	bne.n	800a48a <__swbuf_r+0x7a>
 800a42c:	686c      	ldr	r4, [r5, #4]
 800a42e:	69a3      	ldr	r3, [r4, #24]
 800a430:	60a3      	str	r3, [r4, #8]
 800a432:	89a3      	ldrh	r3, [r4, #12]
 800a434:	071b      	lsls	r3, r3, #28
 800a436:	d532      	bpl.n	800a49e <__swbuf_r+0x8e>
 800a438:	6923      	ldr	r3, [r4, #16]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d02f      	beq.n	800a49e <__swbuf_r+0x8e>
 800a43e:	6823      	ldr	r3, [r4, #0]
 800a440:	6922      	ldr	r2, [r4, #16]
 800a442:	b2f7      	uxtb	r7, r6
 800a444:	1a98      	subs	r0, r3, r2
 800a446:	6963      	ldr	r3, [r4, #20]
 800a448:	b2f6      	uxtb	r6, r6
 800a44a:	4283      	cmp	r3, r0
 800a44c:	dc05      	bgt.n	800a45a <__swbuf_r+0x4a>
 800a44e:	0021      	movs	r1, r4
 800a450:	0028      	movs	r0, r5
 800a452:	f000 f93f 	bl	800a6d4 <_fflush_r>
 800a456:	2800      	cmp	r0, #0
 800a458:	d127      	bne.n	800a4aa <__swbuf_r+0x9a>
 800a45a:	68a3      	ldr	r3, [r4, #8]
 800a45c:	3001      	adds	r0, #1
 800a45e:	3b01      	subs	r3, #1
 800a460:	60a3      	str	r3, [r4, #8]
 800a462:	6823      	ldr	r3, [r4, #0]
 800a464:	1c5a      	adds	r2, r3, #1
 800a466:	6022      	str	r2, [r4, #0]
 800a468:	701f      	strb	r7, [r3, #0]
 800a46a:	6963      	ldr	r3, [r4, #20]
 800a46c:	4283      	cmp	r3, r0
 800a46e:	d004      	beq.n	800a47a <__swbuf_r+0x6a>
 800a470:	89a3      	ldrh	r3, [r4, #12]
 800a472:	07db      	lsls	r3, r3, #31
 800a474:	d507      	bpl.n	800a486 <__swbuf_r+0x76>
 800a476:	2e0a      	cmp	r6, #10
 800a478:	d105      	bne.n	800a486 <__swbuf_r+0x76>
 800a47a:	0021      	movs	r1, r4
 800a47c:	0028      	movs	r0, r5
 800a47e:	f000 f929 	bl	800a6d4 <_fflush_r>
 800a482:	2800      	cmp	r0, #0
 800a484:	d111      	bne.n	800a4aa <__swbuf_r+0x9a>
 800a486:	0030      	movs	r0, r6
 800a488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a48a:	4b0a      	ldr	r3, [pc, #40]	; (800a4b4 <__swbuf_r+0xa4>)
 800a48c:	429c      	cmp	r4, r3
 800a48e:	d101      	bne.n	800a494 <__swbuf_r+0x84>
 800a490:	68ac      	ldr	r4, [r5, #8]
 800a492:	e7cc      	b.n	800a42e <__swbuf_r+0x1e>
 800a494:	4b08      	ldr	r3, [pc, #32]	; (800a4b8 <__swbuf_r+0xa8>)
 800a496:	429c      	cmp	r4, r3
 800a498:	d1c9      	bne.n	800a42e <__swbuf_r+0x1e>
 800a49a:	68ec      	ldr	r4, [r5, #12]
 800a49c:	e7c7      	b.n	800a42e <__swbuf_r+0x1e>
 800a49e:	0021      	movs	r1, r4
 800a4a0:	0028      	movs	r0, r5
 800a4a2:	f000 f80b 	bl	800a4bc <__swsetup_r>
 800a4a6:	2800      	cmp	r0, #0
 800a4a8:	d0c9      	beq.n	800a43e <__swbuf_r+0x2e>
 800a4aa:	2601      	movs	r6, #1
 800a4ac:	4276      	negs	r6, r6
 800a4ae:	e7ea      	b.n	800a486 <__swbuf_r+0x76>
 800a4b0:	0800b1ec 	.word	0x0800b1ec
 800a4b4:	0800b20c 	.word	0x0800b20c
 800a4b8:	0800b1cc 	.word	0x0800b1cc

0800a4bc <__swsetup_r>:
 800a4bc:	4b37      	ldr	r3, [pc, #220]	; (800a59c <__swsetup_r+0xe0>)
 800a4be:	b570      	push	{r4, r5, r6, lr}
 800a4c0:	681d      	ldr	r5, [r3, #0]
 800a4c2:	0006      	movs	r6, r0
 800a4c4:	000c      	movs	r4, r1
 800a4c6:	2d00      	cmp	r5, #0
 800a4c8:	d005      	beq.n	800a4d6 <__swsetup_r+0x1a>
 800a4ca:	69ab      	ldr	r3, [r5, #24]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d102      	bne.n	800a4d6 <__swsetup_r+0x1a>
 800a4d0:	0028      	movs	r0, r5
 800a4d2:	f000 f9a1 	bl	800a818 <__sinit>
 800a4d6:	4b32      	ldr	r3, [pc, #200]	; (800a5a0 <__swsetup_r+0xe4>)
 800a4d8:	429c      	cmp	r4, r3
 800a4da:	d10f      	bne.n	800a4fc <__swsetup_r+0x40>
 800a4dc:	686c      	ldr	r4, [r5, #4]
 800a4de:	230c      	movs	r3, #12
 800a4e0:	5ee2      	ldrsh	r2, [r4, r3]
 800a4e2:	b293      	uxth	r3, r2
 800a4e4:	0711      	lsls	r1, r2, #28
 800a4e6:	d42d      	bmi.n	800a544 <__swsetup_r+0x88>
 800a4e8:	06d9      	lsls	r1, r3, #27
 800a4ea:	d411      	bmi.n	800a510 <__swsetup_r+0x54>
 800a4ec:	2309      	movs	r3, #9
 800a4ee:	2001      	movs	r0, #1
 800a4f0:	6033      	str	r3, [r6, #0]
 800a4f2:	3337      	adds	r3, #55	; 0x37
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	81a3      	strh	r3, [r4, #12]
 800a4f8:	4240      	negs	r0, r0
 800a4fa:	bd70      	pop	{r4, r5, r6, pc}
 800a4fc:	4b29      	ldr	r3, [pc, #164]	; (800a5a4 <__swsetup_r+0xe8>)
 800a4fe:	429c      	cmp	r4, r3
 800a500:	d101      	bne.n	800a506 <__swsetup_r+0x4a>
 800a502:	68ac      	ldr	r4, [r5, #8]
 800a504:	e7eb      	b.n	800a4de <__swsetup_r+0x22>
 800a506:	4b28      	ldr	r3, [pc, #160]	; (800a5a8 <__swsetup_r+0xec>)
 800a508:	429c      	cmp	r4, r3
 800a50a:	d1e8      	bne.n	800a4de <__swsetup_r+0x22>
 800a50c:	68ec      	ldr	r4, [r5, #12]
 800a50e:	e7e6      	b.n	800a4de <__swsetup_r+0x22>
 800a510:	075b      	lsls	r3, r3, #29
 800a512:	d513      	bpl.n	800a53c <__swsetup_r+0x80>
 800a514:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a516:	2900      	cmp	r1, #0
 800a518:	d008      	beq.n	800a52c <__swsetup_r+0x70>
 800a51a:	0023      	movs	r3, r4
 800a51c:	3344      	adds	r3, #68	; 0x44
 800a51e:	4299      	cmp	r1, r3
 800a520:	d002      	beq.n	800a528 <__swsetup_r+0x6c>
 800a522:	0030      	movs	r0, r6
 800a524:	f7ff fb16 	bl	8009b54 <_free_r>
 800a528:	2300      	movs	r3, #0
 800a52a:	6363      	str	r3, [r4, #52]	; 0x34
 800a52c:	2224      	movs	r2, #36	; 0x24
 800a52e:	89a3      	ldrh	r3, [r4, #12]
 800a530:	4393      	bics	r3, r2
 800a532:	81a3      	strh	r3, [r4, #12]
 800a534:	2300      	movs	r3, #0
 800a536:	6063      	str	r3, [r4, #4]
 800a538:	6923      	ldr	r3, [r4, #16]
 800a53a:	6023      	str	r3, [r4, #0]
 800a53c:	2308      	movs	r3, #8
 800a53e:	89a2      	ldrh	r2, [r4, #12]
 800a540:	4313      	orrs	r3, r2
 800a542:	81a3      	strh	r3, [r4, #12]
 800a544:	6923      	ldr	r3, [r4, #16]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d10b      	bne.n	800a562 <__swsetup_r+0xa6>
 800a54a:	21a0      	movs	r1, #160	; 0xa0
 800a54c:	2280      	movs	r2, #128	; 0x80
 800a54e:	89a3      	ldrh	r3, [r4, #12]
 800a550:	0089      	lsls	r1, r1, #2
 800a552:	0092      	lsls	r2, r2, #2
 800a554:	400b      	ands	r3, r1
 800a556:	4293      	cmp	r3, r2
 800a558:	d003      	beq.n	800a562 <__swsetup_r+0xa6>
 800a55a:	0021      	movs	r1, r4
 800a55c:	0030      	movs	r0, r6
 800a55e:	f000 fa27 	bl	800a9b0 <__smakebuf_r>
 800a562:	220c      	movs	r2, #12
 800a564:	5ea3      	ldrsh	r3, [r4, r2]
 800a566:	2001      	movs	r0, #1
 800a568:	001a      	movs	r2, r3
 800a56a:	b299      	uxth	r1, r3
 800a56c:	4002      	ands	r2, r0
 800a56e:	4203      	tst	r3, r0
 800a570:	d00f      	beq.n	800a592 <__swsetup_r+0xd6>
 800a572:	2200      	movs	r2, #0
 800a574:	60a2      	str	r2, [r4, #8]
 800a576:	6962      	ldr	r2, [r4, #20]
 800a578:	4252      	negs	r2, r2
 800a57a:	61a2      	str	r2, [r4, #24]
 800a57c:	2000      	movs	r0, #0
 800a57e:	6922      	ldr	r2, [r4, #16]
 800a580:	4282      	cmp	r2, r0
 800a582:	d1ba      	bne.n	800a4fa <__swsetup_r+0x3e>
 800a584:	060a      	lsls	r2, r1, #24
 800a586:	d5b8      	bpl.n	800a4fa <__swsetup_r+0x3e>
 800a588:	2240      	movs	r2, #64	; 0x40
 800a58a:	4313      	orrs	r3, r2
 800a58c:	81a3      	strh	r3, [r4, #12]
 800a58e:	3801      	subs	r0, #1
 800a590:	e7b3      	b.n	800a4fa <__swsetup_r+0x3e>
 800a592:	0788      	lsls	r0, r1, #30
 800a594:	d400      	bmi.n	800a598 <__swsetup_r+0xdc>
 800a596:	6962      	ldr	r2, [r4, #20]
 800a598:	60a2      	str	r2, [r4, #8]
 800a59a:	e7ef      	b.n	800a57c <__swsetup_r+0xc0>
 800a59c:	20000030 	.word	0x20000030
 800a5a0:	0800b1ec 	.word	0x0800b1ec
 800a5a4:	0800b20c 	.word	0x0800b20c
 800a5a8:	0800b1cc 	.word	0x0800b1cc

0800a5ac <abort>:
 800a5ac:	2006      	movs	r0, #6
 800a5ae:	b510      	push	{r4, lr}
 800a5b0:	f000 fa74 	bl	800aa9c <raise>
 800a5b4:	2001      	movs	r0, #1
 800a5b6:	f7f8 fdd9 	bl	800316c <_exit>
	...

0800a5bc <__sflush_r>:
 800a5bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5be:	898b      	ldrh	r3, [r1, #12]
 800a5c0:	0005      	movs	r5, r0
 800a5c2:	000c      	movs	r4, r1
 800a5c4:	071a      	lsls	r2, r3, #28
 800a5c6:	d45f      	bmi.n	800a688 <__sflush_r+0xcc>
 800a5c8:	684a      	ldr	r2, [r1, #4]
 800a5ca:	2a00      	cmp	r2, #0
 800a5cc:	dc04      	bgt.n	800a5d8 <__sflush_r+0x1c>
 800a5ce:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a5d0:	2a00      	cmp	r2, #0
 800a5d2:	dc01      	bgt.n	800a5d8 <__sflush_r+0x1c>
 800a5d4:	2000      	movs	r0, #0
 800a5d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a5d8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a5da:	2f00      	cmp	r7, #0
 800a5dc:	d0fa      	beq.n	800a5d4 <__sflush_r+0x18>
 800a5de:	2200      	movs	r2, #0
 800a5e0:	2180      	movs	r1, #128	; 0x80
 800a5e2:	682e      	ldr	r6, [r5, #0]
 800a5e4:	602a      	str	r2, [r5, #0]
 800a5e6:	001a      	movs	r2, r3
 800a5e8:	0149      	lsls	r1, r1, #5
 800a5ea:	400a      	ands	r2, r1
 800a5ec:	420b      	tst	r3, r1
 800a5ee:	d034      	beq.n	800a65a <__sflush_r+0x9e>
 800a5f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a5f2:	89a3      	ldrh	r3, [r4, #12]
 800a5f4:	075b      	lsls	r3, r3, #29
 800a5f6:	d506      	bpl.n	800a606 <__sflush_r+0x4a>
 800a5f8:	6863      	ldr	r3, [r4, #4]
 800a5fa:	1ac0      	subs	r0, r0, r3
 800a5fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d001      	beq.n	800a606 <__sflush_r+0x4a>
 800a602:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a604:	1ac0      	subs	r0, r0, r3
 800a606:	0002      	movs	r2, r0
 800a608:	6a21      	ldr	r1, [r4, #32]
 800a60a:	2300      	movs	r3, #0
 800a60c:	0028      	movs	r0, r5
 800a60e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a610:	47b8      	blx	r7
 800a612:	89a1      	ldrh	r1, [r4, #12]
 800a614:	1c43      	adds	r3, r0, #1
 800a616:	d106      	bne.n	800a626 <__sflush_r+0x6a>
 800a618:	682b      	ldr	r3, [r5, #0]
 800a61a:	2b1d      	cmp	r3, #29
 800a61c:	d831      	bhi.n	800a682 <__sflush_r+0xc6>
 800a61e:	4a2c      	ldr	r2, [pc, #176]	; (800a6d0 <__sflush_r+0x114>)
 800a620:	40da      	lsrs	r2, r3
 800a622:	07d3      	lsls	r3, r2, #31
 800a624:	d52d      	bpl.n	800a682 <__sflush_r+0xc6>
 800a626:	2300      	movs	r3, #0
 800a628:	6063      	str	r3, [r4, #4]
 800a62a:	6923      	ldr	r3, [r4, #16]
 800a62c:	6023      	str	r3, [r4, #0]
 800a62e:	04cb      	lsls	r3, r1, #19
 800a630:	d505      	bpl.n	800a63e <__sflush_r+0x82>
 800a632:	1c43      	adds	r3, r0, #1
 800a634:	d102      	bne.n	800a63c <__sflush_r+0x80>
 800a636:	682b      	ldr	r3, [r5, #0]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d100      	bne.n	800a63e <__sflush_r+0x82>
 800a63c:	6560      	str	r0, [r4, #84]	; 0x54
 800a63e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a640:	602e      	str	r6, [r5, #0]
 800a642:	2900      	cmp	r1, #0
 800a644:	d0c6      	beq.n	800a5d4 <__sflush_r+0x18>
 800a646:	0023      	movs	r3, r4
 800a648:	3344      	adds	r3, #68	; 0x44
 800a64a:	4299      	cmp	r1, r3
 800a64c:	d002      	beq.n	800a654 <__sflush_r+0x98>
 800a64e:	0028      	movs	r0, r5
 800a650:	f7ff fa80 	bl	8009b54 <_free_r>
 800a654:	2000      	movs	r0, #0
 800a656:	6360      	str	r0, [r4, #52]	; 0x34
 800a658:	e7bd      	b.n	800a5d6 <__sflush_r+0x1a>
 800a65a:	2301      	movs	r3, #1
 800a65c:	0028      	movs	r0, r5
 800a65e:	6a21      	ldr	r1, [r4, #32]
 800a660:	47b8      	blx	r7
 800a662:	1c43      	adds	r3, r0, #1
 800a664:	d1c5      	bne.n	800a5f2 <__sflush_r+0x36>
 800a666:	682b      	ldr	r3, [r5, #0]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d0c2      	beq.n	800a5f2 <__sflush_r+0x36>
 800a66c:	2b1d      	cmp	r3, #29
 800a66e:	d001      	beq.n	800a674 <__sflush_r+0xb8>
 800a670:	2b16      	cmp	r3, #22
 800a672:	d101      	bne.n	800a678 <__sflush_r+0xbc>
 800a674:	602e      	str	r6, [r5, #0]
 800a676:	e7ad      	b.n	800a5d4 <__sflush_r+0x18>
 800a678:	2340      	movs	r3, #64	; 0x40
 800a67a:	89a2      	ldrh	r2, [r4, #12]
 800a67c:	4313      	orrs	r3, r2
 800a67e:	81a3      	strh	r3, [r4, #12]
 800a680:	e7a9      	b.n	800a5d6 <__sflush_r+0x1a>
 800a682:	2340      	movs	r3, #64	; 0x40
 800a684:	430b      	orrs	r3, r1
 800a686:	e7fa      	b.n	800a67e <__sflush_r+0xc2>
 800a688:	690f      	ldr	r7, [r1, #16]
 800a68a:	2f00      	cmp	r7, #0
 800a68c:	d0a2      	beq.n	800a5d4 <__sflush_r+0x18>
 800a68e:	680a      	ldr	r2, [r1, #0]
 800a690:	600f      	str	r7, [r1, #0]
 800a692:	1bd2      	subs	r2, r2, r7
 800a694:	9201      	str	r2, [sp, #4]
 800a696:	2200      	movs	r2, #0
 800a698:	079b      	lsls	r3, r3, #30
 800a69a:	d100      	bne.n	800a69e <__sflush_r+0xe2>
 800a69c:	694a      	ldr	r2, [r1, #20]
 800a69e:	60a2      	str	r2, [r4, #8]
 800a6a0:	9b01      	ldr	r3, [sp, #4]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	dc00      	bgt.n	800a6a8 <__sflush_r+0xec>
 800a6a6:	e795      	b.n	800a5d4 <__sflush_r+0x18>
 800a6a8:	003a      	movs	r2, r7
 800a6aa:	0028      	movs	r0, r5
 800a6ac:	9b01      	ldr	r3, [sp, #4]
 800a6ae:	6a21      	ldr	r1, [r4, #32]
 800a6b0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a6b2:	47b0      	blx	r6
 800a6b4:	2800      	cmp	r0, #0
 800a6b6:	dc06      	bgt.n	800a6c6 <__sflush_r+0x10a>
 800a6b8:	2340      	movs	r3, #64	; 0x40
 800a6ba:	2001      	movs	r0, #1
 800a6bc:	89a2      	ldrh	r2, [r4, #12]
 800a6be:	4240      	negs	r0, r0
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	81a3      	strh	r3, [r4, #12]
 800a6c4:	e787      	b.n	800a5d6 <__sflush_r+0x1a>
 800a6c6:	9b01      	ldr	r3, [sp, #4]
 800a6c8:	183f      	adds	r7, r7, r0
 800a6ca:	1a1b      	subs	r3, r3, r0
 800a6cc:	9301      	str	r3, [sp, #4]
 800a6ce:	e7e7      	b.n	800a6a0 <__sflush_r+0xe4>
 800a6d0:	20400001 	.word	0x20400001

0800a6d4 <_fflush_r>:
 800a6d4:	690b      	ldr	r3, [r1, #16]
 800a6d6:	b570      	push	{r4, r5, r6, lr}
 800a6d8:	0005      	movs	r5, r0
 800a6da:	000c      	movs	r4, r1
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d102      	bne.n	800a6e6 <_fflush_r+0x12>
 800a6e0:	2500      	movs	r5, #0
 800a6e2:	0028      	movs	r0, r5
 800a6e4:	bd70      	pop	{r4, r5, r6, pc}
 800a6e6:	2800      	cmp	r0, #0
 800a6e8:	d004      	beq.n	800a6f4 <_fflush_r+0x20>
 800a6ea:	6983      	ldr	r3, [r0, #24]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d101      	bne.n	800a6f4 <_fflush_r+0x20>
 800a6f0:	f000 f892 	bl	800a818 <__sinit>
 800a6f4:	4b14      	ldr	r3, [pc, #80]	; (800a748 <_fflush_r+0x74>)
 800a6f6:	429c      	cmp	r4, r3
 800a6f8:	d11b      	bne.n	800a732 <_fflush_r+0x5e>
 800a6fa:	686c      	ldr	r4, [r5, #4]
 800a6fc:	220c      	movs	r2, #12
 800a6fe:	5ea3      	ldrsh	r3, [r4, r2]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d0ed      	beq.n	800a6e0 <_fflush_r+0xc>
 800a704:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a706:	07d2      	lsls	r2, r2, #31
 800a708:	d404      	bmi.n	800a714 <_fflush_r+0x40>
 800a70a:	059b      	lsls	r3, r3, #22
 800a70c:	d402      	bmi.n	800a714 <_fflush_r+0x40>
 800a70e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a710:	f000 f923 	bl	800a95a <__retarget_lock_acquire_recursive>
 800a714:	0028      	movs	r0, r5
 800a716:	0021      	movs	r1, r4
 800a718:	f7ff ff50 	bl	800a5bc <__sflush_r>
 800a71c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a71e:	0005      	movs	r5, r0
 800a720:	07db      	lsls	r3, r3, #31
 800a722:	d4de      	bmi.n	800a6e2 <_fflush_r+0xe>
 800a724:	89a3      	ldrh	r3, [r4, #12]
 800a726:	059b      	lsls	r3, r3, #22
 800a728:	d4db      	bmi.n	800a6e2 <_fflush_r+0xe>
 800a72a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a72c:	f000 f916 	bl	800a95c <__retarget_lock_release_recursive>
 800a730:	e7d7      	b.n	800a6e2 <_fflush_r+0xe>
 800a732:	4b06      	ldr	r3, [pc, #24]	; (800a74c <_fflush_r+0x78>)
 800a734:	429c      	cmp	r4, r3
 800a736:	d101      	bne.n	800a73c <_fflush_r+0x68>
 800a738:	68ac      	ldr	r4, [r5, #8]
 800a73a:	e7df      	b.n	800a6fc <_fflush_r+0x28>
 800a73c:	4b04      	ldr	r3, [pc, #16]	; (800a750 <_fflush_r+0x7c>)
 800a73e:	429c      	cmp	r4, r3
 800a740:	d1dc      	bne.n	800a6fc <_fflush_r+0x28>
 800a742:	68ec      	ldr	r4, [r5, #12]
 800a744:	e7da      	b.n	800a6fc <_fflush_r+0x28>
 800a746:	46c0      	nop			; (mov r8, r8)
 800a748:	0800b1ec 	.word	0x0800b1ec
 800a74c:	0800b20c 	.word	0x0800b20c
 800a750:	0800b1cc 	.word	0x0800b1cc

0800a754 <std>:
 800a754:	2300      	movs	r3, #0
 800a756:	b510      	push	{r4, lr}
 800a758:	0004      	movs	r4, r0
 800a75a:	6003      	str	r3, [r0, #0]
 800a75c:	6043      	str	r3, [r0, #4]
 800a75e:	6083      	str	r3, [r0, #8]
 800a760:	8181      	strh	r1, [r0, #12]
 800a762:	6643      	str	r3, [r0, #100]	; 0x64
 800a764:	0019      	movs	r1, r3
 800a766:	81c2      	strh	r2, [r0, #14]
 800a768:	6103      	str	r3, [r0, #16]
 800a76a:	6143      	str	r3, [r0, #20]
 800a76c:	6183      	str	r3, [r0, #24]
 800a76e:	2208      	movs	r2, #8
 800a770:	305c      	adds	r0, #92	; 0x5c
 800a772:	f7fb fd37 	bl	80061e4 <memset>
 800a776:	4b05      	ldr	r3, [pc, #20]	; (800a78c <std+0x38>)
 800a778:	6224      	str	r4, [r4, #32]
 800a77a:	6263      	str	r3, [r4, #36]	; 0x24
 800a77c:	4b04      	ldr	r3, [pc, #16]	; (800a790 <std+0x3c>)
 800a77e:	62a3      	str	r3, [r4, #40]	; 0x28
 800a780:	4b04      	ldr	r3, [pc, #16]	; (800a794 <std+0x40>)
 800a782:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a784:	4b04      	ldr	r3, [pc, #16]	; (800a798 <std+0x44>)
 800a786:	6323      	str	r3, [r4, #48]	; 0x30
 800a788:	bd10      	pop	{r4, pc}
 800a78a:	46c0      	nop			; (mov r8, r8)
 800a78c:	0800aadd 	.word	0x0800aadd
 800a790:	0800ab05 	.word	0x0800ab05
 800a794:	0800ab3d 	.word	0x0800ab3d
 800a798:	0800ab69 	.word	0x0800ab69

0800a79c <_cleanup_r>:
 800a79c:	b510      	push	{r4, lr}
 800a79e:	4902      	ldr	r1, [pc, #8]	; (800a7a8 <_cleanup_r+0xc>)
 800a7a0:	f000 f8ba 	bl	800a918 <_fwalk_reent>
 800a7a4:	bd10      	pop	{r4, pc}
 800a7a6:	46c0      	nop			; (mov r8, r8)
 800a7a8:	0800a6d5 	.word	0x0800a6d5

0800a7ac <__sfmoreglue>:
 800a7ac:	b570      	push	{r4, r5, r6, lr}
 800a7ae:	2568      	movs	r5, #104	; 0x68
 800a7b0:	1e4a      	subs	r2, r1, #1
 800a7b2:	4355      	muls	r5, r2
 800a7b4:	000e      	movs	r6, r1
 800a7b6:	0029      	movs	r1, r5
 800a7b8:	3174      	adds	r1, #116	; 0x74
 800a7ba:	f7ff fa37 	bl	8009c2c <_malloc_r>
 800a7be:	1e04      	subs	r4, r0, #0
 800a7c0:	d008      	beq.n	800a7d4 <__sfmoreglue+0x28>
 800a7c2:	2100      	movs	r1, #0
 800a7c4:	002a      	movs	r2, r5
 800a7c6:	6001      	str	r1, [r0, #0]
 800a7c8:	6046      	str	r6, [r0, #4]
 800a7ca:	300c      	adds	r0, #12
 800a7cc:	60a0      	str	r0, [r4, #8]
 800a7ce:	3268      	adds	r2, #104	; 0x68
 800a7d0:	f7fb fd08 	bl	80061e4 <memset>
 800a7d4:	0020      	movs	r0, r4
 800a7d6:	bd70      	pop	{r4, r5, r6, pc}

0800a7d8 <__sfp_lock_acquire>:
 800a7d8:	b510      	push	{r4, lr}
 800a7da:	4802      	ldr	r0, [pc, #8]	; (800a7e4 <__sfp_lock_acquire+0xc>)
 800a7dc:	f000 f8bd 	bl	800a95a <__retarget_lock_acquire_recursive>
 800a7e0:	bd10      	pop	{r4, pc}
 800a7e2:	46c0      	nop			; (mov r8, r8)
 800a7e4:	200003b5 	.word	0x200003b5

0800a7e8 <__sfp_lock_release>:
 800a7e8:	b510      	push	{r4, lr}
 800a7ea:	4802      	ldr	r0, [pc, #8]	; (800a7f4 <__sfp_lock_release+0xc>)
 800a7ec:	f000 f8b6 	bl	800a95c <__retarget_lock_release_recursive>
 800a7f0:	bd10      	pop	{r4, pc}
 800a7f2:	46c0      	nop			; (mov r8, r8)
 800a7f4:	200003b5 	.word	0x200003b5

0800a7f8 <__sinit_lock_acquire>:
 800a7f8:	b510      	push	{r4, lr}
 800a7fa:	4802      	ldr	r0, [pc, #8]	; (800a804 <__sinit_lock_acquire+0xc>)
 800a7fc:	f000 f8ad 	bl	800a95a <__retarget_lock_acquire_recursive>
 800a800:	bd10      	pop	{r4, pc}
 800a802:	46c0      	nop			; (mov r8, r8)
 800a804:	200003b6 	.word	0x200003b6

0800a808 <__sinit_lock_release>:
 800a808:	b510      	push	{r4, lr}
 800a80a:	4802      	ldr	r0, [pc, #8]	; (800a814 <__sinit_lock_release+0xc>)
 800a80c:	f000 f8a6 	bl	800a95c <__retarget_lock_release_recursive>
 800a810:	bd10      	pop	{r4, pc}
 800a812:	46c0      	nop			; (mov r8, r8)
 800a814:	200003b6 	.word	0x200003b6

0800a818 <__sinit>:
 800a818:	b513      	push	{r0, r1, r4, lr}
 800a81a:	0004      	movs	r4, r0
 800a81c:	f7ff ffec 	bl	800a7f8 <__sinit_lock_acquire>
 800a820:	69a3      	ldr	r3, [r4, #24]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d002      	beq.n	800a82c <__sinit+0x14>
 800a826:	f7ff ffef 	bl	800a808 <__sinit_lock_release>
 800a82a:	bd13      	pop	{r0, r1, r4, pc}
 800a82c:	64a3      	str	r3, [r4, #72]	; 0x48
 800a82e:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a830:	6523      	str	r3, [r4, #80]	; 0x50
 800a832:	4b13      	ldr	r3, [pc, #76]	; (800a880 <__sinit+0x68>)
 800a834:	4a13      	ldr	r2, [pc, #76]	; (800a884 <__sinit+0x6c>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	62a2      	str	r2, [r4, #40]	; 0x28
 800a83a:	9301      	str	r3, [sp, #4]
 800a83c:	42a3      	cmp	r3, r4
 800a83e:	d101      	bne.n	800a844 <__sinit+0x2c>
 800a840:	2301      	movs	r3, #1
 800a842:	61a3      	str	r3, [r4, #24]
 800a844:	0020      	movs	r0, r4
 800a846:	f000 f81f 	bl	800a888 <__sfp>
 800a84a:	6060      	str	r0, [r4, #4]
 800a84c:	0020      	movs	r0, r4
 800a84e:	f000 f81b 	bl	800a888 <__sfp>
 800a852:	60a0      	str	r0, [r4, #8]
 800a854:	0020      	movs	r0, r4
 800a856:	f000 f817 	bl	800a888 <__sfp>
 800a85a:	2200      	movs	r2, #0
 800a85c:	2104      	movs	r1, #4
 800a85e:	60e0      	str	r0, [r4, #12]
 800a860:	6860      	ldr	r0, [r4, #4]
 800a862:	f7ff ff77 	bl	800a754 <std>
 800a866:	2201      	movs	r2, #1
 800a868:	2109      	movs	r1, #9
 800a86a:	68a0      	ldr	r0, [r4, #8]
 800a86c:	f7ff ff72 	bl	800a754 <std>
 800a870:	2202      	movs	r2, #2
 800a872:	2112      	movs	r1, #18
 800a874:	68e0      	ldr	r0, [r4, #12]
 800a876:	f7ff ff6d 	bl	800a754 <std>
 800a87a:	2301      	movs	r3, #1
 800a87c:	61a3      	str	r3, [r4, #24]
 800a87e:	e7d2      	b.n	800a826 <__sinit+0xe>
 800a880:	0800ad88 	.word	0x0800ad88
 800a884:	0800a79d 	.word	0x0800a79d

0800a888 <__sfp>:
 800a888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a88a:	0007      	movs	r7, r0
 800a88c:	f7ff ffa4 	bl	800a7d8 <__sfp_lock_acquire>
 800a890:	4b1f      	ldr	r3, [pc, #124]	; (800a910 <__sfp+0x88>)
 800a892:	681e      	ldr	r6, [r3, #0]
 800a894:	69b3      	ldr	r3, [r6, #24]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d102      	bne.n	800a8a0 <__sfp+0x18>
 800a89a:	0030      	movs	r0, r6
 800a89c:	f7ff ffbc 	bl	800a818 <__sinit>
 800a8a0:	3648      	adds	r6, #72	; 0x48
 800a8a2:	68b4      	ldr	r4, [r6, #8]
 800a8a4:	6873      	ldr	r3, [r6, #4]
 800a8a6:	3b01      	subs	r3, #1
 800a8a8:	d504      	bpl.n	800a8b4 <__sfp+0x2c>
 800a8aa:	6833      	ldr	r3, [r6, #0]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d022      	beq.n	800a8f6 <__sfp+0x6e>
 800a8b0:	6836      	ldr	r6, [r6, #0]
 800a8b2:	e7f6      	b.n	800a8a2 <__sfp+0x1a>
 800a8b4:	220c      	movs	r2, #12
 800a8b6:	5ea5      	ldrsh	r5, [r4, r2]
 800a8b8:	2d00      	cmp	r5, #0
 800a8ba:	d11a      	bne.n	800a8f2 <__sfp+0x6a>
 800a8bc:	0020      	movs	r0, r4
 800a8be:	4b15      	ldr	r3, [pc, #84]	; (800a914 <__sfp+0x8c>)
 800a8c0:	3058      	adds	r0, #88	; 0x58
 800a8c2:	60e3      	str	r3, [r4, #12]
 800a8c4:	6665      	str	r5, [r4, #100]	; 0x64
 800a8c6:	f000 f847 	bl	800a958 <__retarget_lock_init_recursive>
 800a8ca:	f7ff ff8d 	bl	800a7e8 <__sfp_lock_release>
 800a8ce:	0020      	movs	r0, r4
 800a8d0:	2208      	movs	r2, #8
 800a8d2:	0029      	movs	r1, r5
 800a8d4:	6025      	str	r5, [r4, #0]
 800a8d6:	60a5      	str	r5, [r4, #8]
 800a8d8:	6065      	str	r5, [r4, #4]
 800a8da:	6125      	str	r5, [r4, #16]
 800a8dc:	6165      	str	r5, [r4, #20]
 800a8de:	61a5      	str	r5, [r4, #24]
 800a8e0:	305c      	adds	r0, #92	; 0x5c
 800a8e2:	f7fb fc7f 	bl	80061e4 <memset>
 800a8e6:	6365      	str	r5, [r4, #52]	; 0x34
 800a8e8:	63a5      	str	r5, [r4, #56]	; 0x38
 800a8ea:	64a5      	str	r5, [r4, #72]	; 0x48
 800a8ec:	64e5      	str	r5, [r4, #76]	; 0x4c
 800a8ee:	0020      	movs	r0, r4
 800a8f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8f2:	3468      	adds	r4, #104	; 0x68
 800a8f4:	e7d7      	b.n	800a8a6 <__sfp+0x1e>
 800a8f6:	2104      	movs	r1, #4
 800a8f8:	0038      	movs	r0, r7
 800a8fa:	f7ff ff57 	bl	800a7ac <__sfmoreglue>
 800a8fe:	1e04      	subs	r4, r0, #0
 800a900:	6030      	str	r0, [r6, #0]
 800a902:	d1d5      	bne.n	800a8b0 <__sfp+0x28>
 800a904:	f7ff ff70 	bl	800a7e8 <__sfp_lock_release>
 800a908:	230c      	movs	r3, #12
 800a90a:	603b      	str	r3, [r7, #0]
 800a90c:	e7ef      	b.n	800a8ee <__sfp+0x66>
 800a90e:	46c0      	nop			; (mov r8, r8)
 800a910:	0800ad88 	.word	0x0800ad88
 800a914:	ffff0001 	.word	0xffff0001

0800a918 <_fwalk_reent>:
 800a918:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a91a:	0004      	movs	r4, r0
 800a91c:	0006      	movs	r6, r0
 800a91e:	2700      	movs	r7, #0
 800a920:	9101      	str	r1, [sp, #4]
 800a922:	3448      	adds	r4, #72	; 0x48
 800a924:	6863      	ldr	r3, [r4, #4]
 800a926:	68a5      	ldr	r5, [r4, #8]
 800a928:	9300      	str	r3, [sp, #0]
 800a92a:	9b00      	ldr	r3, [sp, #0]
 800a92c:	3b01      	subs	r3, #1
 800a92e:	9300      	str	r3, [sp, #0]
 800a930:	d504      	bpl.n	800a93c <_fwalk_reent+0x24>
 800a932:	6824      	ldr	r4, [r4, #0]
 800a934:	2c00      	cmp	r4, #0
 800a936:	d1f5      	bne.n	800a924 <_fwalk_reent+0xc>
 800a938:	0038      	movs	r0, r7
 800a93a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a93c:	89ab      	ldrh	r3, [r5, #12]
 800a93e:	2b01      	cmp	r3, #1
 800a940:	d908      	bls.n	800a954 <_fwalk_reent+0x3c>
 800a942:	220e      	movs	r2, #14
 800a944:	5eab      	ldrsh	r3, [r5, r2]
 800a946:	3301      	adds	r3, #1
 800a948:	d004      	beq.n	800a954 <_fwalk_reent+0x3c>
 800a94a:	0029      	movs	r1, r5
 800a94c:	0030      	movs	r0, r6
 800a94e:	9b01      	ldr	r3, [sp, #4]
 800a950:	4798      	blx	r3
 800a952:	4307      	orrs	r7, r0
 800a954:	3568      	adds	r5, #104	; 0x68
 800a956:	e7e8      	b.n	800a92a <_fwalk_reent+0x12>

0800a958 <__retarget_lock_init_recursive>:
 800a958:	4770      	bx	lr

0800a95a <__retarget_lock_acquire_recursive>:
 800a95a:	4770      	bx	lr

0800a95c <__retarget_lock_release_recursive>:
 800a95c:	4770      	bx	lr
	...

0800a960 <__swhatbuf_r>:
 800a960:	b570      	push	{r4, r5, r6, lr}
 800a962:	000e      	movs	r6, r1
 800a964:	001d      	movs	r5, r3
 800a966:	230e      	movs	r3, #14
 800a968:	5ec9      	ldrsh	r1, [r1, r3]
 800a96a:	0014      	movs	r4, r2
 800a96c:	b096      	sub	sp, #88	; 0x58
 800a96e:	2900      	cmp	r1, #0
 800a970:	da08      	bge.n	800a984 <__swhatbuf_r+0x24>
 800a972:	220c      	movs	r2, #12
 800a974:	5eb3      	ldrsh	r3, [r6, r2]
 800a976:	2200      	movs	r2, #0
 800a978:	602a      	str	r2, [r5, #0]
 800a97a:	061b      	lsls	r3, r3, #24
 800a97c:	d411      	bmi.n	800a9a2 <__swhatbuf_r+0x42>
 800a97e:	2380      	movs	r3, #128	; 0x80
 800a980:	00db      	lsls	r3, r3, #3
 800a982:	e00f      	b.n	800a9a4 <__swhatbuf_r+0x44>
 800a984:	466a      	mov	r2, sp
 800a986:	f000 f91b 	bl	800abc0 <_fstat_r>
 800a98a:	2800      	cmp	r0, #0
 800a98c:	dbf1      	blt.n	800a972 <__swhatbuf_r+0x12>
 800a98e:	23f0      	movs	r3, #240	; 0xf0
 800a990:	9901      	ldr	r1, [sp, #4]
 800a992:	021b      	lsls	r3, r3, #8
 800a994:	4019      	ands	r1, r3
 800a996:	4b05      	ldr	r3, [pc, #20]	; (800a9ac <__swhatbuf_r+0x4c>)
 800a998:	18c9      	adds	r1, r1, r3
 800a99a:	424b      	negs	r3, r1
 800a99c:	4159      	adcs	r1, r3
 800a99e:	6029      	str	r1, [r5, #0]
 800a9a0:	e7ed      	b.n	800a97e <__swhatbuf_r+0x1e>
 800a9a2:	2340      	movs	r3, #64	; 0x40
 800a9a4:	2000      	movs	r0, #0
 800a9a6:	6023      	str	r3, [r4, #0]
 800a9a8:	b016      	add	sp, #88	; 0x58
 800a9aa:	bd70      	pop	{r4, r5, r6, pc}
 800a9ac:	ffffe000 	.word	0xffffe000

0800a9b0 <__smakebuf_r>:
 800a9b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9b2:	2602      	movs	r6, #2
 800a9b4:	898b      	ldrh	r3, [r1, #12]
 800a9b6:	0005      	movs	r5, r0
 800a9b8:	000c      	movs	r4, r1
 800a9ba:	4233      	tst	r3, r6
 800a9bc:	d006      	beq.n	800a9cc <__smakebuf_r+0x1c>
 800a9be:	0023      	movs	r3, r4
 800a9c0:	3347      	adds	r3, #71	; 0x47
 800a9c2:	6023      	str	r3, [r4, #0]
 800a9c4:	6123      	str	r3, [r4, #16]
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	6163      	str	r3, [r4, #20]
 800a9ca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a9cc:	466a      	mov	r2, sp
 800a9ce:	ab01      	add	r3, sp, #4
 800a9d0:	f7ff ffc6 	bl	800a960 <__swhatbuf_r>
 800a9d4:	9900      	ldr	r1, [sp, #0]
 800a9d6:	0007      	movs	r7, r0
 800a9d8:	0028      	movs	r0, r5
 800a9da:	f7ff f927 	bl	8009c2c <_malloc_r>
 800a9de:	2800      	cmp	r0, #0
 800a9e0:	d108      	bne.n	800a9f4 <__smakebuf_r+0x44>
 800a9e2:	220c      	movs	r2, #12
 800a9e4:	5ea3      	ldrsh	r3, [r4, r2]
 800a9e6:	059a      	lsls	r2, r3, #22
 800a9e8:	d4ef      	bmi.n	800a9ca <__smakebuf_r+0x1a>
 800a9ea:	2203      	movs	r2, #3
 800a9ec:	4393      	bics	r3, r2
 800a9ee:	431e      	orrs	r6, r3
 800a9f0:	81a6      	strh	r6, [r4, #12]
 800a9f2:	e7e4      	b.n	800a9be <__smakebuf_r+0xe>
 800a9f4:	4b0f      	ldr	r3, [pc, #60]	; (800aa34 <__smakebuf_r+0x84>)
 800a9f6:	62ab      	str	r3, [r5, #40]	; 0x28
 800a9f8:	2380      	movs	r3, #128	; 0x80
 800a9fa:	89a2      	ldrh	r2, [r4, #12]
 800a9fc:	6020      	str	r0, [r4, #0]
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	81a3      	strh	r3, [r4, #12]
 800aa02:	9b00      	ldr	r3, [sp, #0]
 800aa04:	6120      	str	r0, [r4, #16]
 800aa06:	6163      	str	r3, [r4, #20]
 800aa08:	9b01      	ldr	r3, [sp, #4]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d00d      	beq.n	800aa2a <__smakebuf_r+0x7a>
 800aa0e:	0028      	movs	r0, r5
 800aa10:	230e      	movs	r3, #14
 800aa12:	5ee1      	ldrsh	r1, [r4, r3]
 800aa14:	f000 f8e6 	bl	800abe4 <_isatty_r>
 800aa18:	2800      	cmp	r0, #0
 800aa1a:	d006      	beq.n	800aa2a <__smakebuf_r+0x7a>
 800aa1c:	2203      	movs	r2, #3
 800aa1e:	89a3      	ldrh	r3, [r4, #12]
 800aa20:	4393      	bics	r3, r2
 800aa22:	001a      	movs	r2, r3
 800aa24:	2301      	movs	r3, #1
 800aa26:	4313      	orrs	r3, r2
 800aa28:	81a3      	strh	r3, [r4, #12]
 800aa2a:	89a0      	ldrh	r0, [r4, #12]
 800aa2c:	4307      	orrs	r7, r0
 800aa2e:	81a7      	strh	r7, [r4, #12]
 800aa30:	e7cb      	b.n	800a9ca <__smakebuf_r+0x1a>
 800aa32:	46c0      	nop			; (mov r8, r8)
 800aa34:	0800a79d 	.word	0x0800a79d

0800aa38 <_malloc_usable_size_r>:
 800aa38:	1f0b      	subs	r3, r1, #4
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	1f18      	subs	r0, r3, #4
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	da01      	bge.n	800aa46 <_malloc_usable_size_r+0xe>
 800aa42:	580b      	ldr	r3, [r1, r0]
 800aa44:	18c0      	adds	r0, r0, r3
 800aa46:	4770      	bx	lr

0800aa48 <_raise_r>:
 800aa48:	b570      	push	{r4, r5, r6, lr}
 800aa4a:	0004      	movs	r4, r0
 800aa4c:	000d      	movs	r5, r1
 800aa4e:	291f      	cmp	r1, #31
 800aa50:	d904      	bls.n	800aa5c <_raise_r+0x14>
 800aa52:	2316      	movs	r3, #22
 800aa54:	6003      	str	r3, [r0, #0]
 800aa56:	2001      	movs	r0, #1
 800aa58:	4240      	negs	r0, r0
 800aa5a:	bd70      	pop	{r4, r5, r6, pc}
 800aa5c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d004      	beq.n	800aa6c <_raise_r+0x24>
 800aa62:	008a      	lsls	r2, r1, #2
 800aa64:	189b      	adds	r3, r3, r2
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	2a00      	cmp	r2, #0
 800aa6a:	d108      	bne.n	800aa7e <_raise_r+0x36>
 800aa6c:	0020      	movs	r0, r4
 800aa6e:	f000 f831 	bl	800aad4 <_getpid_r>
 800aa72:	002a      	movs	r2, r5
 800aa74:	0001      	movs	r1, r0
 800aa76:	0020      	movs	r0, r4
 800aa78:	f000 f81a 	bl	800aab0 <_kill_r>
 800aa7c:	e7ed      	b.n	800aa5a <_raise_r+0x12>
 800aa7e:	2000      	movs	r0, #0
 800aa80:	2a01      	cmp	r2, #1
 800aa82:	d0ea      	beq.n	800aa5a <_raise_r+0x12>
 800aa84:	1c51      	adds	r1, r2, #1
 800aa86:	d103      	bne.n	800aa90 <_raise_r+0x48>
 800aa88:	2316      	movs	r3, #22
 800aa8a:	3001      	adds	r0, #1
 800aa8c:	6023      	str	r3, [r4, #0]
 800aa8e:	e7e4      	b.n	800aa5a <_raise_r+0x12>
 800aa90:	2400      	movs	r4, #0
 800aa92:	0028      	movs	r0, r5
 800aa94:	601c      	str	r4, [r3, #0]
 800aa96:	4790      	blx	r2
 800aa98:	0020      	movs	r0, r4
 800aa9a:	e7de      	b.n	800aa5a <_raise_r+0x12>

0800aa9c <raise>:
 800aa9c:	b510      	push	{r4, lr}
 800aa9e:	4b03      	ldr	r3, [pc, #12]	; (800aaac <raise+0x10>)
 800aaa0:	0001      	movs	r1, r0
 800aaa2:	6818      	ldr	r0, [r3, #0]
 800aaa4:	f7ff ffd0 	bl	800aa48 <_raise_r>
 800aaa8:	bd10      	pop	{r4, pc}
 800aaaa:	46c0      	nop			; (mov r8, r8)
 800aaac:	20000030 	.word	0x20000030

0800aab0 <_kill_r>:
 800aab0:	2300      	movs	r3, #0
 800aab2:	b570      	push	{r4, r5, r6, lr}
 800aab4:	4d06      	ldr	r5, [pc, #24]	; (800aad0 <_kill_r+0x20>)
 800aab6:	0004      	movs	r4, r0
 800aab8:	0008      	movs	r0, r1
 800aaba:	0011      	movs	r1, r2
 800aabc:	602b      	str	r3, [r5, #0]
 800aabe:	f7f8 fb45 	bl	800314c <_kill>
 800aac2:	1c43      	adds	r3, r0, #1
 800aac4:	d103      	bne.n	800aace <_kill_r+0x1e>
 800aac6:	682b      	ldr	r3, [r5, #0]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d000      	beq.n	800aace <_kill_r+0x1e>
 800aacc:	6023      	str	r3, [r4, #0]
 800aace:	bd70      	pop	{r4, r5, r6, pc}
 800aad0:	200003b0 	.word	0x200003b0

0800aad4 <_getpid_r>:
 800aad4:	b510      	push	{r4, lr}
 800aad6:	f7f8 fb33 	bl	8003140 <_getpid>
 800aada:	bd10      	pop	{r4, pc}

0800aadc <__sread>:
 800aadc:	b570      	push	{r4, r5, r6, lr}
 800aade:	000c      	movs	r4, r1
 800aae0:	250e      	movs	r5, #14
 800aae2:	5f49      	ldrsh	r1, [r1, r5]
 800aae4:	f000 f8a4 	bl	800ac30 <_read_r>
 800aae8:	2800      	cmp	r0, #0
 800aaea:	db03      	blt.n	800aaf4 <__sread+0x18>
 800aaec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800aaee:	181b      	adds	r3, r3, r0
 800aaf0:	6563      	str	r3, [r4, #84]	; 0x54
 800aaf2:	bd70      	pop	{r4, r5, r6, pc}
 800aaf4:	89a3      	ldrh	r3, [r4, #12]
 800aaf6:	4a02      	ldr	r2, [pc, #8]	; (800ab00 <__sread+0x24>)
 800aaf8:	4013      	ands	r3, r2
 800aafa:	81a3      	strh	r3, [r4, #12]
 800aafc:	e7f9      	b.n	800aaf2 <__sread+0x16>
 800aafe:	46c0      	nop			; (mov r8, r8)
 800ab00:	ffffefff 	.word	0xffffefff

0800ab04 <__swrite>:
 800ab04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab06:	001f      	movs	r7, r3
 800ab08:	898b      	ldrh	r3, [r1, #12]
 800ab0a:	0005      	movs	r5, r0
 800ab0c:	000c      	movs	r4, r1
 800ab0e:	0016      	movs	r6, r2
 800ab10:	05db      	lsls	r3, r3, #23
 800ab12:	d505      	bpl.n	800ab20 <__swrite+0x1c>
 800ab14:	230e      	movs	r3, #14
 800ab16:	5ec9      	ldrsh	r1, [r1, r3]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	2302      	movs	r3, #2
 800ab1c:	f000 f874 	bl	800ac08 <_lseek_r>
 800ab20:	89a3      	ldrh	r3, [r4, #12]
 800ab22:	4a05      	ldr	r2, [pc, #20]	; (800ab38 <__swrite+0x34>)
 800ab24:	0028      	movs	r0, r5
 800ab26:	4013      	ands	r3, r2
 800ab28:	81a3      	strh	r3, [r4, #12]
 800ab2a:	0032      	movs	r2, r6
 800ab2c:	230e      	movs	r3, #14
 800ab2e:	5ee1      	ldrsh	r1, [r4, r3]
 800ab30:	003b      	movs	r3, r7
 800ab32:	f000 f81f 	bl	800ab74 <_write_r>
 800ab36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab38:	ffffefff 	.word	0xffffefff

0800ab3c <__sseek>:
 800ab3c:	b570      	push	{r4, r5, r6, lr}
 800ab3e:	000c      	movs	r4, r1
 800ab40:	250e      	movs	r5, #14
 800ab42:	5f49      	ldrsh	r1, [r1, r5]
 800ab44:	f000 f860 	bl	800ac08 <_lseek_r>
 800ab48:	89a3      	ldrh	r3, [r4, #12]
 800ab4a:	1c42      	adds	r2, r0, #1
 800ab4c:	d103      	bne.n	800ab56 <__sseek+0x1a>
 800ab4e:	4a05      	ldr	r2, [pc, #20]	; (800ab64 <__sseek+0x28>)
 800ab50:	4013      	ands	r3, r2
 800ab52:	81a3      	strh	r3, [r4, #12]
 800ab54:	bd70      	pop	{r4, r5, r6, pc}
 800ab56:	2280      	movs	r2, #128	; 0x80
 800ab58:	0152      	lsls	r2, r2, #5
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	81a3      	strh	r3, [r4, #12]
 800ab5e:	6560      	str	r0, [r4, #84]	; 0x54
 800ab60:	e7f8      	b.n	800ab54 <__sseek+0x18>
 800ab62:	46c0      	nop			; (mov r8, r8)
 800ab64:	ffffefff 	.word	0xffffefff

0800ab68 <__sclose>:
 800ab68:	b510      	push	{r4, lr}
 800ab6a:	230e      	movs	r3, #14
 800ab6c:	5ec9      	ldrsh	r1, [r1, r3]
 800ab6e:	f000 f815 	bl	800ab9c <_close_r>
 800ab72:	bd10      	pop	{r4, pc}

0800ab74 <_write_r>:
 800ab74:	b570      	push	{r4, r5, r6, lr}
 800ab76:	0004      	movs	r4, r0
 800ab78:	0008      	movs	r0, r1
 800ab7a:	0011      	movs	r1, r2
 800ab7c:	001a      	movs	r2, r3
 800ab7e:	2300      	movs	r3, #0
 800ab80:	4d05      	ldr	r5, [pc, #20]	; (800ab98 <_write_r+0x24>)
 800ab82:	602b      	str	r3, [r5, #0]
 800ab84:	f7f8 fb1b 	bl	80031be <_write>
 800ab88:	1c43      	adds	r3, r0, #1
 800ab8a:	d103      	bne.n	800ab94 <_write_r+0x20>
 800ab8c:	682b      	ldr	r3, [r5, #0]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d000      	beq.n	800ab94 <_write_r+0x20>
 800ab92:	6023      	str	r3, [r4, #0]
 800ab94:	bd70      	pop	{r4, r5, r6, pc}
 800ab96:	46c0      	nop			; (mov r8, r8)
 800ab98:	200003b0 	.word	0x200003b0

0800ab9c <_close_r>:
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	b570      	push	{r4, r5, r6, lr}
 800aba0:	4d06      	ldr	r5, [pc, #24]	; (800abbc <_close_r+0x20>)
 800aba2:	0004      	movs	r4, r0
 800aba4:	0008      	movs	r0, r1
 800aba6:	602b      	str	r3, [r5, #0]
 800aba8:	f7f8 fb25 	bl	80031f6 <_close>
 800abac:	1c43      	adds	r3, r0, #1
 800abae:	d103      	bne.n	800abb8 <_close_r+0x1c>
 800abb0:	682b      	ldr	r3, [r5, #0]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d000      	beq.n	800abb8 <_close_r+0x1c>
 800abb6:	6023      	str	r3, [r4, #0]
 800abb8:	bd70      	pop	{r4, r5, r6, pc}
 800abba:	46c0      	nop			; (mov r8, r8)
 800abbc:	200003b0 	.word	0x200003b0

0800abc0 <_fstat_r>:
 800abc0:	2300      	movs	r3, #0
 800abc2:	b570      	push	{r4, r5, r6, lr}
 800abc4:	4d06      	ldr	r5, [pc, #24]	; (800abe0 <_fstat_r+0x20>)
 800abc6:	0004      	movs	r4, r0
 800abc8:	0008      	movs	r0, r1
 800abca:	0011      	movs	r1, r2
 800abcc:	602b      	str	r3, [r5, #0]
 800abce:	f7f8 fb1c 	bl	800320a <_fstat>
 800abd2:	1c43      	adds	r3, r0, #1
 800abd4:	d103      	bne.n	800abde <_fstat_r+0x1e>
 800abd6:	682b      	ldr	r3, [r5, #0]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d000      	beq.n	800abde <_fstat_r+0x1e>
 800abdc:	6023      	str	r3, [r4, #0]
 800abde:	bd70      	pop	{r4, r5, r6, pc}
 800abe0:	200003b0 	.word	0x200003b0

0800abe4 <_isatty_r>:
 800abe4:	2300      	movs	r3, #0
 800abe6:	b570      	push	{r4, r5, r6, lr}
 800abe8:	4d06      	ldr	r5, [pc, #24]	; (800ac04 <_isatty_r+0x20>)
 800abea:	0004      	movs	r4, r0
 800abec:	0008      	movs	r0, r1
 800abee:	602b      	str	r3, [r5, #0]
 800abf0:	f7f8 fb19 	bl	8003226 <_isatty>
 800abf4:	1c43      	adds	r3, r0, #1
 800abf6:	d103      	bne.n	800ac00 <_isatty_r+0x1c>
 800abf8:	682b      	ldr	r3, [r5, #0]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d000      	beq.n	800ac00 <_isatty_r+0x1c>
 800abfe:	6023      	str	r3, [r4, #0]
 800ac00:	bd70      	pop	{r4, r5, r6, pc}
 800ac02:	46c0      	nop			; (mov r8, r8)
 800ac04:	200003b0 	.word	0x200003b0

0800ac08 <_lseek_r>:
 800ac08:	b570      	push	{r4, r5, r6, lr}
 800ac0a:	0004      	movs	r4, r0
 800ac0c:	0008      	movs	r0, r1
 800ac0e:	0011      	movs	r1, r2
 800ac10:	001a      	movs	r2, r3
 800ac12:	2300      	movs	r3, #0
 800ac14:	4d05      	ldr	r5, [pc, #20]	; (800ac2c <_lseek_r+0x24>)
 800ac16:	602b      	str	r3, [r5, #0]
 800ac18:	f7f8 fb0e 	bl	8003238 <_lseek>
 800ac1c:	1c43      	adds	r3, r0, #1
 800ac1e:	d103      	bne.n	800ac28 <_lseek_r+0x20>
 800ac20:	682b      	ldr	r3, [r5, #0]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d000      	beq.n	800ac28 <_lseek_r+0x20>
 800ac26:	6023      	str	r3, [r4, #0]
 800ac28:	bd70      	pop	{r4, r5, r6, pc}
 800ac2a:	46c0      	nop			; (mov r8, r8)
 800ac2c:	200003b0 	.word	0x200003b0

0800ac30 <_read_r>:
 800ac30:	b570      	push	{r4, r5, r6, lr}
 800ac32:	0004      	movs	r4, r0
 800ac34:	0008      	movs	r0, r1
 800ac36:	0011      	movs	r1, r2
 800ac38:	001a      	movs	r2, r3
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	4d05      	ldr	r5, [pc, #20]	; (800ac54 <_read_r+0x24>)
 800ac3e:	602b      	str	r3, [r5, #0]
 800ac40:	f7f8 faa0 	bl	8003184 <_read>
 800ac44:	1c43      	adds	r3, r0, #1
 800ac46:	d103      	bne.n	800ac50 <_read_r+0x20>
 800ac48:	682b      	ldr	r3, [r5, #0]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d000      	beq.n	800ac50 <_read_r+0x20>
 800ac4e:	6023      	str	r3, [r4, #0]
 800ac50:	bd70      	pop	{r4, r5, r6, pc}
 800ac52:	46c0      	nop			; (mov r8, r8)
 800ac54:	200003b0 	.word	0x200003b0

0800ac58 <_init>:
 800ac58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac5a:	46c0      	nop			; (mov r8, r8)
 800ac5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac5e:	bc08      	pop	{r3}
 800ac60:	469e      	mov	lr, r3
 800ac62:	4770      	bx	lr

0800ac64 <_fini>:
 800ac64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac66:	46c0      	nop			; (mov r8, r8)
 800ac68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac6a:	bc08      	pop	{r3}
 800ac6c:	469e      	mov	lr, r3
 800ac6e:	4770      	bx	lr
