
I2C_GY-521.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069a8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  08006a68  08006a68  00016a68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d78  08006d78  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006d78  08006d78  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d78  08006d78  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d78  08006d78  00016d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d7c  08006d7c  00016d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006d80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000070  08006df0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08006df0  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000066ed  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001499  00000000  00000000  00026785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000680  00000000  00000000  00027c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005c8  00000000  00000000  000282a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000114af  00000000  00000000  00028868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008e9d  00000000  00000000  00039d17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00065e38  00000000  00000000  00042bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a89ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bf4  00000000  00000000  000a8a3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006a50 	.word	0x08006a50

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08006a50 	.word	0x08006a50

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0010      	movs	r0, r2
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	0019      	movs	r1, r3
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f001 fbdf 	bl	8001bc8 <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f001 fb2f 	bl	8001a78 <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f001 fbd1 	bl	8001bc8 <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 fbc7 	bl	8001bc8 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fb57 	bl	8001afc <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fb4d 	bl	8001afc <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_fadd>:
 8000470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000472:	46c6      	mov	lr, r8
 8000474:	0243      	lsls	r3, r0, #9
 8000476:	0a5b      	lsrs	r3, r3, #9
 8000478:	024e      	lsls	r6, r1, #9
 800047a:	0045      	lsls	r5, r0, #1
 800047c:	004f      	lsls	r7, r1, #1
 800047e:	00da      	lsls	r2, r3, #3
 8000480:	0fc4      	lsrs	r4, r0, #31
 8000482:	469c      	mov	ip, r3
 8000484:	0a70      	lsrs	r0, r6, #9
 8000486:	4690      	mov	r8, r2
 8000488:	b500      	push	{lr}
 800048a:	0e2d      	lsrs	r5, r5, #24
 800048c:	0e3f      	lsrs	r7, r7, #24
 800048e:	0fc9      	lsrs	r1, r1, #31
 8000490:	09b6      	lsrs	r6, r6, #6
 8000492:	428c      	cmp	r4, r1
 8000494:	d04b      	beq.n	800052e <__aeabi_fadd+0xbe>
 8000496:	1bea      	subs	r2, r5, r7
 8000498:	2a00      	cmp	r2, #0
 800049a:	dd36      	ble.n	800050a <__aeabi_fadd+0x9a>
 800049c:	2f00      	cmp	r7, #0
 800049e:	d061      	beq.n	8000564 <__aeabi_fadd+0xf4>
 80004a0:	2dff      	cmp	r5, #255	; 0xff
 80004a2:	d100      	bne.n	80004a6 <__aeabi_fadd+0x36>
 80004a4:	e0ad      	b.n	8000602 <__aeabi_fadd+0x192>
 80004a6:	2380      	movs	r3, #128	; 0x80
 80004a8:	04db      	lsls	r3, r3, #19
 80004aa:	431e      	orrs	r6, r3
 80004ac:	2a1b      	cmp	r2, #27
 80004ae:	dc00      	bgt.n	80004b2 <__aeabi_fadd+0x42>
 80004b0:	e0d3      	b.n	800065a <__aeabi_fadd+0x1ea>
 80004b2:	2001      	movs	r0, #1
 80004b4:	4643      	mov	r3, r8
 80004b6:	1a18      	subs	r0, r3, r0
 80004b8:	0143      	lsls	r3, r0, #5
 80004ba:	d400      	bmi.n	80004be <__aeabi_fadd+0x4e>
 80004bc:	e08c      	b.n	80005d8 <__aeabi_fadd+0x168>
 80004be:	0180      	lsls	r0, r0, #6
 80004c0:	0987      	lsrs	r7, r0, #6
 80004c2:	0038      	movs	r0, r7
 80004c4:	f002 fb36 	bl	8002b34 <__clzsi2>
 80004c8:	3805      	subs	r0, #5
 80004ca:	4087      	lsls	r7, r0
 80004cc:	4285      	cmp	r5, r0
 80004ce:	dc00      	bgt.n	80004d2 <__aeabi_fadd+0x62>
 80004d0:	e0b6      	b.n	8000640 <__aeabi_fadd+0x1d0>
 80004d2:	1a2d      	subs	r5, r5, r0
 80004d4:	48b3      	ldr	r0, [pc, #716]	; (80007a4 <__aeabi_fadd+0x334>)
 80004d6:	4038      	ands	r0, r7
 80004d8:	0743      	lsls	r3, r0, #29
 80004da:	d004      	beq.n	80004e6 <__aeabi_fadd+0x76>
 80004dc:	230f      	movs	r3, #15
 80004de:	4003      	ands	r3, r0
 80004e0:	2b04      	cmp	r3, #4
 80004e2:	d000      	beq.n	80004e6 <__aeabi_fadd+0x76>
 80004e4:	3004      	adds	r0, #4
 80004e6:	0143      	lsls	r3, r0, #5
 80004e8:	d400      	bmi.n	80004ec <__aeabi_fadd+0x7c>
 80004ea:	e078      	b.n	80005de <__aeabi_fadd+0x16e>
 80004ec:	1c6a      	adds	r2, r5, #1
 80004ee:	2dfe      	cmp	r5, #254	; 0xfe
 80004f0:	d065      	beq.n	80005be <__aeabi_fadd+0x14e>
 80004f2:	0180      	lsls	r0, r0, #6
 80004f4:	0a43      	lsrs	r3, r0, #9
 80004f6:	469c      	mov	ip, r3
 80004f8:	b2d2      	uxtb	r2, r2
 80004fa:	4663      	mov	r3, ip
 80004fc:	05d0      	lsls	r0, r2, #23
 80004fe:	4318      	orrs	r0, r3
 8000500:	07e4      	lsls	r4, r4, #31
 8000502:	4320      	orrs	r0, r4
 8000504:	bc80      	pop	{r7}
 8000506:	46b8      	mov	r8, r7
 8000508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800050a:	2a00      	cmp	r2, #0
 800050c:	d035      	beq.n	800057a <__aeabi_fadd+0x10a>
 800050e:	1b7a      	subs	r2, r7, r5
 8000510:	2d00      	cmp	r5, #0
 8000512:	d000      	beq.n	8000516 <__aeabi_fadd+0xa6>
 8000514:	e0af      	b.n	8000676 <__aeabi_fadd+0x206>
 8000516:	4643      	mov	r3, r8
 8000518:	2b00      	cmp	r3, #0
 800051a:	d100      	bne.n	800051e <__aeabi_fadd+0xae>
 800051c:	e0a7      	b.n	800066e <__aeabi_fadd+0x1fe>
 800051e:	1e53      	subs	r3, r2, #1
 8000520:	2a01      	cmp	r2, #1
 8000522:	d100      	bne.n	8000526 <__aeabi_fadd+0xb6>
 8000524:	e12f      	b.n	8000786 <__aeabi_fadd+0x316>
 8000526:	2aff      	cmp	r2, #255	; 0xff
 8000528:	d069      	beq.n	80005fe <__aeabi_fadd+0x18e>
 800052a:	001a      	movs	r2, r3
 800052c:	e0aa      	b.n	8000684 <__aeabi_fadd+0x214>
 800052e:	1be9      	subs	r1, r5, r7
 8000530:	2900      	cmp	r1, #0
 8000532:	dd70      	ble.n	8000616 <__aeabi_fadd+0x1a6>
 8000534:	2f00      	cmp	r7, #0
 8000536:	d037      	beq.n	80005a8 <__aeabi_fadd+0x138>
 8000538:	2dff      	cmp	r5, #255	; 0xff
 800053a:	d062      	beq.n	8000602 <__aeabi_fadd+0x192>
 800053c:	2380      	movs	r3, #128	; 0x80
 800053e:	04db      	lsls	r3, r3, #19
 8000540:	431e      	orrs	r6, r3
 8000542:	291b      	cmp	r1, #27
 8000544:	dc00      	bgt.n	8000548 <__aeabi_fadd+0xd8>
 8000546:	e0b0      	b.n	80006aa <__aeabi_fadd+0x23a>
 8000548:	2001      	movs	r0, #1
 800054a:	4440      	add	r0, r8
 800054c:	0143      	lsls	r3, r0, #5
 800054e:	d543      	bpl.n	80005d8 <__aeabi_fadd+0x168>
 8000550:	3501      	adds	r5, #1
 8000552:	2dff      	cmp	r5, #255	; 0xff
 8000554:	d033      	beq.n	80005be <__aeabi_fadd+0x14e>
 8000556:	2301      	movs	r3, #1
 8000558:	4a93      	ldr	r2, [pc, #588]	; (80007a8 <__aeabi_fadd+0x338>)
 800055a:	4003      	ands	r3, r0
 800055c:	0840      	lsrs	r0, r0, #1
 800055e:	4010      	ands	r0, r2
 8000560:	4318      	orrs	r0, r3
 8000562:	e7b9      	b.n	80004d8 <__aeabi_fadd+0x68>
 8000564:	2e00      	cmp	r6, #0
 8000566:	d100      	bne.n	800056a <__aeabi_fadd+0xfa>
 8000568:	e083      	b.n	8000672 <__aeabi_fadd+0x202>
 800056a:	1e51      	subs	r1, r2, #1
 800056c:	2a01      	cmp	r2, #1
 800056e:	d100      	bne.n	8000572 <__aeabi_fadd+0x102>
 8000570:	e0d8      	b.n	8000724 <__aeabi_fadd+0x2b4>
 8000572:	2aff      	cmp	r2, #255	; 0xff
 8000574:	d045      	beq.n	8000602 <__aeabi_fadd+0x192>
 8000576:	000a      	movs	r2, r1
 8000578:	e798      	b.n	80004ac <__aeabi_fadd+0x3c>
 800057a:	27fe      	movs	r7, #254	; 0xfe
 800057c:	1c6a      	adds	r2, r5, #1
 800057e:	4217      	tst	r7, r2
 8000580:	d000      	beq.n	8000584 <__aeabi_fadd+0x114>
 8000582:	e086      	b.n	8000692 <__aeabi_fadd+0x222>
 8000584:	2d00      	cmp	r5, #0
 8000586:	d000      	beq.n	800058a <__aeabi_fadd+0x11a>
 8000588:	e0b7      	b.n	80006fa <__aeabi_fadd+0x28a>
 800058a:	4643      	mov	r3, r8
 800058c:	2b00      	cmp	r3, #0
 800058e:	d100      	bne.n	8000592 <__aeabi_fadd+0x122>
 8000590:	e0f3      	b.n	800077a <__aeabi_fadd+0x30a>
 8000592:	2200      	movs	r2, #0
 8000594:	2e00      	cmp	r6, #0
 8000596:	d0b0      	beq.n	80004fa <__aeabi_fadd+0x8a>
 8000598:	1b98      	subs	r0, r3, r6
 800059a:	0143      	lsls	r3, r0, #5
 800059c:	d400      	bmi.n	80005a0 <__aeabi_fadd+0x130>
 800059e:	e0fa      	b.n	8000796 <__aeabi_fadd+0x326>
 80005a0:	4643      	mov	r3, r8
 80005a2:	000c      	movs	r4, r1
 80005a4:	1af0      	subs	r0, r6, r3
 80005a6:	e797      	b.n	80004d8 <__aeabi_fadd+0x68>
 80005a8:	2e00      	cmp	r6, #0
 80005aa:	d100      	bne.n	80005ae <__aeabi_fadd+0x13e>
 80005ac:	e0c8      	b.n	8000740 <__aeabi_fadd+0x2d0>
 80005ae:	1e4a      	subs	r2, r1, #1
 80005b0:	2901      	cmp	r1, #1
 80005b2:	d100      	bne.n	80005b6 <__aeabi_fadd+0x146>
 80005b4:	e0ae      	b.n	8000714 <__aeabi_fadd+0x2a4>
 80005b6:	29ff      	cmp	r1, #255	; 0xff
 80005b8:	d023      	beq.n	8000602 <__aeabi_fadd+0x192>
 80005ba:	0011      	movs	r1, r2
 80005bc:	e7c1      	b.n	8000542 <__aeabi_fadd+0xd2>
 80005be:	2300      	movs	r3, #0
 80005c0:	22ff      	movs	r2, #255	; 0xff
 80005c2:	469c      	mov	ip, r3
 80005c4:	e799      	b.n	80004fa <__aeabi_fadd+0x8a>
 80005c6:	21fe      	movs	r1, #254	; 0xfe
 80005c8:	1c6a      	adds	r2, r5, #1
 80005ca:	4211      	tst	r1, r2
 80005cc:	d077      	beq.n	80006be <__aeabi_fadd+0x24e>
 80005ce:	2aff      	cmp	r2, #255	; 0xff
 80005d0:	d0f5      	beq.n	80005be <__aeabi_fadd+0x14e>
 80005d2:	0015      	movs	r5, r2
 80005d4:	4446      	add	r6, r8
 80005d6:	0870      	lsrs	r0, r6, #1
 80005d8:	0743      	lsls	r3, r0, #29
 80005da:	d000      	beq.n	80005de <__aeabi_fadd+0x16e>
 80005dc:	e77e      	b.n	80004dc <__aeabi_fadd+0x6c>
 80005de:	08c3      	lsrs	r3, r0, #3
 80005e0:	2dff      	cmp	r5, #255	; 0xff
 80005e2:	d00e      	beq.n	8000602 <__aeabi_fadd+0x192>
 80005e4:	025b      	lsls	r3, r3, #9
 80005e6:	0a5b      	lsrs	r3, r3, #9
 80005e8:	469c      	mov	ip, r3
 80005ea:	b2ea      	uxtb	r2, r5
 80005ec:	e785      	b.n	80004fa <__aeabi_fadd+0x8a>
 80005ee:	2e00      	cmp	r6, #0
 80005f0:	d007      	beq.n	8000602 <__aeabi_fadd+0x192>
 80005f2:	2280      	movs	r2, #128	; 0x80
 80005f4:	03d2      	lsls	r2, r2, #15
 80005f6:	4213      	tst	r3, r2
 80005f8:	d003      	beq.n	8000602 <__aeabi_fadd+0x192>
 80005fa:	4210      	tst	r0, r2
 80005fc:	d101      	bne.n	8000602 <__aeabi_fadd+0x192>
 80005fe:	000c      	movs	r4, r1
 8000600:	0003      	movs	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d0db      	beq.n	80005be <__aeabi_fadd+0x14e>
 8000606:	2080      	movs	r0, #128	; 0x80
 8000608:	03c0      	lsls	r0, r0, #15
 800060a:	4318      	orrs	r0, r3
 800060c:	0240      	lsls	r0, r0, #9
 800060e:	0a43      	lsrs	r3, r0, #9
 8000610:	469c      	mov	ip, r3
 8000612:	22ff      	movs	r2, #255	; 0xff
 8000614:	e771      	b.n	80004fa <__aeabi_fadd+0x8a>
 8000616:	2900      	cmp	r1, #0
 8000618:	d0d5      	beq.n	80005c6 <__aeabi_fadd+0x156>
 800061a:	1b7a      	subs	r2, r7, r5
 800061c:	2d00      	cmp	r5, #0
 800061e:	d160      	bne.n	80006e2 <__aeabi_fadd+0x272>
 8000620:	4643      	mov	r3, r8
 8000622:	2b00      	cmp	r3, #0
 8000624:	d024      	beq.n	8000670 <__aeabi_fadd+0x200>
 8000626:	1e53      	subs	r3, r2, #1
 8000628:	2a01      	cmp	r2, #1
 800062a:	d073      	beq.n	8000714 <__aeabi_fadd+0x2a4>
 800062c:	2aff      	cmp	r2, #255	; 0xff
 800062e:	d0e7      	beq.n	8000600 <__aeabi_fadd+0x190>
 8000630:	001a      	movs	r2, r3
 8000632:	2a1b      	cmp	r2, #27
 8000634:	dc00      	bgt.n	8000638 <__aeabi_fadd+0x1c8>
 8000636:	e085      	b.n	8000744 <__aeabi_fadd+0x2d4>
 8000638:	2001      	movs	r0, #1
 800063a:	003d      	movs	r5, r7
 800063c:	1980      	adds	r0, r0, r6
 800063e:	e785      	b.n	800054c <__aeabi_fadd+0xdc>
 8000640:	2320      	movs	r3, #32
 8000642:	003a      	movs	r2, r7
 8000644:	1b45      	subs	r5, r0, r5
 8000646:	0038      	movs	r0, r7
 8000648:	3501      	adds	r5, #1
 800064a:	40ea      	lsrs	r2, r5
 800064c:	1b5d      	subs	r5, r3, r5
 800064e:	40a8      	lsls	r0, r5
 8000650:	1e43      	subs	r3, r0, #1
 8000652:	4198      	sbcs	r0, r3
 8000654:	2500      	movs	r5, #0
 8000656:	4310      	orrs	r0, r2
 8000658:	e73e      	b.n	80004d8 <__aeabi_fadd+0x68>
 800065a:	2320      	movs	r3, #32
 800065c:	0030      	movs	r0, r6
 800065e:	1a9b      	subs	r3, r3, r2
 8000660:	0031      	movs	r1, r6
 8000662:	4098      	lsls	r0, r3
 8000664:	40d1      	lsrs	r1, r2
 8000666:	1e43      	subs	r3, r0, #1
 8000668:	4198      	sbcs	r0, r3
 800066a:	4308      	orrs	r0, r1
 800066c:	e722      	b.n	80004b4 <__aeabi_fadd+0x44>
 800066e:	000c      	movs	r4, r1
 8000670:	0003      	movs	r3, r0
 8000672:	0015      	movs	r5, r2
 8000674:	e7b4      	b.n	80005e0 <__aeabi_fadd+0x170>
 8000676:	2fff      	cmp	r7, #255	; 0xff
 8000678:	d0c1      	beq.n	80005fe <__aeabi_fadd+0x18e>
 800067a:	2380      	movs	r3, #128	; 0x80
 800067c:	4640      	mov	r0, r8
 800067e:	04db      	lsls	r3, r3, #19
 8000680:	4318      	orrs	r0, r3
 8000682:	4680      	mov	r8, r0
 8000684:	2a1b      	cmp	r2, #27
 8000686:	dd51      	ble.n	800072c <__aeabi_fadd+0x2bc>
 8000688:	2001      	movs	r0, #1
 800068a:	000c      	movs	r4, r1
 800068c:	003d      	movs	r5, r7
 800068e:	1a30      	subs	r0, r6, r0
 8000690:	e712      	b.n	80004b8 <__aeabi_fadd+0x48>
 8000692:	4643      	mov	r3, r8
 8000694:	1b9f      	subs	r7, r3, r6
 8000696:	017b      	lsls	r3, r7, #5
 8000698:	d42b      	bmi.n	80006f2 <__aeabi_fadd+0x282>
 800069a:	2f00      	cmp	r7, #0
 800069c:	d000      	beq.n	80006a0 <__aeabi_fadd+0x230>
 800069e:	e710      	b.n	80004c2 <__aeabi_fadd+0x52>
 80006a0:	2300      	movs	r3, #0
 80006a2:	2400      	movs	r4, #0
 80006a4:	2200      	movs	r2, #0
 80006a6:	469c      	mov	ip, r3
 80006a8:	e727      	b.n	80004fa <__aeabi_fadd+0x8a>
 80006aa:	2320      	movs	r3, #32
 80006ac:	0032      	movs	r2, r6
 80006ae:	0030      	movs	r0, r6
 80006b0:	40ca      	lsrs	r2, r1
 80006b2:	1a59      	subs	r1, r3, r1
 80006b4:	4088      	lsls	r0, r1
 80006b6:	1e43      	subs	r3, r0, #1
 80006b8:	4198      	sbcs	r0, r3
 80006ba:	4310      	orrs	r0, r2
 80006bc:	e745      	b.n	800054a <__aeabi_fadd+0xda>
 80006be:	2d00      	cmp	r5, #0
 80006c0:	d14a      	bne.n	8000758 <__aeabi_fadd+0x2e8>
 80006c2:	4643      	mov	r3, r8
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d063      	beq.n	8000790 <__aeabi_fadd+0x320>
 80006c8:	2200      	movs	r2, #0
 80006ca:	2e00      	cmp	r6, #0
 80006cc:	d100      	bne.n	80006d0 <__aeabi_fadd+0x260>
 80006ce:	e714      	b.n	80004fa <__aeabi_fadd+0x8a>
 80006d0:	0030      	movs	r0, r6
 80006d2:	4440      	add	r0, r8
 80006d4:	0143      	lsls	r3, r0, #5
 80006d6:	d400      	bmi.n	80006da <__aeabi_fadd+0x26a>
 80006d8:	e77e      	b.n	80005d8 <__aeabi_fadd+0x168>
 80006da:	4b32      	ldr	r3, [pc, #200]	; (80007a4 <__aeabi_fadd+0x334>)
 80006dc:	3501      	adds	r5, #1
 80006de:	4018      	ands	r0, r3
 80006e0:	e77a      	b.n	80005d8 <__aeabi_fadd+0x168>
 80006e2:	2fff      	cmp	r7, #255	; 0xff
 80006e4:	d08c      	beq.n	8000600 <__aeabi_fadd+0x190>
 80006e6:	2380      	movs	r3, #128	; 0x80
 80006e8:	4641      	mov	r1, r8
 80006ea:	04db      	lsls	r3, r3, #19
 80006ec:	4319      	orrs	r1, r3
 80006ee:	4688      	mov	r8, r1
 80006f0:	e79f      	b.n	8000632 <__aeabi_fadd+0x1c2>
 80006f2:	4643      	mov	r3, r8
 80006f4:	000c      	movs	r4, r1
 80006f6:	1af7      	subs	r7, r6, r3
 80006f8:	e6e3      	b.n	80004c2 <__aeabi_fadd+0x52>
 80006fa:	4642      	mov	r2, r8
 80006fc:	2a00      	cmp	r2, #0
 80006fe:	d000      	beq.n	8000702 <__aeabi_fadd+0x292>
 8000700:	e775      	b.n	80005ee <__aeabi_fadd+0x17e>
 8000702:	2e00      	cmp	r6, #0
 8000704:	d000      	beq.n	8000708 <__aeabi_fadd+0x298>
 8000706:	e77a      	b.n	80005fe <__aeabi_fadd+0x18e>
 8000708:	2380      	movs	r3, #128	; 0x80
 800070a:	03db      	lsls	r3, r3, #15
 800070c:	2400      	movs	r4, #0
 800070e:	469c      	mov	ip, r3
 8000710:	22ff      	movs	r2, #255	; 0xff
 8000712:	e6f2      	b.n	80004fa <__aeabi_fadd+0x8a>
 8000714:	0030      	movs	r0, r6
 8000716:	4440      	add	r0, r8
 8000718:	2501      	movs	r5, #1
 800071a:	0143      	lsls	r3, r0, #5
 800071c:	d400      	bmi.n	8000720 <__aeabi_fadd+0x2b0>
 800071e:	e75b      	b.n	80005d8 <__aeabi_fadd+0x168>
 8000720:	2502      	movs	r5, #2
 8000722:	e718      	b.n	8000556 <__aeabi_fadd+0xe6>
 8000724:	4643      	mov	r3, r8
 8000726:	2501      	movs	r5, #1
 8000728:	1b98      	subs	r0, r3, r6
 800072a:	e6c5      	b.n	80004b8 <__aeabi_fadd+0x48>
 800072c:	2320      	movs	r3, #32
 800072e:	4644      	mov	r4, r8
 8000730:	4640      	mov	r0, r8
 8000732:	40d4      	lsrs	r4, r2
 8000734:	1a9a      	subs	r2, r3, r2
 8000736:	4090      	lsls	r0, r2
 8000738:	1e43      	subs	r3, r0, #1
 800073a:	4198      	sbcs	r0, r3
 800073c:	4320      	orrs	r0, r4
 800073e:	e7a4      	b.n	800068a <__aeabi_fadd+0x21a>
 8000740:	000d      	movs	r5, r1
 8000742:	e74d      	b.n	80005e0 <__aeabi_fadd+0x170>
 8000744:	2320      	movs	r3, #32
 8000746:	4641      	mov	r1, r8
 8000748:	4640      	mov	r0, r8
 800074a:	40d1      	lsrs	r1, r2
 800074c:	1a9a      	subs	r2, r3, r2
 800074e:	4090      	lsls	r0, r2
 8000750:	1e43      	subs	r3, r0, #1
 8000752:	4198      	sbcs	r0, r3
 8000754:	4308      	orrs	r0, r1
 8000756:	e770      	b.n	800063a <__aeabi_fadd+0x1ca>
 8000758:	4642      	mov	r2, r8
 800075a:	2a00      	cmp	r2, #0
 800075c:	d100      	bne.n	8000760 <__aeabi_fadd+0x2f0>
 800075e:	e74f      	b.n	8000600 <__aeabi_fadd+0x190>
 8000760:	2e00      	cmp	r6, #0
 8000762:	d100      	bne.n	8000766 <__aeabi_fadd+0x2f6>
 8000764:	e74d      	b.n	8000602 <__aeabi_fadd+0x192>
 8000766:	2280      	movs	r2, #128	; 0x80
 8000768:	03d2      	lsls	r2, r2, #15
 800076a:	4213      	tst	r3, r2
 800076c:	d100      	bne.n	8000770 <__aeabi_fadd+0x300>
 800076e:	e748      	b.n	8000602 <__aeabi_fadd+0x192>
 8000770:	4210      	tst	r0, r2
 8000772:	d000      	beq.n	8000776 <__aeabi_fadd+0x306>
 8000774:	e745      	b.n	8000602 <__aeabi_fadd+0x192>
 8000776:	0003      	movs	r3, r0
 8000778:	e743      	b.n	8000602 <__aeabi_fadd+0x192>
 800077a:	2e00      	cmp	r6, #0
 800077c:	d090      	beq.n	80006a0 <__aeabi_fadd+0x230>
 800077e:	000c      	movs	r4, r1
 8000780:	4684      	mov	ip, r0
 8000782:	2200      	movs	r2, #0
 8000784:	e6b9      	b.n	80004fa <__aeabi_fadd+0x8a>
 8000786:	4643      	mov	r3, r8
 8000788:	000c      	movs	r4, r1
 800078a:	1af0      	subs	r0, r6, r3
 800078c:	3501      	adds	r5, #1
 800078e:	e693      	b.n	80004b8 <__aeabi_fadd+0x48>
 8000790:	4684      	mov	ip, r0
 8000792:	2200      	movs	r2, #0
 8000794:	e6b1      	b.n	80004fa <__aeabi_fadd+0x8a>
 8000796:	2800      	cmp	r0, #0
 8000798:	d000      	beq.n	800079c <__aeabi_fadd+0x32c>
 800079a:	e71d      	b.n	80005d8 <__aeabi_fadd+0x168>
 800079c:	2300      	movs	r3, #0
 800079e:	2400      	movs	r4, #0
 80007a0:	469c      	mov	ip, r3
 80007a2:	e6aa      	b.n	80004fa <__aeabi_fadd+0x8a>
 80007a4:	fbffffff 	.word	0xfbffffff
 80007a8:	7dffffff 	.word	0x7dffffff

080007ac <__aeabi_fdiv>:
 80007ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ae:	464f      	mov	r7, r9
 80007b0:	4646      	mov	r6, r8
 80007b2:	46d6      	mov	lr, sl
 80007b4:	0245      	lsls	r5, r0, #9
 80007b6:	b5c0      	push	{r6, r7, lr}
 80007b8:	0047      	lsls	r7, r0, #1
 80007ba:	1c0c      	adds	r4, r1, #0
 80007bc:	0a6d      	lsrs	r5, r5, #9
 80007be:	0e3f      	lsrs	r7, r7, #24
 80007c0:	0fc6      	lsrs	r6, r0, #31
 80007c2:	2f00      	cmp	r7, #0
 80007c4:	d100      	bne.n	80007c8 <__aeabi_fdiv+0x1c>
 80007c6:	e070      	b.n	80008aa <__aeabi_fdiv+0xfe>
 80007c8:	2fff      	cmp	r7, #255	; 0xff
 80007ca:	d100      	bne.n	80007ce <__aeabi_fdiv+0x22>
 80007cc:	e075      	b.n	80008ba <__aeabi_fdiv+0x10e>
 80007ce:	00eb      	lsls	r3, r5, #3
 80007d0:	2580      	movs	r5, #128	; 0x80
 80007d2:	04ed      	lsls	r5, r5, #19
 80007d4:	431d      	orrs	r5, r3
 80007d6:	2300      	movs	r3, #0
 80007d8:	4699      	mov	r9, r3
 80007da:	469a      	mov	sl, r3
 80007dc:	3f7f      	subs	r7, #127	; 0x7f
 80007de:	0260      	lsls	r0, r4, #9
 80007e0:	0a43      	lsrs	r3, r0, #9
 80007e2:	4698      	mov	r8, r3
 80007e4:	0063      	lsls	r3, r4, #1
 80007e6:	0e1b      	lsrs	r3, r3, #24
 80007e8:	0fe4      	lsrs	r4, r4, #31
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d04e      	beq.n	800088c <__aeabi_fdiv+0xe0>
 80007ee:	2bff      	cmp	r3, #255	; 0xff
 80007f0:	d046      	beq.n	8000880 <__aeabi_fdiv+0xd4>
 80007f2:	4642      	mov	r2, r8
 80007f4:	00d0      	lsls	r0, r2, #3
 80007f6:	2280      	movs	r2, #128	; 0x80
 80007f8:	04d2      	lsls	r2, r2, #19
 80007fa:	4302      	orrs	r2, r0
 80007fc:	4690      	mov	r8, r2
 80007fe:	2200      	movs	r2, #0
 8000800:	3b7f      	subs	r3, #127	; 0x7f
 8000802:	0031      	movs	r1, r6
 8000804:	1aff      	subs	r7, r7, r3
 8000806:	464b      	mov	r3, r9
 8000808:	4061      	eors	r1, r4
 800080a:	b2c9      	uxtb	r1, r1
 800080c:	4313      	orrs	r3, r2
 800080e:	2b0f      	cmp	r3, #15
 8000810:	d900      	bls.n	8000814 <__aeabi_fdiv+0x68>
 8000812:	e0b5      	b.n	8000980 <__aeabi_fdiv+0x1d4>
 8000814:	486e      	ldr	r0, [pc, #440]	; (80009d0 <__aeabi_fdiv+0x224>)
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	58c3      	ldr	r3, [r0, r3]
 800081a:	469f      	mov	pc, r3
 800081c:	2300      	movs	r3, #0
 800081e:	4698      	mov	r8, r3
 8000820:	0026      	movs	r6, r4
 8000822:	4645      	mov	r5, r8
 8000824:	4692      	mov	sl, r2
 8000826:	4653      	mov	r3, sl
 8000828:	2b02      	cmp	r3, #2
 800082a:	d100      	bne.n	800082e <__aeabi_fdiv+0x82>
 800082c:	e089      	b.n	8000942 <__aeabi_fdiv+0x196>
 800082e:	2b03      	cmp	r3, #3
 8000830:	d100      	bne.n	8000834 <__aeabi_fdiv+0x88>
 8000832:	e09e      	b.n	8000972 <__aeabi_fdiv+0x1c6>
 8000834:	2b01      	cmp	r3, #1
 8000836:	d018      	beq.n	800086a <__aeabi_fdiv+0xbe>
 8000838:	003b      	movs	r3, r7
 800083a:	337f      	adds	r3, #127	; 0x7f
 800083c:	2b00      	cmp	r3, #0
 800083e:	dd69      	ble.n	8000914 <__aeabi_fdiv+0x168>
 8000840:	076a      	lsls	r2, r5, #29
 8000842:	d004      	beq.n	800084e <__aeabi_fdiv+0xa2>
 8000844:	220f      	movs	r2, #15
 8000846:	402a      	ands	r2, r5
 8000848:	2a04      	cmp	r2, #4
 800084a:	d000      	beq.n	800084e <__aeabi_fdiv+0xa2>
 800084c:	3504      	adds	r5, #4
 800084e:	012a      	lsls	r2, r5, #4
 8000850:	d503      	bpl.n	800085a <__aeabi_fdiv+0xae>
 8000852:	4b60      	ldr	r3, [pc, #384]	; (80009d4 <__aeabi_fdiv+0x228>)
 8000854:	401d      	ands	r5, r3
 8000856:	003b      	movs	r3, r7
 8000858:	3380      	adds	r3, #128	; 0x80
 800085a:	2bfe      	cmp	r3, #254	; 0xfe
 800085c:	dd00      	ble.n	8000860 <__aeabi_fdiv+0xb4>
 800085e:	e070      	b.n	8000942 <__aeabi_fdiv+0x196>
 8000860:	01ad      	lsls	r5, r5, #6
 8000862:	0a6d      	lsrs	r5, r5, #9
 8000864:	b2d8      	uxtb	r0, r3
 8000866:	e002      	b.n	800086e <__aeabi_fdiv+0xc2>
 8000868:	000e      	movs	r6, r1
 800086a:	2000      	movs	r0, #0
 800086c:	2500      	movs	r5, #0
 800086e:	05c0      	lsls	r0, r0, #23
 8000870:	4328      	orrs	r0, r5
 8000872:	07f6      	lsls	r6, r6, #31
 8000874:	4330      	orrs	r0, r6
 8000876:	bce0      	pop	{r5, r6, r7}
 8000878:	46ba      	mov	sl, r7
 800087a:	46b1      	mov	r9, r6
 800087c:	46a8      	mov	r8, r5
 800087e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000880:	4643      	mov	r3, r8
 8000882:	2b00      	cmp	r3, #0
 8000884:	d13f      	bne.n	8000906 <__aeabi_fdiv+0x15a>
 8000886:	2202      	movs	r2, #2
 8000888:	3fff      	subs	r7, #255	; 0xff
 800088a:	e003      	b.n	8000894 <__aeabi_fdiv+0xe8>
 800088c:	4643      	mov	r3, r8
 800088e:	2b00      	cmp	r3, #0
 8000890:	d12d      	bne.n	80008ee <__aeabi_fdiv+0x142>
 8000892:	2201      	movs	r2, #1
 8000894:	0031      	movs	r1, r6
 8000896:	464b      	mov	r3, r9
 8000898:	4061      	eors	r1, r4
 800089a:	b2c9      	uxtb	r1, r1
 800089c:	4313      	orrs	r3, r2
 800089e:	2b0f      	cmp	r3, #15
 80008a0:	d834      	bhi.n	800090c <__aeabi_fdiv+0x160>
 80008a2:	484d      	ldr	r0, [pc, #308]	; (80009d8 <__aeabi_fdiv+0x22c>)
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	58c3      	ldr	r3, [r0, r3]
 80008a8:	469f      	mov	pc, r3
 80008aa:	2d00      	cmp	r5, #0
 80008ac:	d113      	bne.n	80008d6 <__aeabi_fdiv+0x12a>
 80008ae:	2304      	movs	r3, #4
 80008b0:	4699      	mov	r9, r3
 80008b2:	3b03      	subs	r3, #3
 80008b4:	2700      	movs	r7, #0
 80008b6:	469a      	mov	sl, r3
 80008b8:	e791      	b.n	80007de <__aeabi_fdiv+0x32>
 80008ba:	2d00      	cmp	r5, #0
 80008bc:	d105      	bne.n	80008ca <__aeabi_fdiv+0x11e>
 80008be:	2308      	movs	r3, #8
 80008c0:	4699      	mov	r9, r3
 80008c2:	3b06      	subs	r3, #6
 80008c4:	27ff      	movs	r7, #255	; 0xff
 80008c6:	469a      	mov	sl, r3
 80008c8:	e789      	b.n	80007de <__aeabi_fdiv+0x32>
 80008ca:	230c      	movs	r3, #12
 80008cc:	4699      	mov	r9, r3
 80008ce:	3b09      	subs	r3, #9
 80008d0:	27ff      	movs	r7, #255	; 0xff
 80008d2:	469a      	mov	sl, r3
 80008d4:	e783      	b.n	80007de <__aeabi_fdiv+0x32>
 80008d6:	0028      	movs	r0, r5
 80008d8:	f002 f92c 	bl	8002b34 <__clzsi2>
 80008dc:	2776      	movs	r7, #118	; 0x76
 80008de:	1f43      	subs	r3, r0, #5
 80008e0:	409d      	lsls	r5, r3
 80008e2:	2300      	movs	r3, #0
 80008e4:	427f      	negs	r7, r7
 80008e6:	4699      	mov	r9, r3
 80008e8:	469a      	mov	sl, r3
 80008ea:	1a3f      	subs	r7, r7, r0
 80008ec:	e777      	b.n	80007de <__aeabi_fdiv+0x32>
 80008ee:	4640      	mov	r0, r8
 80008f0:	f002 f920 	bl	8002b34 <__clzsi2>
 80008f4:	4642      	mov	r2, r8
 80008f6:	1f43      	subs	r3, r0, #5
 80008f8:	409a      	lsls	r2, r3
 80008fa:	2376      	movs	r3, #118	; 0x76
 80008fc:	425b      	negs	r3, r3
 80008fe:	4690      	mov	r8, r2
 8000900:	1a1b      	subs	r3, r3, r0
 8000902:	2200      	movs	r2, #0
 8000904:	e77d      	b.n	8000802 <__aeabi_fdiv+0x56>
 8000906:	23ff      	movs	r3, #255	; 0xff
 8000908:	2203      	movs	r2, #3
 800090a:	e77a      	b.n	8000802 <__aeabi_fdiv+0x56>
 800090c:	000e      	movs	r6, r1
 800090e:	20ff      	movs	r0, #255	; 0xff
 8000910:	2500      	movs	r5, #0
 8000912:	e7ac      	b.n	800086e <__aeabi_fdiv+0xc2>
 8000914:	2001      	movs	r0, #1
 8000916:	1ac0      	subs	r0, r0, r3
 8000918:	281b      	cmp	r0, #27
 800091a:	dca6      	bgt.n	800086a <__aeabi_fdiv+0xbe>
 800091c:	379e      	adds	r7, #158	; 0x9e
 800091e:	002a      	movs	r2, r5
 8000920:	40bd      	lsls	r5, r7
 8000922:	40c2      	lsrs	r2, r0
 8000924:	1e6b      	subs	r3, r5, #1
 8000926:	419d      	sbcs	r5, r3
 8000928:	4315      	orrs	r5, r2
 800092a:	076b      	lsls	r3, r5, #29
 800092c:	d004      	beq.n	8000938 <__aeabi_fdiv+0x18c>
 800092e:	230f      	movs	r3, #15
 8000930:	402b      	ands	r3, r5
 8000932:	2b04      	cmp	r3, #4
 8000934:	d000      	beq.n	8000938 <__aeabi_fdiv+0x18c>
 8000936:	3504      	adds	r5, #4
 8000938:	016b      	lsls	r3, r5, #5
 800093a:	d544      	bpl.n	80009c6 <__aeabi_fdiv+0x21a>
 800093c:	2001      	movs	r0, #1
 800093e:	2500      	movs	r5, #0
 8000940:	e795      	b.n	800086e <__aeabi_fdiv+0xc2>
 8000942:	20ff      	movs	r0, #255	; 0xff
 8000944:	2500      	movs	r5, #0
 8000946:	e792      	b.n	800086e <__aeabi_fdiv+0xc2>
 8000948:	2580      	movs	r5, #128	; 0x80
 800094a:	2600      	movs	r6, #0
 800094c:	20ff      	movs	r0, #255	; 0xff
 800094e:	03ed      	lsls	r5, r5, #15
 8000950:	e78d      	b.n	800086e <__aeabi_fdiv+0xc2>
 8000952:	2300      	movs	r3, #0
 8000954:	4698      	mov	r8, r3
 8000956:	2080      	movs	r0, #128	; 0x80
 8000958:	03c0      	lsls	r0, r0, #15
 800095a:	4205      	tst	r5, r0
 800095c:	d009      	beq.n	8000972 <__aeabi_fdiv+0x1c6>
 800095e:	4643      	mov	r3, r8
 8000960:	4203      	tst	r3, r0
 8000962:	d106      	bne.n	8000972 <__aeabi_fdiv+0x1c6>
 8000964:	4645      	mov	r5, r8
 8000966:	4305      	orrs	r5, r0
 8000968:	026d      	lsls	r5, r5, #9
 800096a:	0026      	movs	r6, r4
 800096c:	20ff      	movs	r0, #255	; 0xff
 800096e:	0a6d      	lsrs	r5, r5, #9
 8000970:	e77d      	b.n	800086e <__aeabi_fdiv+0xc2>
 8000972:	2080      	movs	r0, #128	; 0x80
 8000974:	03c0      	lsls	r0, r0, #15
 8000976:	4305      	orrs	r5, r0
 8000978:	026d      	lsls	r5, r5, #9
 800097a:	20ff      	movs	r0, #255	; 0xff
 800097c:	0a6d      	lsrs	r5, r5, #9
 800097e:	e776      	b.n	800086e <__aeabi_fdiv+0xc2>
 8000980:	4642      	mov	r2, r8
 8000982:	016b      	lsls	r3, r5, #5
 8000984:	0150      	lsls	r0, r2, #5
 8000986:	4283      	cmp	r3, r0
 8000988:	d219      	bcs.n	80009be <__aeabi_fdiv+0x212>
 800098a:	221b      	movs	r2, #27
 800098c:	2500      	movs	r5, #0
 800098e:	3f01      	subs	r7, #1
 8000990:	2601      	movs	r6, #1
 8000992:	001c      	movs	r4, r3
 8000994:	006d      	lsls	r5, r5, #1
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	2c00      	cmp	r4, #0
 800099a:	db01      	blt.n	80009a0 <__aeabi_fdiv+0x1f4>
 800099c:	4298      	cmp	r0, r3
 800099e:	d801      	bhi.n	80009a4 <__aeabi_fdiv+0x1f8>
 80009a0:	1a1b      	subs	r3, r3, r0
 80009a2:	4335      	orrs	r5, r6
 80009a4:	3a01      	subs	r2, #1
 80009a6:	2a00      	cmp	r2, #0
 80009a8:	d1f3      	bne.n	8000992 <__aeabi_fdiv+0x1e6>
 80009aa:	1e5a      	subs	r2, r3, #1
 80009ac:	4193      	sbcs	r3, r2
 80009ae:	431d      	orrs	r5, r3
 80009b0:	003b      	movs	r3, r7
 80009b2:	337f      	adds	r3, #127	; 0x7f
 80009b4:	000e      	movs	r6, r1
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	dd00      	ble.n	80009bc <__aeabi_fdiv+0x210>
 80009ba:	e741      	b.n	8000840 <__aeabi_fdiv+0x94>
 80009bc:	e7aa      	b.n	8000914 <__aeabi_fdiv+0x168>
 80009be:	221a      	movs	r2, #26
 80009c0:	2501      	movs	r5, #1
 80009c2:	1a1b      	subs	r3, r3, r0
 80009c4:	e7e4      	b.n	8000990 <__aeabi_fdiv+0x1e4>
 80009c6:	01ad      	lsls	r5, r5, #6
 80009c8:	2000      	movs	r0, #0
 80009ca:	0a6d      	lsrs	r5, r5, #9
 80009cc:	e74f      	b.n	800086e <__aeabi_fdiv+0xc2>
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	08006a88 	.word	0x08006a88
 80009d4:	f7ffffff 	.word	0xf7ffffff
 80009d8:	08006ac8 	.word	0x08006ac8

080009dc <__aeabi_fsub>:
 80009dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009de:	46ce      	mov	lr, r9
 80009e0:	4647      	mov	r7, r8
 80009e2:	0243      	lsls	r3, r0, #9
 80009e4:	0a5b      	lsrs	r3, r3, #9
 80009e6:	024e      	lsls	r6, r1, #9
 80009e8:	00da      	lsls	r2, r3, #3
 80009ea:	4694      	mov	ip, r2
 80009ec:	0a72      	lsrs	r2, r6, #9
 80009ee:	4691      	mov	r9, r2
 80009f0:	0045      	lsls	r5, r0, #1
 80009f2:	004a      	lsls	r2, r1, #1
 80009f4:	b580      	push	{r7, lr}
 80009f6:	0e2d      	lsrs	r5, r5, #24
 80009f8:	001f      	movs	r7, r3
 80009fa:	0fc4      	lsrs	r4, r0, #31
 80009fc:	0e12      	lsrs	r2, r2, #24
 80009fe:	0fc9      	lsrs	r1, r1, #31
 8000a00:	09b6      	lsrs	r6, r6, #6
 8000a02:	2aff      	cmp	r2, #255	; 0xff
 8000a04:	d05b      	beq.n	8000abe <__aeabi_fsub+0xe2>
 8000a06:	2001      	movs	r0, #1
 8000a08:	4041      	eors	r1, r0
 8000a0a:	428c      	cmp	r4, r1
 8000a0c:	d039      	beq.n	8000a82 <__aeabi_fsub+0xa6>
 8000a0e:	1aa8      	subs	r0, r5, r2
 8000a10:	2800      	cmp	r0, #0
 8000a12:	dd5a      	ble.n	8000aca <__aeabi_fsub+0xee>
 8000a14:	2a00      	cmp	r2, #0
 8000a16:	d06a      	beq.n	8000aee <__aeabi_fsub+0x112>
 8000a18:	2dff      	cmp	r5, #255	; 0xff
 8000a1a:	d100      	bne.n	8000a1e <__aeabi_fsub+0x42>
 8000a1c:	e0d9      	b.n	8000bd2 <__aeabi_fsub+0x1f6>
 8000a1e:	2280      	movs	r2, #128	; 0x80
 8000a20:	04d2      	lsls	r2, r2, #19
 8000a22:	4316      	orrs	r6, r2
 8000a24:	281b      	cmp	r0, #27
 8000a26:	dc00      	bgt.n	8000a2a <__aeabi_fsub+0x4e>
 8000a28:	e0e9      	b.n	8000bfe <__aeabi_fsub+0x222>
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	4663      	mov	r3, ip
 8000a2e:	1a18      	subs	r0, r3, r0
 8000a30:	0143      	lsls	r3, r0, #5
 8000a32:	d400      	bmi.n	8000a36 <__aeabi_fsub+0x5a>
 8000a34:	e0b4      	b.n	8000ba0 <__aeabi_fsub+0x1c4>
 8000a36:	0180      	lsls	r0, r0, #6
 8000a38:	0987      	lsrs	r7, r0, #6
 8000a3a:	0038      	movs	r0, r7
 8000a3c:	f002 f87a 	bl	8002b34 <__clzsi2>
 8000a40:	3805      	subs	r0, #5
 8000a42:	4087      	lsls	r7, r0
 8000a44:	4285      	cmp	r5, r0
 8000a46:	dc00      	bgt.n	8000a4a <__aeabi_fsub+0x6e>
 8000a48:	e0cc      	b.n	8000be4 <__aeabi_fsub+0x208>
 8000a4a:	1a2d      	subs	r5, r5, r0
 8000a4c:	48b5      	ldr	r0, [pc, #724]	; (8000d24 <__aeabi_fsub+0x348>)
 8000a4e:	4038      	ands	r0, r7
 8000a50:	0743      	lsls	r3, r0, #29
 8000a52:	d004      	beq.n	8000a5e <__aeabi_fsub+0x82>
 8000a54:	230f      	movs	r3, #15
 8000a56:	4003      	ands	r3, r0
 8000a58:	2b04      	cmp	r3, #4
 8000a5a:	d000      	beq.n	8000a5e <__aeabi_fsub+0x82>
 8000a5c:	3004      	adds	r0, #4
 8000a5e:	0143      	lsls	r3, r0, #5
 8000a60:	d400      	bmi.n	8000a64 <__aeabi_fsub+0x88>
 8000a62:	e0a0      	b.n	8000ba6 <__aeabi_fsub+0x1ca>
 8000a64:	1c6a      	adds	r2, r5, #1
 8000a66:	2dfe      	cmp	r5, #254	; 0xfe
 8000a68:	d100      	bne.n	8000a6c <__aeabi_fsub+0x90>
 8000a6a:	e08d      	b.n	8000b88 <__aeabi_fsub+0x1ac>
 8000a6c:	0180      	lsls	r0, r0, #6
 8000a6e:	0a47      	lsrs	r7, r0, #9
 8000a70:	b2d2      	uxtb	r2, r2
 8000a72:	05d0      	lsls	r0, r2, #23
 8000a74:	4338      	orrs	r0, r7
 8000a76:	07e4      	lsls	r4, r4, #31
 8000a78:	4320      	orrs	r0, r4
 8000a7a:	bcc0      	pop	{r6, r7}
 8000a7c:	46b9      	mov	r9, r7
 8000a7e:	46b0      	mov	r8, r6
 8000a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a82:	1aa8      	subs	r0, r5, r2
 8000a84:	4680      	mov	r8, r0
 8000a86:	2800      	cmp	r0, #0
 8000a88:	dd45      	ble.n	8000b16 <__aeabi_fsub+0x13a>
 8000a8a:	2a00      	cmp	r2, #0
 8000a8c:	d070      	beq.n	8000b70 <__aeabi_fsub+0x194>
 8000a8e:	2dff      	cmp	r5, #255	; 0xff
 8000a90:	d100      	bne.n	8000a94 <__aeabi_fsub+0xb8>
 8000a92:	e09e      	b.n	8000bd2 <__aeabi_fsub+0x1f6>
 8000a94:	2380      	movs	r3, #128	; 0x80
 8000a96:	04db      	lsls	r3, r3, #19
 8000a98:	431e      	orrs	r6, r3
 8000a9a:	4643      	mov	r3, r8
 8000a9c:	2b1b      	cmp	r3, #27
 8000a9e:	dc00      	bgt.n	8000aa2 <__aeabi_fsub+0xc6>
 8000aa0:	e0d2      	b.n	8000c48 <__aeabi_fsub+0x26c>
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	4460      	add	r0, ip
 8000aa6:	0143      	lsls	r3, r0, #5
 8000aa8:	d57a      	bpl.n	8000ba0 <__aeabi_fsub+0x1c4>
 8000aaa:	3501      	adds	r5, #1
 8000aac:	2dff      	cmp	r5, #255	; 0xff
 8000aae:	d06b      	beq.n	8000b88 <__aeabi_fsub+0x1ac>
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	4a9d      	ldr	r2, [pc, #628]	; (8000d28 <__aeabi_fsub+0x34c>)
 8000ab4:	4003      	ands	r3, r0
 8000ab6:	0840      	lsrs	r0, r0, #1
 8000ab8:	4010      	ands	r0, r2
 8000aba:	4318      	orrs	r0, r3
 8000abc:	e7c8      	b.n	8000a50 <__aeabi_fsub+0x74>
 8000abe:	2e00      	cmp	r6, #0
 8000ac0:	d020      	beq.n	8000b04 <__aeabi_fsub+0x128>
 8000ac2:	428c      	cmp	r4, r1
 8000ac4:	d023      	beq.n	8000b0e <__aeabi_fsub+0x132>
 8000ac6:	0028      	movs	r0, r5
 8000ac8:	38ff      	subs	r0, #255	; 0xff
 8000aca:	2800      	cmp	r0, #0
 8000acc:	d039      	beq.n	8000b42 <__aeabi_fsub+0x166>
 8000ace:	1b57      	subs	r7, r2, r5
 8000ad0:	2d00      	cmp	r5, #0
 8000ad2:	d000      	beq.n	8000ad6 <__aeabi_fsub+0xfa>
 8000ad4:	e09d      	b.n	8000c12 <__aeabi_fsub+0x236>
 8000ad6:	4663      	mov	r3, ip
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d100      	bne.n	8000ade <__aeabi_fsub+0x102>
 8000adc:	e0db      	b.n	8000c96 <__aeabi_fsub+0x2ba>
 8000ade:	1e7b      	subs	r3, r7, #1
 8000ae0:	2f01      	cmp	r7, #1
 8000ae2:	d100      	bne.n	8000ae6 <__aeabi_fsub+0x10a>
 8000ae4:	e10d      	b.n	8000d02 <__aeabi_fsub+0x326>
 8000ae6:	2fff      	cmp	r7, #255	; 0xff
 8000ae8:	d071      	beq.n	8000bce <__aeabi_fsub+0x1f2>
 8000aea:	001f      	movs	r7, r3
 8000aec:	e098      	b.n	8000c20 <__aeabi_fsub+0x244>
 8000aee:	2e00      	cmp	r6, #0
 8000af0:	d100      	bne.n	8000af4 <__aeabi_fsub+0x118>
 8000af2:	e0a7      	b.n	8000c44 <__aeabi_fsub+0x268>
 8000af4:	1e42      	subs	r2, r0, #1
 8000af6:	2801      	cmp	r0, #1
 8000af8:	d100      	bne.n	8000afc <__aeabi_fsub+0x120>
 8000afa:	e0e6      	b.n	8000cca <__aeabi_fsub+0x2ee>
 8000afc:	28ff      	cmp	r0, #255	; 0xff
 8000afe:	d068      	beq.n	8000bd2 <__aeabi_fsub+0x1f6>
 8000b00:	0010      	movs	r0, r2
 8000b02:	e78f      	b.n	8000a24 <__aeabi_fsub+0x48>
 8000b04:	2001      	movs	r0, #1
 8000b06:	4041      	eors	r1, r0
 8000b08:	42a1      	cmp	r1, r4
 8000b0a:	d000      	beq.n	8000b0e <__aeabi_fsub+0x132>
 8000b0c:	e77f      	b.n	8000a0e <__aeabi_fsub+0x32>
 8000b0e:	20ff      	movs	r0, #255	; 0xff
 8000b10:	4240      	negs	r0, r0
 8000b12:	4680      	mov	r8, r0
 8000b14:	44a8      	add	r8, r5
 8000b16:	4640      	mov	r0, r8
 8000b18:	2800      	cmp	r0, #0
 8000b1a:	d038      	beq.n	8000b8e <__aeabi_fsub+0x1b2>
 8000b1c:	1b51      	subs	r1, r2, r5
 8000b1e:	2d00      	cmp	r5, #0
 8000b20:	d100      	bne.n	8000b24 <__aeabi_fsub+0x148>
 8000b22:	e0ae      	b.n	8000c82 <__aeabi_fsub+0x2a6>
 8000b24:	2aff      	cmp	r2, #255	; 0xff
 8000b26:	d100      	bne.n	8000b2a <__aeabi_fsub+0x14e>
 8000b28:	e0df      	b.n	8000cea <__aeabi_fsub+0x30e>
 8000b2a:	2380      	movs	r3, #128	; 0x80
 8000b2c:	4660      	mov	r0, ip
 8000b2e:	04db      	lsls	r3, r3, #19
 8000b30:	4318      	orrs	r0, r3
 8000b32:	4684      	mov	ip, r0
 8000b34:	291b      	cmp	r1, #27
 8000b36:	dc00      	bgt.n	8000b3a <__aeabi_fsub+0x15e>
 8000b38:	e0d9      	b.n	8000cee <__aeabi_fsub+0x312>
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	0015      	movs	r5, r2
 8000b3e:	1980      	adds	r0, r0, r6
 8000b40:	e7b1      	b.n	8000aa6 <__aeabi_fsub+0xca>
 8000b42:	20fe      	movs	r0, #254	; 0xfe
 8000b44:	1c6a      	adds	r2, r5, #1
 8000b46:	4210      	tst	r0, r2
 8000b48:	d171      	bne.n	8000c2e <__aeabi_fsub+0x252>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	d000      	beq.n	8000b50 <__aeabi_fsub+0x174>
 8000b4e:	e0a6      	b.n	8000c9e <__aeabi_fsub+0x2c2>
 8000b50:	4663      	mov	r3, ip
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d100      	bne.n	8000b58 <__aeabi_fsub+0x17c>
 8000b56:	e0d9      	b.n	8000d0c <__aeabi_fsub+0x330>
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2e00      	cmp	r6, #0
 8000b5c:	d100      	bne.n	8000b60 <__aeabi_fsub+0x184>
 8000b5e:	e788      	b.n	8000a72 <__aeabi_fsub+0x96>
 8000b60:	1b98      	subs	r0, r3, r6
 8000b62:	0143      	lsls	r3, r0, #5
 8000b64:	d400      	bmi.n	8000b68 <__aeabi_fsub+0x18c>
 8000b66:	e0e1      	b.n	8000d2c <__aeabi_fsub+0x350>
 8000b68:	4663      	mov	r3, ip
 8000b6a:	000c      	movs	r4, r1
 8000b6c:	1af0      	subs	r0, r6, r3
 8000b6e:	e76f      	b.n	8000a50 <__aeabi_fsub+0x74>
 8000b70:	2e00      	cmp	r6, #0
 8000b72:	d100      	bne.n	8000b76 <__aeabi_fsub+0x19a>
 8000b74:	e0b7      	b.n	8000ce6 <__aeabi_fsub+0x30a>
 8000b76:	0002      	movs	r2, r0
 8000b78:	3a01      	subs	r2, #1
 8000b7a:	2801      	cmp	r0, #1
 8000b7c:	d100      	bne.n	8000b80 <__aeabi_fsub+0x1a4>
 8000b7e:	e09c      	b.n	8000cba <__aeabi_fsub+0x2de>
 8000b80:	28ff      	cmp	r0, #255	; 0xff
 8000b82:	d026      	beq.n	8000bd2 <__aeabi_fsub+0x1f6>
 8000b84:	4690      	mov	r8, r2
 8000b86:	e788      	b.n	8000a9a <__aeabi_fsub+0xbe>
 8000b88:	22ff      	movs	r2, #255	; 0xff
 8000b8a:	2700      	movs	r7, #0
 8000b8c:	e771      	b.n	8000a72 <__aeabi_fsub+0x96>
 8000b8e:	20fe      	movs	r0, #254	; 0xfe
 8000b90:	1c6a      	adds	r2, r5, #1
 8000b92:	4210      	tst	r0, r2
 8000b94:	d064      	beq.n	8000c60 <__aeabi_fsub+0x284>
 8000b96:	2aff      	cmp	r2, #255	; 0xff
 8000b98:	d0f6      	beq.n	8000b88 <__aeabi_fsub+0x1ac>
 8000b9a:	0015      	movs	r5, r2
 8000b9c:	4466      	add	r6, ip
 8000b9e:	0870      	lsrs	r0, r6, #1
 8000ba0:	0743      	lsls	r3, r0, #29
 8000ba2:	d000      	beq.n	8000ba6 <__aeabi_fsub+0x1ca>
 8000ba4:	e756      	b.n	8000a54 <__aeabi_fsub+0x78>
 8000ba6:	08c3      	lsrs	r3, r0, #3
 8000ba8:	2dff      	cmp	r5, #255	; 0xff
 8000baa:	d012      	beq.n	8000bd2 <__aeabi_fsub+0x1f6>
 8000bac:	025b      	lsls	r3, r3, #9
 8000bae:	0a5f      	lsrs	r7, r3, #9
 8000bb0:	b2ea      	uxtb	r2, r5
 8000bb2:	e75e      	b.n	8000a72 <__aeabi_fsub+0x96>
 8000bb4:	4662      	mov	r2, ip
 8000bb6:	2a00      	cmp	r2, #0
 8000bb8:	d100      	bne.n	8000bbc <__aeabi_fsub+0x1e0>
 8000bba:	e096      	b.n	8000cea <__aeabi_fsub+0x30e>
 8000bbc:	2e00      	cmp	r6, #0
 8000bbe:	d008      	beq.n	8000bd2 <__aeabi_fsub+0x1f6>
 8000bc0:	2280      	movs	r2, #128	; 0x80
 8000bc2:	03d2      	lsls	r2, r2, #15
 8000bc4:	4213      	tst	r3, r2
 8000bc6:	d004      	beq.n	8000bd2 <__aeabi_fsub+0x1f6>
 8000bc8:	4648      	mov	r0, r9
 8000bca:	4210      	tst	r0, r2
 8000bcc:	d101      	bne.n	8000bd2 <__aeabi_fsub+0x1f6>
 8000bce:	000c      	movs	r4, r1
 8000bd0:	464b      	mov	r3, r9
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d0d8      	beq.n	8000b88 <__aeabi_fsub+0x1ac>
 8000bd6:	2780      	movs	r7, #128	; 0x80
 8000bd8:	03ff      	lsls	r7, r7, #15
 8000bda:	431f      	orrs	r7, r3
 8000bdc:	027f      	lsls	r7, r7, #9
 8000bde:	22ff      	movs	r2, #255	; 0xff
 8000be0:	0a7f      	lsrs	r7, r7, #9
 8000be2:	e746      	b.n	8000a72 <__aeabi_fsub+0x96>
 8000be4:	2320      	movs	r3, #32
 8000be6:	003a      	movs	r2, r7
 8000be8:	1b45      	subs	r5, r0, r5
 8000bea:	0038      	movs	r0, r7
 8000bec:	3501      	adds	r5, #1
 8000bee:	40ea      	lsrs	r2, r5
 8000bf0:	1b5d      	subs	r5, r3, r5
 8000bf2:	40a8      	lsls	r0, r5
 8000bf4:	1e43      	subs	r3, r0, #1
 8000bf6:	4198      	sbcs	r0, r3
 8000bf8:	2500      	movs	r5, #0
 8000bfa:	4310      	orrs	r0, r2
 8000bfc:	e728      	b.n	8000a50 <__aeabi_fsub+0x74>
 8000bfe:	2320      	movs	r3, #32
 8000c00:	1a1b      	subs	r3, r3, r0
 8000c02:	0032      	movs	r2, r6
 8000c04:	409e      	lsls	r6, r3
 8000c06:	40c2      	lsrs	r2, r0
 8000c08:	0030      	movs	r0, r6
 8000c0a:	1e43      	subs	r3, r0, #1
 8000c0c:	4198      	sbcs	r0, r3
 8000c0e:	4310      	orrs	r0, r2
 8000c10:	e70c      	b.n	8000a2c <__aeabi_fsub+0x50>
 8000c12:	2aff      	cmp	r2, #255	; 0xff
 8000c14:	d0db      	beq.n	8000bce <__aeabi_fsub+0x1f2>
 8000c16:	2380      	movs	r3, #128	; 0x80
 8000c18:	4660      	mov	r0, ip
 8000c1a:	04db      	lsls	r3, r3, #19
 8000c1c:	4318      	orrs	r0, r3
 8000c1e:	4684      	mov	ip, r0
 8000c20:	2f1b      	cmp	r7, #27
 8000c22:	dd56      	ble.n	8000cd2 <__aeabi_fsub+0x2f6>
 8000c24:	2001      	movs	r0, #1
 8000c26:	000c      	movs	r4, r1
 8000c28:	0015      	movs	r5, r2
 8000c2a:	1a30      	subs	r0, r6, r0
 8000c2c:	e700      	b.n	8000a30 <__aeabi_fsub+0x54>
 8000c2e:	4663      	mov	r3, ip
 8000c30:	1b9f      	subs	r7, r3, r6
 8000c32:	017b      	lsls	r3, r7, #5
 8000c34:	d43d      	bmi.n	8000cb2 <__aeabi_fsub+0x2d6>
 8000c36:	2f00      	cmp	r7, #0
 8000c38:	d000      	beq.n	8000c3c <__aeabi_fsub+0x260>
 8000c3a:	e6fe      	b.n	8000a3a <__aeabi_fsub+0x5e>
 8000c3c:	2400      	movs	r4, #0
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2700      	movs	r7, #0
 8000c42:	e716      	b.n	8000a72 <__aeabi_fsub+0x96>
 8000c44:	0005      	movs	r5, r0
 8000c46:	e7af      	b.n	8000ba8 <__aeabi_fsub+0x1cc>
 8000c48:	0032      	movs	r2, r6
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	4641      	mov	r1, r8
 8000c4e:	40da      	lsrs	r2, r3
 8000c50:	2320      	movs	r3, #32
 8000c52:	1a5b      	subs	r3, r3, r1
 8000c54:	409e      	lsls	r6, r3
 8000c56:	0030      	movs	r0, r6
 8000c58:	1e43      	subs	r3, r0, #1
 8000c5a:	4198      	sbcs	r0, r3
 8000c5c:	4310      	orrs	r0, r2
 8000c5e:	e721      	b.n	8000aa4 <__aeabi_fsub+0xc8>
 8000c60:	2d00      	cmp	r5, #0
 8000c62:	d1a7      	bne.n	8000bb4 <__aeabi_fsub+0x1d8>
 8000c64:	4663      	mov	r3, ip
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d059      	beq.n	8000d1e <__aeabi_fsub+0x342>
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2e00      	cmp	r6, #0
 8000c6e:	d100      	bne.n	8000c72 <__aeabi_fsub+0x296>
 8000c70:	e6ff      	b.n	8000a72 <__aeabi_fsub+0x96>
 8000c72:	0030      	movs	r0, r6
 8000c74:	4460      	add	r0, ip
 8000c76:	0143      	lsls	r3, r0, #5
 8000c78:	d592      	bpl.n	8000ba0 <__aeabi_fsub+0x1c4>
 8000c7a:	4b2a      	ldr	r3, [pc, #168]	; (8000d24 <__aeabi_fsub+0x348>)
 8000c7c:	3501      	adds	r5, #1
 8000c7e:	4018      	ands	r0, r3
 8000c80:	e78e      	b.n	8000ba0 <__aeabi_fsub+0x1c4>
 8000c82:	4663      	mov	r3, ip
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d047      	beq.n	8000d18 <__aeabi_fsub+0x33c>
 8000c88:	1e4b      	subs	r3, r1, #1
 8000c8a:	2901      	cmp	r1, #1
 8000c8c:	d015      	beq.n	8000cba <__aeabi_fsub+0x2de>
 8000c8e:	29ff      	cmp	r1, #255	; 0xff
 8000c90:	d02b      	beq.n	8000cea <__aeabi_fsub+0x30e>
 8000c92:	0019      	movs	r1, r3
 8000c94:	e74e      	b.n	8000b34 <__aeabi_fsub+0x158>
 8000c96:	000c      	movs	r4, r1
 8000c98:	464b      	mov	r3, r9
 8000c9a:	003d      	movs	r5, r7
 8000c9c:	e784      	b.n	8000ba8 <__aeabi_fsub+0x1cc>
 8000c9e:	4662      	mov	r2, ip
 8000ca0:	2a00      	cmp	r2, #0
 8000ca2:	d18b      	bne.n	8000bbc <__aeabi_fsub+0x1e0>
 8000ca4:	2e00      	cmp	r6, #0
 8000ca6:	d192      	bne.n	8000bce <__aeabi_fsub+0x1f2>
 8000ca8:	2780      	movs	r7, #128	; 0x80
 8000caa:	2400      	movs	r4, #0
 8000cac:	22ff      	movs	r2, #255	; 0xff
 8000cae:	03ff      	lsls	r7, r7, #15
 8000cb0:	e6df      	b.n	8000a72 <__aeabi_fsub+0x96>
 8000cb2:	4663      	mov	r3, ip
 8000cb4:	000c      	movs	r4, r1
 8000cb6:	1af7      	subs	r7, r6, r3
 8000cb8:	e6bf      	b.n	8000a3a <__aeabi_fsub+0x5e>
 8000cba:	0030      	movs	r0, r6
 8000cbc:	4460      	add	r0, ip
 8000cbe:	2501      	movs	r5, #1
 8000cc0:	0143      	lsls	r3, r0, #5
 8000cc2:	d400      	bmi.n	8000cc6 <__aeabi_fsub+0x2ea>
 8000cc4:	e76c      	b.n	8000ba0 <__aeabi_fsub+0x1c4>
 8000cc6:	2502      	movs	r5, #2
 8000cc8:	e6f2      	b.n	8000ab0 <__aeabi_fsub+0xd4>
 8000cca:	4663      	mov	r3, ip
 8000ccc:	2501      	movs	r5, #1
 8000cce:	1b98      	subs	r0, r3, r6
 8000cd0:	e6ae      	b.n	8000a30 <__aeabi_fsub+0x54>
 8000cd2:	2320      	movs	r3, #32
 8000cd4:	4664      	mov	r4, ip
 8000cd6:	4660      	mov	r0, ip
 8000cd8:	40fc      	lsrs	r4, r7
 8000cda:	1bdf      	subs	r7, r3, r7
 8000cdc:	40b8      	lsls	r0, r7
 8000cde:	1e43      	subs	r3, r0, #1
 8000ce0:	4198      	sbcs	r0, r3
 8000ce2:	4320      	orrs	r0, r4
 8000ce4:	e79f      	b.n	8000c26 <__aeabi_fsub+0x24a>
 8000ce6:	0005      	movs	r5, r0
 8000ce8:	e75e      	b.n	8000ba8 <__aeabi_fsub+0x1cc>
 8000cea:	464b      	mov	r3, r9
 8000cec:	e771      	b.n	8000bd2 <__aeabi_fsub+0x1f6>
 8000cee:	2320      	movs	r3, #32
 8000cf0:	4665      	mov	r5, ip
 8000cf2:	4660      	mov	r0, ip
 8000cf4:	40cd      	lsrs	r5, r1
 8000cf6:	1a59      	subs	r1, r3, r1
 8000cf8:	4088      	lsls	r0, r1
 8000cfa:	1e43      	subs	r3, r0, #1
 8000cfc:	4198      	sbcs	r0, r3
 8000cfe:	4328      	orrs	r0, r5
 8000d00:	e71c      	b.n	8000b3c <__aeabi_fsub+0x160>
 8000d02:	4663      	mov	r3, ip
 8000d04:	000c      	movs	r4, r1
 8000d06:	2501      	movs	r5, #1
 8000d08:	1af0      	subs	r0, r6, r3
 8000d0a:	e691      	b.n	8000a30 <__aeabi_fsub+0x54>
 8000d0c:	2e00      	cmp	r6, #0
 8000d0e:	d095      	beq.n	8000c3c <__aeabi_fsub+0x260>
 8000d10:	000c      	movs	r4, r1
 8000d12:	464f      	mov	r7, r9
 8000d14:	2200      	movs	r2, #0
 8000d16:	e6ac      	b.n	8000a72 <__aeabi_fsub+0x96>
 8000d18:	464b      	mov	r3, r9
 8000d1a:	000d      	movs	r5, r1
 8000d1c:	e744      	b.n	8000ba8 <__aeabi_fsub+0x1cc>
 8000d1e:	464f      	mov	r7, r9
 8000d20:	2200      	movs	r2, #0
 8000d22:	e6a6      	b.n	8000a72 <__aeabi_fsub+0x96>
 8000d24:	fbffffff 	.word	0xfbffffff
 8000d28:	7dffffff 	.word	0x7dffffff
 8000d2c:	2800      	cmp	r0, #0
 8000d2e:	d000      	beq.n	8000d32 <__aeabi_fsub+0x356>
 8000d30:	e736      	b.n	8000ba0 <__aeabi_fsub+0x1c4>
 8000d32:	2400      	movs	r4, #0
 8000d34:	2700      	movs	r7, #0
 8000d36:	e69c      	b.n	8000a72 <__aeabi_fsub+0x96>

08000d38 <__aeabi_f2iz>:
 8000d38:	0241      	lsls	r1, r0, #9
 8000d3a:	0042      	lsls	r2, r0, #1
 8000d3c:	0fc3      	lsrs	r3, r0, #31
 8000d3e:	0a49      	lsrs	r1, r1, #9
 8000d40:	2000      	movs	r0, #0
 8000d42:	0e12      	lsrs	r2, r2, #24
 8000d44:	2a7e      	cmp	r2, #126	; 0x7e
 8000d46:	dd03      	ble.n	8000d50 <__aeabi_f2iz+0x18>
 8000d48:	2a9d      	cmp	r2, #157	; 0x9d
 8000d4a:	dd02      	ble.n	8000d52 <__aeabi_f2iz+0x1a>
 8000d4c:	4a09      	ldr	r2, [pc, #36]	; (8000d74 <__aeabi_f2iz+0x3c>)
 8000d4e:	1898      	adds	r0, r3, r2
 8000d50:	4770      	bx	lr
 8000d52:	2080      	movs	r0, #128	; 0x80
 8000d54:	0400      	lsls	r0, r0, #16
 8000d56:	4301      	orrs	r1, r0
 8000d58:	2a95      	cmp	r2, #149	; 0x95
 8000d5a:	dc07      	bgt.n	8000d6c <__aeabi_f2iz+0x34>
 8000d5c:	2096      	movs	r0, #150	; 0x96
 8000d5e:	1a82      	subs	r2, r0, r2
 8000d60:	40d1      	lsrs	r1, r2
 8000d62:	4248      	negs	r0, r1
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d1f3      	bne.n	8000d50 <__aeabi_f2iz+0x18>
 8000d68:	0008      	movs	r0, r1
 8000d6a:	e7f1      	b.n	8000d50 <__aeabi_f2iz+0x18>
 8000d6c:	3a96      	subs	r2, #150	; 0x96
 8000d6e:	4091      	lsls	r1, r2
 8000d70:	e7f7      	b.n	8000d62 <__aeabi_f2iz+0x2a>
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	7fffffff 	.word	0x7fffffff

08000d78 <__aeabi_i2f>:
 8000d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d7a:	2800      	cmp	r0, #0
 8000d7c:	d013      	beq.n	8000da6 <__aeabi_i2f+0x2e>
 8000d7e:	17c3      	asrs	r3, r0, #31
 8000d80:	18c6      	adds	r6, r0, r3
 8000d82:	405e      	eors	r6, r3
 8000d84:	0fc4      	lsrs	r4, r0, #31
 8000d86:	0030      	movs	r0, r6
 8000d88:	f001 fed4 	bl	8002b34 <__clzsi2>
 8000d8c:	239e      	movs	r3, #158	; 0x9e
 8000d8e:	0005      	movs	r5, r0
 8000d90:	1a1b      	subs	r3, r3, r0
 8000d92:	2b96      	cmp	r3, #150	; 0x96
 8000d94:	dc0f      	bgt.n	8000db6 <__aeabi_i2f+0x3e>
 8000d96:	2808      	cmp	r0, #8
 8000d98:	dd01      	ble.n	8000d9e <__aeabi_i2f+0x26>
 8000d9a:	3d08      	subs	r5, #8
 8000d9c:	40ae      	lsls	r6, r5
 8000d9e:	0276      	lsls	r6, r6, #9
 8000da0:	0a76      	lsrs	r6, r6, #9
 8000da2:	b2d8      	uxtb	r0, r3
 8000da4:	e002      	b.n	8000dac <__aeabi_i2f+0x34>
 8000da6:	2400      	movs	r4, #0
 8000da8:	2000      	movs	r0, #0
 8000daa:	2600      	movs	r6, #0
 8000dac:	05c0      	lsls	r0, r0, #23
 8000dae:	4330      	orrs	r0, r6
 8000db0:	07e4      	lsls	r4, r4, #31
 8000db2:	4320      	orrs	r0, r4
 8000db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000db6:	2b99      	cmp	r3, #153	; 0x99
 8000db8:	dd0c      	ble.n	8000dd4 <__aeabi_i2f+0x5c>
 8000dba:	2205      	movs	r2, #5
 8000dbc:	0031      	movs	r1, r6
 8000dbe:	1a12      	subs	r2, r2, r0
 8000dc0:	40d1      	lsrs	r1, r2
 8000dc2:	000a      	movs	r2, r1
 8000dc4:	0001      	movs	r1, r0
 8000dc6:	0030      	movs	r0, r6
 8000dc8:	311b      	adds	r1, #27
 8000dca:	4088      	lsls	r0, r1
 8000dcc:	1e41      	subs	r1, r0, #1
 8000dce:	4188      	sbcs	r0, r1
 8000dd0:	4302      	orrs	r2, r0
 8000dd2:	0016      	movs	r6, r2
 8000dd4:	2d05      	cmp	r5, #5
 8000dd6:	dc12      	bgt.n	8000dfe <__aeabi_i2f+0x86>
 8000dd8:	0031      	movs	r1, r6
 8000dda:	4f0d      	ldr	r7, [pc, #52]	; (8000e10 <__aeabi_i2f+0x98>)
 8000ddc:	4039      	ands	r1, r7
 8000dde:	0772      	lsls	r2, r6, #29
 8000de0:	d009      	beq.n	8000df6 <__aeabi_i2f+0x7e>
 8000de2:	200f      	movs	r0, #15
 8000de4:	4030      	ands	r0, r6
 8000de6:	2804      	cmp	r0, #4
 8000de8:	d005      	beq.n	8000df6 <__aeabi_i2f+0x7e>
 8000dea:	3104      	adds	r1, #4
 8000dec:	014a      	lsls	r2, r1, #5
 8000dee:	d502      	bpl.n	8000df6 <__aeabi_i2f+0x7e>
 8000df0:	239f      	movs	r3, #159	; 0x9f
 8000df2:	4039      	ands	r1, r7
 8000df4:	1b5b      	subs	r3, r3, r5
 8000df6:	0189      	lsls	r1, r1, #6
 8000df8:	0a4e      	lsrs	r6, r1, #9
 8000dfa:	b2d8      	uxtb	r0, r3
 8000dfc:	e7d6      	b.n	8000dac <__aeabi_i2f+0x34>
 8000dfe:	1f6a      	subs	r2, r5, #5
 8000e00:	4096      	lsls	r6, r2
 8000e02:	0031      	movs	r1, r6
 8000e04:	4f02      	ldr	r7, [pc, #8]	; (8000e10 <__aeabi_i2f+0x98>)
 8000e06:	4039      	ands	r1, r7
 8000e08:	0772      	lsls	r2, r6, #29
 8000e0a:	d0f4      	beq.n	8000df6 <__aeabi_i2f+0x7e>
 8000e0c:	e7e9      	b.n	8000de2 <__aeabi_i2f+0x6a>
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	fbffffff 	.word	0xfbffffff

08000e14 <__aeabi_dadd>:
 8000e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e16:	464f      	mov	r7, r9
 8000e18:	4646      	mov	r6, r8
 8000e1a:	46d6      	mov	lr, sl
 8000e1c:	000d      	movs	r5, r1
 8000e1e:	0004      	movs	r4, r0
 8000e20:	b5c0      	push	{r6, r7, lr}
 8000e22:	001f      	movs	r7, r3
 8000e24:	0011      	movs	r1, r2
 8000e26:	0328      	lsls	r0, r5, #12
 8000e28:	0f62      	lsrs	r2, r4, #29
 8000e2a:	0a40      	lsrs	r0, r0, #9
 8000e2c:	4310      	orrs	r0, r2
 8000e2e:	007a      	lsls	r2, r7, #1
 8000e30:	0d52      	lsrs	r2, r2, #21
 8000e32:	00e3      	lsls	r3, r4, #3
 8000e34:	033c      	lsls	r4, r7, #12
 8000e36:	4691      	mov	r9, r2
 8000e38:	0a64      	lsrs	r4, r4, #9
 8000e3a:	0ffa      	lsrs	r2, r7, #31
 8000e3c:	0f4f      	lsrs	r7, r1, #29
 8000e3e:	006e      	lsls	r6, r5, #1
 8000e40:	4327      	orrs	r7, r4
 8000e42:	4692      	mov	sl, r2
 8000e44:	46b8      	mov	r8, r7
 8000e46:	0d76      	lsrs	r6, r6, #21
 8000e48:	0fed      	lsrs	r5, r5, #31
 8000e4a:	00c9      	lsls	r1, r1, #3
 8000e4c:	4295      	cmp	r5, r2
 8000e4e:	d100      	bne.n	8000e52 <__aeabi_dadd+0x3e>
 8000e50:	e099      	b.n	8000f86 <__aeabi_dadd+0x172>
 8000e52:	464c      	mov	r4, r9
 8000e54:	1b34      	subs	r4, r6, r4
 8000e56:	46a4      	mov	ip, r4
 8000e58:	2c00      	cmp	r4, #0
 8000e5a:	dc00      	bgt.n	8000e5e <__aeabi_dadd+0x4a>
 8000e5c:	e07c      	b.n	8000f58 <__aeabi_dadd+0x144>
 8000e5e:	464a      	mov	r2, r9
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	d100      	bne.n	8000e66 <__aeabi_dadd+0x52>
 8000e64:	e0b8      	b.n	8000fd8 <__aeabi_dadd+0x1c4>
 8000e66:	4ac5      	ldr	r2, [pc, #788]	; (800117c <__aeabi_dadd+0x368>)
 8000e68:	4296      	cmp	r6, r2
 8000e6a:	d100      	bne.n	8000e6e <__aeabi_dadd+0x5a>
 8000e6c:	e11c      	b.n	80010a8 <__aeabi_dadd+0x294>
 8000e6e:	2280      	movs	r2, #128	; 0x80
 8000e70:	003c      	movs	r4, r7
 8000e72:	0412      	lsls	r2, r2, #16
 8000e74:	4314      	orrs	r4, r2
 8000e76:	46a0      	mov	r8, r4
 8000e78:	4662      	mov	r2, ip
 8000e7a:	2a38      	cmp	r2, #56	; 0x38
 8000e7c:	dd00      	ble.n	8000e80 <__aeabi_dadd+0x6c>
 8000e7e:	e161      	b.n	8001144 <__aeabi_dadd+0x330>
 8000e80:	2a1f      	cmp	r2, #31
 8000e82:	dd00      	ble.n	8000e86 <__aeabi_dadd+0x72>
 8000e84:	e1cc      	b.n	8001220 <__aeabi_dadd+0x40c>
 8000e86:	4664      	mov	r4, ip
 8000e88:	2220      	movs	r2, #32
 8000e8a:	1b12      	subs	r2, r2, r4
 8000e8c:	4644      	mov	r4, r8
 8000e8e:	4094      	lsls	r4, r2
 8000e90:	000f      	movs	r7, r1
 8000e92:	46a1      	mov	r9, r4
 8000e94:	4664      	mov	r4, ip
 8000e96:	4091      	lsls	r1, r2
 8000e98:	40e7      	lsrs	r7, r4
 8000e9a:	464c      	mov	r4, r9
 8000e9c:	1e4a      	subs	r2, r1, #1
 8000e9e:	4191      	sbcs	r1, r2
 8000ea0:	433c      	orrs	r4, r7
 8000ea2:	4642      	mov	r2, r8
 8000ea4:	4321      	orrs	r1, r4
 8000ea6:	4664      	mov	r4, ip
 8000ea8:	40e2      	lsrs	r2, r4
 8000eaa:	1a80      	subs	r0, r0, r2
 8000eac:	1a5c      	subs	r4, r3, r1
 8000eae:	42a3      	cmp	r3, r4
 8000eb0:	419b      	sbcs	r3, r3
 8000eb2:	425f      	negs	r7, r3
 8000eb4:	1bc7      	subs	r7, r0, r7
 8000eb6:	023b      	lsls	r3, r7, #8
 8000eb8:	d400      	bmi.n	8000ebc <__aeabi_dadd+0xa8>
 8000eba:	e0d0      	b.n	800105e <__aeabi_dadd+0x24a>
 8000ebc:	027f      	lsls	r7, r7, #9
 8000ebe:	0a7f      	lsrs	r7, r7, #9
 8000ec0:	2f00      	cmp	r7, #0
 8000ec2:	d100      	bne.n	8000ec6 <__aeabi_dadd+0xb2>
 8000ec4:	e0ff      	b.n	80010c6 <__aeabi_dadd+0x2b2>
 8000ec6:	0038      	movs	r0, r7
 8000ec8:	f001 fe34 	bl	8002b34 <__clzsi2>
 8000ecc:	0001      	movs	r1, r0
 8000ece:	3908      	subs	r1, #8
 8000ed0:	2320      	movs	r3, #32
 8000ed2:	0022      	movs	r2, r4
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	408f      	lsls	r7, r1
 8000ed8:	40da      	lsrs	r2, r3
 8000eda:	408c      	lsls	r4, r1
 8000edc:	4317      	orrs	r7, r2
 8000ede:	42b1      	cmp	r1, r6
 8000ee0:	da00      	bge.n	8000ee4 <__aeabi_dadd+0xd0>
 8000ee2:	e0ff      	b.n	80010e4 <__aeabi_dadd+0x2d0>
 8000ee4:	1b89      	subs	r1, r1, r6
 8000ee6:	1c4b      	adds	r3, r1, #1
 8000ee8:	2b1f      	cmp	r3, #31
 8000eea:	dd00      	ble.n	8000eee <__aeabi_dadd+0xda>
 8000eec:	e0a8      	b.n	8001040 <__aeabi_dadd+0x22c>
 8000eee:	2220      	movs	r2, #32
 8000ef0:	0039      	movs	r1, r7
 8000ef2:	1ad2      	subs	r2, r2, r3
 8000ef4:	0020      	movs	r0, r4
 8000ef6:	4094      	lsls	r4, r2
 8000ef8:	4091      	lsls	r1, r2
 8000efa:	40d8      	lsrs	r0, r3
 8000efc:	1e62      	subs	r2, r4, #1
 8000efe:	4194      	sbcs	r4, r2
 8000f00:	40df      	lsrs	r7, r3
 8000f02:	2600      	movs	r6, #0
 8000f04:	4301      	orrs	r1, r0
 8000f06:	430c      	orrs	r4, r1
 8000f08:	0763      	lsls	r3, r4, #29
 8000f0a:	d009      	beq.n	8000f20 <__aeabi_dadd+0x10c>
 8000f0c:	230f      	movs	r3, #15
 8000f0e:	4023      	ands	r3, r4
 8000f10:	2b04      	cmp	r3, #4
 8000f12:	d005      	beq.n	8000f20 <__aeabi_dadd+0x10c>
 8000f14:	1d23      	adds	r3, r4, #4
 8000f16:	42a3      	cmp	r3, r4
 8000f18:	41a4      	sbcs	r4, r4
 8000f1a:	4264      	negs	r4, r4
 8000f1c:	193f      	adds	r7, r7, r4
 8000f1e:	001c      	movs	r4, r3
 8000f20:	023b      	lsls	r3, r7, #8
 8000f22:	d400      	bmi.n	8000f26 <__aeabi_dadd+0x112>
 8000f24:	e09e      	b.n	8001064 <__aeabi_dadd+0x250>
 8000f26:	4b95      	ldr	r3, [pc, #596]	; (800117c <__aeabi_dadd+0x368>)
 8000f28:	3601      	adds	r6, #1
 8000f2a:	429e      	cmp	r6, r3
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_dadd+0x11c>
 8000f2e:	e0b7      	b.n	80010a0 <__aeabi_dadd+0x28c>
 8000f30:	4a93      	ldr	r2, [pc, #588]	; (8001180 <__aeabi_dadd+0x36c>)
 8000f32:	08e4      	lsrs	r4, r4, #3
 8000f34:	4017      	ands	r7, r2
 8000f36:	077b      	lsls	r3, r7, #29
 8000f38:	0571      	lsls	r1, r6, #21
 8000f3a:	027f      	lsls	r7, r7, #9
 8000f3c:	4323      	orrs	r3, r4
 8000f3e:	0b3f      	lsrs	r7, r7, #12
 8000f40:	0d4a      	lsrs	r2, r1, #21
 8000f42:	0512      	lsls	r2, r2, #20
 8000f44:	433a      	orrs	r2, r7
 8000f46:	07ed      	lsls	r5, r5, #31
 8000f48:	432a      	orrs	r2, r5
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	0011      	movs	r1, r2
 8000f4e:	bce0      	pop	{r5, r6, r7}
 8000f50:	46ba      	mov	sl, r7
 8000f52:	46b1      	mov	r9, r6
 8000f54:	46a8      	mov	r8, r5
 8000f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f58:	2c00      	cmp	r4, #0
 8000f5a:	d04b      	beq.n	8000ff4 <__aeabi_dadd+0x1e0>
 8000f5c:	464c      	mov	r4, r9
 8000f5e:	1ba4      	subs	r4, r4, r6
 8000f60:	46a4      	mov	ip, r4
 8000f62:	2e00      	cmp	r6, #0
 8000f64:	d000      	beq.n	8000f68 <__aeabi_dadd+0x154>
 8000f66:	e123      	b.n	80011b0 <__aeabi_dadd+0x39c>
 8000f68:	0004      	movs	r4, r0
 8000f6a:	431c      	orrs	r4, r3
 8000f6c:	d100      	bne.n	8000f70 <__aeabi_dadd+0x15c>
 8000f6e:	e1af      	b.n	80012d0 <__aeabi_dadd+0x4bc>
 8000f70:	4662      	mov	r2, ip
 8000f72:	1e54      	subs	r4, r2, #1
 8000f74:	2a01      	cmp	r2, #1
 8000f76:	d100      	bne.n	8000f7a <__aeabi_dadd+0x166>
 8000f78:	e215      	b.n	80013a6 <__aeabi_dadd+0x592>
 8000f7a:	4d80      	ldr	r5, [pc, #512]	; (800117c <__aeabi_dadd+0x368>)
 8000f7c:	45ac      	cmp	ip, r5
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_dadd+0x16e>
 8000f80:	e1c8      	b.n	8001314 <__aeabi_dadd+0x500>
 8000f82:	46a4      	mov	ip, r4
 8000f84:	e11b      	b.n	80011be <__aeabi_dadd+0x3aa>
 8000f86:	464a      	mov	r2, r9
 8000f88:	1ab2      	subs	r2, r6, r2
 8000f8a:	4694      	mov	ip, r2
 8000f8c:	2a00      	cmp	r2, #0
 8000f8e:	dc00      	bgt.n	8000f92 <__aeabi_dadd+0x17e>
 8000f90:	e0ac      	b.n	80010ec <__aeabi_dadd+0x2d8>
 8000f92:	464a      	mov	r2, r9
 8000f94:	2a00      	cmp	r2, #0
 8000f96:	d043      	beq.n	8001020 <__aeabi_dadd+0x20c>
 8000f98:	4a78      	ldr	r2, [pc, #480]	; (800117c <__aeabi_dadd+0x368>)
 8000f9a:	4296      	cmp	r6, r2
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_dadd+0x18c>
 8000f9e:	e1af      	b.n	8001300 <__aeabi_dadd+0x4ec>
 8000fa0:	2280      	movs	r2, #128	; 0x80
 8000fa2:	003c      	movs	r4, r7
 8000fa4:	0412      	lsls	r2, r2, #16
 8000fa6:	4314      	orrs	r4, r2
 8000fa8:	46a0      	mov	r8, r4
 8000faa:	4662      	mov	r2, ip
 8000fac:	2a38      	cmp	r2, #56	; 0x38
 8000fae:	dc67      	bgt.n	8001080 <__aeabi_dadd+0x26c>
 8000fb0:	2a1f      	cmp	r2, #31
 8000fb2:	dc00      	bgt.n	8000fb6 <__aeabi_dadd+0x1a2>
 8000fb4:	e15f      	b.n	8001276 <__aeabi_dadd+0x462>
 8000fb6:	4647      	mov	r7, r8
 8000fb8:	3a20      	subs	r2, #32
 8000fba:	40d7      	lsrs	r7, r2
 8000fbc:	4662      	mov	r2, ip
 8000fbe:	2a20      	cmp	r2, #32
 8000fc0:	d005      	beq.n	8000fce <__aeabi_dadd+0x1ba>
 8000fc2:	4664      	mov	r4, ip
 8000fc4:	2240      	movs	r2, #64	; 0x40
 8000fc6:	1b12      	subs	r2, r2, r4
 8000fc8:	4644      	mov	r4, r8
 8000fca:	4094      	lsls	r4, r2
 8000fcc:	4321      	orrs	r1, r4
 8000fce:	1e4a      	subs	r2, r1, #1
 8000fd0:	4191      	sbcs	r1, r2
 8000fd2:	000c      	movs	r4, r1
 8000fd4:	433c      	orrs	r4, r7
 8000fd6:	e057      	b.n	8001088 <__aeabi_dadd+0x274>
 8000fd8:	003a      	movs	r2, r7
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	d100      	bne.n	8000fe0 <__aeabi_dadd+0x1cc>
 8000fde:	e105      	b.n	80011ec <__aeabi_dadd+0x3d8>
 8000fe0:	0022      	movs	r2, r4
 8000fe2:	3a01      	subs	r2, #1
 8000fe4:	2c01      	cmp	r4, #1
 8000fe6:	d100      	bne.n	8000fea <__aeabi_dadd+0x1d6>
 8000fe8:	e182      	b.n	80012f0 <__aeabi_dadd+0x4dc>
 8000fea:	4c64      	ldr	r4, [pc, #400]	; (800117c <__aeabi_dadd+0x368>)
 8000fec:	45a4      	cmp	ip, r4
 8000fee:	d05b      	beq.n	80010a8 <__aeabi_dadd+0x294>
 8000ff0:	4694      	mov	ip, r2
 8000ff2:	e741      	b.n	8000e78 <__aeabi_dadd+0x64>
 8000ff4:	4c63      	ldr	r4, [pc, #396]	; (8001184 <__aeabi_dadd+0x370>)
 8000ff6:	1c77      	adds	r7, r6, #1
 8000ff8:	4227      	tst	r7, r4
 8000ffa:	d000      	beq.n	8000ffe <__aeabi_dadd+0x1ea>
 8000ffc:	e0c4      	b.n	8001188 <__aeabi_dadd+0x374>
 8000ffe:	0004      	movs	r4, r0
 8001000:	431c      	orrs	r4, r3
 8001002:	2e00      	cmp	r6, #0
 8001004:	d000      	beq.n	8001008 <__aeabi_dadd+0x1f4>
 8001006:	e169      	b.n	80012dc <__aeabi_dadd+0x4c8>
 8001008:	2c00      	cmp	r4, #0
 800100a:	d100      	bne.n	800100e <__aeabi_dadd+0x1fa>
 800100c:	e1bf      	b.n	800138e <__aeabi_dadd+0x57a>
 800100e:	4644      	mov	r4, r8
 8001010:	430c      	orrs	r4, r1
 8001012:	d000      	beq.n	8001016 <__aeabi_dadd+0x202>
 8001014:	e1d0      	b.n	80013b8 <__aeabi_dadd+0x5a4>
 8001016:	0742      	lsls	r2, r0, #29
 8001018:	08db      	lsrs	r3, r3, #3
 800101a:	4313      	orrs	r3, r2
 800101c:	08c0      	lsrs	r0, r0, #3
 800101e:	e029      	b.n	8001074 <__aeabi_dadd+0x260>
 8001020:	003a      	movs	r2, r7
 8001022:	430a      	orrs	r2, r1
 8001024:	d100      	bne.n	8001028 <__aeabi_dadd+0x214>
 8001026:	e170      	b.n	800130a <__aeabi_dadd+0x4f6>
 8001028:	4662      	mov	r2, ip
 800102a:	4664      	mov	r4, ip
 800102c:	3a01      	subs	r2, #1
 800102e:	2c01      	cmp	r4, #1
 8001030:	d100      	bne.n	8001034 <__aeabi_dadd+0x220>
 8001032:	e0e0      	b.n	80011f6 <__aeabi_dadd+0x3e2>
 8001034:	4c51      	ldr	r4, [pc, #324]	; (800117c <__aeabi_dadd+0x368>)
 8001036:	45a4      	cmp	ip, r4
 8001038:	d100      	bne.n	800103c <__aeabi_dadd+0x228>
 800103a:	e161      	b.n	8001300 <__aeabi_dadd+0x4ec>
 800103c:	4694      	mov	ip, r2
 800103e:	e7b4      	b.n	8000faa <__aeabi_dadd+0x196>
 8001040:	003a      	movs	r2, r7
 8001042:	391f      	subs	r1, #31
 8001044:	40ca      	lsrs	r2, r1
 8001046:	0011      	movs	r1, r2
 8001048:	2b20      	cmp	r3, #32
 800104a:	d003      	beq.n	8001054 <__aeabi_dadd+0x240>
 800104c:	2240      	movs	r2, #64	; 0x40
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	409f      	lsls	r7, r3
 8001052:	433c      	orrs	r4, r7
 8001054:	1e63      	subs	r3, r4, #1
 8001056:	419c      	sbcs	r4, r3
 8001058:	2700      	movs	r7, #0
 800105a:	2600      	movs	r6, #0
 800105c:	430c      	orrs	r4, r1
 800105e:	0763      	lsls	r3, r4, #29
 8001060:	d000      	beq.n	8001064 <__aeabi_dadd+0x250>
 8001062:	e753      	b.n	8000f0c <__aeabi_dadd+0xf8>
 8001064:	46b4      	mov	ip, r6
 8001066:	08e4      	lsrs	r4, r4, #3
 8001068:	077b      	lsls	r3, r7, #29
 800106a:	4323      	orrs	r3, r4
 800106c:	08f8      	lsrs	r0, r7, #3
 800106e:	4a43      	ldr	r2, [pc, #268]	; (800117c <__aeabi_dadd+0x368>)
 8001070:	4594      	cmp	ip, r2
 8001072:	d01d      	beq.n	80010b0 <__aeabi_dadd+0x29c>
 8001074:	4662      	mov	r2, ip
 8001076:	0307      	lsls	r7, r0, #12
 8001078:	0552      	lsls	r2, r2, #21
 800107a:	0b3f      	lsrs	r7, r7, #12
 800107c:	0d52      	lsrs	r2, r2, #21
 800107e:	e760      	b.n	8000f42 <__aeabi_dadd+0x12e>
 8001080:	4644      	mov	r4, r8
 8001082:	430c      	orrs	r4, r1
 8001084:	1e62      	subs	r2, r4, #1
 8001086:	4194      	sbcs	r4, r2
 8001088:	18e4      	adds	r4, r4, r3
 800108a:	429c      	cmp	r4, r3
 800108c:	419b      	sbcs	r3, r3
 800108e:	425f      	negs	r7, r3
 8001090:	183f      	adds	r7, r7, r0
 8001092:	023b      	lsls	r3, r7, #8
 8001094:	d5e3      	bpl.n	800105e <__aeabi_dadd+0x24a>
 8001096:	4b39      	ldr	r3, [pc, #228]	; (800117c <__aeabi_dadd+0x368>)
 8001098:	3601      	adds	r6, #1
 800109a:	429e      	cmp	r6, r3
 800109c:	d000      	beq.n	80010a0 <__aeabi_dadd+0x28c>
 800109e:	e0b5      	b.n	800120c <__aeabi_dadd+0x3f8>
 80010a0:	0032      	movs	r2, r6
 80010a2:	2700      	movs	r7, #0
 80010a4:	2300      	movs	r3, #0
 80010a6:	e74c      	b.n	8000f42 <__aeabi_dadd+0x12e>
 80010a8:	0742      	lsls	r2, r0, #29
 80010aa:	08db      	lsrs	r3, r3, #3
 80010ac:	4313      	orrs	r3, r2
 80010ae:	08c0      	lsrs	r0, r0, #3
 80010b0:	001a      	movs	r2, r3
 80010b2:	4302      	orrs	r2, r0
 80010b4:	d100      	bne.n	80010b8 <__aeabi_dadd+0x2a4>
 80010b6:	e1e1      	b.n	800147c <__aeabi_dadd+0x668>
 80010b8:	2780      	movs	r7, #128	; 0x80
 80010ba:	033f      	lsls	r7, r7, #12
 80010bc:	4307      	orrs	r7, r0
 80010be:	033f      	lsls	r7, r7, #12
 80010c0:	4a2e      	ldr	r2, [pc, #184]	; (800117c <__aeabi_dadd+0x368>)
 80010c2:	0b3f      	lsrs	r7, r7, #12
 80010c4:	e73d      	b.n	8000f42 <__aeabi_dadd+0x12e>
 80010c6:	0020      	movs	r0, r4
 80010c8:	f001 fd34 	bl	8002b34 <__clzsi2>
 80010cc:	0001      	movs	r1, r0
 80010ce:	3118      	adds	r1, #24
 80010d0:	291f      	cmp	r1, #31
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_dadd+0x2c2>
 80010d4:	e6fc      	b.n	8000ed0 <__aeabi_dadd+0xbc>
 80010d6:	3808      	subs	r0, #8
 80010d8:	4084      	lsls	r4, r0
 80010da:	0027      	movs	r7, r4
 80010dc:	2400      	movs	r4, #0
 80010de:	42b1      	cmp	r1, r6
 80010e0:	db00      	blt.n	80010e4 <__aeabi_dadd+0x2d0>
 80010e2:	e6ff      	b.n	8000ee4 <__aeabi_dadd+0xd0>
 80010e4:	4a26      	ldr	r2, [pc, #152]	; (8001180 <__aeabi_dadd+0x36c>)
 80010e6:	1a76      	subs	r6, r6, r1
 80010e8:	4017      	ands	r7, r2
 80010ea:	e70d      	b.n	8000f08 <__aeabi_dadd+0xf4>
 80010ec:	2a00      	cmp	r2, #0
 80010ee:	d02f      	beq.n	8001150 <__aeabi_dadd+0x33c>
 80010f0:	464a      	mov	r2, r9
 80010f2:	1b92      	subs	r2, r2, r6
 80010f4:	4694      	mov	ip, r2
 80010f6:	2e00      	cmp	r6, #0
 80010f8:	d100      	bne.n	80010fc <__aeabi_dadd+0x2e8>
 80010fa:	e0ad      	b.n	8001258 <__aeabi_dadd+0x444>
 80010fc:	4a1f      	ldr	r2, [pc, #124]	; (800117c <__aeabi_dadd+0x368>)
 80010fe:	4591      	cmp	r9, r2
 8001100:	d100      	bne.n	8001104 <__aeabi_dadd+0x2f0>
 8001102:	e10f      	b.n	8001324 <__aeabi_dadd+0x510>
 8001104:	2280      	movs	r2, #128	; 0x80
 8001106:	0412      	lsls	r2, r2, #16
 8001108:	4310      	orrs	r0, r2
 800110a:	4662      	mov	r2, ip
 800110c:	2a38      	cmp	r2, #56	; 0x38
 800110e:	dd00      	ble.n	8001112 <__aeabi_dadd+0x2fe>
 8001110:	e10f      	b.n	8001332 <__aeabi_dadd+0x51e>
 8001112:	2a1f      	cmp	r2, #31
 8001114:	dd00      	ble.n	8001118 <__aeabi_dadd+0x304>
 8001116:	e180      	b.n	800141a <__aeabi_dadd+0x606>
 8001118:	4664      	mov	r4, ip
 800111a:	2220      	movs	r2, #32
 800111c:	001e      	movs	r6, r3
 800111e:	1b12      	subs	r2, r2, r4
 8001120:	4667      	mov	r7, ip
 8001122:	0004      	movs	r4, r0
 8001124:	4093      	lsls	r3, r2
 8001126:	4094      	lsls	r4, r2
 8001128:	40fe      	lsrs	r6, r7
 800112a:	1e5a      	subs	r2, r3, #1
 800112c:	4193      	sbcs	r3, r2
 800112e:	40f8      	lsrs	r0, r7
 8001130:	4334      	orrs	r4, r6
 8001132:	431c      	orrs	r4, r3
 8001134:	4480      	add	r8, r0
 8001136:	1864      	adds	r4, r4, r1
 8001138:	428c      	cmp	r4, r1
 800113a:	41bf      	sbcs	r7, r7
 800113c:	427f      	negs	r7, r7
 800113e:	464e      	mov	r6, r9
 8001140:	4447      	add	r7, r8
 8001142:	e7a6      	b.n	8001092 <__aeabi_dadd+0x27e>
 8001144:	4642      	mov	r2, r8
 8001146:	430a      	orrs	r2, r1
 8001148:	0011      	movs	r1, r2
 800114a:	1e4a      	subs	r2, r1, #1
 800114c:	4191      	sbcs	r1, r2
 800114e:	e6ad      	b.n	8000eac <__aeabi_dadd+0x98>
 8001150:	4c0c      	ldr	r4, [pc, #48]	; (8001184 <__aeabi_dadd+0x370>)
 8001152:	1c72      	adds	r2, r6, #1
 8001154:	4222      	tst	r2, r4
 8001156:	d000      	beq.n	800115a <__aeabi_dadd+0x346>
 8001158:	e0a1      	b.n	800129e <__aeabi_dadd+0x48a>
 800115a:	0002      	movs	r2, r0
 800115c:	431a      	orrs	r2, r3
 800115e:	2e00      	cmp	r6, #0
 8001160:	d000      	beq.n	8001164 <__aeabi_dadd+0x350>
 8001162:	e0fa      	b.n	800135a <__aeabi_dadd+0x546>
 8001164:	2a00      	cmp	r2, #0
 8001166:	d100      	bne.n	800116a <__aeabi_dadd+0x356>
 8001168:	e145      	b.n	80013f6 <__aeabi_dadd+0x5e2>
 800116a:	003a      	movs	r2, r7
 800116c:	430a      	orrs	r2, r1
 800116e:	d000      	beq.n	8001172 <__aeabi_dadd+0x35e>
 8001170:	e146      	b.n	8001400 <__aeabi_dadd+0x5ec>
 8001172:	0742      	lsls	r2, r0, #29
 8001174:	08db      	lsrs	r3, r3, #3
 8001176:	4313      	orrs	r3, r2
 8001178:	08c0      	lsrs	r0, r0, #3
 800117a:	e77b      	b.n	8001074 <__aeabi_dadd+0x260>
 800117c:	000007ff 	.word	0x000007ff
 8001180:	ff7fffff 	.word	0xff7fffff
 8001184:	000007fe 	.word	0x000007fe
 8001188:	4647      	mov	r7, r8
 800118a:	1a5c      	subs	r4, r3, r1
 800118c:	1bc2      	subs	r2, r0, r7
 800118e:	42a3      	cmp	r3, r4
 8001190:	41bf      	sbcs	r7, r7
 8001192:	427f      	negs	r7, r7
 8001194:	46b9      	mov	r9, r7
 8001196:	0017      	movs	r7, r2
 8001198:	464a      	mov	r2, r9
 800119a:	1abf      	subs	r7, r7, r2
 800119c:	023a      	lsls	r2, r7, #8
 800119e:	d500      	bpl.n	80011a2 <__aeabi_dadd+0x38e>
 80011a0:	e08d      	b.n	80012be <__aeabi_dadd+0x4aa>
 80011a2:	0023      	movs	r3, r4
 80011a4:	433b      	orrs	r3, r7
 80011a6:	d000      	beq.n	80011aa <__aeabi_dadd+0x396>
 80011a8:	e68a      	b.n	8000ec0 <__aeabi_dadd+0xac>
 80011aa:	2000      	movs	r0, #0
 80011ac:	2500      	movs	r5, #0
 80011ae:	e761      	b.n	8001074 <__aeabi_dadd+0x260>
 80011b0:	4cb4      	ldr	r4, [pc, #720]	; (8001484 <__aeabi_dadd+0x670>)
 80011b2:	45a1      	cmp	r9, r4
 80011b4:	d100      	bne.n	80011b8 <__aeabi_dadd+0x3a4>
 80011b6:	e0ad      	b.n	8001314 <__aeabi_dadd+0x500>
 80011b8:	2480      	movs	r4, #128	; 0x80
 80011ba:	0424      	lsls	r4, r4, #16
 80011bc:	4320      	orrs	r0, r4
 80011be:	4664      	mov	r4, ip
 80011c0:	2c38      	cmp	r4, #56	; 0x38
 80011c2:	dc3d      	bgt.n	8001240 <__aeabi_dadd+0x42c>
 80011c4:	4662      	mov	r2, ip
 80011c6:	2c1f      	cmp	r4, #31
 80011c8:	dd00      	ble.n	80011cc <__aeabi_dadd+0x3b8>
 80011ca:	e0b7      	b.n	800133c <__aeabi_dadd+0x528>
 80011cc:	2520      	movs	r5, #32
 80011ce:	001e      	movs	r6, r3
 80011d0:	1b2d      	subs	r5, r5, r4
 80011d2:	0004      	movs	r4, r0
 80011d4:	40ab      	lsls	r3, r5
 80011d6:	40ac      	lsls	r4, r5
 80011d8:	40d6      	lsrs	r6, r2
 80011da:	40d0      	lsrs	r0, r2
 80011dc:	4642      	mov	r2, r8
 80011de:	1e5d      	subs	r5, r3, #1
 80011e0:	41ab      	sbcs	r3, r5
 80011e2:	4334      	orrs	r4, r6
 80011e4:	1a12      	subs	r2, r2, r0
 80011e6:	4690      	mov	r8, r2
 80011e8:	4323      	orrs	r3, r4
 80011ea:	e02c      	b.n	8001246 <__aeabi_dadd+0x432>
 80011ec:	0742      	lsls	r2, r0, #29
 80011ee:	08db      	lsrs	r3, r3, #3
 80011f0:	4313      	orrs	r3, r2
 80011f2:	08c0      	lsrs	r0, r0, #3
 80011f4:	e73b      	b.n	800106e <__aeabi_dadd+0x25a>
 80011f6:	185c      	adds	r4, r3, r1
 80011f8:	429c      	cmp	r4, r3
 80011fa:	419b      	sbcs	r3, r3
 80011fc:	4440      	add	r0, r8
 80011fe:	425b      	negs	r3, r3
 8001200:	18c7      	adds	r7, r0, r3
 8001202:	2601      	movs	r6, #1
 8001204:	023b      	lsls	r3, r7, #8
 8001206:	d400      	bmi.n	800120a <__aeabi_dadd+0x3f6>
 8001208:	e729      	b.n	800105e <__aeabi_dadd+0x24a>
 800120a:	2602      	movs	r6, #2
 800120c:	4a9e      	ldr	r2, [pc, #632]	; (8001488 <__aeabi_dadd+0x674>)
 800120e:	0863      	lsrs	r3, r4, #1
 8001210:	4017      	ands	r7, r2
 8001212:	2201      	movs	r2, #1
 8001214:	4014      	ands	r4, r2
 8001216:	431c      	orrs	r4, r3
 8001218:	07fb      	lsls	r3, r7, #31
 800121a:	431c      	orrs	r4, r3
 800121c:	087f      	lsrs	r7, r7, #1
 800121e:	e673      	b.n	8000f08 <__aeabi_dadd+0xf4>
 8001220:	4644      	mov	r4, r8
 8001222:	3a20      	subs	r2, #32
 8001224:	40d4      	lsrs	r4, r2
 8001226:	4662      	mov	r2, ip
 8001228:	2a20      	cmp	r2, #32
 800122a:	d005      	beq.n	8001238 <__aeabi_dadd+0x424>
 800122c:	4667      	mov	r7, ip
 800122e:	2240      	movs	r2, #64	; 0x40
 8001230:	1bd2      	subs	r2, r2, r7
 8001232:	4647      	mov	r7, r8
 8001234:	4097      	lsls	r7, r2
 8001236:	4339      	orrs	r1, r7
 8001238:	1e4a      	subs	r2, r1, #1
 800123a:	4191      	sbcs	r1, r2
 800123c:	4321      	orrs	r1, r4
 800123e:	e635      	b.n	8000eac <__aeabi_dadd+0x98>
 8001240:	4303      	orrs	r3, r0
 8001242:	1e58      	subs	r0, r3, #1
 8001244:	4183      	sbcs	r3, r0
 8001246:	1acc      	subs	r4, r1, r3
 8001248:	42a1      	cmp	r1, r4
 800124a:	41bf      	sbcs	r7, r7
 800124c:	4643      	mov	r3, r8
 800124e:	427f      	negs	r7, r7
 8001250:	4655      	mov	r5, sl
 8001252:	464e      	mov	r6, r9
 8001254:	1bdf      	subs	r7, r3, r7
 8001256:	e62e      	b.n	8000eb6 <__aeabi_dadd+0xa2>
 8001258:	0002      	movs	r2, r0
 800125a:	431a      	orrs	r2, r3
 800125c:	d100      	bne.n	8001260 <__aeabi_dadd+0x44c>
 800125e:	e0bd      	b.n	80013dc <__aeabi_dadd+0x5c8>
 8001260:	4662      	mov	r2, ip
 8001262:	4664      	mov	r4, ip
 8001264:	3a01      	subs	r2, #1
 8001266:	2c01      	cmp	r4, #1
 8001268:	d100      	bne.n	800126c <__aeabi_dadd+0x458>
 800126a:	e0e5      	b.n	8001438 <__aeabi_dadd+0x624>
 800126c:	4c85      	ldr	r4, [pc, #532]	; (8001484 <__aeabi_dadd+0x670>)
 800126e:	45a4      	cmp	ip, r4
 8001270:	d058      	beq.n	8001324 <__aeabi_dadd+0x510>
 8001272:	4694      	mov	ip, r2
 8001274:	e749      	b.n	800110a <__aeabi_dadd+0x2f6>
 8001276:	4664      	mov	r4, ip
 8001278:	2220      	movs	r2, #32
 800127a:	1b12      	subs	r2, r2, r4
 800127c:	4644      	mov	r4, r8
 800127e:	4094      	lsls	r4, r2
 8001280:	000f      	movs	r7, r1
 8001282:	46a1      	mov	r9, r4
 8001284:	4664      	mov	r4, ip
 8001286:	4091      	lsls	r1, r2
 8001288:	40e7      	lsrs	r7, r4
 800128a:	464c      	mov	r4, r9
 800128c:	1e4a      	subs	r2, r1, #1
 800128e:	4191      	sbcs	r1, r2
 8001290:	433c      	orrs	r4, r7
 8001292:	4642      	mov	r2, r8
 8001294:	430c      	orrs	r4, r1
 8001296:	4661      	mov	r1, ip
 8001298:	40ca      	lsrs	r2, r1
 800129a:	1880      	adds	r0, r0, r2
 800129c:	e6f4      	b.n	8001088 <__aeabi_dadd+0x274>
 800129e:	4c79      	ldr	r4, [pc, #484]	; (8001484 <__aeabi_dadd+0x670>)
 80012a0:	42a2      	cmp	r2, r4
 80012a2:	d100      	bne.n	80012a6 <__aeabi_dadd+0x492>
 80012a4:	e6fd      	b.n	80010a2 <__aeabi_dadd+0x28e>
 80012a6:	1859      	adds	r1, r3, r1
 80012a8:	4299      	cmp	r1, r3
 80012aa:	419b      	sbcs	r3, r3
 80012ac:	4440      	add	r0, r8
 80012ae:	425f      	negs	r7, r3
 80012b0:	19c7      	adds	r7, r0, r7
 80012b2:	07fc      	lsls	r4, r7, #31
 80012b4:	0849      	lsrs	r1, r1, #1
 80012b6:	0016      	movs	r6, r2
 80012b8:	430c      	orrs	r4, r1
 80012ba:	087f      	lsrs	r7, r7, #1
 80012bc:	e6cf      	b.n	800105e <__aeabi_dadd+0x24a>
 80012be:	1acc      	subs	r4, r1, r3
 80012c0:	42a1      	cmp	r1, r4
 80012c2:	41bf      	sbcs	r7, r7
 80012c4:	4643      	mov	r3, r8
 80012c6:	427f      	negs	r7, r7
 80012c8:	1a18      	subs	r0, r3, r0
 80012ca:	4655      	mov	r5, sl
 80012cc:	1bc7      	subs	r7, r0, r7
 80012ce:	e5f7      	b.n	8000ec0 <__aeabi_dadd+0xac>
 80012d0:	08c9      	lsrs	r1, r1, #3
 80012d2:	077b      	lsls	r3, r7, #29
 80012d4:	4655      	mov	r5, sl
 80012d6:	430b      	orrs	r3, r1
 80012d8:	08f8      	lsrs	r0, r7, #3
 80012da:	e6c8      	b.n	800106e <__aeabi_dadd+0x25a>
 80012dc:	2c00      	cmp	r4, #0
 80012de:	d000      	beq.n	80012e2 <__aeabi_dadd+0x4ce>
 80012e0:	e081      	b.n	80013e6 <__aeabi_dadd+0x5d2>
 80012e2:	4643      	mov	r3, r8
 80012e4:	430b      	orrs	r3, r1
 80012e6:	d115      	bne.n	8001314 <__aeabi_dadd+0x500>
 80012e8:	2080      	movs	r0, #128	; 0x80
 80012ea:	2500      	movs	r5, #0
 80012ec:	0300      	lsls	r0, r0, #12
 80012ee:	e6e3      	b.n	80010b8 <__aeabi_dadd+0x2a4>
 80012f0:	1a5c      	subs	r4, r3, r1
 80012f2:	42a3      	cmp	r3, r4
 80012f4:	419b      	sbcs	r3, r3
 80012f6:	1bc7      	subs	r7, r0, r7
 80012f8:	425b      	negs	r3, r3
 80012fa:	2601      	movs	r6, #1
 80012fc:	1aff      	subs	r7, r7, r3
 80012fe:	e5da      	b.n	8000eb6 <__aeabi_dadd+0xa2>
 8001300:	0742      	lsls	r2, r0, #29
 8001302:	08db      	lsrs	r3, r3, #3
 8001304:	4313      	orrs	r3, r2
 8001306:	08c0      	lsrs	r0, r0, #3
 8001308:	e6d2      	b.n	80010b0 <__aeabi_dadd+0x29c>
 800130a:	0742      	lsls	r2, r0, #29
 800130c:	08db      	lsrs	r3, r3, #3
 800130e:	4313      	orrs	r3, r2
 8001310:	08c0      	lsrs	r0, r0, #3
 8001312:	e6ac      	b.n	800106e <__aeabi_dadd+0x25a>
 8001314:	4643      	mov	r3, r8
 8001316:	4642      	mov	r2, r8
 8001318:	08c9      	lsrs	r1, r1, #3
 800131a:	075b      	lsls	r3, r3, #29
 800131c:	4655      	mov	r5, sl
 800131e:	430b      	orrs	r3, r1
 8001320:	08d0      	lsrs	r0, r2, #3
 8001322:	e6c5      	b.n	80010b0 <__aeabi_dadd+0x29c>
 8001324:	4643      	mov	r3, r8
 8001326:	4642      	mov	r2, r8
 8001328:	075b      	lsls	r3, r3, #29
 800132a:	08c9      	lsrs	r1, r1, #3
 800132c:	430b      	orrs	r3, r1
 800132e:	08d0      	lsrs	r0, r2, #3
 8001330:	e6be      	b.n	80010b0 <__aeabi_dadd+0x29c>
 8001332:	4303      	orrs	r3, r0
 8001334:	001c      	movs	r4, r3
 8001336:	1e63      	subs	r3, r4, #1
 8001338:	419c      	sbcs	r4, r3
 800133a:	e6fc      	b.n	8001136 <__aeabi_dadd+0x322>
 800133c:	0002      	movs	r2, r0
 800133e:	3c20      	subs	r4, #32
 8001340:	40e2      	lsrs	r2, r4
 8001342:	0014      	movs	r4, r2
 8001344:	4662      	mov	r2, ip
 8001346:	2a20      	cmp	r2, #32
 8001348:	d003      	beq.n	8001352 <__aeabi_dadd+0x53e>
 800134a:	2540      	movs	r5, #64	; 0x40
 800134c:	1aad      	subs	r5, r5, r2
 800134e:	40a8      	lsls	r0, r5
 8001350:	4303      	orrs	r3, r0
 8001352:	1e58      	subs	r0, r3, #1
 8001354:	4183      	sbcs	r3, r0
 8001356:	4323      	orrs	r3, r4
 8001358:	e775      	b.n	8001246 <__aeabi_dadd+0x432>
 800135a:	2a00      	cmp	r2, #0
 800135c:	d0e2      	beq.n	8001324 <__aeabi_dadd+0x510>
 800135e:	003a      	movs	r2, r7
 8001360:	430a      	orrs	r2, r1
 8001362:	d0cd      	beq.n	8001300 <__aeabi_dadd+0x4ec>
 8001364:	0742      	lsls	r2, r0, #29
 8001366:	08db      	lsrs	r3, r3, #3
 8001368:	4313      	orrs	r3, r2
 800136a:	2280      	movs	r2, #128	; 0x80
 800136c:	08c0      	lsrs	r0, r0, #3
 800136e:	0312      	lsls	r2, r2, #12
 8001370:	4210      	tst	r0, r2
 8001372:	d006      	beq.n	8001382 <__aeabi_dadd+0x56e>
 8001374:	08fc      	lsrs	r4, r7, #3
 8001376:	4214      	tst	r4, r2
 8001378:	d103      	bne.n	8001382 <__aeabi_dadd+0x56e>
 800137a:	0020      	movs	r0, r4
 800137c:	08cb      	lsrs	r3, r1, #3
 800137e:	077a      	lsls	r2, r7, #29
 8001380:	4313      	orrs	r3, r2
 8001382:	0f5a      	lsrs	r2, r3, #29
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	0752      	lsls	r2, r2, #29
 8001388:	08db      	lsrs	r3, r3, #3
 800138a:	4313      	orrs	r3, r2
 800138c:	e690      	b.n	80010b0 <__aeabi_dadd+0x29c>
 800138e:	4643      	mov	r3, r8
 8001390:	430b      	orrs	r3, r1
 8001392:	d100      	bne.n	8001396 <__aeabi_dadd+0x582>
 8001394:	e709      	b.n	80011aa <__aeabi_dadd+0x396>
 8001396:	4643      	mov	r3, r8
 8001398:	4642      	mov	r2, r8
 800139a:	08c9      	lsrs	r1, r1, #3
 800139c:	075b      	lsls	r3, r3, #29
 800139e:	4655      	mov	r5, sl
 80013a0:	430b      	orrs	r3, r1
 80013a2:	08d0      	lsrs	r0, r2, #3
 80013a4:	e666      	b.n	8001074 <__aeabi_dadd+0x260>
 80013a6:	1acc      	subs	r4, r1, r3
 80013a8:	42a1      	cmp	r1, r4
 80013aa:	4189      	sbcs	r1, r1
 80013ac:	1a3f      	subs	r7, r7, r0
 80013ae:	4249      	negs	r1, r1
 80013b0:	4655      	mov	r5, sl
 80013b2:	2601      	movs	r6, #1
 80013b4:	1a7f      	subs	r7, r7, r1
 80013b6:	e57e      	b.n	8000eb6 <__aeabi_dadd+0xa2>
 80013b8:	4642      	mov	r2, r8
 80013ba:	1a5c      	subs	r4, r3, r1
 80013bc:	1a87      	subs	r7, r0, r2
 80013be:	42a3      	cmp	r3, r4
 80013c0:	4192      	sbcs	r2, r2
 80013c2:	4252      	negs	r2, r2
 80013c4:	1abf      	subs	r7, r7, r2
 80013c6:	023a      	lsls	r2, r7, #8
 80013c8:	d53d      	bpl.n	8001446 <__aeabi_dadd+0x632>
 80013ca:	1acc      	subs	r4, r1, r3
 80013cc:	42a1      	cmp	r1, r4
 80013ce:	4189      	sbcs	r1, r1
 80013d0:	4643      	mov	r3, r8
 80013d2:	4249      	negs	r1, r1
 80013d4:	1a1f      	subs	r7, r3, r0
 80013d6:	4655      	mov	r5, sl
 80013d8:	1a7f      	subs	r7, r7, r1
 80013da:	e595      	b.n	8000f08 <__aeabi_dadd+0xf4>
 80013dc:	077b      	lsls	r3, r7, #29
 80013de:	08c9      	lsrs	r1, r1, #3
 80013e0:	430b      	orrs	r3, r1
 80013e2:	08f8      	lsrs	r0, r7, #3
 80013e4:	e643      	b.n	800106e <__aeabi_dadd+0x25a>
 80013e6:	4644      	mov	r4, r8
 80013e8:	08db      	lsrs	r3, r3, #3
 80013ea:	430c      	orrs	r4, r1
 80013ec:	d130      	bne.n	8001450 <__aeabi_dadd+0x63c>
 80013ee:	0742      	lsls	r2, r0, #29
 80013f0:	4313      	orrs	r3, r2
 80013f2:	08c0      	lsrs	r0, r0, #3
 80013f4:	e65c      	b.n	80010b0 <__aeabi_dadd+0x29c>
 80013f6:	077b      	lsls	r3, r7, #29
 80013f8:	08c9      	lsrs	r1, r1, #3
 80013fa:	430b      	orrs	r3, r1
 80013fc:	08f8      	lsrs	r0, r7, #3
 80013fe:	e639      	b.n	8001074 <__aeabi_dadd+0x260>
 8001400:	185c      	adds	r4, r3, r1
 8001402:	429c      	cmp	r4, r3
 8001404:	419b      	sbcs	r3, r3
 8001406:	4440      	add	r0, r8
 8001408:	425b      	negs	r3, r3
 800140a:	18c7      	adds	r7, r0, r3
 800140c:	023b      	lsls	r3, r7, #8
 800140e:	d400      	bmi.n	8001412 <__aeabi_dadd+0x5fe>
 8001410:	e625      	b.n	800105e <__aeabi_dadd+0x24a>
 8001412:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <__aeabi_dadd+0x674>)
 8001414:	2601      	movs	r6, #1
 8001416:	401f      	ands	r7, r3
 8001418:	e621      	b.n	800105e <__aeabi_dadd+0x24a>
 800141a:	0004      	movs	r4, r0
 800141c:	3a20      	subs	r2, #32
 800141e:	40d4      	lsrs	r4, r2
 8001420:	4662      	mov	r2, ip
 8001422:	2a20      	cmp	r2, #32
 8001424:	d004      	beq.n	8001430 <__aeabi_dadd+0x61c>
 8001426:	2240      	movs	r2, #64	; 0x40
 8001428:	4666      	mov	r6, ip
 800142a:	1b92      	subs	r2, r2, r6
 800142c:	4090      	lsls	r0, r2
 800142e:	4303      	orrs	r3, r0
 8001430:	1e5a      	subs	r2, r3, #1
 8001432:	4193      	sbcs	r3, r2
 8001434:	431c      	orrs	r4, r3
 8001436:	e67e      	b.n	8001136 <__aeabi_dadd+0x322>
 8001438:	185c      	adds	r4, r3, r1
 800143a:	428c      	cmp	r4, r1
 800143c:	4189      	sbcs	r1, r1
 800143e:	4440      	add	r0, r8
 8001440:	4249      	negs	r1, r1
 8001442:	1847      	adds	r7, r0, r1
 8001444:	e6dd      	b.n	8001202 <__aeabi_dadd+0x3ee>
 8001446:	0023      	movs	r3, r4
 8001448:	433b      	orrs	r3, r7
 800144a:	d100      	bne.n	800144e <__aeabi_dadd+0x63a>
 800144c:	e6ad      	b.n	80011aa <__aeabi_dadd+0x396>
 800144e:	e606      	b.n	800105e <__aeabi_dadd+0x24a>
 8001450:	0744      	lsls	r4, r0, #29
 8001452:	4323      	orrs	r3, r4
 8001454:	2480      	movs	r4, #128	; 0x80
 8001456:	08c0      	lsrs	r0, r0, #3
 8001458:	0324      	lsls	r4, r4, #12
 800145a:	4220      	tst	r0, r4
 800145c:	d008      	beq.n	8001470 <__aeabi_dadd+0x65c>
 800145e:	4642      	mov	r2, r8
 8001460:	08d6      	lsrs	r6, r2, #3
 8001462:	4226      	tst	r6, r4
 8001464:	d104      	bne.n	8001470 <__aeabi_dadd+0x65c>
 8001466:	4655      	mov	r5, sl
 8001468:	0030      	movs	r0, r6
 800146a:	08cb      	lsrs	r3, r1, #3
 800146c:	0751      	lsls	r1, r2, #29
 800146e:	430b      	orrs	r3, r1
 8001470:	0f5a      	lsrs	r2, r3, #29
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	08db      	lsrs	r3, r3, #3
 8001476:	0752      	lsls	r2, r2, #29
 8001478:	4313      	orrs	r3, r2
 800147a:	e619      	b.n	80010b0 <__aeabi_dadd+0x29c>
 800147c:	2300      	movs	r3, #0
 800147e:	4a01      	ldr	r2, [pc, #4]	; (8001484 <__aeabi_dadd+0x670>)
 8001480:	001f      	movs	r7, r3
 8001482:	e55e      	b.n	8000f42 <__aeabi_dadd+0x12e>
 8001484:	000007ff 	.word	0x000007ff
 8001488:	ff7fffff 	.word	0xff7fffff

0800148c <__aeabi_ddiv>:
 800148c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800148e:	4657      	mov	r7, sl
 8001490:	464e      	mov	r6, r9
 8001492:	4645      	mov	r5, r8
 8001494:	46de      	mov	lr, fp
 8001496:	b5e0      	push	{r5, r6, r7, lr}
 8001498:	4681      	mov	r9, r0
 800149a:	0005      	movs	r5, r0
 800149c:	030c      	lsls	r4, r1, #12
 800149e:	0048      	lsls	r0, r1, #1
 80014a0:	4692      	mov	sl, r2
 80014a2:	001f      	movs	r7, r3
 80014a4:	b085      	sub	sp, #20
 80014a6:	0b24      	lsrs	r4, r4, #12
 80014a8:	0d40      	lsrs	r0, r0, #21
 80014aa:	0fce      	lsrs	r6, r1, #31
 80014ac:	2800      	cmp	r0, #0
 80014ae:	d100      	bne.n	80014b2 <__aeabi_ddiv+0x26>
 80014b0:	e156      	b.n	8001760 <__aeabi_ddiv+0x2d4>
 80014b2:	4bd4      	ldr	r3, [pc, #848]	; (8001804 <__aeabi_ddiv+0x378>)
 80014b4:	4298      	cmp	r0, r3
 80014b6:	d100      	bne.n	80014ba <__aeabi_ddiv+0x2e>
 80014b8:	e172      	b.n	80017a0 <__aeabi_ddiv+0x314>
 80014ba:	0f6b      	lsrs	r3, r5, #29
 80014bc:	00e4      	lsls	r4, r4, #3
 80014be:	431c      	orrs	r4, r3
 80014c0:	2380      	movs	r3, #128	; 0x80
 80014c2:	041b      	lsls	r3, r3, #16
 80014c4:	4323      	orrs	r3, r4
 80014c6:	4698      	mov	r8, r3
 80014c8:	4bcf      	ldr	r3, [pc, #828]	; (8001808 <__aeabi_ddiv+0x37c>)
 80014ca:	00ed      	lsls	r5, r5, #3
 80014cc:	469b      	mov	fp, r3
 80014ce:	2300      	movs	r3, #0
 80014d0:	4699      	mov	r9, r3
 80014d2:	4483      	add	fp, r0
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	033c      	lsls	r4, r7, #12
 80014d8:	007b      	lsls	r3, r7, #1
 80014da:	4650      	mov	r0, sl
 80014dc:	0b24      	lsrs	r4, r4, #12
 80014de:	0d5b      	lsrs	r3, r3, #21
 80014e0:	0fff      	lsrs	r7, r7, #31
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d100      	bne.n	80014e8 <__aeabi_ddiv+0x5c>
 80014e6:	e11f      	b.n	8001728 <__aeabi_ddiv+0x29c>
 80014e8:	4ac6      	ldr	r2, [pc, #792]	; (8001804 <__aeabi_ddiv+0x378>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d100      	bne.n	80014f0 <__aeabi_ddiv+0x64>
 80014ee:	e162      	b.n	80017b6 <__aeabi_ddiv+0x32a>
 80014f0:	49c5      	ldr	r1, [pc, #788]	; (8001808 <__aeabi_ddiv+0x37c>)
 80014f2:	0f42      	lsrs	r2, r0, #29
 80014f4:	468c      	mov	ip, r1
 80014f6:	00e4      	lsls	r4, r4, #3
 80014f8:	4659      	mov	r1, fp
 80014fa:	4314      	orrs	r4, r2
 80014fc:	2280      	movs	r2, #128	; 0x80
 80014fe:	4463      	add	r3, ip
 8001500:	0412      	lsls	r2, r2, #16
 8001502:	1acb      	subs	r3, r1, r3
 8001504:	4314      	orrs	r4, r2
 8001506:	469b      	mov	fp, r3
 8001508:	00c2      	lsls	r2, r0, #3
 800150a:	2000      	movs	r0, #0
 800150c:	0033      	movs	r3, r6
 800150e:	407b      	eors	r3, r7
 8001510:	469a      	mov	sl, r3
 8001512:	464b      	mov	r3, r9
 8001514:	2b0f      	cmp	r3, #15
 8001516:	d827      	bhi.n	8001568 <__aeabi_ddiv+0xdc>
 8001518:	49bc      	ldr	r1, [pc, #752]	; (800180c <__aeabi_ddiv+0x380>)
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	58cb      	ldr	r3, [r1, r3]
 800151e:	469f      	mov	pc, r3
 8001520:	46b2      	mov	sl, r6
 8001522:	9b00      	ldr	r3, [sp, #0]
 8001524:	2b02      	cmp	r3, #2
 8001526:	d016      	beq.n	8001556 <__aeabi_ddiv+0xca>
 8001528:	2b03      	cmp	r3, #3
 800152a:	d100      	bne.n	800152e <__aeabi_ddiv+0xa2>
 800152c:	e28e      	b.n	8001a4c <__aeabi_ddiv+0x5c0>
 800152e:	2b01      	cmp	r3, #1
 8001530:	d000      	beq.n	8001534 <__aeabi_ddiv+0xa8>
 8001532:	e0d9      	b.n	80016e8 <__aeabi_ddiv+0x25c>
 8001534:	2300      	movs	r3, #0
 8001536:	2400      	movs	r4, #0
 8001538:	2500      	movs	r5, #0
 800153a:	4652      	mov	r2, sl
 800153c:	051b      	lsls	r3, r3, #20
 800153e:	4323      	orrs	r3, r4
 8001540:	07d2      	lsls	r2, r2, #31
 8001542:	4313      	orrs	r3, r2
 8001544:	0028      	movs	r0, r5
 8001546:	0019      	movs	r1, r3
 8001548:	b005      	add	sp, #20
 800154a:	bcf0      	pop	{r4, r5, r6, r7}
 800154c:	46bb      	mov	fp, r7
 800154e:	46b2      	mov	sl, r6
 8001550:	46a9      	mov	r9, r5
 8001552:	46a0      	mov	r8, r4
 8001554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001556:	2400      	movs	r4, #0
 8001558:	2500      	movs	r5, #0
 800155a:	4baa      	ldr	r3, [pc, #680]	; (8001804 <__aeabi_ddiv+0x378>)
 800155c:	e7ed      	b.n	800153a <__aeabi_ddiv+0xae>
 800155e:	46ba      	mov	sl, r7
 8001560:	46a0      	mov	r8, r4
 8001562:	0015      	movs	r5, r2
 8001564:	9000      	str	r0, [sp, #0]
 8001566:	e7dc      	b.n	8001522 <__aeabi_ddiv+0x96>
 8001568:	4544      	cmp	r4, r8
 800156a:	d200      	bcs.n	800156e <__aeabi_ddiv+0xe2>
 800156c:	e1c7      	b.n	80018fe <__aeabi_ddiv+0x472>
 800156e:	d100      	bne.n	8001572 <__aeabi_ddiv+0xe6>
 8001570:	e1c2      	b.n	80018f8 <__aeabi_ddiv+0x46c>
 8001572:	2301      	movs	r3, #1
 8001574:	425b      	negs	r3, r3
 8001576:	469c      	mov	ip, r3
 8001578:	002e      	movs	r6, r5
 800157a:	4640      	mov	r0, r8
 800157c:	2500      	movs	r5, #0
 800157e:	44e3      	add	fp, ip
 8001580:	0223      	lsls	r3, r4, #8
 8001582:	0e14      	lsrs	r4, r2, #24
 8001584:	431c      	orrs	r4, r3
 8001586:	0c1b      	lsrs	r3, r3, #16
 8001588:	4699      	mov	r9, r3
 800158a:	0423      	lsls	r3, r4, #16
 800158c:	0c1f      	lsrs	r7, r3, #16
 800158e:	0212      	lsls	r2, r2, #8
 8001590:	4649      	mov	r1, r9
 8001592:	9200      	str	r2, [sp, #0]
 8001594:	9701      	str	r7, [sp, #4]
 8001596:	f7fe fe3d 	bl	8000214 <__aeabi_uidivmod>
 800159a:	0002      	movs	r2, r0
 800159c:	437a      	muls	r2, r7
 800159e:	040b      	lsls	r3, r1, #16
 80015a0:	0c31      	lsrs	r1, r6, #16
 80015a2:	4680      	mov	r8, r0
 80015a4:	4319      	orrs	r1, r3
 80015a6:	428a      	cmp	r2, r1
 80015a8:	d907      	bls.n	80015ba <__aeabi_ddiv+0x12e>
 80015aa:	2301      	movs	r3, #1
 80015ac:	425b      	negs	r3, r3
 80015ae:	469c      	mov	ip, r3
 80015b0:	1909      	adds	r1, r1, r4
 80015b2:	44e0      	add	r8, ip
 80015b4:	428c      	cmp	r4, r1
 80015b6:	d800      	bhi.n	80015ba <__aeabi_ddiv+0x12e>
 80015b8:	e207      	b.n	80019ca <__aeabi_ddiv+0x53e>
 80015ba:	1a88      	subs	r0, r1, r2
 80015bc:	4649      	mov	r1, r9
 80015be:	f7fe fe29 	bl	8000214 <__aeabi_uidivmod>
 80015c2:	0409      	lsls	r1, r1, #16
 80015c4:	468c      	mov	ip, r1
 80015c6:	0431      	lsls	r1, r6, #16
 80015c8:	4666      	mov	r6, ip
 80015ca:	9a01      	ldr	r2, [sp, #4]
 80015cc:	0c09      	lsrs	r1, r1, #16
 80015ce:	4342      	muls	r2, r0
 80015d0:	0003      	movs	r3, r0
 80015d2:	4331      	orrs	r1, r6
 80015d4:	428a      	cmp	r2, r1
 80015d6:	d904      	bls.n	80015e2 <__aeabi_ddiv+0x156>
 80015d8:	1909      	adds	r1, r1, r4
 80015da:	3b01      	subs	r3, #1
 80015dc:	428c      	cmp	r4, r1
 80015de:	d800      	bhi.n	80015e2 <__aeabi_ddiv+0x156>
 80015e0:	e1ed      	b.n	80019be <__aeabi_ddiv+0x532>
 80015e2:	1a88      	subs	r0, r1, r2
 80015e4:	4642      	mov	r2, r8
 80015e6:	0412      	lsls	r2, r2, #16
 80015e8:	431a      	orrs	r2, r3
 80015ea:	4690      	mov	r8, r2
 80015ec:	4641      	mov	r1, r8
 80015ee:	9b00      	ldr	r3, [sp, #0]
 80015f0:	040e      	lsls	r6, r1, #16
 80015f2:	0c1b      	lsrs	r3, r3, #16
 80015f4:	001f      	movs	r7, r3
 80015f6:	9302      	str	r3, [sp, #8]
 80015f8:	9b00      	ldr	r3, [sp, #0]
 80015fa:	0c36      	lsrs	r6, r6, #16
 80015fc:	041b      	lsls	r3, r3, #16
 80015fe:	0c19      	lsrs	r1, r3, #16
 8001600:	000b      	movs	r3, r1
 8001602:	4373      	muls	r3, r6
 8001604:	0c12      	lsrs	r2, r2, #16
 8001606:	437e      	muls	r6, r7
 8001608:	9103      	str	r1, [sp, #12]
 800160a:	4351      	muls	r1, r2
 800160c:	437a      	muls	r2, r7
 800160e:	0c1f      	lsrs	r7, r3, #16
 8001610:	46bc      	mov	ip, r7
 8001612:	1876      	adds	r6, r6, r1
 8001614:	4466      	add	r6, ip
 8001616:	42b1      	cmp	r1, r6
 8001618:	d903      	bls.n	8001622 <__aeabi_ddiv+0x196>
 800161a:	2180      	movs	r1, #128	; 0x80
 800161c:	0249      	lsls	r1, r1, #9
 800161e:	468c      	mov	ip, r1
 8001620:	4462      	add	r2, ip
 8001622:	0c31      	lsrs	r1, r6, #16
 8001624:	188a      	adds	r2, r1, r2
 8001626:	0431      	lsls	r1, r6, #16
 8001628:	041e      	lsls	r6, r3, #16
 800162a:	0c36      	lsrs	r6, r6, #16
 800162c:	198e      	adds	r6, r1, r6
 800162e:	4290      	cmp	r0, r2
 8001630:	d302      	bcc.n	8001638 <__aeabi_ddiv+0x1ac>
 8001632:	d112      	bne.n	800165a <__aeabi_ddiv+0x1ce>
 8001634:	42b5      	cmp	r5, r6
 8001636:	d210      	bcs.n	800165a <__aeabi_ddiv+0x1ce>
 8001638:	4643      	mov	r3, r8
 800163a:	1e59      	subs	r1, r3, #1
 800163c:	9b00      	ldr	r3, [sp, #0]
 800163e:	469c      	mov	ip, r3
 8001640:	4465      	add	r5, ip
 8001642:	001f      	movs	r7, r3
 8001644:	429d      	cmp	r5, r3
 8001646:	419b      	sbcs	r3, r3
 8001648:	425b      	negs	r3, r3
 800164a:	191b      	adds	r3, r3, r4
 800164c:	18c0      	adds	r0, r0, r3
 800164e:	4284      	cmp	r4, r0
 8001650:	d200      	bcs.n	8001654 <__aeabi_ddiv+0x1c8>
 8001652:	e1a0      	b.n	8001996 <__aeabi_ddiv+0x50a>
 8001654:	d100      	bne.n	8001658 <__aeabi_ddiv+0x1cc>
 8001656:	e19b      	b.n	8001990 <__aeabi_ddiv+0x504>
 8001658:	4688      	mov	r8, r1
 800165a:	1bae      	subs	r6, r5, r6
 800165c:	42b5      	cmp	r5, r6
 800165e:	41ad      	sbcs	r5, r5
 8001660:	1a80      	subs	r0, r0, r2
 8001662:	426d      	negs	r5, r5
 8001664:	1b40      	subs	r0, r0, r5
 8001666:	4284      	cmp	r4, r0
 8001668:	d100      	bne.n	800166c <__aeabi_ddiv+0x1e0>
 800166a:	e1d5      	b.n	8001a18 <__aeabi_ddiv+0x58c>
 800166c:	4649      	mov	r1, r9
 800166e:	f7fe fdd1 	bl	8000214 <__aeabi_uidivmod>
 8001672:	9a01      	ldr	r2, [sp, #4]
 8001674:	040b      	lsls	r3, r1, #16
 8001676:	4342      	muls	r2, r0
 8001678:	0c31      	lsrs	r1, r6, #16
 800167a:	0005      	movs	r5, r0
 800167c:	4319      	orrs	r1, r3
 800167e:	428a      	cmp	r2, r1
 8001680:	d900      	bls.n	8001684 <__aeabi_ddiv+0x1f8>
 8001682:	e16c      	b.n	800195e <__aeabi_ddiv+0x4d2>
 8001684:	1a88      	subs	r0, r1, r2
 8001686:	4649      	mov	r1, r9
 8001688:	f7fe fdc4 	bl	8000214 <__aeabi_uidivmod>
 800168c:	9a01      	ldr	r2, [sp, #4]
 800168e:	0436      	lsls	r6, r6, #16
 8001690:	4342      	muls	r2, r0
 8001692:	0409      	lsls	r1, r1, #16
 8001694:	0c36      	lsrs	r6, r6, #16
 8001696:	0003      	movs	r3, r0
 8001698:	430e      	orrs	r6, r1
 800169a:	42b2      	cmp	r2, r6
 800169c:	d900      	bls.n	80016a0 <__aeabi_ddiv+0x214>
 800169e:	e153      	b.n	8001948 <__aeabi_ddiv+0x4bc>
 80016a0:	9803      	ldr	r0, [sp, #12]
 80016a2:	1ab6      	subs	r6, r6, r2
 80016a4:	0002      	movs	r2, r0
 80016a6:	042d      	lsls	r5, r5, #16
 80016a8:	431d      	orrs	r5, r3
 80016aa:	9f02      	ldr	r7, [sp, #8]
 80016ac:	042b      	lsls	r3, r5, #16
 80016ae:	0c1b      	lsrs	r3, r3, #16
 80016b0:	435a      	muls	r2, r3
 80016b2:	437b      	muls	r3, r7
 80016b4:	469c      	mov	ip, r3
 80016b6:	0c29      	lsrs	r1, r5, #16
 80016b8:	4348      	muls	r0, r1
 80016ba:	0c13      	lsrs	r3, r2, #16
 80016bc:	4484      	add	ip, r0
 80016be:	4463      	add	r3, ip
 80016c0:	4379      	muls	r1, r7
 80016c2:	4298      	cmp	r0, r3
 80016c4:	d903      	bls.n	80016ce <__aeabi_ddiv+0x242>
 80016c6:	2080      	movs	r0, #128	; 0x80
 80016c8:	0240      	lsls	r0, r0, #9
 80016ca:	4684      	mov	ip, r0
 80016cc:	4461      	add	r1, ip
 80016ce:	0c18      	lsrs	r0, r3, #16
 80016d0:	0412      	lsls	r2, r2, #16
 80016d2:	041b      	lsls	r3, r3, #16
 80016d4:	0c12      	lsrs	r2, r2, #16
 80016d6:	1841      	adds	r1, r0, r1
 80016d8:	189b      	adds	r3, r3, r2
 80016da:	428e      	cmp	r6, r1
 80016dc:	d200      	bcs.n	80016e0 <__aeabi_ddiv+0x254>
 80016de:	e0ff      	b.n	80018e0 <__aeabi_ddiv+0x454>
 80016e0:	d100      	bne.n	80016e4 <__aeabi_ddiv+0x258>
 80016e2:	e0fa      	b.n	80018da <__aeabi_ddiv+0x44e>
 80016e4:	2301      	movs	r3, #1
 80016e6:	431d      	orrs	r5, r3
 80016e8:	4a49      	ldr	r2, [pc, #292]	; (8001810 <__aeabi_ddiv+0x384>)
 80016ea:	445a      	add	r2, fp
 80016ec:	2a00      	cmp	r2, #0
 80016ee:	dc00      	bgt.n	80016f2 <__aeabi_ddiv+0x266>
 80016f0:	e0aa      	b.n	8001848 <__aeabi_ddiv+0x3bc>
 80016f2:	076b      	lsls	r3, r5, #29
 80016f4:	d000      	beq.n	80016f8 <__aeabi_ddiv+0x26c>
 80016f6:	e13d      	b.n	8001974 <__aeabi_ddiv+0x4e8>
 80016f8:	08ed      	lsrs	r5, r5, #3
 80016fa:	4643      	mov	r3, r8
 80016fc:	01db      	lsls	r3, r3, #7
 80016fe:	d506      	bpl.n	800170e <__aeabi_ddiv+0x282>
 8001700:	4642      	mov	r2, r8
 8001702:	4b44      	ldr	r3, [pc, #272]	; (8001814 <__aeabi_ddiv+0x388>)
 8001704:	401a      	ands	r2, r3
 8001706:	4690      	mov	r8, r2
 8001708:	2280      	movs	r2, #128	; 0x80
 800170a:	00d2      	lsls	r2, r2, #3
 800170c:	445a      	add	r2, fp
 800170e:	4b42      	ldr	r3, [pc, #264]	; (8001818 <__aeabi_ddiv+0x38c>)
 8001710:	429a      	cmp	r2, r3
 8001712:	dd00      	ble.n	8001716 <__aeabi_ddiv+0x28a>
 8001714:	e71f      	b.n	8001556 <__aeabi_ddiv+0xca>
 8001716:	4643      	mov	r3, r8
 8001718:	075b      	lsls	r3, r3, #29
 800171a:	431d      	orrs	r5, r3
 800171c:	4643      	mov	r3, r8
 800171e:	0552      	lsls	r2, r2, #21
 8001720:	025c      	lsls	r4, r3, #9
 8001722:	0b24      	lsrs	r4, r4, #12
 8001724:	0d53      	lsrs	r3, r2, #21
 8001726:	e708      	b.n	800153a <__aeabi_ddiv+0xae>
 8001728:	4652      	mov	r2, sl
 800172a:	4322      	orrs	r2, r4
 800172c:	d100      	bne.n	8001730 <__aeabi_ddiv+0x2a4>
 800172e:	e07b      	b.n	8001828 <__aeabi_ddiv+0x39c>
 8001730:	2c00      	cmp	r4, #0
 8001732:	d100      	bne.n	8001736 <__aeabi_ddiv+0x2aa>
 8001734:	e0fa      	b.n	800192c <__aeabi_ddiv+0x4a0>
 8001736:	0020      	movs	r0, r4
 8001738:	f001 f9fc 	bl	8002b34 <__clzsi2>
 800173c:	0002      	movs	r2, r0
 800173e:	3a0b      	subs	r2, #11
 8001740:	231d      	movs	r3, #29
 8001742:	0001      	movs	r1, r0
 8001744:	1a9b      	subs	r3, r3, r2
 8001746:	4652      	mov	r2, sl
 8001748:	3908      	subs	r1, #8
 800174a:	40da      	lsrs	r2, r3
 800174c:	408c      	lsls	r4, r1
 800174e:	4314      	orrs	r4, r2
 8001750:	4652      	mov	r2, sl
 8001752:	408a      	lsls	r2, r1
 8001754:	4b31      	ldr	r3, [pc, #196]	; (800181c <__aeabi_ddiv+0x390>)
 8001756:	4458      	add	r0, fp
 8001758:	469b      	mov	fp, r3
 800175a:	4483      	add	fp, r0
 800175c:	2000      	movs	r0, #0
 800175e:	e6d5      	b.n	800150c <__aeabi_ddiv+0x80>
 8001760:	464b      	mov	r3, r9
 8001762:	4323      	orrs	r3, r4
 8001764:	4698      	mov	r8, r3
 8001766:	d044      	beq.n	80017f2 <__aeabi_ddiv+0x366>
 8001768:	2c00      	cmp	r4, #0
 800176a:	d100      	bne.n	800176e <__aeabi_ddiv+0x2e2>
 800176c:	e0ce      	b.n	800190c <__aeabi_ddiv+0x480>
 800176e:	0020      	movs	r0, r4
 8001770:	f001 f9e0 	bl	8002b34 <__clzsi2>
 8001774:	0001      	movs	r1, r0
 8001776:	0002      	movs	r2, r0
 8001778:	390b      	subs	r1, #11
 800177a:	231d      	movs	r3, #29
 800177c:	1a5b      	subs	r3, r3, r1
 800177e:	4649      	mov	r1, r9
 8001780:	0010      	movs	r0, r2
 8001782:	40d9      	lsrs	r1, r3
 8001784:	3808      	subs	r0, #8
 8001786:	4084      	lsls	r4, r0
 8001788:	000b      	movs	r3, r1
 800178a:	464d      	mov	r5, r9
 800178c:	4323      	orrs	r3, r4
 800178e:	4698      	mov	r8, r3
 8001790:	4085      	lsls	r5, r0
 8001792:	4823      	ldr	r0, [pc, #140]	; (8001820 <__aeabi_ddiv+0x394>)
 8001794:	1a83      	subs	r3, r0, r2
 8001796:	469b      	mov	fp, r3
 8001798:	2300      	movs	r3, #0
 800179a:	4699      	mov	r9, r3
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	e69a      	b.n	80014d6 <__aeabi_ddiv+0x4a>
 80017a0:	464b      	mov	r3, r9
 80017a2:	4323      	orrs	r3, r4
 80017a4:	4698      	mov	r8, r3
 80017a6:	d11d      	bne.n	80017e4 <__aeabi_ddiv+0x358>
 80017a8:	2308      	movs	r3, #8
 80017aa:	4699      	mov	r9, r3
 80017ac:	3b06      	subs	r3, #6
 80017ae:	2500      	movs	r5, #0
 80017b0:	4683      	mov	fp, r0
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	e68f      	b.n	80014d6 <__aeabi_ddiv+0x4a>
 80017b6:	4652      	mov	r2, sl
 80017b8:	4322      	orrs	r2, r4
 80017ba:	d109      	bne.n	80017d0 <__aeabi_ddiv+0x344>
 80017bc:	2302      	movs	r3, #2
 80017be:	4649      	mov	r1, r9
 80017c0:	4319      	orrs	r1, r3
 80017c2:	4b18      	ldr	r3, [pc, #96]	; (8001824 <__aeabi_ddiv+0x398>)
 80017c4:	4689      	mov	r9, r1
 80017c6:	469c      	mov	ip, r3
 80017c8:	2400      	movs	r4, #0
 80017ca:	2002      	movs	r0, #2
 80017cc:	44e3      	add	fp, ip
 80017ce:	e69d      	b.n	800150c <__aeabi_ddiv+0x80>
 80017d0:	2303      	movs	r3, #3
 80017d2:	464a      	mov	r2, r9
 80017d4:	431a      	orrs	r2, r3
 80017d6:	4b13      	ldr	r3, [pc, #76]	; (8001824 <__aeabi_ddiv+0x398>)
 80017d8:	4691      	mov	r9, r2
 80017da:	469c      	mov	ip, r3
 80017dc:	4652      	mov	r2, sl
 80017de:	2003      	movs	r0, #3
 80017e0:	44e3      	add	fp, ip
 80017e2:	e693      	b.n	800150c <__aeabi_ddiv+0x80>
 80017e4:	230c      	movs	r3, #12
 80017e6:	4699      	mov	r9, r3
 80017e8:	3b09      	subs	r3, #9
 80017ea:	46a0      	mov	r8, r4
 80017ec:	4683      	mov	fp, r0
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	e671      	b.n	80014d6 <__aeabi_ddiv+0x4a>
 80017f2:	2304      	movs	r3, #4
 80017f4:	4699      	mov	r9, r3
 80017f6:	2300      	movs	r3, #0
 80017f8:	469b      	mov	fp, r3
 80017fa:	3301      	adds	r3, #1
 80017fc:	2500      	movs	r5, #0
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	e669      	b.n	80014d6 <__aeabi_ddiv+0x4a>
 8001802:	46c0      	nop			; (mov r8, r8)
 8001804:	000007ff 	.word	0x000007ff
 8001808:	fffffc01 	.word	0xfffffc01
 800180c:	08006b08 	.word	0x08006b08
 8001810:	000003ff 	.word	0x000003ff
 8001814:	feffffff 	.word	0xfeffffff
 8001818:	000007fe 	.word	0x000007fe
 800181c:	000003f3 	.word	0x000003f3
 8001820:	fffffc0d 	.word	0xfffffc0d
 8001824:	fffff801 	.word	0xfffff801
 8001828:	4649      	mov	r1, r9
 800182a:	2301      	movs	r3, #1
 800182c:	4319      	orrs	r1, r3
 800182e:	4689      	mov	r9, r1
 8001830:	2400      	movs	r4, #0
 8001832:	2001      	movs	r0, #1
 8001834:	e66a      	b.n	800150c <__aeabi_ddiv+0x80>
 8001836:	2300      	movs	r3, #0
 8001838:	2480      	movs	r4, #128	; 0x80
 800183a:	469a      	mov	sl, r3
 800183c:	2500      	movs	r5, #0
 800183e:	4b8a      	ldr	r3, [pc, #552]	; (8001a68 <__aeabi_ddiv+0x5dc>)
 8001840:	0324      	lsls	r4, r4, #12
 8001842:	e67a      	b.n	800153a <__aeabi_ddiv+0xae>
 8001844:	2501      	movs	r5, #1
 8001846:	426d      	negs	r5, r5
 8001848:	2301      	movs	r3, #1
 800184a:	1a9b      	subs	r3, r3, r2
 800184c:	2b38      	cmp	r3, #56	; 0x38
 800184e:	dd00      	ble.n	8001852 <__aeabi_ddiv+0x3c6>
 8001850:	e670      	b.n	8001534 <__aeabi_ddiv+0xa8>
 8001852:	2b1f      	cmp	r3, #31
 8001854:	dc00      	bgt.n	8001858 <__aeabi_ddiv+0x3cc>
 8001856:	e0bf      	b.n	80019d8 <__aeabi_ddiv+0x54c>
 8001858:	211f      	movs	r1, #31
 800185a:	4249      	negs	r1, r1
 800185c:	1a8a      	subs	r2, r1, r2
 800185e:	4641      	mov	r1, r8
 8001860:	40d1      	lsrs	r1, r2
 8001862:	000a      	movs	r2, r1
 8001864:	2b20      	cmp	r3, #32
 8001866:	d004      	beq.n	8001872 <__aeabi_ddiv+0x3e6>
 8001868:	4641      	mov	r1, r8
 800186a:	4b80      	ldr	r3, [pc, #512]	; (8001a6c <__aeabi_ddiv+0x5e0>)
 800186c:	445b      	add	r3, fp
 800186e:	4099      	lsls	r1, r3
 8001870:	430d      	orrs	r5, r1
 8001872:	1e6b      	subs	r3, r5, #1
 8001874:	419d      	sbcs	r5, r3
 8001876:	2307      	movs	r3, #7
 8001878:	432a      	orrs	r2, r5
 800187a:	001d      	movs	r5, r3
 800187c:	2400      	movs	r4, #0
 800187e:	4015      	ands	r5, r2
 8001880:	4213      	tst	r3, r2
 8001882:	d100      	bne.n	8001886 <__aeabi_ddiv+0x3fa>
 8001884:	e0d4      	b.n	8001a30 <__aeabi_ddiv+0x5a4>
 8001886:	210f      	movs	r1, #15
 8001888:	2300      	movs	r3, #0
 800188a:	4011      	ands	r1, r2
 800188c:	2904      	cmp	r1, #4
 800188e:	d100      	bne.n	8001892 <__aeabi_ddiv+0x406>
 8001890:	e0cb      	b.n	8001a2a <__aeabi_ddiv+0x59e>
 8001892:	1d11      	adds	r1, r2, #4
 8001894:	4291      	cmp	r1, r2
 8001896:	4192      	sbcs	r2, r2
 8001898:	4252      	negs	r2, r2
 800189a:	189b      	adds	r3, r3, r2
 800189c:	000a      	movs	r2, r1
 800189e:	0219      	lsls	r1, r3, #8
 80018a0:	d400      	bmi.n	80018a4 <__aeabi_ddiv+0x418>
 80018a2:	e0c2      	b.n	8001a2a <__aeabi_ddiv+0x59e>
 80018a4:	2301      	movs	r3, #1
 80018a6:	2400      	movs	r4, #0
 80018a8:	2500      	movs	r5, #0
 80018aa:	e646      	b.n	800153a <__aeabi_ddiv+0xae>
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	4641      	mov	r1, r8
 80018b0:	031b      	lsls	r3, r3, #12
 80018b2:	4219      	tst	r1, r3
 80018b4:	d008      	beq.n	80018c8 <__aeabi_ddiv+0x43c>
 80018b6:	421c      	tst	r4, r3
 80018b8:	d106      	bne.n	80018c8 <__aeabi_ddiv+0x43c>
 80018ba:	431c      	orrs	r4, r3
 80018bc:	0324      	lsls	r4, r4, #12
 80018be:	46ba      	mov	sl, r7
 80018c0:	0015      	movs	r5, r2
 80018c2:	4b69      	ldr	r3, [pc, #420]	; (8001a68 <__aeabi_ddiv+0x5dc>)
 80018c4:	0b24      	lsrs	r4, r4, #12
 80018c6:	e638      	b.n	800153a <__aeabi_ddiv+0xae>
 80018c8:	2480      	movs	r4, #128	; 0x80
 80018ca:	4643      	mov	r3, r8
 80018cc:	0324      	lsls	r4, r4, #12
 80018ce:	431c      	orrs	r4, r3
 80018d0:	0324      	lsls	r4, r4, #12
 80018d2:	46b2      	mov	sl, r6
 80018d4:	4b64      	ldr	r3, [pc, #400]	; (8001a68 <__aeabi_ddiv+0x5dc>)
 80018d6:	0b24      	lsrs	r4, r4, #12
 80018d8:	e62f      	b.n	800153a <__aeabi_ddiv+0xae>
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d100      	bne.n	80018e0 <__aeabi_ddiv+0x454>
 80018de:	e703      	b.n	80016e8 <__aeabi_ddiv+0x25c>
 80018e0:	19a6      	adds	r6, r4, r6
 80018e2:	1e68      	subs	r0, r5, #1
 80018e4:	42a6      	cmp	r6, r4
 80018e6:	d200      	bcs.n	80018ea <__aeabi_ddiv+0x45e>
 80018e8:	e08d      	b.n	8001a06 <__aeabi_ddiv+0x57a>
 80018ea:	428e      	cmp	r6, r1
 80018ec:	d200      	bcs.n	80018f0 <__aeabi_ddiv+0x464>
 80018ee:	e0a3      	b.n	8001a38 <__aeabi_ddiv+0x5ac>
 80018f0:	d100      	bne.n	80018f4 <__aeabi_ddiv+0x468>
 80018f2:	e0b3      	b.n	8001a5c <__aeabi_ddiv+0x5d0>
 80018f4:	0005      	movs	r5, r0
 80018f6:	e6f5      	b.n	80016e4 <__aeabi_ddiv+0x258>
 80018f8:	42aa      	cmp	r2, r5
 80018fa:	d900      	bls.n	80018fe <__aeabi_ddiv+0x472>
 80018fc:	e639      	b.n	8001572 <__aeabi_ddiv+0xe6>
 80018fe:	4643      	mov	r3, r8
 8001900:	07de      	lsls	r6, r3, #31
 8001902:	0858      	lsrs	r0, r3, #1
 8001904:	086b      	lsrs	r3, r5, #1
 8001906:	431e      	orrs	r6, r3
 8001908:	07ed      	lsls	r5, r5, #31
 800190a:	e639      	b.n	8001580 <__aeabi_ddiv+0xf4>
 800190c:	4648      	mov	r0, r9
 800190e:	f001 f911 	bl	8002b34 <__clzsi2>
 8001912:	0001      	movs	r1, r0
 8001914:	0002      	movs	r2, r0
 8001916:	3115      	adds	r1, #21
 8001918:	3220      	adds	r2, #32
 800191a:	291c      	cmp	r1, #28
 800191c:	dc00      	bgt.n	8001920 <__aeabi_ddiv+0x494>
 800191e:	e72c      	b.n	800177a <__aeabi_ddiv+0x2ee>
 8001920:	464b      	mov	r3, r9
 8001922:	3808      	subs	r0, #8
 8001924:	4083      	lsls	r3, r0
 8001926:	2500      	movs	r5, #0
 8001928:	4698      	mov	r8, r3
 800192a:	e732      	b.n	8001792 <__aeabi_ddiv+0x306>
 800192c:	f001 f902 	bl	8002b34 <__clzsi2>
 8001930:	0003      	movs	r3, r0
 8001932:	001a      	movs	r2, r3
 8001934:	3215      	adds	r2, #21
 8001936:	3020      	adds	r0, #32
 8001938:	2a1c      	cmp	r2, #28
 800193a:	dc00      	bgt.n	800193e <__aeabi_ddiv+0x4b2>
 800193c:	e700      	b.n	8001740 <__aeabi_ddiv+0x2b4>
 800193e:	4654      	mov	r4, sl
 8001940:	3b08      	subs	r3, #8
 8001942:	2200      	movs	r2, #0
 8001944:	409c      	lsls	r4, r3
 8001946:	e705      	b.n	8001754 <__aeabi_ddiv+0x2c8>
 8001948:	1936      	adds	r6, r6, r4
 800194a:	3b01      	subs	r3, #1
 800194c:	42b4      	cmp	r4, r6
 800194e:	d900      	bls.n	8001952 <__aeabi_ddiv+0x4c6>
 8001950:	e6a6      	b.n	80016a0 <__aeabi_ddiv+0x214>
 8001952:	42b2      	cmp	r2, r6
 8001954:	d800      	bhi.n	8001958 <__aeabi_ddiv+0x4cc>
 8001956:	e6a3      	b.n	80016a0 <__aeabi_ddiv+0x214>
 8001958:	1e83      	subs	r3, r0, #2
 800195a:	1936      	adds	r6, r6, r4
 800195c:	e6a0      	b.n	80016a0 <__aeabi_ddiv+0x214>
 800195e:	1909      	adds	r1, r1, r4
 8001960:	3d01      	subs	r5, #1
 8001962:	428c      	cmp	r4, r1
 8001964:	d900      	bls.n	8001968 <__aeabi_ddiv+0x4dc>
 8001966:	e68d      	b.n	8001684 <__aeabi_ddiv+0x1f8>
 8001968:	428a      	cmp	r2, r1
 800196a:	d800      	bhi.n	800196e <__aeabi_ddiv+0x4e2>
 800196c:	e68a      	b.n	8001684 <__aeabi_ddiv+0x1f8>
 800196e:	1e85      	subs	r5, r0, #2
 8001970:	1909      	adds	r1, r1, r4
 8001972:	e687      	b.n	8001684 <__aeabi_ddiv+0x1f8>
 8001974:	230f      	movs	r3, #15
 8001976:	402b      	ands	r3, r5
 8001978:	2b04      	cmp	r3, #4
 800197a:	d100      	bne.n	800197e <__aeabi_ddiv+0x4f2>
 800197c:	e6bc      	b.n	80016f8 <__aeabi_ddiv+0x26c>
 800197e:	2305      	movs	r3, #5
 8001980:	425b      	negs	r3, r3
 8001982:	42ab      	cmp	r3, r5
 8001984:	419b      	sbcs	r3, r3
 8001986:	3504      	adds	r5, #4
 8001988:	425b      	negs	r3, r3
 800198a:	08ed      	lsrs	r5, r5, #3
 800198c:	4498      	add	r8, r3
 800198e:	e6b4      	b.n	80016fa <__aeabi_ddiv+0x26e>
 8001990:	42af      	cmp	r7, r5
 8001992:	d900      	bls.n	8001996 <__aeabi_ddiv+0x50a>
 8001994:	e660      	b.n	8001658 <__aeabi_ddiv+0x1cc>
 8001996:	4282      	cmp	r2, r0
 8001998:	d804      	bhi.n	80019a4 <__aeabi_ddiv+0x518>
 800199a:	d000      	beq.n	800199e <__aeabi_ddiv+0x512>
 800199c:	e65c      	b.n	8001658 <__aeabi_ddiv+0x1cc>
 800199e:	42ae      	cmp	r6, r5
 80019a0:	d800      	bhi.n	80019a4 <__aeabi_ddiv+0x518>
 80019a2:	e659      	b.n	8001658 <__aeabi_ddiv+0x1cc>
 80019a4:	2302      	movs	r3, #2
 80019a6:	425b      	negs	r3, r3
 80019a8:	469c      	mov	ip, r3
 80019aa:	9b00      	ldr	r3, [sp, #0]
 80019ac:	44e0      	add	r8, ip
 80019ae:	469c      	mov	ip, r3
 80019b0:	4465      	add	r5, ip
 80019b2:	429d      	cmp	r5, r3
 80019b4:	419b      	sbcs	r3, r3
 80019b6:	425b      	negs	r3, r3
 80019b8:	191b      	adds	r3, r3, r4
 80019ba:	18c0      	adds	r0, r0, r3
 80019bc:	e64d      	b.n	800165a <__aeabi_ddiv+0x1ce>
 80019be:	428a      	cmp	r2, r1
 80019c0:	d800      	bhi.n	80019c4 <__aeabi_ddiv+0x538>
 80019c2:	e60e      	b.n	80015e2 <__aeabi_ddiv+0x156>
 80019c4:	1e83      	subs	r3, r0, #2
 80019c6:	1909      	adds	r1, r1, r4
 80019c8:	e60b      	b.n	80015e2 <__aeabi_ddiv+0x156>
 80019ca:	428a      	cmp	r2, r1
 80019cc:	d800      	bhi.n	80019d0 <__aeabi_ddiv+0x544>
 80019ce:	e5f4      	b.n	80015ba <__aeabi_ddiv+0x12e>
 80019d0:	1e83      	subs	r3, r0, #2
 80019d2:	4698      	mov	r8, r3
 80019d4:	1909      	adds	r1, r1, r4
 80019d6:	e5f0      	b.n	80015ba <__aeabi_ddiv+0x12e>
 80019d8:	4925      	ldr	r1, [pc, #148]	; (8001a70 <__aeabi_ddiv+0x5e4>)
 80019da:	0028      	movs	r0, r5
 80019dc:	4459      	add	r1, fp
 80019de:	408d      	lsls	r5, r1
 80019e0:	4642      	mov	r2, r8
 80019e2:	408a      	lsls	r2, r1
 80019e4:	1e69      	subs	r1, r5, #1
 80019e6:	418d      	sbcs	r5, r1
 80019e8:	4641      	mov	r1, r8
 80019ea:	40d8      	lsrs	r0, r3
 80019ec:	40d9      	lsrs	r1, r3
 80019ee:	4302      	orrs	r2, r0
 80019f0:	432a      	orrs	r2, r5
 80019f2:	000b      	movs	r3, r1
 80019f4:	0751      	lsls	r1, r2, #29
 80019f6:	d100      	bne.n	80019fa <__aeabi_ddiv+0x56e>
 80019f8:	e751      	b.n	800189e <__aeabi_ddiv+0x412>
 80019fa:	210f      	movs	r1, #15
 80019fc:	4011      	ands	r1, r2
 80019fe:	2904      	cmp	r1, #4
 8001a00:	d000      	beq.n	8001a04 <__aeabi_ddiv+0x578>
 8001a02:	e746      	b.n	8001892 <__aeabi_ddiv+0x406>
 8001a04:	e74b      	b.n	800189e <__aeabi_ddiv+0x412>
 8001a06:	0005      	movs	r5, r0
 8001a08:	428e      	cmp	r6, r1
 8001a0a:	d000      	beq.n	8001a0e <__aeabi_ddiv+0x582>
 8001a0c:	e66a      	b.n	80016e4 <__aeabi_ddiv+0x258>
 8001a0e:	9a00      	ldr	r2, [sp, #0]
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d000      	beq.n	8001a16 <__aeabi_ddiv+0x58a>
 8001a14:	e666      	b.n	80016e4 <__aeabi_ddiv+0x258>
 8001a16:	e667      	b.n	80016e8 <__aeabi_ddiv+0x25c>
 8001a18:	4a16      	ldr	r2, [pc, #88]	; (8001a74 <__aeabi_ddiv+0x5e8>)
 8001a1a:	445a      	add	r2, fp
 8001a1c:	2a00      	cmp	r2, #0
 8001a1e:	dc00      	bgt.n	8001a22 <__aeabi_ddiv+0x596>
 8001a20:	e710      	b.n	8001844 <__aeabi_ddiv+0x3b8>
 8001a22:	2301      	movs	r3, #1
 8001a24:	2500      	movs	r5, #0
 8001a26:	4498      	add	r8, r3
 8001a28:	e667      	b.n	80016fa <__aeabi_ddiv+0x26e>
 8001a2a:	075d      	lsls	r5, r3, #29
 8001a2c:	025b      	lsls	r3, r3, #9
 8001a2e:	0b1c      	lsrs	r4, r3, #12
 8001a30:	08d2      	lsrs	r2, r2, #3
 8001a32:	2300      	movs	r3, #0
 8001a34:	4315      	orrs	r5, r2
 8001a36:	e580      	b.n	800153a <__aeabi_ddiv+0xae>
 8001a38:	9800      	ldr	r0, [sp, #0]
 8001a3a:	3d02      	subs	r5, #2
 8001a3c:	0042      	lsls	r2, r0, #1
 8001a3e:	4282      	cmp	r2, r0
 8001a40:	41bf      	sbcs	r7, r7
 8001a42:	427f      	negs	r7, r7
 8001a44:	193c      	adds	r4, r7, r4
 8001a46:	1936      	adds	r6, r6, r4
 8001a48:	9200      	str	r2, [sp, #0]
 8001a4a:	e7dd      	b.n	8001a08 <__aeabi_ddiv+0x57c>
 8001a4c:	2480      	movs	r4, #128	; 0x80
 8001a4e:	4643      	mov	r3, r8
 8001a50:	0324      	lsls	r4, r4, #12
 8001a52:	431c      	orrs	r4, r3
 8001a54:	0324      	lsls	r4, r4, #12
 8001a56:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <__aeabi_ddiv+0x5dc>)
 8001a58:	0b24      	lsrs	r4, r4, #12
 8001a5a:	e56e      	b.n	800153a <__aeabi_ddiv+0xae>
 8001a5c:	9a00      	ldr	r2, [sp, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d3ea      	bcc.n	8001a38 <__aeabi_ddiv+0x5ac>
 8001a62:	0005      	movs	r5, r0
 8001a64:	e7d3      	b.n	8001a0e <__aeabi_ddiv+0x582>
 8001a66:	46c0      	nop			; (mov r8, r8)
 8001a68:	000007ff 	.word	0x000007ff
 8001a6c:	0000043e 	.word	0x0000043e
 8001a70:	0000041e 	.word	0x0000041e
 8001a74:	000003ff 	.word	0x000003ff

08001a78 <__eqdf2>:
 8001a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a7a:	464e      	mov	r6, r9
 8001a7c:	4645      	mov	r5, r8
 8001a7e:	46de      	mov	lr, fp
 8001a80:	4657      	mov	r7, sl
 8001a82:	4690      	mov	r8, r2
 8001a84:	b5e0      	push	{r5, r6, r7, lr}
 8001a86:	0017      	movs	r7, r2
 8001a88:	031a      	lsls	r2, r3, #12
 8001a8a:	0b12      	lsrs	r2, r2, #12
 8001a8c:	0005      	movs	r5, r0
 8001a8e:	4684      	mov	ip, r0
 8001a90:	4819      	ldr	r0, [pc, #100]	; (8001af8 <__eqdf2+0x80>)
 8001a92:	030e      	lsls	r6, r1, #12
 8001a94:	004c      	lsls	r4, r1, #1
 8001a96:	4691      	mov	r9, r2
 8001a98:	005a      	lsls	r2, r3, #1
 8001a9a:	0fdb      	lsrs	r3, r3, #31
 8001a9c:	469b      	mov	fp, r3
 8001a9e:	0b36      	lsrs	r6, r6, #12
 8001aa0:	0d64      	lsrs	r4, r4, #21
 8001aa2:	0fc9      	lsrs	r1, r1, #31
 8001aa4:	0d52      	lsrs	r2, r2, #21
 8001aa6:	4284      	cmp	r4, r0
 8001aa8:	d019      	beq.n	8001ade <__eqdf2+0x66>
 8001aaa:	4282      	cmp	r2, r0
 8001aac:	d010      	beq.n	8001ad0 <__eqdf2+0x58>
 8001aae:	2001      	movs	r0, #1
 8001ab0:	4294      	cmp	r4, r2
 8001ab2:	d10e      	bne.n	8001ad2 <__eqdf2+0x5a>
 8001ab4:	454e      	cmp	r6, r9
 8001ab6:	d10c      	bne.n	8001ad2 <__eqdf2+0x5a>
 8001ab8:	2001      	movs	r0, #1
 8001aba:	45c4      	cmp	ip, r8
 8001abc:	d109      	bne.n	8001ad2 <__eqdf2+0x5a>
 8001abe:	4559      	cmp	r1, fp
 8001ac0:	d017      	beq.n	8001af2 <__eqdf2+0x7a>
 8001ac2:	2c00      	cmp	r4, #0
 8001ac4:	d105      	bne.n	8001ad2 <__eqdf2+0x5a>
 8001ac6:	0030      	movs	r0, r6
 8001ac8:	4328      	orrs	r0, r5
 8001aca:	1e43      	subs	r3, r0, #1
 8001acc:	4198      	sbcs	r0, r3
 8001ace:	e000      	b.n	8001ad2 <__eqdf2+0x5a>
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	bcf0      	pop	{r4, r5, r6, r7}
 8001ad4:	46bb      	mov	fp, r7
 8001ad6:	46b2      	mov	sl, r6
 8001ad8:	46a9      	mov	r9, r5
 8001ada:	46a0      	mov	r8, r4
 8001adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ade:	0033      	movs	r3, r6
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	432b      	orrs	r3, r5
 8001ae4:	d1f5      	bne.n	8001ad2 <__eqdf2+0x5a>
 8001ae6:	42a2      	cmp	r2, r4
 8001ae8:	d1f3      	bne.n	8001ad2 <__eqdf2+0x5a>
 8001aea:	464b      	mov	r3, r9
 8001aec:	433b      	orrs	r3, r7
 8001aee:	d1f0      	bne.n	8001ad2 <__eqdf2+0x5a>
 8001af0:	e7e2      	b.n	8001ab8 <__eqdf2+0x40>
 8001af2:	2000      	movs	r0, #0
 8001af4:	e7ed      	b.n	8001ad2 <__eqdf2+0x5a>
 8001af6:	46c0      	nop			; (mov r8, r8)
 8001af8:	000007ff 	.word	0x000007ff

08001afc <__gedf2>:
 8001afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001afe:	4647      	mov	r7, r8
 8001b00:	46ce      	mov	lr, r9
 8001b02:	0004      	movs	r4, r0
 8001b04:	0018      	movs	r0, r3
 8001b06:	0016      	movs	r6, r2
 8001b08:	031b      	lsls	r3, r3, #12
 8001b0a:	0b1b      	lsrs	r3, r3, #12
 8001b0c:	4d2d      	ldr	r5, [pc, #180]	; (8001bc4 <__gedf2+0xc8>)
 8001b0e:	004a      	lsls	r2, r1, #1
 8001b10:	4699      	mov	r9, r3
 8001b12:	b580      	push	{r7, lr}
 8001b14:	0043      	lsls	r3, r0, #1
 8001b16:	030f      	lsls	r7, r1, #12
 8001b18:	46a4      	mov	ip, r4
 8001b1a:	46b0      	mov	r8, r6
 8001b1c:	0b3f      	lsrs	r7, r7, #12
 8001b1e:	0d52      	lsrs	r2, r2, #21
 8001b20:	0fc9      	lsrs	r1, r1, #31
 8001b22:	0d5b      	lsrs	r3, r3, #21
 8001b24:	0fc0      	lsrs	r0, r0, #31
 8001b26:	42aa      	cmp	r2, r5
 8001b28:	d021      	beq.n	8001b6e <__gedf2+0x72>
 8001b2a:	42ab      	cmp	r3, r5
 8001b2c:	d013      	beq.n	8001b56 <__gedf2+0x5a>
 8001b2e:	2a00      	cmp	r2, #0
 8001b30:	d122      	bne.n	8001b78 <__gedf2+0x7c>
 8001b32:	433c      	orrs	r4, r7
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d102      	bne.n	8001b3e <__gedf2+0x42>
 8001b38:	464d      	mov	r5, r9
 8001b3a:	432e      	orrs	r6, r5
 8001b3c:	d022      	beq.n	8001b84 <__gedf2+0x88>
 8001b3e:	2c00      	cmp	r4, #0
 8001b40:	d010      	beq.n	8001b64 <__gedf2+0x68>
 8001b42:	4281      	cmp	r1, r0
 8001b44:	d022      	beq.n	8001b8c <__gedf2+0x90>
 8001b46:	2002      	movs	r0, #2
 8001b48:	3901      	subs	r1, #1
 8001b4a:	4008      	ands	r0, r1
 8001b4c:	3801      	subs	r0, #1
 8001b4e:	bcc0      	pop	{r6, r7}
 8001b50:	46b9      	mov	r9, r7
 8001b52:	46b0      	mov	r8, r6
 8001b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b56:	464d      	mov	r5, r9
 8001b58:	432e      	orrs	r6, r5
 8001b5a:	d129      	bne.n	8001bb0 <__gedf2+0xb4>
 8001b5c:	2a00      	cmp	r2, #0
 8001b5e:	d1f0      	bne.n	8001b42 <__gedf2+0x46>
 8001b60:	433c      	orrs	r4, r7
 8001b62:	d1ee      	bne.n	8001b42 <__gedf2+0x46>
 8001b64:	2800      	cmp	r0, #0
 8001b66:	d1f2      	bne.n	8001b4e <__gedf2+0x52>
 8001b68:	2001      	movs	r0, #1
 8001b6a:	4240      	negs	r0, r0
 8001b6c:	e7ef      	b.n	8001b4e <__gedf2+0x52>
 8001b6e:	003d      	movs	r5, r7
 8001b70:	4325      	orrs	r5, r4
 8001b72:	d11d      	bne.n	8001bb0 <__gedf2+0xb4>
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d0ee      	beq.n	8001b56 <__gedf2+0x5a>
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1e2      	bne.n	8001b42 <__gedf2+0x46>
 8001b7c:	464c      	mov	r4, r9
 8001b7e:	4326      	orrs	r6, r4
 8001b80:	d1df      	bne.n	8001b42 <__gedf2+0x46>
 8001b82:	e7e0      	b.n	8001b46 <__gedf2+0x4a>
 8001b84:	2000      	movs	r0, #0
 8001b86:	2c00      	cmp	r4, #0
 8001b88:	d0e1      	beq.n	8001b4e <__gedf2+0x52>
 8001b8a:	e7dc      	b.n	8001b46 <__gedf2+0x4a>
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	dc0a      	bgt.n	8001ba6 <__gedf2+0xaa>
 8001b90:	dbe8      	blt.n	8001b64 <__gedf2+0x68>
 8001b92:	454f      	cmp	r7, r9
 8001b94:	d8d7      	bhi.n	8001b46 <__gedf2+0x4a>
 8001b96:	d00e      	beq.n	8001bb6 <__gedf2+0xba>
 8001b98:	2000      	movs	r0, #0
 8001b9a:	454f      	cmp	r7, r9
 8001b9c:	d2d7      	bcs.n	8001b4e <__gedf2+0x52>
 8001b9e:	2900      	cmp	r1, #0
 8001ba0:	d0e2      	beq.n	8001b68 <__gedf2+0x6c>
 8001ba2:	0008      	movs	r0, r1
 8001ba4:	e7d3      	b.n	8001b4e <__gedf2+0x52>
 8001ba6:	4243      	negs	r3, r0
 8001ba8:	4158      	adcs	r0, r3
 8001baa:	0040      	lsls	r0, r0, #1
 8001bac:	3801      	subs	r0, #1
 8001bae:	e7ce      	b.n	8001b4e <__gedf2+0x52>
 8001bb0:	2002      	movs	r0, #2
 8001bb2:	4240      	negs	r0, r0
 8001bb4:	e7cb      	b.n	8001b4e <__gedf2+0x52>
 8001bb6:	45c4      	cmp	ip, r8
 8001bb8:	d8c5      	bhi.n	8001b46 <__gedf2+0x4a>
 8001bba:	2000      	movs	r0, #0
 8001bbc:	45c4      	cmp	ip, r8
 8001bbe:	d2c6      	bcs.n	8001b4e <__gedf2+0x52>
 8001bc0:	e7ed      	b.n	8001b9e <__gedf2+0xa2>
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	000007ff 	.word	0x000007ff

08001bc8 <__ledf2>:
 8001bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bca:	4647      	mov	r7, r8
 8001bcc:	46ce      	mov	lr, r9
 8001bce:	0004      	movs	r4, r0
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	0016      	movs	r6, r2
 8001bd4:	031b      	lsls	r3, r3, #12
 8001bd6:	0b1b      	lsrs	r3, r3, #12
 8001bd8:	4d2c      	ldr	r5, [pc, #176]	; (8001c8c <__ledf2+0xc4>)
 8001bda:	004a      	lsls	r2, r1, #1
 8001bdc:	4699      	mov	r9, r3
 8001bde:	b580      	push	{r7, lr}
 8001be0:	0043      	lsls	r3, r0, #1
 8001be2:	030f      	lsls	r7, r1, #12
 8001be4:	46a4      	mov	ip, r4
 8001be6:	46b0      	mov	r8, r6
 8001be8:	0b3f      	lsrs	r7, r7, #12
 8001bea:	0d52      	lsrs	r2, r2, #21
 8001bec:	0fc9      	lsrs	r1, r1, #31
 8001bee:	0d5b      	lsrs	r3, r3, #21
 8001bf0:	0fc0      	lsrs	r0, r0, #31
 8001bf2:	42aa      	cmp	r2, r5
 8001bf4:	d00d      	beq.n	8001c12 <__ledf2+0x4a>
 8001bf6:	42ab      	cmp	r3, r5
 8001bf8:	d010      	beq.n	8001c1c <__ledf2+0x54>
 8001bfa:	2a00      	cmp	r2, #0
 8001bfc:	d127      	bne.n	8001c4e <__ledf2+0x86>
 8001bfe:	433c      	orrs	r4, r7
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d111      	bne.n	8001c28 <__ledf2+0x60>
 8001c04:	464d      	mov	r5, r9
 8001c06:	432e      	orrs	r6, r5
 8001c08:	d10e      	bne.n	8001c28 <__ledf2+0x60>
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	2c00      	cmp	r4, #0
 8001c0e:	d015      	beq.n	8001c3c <__ledf2+0x74>
 8001c10:	e00e      	b.n	8001c30 <__ledf2+0x68>
 8001c12:	003d      	movs	r5, r7
 8001c14:	4325      	orrs	r5, r4
 8001c16:	d110      	bne.n	8001c3a <__ledf2+0x72>
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d118      	bne.n	8001c4e <__ledf2+0x86>
 8001c1c:	464d      	mov	r5, r9
 8001c1e:	432e      	orrs	r6, r5
 8001c20:	d10b      	bne.n	8001c3a <__ledf2+0x72>
 8001c22:	2a00      	cmp	r2, #0
 8001c24:	d102      	bne.n	8001c2c <__ledf2+0x64>
 8001c26:	433c      	orrs	r4, r7
 8001c28:	2c00      	cmp	r4, #0
 8001c2a:	d00b      	beq.n	8001c44 <__ledf2+0x7c>
 8001c2c:	4281      	cmp	r1, r0
 8001c2e:	d014      	beq.n	8001c5a <__ledf2+0x92>
 8001c30:	2002      	movs	r0, #2
 8001c32:	3901      	subs	r1, #1
 8001c34:	4008      	ands	r0, r1
 8001c36:	3801      	subs	r0, #1
 8001c38:	e000      	b.n	8001c3c <__ledf2+0x74>
 8001c3a:	2002      	movs	r0, #2
 8001c3c:	bcc0      	pop	{r6, r7}
 8001c3e:	46b9      	mov	r9, r7
 8001c40:	46b0      	mov	r8, r6
 8001c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c44:	2800      	cmp	r0, #0
 8001c46:	d1f9      	bne.n	8001c3c <__ledf2+0x74>
 8001c48:	2001      	movs	r0, #1
 8001c4a:	4240      	negs	r0, r0
 8001c4c:	e7f6      	b.n	8001c3c <__ledf2+0x74>
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1ec      	bne.n	8001c2c <__ledf2+0x64>
 8001c52:	464c      	mov	r4, r9
 8001c54:	4326      	orrs	r6, r4
 8001c56:	d1e9      	bne.n	8001c2c <__ledf2+0x64>
 8001c58:	e7ea      	b.n	8001c30 <__ledf2+0x68>
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	dd04      	ble.n	8001c68 <__ledf2+0xa0>
 8001c5e:	4243      	negs	r3, r0
 8001c60:	4158      	adcs	r0, r3
 8001c62:	0040      	lsls	r0, r0, #1
 8001c64:	3801      	subs	r0, #1
 8001c66:	e7e9      	b.n	8001c3c <__ledf2+0x74>
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	dbeb      	blt.n	8001c44 <__ledf2+0x7c>
 8001c6c:	454f      	cmp	r7, r9
 8001c6e:	d8df      	bhi.n	8001c30 <__ledf2+0x68>
 8001c70:	d006      	beq.n	8001c80 <__ledf2+0xb8>
 8001c72:	2000      	movs	r0, #0
 8001c74:	454f      	cmp	r7, r9
 8001c76:	d2e1      	bcs.n	8001c3c <__ledf2+0x74>
 8001c78:	2900      	cmp	r1, #0
 8001c7a:	d0e5      	beq.n	8001c48 <__ledf2+0x80>
 8001c7c:	0008      	movs	r0, r1
 8001c7e:	e7dd      	b.n	8001c3c <__ledf2+0x74>
 8001c80:	45c4      	cmp	ip, r8
 8001c82:	d8d5      	bhi.n	8001c30 <__ledf2+0x68>
 8001c84:	2000      	movs	r0, #0
 8001c86:	45c4      	cmp	ip, r8
 8001c88:	d2d8      	bcs.n	8001c3c <__ledf2+0x74>
 8001c8a:	e7f5      	b.n	8001c78 <__ledf2+0xb0>
 8001c8c:	000007ff 	.word	0x000007ff

08001c90 <__aeabi_dmul>:
 8001c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c92:	4657      	mov	r7, sl
 8001c94:	464e      	mov	r6, r9
 8001c96:	4645      	mov	r5, r8
 8001c98:	46de      	mov	lr, fp
 8001c9a:	b5e0      	push	{r5, r6, r7, lr}
 8001c9c:	4698      	mov	r8, r3
 8001c9e:	030c      	lsls	r4, r1, #12
 8001ca0:	004b      	lsls	r3, r1, #1
 8001ca2:	0006      	movs	r6, r0
 8001ca4:	4692      	mov	sl, r2
 8001ca6:	b087      	sub	sp, #28
 8001ca8:	0b24      	lsrs	r4, r4, #12
 8001caa:	0d5b      	lsrs	r3, r3, #21
 8001cac:	0fcf      	lsrs	r7, r1, #31
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d100      	bne.n	8001cb4 <__aeabi_dmul+0x24>
 8001cb2:	e15c      	b.n	8001f6e <__aeabi_dmul+0x2de>
 8001cb4:	4ad9      	ldr	r2, [pc, #868]	; (800201c <__aeabi_dmul+0x38c>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dmul+0x2c>
 8001cba:	e175      	b.n	8001fa8 <__aeabi_dmul+0x318>
 8001cbc:	0f42      	lsrs	r2, r0, #29
 8001cbe:	00e4      	lsls	r4, r4, #3
 8001cc0:	4314      	orrs	r4, r2
 8001cc2:	2280      	movs	r2, #128	; 0x80
 8001cc4:	0412      	lsls	r2, r2, #16
 8001cc6:	4314      	orrs	r4, r2
 8001cc8:	4ad5      	ldr	r2, [pc, #852]	; (8002020 <__aeabi_dmul+0x390>)
 8001cca:	00c5      	lsls	r5, r0, #3
 8001ccc:	4694      	mov	ip, r2
 8001cce:	4463      	add	r3, ip
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	4699      	mov	r9, r3
 8001cd6:	469b      	mov	fp, r3
 8001cd8:	4643      	mov	r3, r8
 8001cda:	4642      	mov	r2, r8
 8001cdc:	031e      	lsls	r6, r3, #12
 8001cde:	0fd2      	lsrs	r2, r2, #31
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	4650      	mov	r0, sl
 8001ce4:	4690      	mov	r8, r2
 8001ce6:	0b36      	lsrs	r6, r6, #12
 8001ce8:	0d5b      	lsrs	r3, r3, #21
 8001cea:	d100      	bne.n	8001cee <__aeabi_dmul+0x5e>
 8001cec:	e120      	b.n	8001f30 <__aeabi_dmul+0x2a0>
 8001cee:	4acb      	ldr	r2, [pc, #812]	; (800201c <__aeabi_dmul+0x38c>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d100      	bne.n	8001cf6 <__aeabi_dmul+0x66>
 8001cf4:	e162      	b.n	8001fbc <__aeabi_dmul+0x32c>
 8001cf6:	49ca      	ldr	r1, [pc, #808]	; (8002020 <__aeabi_dmul+0x390>)
 8001cf8:	0f42      	lsrs	r2, r0, #29
 8001cfa:	468c      	mov	ip, r1
 8001cfc:	9900      	ldr	r1, [sp, #0]
 8001cfe:	4463      	add	r3, ip
 8001d00:	00f6      	lsls	r6, r6, #3
 8001d02:	468c      	mov	ip, r1
 8001d04:	4316      	orrs	r6, r2
 8001d06:	2280      	movs	r2, #128	; 0x80
 8001d08:	449c      	add	ip, r3
 8001d0a:	0412      	lsls	r2, r2, #16
 8001d0c:	4663      	mov	r3, ip
 8001d0e:	4316      	orrs	r6, r2
 8001d10:	00c2      	lsls	r2, r0, #3
 8001d12:	2000      	movs	r0, #0
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	9900      	ldr	r1, [sp, #0]
 8001d18:	4643      	mov	r3, r8
 8001d1a:	3101      	adds	r1, #1
 8001d1c:	468c      	mov	ip, r1
 8001d1e:	4649      	mov	r1, r9
 8001d20:	407b      	eors	r3, r7
 8001d22:	9301      	str	r3, [sp, #4]
 8001d24:	290f      	cmp	r1, #15
 8001d26:	d826      	bhi.n	8001d76 <__aeabi_dmul+0xe6>
 8001d28:	4bbe      	ldr	r3, [pc, #760]	; (8002024 <__aeabi_dmul+0x394>)
 8001d2a:	0089      	lsls	r1, r1, #2
 8001d2c:	5859      	ldr	r1, [r3, r1]
 8001d2e:	468f      	mov	pc, r1
 8001d30:	4643      	mov	r3, r8
 8001d32:	9301      	str	r3, [sp, #4]
 8001d34:	0034      	movs	r4, r6
 8001d36:	0015      	movs	r5, r2
 8001d38:	4683      	mov	fp, r0
 8001d3a:	465b      	mov	r3, fp
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d016      	beq.n	8001d6e <__aeabi_dmul+0xde>
 8001d40:	2b03      	cmp	r3, #3
 8001d42:	d100      	bne.n	8001d46 <__aeabi_dmul+0xb6>
 8001d44:	e203      	b.n	800214e <__aeabi_dmul+0x4be>
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d000      	beq.n	8001d4c <__aeabi_dmul+0xbc>
 8001d4a:	e0cd      	b.n	8001ee8 <__aeabi_dmul+0x258>
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2400      	movs	r4, #0
 8001d50:	2500      	movs	r5, #0
 8001d52:	9b01      	ldr	r3, [sp, #4]
 8001d54:	0512      	lsls	r2, r2, #20
 8001d56:	4322      	orrs	r2, r4
 8001d58:	07db      	lsls	r3, r3, #31
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	0028      	movs	r0, r5
 8001d5e:	0011      	movs	r1, r2
 8001d60:	b007      	add	sp, #28
 8001d62:	bcf0      	pop	{r4, r5, r6, r7}
 8001d64:	46bb      	mov	fp, r7
 8001d66:	46b2      	mov	sl, r6
 8001d68:	46a9      	mov	r9, r5
 8001d6a:	46a0      	mov	r8, r4
 8001d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d6e:	2400      	movs	r4, #0
 8001d70:	2500      	movs	r5, #0
 8001d72:	4aaa      	ldr	r2, [pc, #680]	; (800201c <__aeabi_dmul+0x38c>)
 8001d74:	e7ed      	b.n	8001d52 <__aeabi_dmul+0xc2>
 8001d76:	0c28      	lsrs	r0, r5, #16
 8001d78:	042d      	lsls	r5, r5, #16
 8001d7a:	0c2d      	lsrs	r5, r5, #16
 8001d7c:	002b      	movs	r3, r5
 8001d7e:	0c11      	lsrs	r1, r2, #16
 8001d80:	0412      	lsls	r2, r2, #16
 8001d82:	0c12      	lsrs	r2, r2, #16
 8001d84:	4353      	muls	r3, r2
 8001d86:	4698      	mov	r8, r3
 8001d88:	0013      	movs	r3, r2
 8001d8a:	002f      	movs	r7, r5
 8001d8c:	4343      	muls	r3, r0
 8001d8e:	4699      	mov	r9, r3
 8001d90:	434f      	muls	r7, r1
 8001d92:	444f      	add	r7, r9
 8001d94:	46bb      	mov	fp, r7
 8001d96:	4647      	mov	r7, r8
 8001d98:	000b      	movs	r3, r1
 8001d9a:	0c3f      	lsrs	r7, r7, #16
 8001d9c:	46ba      	mov	sl, r7
 8001d9e:	4343      	muls	r3, r0
 8001da0:	44da      	add	sl, fp
 8001da2:	9302      	str	r3, [sp, #8]
 8001da4:	45d1      	cmp	r9, sl
 8001da6:	d904      	bls.n	8001db2 <__aeabi_dmul+0x122>
 8001da8:	2780      	movs	r7, #128	; 0x80
 8001daa:	027f      	lsls	r7, r7, #9
 8001dac:	46b9      	mov	r9, r7
 8001dae:	444b      	add	r3, r9
 8001db0:	9302      	str	r3, [sp, #8]
 8001db2:	4653      	mov	r3, sl
 8001db4:	0c1b      	lsrs	r3, r3, #16
 8001db6:	469b      	mov	fp, r3
 8001db8:	4653      	mov	r3, sl
 8001dba:	041f      	lsls	r7, r3, #16
 8001dbc:	4643      	mov	r3, r8
 8001dbe:	041b      	lsls	r3, r3, #16
 8001dc0:	0c1b      	lsrs	r3, r3, #16
 8001dc2:	4698      	mov	r8, r3
 8001dc4:	003b      	movs	r3, r7
 8001dc6:	4443      	add	r3, r8
 8001dc8:	9304      	str	r3, [sp, #16]
 8001dca:	0c33      	lsrs	r3, r6, #16
 8001dcc:	0436      	lsls	r6, r6, #16
 8001dce:	0c36      	lsrs	r6, r6, #16
 8001dd0:	4698      	mov	r8, r3
 8001dd2:	0033      	movs	r3, r6
 8001dd4:	4343      	muls	r3, r0
 8001dd6:	4699      	mov	r9, r3
 8001dd8:	4643      	mov	r3, r8
 8001dda:	4343      	muls	r3, r0
 8001ddc:	002f      	movs	r7, r5
 8001dde:	469a      	mov	sl, r3
 8001de0:	4643      	mov	r3, r8
 8001de2:	4377      	muls	r7, r6
 8001de4:	435d      	muls	r5, r3
 8001de6:	0c38      	lsrs	r0, r7, #16
 8001de8:	444d      	add	r5, r9
 8001dea:	1945      	adds	r5, r0, r5
 8001dec:	45a9      	cmp	r9, r5
 8001dee:	d903      	bls.n	8001df8 <__aeabi_dmul+0x168>
 8001df0:	2380      	movs	r3, #128	; 0x80
 8001df2:	025b      	lsls	r3, r3, #9
 8001df4:	4699      	mov	r9, r3
 8001df6:	44ca      	add	sl, r9
 8001df8:	043f      	lsls	r7, r7, #16
 8001dfa:	0c28      	lsrs	r0, r5, #16
 8001dfc:	0c3f      	lsrs	r7, r7, #16
 8001dfe:	042d      	lsls	r5, r5, #16
 8001e00:	19ed      	adds	r5, r5, r7
 8001e02:	0c27      	lsrs	r7, r4, #16
 8001e04:	0424      	lsls	r4, r4, #16
 8001e06:	0c24      	lsrs	r4, r4, #16
 8001e08:	0003      	movs	r3, r0
 8001e0a:	0020      	movs	r0, r4
 8001e0c:	4350      	muls	r0, r2
 8001e0e:	437a      	muls	r2, r7
 8001e10:	4691      	mov	r9, r2
 8001e12:	003a      	movs	r2, r7
 8001e14:	4453      	add	r3, sl
 8001e16:	9305      	str	r3, [sp, #20]
 8001e18:	0c03      	lsrs	r3, r0, #16
 8001e1a:	469a      	mov	sl, r3
 8001e1c:	434a      	muls	r2, r1
 8001e1e:	4361      	muls	r1, r4
 8001e20:	4449      	add	r1, r9
 8001e22:	4451      	add	r1, sl
 8001e24:	44ab      	add	fp, r5
 8001e26:	4589      	cmp	r9, r1
 8001e28:	d903      	bls.n	8001e32 <__aeabi_dmul+0x1a2>
 8001e2a:	2380      	movs	r3, #128	; 0x80
 8001e2c:	025b      	lsls	r3, r3, #9
 8001e2e:	4699      	mov	r9, r3
 8001e30:	444a      	add	r2, r9
 8001e32:	0400      	lsls	r0, r0, #16
 8001e34:	0c0b      	lsrs	r3, r1, #16
 8001e36:	0c00      	lsrs	r0, r0, #16
 8001e38:	0409      	lsls	r1, r1, #16
 8001e3a:	1809      	adds	r1, r1, r0
 8001e3c:	0020      	movs	r0, r4
 8001e3e:	4699      	mov	r9, r3
 8001e40:	4643      	mov	r3, r8
 8001e42:	4370      	muls	r0, r6
 8001e44:	435c      	muls	r4, r3
 8001e46:	437e      	muls	r6, r7
 8001e48:	435f      	muls	r7, r3
 8001e4a:	0c03      	lsrs	r3, r0, #16
 8001e4c:	4698      	mov	r8, r3
 8001e4e:	19a4      	adds	r4, r4, r6
 8001e50:	4444      	add	r4, r8
 8001e52:	444a      	add	r2, r9
 8001e54:	9703      	str	r7, [sp, #12]
 8001e56:	42a6      	cmp	r6, r4
 8001e58:	d904      	bls.n	8001e64 <__aeabi_dmul+0x1d4>
 8001e5a:	2380      	movs	r3, #128	; 0x80
 8001e5c:	025b      	lsls	r3, r3, #9
 8001e5e:	4698      	mov	r8, r3
 8001e60:	4447      	add	r7, r8
 8001e62:	9703      	str	r7, [sp, #12]
 8001e64:	0423      	lsls	r3, r4, #16
 8001e66:	9e02      	ldr	r6, [sp, #8]
 8001e68:	469a      	mov	sl, r3
 8001e6a:	9b05      	ldr	r3, [sp, #20]
 8001e6c:	445e      	add	r6, fp
 8001e6e:	4698      	mov	r8, r3
 8001e70:	42ae      	cmp	r6, r5
 8001e72:	41ad      	sbcs	r5, r5
 8001e74:	1876      	adds	r6, r6, r1
 8001e76:	428e      	cmp	r6, r1
 8001e78:	4189      	sbcs	r1, r1
 8001e7a:	0400      	lsls	r0, r0, #16
 8001e7c:	0c00      	lsrs	r0, r0, #16
 8001e7e:	4450      	add	r0, sl
 8001e80:	4440      	add	r0, r8
 8001e82:	426d      	negs	r5, r5
 8001e84:	1947      	adds	r7, r0, r5
 8001e86:	46b8      	mov	r8, r7
 8001e88:	4693      	mov	fp, r2
 8001e8a:	4249      	negs	r1, r1
 8001e8c:	4689      	mov	r9, r1
 8001e8e:	44c3      	add	fp, r8
 8001e90:	44d9      	add	r9, fp
 8001e92:	4298      	cmp	r0, r3
 8001e94:	4180      	sbcs	r0, r0
 8001e96:	45a8      	cmp	r8, r5
 8001e98:	41ad      	sbcs	r5, r5
 8001e9a:	4593      	cmp	fp, r2
 8001e9c:	4192      	sbcs	r2, r2
 8001e9e:	4589      	cmp	r9, r1
 8001ea0:	4189      	sbcs	r1, r1
 8001ea2:	426d      	negs	r5, r5
 8001ea4:	4240      	negs	r0, r0
 8001ea6:	4328      	orrs	r0, r5
 8001ea8:	0c24      	lsrs	r4, r4, #16
 8001eaa:	4252      	negs	r2, r2
 8001eac:	4249      	negs	r1, r1
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	9b03      	ldr	r3, [sp, #12]
 8001eb2:	1900      	adds	r0, r0, r4
 8001eb4:	1880      	adds	r0, r0, r2
 8001eb6:	18c7      	adds	r7, r0, r3
 8001eb8:	464b      	mov	r3, r9
 8001eba:	0ddc      	lsrs	r4, r3, #23
 8001ebc:	9b04      	ldr	r3, [sp, #16]
 8001ebe:	0275      	lsls	r5, r6, #9
 8001ec0:	431d      	orrs	r5, r3
 8001ec2:	1e6a      	subs	r2, r5, #1
 8001ec4:	4195      	sbcs	r5, r2
 8001ec6:	464b      	mov	r3, r9
 8001ec8:	0df6      	lsrs	r6, r6, #23
 8001eca:	027f      	lsls	r7, r7, #9
 8001ecc:	4335      	orrs	r5, r6
 8001ece:	025a      	lsls	r2, r3, #9
 8001ed0:	433c      	orrs	r4, r7
 8001ed2:	4315      	orrs	r5, r2
 8001ed4:	01fb      	lsls	r3, r7, #7
 8001ed6:	d400      	bmi.n	8001eda <__aeabi_dmul+0x24a>
 8001ed8:	e11c      	b.n	8002114 <__aeabi_dmul+0x484>
 8001eda:	2101      	movs	r1, #1
 8001edc:	086a      	lsrs	r2, r5, #1
 8001ede:	400d      	ands	r5, r1
 8001ee0:	4315      	orrs	r5, r2
 8001ee2:	07e2      	lsls	r2, r4, #31
 8001ee4:	4315      	orrs	r5, r2
 8001ee6:	0864      	lsrs	r4, r4, #1
 8001ee8:	494f      	ldr	r1, [pc, #316]	; (8002028 <__aeabi_dmul+0x398>)
 8001eea:	4461      	add	r1, ip
 8001eec:	2900      	cmp	r1, #0
 8001eee:	dc00      	bgt.n	8001ef2 <__aeabi_dmul+0x262>
 8001ef0:	e0b0      	b.n	8002054 <__aeabi_dmul+0x3c4>
 8001ef2:	076b      	lsls	r3, r5, #29
 8001ef4:	d009      	beq.n	8001f0a <__aeabi_dmul+0x27a>
 8001ef6:	220f      	movs	r2, #15
 8001ef8:	402a      	ands	r2, r5
 8001efa:	2a04      	cmp	r2, #4
 8001efc:	d005      	beq.n	8001f0a <__aeabi_dmul+0x27a>
 8001efe:	1d2a      	adds	r2, r5, #4
 8001f00:	42aa      	cmp	r2, r5
 8001f02:	41ad      	sbcs	r5, r5
 8001f04:	426d      	negs	r5, r5
 8001f06:	1964      	adds	r4, r4, r5
 8001f08:	0015      	movs	r5, r2
 8001f0a:	01e3      	lsls	r3, r4, #7
 8001f0c:	d504      	bpl.n	8001f18 <__aeabi_dmul+0x288>
 8001f0e:	2180      	movs	r1, #128	; 0x80
 8001f10:	4a46      	ldr	r2, [pc, #280]	; (800202c <__aeabi_dmul+0x39c>)
 8001f12:	00c9      	lsls	r1, r1, #3
 8001f14:	4014      	ands	r4, r2
 8001f16:	4461      	add	r1, ip
 8001f18:	4a45      	ldr	r2, [pc, #276]	; (8002030 <__aeabi_dmul+0x3a0>)
 8001f1a:	4291      	cmp	r1, r2
 8001f1c:	dd00      	ble.n	8001f20 <__aeabi_dmul+0x290>
 8001f1e:	e726      	b.n	8001d6e <__aeabi_dmul+0xde>
 8001f20:	0762      	lsls	r2, r4, #29
 8001f22:	08ed      	lsrs	r5, r5, #3
 8001f24:	0264      	lsls	r4, r4, #9
 8001f26:	0549      	lsls	r1, r1, #21
 8001f28:	4315      	orrs	r5, r2
 8001f2a:	0b24      	lsrs	r4, r4, #12
 8001f2c:	0d4a      	lsrs	r2, r1, #21
 8001f2e:	e710      	b.n	8001d52 <__aeabi_dmul+0xc2>
 8001f30:	4652      	mov	r2, sl
 8001f32:	4332      	orrs	r2, r6
 8001f34:	d100      	bne.n	8001f38 <__aeabi_dmul+0x2a8>
 8001f36:	e07f      	b.n	8002038 <__aeabi_dmul+0x3a8>
 8001f38:	2e00      	cmp	r6, #0
 8001f3a:	d100      	bne.n	8001f3e <__aeabi_dmul+0x2ae>
 8001f3c:	e0dc      	b.n	80020f8 <__aeabi_dmul+0x468>
 8001f3e:	0030      	movs	r0, r6
 8001f40:	f000 fdf8 	bl	8002b34 <__clzsi2>
 8001f44:	0002      	movs	r2, r0
 8001f46:	3a0b      	subs	r2, #11
 8001f48:	231d      	movs	r3, #29
 8001f4a:	0001      	movs	r1, r0
 8001f4c:	1a9b      	subs	r3, r3, r2
 8001f4e:	4652      	mov	r2, sl
 8001f50:	3908      	subs	r1, #8
 8001f52:	40da      	lsrs	r2, r3
 8001f54:	408e      	lsls	r6, r1
 8001f56:	4316      	orrs	r6, r2
 8001f58:	4652      	mov	r2, sl
 8001f5a:	408a      	lsls	r2, r1
 8001f5c:	9b00      	ldr	r3, [sp, #0]
 8001f5e:	4935      	ldr	r1, [pc, #212]	; (8002034 <__aeabi_dmul+0x3a4>)
 8001f60:	1a18      	subs	r0, r3, r0
 8001f62:	0003      	movs	r3, r0
 8001f64:	468c      	mov	ip, r1
 8001f66:	4463      	add	r3, ip
 8001f68:	2000      	movs	r0, #0
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	e6d3      	b.n	8001d16 <__aeabi_dmul+0x86>
 8001f6e:	0025      	movs	r5, r4
 8001f70:	4305      	orrs	r5, r0
 8001f72:	d04a      	beq.n	800200a <__aeabi_dmul+0x37a>
 8001f74:	2c00      	cmp	r4, #0
 8001f76:	d100      	bne.n	8001f7a <__aeabi_dmul+0x2ea>
 8001f78:	e0b0      	b.n	80020dc <__aeabi_dmul+0x44c>
 8001f7a:	0020      	movs	r0, r4
 8001f7c:	f000 fdda 	bl	8002b34 <__clzsi2>
 8001f80:	0001      	movs	r1, r0
 8001f82:	0002      	movs	r2, r0
 8001f84:	390b      	subs	r1, #11
 8001f86:	231d      	movs	r3, #29
 8001f88:	0010      	movs	r0, r2
 8001f8a:	1a5b      	subs	r3, r3, r1
 8001f8c:	0031      	movs	r1, r6
 8001f8e:	0035      	movs	r5, r6
 8001f90:	3808      	subs	r0, #8
 8001f92:	4084      	lsls	r4, r0
 8001f94:	40d9      	lsrs	r1, r3
 8001f96:	4085      	lsls	r5, r0
 8001f98:	430c      	orrs	r4, r1
 8001f9a:	4826      	ldr	r0, [pc, #152]	; (8002034 <__aeabi_dmul+0x3a4>)
 8001f9c:	1a83      	subs	r3, r0, r2
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	4699      	mov	r9, r3
 8001fa4:	469b      	mov	fp, r3
 8001fa6:	e697      	b.n	8001cd8 <__aeabi_dmul+0x48>
 8001fa8:	0005      	movs	r5, r0
 8001faa:	4325      	orrs	r5, r4
 8001fac:	d126      	bne.n	8001ffc <__aeabi_dmul+0x36c>
 8001fae:	2208      	movs	r2, #8
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	2400      	movs	r4, #0
 8001fb6:	4691      	mov	r9, r2
 8001fb8:	469b      	mov	fp, r3
 8001fba:	e68d      	b.n	8001cd8 <__aeabi_dmul+0x48>
 8001fbc:	4652      	mov	r2, sl
 8001fbe:	9b00      	ldr	r3, [sp, #0]
 8001fc0:	4332      	orrs	r2, r6
 8001fc2:	d110      	bne.n	8001fe6 <__aeabi_dmul+0x356>
 8001fc4:	4915      	ldr	r1, [pc, #84]	; (800201c <__aeabi_dmul+0x38c>)
 8001fc6:	2600      	movs	r6, #0
 8001fc8:	468c      	mov	ip, r1
 8001fca:	4463      	add	r3, ip
 8001fcc:	4649      	mov	r1, r9
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	4319      	orrs	r1, r3
 8001fd4:	4689      	mov	r9, r1
 8001fd6:	2002      	movs	r0, #2
 8001fd8:	e69d      	b.n	8001d16 <__aeabi_dmul+0x86>
 8001fda:	465b      	mov	r3, fp
 8001fdc:	9701      	str	r7, [sp, #4]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d000      	beq.n	8001fe4 <__aeabi_dmul+0x354>
 8001fe2:	e6ad      	b.n	8001d40 <__aeabi_dmul+0xb0>
 8001fe4:	e6c3      	b.n	8001d6e <__aeabi_dmul+0xde>
 8001fe6:	4a0d      	ldr	r2, [pc, #52]	; (800201c <__aeabi_dmul+0x38c>)
 8001fe8:	2003      	movs	r0, #3
 8001fea:	4694      	mov	ip, r2
 8001fec:	4463      	add	r3, ip
 8001fee:	464a      	mov	r2, r9
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	4691      	mov	r9, r2
 8001ff8:	4652      	mov	r2, sl
 8001ffa:	e68c      	b.n	8001d16 <__aeabi_dmul+0x86>
 8001ffc:	220c      	movs	r2, #12
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	2303      	movs	r3, #3
 8002002:	0005      	movs	r5, r0
 8002004:	4691      	mov	r9, r2
 8002006:	469b      	mov	fp, r3
 8002008:	e666      	b.n	8001cd8 <__aeabi_dmul+0x48>
 800200a:	2304      	movs	r3, #4
 800200c:	4699      	mov	r9, r3
 800200e:	2300      	movs	r3, #0
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	3301      	adds	r3, #1
 8002014:	2400      	movs	r4, #0
 8002016:	469b      	mov	fp, r3
 8002018:	e65e      	b.n	8001cd8 <__aeabi_dmul+0x48>
 800201a:	46c0      	nop			; (mov r8, r8)
 800201c:	000007ff 	.word	0x000007ff
 8002020:	fffffc01 	.word	0xfffffc01
 8002024:	08006b48 	.word	0x08006b48
 8002028:	000003ff 	.word	0x000003ff
 800202c:	feffffff 	.word	0xfeffffff
 8002030:	000007fe 	.word	0x000007fe
 8002034:	fffffc0d 	.word	0xfffffc0d
 8002038:	4649      	mov	r1, r9
 800203a:	2301      	movs	r3, #1
 800203c:	4319      	orrs	r1, r3
 800203e:	4689      	mov	r9, r1
 8002040:	2600      	movs	r6, #0
 8002042:	2001      	movs	r0, #1
 8002044:	e667      	b.n	8001d16 <__aeabi_dmul+0x86>
 8002046:	2300      	movs	r3, #0
 8002048:	2480      	movs	r4, #128	; 0x80
 800204a:	2500      	movs	r5, #0
 800204c:	4a43      	ldr	r2, [pc, #268]	; (800215c <__aeabi_dmul+0x4cc>)
 800204e:	9301      	str	r3, [sp, #4]
 8002050:	0324      	lsls	r4, r4, #12
 8002052:	e67e      	b.n	8001d52 <__aeabi_dmul+0xc2>
 8002054:	2001      	movs	r0, #1
 8002056:	1a40      	subs	r0, r0, r1
 8002058:	2838      	cmp	r0, #56	; 0x38
 800205a:	dd00      	ble.n	800205e <__aeabi_dmul+0x3ce>
 800205c:	e676      	b.n	8001d4c <__aeabi_dmul+0xbc>
 800205e:	281f      	cmp	r0, #31
 8002060:	dd5b      	ble.n	800211a <__aeabi_dmul+0x48a>
 8002062:	221f      	movs	r2, #31
 8002064:	0023      	movs	r3, r4
 8002066:	4252      	negs	r2, r2
 8002068:	1a51      	subs	r1, r2, r1
 800206a:	40cb      	lsrs	r3, r1
 800206c:	0019      	movs	r1, r3
 800206e:	2820      	cmp	r0, #32
 8002070:	d003      	beq.n	800207a <__aeabi_dmul+0x3ea>
 8002072:	4a3b      	ldr	r2, [pc, #236]	; (8002160 <__aeabi_dmul+0x4d0>)
 8002074:	4462      	add	r2, ip
 8002076:	4094      	lsls	r4, r2
 8002078:	4325      	orrs	r5, r4
 800207a:	1e6a      	subs	r2, r5, #1
 800207c:	4195      	sbcs	r5, r2
 800207e:	002a      	movs	r2, r5
 8002080:	430a      	orrs	r2, r1
 8002082:	2107      	movs	r1, #7
 8002084:	000d      	movs	r5, r1
 8002086:	2400      	movs	r4, #0
 8002088:	4015      	ands	r5, r2
 800208a:	4211      	tst	r1, r2
 800208c:	d05b      	beq.n	8002146 <__aeabi_dmul+0x4b6>
 800208e:	210f      	movs	r1, #15
 8002090:	2400      	movs	r4, #0
 8002092:	4011      	ands	r1, r2
 8002094:	2904      	cmp	r1, #4
 8002096:	d053      	beq.n	8002140 <__aeabi_dmul+0x4b0>
 8002098:	1d11      	adds	r1, r2, #4
 800209a:	4291      	cmp	r1, r2
 800209c:	4192      	sbcs	r2, r2
 800209e:	4252      	negs	r2, r2
 80020a0:	18a4      	adds	r4, r4, r2
 80020a2:	000a      	movs	r2, r1
 80020a4:	0223      	lsls	r3, r4, #8
 80020a6:	d54b      	bpl.n	8002140 <__aeabi_dmul+0x4b0>
 80020a8:	2201      	movs	r2, #1
 80020aa:	2400      	movs	r4, #0
 80020ac:	2500      	movs	r5, #0
 80020ae:	e650      	b.n	8001d52 <__aeabi_dmul+0xc2>
 80020b0:	2380      	movs	r3, #128	; 0x80
 80020b2:	031b      	lsls	r3, r3, #12
 80020b4:	421c      	tst	r4, r3
 80020b6:	d009      	beq.n	80020cc <__aeabi_dmul+0x43c>
 80020b8:	421e      	tst	r6, r3
 80020ba:	d107      	bne.n	80020cc <__aeabi_dmul+0x43c>
 80020bc:	4333      	orrs	r3, r6
 80020be:	031c      	lsls	r4, r3, #12
 80020c0:	4643      	mov	r3, r8
 80020c2:	0015      	movs	r5, r2
 80020c4:	0b24      	lsrs	r4, r4, #12
 80020c6:	4a25      	ldr	r2, [pc, #148]	; (800215c <__aeabi_dmul+0x4cc>)
 80020c8:	9301      	str	r3, [sp, #4]
 80020ca:	e642      	b.n	8001d52 <__aeabi_dmul+0xc2>
 80020cc:	2280      	movs	r2, #128	; 0x80
 80020ce:	0312      	lsls	r2, r2, #12
 80020d0:	4314      	orrs	r4, r2
 80020d2:	0324      	lsls	r4, r4, #12
 80020d4:	4a21      	ldr	r2, [pc, #132]	; (800215c <__aeabi_dmul+0x4cc>)
 80020d6:	0b24      	lsrs	r4, r4, #12
 80020d8:	9701      	str	r7, [sp, #4]
 80020da:	e63a      	b.n	8001d52 <__aeabi_dmul+0xc2>
 80020dc:	f000 fd2a 	bl	8002b34 <__clzsi2>
 80020e0:	0001      	movs	r1, r0
 80020e2:	0002      	movs	r2, r0
 80020e4:	3115      	adds	r1, #21
 80020e6:	3220      	adds	r2, #32
 80020e8:	291c      	cmp	r1, #28
 80020ea:	dc00      	bgt.n	80020ee <__aeabi_dmul+0x45e>
 80020ec:	e74b      	b.n	8001f86 <__aeabi_dmul+0x2f6>
 80020ee:	0034      	movs	r4, r6
 80020f0:	3808      	subs	r0, #8
 80020f2:	2500      	movs	r5, #0
 80020f4:	4084      	lsls	r4, r0
 80020f6:	e750      	b.n	8001f9a <__aeabi_dmul+0x30a>
 80020f8:	f000 fd1c 	bl	8002b34 <__clzsi2>
 80020fc:	0003      	movs	r3, r0
 80020fe:	001a      	movs	r2, r3
 8002100:	3215      	adds	r2, #21
 8002102:	3020      	adds	r0, #32
 8002104:	2a1c      	cmp	r2, #28
 8002106:	dc00      	bgt.n	800210a <__aeabi_dmul+0x47a>
 8002108:	e71e      	b.n	8001f48 <__aeabi_dmul+0x2b8>
 800210a:	4656      	mov	r6, sl
 800210c:	3b08      	subs	r3, #8
 800210e:	2200      	movs	r2, #0
 8002110:	409e      	lsls	r6, r3
 8002112:	e723      	b.n	8001f5c <__aeabi_dmul+0x2cc>
 8002114:	9b00      	ldr	r3, [sp, #0]
 8002116:	469c      	mov	ip, r3
 8002118:	e6e6      	b.n	8001ee8 <__aeabi_dmul+0x258>
 800211a:	4912      	ldr	r1, [pc, #72]	; (8002164 <__aeabi_dmul+0x4d4>)
 800211c:	0022      	movs	r2, r4
 800211e:	4461      	add	r1, ip
 8002120:	002e      	movs	r6, r5
 8002122:	408d      	lsls	r5, r1
 8002124:	408a      	lsls	r2, r1
 8002126:	40c6      	lsrs	r6, r0
 8002128:	1e69      	subs	r1, r5, #1
 800212a:	418d      	sbcs	r5, r1
 800212c:	4332      	orrs	r2, r6
 800212e:	432a      	orrs	r2, r5
 8002130:	40c4      	lsrs	r4, r0
 8002132:	0753      	lsls	r3, r2, #29
 8002134:	d0b6      	beq.n	80020a4 <__aeabi_dmul+0x414>
 8002136:	210f      	movs	r1, #15
 8002138:	4011      	ands	r1, r2
 800213a:	2904      	cmp	r1, #4
 800213c:	d1ac      	bne.n	8002098 <__aeabi_dmul+0x408>
 800213e:	e7b1      	b.n	80020a4 <__aeabi_dmul+0x414>
 8002140:	0765      	lsls	r5, r4, #29
 8002142:	0264      	lsls	r4, r4, #9
 8002144:	0b24      	lsrs	r4, r4, #12
 8002146:	08d2      	lsrs	r2, r2, #3
 8002148:	4315      	orrs	r5, r2
 800214a:	2200      	movs	r2, #0
 800214c:	e601      	b.n	8001d52 <__aeabi_dmul+0xc2>
 800214e:	2280      	movs	r2, #128	; 0x80
 8002150:	0312      	lsls	r2, r2, #12
 8002152:	4314      	orrs	r4, r2
 8002154:	0324      	lsls	r4, r4, #12
 8002156:	4a01      	ldr	r2, [pc, #4]	; (800215c <__aeabi_dmul+0x4cc>)
 8002158:	0b24      	lsrs	r4, r4, #12
 800215a:	e5fa      	b.n	8001d52 <__aeabi_dmul+0xc2>
 800215c:	000007ff 	.word	0x000007ff
 8002160:	0000043e 	.word	0x0000043e
 8002164:	0000041e 	.word	0x0000041e

08002168 <__aeabi_dsub>:
 8002168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800216a:	4657      	mov	r7, sl
 800216c:	464e      	mov	r6, r9
 800216e:	4645      	mov	r5, r8
 8002170:	46de      	mov	lr, fp
 8002172:	b5e0      	push	{r5, r6, r7, lr}
 8002174:	001e      	movs	r6, r3
 8002176:	0017      	movs	r7, r2
 8002178:	004a      	lsls	r2, r1, #1
 800217a:	030b      	lsls	r3, r1, #12
 800217c:	0d52      	lsrs	r2, r2, #21
 800217e:	0a5b      	lsrs	r3, r3, #9
 8002180:	4690      	mov	r8, r2
 8002182:	0f42      	lsrs	r2, r0, #29
 8002184:	431a      	orrs	r2, r3
 8002186:	0fcd      	lsrs	r5, r1, #31
 8002188:	4ccd      	ldr	r4, [pc, #820]	; (80024c0 <__aeabi_dsub+0x358>)
 800218a:	0331      	lsls	r1, r6, #12
 800218c:	00c3      	lsls	r3, r0, #3
 800218e:	4694      	mov	ip, r2
 8002190:	0070      	lsls	r0, r6, #1
 8002192:	0f7a      	lsrs	r2, r7, #29
 8002194:	0a49      	lsrs	r1, r1, #9
 8002196:	00ff      	lsls	r7, r7, #3
 8002198:	469a      	mov	sl, r3
 800219a:	46b9      	mov	r9, r7
 800219c:	0d40      	lsrs	r0, r0, #21
 800219e:	0ff6      	lsrs	r6, r6, #31
 80021a0:	4311      	orrs	r1, r2
 80021a2:	42a0      	cmp	r0, r4
 80021a4:	d100      	bne.n	80021a8 <__aeabi_dsub+0x40>
 80021a6:	e0b1      	b.n	800230c <__aeabi_dsub+0x1a4>
 80021a8:	2201      	movs	r2, #1
 80021aa:	4056      	eors	r6, r2
 80021ac:	46b3      	mov	fp, r6
 80021ae:	42b5      	cmp	r5, r6
 80021b0:	d100      	bne.n	80021b4 <__aeabi_dsub+0x4c>
 80021b2:	e088      	b.n	80022c6 <__aeabi_dsub+0x15e>
 80021b4:	4642      	mov	r2, r8
 80021b6:	1a12      	subs	r2, r2, r0
 80021b8:	2a00      	cmp	r2, #0
 80021ba:	dc00      	bgt.n	80021be <__aeabi_dsub+0x56>
 80021bc:	e0ae      	b.n	800231c <__aeabi_dsub+0x1b4>
 80021be:	2800      	cmp	r0, #0
 80021c0:	d100      	bne.n	80021c4 <__aeabi_dsub+0x5c>
 80021c2:	e0c1      	b.n	8002348 <__aeabi_dsub+0x1e0>
 80021c4:	48be      	ldr	r0, [pc, #760]	; (80024c0 <__aeabi_dsub+0x358>)
 80021c6:	4580      	cmp	r8, r0
 80021c8:	d100      	bne.n	80021cc <__aeabi_dsub+0x64>
 80021ca:	e151      	b.n	8002470 <__aeabi_dsub+0x308>
 80021cc:	2080      	movs	r0, #128	; 0x80
 80021ce:	0400      	lsls	r0, r0, #16
 80021d0:	4301      	orrs	r1, r0
 80021d2:	2a38      	cmp	r2, #56	; 0x38
 80021d4:	dd00      	ble.n	80021d8 <__aeabi_dsub+0x70>
 80021d6:	e17b      	b.n	80024d0 <__aeabi_dsub+0x368>
 80021d8:	2a1f      	cmp	r2, #31
 80021da:	dd00      	ble.n	80021de <__aeabi_dsub+0x76>
 80021dc:	e1ee      	b.n	80025bc <__aeabi_dsub+0x454>
 80021de:	2020      	movs	r0, #32
 80021e0:	003e      	movs	r6, r7
 80021e2:	1a80      	subs	r0, r0, r2
 80021e4:	000c      	movs	r4, r1
 80021e6:	40d6      	lsrs	r6, r2
 80021e8:	40d1      	lsrs	r1, r2
 80021ea:	4087      	lsls	r7, r0
 80021ec:	4662      	mov	r2, ip
 80021ee:	4084      	lsls	r4, r0
 80021f0:	1a52      	subs	r2, r2, r1
 80021f2:	1e78      	subs	r0, r7, #1
 80021f4:	4187      	sbcs	r7, r0
 80021f6:	4694      	mov	ip, r2
 80021f8:	4334      	orrs	r4, r6
 80021fa:	4327      	orrs	r7, r4
 80021fc:	1bdc      	subs	r4, r3, r7
 80021fe:	42a3      	cmp	r3, r4
 8002200:	419b      	sbcs	r3, r3
 8002202:	4662      	mov	r2, ip
 8002204:	425b      	negs	r3, r3
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	4699      	mov	r9, r3
 800220a:	464b      	mov	r3, r9
 800220c:	021b      	lsls	r3, r3, #8
 800220e:	d400      	bmi.n	8002212 <__aeabi_dsub+0xaa>
 8002210:	e118      	b.n	8002444 <__aeabi_dsub+0x2dc>
 8002212:	464b      	mov	r3, r9
 8002214:	0258      	lsls	r0, r3, #9
 8002216:	0a43      	lsrs	r3, r0, #9
 8002218:	4699      	mov	r9, r3
 800221a:	464b      	mov	r3, r9
 800221c:	2b00      	cmp	r3, #0
 800221e:	d100      	bne.n	8002222 <__aeabi_dsub+0xba>
 8002220:	e137      	b.n	8002492 <__aeabi_dsub+0x32a>
 8002222:	4648      	mov	r0, r9
 8002224:	f000 fc86 	bl	8002b34 <__clzsi2>
 8002228:	0001      	movs	r1, r0
 800222a:	3908      	subs	r1, #8
 800222c:	2320      	movs	r3, #32
 800222e:	0022      	movs	r2, r4
 8002230:	4648      	mov	r0, r9
 8002232:	1a5b      	subs	r3, r3, r1
 8002234:	40da      	lsrs	r2, r3
 8002236:	4088      	lsls	r0, r1
 8002238:	408c      	lsls	r4, r1
 800223a:	4643      	mov	r3, r8
 800223c:	4310      	orrs	r0, r2
 800223e:	4588      	cmp	r8, r1
 8002240:	dd00      	ble.n	8002244 <__aeabi_dsub+0xdc>
 8002242:	e136      	b.n	80024b2 <__aeabi_dsub+0x34a>
 8002244:	1ac9      	subs	r1, r1, r3
 8002246:	1c4b      	adds	r3, r1, #1
 8002248:	2b1f      	cmp	r3, #31
 800224a:	dd00      	ble.n	800224e <__aeabi_dsub+0xe6>
 800224c:	e0ea      	b.n	8002424 <__aeabi_dsub+0x2bc>
 800224e:	2220      	movs	r2, #32
 8002250:	0026      	movs	r6, r4
 8002252:	1ad2      	subs	r2, r2, r3
 8002254:	0001      	movs	r1, r0
 8002256:	4094      	lsls	r4, r2
 8002258:	40de      	lsrs	r6, r3
 800225a:	40d8      	lsrs	r0, r3
 800225c:	2300      	movs	r3, #0
 800225e:	4091      	lsls	r1, r2
 8002260:	1e62      	subs	r2, r4, #1
 8002262:	4194      	sbcs	r4, r2
 8002264:	4681      	mov	r9, r0
 8002266:	4698      	mov	r8, r3
 8002268:	4331      	orrs	r1, r6
 800226a:	430c      	orrs	r4, r1
 800226c:	0763      	lsls	r3, r4, #29
 800226e:	d009      	beq.n	8002284 <__aeabi_dsub+0x11c>
 8002270:	230f      	movs	r3, #15
 8002272:	4023      	ands	r3, r4
 8002274:	2b04      	cmp	r3, #4
 8002276:	d005      	beq.n	8002284 <__aeabi_dsub+0x11c>
 8002278:	1d23      	adds	r3, r4, #4
 800227a:	42a3      	cmp	r3, r4
 800227c:	41a4      	sbcs	r4, r4
 800227e:	4264      	negs	r4, r4
 8002280:	44a1      	add	r9, r4
 8002282:	001c      	movs	r4, r3
 8002284:	464b      	mov	r3, r9
 8002286:	021b      	lsls	r3, r3, #8
 8002288:	d400      	bmi.n	800228c <__aeabi_dsub+0x124>
 800228a:	e0de      	b.n	800244a <__aeabi_dsub+0x2e2>
 800228c:	4641      	mov	r1, r8
 800228e:	4b8c      	ldr	r3, [pc, #560]	; (80024c0 <__aeabi_dsub+0x358>)
 8002290:	3101      	adds	r1, #1
 8002292:	4299      	cmp	r1, r3
 8002294:	d100      	bne.n	8002298 <__aeabi_dsub+0x130>
 8002296:	e0e7      	b.n	8002468 <__aeabi_dsub+0x300>
 8002298:	464b      	mov	r3, r9
 800229a:	488a      	ldr	r0, [pc, #552]	; (80024c4 <__aeabi_dsub+0x35c>)
 800229c:	08e4      	lsrs	r4, r4, #3
 800229e:	4003      	ands	r3, r0
 80022a0:	0018      	movs	r0, r3
 80022a2:	0549      	lsls	r1, r1, #21
 80022a4:	075b      	lsls	r3, r3, #29
 80022a6:	0240      	lsls	r0, r0, #9
 80022a8:	4323      	orrs	r3, r4
 80022aa:	0d4a      	lsrs	r2, r1, #21
 80022ac:	0b04      	lsrs	r4, r0, #12
 80022ae:	0512      	lsls	r2, r2, #20
 80022b0:	07ed      	lsls	r5, r5, #31
 80022b2:	4322      	orrs	r2, r4
 80022b4:	432a      	orrs	r2, r5
 80022b6:	0018      	movs	r0, r3
 80022b8:	0011      	movs	r1, r2
 80022ba:	bcf0      	pop	{r4, r5, r6, r7}
 80022bc:	46bb      	mov	fp, r7
 80022be:	46b2      	mov	sl, r6
 80022c0:	46a9      	mov	r9, r5
 80022c2:	46a0      	mov	r8, r4
 80022c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022c6:	4642      	mov	r2, r8
 80022c8:	1a12      	subs	r2, r2, r0
 80022ca:	2a00      	cmp	r2, #0
 80022cc:	dd52      	ble.n	8002374 <__aeabi_dsub+0x20c>
 80022ce:	2800      	cmp	r0, #0
 80022d0:	d100      	bne.n	80022d4 <__aeabi_dsub+0x16c>
 80022d2:	e09c      	b.n	800240e <__aeabi_dsub+0x2a6>
 80022d4:	45a0      	cmp	r8, r4
 80022d6:	d100      	bne.n	80022da <__aeabi_dsub+0x172>
 80022d8:	e0ca      	b.n	8002470 <__aeabi_dsub+0x308>
 80022da:	2080      	movs	r0, #128	; 0x80
 80022dc:	0400      	lsls	r0, r0, #16
 80022de:	4301      	orrs	r1, r0
 80022e0:	2a38      	cmp	r2, #56	; 0x38
 80022e2:	dd00      	ble.n	80022e6 <__aeabi_dsub+0x17e>
 80022e4:	e149      	b.n	800257a <__aeabi_dsub+0x412>
 80022e6:	2a1f      	cmp	r2, #31
 80022e8:	dc00      	bgt.n	80022ec <__aeabi_dsub+0x184>
 80022ea:	e197      	b.n	800261c <__aeabi_dsub+0x4b4>
 80022ec:	0010      	movs	r0, r2
 80022ee:	000e      	movs	r6, r1
 80022f0:	3820      	subs	r0, #32
 80022f2:	40c6      	lsrs	r6, r0
 80022f4:	2a20      	cmp	r2, #32
 80022f6:	d004      	beq.n	8002302 <__aeabi_dsub+0x19a>
 80022f8:	2040      	movs	r0, #64	; 0x40
 80022fa:	1a82      	subs	r2, r0, r2
 80022fc:	4091      	lsls	r1, r2
 80022fe:	430f      	orrs	r7, r1
 8002300:	46b9      	mov	r9, r7
 8002302:	464c      	mov	r4, r9
 8002304:	1e62      	subs	r2, r4, #1
 8002306:	4194      	sbcs	r4, r2
 8002308:	4334      	orrs	r4, r6
 800230a:	e13a      	b.n	8002582 <__aeabi_dsub+0x41a>
 800230c:	000a      	movs	r2, r1
 800230e:	433a      	orrs	r2, r7
 8002310:	d028      	beq.n	8002364 <__aeabi_dsub+0x1fc>
 8002312:	46b3      	mov	fp, r6
 8002314:	42b5      	cmp	r5, r6
 8002316:	d02b      	beq.n	8002370 <__aeabi_dsub+0x208>
 8002318:	4a6b      	ldr	r2, [pc, #428]	; (80024c8 <__aeabi_dsub+0x360>)
 800231a:	4442      	add	r2, r8
 800231c:	2a00      	cmp	r2, #0
 800231e:	d05d      	beq.n	80023dc <__aeabi_dsub+0x274>
 8002320:	4642      	mov	r2, r8
 8002322:	4644      	mov	r4, r8
 8002324:	1a82      	subs	r2, r0, r2
 8002326:	2c00      	cmp	r4, #0
 8002328:	d000      	beq.n	800232c <__aeabi_dsub+0x1c4>
 800232a:	e0f5      	b.n	8002518 <__aeabi_dsub+0x3b0>
 800232c:	4665      	mov	r5, ip
 800232e:	431d      	orrs	r5, r3
 8002330:	d100      	bne.n	8002334 <__aeabi_dsub+0x1cc>
 8002332:	e19c      	b.n	800266e <__aeabi_dsub+0x506>
 8002334:	1e55      	subs	r5, r2, #1
 8002336:	2a01      	cmp	r2, #1
 8002338:	d100      	bne.n	800233c <__aeabi_dsub+0x1d4>
 800233a:	e1fb      	b.n	8002734 <__aeabi_dsub+0x5cc>
 800233c:	4c60      	ldr	r4, [pc, #384]	; (80024c0 <__aeabi_dsub+0x358>)
 800233e:	42a2      	cmp	r2, r4
 8002340:	d100      	bne.n	8002344 <__aeabi_dsub+0x1dc>
 8002342:	e1bd      	b.n	80026c0 <__aeabi_dsub+0x558>
 8002344:	002a      	movs	r2, r5
 8002346:	e0f0      	b.n	800252a <__aeabi_dsub+0x3c2>
 8002348:	0008      	movs	r0, r1
 800234a:	4338      	orrs	r0, r7
 800234c:	d100      	bne.n	8002350 <__aeabi_dsub+0x1e8>
 800234e:	e0c3      	b.n	80024d8 <__aeabi_dsub+0x370>
 8002350:	1e50      	subs	r0, r2, #1
 8002352:	2a01      	cmp	r2, #1
 8002354:	d100      	bne.n	8002358 <__aeabi_dsub+0x1f0>
 8002356:	e1a8      	b.n	80026aa <__aeabi_dsub+0x542>
 8002358:	4c59      	ldr	r4, [pc, #356]	; (80024c0 <__aeabi_dsub+0x358>)
 800235a:	42a2      	cmp	r2, r4
 800235c:	d100      	bne.n	8002360 <__aeabi_dsub+0x1f8>
 800235e:	e087      	b.n	8002470 <__aeabi_dsub+0x308>
 8002360:	0002      	movs	r2, r0
 8002362:	e736      	b.n	80021d2 <__aeabi_dsub+0x6a>
 8002364:	2201      	movs	r2, #1
 8002366:	4056      	eors	r6, r2
 8002368:	46b3      	mov	fp, r6
 800236a:	42b5      	cmp	r5, r6
 800236c:	d000      	beq.n	8002370 <__aeabi_dsub+0x208>
 800236e:	e721      	b.n	80021b4 <__aeabi_dsub+0x4c>
 8002370:	4a55      	ldr	r2, [pc, #340]	; (80024c8 <__aeabi_dsub+0x360>)
 8002372:	4442      	add	r2, r8
 8002374:	2a00      	cmp	r2, #0
 8002376:	d100      	bne.n	800237a <__aeabi_dsub+0x212>
 8002378:	e0b5      	b.n	80024e6 <__aeabi_dsub+0x37e>
 800237a:	4642      	mov	r2, r8
 800237c:	4644      	mov	r4, r8
 800237e:	1a82      	subs	r2, r0, r2
 8002380:	2c00      	cmp	r4, #0
 8002382:	d100      	bne.n	8002386 <__aeabi_dsub+0x21e>
 8002384:	e138      	b.n	80025f8 <__aeabi_dsub+0x490>
 8002386:	4e4e      	ldr	r6, [pc, #312]	; (80024c0 <__aeabi_dsub+0x358>)
 8002388:	42b0      	cmp	r0, r6
 800238a:	d100      	bne.n	800238e <__aeabi_dsub+0x226>
 800238c:	e1de      	b.n	800274c <__aeabi_dsub+0x5e4>
 800238e:	2680      	movs	r6, #128	; 0x80
 8002390:	4664      	mov	r4, ip
 8002392:	0436      	lsls	r6, r6, #16
 8002394:	4334      	orrs	r4, r6
 8002396:	46a4      	mov	ip, r4
 8002398:	2a38      	cmp	r2, #56	; 0x38
 800239a:	dd00      	ble.n	800239e <__aeabi_dsub+0x236>
 800239c:	e196      	b.n	80026cc <__aeabi_dsub+0x564>
 800239e:	2a1f      	cmp	r2, #31
 80023a0:	dd00      	ble.n	80023a4 <__aeabi_dsub+0x23c>
 80023a2:	e224      	b.n	80027ee <__aeabi_dsub+0x686>
 80023a4:	2620      	movs	r6, #32
 80023a6:	1ab4      	subs	r4, r6, r2
 80023a8:	46a2      	mov	sl, r4
 80023aa:	4664      	mov	r4, ip
 80023ac:	4656      	mov	r6, sl
 80023ae:	40b4      	lsls	r4, r6
 80023b0:	46a1      	mov	r9, r4
 80023b2:	001c      	movs	r4, r3
 80023b4:	464e      	mov	r6, r9
 80023b6:	40d4      	lsrs	r4, r2
 80023b8:	4326      	orrs	r6, r4
 80023ba:	0034      	movs	r4, r6
 80023bc:	4656      	mov	r6, sl
 80023be:	40b3      	lsls	r3, r6
 80023c0:	1e5e      	subs	r6, r3, #1
 80023c2:	41b3      	sbcs	r3, r6
 80023c4:	431c      	orrs	r4, r3
 80023c6:	4663      	mov	r3, ip
 80023c8:	40d3      	lsrs	r3, r2
 80023ca:	18c9      	adds	r1, r1, r3
 80023cc:	19e4      	adds	r4, r4, r7
 80023ce:	42bc      	cmp	r4, r7
 80023d0:	41bf      	sbcs	r7, r7
 80023d2:	427f      	negs	r7, r7
 80023d4:	46b9      	mov	r9, r7
 80023d6:	4680      	mov	r8, r0
 80023d8:	4489      	add	r9, r1
 80023da:	e0d8      	b.n	800258e <__aeabi_dsub+0x426>
 80023dc:	4640      	mov	r0, r8
 80023de:	4c3b      	ldr	r4, [pc, #236]	; (80024cc <__aeabi_dsub+0x364>)
 80023e0:	3001      	adds	r0, #1
 80023e2:	4220      	tst	r0, r4
 80023e4:	d000      	beq.n	80023e8 <__aeabi_dsub+0x280>
 80023e6:	e0b4      	b.n	8002552 <__aeabi_dsub+0x3ea>
 80023e8:	4640      	mov	r0, r8
 80023ea:	2800      	cmp	r0, #0
 80023ec:	d000      	beq.n	80023f0 <__aeabi_dsub+0x288>
 80023ee:	e144      	b.n	800267a <__aeabi_dsub+0x512>
 80023f0:	4660      	mov	r0, ip
 80023f2:	4318      	orrs	r0, r3
 80023f4:	d100      	bne.n	80023f8 <__aeabi_dsub+0x290>
 80023f6:	e190      	b.n	800271a <__aeabi_dsub+0x5b2>
 80023f8:	0008      	movs	r0, r1
 80023fa:	4338      	orrs	r0, r7
 80023fc:	d000      	beq.n	8002400 <__aeabi_dsub+0x298>
 80023fe:	e1aa      	b.n	8002756 <__aeabi_dsub+0x5ee>
 8002400:	4661      	mov	r1, ip
 8002402:	08db      	lsrs	r3, r3, #3
 8002404:	0749      	lsls	r1, r1, #29
 8002406:	430b      	orrs	r3, r1
 8002408:	4661      	mov	r1, ip
 800240a:	08cc      	lsrs	r4, r1, #3
 800240c:	e027      	b.n	800245e <__aeabi_dsub+0x2f6>
 800240e:	0008      	movs	r0, r1
 8002410:	4338      	orrs	r0, r7
 8002412:	d061      	beq.n	80024d8 <__aeabi_dsub+0x370>
 8002414:	1e50      	subs	r0, r2, #1
 8002416:	2a01      	cmp	r2, #1
 8002418:	d100      	bne.n	800241c <__aeabi_dsub+0x2b4>
 800241a:	e139      	b.n	8002690 <__aeabi_dsub+0x528>
 800241c:	42a2      	cmp	r2, r4
 800241e:	d027      	beq.n	8002470 <__aeabi_dsub+0x308>
 8002420:	0002      	movs	r2, r0
 8002422:	e75d      	b.n	80022e0 <__aeabi_dsub+0x178>
 8002424:	0002      	movs	r2, r0
 8002426:	391f      	subs	r1, #31
 8002428:	40ca      	lsrs	r2, r1
 800242a:	0011      	movs	r1, r2
 800242c:	2b20      	cmp	r3, #32
 800242e:	d003      	beq.n	8002438 <__aeabi_dsub+0x2d0>
 8002430:	2240      	movs	r2, #64	; 0x40
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	4098      	lsls	r0, r3
 8002436:	4304      	orrs	r4, r0
 8002438:	1e63      	subs	r3, r4, #1
 800243a:	419c      	sbcs	r4, r3
 800243c:	2300      	movs	r3, #0
 800243e:	4699      	mov	r9, r3
 8002440:	4698      	mov	r8, r3
 8002442:	430c      	orrs	r4, r1
 8002444:	0763      	lsls	r3, r4, #29
 8002446:	d000      	beq.n	800244a <__aeabi_dsub+0x2e2>
 8002448:	e712      	b.n	8002270 <__aeabi_dsub+0x108>
 800244a:	464b      	mov	r3, r9
 800244c:	464a      	mov	r2, r9
 800244e:	08e4      	lsrs	r4, r4, #3
 8002450:	075b      	lsls	r3, r3, #29
 8002452:	4323      	orrs	r3, r4
 8002454:	08d4      	lsrs	r4, r2, #3
 8002456:	4642      	mov	r2, r8
 8002458:	4919      	ldr	r1, [pc, #100]	; (80024c0 <__aeabi_dsub+0x358>)
 800245a:	428a      	cmp	r2, r1
 800245c:	d00e      	beq.n	800247c <__aeabi_dsub+0x314>
 800245e:	0324      	lsls	r4, r4, #12
 8002460:	0552      	lsls	r2, r2, #21
 8002462:	0b24      	lsrs	r4, r4, #12
 8002464:	0d52      	lsrs	r2, r2, #21
 8002466:	e722      	b.n	80022ae <__aeabi_dsub+0x146>
 8002468:	000a      	movs	r2, r1
 800246a:	2400      	movs	r4, #0
 800246c:	2300      	movs	r3, #0
 800246e:	e71e      	b.n	80022ae <__aeabi_dsub+0x146>
 8002470:	08db      	lsrs	r3, r3, #3
 8002472:	4662      	mov	r2, ip
 8002474:	0752      	lsls	r2, r2, #29
 8002476:	4313      	orrs	r3, r2
 8002478:	4662      	mov	r2, ip
 800247a:	08d4      	lsrs	r4, r2, #3
 800247c:	001a      	movs	r2, r3
 800247e:	4322      	orrs	r2, r4
 8002480:	d100      	bne.n	8002484 <__aeabi_dsub+0x31c>
 8002482:	e1fc      	b.n	800287e <__aeabi_dsub+0x716>
 8002484:	2280      	movs	r2, #128	; 0x80
 8002486:	0312      	lsls	r2, r2, #12
 8002488:	4314      	orrs	r4, r2
 800248a:	0324      	lsls	r4, r4, #12
 800248c:	4a0c      	ldr	r2, [pc, #48]	; (80024c0 <__aeabi_dsub+0x358>)
 800248e:	0b24      	lsrs	r4, r4, #12
 8002490:	e70d      	b.n	80022ae <__aeabi_dsub+0x146>
 8002492:	0020      	movs	r0, r4
 8002494:	f000 fb4e 	bl	8002b34 <__clzsi2>
 8002498:	0001      	movs	r1, r0
 800249a:	3118      	adds	r1, #24
 800249c:	291f      	cmp	r1, #31
 800249e:	dc00      	bgt.n	80024a2 <__aeabi_dsub+0x33a>
 80024a0:	e6c4      	b.n	800222c <__aeabi_dsub+0xc4>
 80024a2:	3808      	subs	r0, #8
 80024a4:	4084      	lsls	r4, r0
 80024a6:	4643      	mov	r3, r8
 80024a8:	0020      	movs	r0, r4
 80024aa:	2400      	movs	r4, #0
 80024ac:	4588      	cmp	r8, r1
 80024ae:	dc00      	bgt.n	80024b2 <__aeabi_dsub+0x34a>
 80024b0:	e6c8      	b.n	8002244 <__aeabi_dsub+0xdc>
 80024b2:	4a04      	ldr	r2, [pc, #16]	; (80024c4 <__aeabi_dsub+0x35c>)
 80024b4:	1a5b      	subs	r3, r3, r1
 80024b6:	4010      	ands	r0, r2
 80024b8:	4698      	mov	r8, r3
 80024ba:	4681      	mov	r9, r0
 80024bc:	e6d6      	b.n	800226c <__aeabi_dsub+0x104>
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	000007ff 	.word	0x000007ff
 80024c4:	ff7fffff 	.word	0xff7fffff
 80024c8:	fffff801 	.word	0xfffff801
 80024cc:	000007fe 	.word	0x000007fe
 80024d0:	430f      	orrs	r7, r1
 80024d2:	1e7a      	subs	r2, r7, #1
 80024d4:	4197      	sbcs	r7, r2
 80024d6:	e691      	b.n	80021fc <__aeabi_dsub+0x94>
 80024d8:	4661      	mov	r1, ip
 80024da:	08db      	lsrs	r3, r3, #3
 80024dc:	0749      	lsls	r1, r1, #29
 80024de:	430b      	orrs	r3, r1
 80024e0:	4661      	mov	r1, ip
 80024e2:	08cc      	lsrs	r4, r1, #3
 80024e4:	e7b8      	b.n	8002458 <__aeabi_dsub+0x2f0>
 80024e6:	4640      	mov	r0, r8
 80024e8:	4cd3      	ldr	r4, [pc, #844]	; (8002838 <__aeabi_dsub+0x6d0>)
 80024ea:	3001      	adds	r0, #1
 80024ec:	4220      	tst	r0, r4
 80024ee:	d000      	beq.n	80024f2 <__aeabi_dsub+0x38a>
 80024f0:	e0a2      	b.n	8002638 <__aeabi_dsub+0x4d0>
 80024f2:	4640      	mov	r0, r8
 80024f4:	2800      	cmp	r0, #0
 80024f6:	d000      	beq.n	80024fa <__aeabi_dsub+0x392>
 80024f8:	e101      	b.n	80026fe <__aeabi_dsub+0x596>
 80024fa:	4660      	mov	r0, ip
 80024fc:	4318      	orrs	r0, r3
 80024fe:	d100      	bne.n	8002502 <__aeabi_dsub+0x39a>
 8002500:	e15e      	b.n	80027c0 <__aeabi_dsub+0x658>
 8002502:	0008      	movs	r0, r1
 8002504:	4338      	orrs	r0, r7
 8002506:	d000      	beq.n	800250a <__aeabi_dsub+0x3a2>
 8002508:	e15f      	b.n	80027ca <__aeabi_dsub+0x662>
 800250a:	4661      	mov	r1, ip
 800250c:	08db      	lsrs	r3, r3, #3
 800250e:	0749      	lsls	r1, r1, #29
 8002510:	430b      	orrs	r3, r1
 8002512:	4661      	mov	r1, ip
 8002514:	08cc      	lsrs	r4, r1, #3
 8002516:	e7a2      	b.n	800245e <__aeabi_dsub+0x2f6>
 8002518:	4dc8      	ldr	r5, [pc, #800]	; (800283c <__aeabi_dsub+0x6d4>)
 800251a:	42a8      	cmp	r0, r5
 800251c:	d100      	bne.n	8002520 <__aeabi_dsub+0x3b8>
 800251e:	e0cf      	b.n	80026c0 <__aeabi_dsub+0x558>
 8002520:	2580      	movs	r5, #128	; 0x80
 8002522:	4664      	mov	r4, ip
 8002524:	042d      	lsls	r5, r5, #16
 8002526:	432c      	orrs	r4, r5
 8002528:	46a4      	mov	ip, r4
 800252a:	2a38      	cmp	r2, #56	; 0x38
 800252c:	dc56      	bgt.n	80025dc <__aeabi_dsub+0x474>
 800252e:	2a1f      	cmp	r2, #31
 8002530:	dd00      	ble.n	8002534 <__aeabi_dsub+0x3cc>
 8002532:	e0d1      	b.n	80026d8 <__aeabi_dsub+0x570>
 8002534:	2520      	movs	r5, #32
 8002536:	001e      	movs	r6, r3
 8002538:	1aad      	subs	r5, r5, r2
 800253a:	4664      	mov	r4, ip
 800253c:	40ab      	lsls	r3, r5
 800253e:	40ac      	lsls	r4, r5
 8002540:	40d6      	lsrs	r6, r2
 8002542:	1e5d      	subs	r5, r3, #1
 8002544:	41ab      	sbcs	r3, r5
 8002546:	4334      	orrs	r4, r6
 8002548:	4323      	orrs	r3, r4
 800254a:	4664      	mov	r4, ip
 800254c:	40d4      	lsrs	r4, r2
 800254e:	1b09      	subs	r1, r1, r4
 8002550:	e049      	b.n	80025e6 <__aeabi_dsub+0x47e>
 8002552:	4660      	mov	r0, ip
 8002554:	1bdc      	subs	r4, r3, r7
 8002556:	1a46      	subs	r6, r0, r1
 8002558:	42a3      	cmp	r3, r4
 800255a:	4180      	sbcs	r0, r0
 800255c:	4240      	negs	r0, r0
 800255e:	4681      	mov	r9, r0
 8002560:	0030      	movs	r0, r6
 8002562:	464e      	mov	r6, r9
 8002564:	1b80      	subs	r0, r0, r6
 8002566:	4681      	mov	r9, r0
 8002568:	0200      	lsls	r0, r0, #8
 800256a:	d476      	bmi.n	800265a <__aeabi_dsub+0x4f2>
 800256c:	464b      	mov	r3, r9
 800256e:	4323      	orrs	r3, r4
 8002570:	d000      	beq.n	8002574 <__aeabi_dsub+0x40c>
 8002572:	e652      	b.n	800221a <__aeabi_dsub+0xb2>
 8002574:	2400      	movs	r4, #0
 8002576:	2500      	movs	r5, #0
 8002578:	e771      	b.n	800245e <__aeabi_dsub+0x2f6>
 800257a:	4339      	orrs	r1, r7
 800257c:	000c      	movs	r4, r1
 800257e:	1e62      	subs	r2, r4, #1
 8002580:	4194      	sbcs	r4, r2
 8002582:	18e4      	adds	r4, r4, r3
 8002584:	429c      	cmp	r4, r3
 8002586:	419b      	sbcs	r3, r3
 8002588:	425b      	negs	r3, r3
 800258a:	4463      	add	r3, ip
 800258c:	4699      	mov	r9, r3
 800258e:	464b      	mov	r3, r9
 8002590:	021b      	lsls	r3, r3, #8
 8002592:	d400      	bmi.n	8002596 <__aeabi_dsub+0x42e>
 8002594:	e756      	b.n	8002444 <__aeabi_dsub+0x2dc>
 8002596:	2301      	movs	r3, #1
 8002598:	469c      	mov	ip, r3
 800259a:	4ba8      	ldr	r3, [pc, #672]	; (800283c <__aeabi_dsub+0x6d4>)
 800259c:	44e0      	add	r8, ip
 800259e:	4598      	cmp	r8, r3
 80025a0:	d038      	beq.n	8002614 <__aeabi_dsub+0x4ac>
 80025a2:	464b      	mov	r3, r9
 80025a4:	48a6      	ldr	r0, [pc, #664]	; (8002840 <__aeabi_dsub+0x6d8>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	4003      	ands	r3, r0
 80025aa:	0018      	movs	r0, r3
 80025ac:	0863      	lsrs	r3, r4, #1
 80025ae:	4014      	ands	r4, r2
 80025b0:	431c      	orrs	r4, r3
 80025b2:	07c3      	lsls	r3, r0, #31
 80025b4:	431c      	orrs	r4, r3
 80025b6:	0843      	lsrs	r3, r0, #1
 80025b8:	4699      	mov	r9, r3
 80025ba:	e657      	b.n	800226c <__aeabi_dsub+0x104>
 80025bc:	0010      	movs	r0, r2
 80025be:	000e      	movs	r6, r1
 80025c0:	3820      	subs	r0, #32
 80025c2:	40c6      	lsrs	r6, r0
 80025c4:	2a20      	cmp	r2, #32
 80025c6:	d004      	beq.n	80025d2 <__aeabi_dsub+0x46a>
 80025c8:	2040      	movs	r0, #64	; 0x40
 80025ca:	1a82      	subs	r2, r0, r2
 80025cc:	4091      	lsls	r1, r2
 80025ce:	430f      	orrs	r7, r1
 80025d0:	46b9      	mov	r9, r7
 80025d2:	464f      	mov	r7, r9
 80025d4:	1e7a      	subs	r2, r7, #1
 80025d6:	4197      	sbcs	r7, r2
 80025d8:	4337      	orrs	r7, r6
 80025da:	e60f      	b.n	80021fc <__aeabi_dsub+0x94>
 80025dc:	4662      	mov	r2, ip
 80025de:	431a      	orrs	r2, r3
 80025e0:	0013      	movs	r3, r2
 80025e2:	1e5a      	subs	r2, r3, #1
 80025e4:	4193      	sbcs	r3, r2
 80025e6:	1afc      	subs	r4, r7, r3
 80025e8:	42a7      	cmp	r7, r4
 80025ea:	41bf      	sbcs	r7, r7
 80025ec:	427f      	negs	r7, r7
 80025ee:	1bcb      	subs	r3, r1, r7
 80025f0:	4699      	mov	r9, r3
 80025f2:	465d      	mov	r5, fp
 80025f4:	4680      	mov	r8, r0
 80025f6:	e608      	b.n	800220a <__aeabi_dsub+0xa2>
 80025f8:	4666      	mov	r6, ip
 80025fa:	431e      	orrs	r6, r3
 80025fc:	d100      	bne.n	8002600 <__aeabi_dsub+0x498>
 80025fe:	e0be      	b.n	800277e <__aeabi_dsub+0x616>
 8002600:	1e56      	subs	r6, r2, #1
 8002602:	2a01      	cmp	r2, #1
 8002604:	d100      	bne.n	8002608 <__aeabi_dsub+0x4a0>
 8002606:	e109      	b.n	800281c <__aeabi_dsub+0x6b4>
 8002608:	4c8c      	ldr	r4, [pc, #560]	; (800283c <__aeabi_dsub+0x6d4>)
 800260a:	42a2      	cmp	r2, r4
 800260c:	d100      	bne.n	8002610 <__aeabi_dsub+0x4a8>
 800260e:	e119      	b.n	8002844 <__aeabi_dsub+0x6dc>
 8002610:	0032      	movs	r2, r6
 8002612:	e6c1      	b.n	8002398 <__aeabi_dsub+0x230>
 8002614:	4642      	mov	r2, r8
 8002616:	2400      	movs	r4, #0
 8002618:	2300      	movs	r3, #0
 800261a:	e648      	b.n	80022ae <__aeabi_dsub+0x146>
 800261c:	2020      	movs	r0, #32
 800261e:	000c      	movs	r4, r1
 8002620:	1a80      	subs	r0, r0, r2
 8002622:	003e      	movs	r6, r7
 8002624:	4087      	lsls	r7, r0
 8002626:	4084      	lsls	r4, r0
 8002628:	40d6      	lsrs	r6, r2
 800262a:	1e78      	subs	r0, r7, #1
 800262c:	4187      	sbcs	r7, r0
 800262e:	40d1      	lsrs	r1, r2
 8002630:	4334      	orrs	r4, r6
 8002632:	433c      	orrs	r4, r7
 8002634:	448c      	add	ip, r1
 8002636:	e7a4      	b.n	8002582 <__aeabi_dsub+0x41a>
 8002638:	4a80      	ldr	r2, [pc, #512]	; (800283c <__aeabi_dsub+0x6d4>)
 800263a:	4290      	cmp	r0, r2
 800263c:	d100      	bne.n	8002640 <__aeabi_dsub+0x4d8>
 800263e:	e0e9      	b.n	8002814 <__aeabi_dsub+0x6ac>
 8002640:	19df      	adds	r7, r3, r7
 8002642:	429f      	cmp	r7, r3
 8002644:	419b      	sbcs	r3, r3
 8002646:	4461      	add	r1, ip
 8002648:	425b      	negs	r3, r3
 800264a:	18c9      	adds	r1, r1, r3
 800264c:	07cc      	lsls	r4, r1, #31
 800264e:	087f      	lsrs	r7, r7, #1
 8002650:	084b      	lsrs	r3, r1, #1
 8002652:	4699      	mov	r9, r3
 8002654:	4680      	mov	r8, r0
 8002656:	433c      	orrs	r4, r7
 8002658:	e6f4      	b.n	8002444 <__aeabi_dsub+0x2dc>
 800265a:	1afc      	subs	r4, r7, r3
 800265c:	42a7      	cmp	r7, r4
 800265e:	41bf      	sbcs	r7, r7
 8002660:	4663      	mov	r3, ip
 8002662:	427f      	negs	r7, r7
 8002664:	1ac9      	subs	r1, r1, r3
 8002666:	1bcb      	subs	r3, r1, r7
 8002668:	4699      	mov	r9, r3
 800266a:	465d      	mov	r5, fp
 800266c:	e5d5      	b.n	800221a <__aeabi_dsub+0xb2>
 800266e:	08ff      	lsrs	r7, r7, #3
 8002670:	074b      	lsls	r3, r1, #29
 8002672:	465d      	mov	r5, fp
 8002674:	433b      	orrs	r3, r7
 8002676:	08cc      	lsrs	r4, r1, #3
 8002678:	e6ee      	b.n	8002458 <__aeabi_dsub+0x2f0>
 800267a:	4662      	mov	r2, ip
 800267c:	431a      	orrs	r2, r3
 800267e:	d000      	beq.n	8002682 <__aeabi_dsub+0x51a>
 8002680:	e082      	b.n	8002788 <__aeabi_dsub+0x620>
 8002682:	000b      	movs	r3, r1
 8002684:	433b      	orrs	r3, r7
 8002686:	d11b      	bne.n	80026c0 <__aeabi_dsub+0x558>
 8002688:	2480      	movs	r4, #128	; 0x80
 800268a:	2500      	movs	r5, #0
 800268c:	0324      	lsls	r4, r4, #12
 800268e:	e6f9      	b.n	8002484 <__aeabi_dsub+0x31c>
 8002690:	19dc      	adds	r4, r3, r7
 8002692:	429c      	cmp	r4, r3
 8002694:	419b      	sbcs	r3, r3
 8002696:	4461      	add	r1, ip
 8002698:	4689      	mov	r9, r1
 800269a:	425b      	negs	r3, r3
 800269c:	4499      	add	r9, r3
 800269e:	464b      	mov	r3, r9
 80026a0:	021b      	lsls	r3, r3, #8
 80026a2:	d444      	bmi.n	800272e <__aeabi_dsub+0x5c6>
 80026a4:	2301      	movs	r3, #1
 80026a6:	4698      	mov	r8, r3
 80026a8:	e6cc      	b.n	8002444 <__aeabi_dsub+0x2dc>
 80026aa:	1bdc      	subs	r4, r3, r7
 80026ac:	4662      	mov	r2, ip
 80026ae:	42a3      	cmp	r3, r4
 80026b0:	419b      	sbcs	r3, r3
 80026b2:	1a51      	subs	r1, r2, r1
 80026b4:	425b      	negs	r3, r3
 80026b6:	1acb      	subs	r3, r1, r3
 80026b8:	4699      	mov	r9, r3
 80026ba:	2301      	movs	r3, #1
 80026bc:	4698      	mov	r8, r3
 80026be:	e5a4      	b.n	800220a <__aeabi_dsub+0xa2>
 80026c0:	08ff      	lsrs	r7, r7, #3
 80026c2:	074b      	lsls	r3, r1, #29
 80026c4:	465d      	mov	r5, fp
 80026c6:	433b      	orrs	r3, r7
 80026c8:	08cc      	lsrs	r4, r1, #3
 80026ca:	e6d7      	b.n	800247c <__aeabi_dsub+0x314>
 80026cc:	4662      	mov	r2, ip
 80026ce:	431a      	orrs	r2, r3
 80026d0:	0014      	movs	r4, r2
 80026d2:	1e63      	subs	r3, r4, #1
 80026d4:	419c      	sbcs	r4, r3
 80026d6:	e679      	b.n	80023cc <__aeabi_dsub+0x264>
 80026d8:	0015      	movs	r5, r2
 80026da:	4664      	mov	r4, ip
 80026dc:	3d20      	subs	r5, #32
 80026de:	40ec      	lsrs	r4, r5
 80026e0:	46a0      	mov	r8, r4
 80026e2:	2a20      	cmp	r2, #32
 80026e4:	d005      	beq.n	80026f2 <__aeabi_dsub+0x58a>
 80026e6:	2540      	movs	r5, #64	; 0x40
 80026e8:	4664      	mov	r4, ip
 80026ea:	1aaa      	subs	r2, r5, r2
 80026ec:	4094      	lsls	r4, r2
 80026ee:	4323      	orrs	r3, r4
 80026f0:	469a      	mov	sl, r3
 80026f2:	4654      	mov	r4, sl
 80026f4:	1e63      	subs	r3, r4, #1
 80026f6:	419c      	sbcs	r4, r3
 80026f8:	4643      	mov	r3, r8
 80026fa:	4323      	orrs	r3, r4
 80026fc:	e773      	b.n	80025e6 <__aeabi_dsub+0x47e>
 80026fe:	4662      	mov	r2, ip
 8002700:	431a      	orrs	r2, r3
 8002702:	d023      	beq.n	800274c <__aeabi_dsub+0x5e4>
 8002704:	000a      	movs	r2, r1
 8002706:	433a      	orrs	r2, r7
 8002708:	d000      	beq.n	800270c <__aeabi_dsub+0x5a4>
 800270a:	e0a0      	b.n	800284e <__aeabi_dsub+0x6e6>
 800270c:	4662      	mov	r2, ip
 800270e:	08db      	lsrs	r3, r3, #3
 8002710:	0752      	lsls	r2, r2, #29
 8002712:	4313      	orrs	r3, r2
 8002714:	4662      	mov	r2, ip
 8002716:	08d4      	lsrs	r4, r2, #3
 8002718:	e6b0      	b.n	800247c <__aeabi_dsub+0x314>
 800271a:	000b      	movs	r3, r1
 800271c:	433b      	orrs	r3, r7
 800271e:	d100      	bne.n	8002722 <__aeabi_dsub+0x5ba>
 8002720:	e728      	b.n	8002574 <__aeabi_dsub+0x40c>
 8002722:	08ff      	lsrs	r7, r7, #3
 8002724:	074b      	lsls	r3, r1, #29
 8002726:	465d      	mov	r5, fp
 8002728:	433b      	orrs	r3, r7
 800272a:	08cc      	lsrs	r4, r1, #3
 800272c:	e697      	b.n	800245e <__aeabi_dsub+0x2f6>
 800272e:	2302      	movs	r3, #2
 8002730:	4698      	mov	r8, r3
 8002732:	e736      	b.n	80025a2 <__aeabi_dsub+0x43a>
 8002734:	1afc      	subs	r4, r7, r3
 8002736:	42a7      	cmp	r7, r4
 8002738:	41bf      	sbcs	r7, r7
 800273a:	4663      	mov	r3, ip
 800273c:	427f      	negs	r7, r7
 800273e:	1ac9      	subs	r1, r1, r3
 8002740:	1bcb      	subs	r3, r1, r7
 8002742:	4699      	mov	r9, r3
 8002744:	2301      	movs	r3, #1
 8002746:	465d      	mov	r5, fp
 8002748:	4698      	mov	r8, r3
 800274a:	e55e      	b.n	800220a <__aeabi_dsub+0xa2>
 800274c:	074b      	lsls	r3, r1, #29
 800274e:	08ff      	lsrs	r7, r7, #3
 8002750:	433b      	orrs	r3, r7
 8002752:	08cc      	lsrs	r4, r1, #3
 8002754:	e692      	b.n	800247c <__aeabi_dsub+0x314>
 8002756:	1bdc      	subs	r4, r3, r7
 8002758:	4660      	mov	r0, ip
 800275a:	42a3      	cmp	r3, r4
 800275c:	41b6      	sbcs	r6, r6
 800275e:	1a40      	subs	r0, r0, r1
 8002760:	4276      	negs	r6, r6
 8002762:	1b80      	subs	r0, r0, r6
 8002764:	4681      	mov	r9, r0
 8002766:	0200      	lsls	r0, r0, #8
 8002768:	d560      	bpl.n	800282c <__aeabi_dsub+0x6c4>
 800276a:	1afc      	subs	r4, r7, r3
 800276c:	42a7      	cmp	r7, r4
 800276e:	41bf      	sbcs	r7, r7
 8002770:	4663      	mov	r3, ip
 8002772:	427f      	negs	r7, r7
 8002774:	1ac9      	subs	r1, r1, r3
 8002776:	1bcb      	subs	r3, r1, r7
 8002778:	4699      	mov	r9, r3
 800277a:	465d      	mov	r5, fp
 800277c:	e576      	b.n	800226c <__aeabi_dsub+0x104>
 800277e:	08ff      	lsrs	r7, r7, #3
 8002780:	074b      	lsls	r3, r1, #29
 8002782:	433b      	orrs	r3, r7
 8002784:	08cc      	lsrs	r4, r1, #3
 8002786:	e667      	b.n	8002458 <__aeabi_dsub+0x2f0>
 8002788:	000a      	movs	r2, r1
 800278a:	08db      	lsrs	r3, r3, #3
 800278c:	433a      	orrs	r2, r7
 800278e:	d100      	bne.n	8002792 <__aeabi_dsub+0x62a>
 8002790:	e66f      	b.n	8002472 <__aeabi_dsub+0x30a>
 8002792:	4662      	mov	r2, ip
 8002794:	0752      	lsls	r2, r2, #29
 8002796:	4313      	orrs	r3, r2
 8002798:	4662      	mov	r2, ip
 800279a:	08d4      	lsrs	r4, r2, #3
 800279c:	2280      	movs	r2, #128	; 0x80
 800279e:	0312      	lsls	r2, r2, #12
 80027a0:	4214      	tst	r4, r2
 80027a2:	d007      	beq.n	80027b4 <__aeabi_dsub+0x64c>
 80027a4:	08c8      	lsrs	r0, r1, #3
 80027a6:	4210      	tst	r0, r2
 80027a8:	d104      	bne.n	80027b4 <__aeabi_dsub+0x64c>
 80027aa:	465d      	mov	r5, fp
 80027ac:	0004      	movs	r4, r0
 80027ae:	08fb      	lsrs	r3, r7, #3
 80027b0:	0749      	lsls	r1, r1, #29
 80027b2:	430b      	orrs	r3, r1
 80027b4:	0f5a      	lsrs	r2, r3, #29
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	08db      	lsrs	r3, r3, #3
 80027ba:	0752      	lsls	r2, r2, #29
 80027bc:	4313      	orrs	r3, r2
 80027be:	e65d      	b.n	800247c <__aeabi_dsub+0x314>
 80027c0:	074b      	lsls	r3, r1, #29
 80027c2:	08ff      	lsrs	r7, r7, #3
 80027c4:	433b      	orrs	r3, r7
 80027c6:	08cc      	lsrs	r4, r1, #3
 80027c8:	e649      	b.n	800245e <__aeabi_dsub+0x2f6>
 80027ca:	19dc      	adds	r4, r3, r7
 80027cc:	429c      	cmp	r4, r3
 80027ce:	419b      	sbcs	r3, r3
 80027d0:	4461      	add	r1, ip
 80027d2:	4689      	mov	r9, r1
 80027d4:	425b      	negs	r3, r3
 80027d6:	4499      	add	r9, r3
 80027d8:	464b      	mov	r3, r9
 80027da:	021b      	lsls	r3, r3, #8
 80027dc:	d400      	bmi.n	80027e0 <__aeabi_dsub+0x678>
 80027de:	e631      	b.n	8002444 <__aeabi_dsub+0x2dc>
 80027e0:	464a      	mov	r2, r9
 80027e2:	4b17      	ldr	r3, [pc, #92]	; (8002840 <__aeabi_dsub+0x6d8>)
 80027e4:	401a      	ands	r2, r3
 80027e6:	2301      	movs	r3, #1
 80027e8:	4691      	mov	r9, r2
 80027ea:	4698      	mov	r8, r3
 80027ec:	e62a      	b.n	8002444 <__aeabi_dsub+0x2dc>
 80027ee:	0016      	movs	r6, r2
 80027f0:	4664      	mov	r4, ip
 80027f2:	3e20      	subs	r6, #32
 80027f4:	40f4      	lsrs	r4, r6
 80027f6:	46a0      	mov	r8, r4
 80027f8:	2a20      	cmp	r2, #32
 80027fa:	d005      	beq.n	8002808 <__aeabi_dsub+0x6a0>
 80027fc:	2640      	movs	r6, #64	; 0x40
 80027fe:	4664      	mov	r4, ip
 8002800:	1ab2      	subs	r2, r6, r2
 8002802:	4094      	lsls	r4, r2
 8002804:	4323      	orrs	r3, r4
 8002806:	469a      	mov	sl, r3
 8002808:	4654      	mov	r4, sl
 800280a:	1e63      	subs	r3, r4, #1
 800280c:	419c      	sbcs	r4, r3
 800280e:	4643      	mov	r3, r8
 8002810:	431c      	orrs	r4, r3
 8002812:	e5db      	b.n	80023cc <__aeabi_dsub+0x264>
 8002814:	0002      	movs	r2, r0
 8002816:	2400      	movs	r4, #0
 8002818:	2300      	movs	r3, #0
 800281a:	e548      	b.n	80022ae <__aeabi_dsub+0x146>
 800281c:	19dc      	adds	r4, r3, r7
 800281e:	42bc      	cmp	r4, r7
 8002820:	41bf      	sbcs	r7, r7
 8002822:	4461      	add	r1, ip
 8002824:	4689      	mov	r9, r1
 8002826:	427f      	negs	r7, r7
 8002828:	44b9      	add	r9, r7
 800282a:	e738      	b.n	800269e <__aeabi_dsub+0x536>
 800282c:	464b      	mov	r3, r9
 800282e:	4323      	orrs	r3, r4
 8002830:	d100      	bne.n	8002834 <__aeabi_dsub+0x6cc>
 8002832:	e69f      	b.n	8002574 <__aeabi_dsub+0x40c>
 8002834:	e606      	b.n	8002444 <__aeabi_dsub+0x2dc>
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	000007fe 	.word	0x000007fe
 800283c:	000007ff 	.word	0x000007ff
 8002840:	ff7fffff 	.word	0xff7fffff
 8002844:	08ff      	lsrs	r7, r7, #3
 8002846:	074b      	lsls	r3, r1, #29
 8002848:	433b      	orrs	r3, r7
 800284a:	08cc      	lsrs	r4, r1, #3
 800284c:	e616      	b.n	800247c <__aeabi_dsub+0x314>
 800284e:	4662      	mov	r2, ip
 8002850:	08db      	lsrs	r3, r3, #3
 8002852:	0752      	lsls	r2, r2, #29
 8002854:	4313      	orrs	r3, r2
 8002856:	4662      	mov	r2, ip
 8002858:	08d4      	lsrs	r4, r2, #3
 800285a:	2280      	movs	r2, #128	; 0x80
 800285c:	0312      	lsls	r2, r2, #12
 800285e:	4214      	tst	r4, r2
 8002860:	d007      	beq.n	8002872 <__aeabi_dsub+0x70a>
 8002862:	08c8      	lsrs	r0, r1, #3
 8002864:	4210      	tst	r0, r2
 8002866:	d104      	bne.n	8002872 <__aeabi_dsub+0x70a>
 8002868:	465d      	mov	r5, fp
 800286a:	0004      	movs	r4, r0
 800286c:	08fb      	lsrs	r3, r7, #3
 800286e:	0749      	lsls	r1, r1, #29
 8002870:	430b      	orrs	r3, r1
 8002872:	0f5a      	lsrs	r2, r3, #29
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	0752      	lsls	r2, r2, #29
 8002878:	08db      	lsrs	r3, r3, #3
 800287a:	4313      	orrs	r3, r2
 800287c:	e5fe      	b.n	800247c <__aeabi_dsub+0x314>
 800287e:	2300      	movs	r3, #0
 8002880:	4a01      	ldr	r2, [pc, #4]	; (8002888 <__aeabi_dsub+0x720>)
 8002882:	001c      	movs	r4, r3
 8002884:	e513      	b.n	80022ae <__aeabi_dsub+0x146>
 8002886:	46c0      	nop			; (mov r8, r8)
 8002888:	000007ff 	.word	0x000007ff

0800288c <__aeabi_dcmpun>:
 800288c:	b570      	push	{r4, r5, r6, lr}
 800288e:	0005      	movs	r5, r0
 8002890:	480c      	ldr	r0, [pc, #48]	; (80028c4 <__aeabi_dcmpun+0x38>)
 8002892:	031c      	lsls	r4, r3, #12
 8002894:	0016      	movs	r6, r2
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	030a      	lsls	r2, r1, #12
 800289a:	0049      	lsls	r1, r1, #1
 800289c:	0b12      	lsrs	r2, r2, #12
 800289e:	0d49      	lsrs	r1, r1, #21
 80028a0:	0b24      	lsrs	r4, r4, #12
 80028a2:	0d5b      	lsrs	r3, r3, #21
 80028a4:	4281      	cmp	r1, r0
 80028a6:	d008      	beq.n	80028ba <__aeabi_dcmpun+0x2e>
 80028a8:	4a06      	ldr	r2, [pc, #24]	; (80028c4 <__aeabi_dcmpun+0x38>)
 80028aa:	2000      	movs	r0, #0
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d103      	bne.n	80028b8 <__aeabi_dcmpun+0x2c>
 80028b0:	0020      	movs	r0, r4
 80028b2:	4330      	orrs	r0, r6
 80028b4:	1e43      	subs	r3, r0, #1
 80028b6:	4198      	sbcs	r0, r3
 80028b8:	bd70      	pop	{r4, r5, r6, pc}
 80028ba:	2001      	movs	r0, #1
 80028bc:	432a      	orrs	r2, r5
 80028be:	d1fb      	bne.n	80028b8 <__aeabi_dcmpun+0x2c>
 80028c0:	e7f2      	b.n	80028a8 <__aeabi_dcmpun+0x1c>
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	000007ff 	.word	0x000007ff

080028c8 <__aeabi_d2iz>:
 80028c8:	000a      	movs	r2, r1
 80028ca:	b530      	push	{r4, r5, lr}
 80028cc:	4c13      	ldr	r4, [pc, #76]	; (800291c <__aeabi_d2iz+0x54>)
 80028ce:	0053      	lsls	r3, r2, #1
 80028d0:	0309      	lsls	r1, r1, #12
 80028d2:	0005      	movs	r5, r0
 80028d4:	0b09      	lsrs	r1, r1, #12
 80028d6:	2000      	movs	r0, #0
 80028d8:	0d5b      	lsrs	r3, r3, #21
 80028da:	0fd2      	lsrs	r2, r2, #31
 80028dc:	42a3      	cmp	r3, r4
 80028de:	dd04      	ble.n	80028ea <__aeabi_d2iz+0x22>
 80028e0:	480f      	ldr	r0, [pc, #60]	; (8002920 <__aeabi_d2iz+0x58>)
 80028e2:	4283      	cmp	r3, r0
 80028e4:	dd02      	ble.n	80028ec <__aeabi_d2iz+0x24>
 80028e6:	4b0f      	ldr	r3, [pc, #60]	; (8002924 <__aeabi_d2iz+0x5c>)
 80028e8:	18d0      	adds	r0, r2, r3
 80028ea:	bd30      	pop	{r4, r5, pc}
 80028ec:	2080      	movs	r0, #128	; 0x80
 80028ee:	0340      	lsls	r0, r0, #13
 80028f0:	4301      	orrs	r1, r0
 80028f2:	480d      	ldr	r0, [pc, #52]	; (8002928 <__aeabi_d2iz+0x60>)
 80028f4:	1ac0      	subs	r0, r0, r3
 80028f6:	281f      	cmp	r0, #31
 80028f8:	dd08      	ble.n	800290c <__aeabi_d2iz+0x44>
 80028fa:	480c      	ldr	r0, [pc, #48]	; (800292c <__aeabi_d2iz+0x64>)
 80028fc:	1ac3      	subs	r3, r0, r3
 80028fe:	40d9      	lsrs	r1, r3
 8002900:	000b      	movs	r3, r1
 8002902:	4258      	negs	r0, r3
 8002904:	2a00      	cmp	r2, #0
 8002906:	d1f0      	bne.n	80028ea <__aeabi_d2iz+0x22>
 8002908:	0018      	movs	r0, r3
 800290a:	e7ee      	b.n	80028ea <__aeabi_d2iz+0x22>
 800290c:	4c08      	ldr	r4, [pc, #32]	; (8002930 <__aeabi_d2iz+0x68>)
 800290e:	40c5      	lsrs	r5, r0
 8002910:	46a4      	mov	ip, r4
 8002912:	4463      	add	r3, ip
 8002914:	4099      	lsls	r1, r3
 8002916:	000b      	movs	r3, r1
 8002918:	432b      	orrs	r3, r5
 800291a:	e7f2      	b.n	8002902 <__aeabi_d2iz+0x3a>
 800291c:	000003fe 	.word	0x000003fe
 8002920:	0000041d 	.word	0x0000041d
 8002924:	7fffffff 	.word	0x7fffffff
 8002928:	00000433 	.word	0x00000433
 800292c:	00000413 	.word	0x00000413
 8002930:	fffffbed 	.word	0xfffffbed

08002934 <__aeabi_i2d>:
 8002934:	b570      	push	{r4, r5, r6, lr}
 8002936:	2800      	cmp	r0, #0
 8002938:	d016      	beq.n	8002968 <__aeabi_i2d+0x34>
 800293a:	17c3      	asrs	r3, r0, #31
 800293c:	18c5      	adds	r5, r0, r3
 800293e:	405d      	eors	r5, r3
 8002940:	0fc4      	lsrs	r4, r0, #31
 8002942:	0028      	movs	r0, r5
 8002944:	f000 f8f6 	bl	8002b34 <__clzsi2>
 8002948:	4a11      	ldr	r2, [pc, #68]	; (8002990 <__aeabi_i2d+0x5c>)
 800294a:	1a12      	subs	r2, r2, r0
 800294c:	280a      	cmp	r0, #10
 800294e:	dc16      	bgt.n	800297e <__aeabi_i2d+0x4a>
 8002950:	0003      	movs	r3, r0
 8002952:	002e      	movs	r6, r5
 8002954:	3315      	adds	r3, #21
 8002956:	409e      	lsls	r6, r3
 8002958:	230b      	movs	r3, #11
 800295a:	1a18      	subs	r0, r3, r0
 800295c:	40c5      	lsrs	r5, r0
 800295e:	0552      	lsls	r2, r2, #21
 8002960:	032d      	lsls	r5, r5, #12
 8002962:	0b2d      	lsrs	r5, r5, #12
 8002964:	0d53      	lsrs	r3, r2, #21
 8002966:	e003      	b.n	8002970 <__aeabi_i2d+0x3c>
 8002968:	2400      	movs	r4, #0
 800296a:	2300      	movs	r3, #0
 800296c:	2500      	movs	r5, #0
 800296e:	2600      	movs	r6, #0
 8002970:	051b      	lsls	r3, r3, #20
 8002972:	432b      	orrs	r3, r5
 8002974:	07e4      	lsls	r4, r4, #31
 8002976:	4323      	orrs	r3, r4
 8002978:	0030      	movs	r0, r6
 800297a:	0019      	movs	r1, r3
 800297c:	bd70      	pop	{r4, r5, r6, pc}
 800297e:	380b      	subs	r0, #11
 8002980:	4085      	lsls	r5, r0
 8002982:	0552      	lsls	r2, r2, #21
 8002984:	032d      	lsls	r5, r5, #12
 8002986:	2600      	movs	r6, #0
 8002988:	0b2d      	lsrs	r5, r5, #12
 800298a:	0d53      	lsrs	r3, r2, #21
 800298c:	e7f0      	b.n	8002970 <__aeabi_i2d+0x3c>
 800298e:	46c0      	nop			; (mov r8, r8)
 8002990:	0000041e 	.word	0x0000041e

08002994 <__aeabi_f2d>:
 8002994:	b570      	push	{r4, r5, r6, lr}
 8002996:	0043      	lsls	r3, r0, #1
 8002998:	0246      	lsls	r6, r0, #9
 800299a:	0fc4      	lsrs	r4, r0, #31
 800299c:	20fe      	movs	r0, #254	; 0xfe
 800299e:	0e1b      	lsrs	r3, r3, #24
 80029a0:	1c59      	adds	r1, r3, #1
 80029a2:	0a75      	lsrs	r5, r6, #9
 80029a4:	4208      	tst	r0, r1
 80029a6:	d00c      	beq.n	80029c2 <__aeabi_f2d+0x2e>
 80029a8:	22e0      	movs	r2, #224	; 0xe0
 80029aa:	0092      	lsls	r2, r2, #2
 80029ac:	4694      	mov	ip, r2
 80029ae:	076d      	lsls	r5, r5, #29
 80029b0:	0b36      	lsrs	r6, r6, #12
 80029b2:	4463      	add	r3, ip
 80029b4:	051b      	lsls	r3, r3, #20
 80029b6:	4333      	orrs	r3, r6
 80029b8:	07e4      	lsls	r4, r4, #31
 80029ba:	4323      	orrs	r3, r4
 80029bc:	0028      	movs	r0, r5
 80029be:	0019      	movs	r1, r3
 80029c0:	bd70      	pop	{r4, r5, r6, pc}
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d114      	bne.n	80029f0 <__aeabi_f2d+0x5c>
 80029c6:	2d00      	cmp	r5, #0
 80029c8:	d01b      	beq.n	8002a02 <__aeabi_f2d+0x6e>
 80029ca:	0028      	movs	r0, r5
 80029cc:	f000 f8b2 	bl	8002b34 <__clzsi2>
 80029d0:	280a      	cmp	r0, #10
 80029d2:	dc1c      	bgt.n	8002a0e <__aeabi_f2d+0x7a>
 80029d4:	230b      	movs	r3, #11
 80029d6:	002e      	movs	r6, r5
 80029d8:	1a1b      	subs	r3, r3, r0
 80029da:	40de      	lsrs	r6, r3
 80029dc:	0003      	movs	r3, r0
 80029de:	3315      	adds	r3, #21
 80029e0:	409d      	lsls	r5, r3
 80029e2:	4a0e      	ldr	r2, [pc, #56]	; (8002a1c <__aeabi_f2d+0x88>)
 80029e4:	0336      	lsls	r6, r6, #12
 80029e6:	1a12      	subs	r2, r2, r0
 80029e8:	0552      	lsls	r2, r2, #21
 80029ea:	0b36      	lsrs	r6, r6, #12
 80029ec:	0d53      	lsrs	r3, r2, #21
 80029ee:	e7e1      	b.n	80029b4 <__aeabi_f2d+0x20>
 80029f0:	2d00      	cmp	r5, #0
 80029f2:	d009      	beq.n	8002a08 <__aeabi_f2d+0x74>
 80029f4:	2280      	movs	r2, #128	; 0x80
 80029f6:	0b36      	lsrs	r6, r6, #12
 80029f8:	0312      	lsls	r2, r2, #12
 80029fa:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <__aeabi_f2d+0x8c>)
 80029fc:	076d      	lsls	r5, r5, #29
 80029fe:	4316      	orrs	r6, r2
 8002a00:	e7d8      	b.n	80029b4 <__aeabi_f2d+0x20>
 8002a02:	2300      	movs	r3, #0
 8002a04:	2600      	movs	r6, #0
 8002a06:	e7d5      	b.n	80029b4 <__aeabi_f2d+0x20>
 8002a08:	2600      	movs	r6, #0
 8002a0a:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <__aeabi_f2d+0x8c>)
 8002a0c:	e7d2      	b.n	80029b4 <__aeabi_f2d+0x20>
 8002a0e:	0003      	movs	r3, r0
 8002a10:	3b0b      	subs	r3, #11
 8002a12:	409d      	lsls	r5, r3
 8002a14:	002e      	movs	r6, r5
 8002a16:	2500      	movs	r5, #0
 8002a18:	e7e3      	b.n	80029e2 <__aeabi_f2d+0x4e>
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	00000389 	.word	0x00000389
 8002a20:	000007ff 	.word	0x000007ff

08002a24 <__aeabi_d2f>:
 8002a24:	0002      	movs	r2, r0
 8002a26:	004b      	lsls	r3, r1, #1
 8002a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a2a:	0d5b      	lsrs	r3, r3, #21
 8002a2c:	030c      	lsls	r4, r1, #12
 8002a2e:	4e3d      	ldr	r6, [pc, #244]	; (8002b24 <__aeabi_d2f+0x100>)
 8002a30:	0a64      	lsrs	r4, r4, #9
 8002a32:	0f40      	lsrs	r0, r0, #29
 8002a34:	1c5f      	adds	r7, r3, #1
 8002a36:	0fc9      	lsrs	r1, r1, #31
 8002a38:	4304      	orrs	r4, r0
 8002a3a:	00d5      	lsls	r5, r2, #3
 8002a3c:	4237      	tst	r7, r6
 8002a3e:	d00a      	beq.n	8002a56 <__aeabi_d2f+0x32>
 8002a40:	4839      	ldr	r0, [pc, #228]	; (8002b28 <__aeabi_d2f+0x104>)
 8002a42:	181e      	adds	r6, r3, r0
 8002a44:	2efe      	cmp	r6, #254	; 0xfe
 8002a46:	dd16      	ble.n	8002a76 <__aeabi_d2f+0x52>
 8002a48:	20ff      	movs	r0, #255	; 0xff
 8002a4a:	2400      	movs	r4, #0
 8002a4c:	05c0      	lsls	r0, r0, #23
 8002a4e:	4320      	orrs	r0, r4
 8002a50:	07c9      	lsls	r1, r1, #31
 8002a52:	4308      	orrs	r0, r1
 8002a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d106      	bne.n	8002a68 <__aeabi_d2f+0x44>
 8002a5a:	432c      	orrs	r4, r5
 8002a5c:	d026      	beq.n	8002aac <__aeabi_d2f+0x88>
 8002a5e:	2205      	movs	r2, #5
 8002a60:	0192      	lsls	r2, r2, #6
 8002a62:	0a54      	lsrs	r4, r2, #9
 8002a64:	b2d8      	uxtb	r0, r3
 8002a66:	e7f1      	b.n	8002a4c <__aeabi_d2f+0x28>
 8002a68:	4325      	orrs	r5, r4
 8002a6a:	d0ed      	beq.n	8002a48 <__aeabi_d2f+0x24>
 8002a6c:	2080      	movs	r0, #128	; 0x80
 8002a6e:	03c0      	lsls	r0, r0, #15
 8002a70:	4304      	orrs	r4, r0
 8002a72:	20ff      	movs	r0, #255	; 0xff
 8002a74:	e7ea      	b.n	8002a4c <__aeabi_d2f+0x28>
 8002a76:	2e00      	cmp	r6, #0
 8002a78:	dd1b      	ble.n	8002ab2 <__aeabi_d2f+0x8e>
 8002a7a:	0192      	lsls	r2, r2, #6
 8002a7c:	1e53      	subs	r3, r2, #1
 8002a7e:	419a      	sbcs	r2, r3
 8002a80:	00e4      	lsls	r4, r4, #3
 8002a82:	0f6d      	lsrs	r5, r5, #29
 8002a84:	4322      	orrs	r2, r4
 8002a86:	432a      	orrs	r2, r5
 8002a88:	0753      	lsls	r3, r2, #29
 8002a8a:	d048      	beq.n	8002b1e <__aeabi_d2f+0xfa>
 8002a8c:	230f      	movs	r3, #15
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	d000      	beq.n	8002a96 <__aeabi_d2f+0x72>
 8002a94:	3204      	adds	r2, #4
 8002a96:	2380      	movs	r3, #128	; 0x80
 8002a98:	04db      	lsls	r3, r3, #19
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d03f      	beq.n	8002b1e <__aeabi_d2f+0xfa>
 8002a9e:	1c70      	adds	r0, r6, #1
 8002aa0:	2efe      	cmp	r6, #254	; 0xfe
 8002aa2:	d0d1      	beq.n	8002a48 <__aeabi_d2f+0x24>
 8002aa4:	0192      	lsls	r2, r2, #6
 8002aa6:	0a54      	lsrs	r4, r2, #9
 8002aa8:	b2c0      	uxtb	r0, r0
 8002aaa:	e7cf      	b.n	8002a4c <__aeabi_d2f+0x28>
 8002aac:	2000      	movs	r0, #0
 8002aae:	2400      	movs	r4, #0
 8002ab0:	e7cc      	b.n	8002a4c <__aeabi_d2f+0x28>
 8002ab2:	0032      	movs	r2, r6
 8002ab4:	3217      	adds	r2, #23
 8002ab6:	db22      	blt.n	8002afe <__aeabi_d2f+0xda>
 8002ab8:	2080      	movs	r0, #128	; 0x80
 8002aba:	0400      	lsls	r0, r0, #16
 8002abc:	4320      	orrs	r0, r4
 8002abe:	241e      	movs	r4, #30
 8002ac0:	1ba4      	subs	r4, r4, r6
 8002ac2:	2c1f      	cmp	r4, #31
 8002ac4:	dd1d      	ble.n	8002b02 <__aeabi_d2f+0xde>
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	4252      	negs	r2, r2
 8002aca:	1b96      	subs	r6, r2, r6
 8002acc:	0002      	movs	r2, r0
 8002ace:	40f2      	lsrs	r2, r6
 8002ad0:	0016      	movs	r6, r2
 8002ad2:	2c20      	cmp	r4, #32
 8002ad4:	d004      	beq.n	8002ae0 <__aeabi_d2f+0xbc>
 8002ad6:	4a15      	ldr	r2, [pc, #84]	; (8002b2c <__aeabi_d2f+0x108>)
 8002ad8:	4694      	mov	ip, r2
 8002ada:	4463      	add	r3, ip
 8002adc:	4098      	lsls	r0, r3
 8002ade:	4305      	orrs	r5, r0
 8002ae0:	002a      	movs	r2, r5
 8002ae2:	1e53      	subs	r3, r2, #1
 8002ae4:	419a      	sbcs	r2, r3
 8002ae6:	4332      	orrs	r2, r6
 8002ae8:	2600      	movs	r6, #0
 8002aea:	0753      	lsls	r3, r2, #29
 8002aec:	d1ce      	bne.n	8002a8c <__aeabi_d2f+0x68>
 8002aee:	2480      	movs	r4, #128	; 0x80
 8002af0:	0013      	movs	r3, r2
 8002af2:	04e4      	lsls	r4, r4, #19
 8002af4:	2001      	movs	r0, #1
 8002af6:	4023      	ands	r3, r4
 8002af8:	4222      	tst	r2, r4
 8002afa:	d1d3      	bne.n	8002aa4 <__aeabi_d2f+0x80>
 8002afc:	e7b0      	b.n	8002a60 <__aeabi_d2f+0x3c>
 8002afe:	2300      	movs	r3, #0
 8002b00:	e7ad      	b.n	8002a5e <__aeabi_d2f+0x3a>
 8002b02:	4a0b      	ldr	r2, [pc, #44]	; (8002b30 <__aeabi_d2f+0x10c>)
 8002b04:	4694      	mov	ip, r2
 8002b06:	002a      	movs	r2, r5
 8002b08:	40e2      	lsrs	r2, r4
 8002b0a:	0014      	movs	r4, r2
 8002b0c:	002a      	movs	r2, r5
 8002b0e:	4463      	add	r3, ip
 8002b10:	409a      	lsls	r2, r3
 8002b12:	4098      	lsls	r0, r3
 8002b14:	1e55      	subs	r5, r2, #1
 8002b16:	41aa      	sbcs	r2, r5
 8002b18:	4302      	orrs	r2, r0
 8002b1a:	4322      	orrs	r2, r4
 8002b1c:	e7e4      	b.n	8002ae8 <__aeabi_d2f+0xc4>
 8002b1e:	0033      	movs	r3, r6
 8002b20:	e79e      	b.n	8002a60 <__aeabi_d2f+0x3c>
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	000007fe 	.word	0x000007fe
 8002b28:	fffffc80 	.word	0xfffffc80
 8002b2c:	fffffca2 	.word	0xfffffca2
 8002b30:	fffffc82 	.word	0xfffffc82

08002b34 <__clzsi2>:
 8002b34:	211c      	movs	r1, #28
 8002b36:	2301      	movs	r3, #1
 8002b38:	041b      	lsls	r3, r3, #16
 8002b3a:	4298      	cmp	r0, r3
 8002b3c:	d301      	bcc.n	8002b42 <__clzsi2+0xe>
 8002b3e:	0c00      	lsrs	r0, r0, #16
 8002b40:	3910      	subs	r1, #16
 8002b42:	0a1b      	lsrs	r3, r3, #8
 8002b44:	4298      	cmp	r0, r3
 8002b46:	d301      	bcc.n	8002b4c <__clzsi2+0x18>
 8002b48:	0a00      	lsrs	r0, r0, #8
 8002b4a:	3908      	subs	r1, #8
 8002b4c:	091b      	lsrs	r3, r3, #4
 8002b4e:	4298      	cmp	r0, r3
 8002b50:	d301      	bcc.n	8002b56 <__clzsi2+0x22>
 8002b52:	0900      	lsrs	r0, r0, #4
 8002b54:	3904      	subs	r1, #4
 8002b56:	a202      	add	r2, pc, #8	; (adr r2, 8002b60 <__clzsi2+0x2c>)
 8002b58:	5c10      	ldrb	r0, [r2, r0]
 8002b5a:	1840      	adds	r0, r0, r1
 8002b5c:	4770      	bx	lr
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	02020304 	.word	0x02020304
 8002b64:	01010101 	.word	0x01010101
	...

08002b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b70:	b5b0      	push	{r4, r5, r7, lr}
 8002b72:	b088      	sub	sp, #32
 8002b74:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b76:	f000 fd63 	bl	8003640 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b7a:	f000 fb81 	bl	8003280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b7e:	f000 fc27 	bl	80033d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002b82:	f000 fbe5 	bl	8003350 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  //sensorun başlagıc ayarları yapılıyor

  data = 0x00; //register 26
 8002b86:	4b1f      	ldr	r3, [pc, #124]	; (8002c04 <main+0x94>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c1, GY_ADDR, PWR_REG, 1, &data, 1, 100);
 8002b8c:	481e      	ldr	r0, [pc, #120]	; (8002c08 <main+0x98>)
 8002b8e:	2364      	movs	r3, #100	; 0x64
 8002b90:	9302      	str	r3, [sp, #8]
 8002b92:	2301      	movs	r3, #1
 8002b94:	9301      	str	r3, [sp, #4]
 8002b96:	4b1b      	ldr	r3, [pc, #108]	; (8002c04 <main+0x94>)
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	2268      	movs	r2, #104	; 0x68
 8002b9e:	21d0      	movs	r1, #208	; 0xd0
 8002ba0:	f001 fabe 	bl	8004120 <HAL_I2C_Mem_Write>

  data =0x08; // register 27
 8002ba4:	4b17      	ldr	r3, [pc, #92]	; (8002c04 <main+0x94>)
 8002ba6:	2208      	movs	r2, #8
 8002ba8:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c1, GY_ADDR, GY_REG, 1, &data, 1, 100);
 8002baa:	4817      	ldr	r0, [pc, #92]	; (8002c08 <main+0x98>)
 8002bac:	2364      	movs	r3, #100	; 0x64
 8002bae:	9302      	str	r3, [sp, #8]
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	9301      	str	r3, [sp, #4]
 8002bb4:	4b13      	ldr	r3, [pc, #76]	; (8002c04 <main+0x94>)
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	2301      	movs	r3, #1
 8002bba:	221b      	movs	r2, #27
 8002bbc:	21d0      	movs	r1, #208	; 0xd0
 8002bbe:	f001 faaf 	bl	8004120 <HAL_I2C_Mem_Write>

  data =0x10; // register 28
 8002bc2:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <main+0x94>)
 8002bc4:	2210      	movs	r2, #16
 8002bc6:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c1, GY_ADDR, ACC_REG, 1, &data, 1, 100);
 8002bc8:	480f      	ldr	r0, [pc, #60]	; (8002c08 <main+0x98>)
 8002bca:	2364      	movs	r3, #100	; 0x64
 8002bcc:	9302      	str	r3, [sp, #8]
 8002bce:	2301      	movs	r3, #1
 8002bd0:	9301      	str	r3, [sp, #4]
 8002bd2:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <main+0x94>)
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	221c      	movs	r2, #28
 8002bda:	21d0      	movs	r1, #208	; 0xd0
 8002bdc:	f001 faa0 	bl	8004120 <HAL_I2C_Mem_Write>

  data = 0x03;
 8002be0:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <main+0x94>)
 8002be2:	2203      	movs	r2, #3
 8002be4:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write (&hi2c1, GY_ADDR, LPF_REG, 1, &data, 1, 100);
 8002be6:	4808      	ldr	r0, [pc, #32]	; (8002c08 <main+0x98>)
 8002be8:	2364      	movs	r3, #100	; 0x64
 8002bea:	9302      	str	r3, [sp, #8]
 8002bec:	2301      	movs	r3, #1
 8002bee:	9301      	str	r3, [sp, #4]
 8002bf0:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <main+0x94>)
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	221a      	movs	r2, #26
 8002bf8:	21d0      	movs	r1, #208	; 0xd0
 8002bfa:	f001 fa91 	bl	8004120 <HAL_I2C_Mem_Write>


  //görültüyu engellemek için 2000 değerinin ortalamasını alınır

  for (int i  = 0; i < 200; i++)
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	e070      	b.n	8002ce6 <main+0x176>
 8002c04:	200000d8 	.word	0x200000d8
 8002c08:	2000008c 	.word	0x2000008c
  {
	  cuffer[0]=0x43;//register 67 - 72
 8002c0c:	4bfc      	ldr	r3, [pc, #1008]	; (8003000 <main+0x490>)
 8002c0e:	2243      	movs	r2, #67	; 0x43
 8002c10:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Master_Transmit(&hi2c1,GY_ADDR,cuffer,1,HAL_MAX_DELAY);//ben sende veri alıcam bunun haberini göderiyor
 8002c12:	4afb      	ldr	r2, [pc, #1004]	; (8003000 <main+0x490>)
 8002c14:	48fb      	ldr	r0, [pc, #1004]	; (8003004 <main+0x494>)
 8002c16:	2364      	movs	r3, #100	; 0x64
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	21d0      	movs	r1, #208	; 0xd0
 8002c1e:	f001 f86f 	bl	8003d00 <HAL_I2C_Master_Transmit>

	  HAL_I2C_Master_Receive(&hi2c1,GY_ADDR,cuffer,6,HAL_MAX_DELAY);
 8002c22:	4af7      	ldr	r2, [pc, #988]	; (8003000 <main+0x490>)
 8002c24:	48f7      	ldr	r0, [pc, #988]	; (8003004 <main+0x494>)
 8002c26:	2364      	movs	r3, #100	; 0x64
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	2306      	movs	r3, #6
 8002c2c:	21d0      	movs	r1, #208	; 0xd0
 8002c2e:	f001 f96f 	bl	8003f10 <HAL_I2C_Master_Receive>

 	  gyro_raw[0] = (cuffer[0] << 8 | cuffer[1]);
 8002c32:	4bf3      	ldr	r3, [pc, #972]	; (8003000 <main+0x490>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	021b      	lsls	r3, r3, #8
 8002c38:	b21a      	sxth	r2, r3
 8002c3a:	4bf1      	ldr	r3, [pc, #964]	; (8003000 <main+0x490>)
 8002c3c:	785b      	ldrb	r3, [r3, #1]
 8002c3e:	b21b      	sxth	r3, r3
 8002c40:	4313      	orrs	r3, r2
 8002c42:	b21a      	sxth	r2, r3
 8002c44:	4bf0      	ldr	r3, [pc, #960]	; (8003008 <main+0x498>)
 8002c46:	801a      	strh	r2, [r3, #0]
	  gyro_raw[1] = (cuffer[2] << 8 | cuffer[3]);
 8002c48:	4bed      	ldr	r3, [pc, #948]	; (8003000 <main+0x490>)
 8002c4a:	789b      	ldrb	r3, [r3, #2]
 8002c4c:	021b      	lsls	r3, r3, #8
 8002c4e:	b21a      	sxth	r2, r3
 8002c50:	4beb      	ldr	r3, [pc, #940]	; (8003000 <main+0x490>)
 8002c52:	78db      	ldrb	r3, [r3, #3]
 8002c54:	b21b      	sxth	r3, r3
 8002c56:	4313      	orrs	r3, r2
 8002c58:	b21a      	sxth	r2, r3
 8002c5a:	4beb      	ldr	r3, [pc, #940]	; (8003008 <main+0x498>)
 8002c5c:	805a      	strh	r2, [r3, #2]
	  gyro_raw[2] = (cuffer[4] << 8 | cuffer[5]);
 8002c5e:	4be8      	ldr	r3, [pc, #928]	; (8003000 <main+0x490>)
 8002c60:	791b      	ldrb	r3, [r3, #4]
 8002c62:	021b      	lsls	r3, r3, #8
 8002c64:	b21a      	sxth	r2, r3
 8002c66:	4be6      	ldr	r3, [pc, #920]	; (8003000 <main+0x490>)
 8002c68:	795b      	ldrb	r3, [r3, #5]
 8002c6a:	b21b      	sxth	r3, r3
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	b21a      	sxth	r2, r3
 8002c70:	4be5      	ldr	r3, [pc, #916]	; (8003008 <main+0x498>)
 8002c72:	809a      	strh	r2, [r3, #4]

	  gyro_cal[0] += gyro_raw[0];
 8002c74:	4be5      	ldr	r3, [pc, #916]	; (800300c <main+0x49c>)
 8002c76:	681c      	ldr	r4, [r3, #0]
 8002c78:	4be3      	ldr	r3, [pc, #908]	; (8003008 <main+0x498>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	5e9b      	ldrsh	r3, [r3, r2]
 8002c7e:	0018      	movs	r0, r3
 8002c80:	f7fe f87a 	bl	8000d78 <__aeabi_i2f>
 8002c84:	1c03      	adds	r3, r0, #0
 8002c86:	1c19      	adds	r1, r3, #0
 8002c88:	1c20      	adds	r0, r4, #0
 8002c8a:	f7fd fbf1 	bl	8000470 <__aeabi_fadd>
 8002c8e:	1c03      	adds	r3, r0, #0
 8002c90:	1c1a      	adds	r2, r3, #0
 8002c92:	4bde      	ldr	r3, [pc, #888]	; (800300c <main+0x49c>)
 8002c94:	601a      	str	r2, [r3, #0]
	  gyro_cal[1] += gyro_raw[1];
 8002c96:	4bdd      	ldr	r3, [pc, #884]	; (800300c <main+0x49c>)
 8002c98:	685c      	ldr	r4, [r3, #4]
 8002c9a:	4bdb      	ldr	r3, [pc, #876]	; (8003008 <main+0x498>)
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	5e9b      	ldrsh	r3, [r3, r2]
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f7fe f869 	bl	8000d78 <__aeabi_i2f>
 8002ca6:	1c03      	adds	r3, r0, #0
 8002ca8:	1c19      	adds	r1, r3, #0
 8002caa:	1c20      	adds	r0, r4, #0
 8002cac:	f7fd fbe0 	bl	8000470 <__aeabi_fadd>
 8002cb0:	1c03      	adds	r3, r0, #0
 8002cb2:	1c1a      	adds	r2, r3, #0
 8002cb4:	4bd5      	ldr	r3, [pc, #852]	; (800300c <main+0x49c>)
 8002cb6:	605a      	str	r2, [r3, #4]
	  gyro_cal[2] += gyro_raw[2];
 8002cb8:	4bd4      	ldr	r3, [pc, #848]	; (800300c <main+0x49c>)
 8002cba:	689c      	ldr	r4, [r3, #8]
 8002cbc:	4bd2      	ldr	r3, [pc, #840]	; (8003008 <main+0x498>)
 8002cbe:	2204      	movs	r2, #4
 8002cc0:	5e9b      	ldrsh	r3, [r3, r2]
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	f7fe f858 	bl	8000d78 <__aeabi_i2f>
 8002cc8:	1c03      	adds	r3, r0, #0
 8002cca:	1c19      	adds	r1, r3, #0
 8002ccc:	1c20      	adds	r0, r4, #0
 8002cce:	f7fd fbcf 	bl	8000470 <__aeabi_fadd>
 8002cd2:	1c03      	adds	r3, r0, #0
 8002cd4:	1c1a      	adds	r2, r3, #0
 8002cd6:	4bcd      	ldr	r3, [pc, #820]	; (800300c <main+0x49c>)
 8002cd8:	609a      	str	r2, [r3, #8]

	  HAL_Delay(10);
 8002cda:	200a      	movs	r0, #10
 8002cdc:	f000 fd14 	bl	8003708 <HAL_Delay>
  for (int i  = 0; i < 200; i++)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2bc7      	cmp	r3, #199	; 0xc7
 8002cea:	dd8f      	ble.n	8002c0c <main+0x9c>

  }
  gyro_cal[0] /= 2000;
 8002cec:	4bc7      	ldr	r3, [pc, #796]	; (800300c <main+0x49c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	49c7      	ldr	r1, [pc, #796]	; (8003010 <main+0x4a0>)
 8002cf2:	1c18      	adds	r0, r3, #0
 8002cf4:	f7fd fd5a 	bl	80007ac <__aeabi_fdiv>
 8002cf8:	1c03      	adds	r3, r0, #0
 8002cfa:	1c1a      	adds	r2, r3, #0
 8002cfc:	4bc3      	ldr	r3, [pc, #780]	; (800300c <main+0x49c>)
 8002cfe:	601a      	str	r2, [r3, #0]
  gyro_cal[1] /= 2000;
 8002d00:	4bc2      	ldr	r3, [pc, #776]	; (800300c <main+0x49c>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	49c2      	ldr	r1, [pc, #776]	; (8003010 <main+0x4a0>)
 8002d06:	1c18      	adds	r0, r3, #0
 8002d08:	f7fd fd50 	bl	80007ac <__aeabi_fdiv>
 8002d0c:	1c03      	adds	r3, r0, #0
 8002d0e:	1c1a      	adds	r2, r3, #0
 8002d10:	4bbe      	ldr	r3, [pc, #760]	; (800300c <main+0x49c>)
 8002d12:	605a      	str	r2, [r3, #4]
  gyro_cal[2] /= 2000;
 8002d14:	4bbd      	ldr	r3, [pc, #756]	; (800300c <main+0x49c>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	49bd      	ldr	r1, [pc, #756]	; (8003010 <main+0x4a0>)
 8002d1a:	1c18      	adds	r0, r3, #0
 8002d1c:	f7fd fd46 	bl	80007ac <__aeabi_fdiv>
 8002d20:	1c03      	adds	r3, r0, #0
 8002d22:	1c1a      	adds	r2, r3, #0
 8002d24:	4bb9      	ldr	r3, [pc, #740]	; (800300c <main+0x49c>)
 8002d26:	609a      	str	r2, [r3, #8]
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  tuffer[0]=0x3B; //register 59 - 64
 8002d28:	4bba      	ldr	r3, [pc, #744]	; (8003014 <main+0x4a4>)
 8002d2a:	223b      	movs	r2, #59	; 0x3b
 8002d2c:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Master_Transmit(&hi2c1,GY_ADDR,tuffer,1,HAL_MAX_DELAY);
 8002d2e:	4ab9      	ldr	r2, [pc, #740]	; (8003014 <main+0x4a4>)
 8002d30:	48b4      	ldr	r0, [pc, #720]	; (8003004 <main+0x494>)
 8002d32:	2364      	movs	r3, #100	; 0x64
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	2301      	movs	r3, #1
 8002d38:	21d0      	movs	r1, #208	; 0xd0
 8002d3a:	f000 ffe1 	bl	8003d00 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1,GY_ADDR,tuffer,6,HAL_MAX_DELAY);
 8002d3e:	4ab5      	ldr	r2, [pc, #724]	; (8003014 <main+0x4a4>)
 8002d40:	48b0      	ldr	r0, [pc, #704]	; (8003004 <main+0x494>)
 8002d42:	2364      	movs	r3, #100	; 0x64
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	2306      	movs	r3, #6
 8002d48:	21d0      	movs	r1, #208	; 0xd0
 8002d4a:	f001 f8e1 	bl	8003f10 <HAL_I2C_Master_Receive>

	  // bitlerin birbirine ekleme işlemi
	  acc_raw[0] = (tuffer[0] << 8 | tuffer[1]);
 8002d4e:	4bb1      	ldr	r3, [pc, #708]	; (8003014 <main+0x4a4>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	021b      	lsls	r3, r3, #8
 8002d54:	b21a      	sxth	r2, r3
 8002d56:	4baf      	ldr	r3, [pc, #700]	; (8003014 <main+0x4a4>)
 8002d58:	785b      	ldrb	r3, [r3, #1]
 8002d5a:	b21b      	sxth	r3, r3
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	b21a      	sxth	r2, r3
 8002d60:	4bad      	ldr	r3, [pc, #692]	; (8003018 <main+0x4a8>)
 8002d62:	801a      	strh	r2, [r3, #0]
	  acc_raw[1] = (tuffer[2] << 8 | tuffer[3]);
 8002d64:	4bab      	ldr	r3, [pc, #684]	; (8003014 <main+0x4a4>)
 8002d66:	789b      	ldrb	r3, [r3, #2]
 8002d68:	021b      	lsls	r3, r3, #8
 8002d6a:	b21a      	sxth	r2, r3
 8002d6c:	4ba9      	ldr	r3, [pc, #676]	; (8003014 <main+0x4a4>)
 8002d6e:	78db      	ldrb	r3, [r3, #3]
 8002d70:	b21b      	sxth	r3, r3
 8002d72:	4313      	orrs	r3, r2
 8002d74:	b21a      	sxth	r2, r3
 8002d76:	4ba8      	ldr	r3, [pc, #672]	; (8003018 <main+0x4a8>)
 8002d78:	805a      	strh	r2, [r3, #2]
	  acc_raw[2] = (tuffer[4] << 8 | tuffer[5]);
 8002d7a:	4ba6      	ldr	r3, [pc, #664]	; (8003014 <main+0x4a4>)
 8002d7c:	791b      	ldrb	r3, [r3, #4]
 8002d7e:	021b      	lsls	r3, r3, #8
 8002d80:	b21a      	sxth	r2, r3
 8002d82:	4ba4      	ldr	r3, [pc, #656]	; (8003014 <main+0x4a4>)
 8002d84:	795b      	ldrb	r3, [r3, #5]
 8002d86:	b21b      	sxth	r3, r3
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	b21a      	sxth	r2, r3
 8002d8c:	4ba2      	ldr	r3, [pc, #648]	; (8003018 <main+0x4a8>)
 8002d8e:	809a      	strh	r2, [r3, #4]


	  buffer[0]=0x41;
 8002d90:	4ba2      	ldr	r3, [pc, #648]	; (800301c <main+0x4ac>)
 8002d92:	2241      	movs	r2, #65	; 0x41
 8002d94:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Master_Transmit(&hi2c1,GY_ADDR,buffer,1,HAL_MAX_DELAY);
 8002d96:	4aa1      	ldr	r2, [pc, #644]	; (800301c <main+0x4ac>)
 8002d98:	489a      	ldr	r0, [pc, #616]	; (8003004 <main+0x494>)
 8002d9a:	2364      	movs	r3, #100	; 0x64
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	2301      	movs	r3, #1
 8002da0:	21d0      	movs	r1, #208	; 0xd0
 8002da2:	f000 ffad 	bl	8003d00 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1,GY_ADDR,buffer,2,HAL_MAX_DELAY);
 8002da6:	4a9d      	ldr	r2, [pc, #628]	; (800301c <main+0x4ac>)
 8002da8:	4896      	ldr	r0, [pc, #600]	; (8003004 <main+0x494>)
 8002daa:	2364      	movs	r3, #100	; 0x64
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	2302      	movs	r3, #2
 8002db0:	21d0      	movs	r1, #208	; 0xd0
 8002db2:	f001 f8ad 	bl	8003f10 <HAL_I2C_Master_Receive>

	  // Temperature Values
	  raw_temp = (buffer[0] << 8 | buffer[1]);
 8002db6:	4b99      	ldr	r3, [pc, #612]	; (800301c <main+0x4ac>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	021b      	lsls	r3, r3, #8
 8002dbc:	b21a      	sxth	r2, r3
 8002dbe:	4b97      	ldr	r3, [pc, #604]	; (800301c <main+0x4ac>)
 8002dc0:	785b      	ldrb	r3, [r3, #1]
 8002dc2:	b21b      	sxth	r3, r3
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	b21a      	sxth	r2, r3
 8002dc8:	4b95      	ldr	r3, [pc, #596]	; (8003020 <main+0x4b0>)
 8002dca:	801a      	strh	r2, [r3, #0]
	  temp = (raw_temp / 340.0) + 36.53;
 8002dcc:	4b94      	ldr	r3, [pc, #592]	; (8003020 <main+0x4b0>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	5e9b      	ldrsh	r3, [r3, r2]
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	f7ff fdae 	bl	8002934 <__aeabi_i2d>
 8002dd8:	2200      	movs	r2, #0
 8002dda:	4b92      	ldr	r3, [pc, #584]	; (8003024 <main+0x4b4>)
 8002ddc:	f7fe fb56 	bl	800148c <__aeabi_ddiv>
 8002de0:	0002      	movs	r2, r0
 8002de2:	000b      	movs	r3, r1
 8002de4:	0010      	movs	r0, r2
 8002de6:	0019      	movs	r1, r3
 8002de8:	4a8f      	ldr	r2, [pc, #572]	; (8003028 <main+0x4b8>)
 8002dea:	4b90      	ldr	r3, [pc, #576]	; (800302c <main+0x4bc>)
 8002dec:	f7fe f812 	bl	8000e14 <__aeabi_dadd>
 8002df0:	0002      	movs	r2, r0
 8002df2:	000b      	movs	r3, r1
 8002df4:	0010      	movs	r0, r2
 8002df6:	0019      	movs	r1, r3
 8002df8:	f7ff fe14 	bl	8002a24 <__aeabi_d2f>
 8002dfc:	1c02      	adds	r2, r0, #0
 8002dfe:	4b8c      	ldr	r3, [pc, #560]	; (8003030 <main+0x4c0>)
 8002e00:	601a      	str	r2, [r3, #0]

	  cuffer[0]=0x43;
 8002e02:	4b7f      	ldr	r3, [pc, #508]	; (8003000 <main+0x490>)
 8002e04:	2243      	movs	r2, #67	; 0x43
 8002e06:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Master_Transmit(&hi2c1,GY_ADDR,cuffer,1,HAL_MAX_DELAY);
 8002e08:	4a7d      	ldr	r2, [pc, #500]	; (8003000 <main+0x490>)
 8002e0a:	487e      	ldr	r0, [pc, #504]	; (8003004 <main+0x494>)
 8002e0c:	2364      	movs	r3, #100	; 0x64
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	2301      	movs	r3, #1
 8002e12:	21d0      	movs	r1, #208	; 0xd0
 8002e14:	f000 ff74 	bl	8003d00 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1,GY_ADDR,cuffer,6,HAL_MAX_DELAY);
 8002e18:	4a79      	ldr	r2, [pc, #484]	; (8003000 <main+0x490>)
 8002e1a:	487a      	ldr	r0, [pc, #488]	; (8003004 <main+0x494>)
 8002e1c:	2364      	movs	r3, #100	; 0x64
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	2306      	movs	r3, #6
 8002e22:	21d0      	movs	r1, #208	; 0xd0
 8002e24:	f001 f874 	bl	8003f10 <HAL_I2C_Master_Receive>

	  // Gyro Raw Values
	  	  gyro_raw[0] = (cuffer[0] << 8 | cuffer[1]);
 8002e28:	4b75      	ldr	r3, [pc, #468]	; (8003000 <main+0x490>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	021b      	lsls	r3, r3, #8
 8002e2e:	b21a      	sxth	r2, r3
 8002e30:	4b73      	ldr	r3, [pc, #460]	; (8003000 <main+0x490>)
 8002e32:	785b      	ldrb	r3, [r3, #1]
 8002e34:	b21b      	sxth	r3, r3
 8002e36:	4313      	orrs	r3, r2
 8002e38:	b21a      	sxth	r2, r3
 8002e3a:	4b73      	ldr	r3, [pc, #460]	; (8003008 <main+0x498>)
 8002e3c:	801a      	strh	r2, [r3, #0]
	  	  gyro_raw[1] = (cuffer[2] << 8 | cuffer[3]);
 8002e3e:	4b70      	ldr	r3, [pc, #448]	; (8003000 <main+0x490>)
 8002e40:	789b      	ldrb	r3, [r3, #2]
 8002e42:	021b      	lsls	r3, r3, #8
 8002e44:	b21a      	sxth	r2, r3
 8002e46:	4b6e      	ldr	r3, [pc, #440]	; (8003000 <main+0x490>)
 8002e48:	78db      	ldrb	r3, [r3, #3]
 8002e4a:	b21b      	sxth	r3, r3
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	b21a      	sxth	r2, r3
 8002e50:	4b6d      	ldr	r3, [pc, #436]	; (8003008 <main+0x498>)
 8002e52:	805a      	strh	r2, [r3, #2]
	  	  gyro_raw[2] = (cuffer[4] << 8 | cuffer[5]);
 8002e54:	4b6a      	ldr	r3, [pc, #424]	; (8003000 <main+0x490>)
 8002e56:	791b      	ldrb	r3, [r3, #4]
 8002e58:	021b      	lsls	r3, r3, #8
 8002e5a:	b21a      	sxth	r2, r3
 8002e5c:	4b68      	ldr	r3, [pc, #416]	; (8003000 <main+0x490>)
 8002e5e:	795b      	ldrb	r3, [r3, #5]
 8002e60:	b21b      	sxth	r3, r3
 8002e62:	4313      	orrs	r3, r2
 8002e64:	b21a      	sxth	r2, r3
 8002e66:	4b68      	ldr	r3, [pc, #416]	; (8003008 <main+0x498>)
 8002e68:	809a      	strh	r2, [r3, #4]

	  	  gyro_raw[0] -= gyro_cal[0];
 8002e6a:	4b67      	ldr	r3, [pc, #412]	; (8003008 <main+0x498>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	5e9b      	ldrsh	r3, [r3, r2]
 8002e70:	0018      	movs	r0, r3
 8002e72:	f7fd ff81 	bl	8000d78 <__aeabi_i2f>
 8002e76:	1c02      	adds	r2, r0, #0
 8002e78:	4b64      	ldr	r3, [pc, #400]	; (800300c <main+0x49c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	1c19      	adds	r1, r3, #0
 8002e7e:	1c10      	adds	r0, r2, #0
 8002e80:	f7fd fdac 	bl	80009dc <__aeabi_fsub>
 8002e84:	1c03      	adds	r3, r0, #0
 8002e86:	1c18      	adds	r0, r3, #0
 8002e88:	f7fd ff56 	bl	8000d38 <__aeabi_f2iz>
 8002e8c:	0003      	movs	r3, r0
 8002e8e:	b21a      	sxth	r2, r3
 8002e90:	4b5d      	ldr	r3, [pc, #372]	; (8003008 <main+0x498>)
 8002e92:	801a      	strh	r2, [r3, #0]
	  	  gyro_raw[1] -= gyro_cal[1];
 8002e94:	4b5c      	ldr	r3, [pc, #368]	; (8003008 <main+0x498>)
 8002e96:	2202      	movs	r2, #2
 8002e98:	5e9b      	ldrsh	r3, [r3, r2]
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	f7fd ff6c 	bl	8000d78 <__aeabi_i2f>
 8002ea0:	1c02      	adds	r2, r0, #0
 8002ea2:	4b5a      	ldr	r3, [pc, #360]	; (800300c <main+0x49c>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	1c19      	adds	r1, r3, #0
 8002ea8:	1c10      	adds	r0, r2, #0
 8002eaa:	f7fd fd97 	bl	80009dc <__aeabi_fsub>
 8002eae:	1c03      	adds	r3, r0, #0
 8002eb0:	1c18      	adds	r0, r3, #0
 8002eb2:	f7fd ff41 	bl	8000d38 <__aeabi_f2iz>
 8002eb6:	0003      	movs	r3, r0
 8002eb8:	b21a      	sxth	r2, r3
 8002eba:	4b53      	ldr	r3, [pc, #332]	; (8003008 <main+0x498>)
 8002ebc:	805a      	strh	r2, [r3, #2]
	  	  gyro_raw[2] -= gyro_cal[2];
 8002ebe:	4b52      	ldr	r3, [pc, #328]	; (8003008 <main+0x498>)
 8002ec0:	2204      	movs	r2, #4
 8002ec2:	5e9b      	ldrsh	r3, [r3, r2]
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	f7fd ff57 	bl	8000d78 <__aeabi_i2f>
 8002eca:	1c02      	adds	r2, r0, #0
 8002ecc:	4b4f      	ldr	r3, [pc, #316]	; (800300c <main+0x49c>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	1c19      	adds	r1, r3, #0
 8002ed2:	1c10      	adds	r0, r2, #0
 8002ed4:	f7fd fd82 	bl	80009dc <__aeabi_fsub>
 8002ed8:	1c03      	adds	r3, r0, #0
 8002eda:	1c18      	adds	r0, r3, #0
 8002edc:	f7fd ff2c 	bl	8000d38 <__aeabi_f2iz>
 8002ee0:	0003      	movs	r3, r0
 8002ee2:	b21a      	sxth	r2, r3
 8002ee4:	4b48      	ldr	r3, [pc, #288]	; (8003008 <main+0x498>)
 8002ee6:	809a      	strh	r2, [r3, #4]


	  	 angle_pitch_gyro += gyro_raw[0] * 0.0000611;
 8002ee8:	4b52      	ldr	r3, [pc, #328]	; (8003034 <main+0x4c4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	1c18      	adds	r0, r3, #0
 8002eee:	f7ff fd51 	bl	8002994 <__aeabi_f2d>
 8002ef2:	0004      	movs	r4, r0
 8002ef4:	000d      	movs	r5, r1
 8002ef6:	4b44      	ldr	r3, [pc, #272]	; (8003008 <main+0x498>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	5e9b      	ldrsh	r3, [r3, r2]
 8002efc:	0018      	movs	r0, r3
 8002efe:	f7ff fd19 	bl	8002934 <__aeabi_i2d>
 8002f02:	4a4d      	ldr	r2, [pc, #308]	; (8003038 <main+0x4c8>)
 8002f04:	4b4d      	ldr	r3, [pc, #308]	; (800303c <main+0x4cc>)
 8002f06:	f7fe fec3 	bl	8001c90 <__aeabi_dmul>
 8002f0a:	0002      	movs	r2, r0
 8002f0c:	000b      	movs	r3, r1
 8002f0e:	0020      	movs	r0, r4
 8002f10:	0029      	movs	r1, r5
 8002f12:	f7fd ff7f 	bl	8000e14 <__aeabi_dadd>
 8002f16:	0002      	movs	r2, r0
 8002f18:	000b      	movs	r3, r1
 8002f1a:	0010      	movs	r0, r2
 8002f1c:	0019      	movs	r1, r3
 8002f1e:	f7ff fd81 	bl	8002a24 <__aeabi_d2f>
 8002f22:	1c02      	adds	r2, r0, #0
 8002f24:	4b43      	ldr	r3, [pc, #268]	; (8003034 <main+0x4c4>)
 8002f26:	601a      	str	r2, [r3, #0]
	     angle_roll_gyro += gyro_raw[1] * 0.0000611;
 8002f28:	4b45      	ldr	r3, [pc, #276]	; (8003040 <main+0x4d0>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	1c18      	adds	r0, r3, #0
 8002f2e:	f7ff fd31 	bl	8002994 <__aeabi_f2d>
 8002f32:	0004      	movs	r4, r0
 8002f34:	000d      	movs	r5, r1
 8002f36:	4b34      	ldr	r3, [pc, #208]	; (8003008 <main+0x498>)
 8002f38:	2202      	movs	r2, #2
 8002f3a:	5e9b      	ldrsh	r3, [r3, r2]
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f7ff fcf9 	bl	8002934 <__aeabi_i2d>
 8002f42:	4a3d      	ldr	r2, [pc, #244]	; (8003038 <main+0x4c8>)
 8002f44:	4b3d      	ldr	r3, [pc, #244]	; (800303c <main+0x4cc>)
 8002f46:	f7fe fea3 	bl	8001c90 <__aeabi_dmul>
 8002f4a:	0002      	movs	r2, r0
 8002f4c:	000b      	movs	r3, r1
 8002f4e:	0020      	movs	r0, r4
 8002f50:	0029      	movs	r1, r5
 8002f52:	f7fd ff5f 	bl	8000e14 <__aeabi_dadd>
 8002f56:	0002      	movs	r2, r0
 8002f58:	000b      	movs	r3, r1
 8002f5a:	0010      	movs	r0, r2
 8002f5c:	0019      	movs	r1, r3
 8002f5e:	f7ff fd61 	bl	8002a24 <__aeabi_d2f>
 8002f62:	1c02      	adds	r2, r0, #0
 8002f64:	4b36      	ldr	r3, [pc, #216]	; (8003040 <main+0x4d0>)
 8002f66:	601a      	str	r2, [r3, #0]
         angle_pitch_gyro += angle_roll_gyro * sin(gyro_raw[2] * 0.000001066);
 8002f68:	4b32      	ldr	r3, [pc, #200]	; (8003034 <main+0x4c4>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	1c18      	adds	r0, r3, #0
 8002f6e:	f7ff fd11 	bl	8002994 <__aeabi_f2d>
 8002f72:	0004      	movs	r4, r0
 8002f74:	000d      	movs	r5, r1
 8002f76:	4b32      	ldr	r3, [pc, #200]	; (8003040 <main+0x4d0>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	1c18      	adds	r0, r3, #0
 8002f7c:	f7ff fd0a 	bl	8002994 <__aeabi_f2d>
 8002f80:	6038      	str	r0, [r7, #0]
 8002f82:	6079      	str	r1, [r7, #4]
 8002f84:	4b20      	ldr	r3, [pc, #128]	; (8003008 <main+0x498>)
 8002f86:	2204      	movs	r2, #4
 8002f88:	5e9b      	ldrsh	r3, [r3, r2]
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	f7ff fcd2 	bl	8002934 <__aeabi_i2d>
 8002f90:	4a2c      	ldr	r2, [pc, #176]	; (8003044 <main+0x4d4>)
 8002f92:	4b2d      	ldr	r3, [pc, #180]	; (8003048 <main+0x4d8>)
 8002f94:	f7fe fe7c 	bl	8001c90 <__aeabi_dmul>
 8002f98:	0002      	movs	r2, r0
 8002f9a:	000b      	movs	r3, r1
 8002f9c:	0010      	movs	r0, r2
 8002f9e:	0019      	movs	r1, r3
 8002fa0:	f002 fa64 	bl	800546c <sin>
 8002fa4:	0002      	movs	r2, r0
 8002fa6:	000b      	movs	r3, r1
 8002fa8:	6838      	ldr	r0, [r7, #0]
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	f7fe fe70 	bl	8001c90 <__aeabi_dmul>
 8002fb0:	0002      	movs	r2, r0
 8002fb2:	000b      	movs	r3, r1
 8002fb4:	0020      	movs	r0, r4
 8002fb6:	0029      	movs	r1, r5
 8002fb8:	f7fd ff2c 	bl	8000e14 <__aeabi_dadd>
 8002fbc:	0002      	movs	r2, r0
 8002fbe:	000b      	movs	r3, r1
 8002fc0:	0010      	movs	r0, r2
 8002fc2:	0019      	movs	r1, r3
 8002fc4:	f7ff fd2e 	bl	8002a24 <__aeabi_d2f>
 8002fc8:	1c02      	adds	r2, r0, #0
 8002fca:	4b1a      	ldr	r3, [pc, #104]	; (8003034 <main+0x4c4>)
 8002fcc:	601a      	str	r2, [r3, #0]
	     angle_roll_gyro -= angle_pitch_gyro * sin(gyro_raw[2] * 0.000001066);
 8002fce:	4b1c      	ldr	r3, [pc, #112]	; (8003040 <main+0x4d0>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	1c18      	adds	r0, r3, #0
 8002fd4:	f7ff fcde 	bl	8002994 <__aeabi_f2d>
 8002fd8:	0004      	movs	r4, r0
 8002fda:	000d      	movs	r5, r1
 8002fdc:	4b15      	ldr	r3, [pc, #84]	; (8003034 <main+0x4c4>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	1c18      	adds	r0, r3, #0
 8002fe2:	f7ff fcd7 	bl	8002994 <__aeabi_f2d>
 8002fe6:	6038      	str	r0, [r7, #0]
 8002fe8:	6079      	str	r1, [r7, #4]
 8002fea:	4b07      	ldr	r3, [pc, #28]	; (8003008 <main+0x498>)
 8002fec:	2204      	movs	r2, #4
 8002fee:	5e9b      	ldrsh	r3, [r3, r2]
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f7ff fc9f 	bl	8002934 <__aeabi_i2d>
 8002ff6:	4a13      	ldr	r2, [pc, #76]	; (8003044 <main+0x4d4>)
 8002ff8:	4b13      	ldr	r3, [pc, #76]	; (8003048 <main+0x4d8>)
 8002ffa:	f7fe fe49 	bl	8001c90 <__aeabi_dmul>
 8002ffe:	e025      	b.n	800304c <main+0x4dc>
 8003000:	200000e8 	.word	0x200000e8
 8003004:	2000008c 	.word	0x2000008c
 8003008:	200000f0 	.word	0x200000f0
 800300c:	20000100 	.word	0x20000100
 8003010:	44fa0000 	.word	0x44fa0000
 8003014:	200000e0 	.word	0x200000e0
 8003018:	200000f8 	.word	0x200000f8
 800301c:	200000dc 	.word	0x200000dc
 8003020:	20000128 	.word	0x20000128
 8003024:	40754000 	.word	0x40754000
 8003028:	0a3d70a4 	.word	0x0a3d70a4
 800302c:	404243d7 	.word	0x404243d7
 8003030:	2000012c 	.word	0x2000012c
 8003034:	20000110 	.word	0x20000110
 8003038:	01d41596 	.word	0x01d41596
 800303c:	3f10045a 	.word	0x3f10045a
 8003040:	20000114 	.word	0x20000114
 8003044:	652c6e62 	.word	0x652c6e62
 8003048:	3eb1e26f 	.word	0x3eb1e26f
 800304c:	0002      	movs	r2, r0
 800304e:	000b      	movs	r3, r1
 8003050:	0010      	movs	r0, r2
 8003052:	0019      	movs	r1, r3
 8003054:	f002 fa0a 	bl	800546c <sin>
 8003058:	0002      	movs	r2, r0
 800305a:	000b      	movs	r3, r1
 800305c:	6838      	ldr	r0, [r7, #0]
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	f7fe fe16 	bl	8001c90 <__aeabi_dmul>
 8003064:	0002      	movs	r2, r0
 8003066:	000b      	movs	r3, r1
 8003068:	0020      	movs	r0, r4
 800306a:	0029      	movs	r1, r5
 800306c:	f7ff f87c 	bl	8002168 <__aeabi_dsub>
 8003070:	0002      	movs	r2, r0
 8003072:	000b      	movs	r3, r1
 8003074:	0010      	movs	r0, r2
 8003076:	0019      	movs	r1, r3
 8003078:	f7ff fcd4 	bl	8002a24 <__aeabi_d2f>
 800307c:	1c02      	adds	r2, r0, #0
 800307e:	4b70      	ldr	r3, [pc, #448]	; (8003240 <main+0x6d0>)
 8003080:	601a      	str	r2, [r3, #0]

	     acc_total_vector = sqrt((acc_raw[0]*acc_raw[0])+(acc_raw[1]*acc_raw[1])+(acc_raw[2]*acc_raw[2]));
 8003082:	4b70      	ldr	r3, [pc, #448]	; (8003244 <main+0x6d4>)
 8003084:	2200      	movs	r2, #0
 8003086:	5e9b      	ldrsh	r3, [r3, r2]
 8003088:	001a      	movs	r2, r3
 800308a:	4b6e      	ldr	r3, [pc, #440]	; (8003244 <main+0x6d4>)
 800308c:	2100      	movs	r1, #0
 800308e:	5e5b      	ldrsh	r3, [r3, r1]
 8003090:	435a      	muls	r2, r3
 8003092:	4b6c      	ldr	r3, [pc, #432]	; (8003244 <main+0x6d4>)
 8003094:	2102      	movs	r1, #2
 8003096:	5e5b      	ldrsh	r3, [r3, r1]
 8003098:	0019      	movs	r1, r3
 800309a:	4b6a      	ldr	r3, [pc, #424]	; (8003244 <main+0x6d4>)
 800309c:	2002      	movs	r0, #2
 800309e:	5e1b      	ldrsh	r3, [r3, r0]
 80030a0:	434b      	muls	r3, r1
 80030a2:	18d2      	adds	r2, r2, r3
 80030a4:	4b67      	ldr	r3, [pc, #412]	; (8003244 <main+0x6d4>)
 80030a6:	2104      	movs	r1, #4
 80030a8:	5e5b      	ldrsh	r3, [r3, r1]
 80030aa:	0019      	movs	r1, r3
 80030ac:	4b65      	ldr	r3, [pc, #404]	; (8003244 <main+0x6d4>)
 80030ae:	2004      	movs	r0, #4
 80030b0:	5e1b      	ldrsh	r3, [r3, r0]
 80030b2:	434b      	muls	r3, r1
 80030b4:	18d3      	adds	r3, r2, r3
 80030b6:	0018      	movs	r0, r3
 80030b8:	f7ff fc3c 	bl	8002934 <__aeabi_i2d>
 80030bc:	0002      	movs	r2, r0
 80030be:	000b      	movs	r3, r1
 80030c0:	0010      	movs	r0, r2
 80030c2:	0019      	movs	r1, r3
 80030c4:	f002 fa42 	bl	800554c <sqrt>
 80030c8:	0002      	movs	r2, r0
 80030ca:	000b      	movs	r3, r1
 80030cc:	0010      	movs	r0, r2
 80030ce:	0019      	movs	r1, r3
 80030d0:	f7ff fbfa 	bl	80028c8 <__aeabi_d2iz>
 80030d4:	0003      	movs	r3, r0
 80030d6:	b21a      	sxth	r2, r3
 80030d8:	4b5b      	ldr	r3, [pc, #364]	; (8003248 <main+0x6d8>)
 80030da:	801a      	strh	r2, [r3, #0]

	     	  //57.296 = 1 / (3.142 / 180)
	     angle_pitch_acc = asin((float)acc_raw[1]/acc_total_vector)* 57.296;
 80030dc:	4b59      	ldr	r3, [pc, #356]	; (8003244 <main+0x6d4>)
 80030de:	2202      	movs	r2, #2
 80030e0:	5e9b      	ldrsh	r3, [r3, r2]
 80030e2:	0018      	movs	r0, r3
 80030e4:	f7fd fe48 	bl	8000d78 <__aeabi_i2f>
 80030e8:	1c04      	adds	r4, r0, #0
 80030ea:	4b57      	ldr	r3, [pc, #348]	; (8003248 <main+0x6d8>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	5e9b      	ldrsh	r3, [r3, r2]
 80030f0:	0018      	movs	r0, r3
 80030f2:	f7fd fe41 	bl	8000d78 <__aeabi_i2f>
 80030f6:	1c03      	adds	r3, r0, #0
 80030f8:	1c19      	adds	r1, r3, #0
 80030fa:	1c20      	adds	r0, r4, #0
 80030fc:	f7fd fb56 	bl	80007ac <__aeabi_fdiv>
 8003100:	1c03      	adds	r3, r0, #0
 8003102:	1c18      	adds	r0, r3, #0
 8003104:	f7ff fc46 	bl	8002994 <__aeabi_f2d>
 8003108:	0002      	movs	r2, r0
 800310a:	000b      	movs	r3, r1
 800310c:	0010      	movs	r0, r2
 800310e:	0019      	movs	r1, r3
 8003110:	f002 f9f2 	bl	80054f8 <asin>
 8003114:	4a4d      	ldr	r2, [pc, #308]	; (800324c <main+0x6dc>)
 8003116:	4b4e      	ldr	r3, [pc, #312]	; (8003250 <main+0x6e0>)
 8003118:	f7fe fdba 	bl	8001c90 <__aeabi_dmul>
 800311c:	0002      	movs	r2, r0
 800311e:	000b      	movs	r3, r1
 8003120:	0010      	movs	r0, r2
 8003122:	0019      	movs	r1, r3
 8003124:	f7ff fc7e 	bl	8002a24 <__aeabi_d2f>
 8003128:	1c02      	adds	r2, r0, #0
 800312a:	4b4a      	ldr	r3, [pc, #296]	; (8003254 <main+0x6e4>)
 800312c:	601a      	str	r2, [r3, #0]
	     angle_roll_acc = asin((float)acc_raw[0]/acc_total_vector)* -57.296;
 800312e:	4b45      	ldr	r3, [pc, #276]	; (8003244 <main+0x6d4>)
 8003130:	2200      	movs	r2, #0
 8003132:	5e9b      	ldrsh	r3, [r3, r2]
 8003134:	0018      	movs	r0, r3
 8003136:	f7fd fe1f 	bl	8000d78 <__aeabi_i2f>
 800313a:	1c04      	adds	r4, r0, #0
 800313c:	4b42      	ldr	r3, [pc, #264]	; (8003248 <main+0x6d8>)
 800313e:	2200      	movs	r2, #0
 8003140:	5e9b      	ldrsh	r3, [r3, r2]
 8003142:	0018      	movs	r0, r3
 8003144:	f7fd fe18 	bl	8000d78 <__aeabi_i2f>
 8003148:	1c03      	adds	r3, r0, #0
 800314a:	1c19      	adds	r1, r3, #0
 800314c:	1c20      	adds	r0, r4, #0
 800314e:	f7fd fb2d 	bl	80007ac <__aeabi_fdiv>
 8003152:	1c03      	adds	r3, r0, #0
 8003154:	1c18      	adds	r0, r3, #0
 8003156:	f7ff fc1d 	bl	8002994 <__aeabi_f2d>
 800315a:	0002      	movs	r2, r0
 800315c:	000b      	movs	r3, r1
 800315e:	0010      	movs	r0, r2
 8003160:	0019      	movs	r1, r3
 8003162:	f002 f9c9 	bl	80054f8 <asin>
 8003166:	4a39      	ldr	r2, [pc, #228]	; (800324c <main+0x6dc>)
 8003168:	4b3b      	ldr	r3, [pc, #236]	; (8003258 <main+0x6e8>)
 800316a:	f7fe fd91 	bl	8001c90 <__aeabi_dmul>
 800316e:	0002      	movs	r2, r0
 8003170:	000b      	movs	r3, r1
 8003172:	0010      	movs	r0, r2
 8003174:	0019      	movs	r1, r3
 8003176:	f7ff fc55 	bl	8002a24 <__aeabi_d2f>
 800317a:	1c02      	adds	r2, r0, #0
 800317c:	4b37      	ldr	r3, [pc, #220]	; (800325c <main+0x6ec>)
 800317e:	601a      	str	r2, [r3, #0]


	     angle_pitch_acc -= 0;//0.05;
 8003180:	4b34      	ldr	r3, [pc, #208]	; (8003254 <main+0x6e4>)
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	4b33      	ldr	r3, [pc, #204]	; (8003254 <main+0x6e4>)
 8003186:	601a      	str	r2, [r3, #0]
	     angle_roll_acc -= 0;//-1.32;
 8003188:	4b34      	ldr	r3, [pc, #208]	; (800325c <main+0x6ec>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	4b33      	ldr	r3, [pc, #204]	; (800325c <main+0x6ec>)
 800318e:	601a      	str	r2, [r3, #0]

	     	  if(set_gyro){
 8003190:	4b33      	ldr	r3, [pc, #204]	; (8003260 <main+0x6f0>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d04a      	beq.n	800322e <main+0x6be>
	     		  angle_pitch = angle_pitch_gyro * 0.9996 + angle_pitch_acc * 0.0004;
 8003198:	4b32      	ldr	r3, [pc, #200]	; (8003264 <main+0x6f4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	1c18      	adds	r0, r3, #0
 800319e:	f7ff fbf9 	bl	8002994 <__aeabi_f2d>
 80031a2:	4a31      	ldr	r2, [pc, #196]	; (8003268 <main+0x6f8>)
 80031a4:	4b31      	ldr	r3, [pc, #196]	; (800326c <main+0x6fc>)
 80031a6:	f7fe fd73 	bl	8001c90 <__aeabi_dmul>
 80031aa:	0002      	movs	r2, r0
 80031ac:	000b      	movs	r3, r1
 80031ae:	0014      	movs	r4, r2
 80031b0:	001d      	movs	r5, r3
 80031b2:	4b28      	ldr	r3, [pc, #160]	; (8003254 <main+0x6e4>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	1c18      	adds	r0, r3, #0
 80031b8:	f7ff fbec 	bl	8002994 <__aeabi_f2d>
 80031bc:	4a2c      	ldr	r2, [pc, #176]	; (8003270 <main+0x700>)
 80031be:	4b2d      	ldr	r3, [pc, #180]	; (8003274 <main+0x704>)
 80031c0:	f7fe fd66 	bl	8001c90 <__aeabi_dmul>
 80031c4:	0002      	movs	r2, r0
 80031c6:	000b      	movs	r3, r1
 80031c8:	0020      	movs	r0, r4
 80031ca:	0029      	movs	r1, r5
 80031cc:	f7fd fe22 	bl	8000e14 <__aeabi_dadd>
 80031d0:	0002      	movs	r2, r0
 80031d2:	000b      	movs	r3, r1
 80031d4:	0010      	movs	r0, r2
 80031d6:	0019      	movs	r1, r3
 80031d8:	f7ff fc24 	bl	8002a24 <__aeabi_d2f>
 80031dc:	1c02      	adds	r2, r0, #0
 80031de:	4b26      	ldr	r3, [pc, #152]	; (8003278 <main+0x708>)
 80031e0:	601a      	str	r2, [r3, #0]
	     		  angle_roll = angle_roll_gyro * 0.9996 + angle_roll_acc * 0.0004;
 80031e2:	4b17      	ldr	r3, [pc, #92]	; (8003240 <main+0x6d0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	1c18      	adds	r0, r3, #0
 80031e8:	f7ff fbd4 	bl	8002994 <__aeabi_f2d>
 80031ec:	4a1e      	ldr	r2, [pc, #120]	; (8003268 <main+0x6f8>)
 80031ee:	4b1f      	ldr	r3, [pc, #124]	; (800326c <main+0x6fc>)
 80031f0:	f7fe fd4e 	bl	8001c90 <__aeabi_dmul>
 80031f4:	0002      	movs	r2, r0
 80031f6:	000b      	movs	r3, r1
 80031f8:	0014      	movs	r4, r2
 80031fa:	001d      	movs	r5, r3
 80031fc:	4b17      	ldr	r3, [pc, #92]	; (800325c <main+0x6ec>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	1c18      	adds	r0, r3, #0
 8003202:	f7ff fbc7 	bl	8002994 <__aeabi_f2d>
 8003206:	4a1a      	ldr	r2, [pc, #104]	; (8003270 <main+0x700>)
 8003208:	4b1a      	ldr	r3, [pc, #104]	; (8003274 <main+0x704>)
 800320a:	f7fe fd41 	bl	8001c90 <__aeabi_dmul>
 800320e:	0002      	movs	r2, r0
 8003210:	000b      	movs	r3, r1
 8003212:	0020      	movs	r0, r4
 8003214:	0029      	movs	r1, r5
 8003216:	f7fd fdfd 	bl	8000e14 <__aeabi_dadd>
 800321a:	0002      	movs	r2, r0
 800321c:	000b      	movs	r3, r1
 800321e:	0010      	movs	r0, r2
 8003220:	0019      	movs	r1, r3
 8003222:	f7ff fbff 	bl	8002a24 <__aeabi_d2f>
 8003226:	1c02      	adds	r2, r0, #0
 8003228:	4b14      	ldr	r3, [pc, #80]	; (800327c <main+0x70c>)
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	e57c      	b.n	8002d28 <main+0x1b8>
	     		}
	     	  else
	     	  {
	     		  angle_pitch = angle_pitch_acc;
 800322e:	4b09      	ldr	r3, [pc, #36]	; (8003254 <main+0x6e4>)
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	4b11      	ldr	r3, [pc, #68]	; (8003278 <main+0x708>)
 8003234:	601a      	str	r2, [r3, #0]
	     		  set_gyro = true;
 8003236:	4b0a      	ldr	r3, [pc, #40]	; (8003260 <main+0x6f0>)
 8003238:	2201      	movs	r2, #1
 800323a:	701a      	strb	r2, [r3, #0]
	  tuffer[0]=0x3B; //register 59 - 64
 800323c:	e574      	b.n	8002d28 <main+0x1b8>
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	20000114 	.word	0x20000114
 8003244:	200000f8 	.word	0x200000f8
 8003248:	2000010c 	.word	0x2000010c
 800324c:	53f7ced9 	.word	0x53f7ced9
 8003250:	404ca5e3 	.word	0x404ca5e3
 8003254:	20000118 	.word	0x20000118
 8003258:	c04ca5e3 	.word	0xc04ca5e3
 800325c:	2000011c 	.word	0x2000011c
 8003260:	20000130 	.word	0x20000130
 8003264:	20000110 	.word	0x20000110
 8003268:	23a29c78 	.word	0x23a29c78
 800326c:	3feffcb9 	.word	0x3feffcb9
 8003270:	eb1c432d 	.word	0xeb1c432d
 8003274:	3f3a36e2 	.word	0x3f3a36e2
 8003278:	20000120 	.word	0x20000120
 800327c:	20000124 	.word	0x20000124

08003280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003280:	b590      	push	{r4, r7, lr}
 8003282:	b097      	sub	sp, #92	; 0x5c
 8003284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003286:	2428      	movs	r4, #40	; 0x28
 8003288:	193b      	adds	r3, r7, r4
 800328a:	0018      	movs	r0, r3
 800328c:	2330      	movs	r3, #48	; 0x30
 800328e:	001a      	movs	r2, r3
 8003290:	2100      	movs	r1, #0
 8003292:	f002 f8e3 	bl	800545c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003296:	2318      	movs	r3, #24
 8003298:	18fb      	adds	r3, r7, r3
 800329a:	0018      	movs	r0, r3
 800329c:	2310      	movs	r3, #16
 800329e:	001a      	movs	r2, r3
 80032a0:	2100      	movs	r1, #0
 80032a2:	f002 f8db 	bl	800545c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032a6:	1d3b      	adds	r3, r7, #4
 80032a8:	0018      	movs	r0, r3
 80032aa:	2314      	movs	r3, #20
 80032ac:	001a      	movs	r2, r3
 80032ae:	2100      	movs	r1, #0
 80032b0:	f002 f8d4 	bl	800545c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80032b4:	0021      	movs	r1, r4
 80032b6:	187b      	adds	r3, r7, r1
 80032b8:	2203      	movs	r2, #3
 80032ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80032bc:	187b      	adds	r3, r7, r1
 80032be:	2201      	movs	r2, #1
 80032c0:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80032c2:	187b      	adds	r3, r7, r1
 80032c4:	2201      	movs	r2, #1
 80032c6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80032c8:	187b      	adds	r3, r7, r1
 80032ca:	2210      	movs	r2, #16
 80032cc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032ce:	187b      	adds	r3, r7, r1
 80032d0:	2202      	movs	r2, #2
 80032d2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80032d4:	187b      	adds	r3, r7, r1
 80032d6:	2280      	movs	r2, #128	; 0x80
 80032d8:	0252      	lsls	r2, r2, #9
 80032da:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80032dc:	187b      	adds	r3, r7, r1
 80032de:	2280      	movs	r2, #128	; 0x80
 80032e0:	0352      	lsls	r2, r2, #13
 80032e2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80032e4:	187b      	adds	r3, r7, r1
 80032e6:	2200      	movs	r2, #0
 80032e8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032ea:	187b      	adds	r3, r7, r1
 80032ec:	0018      	movs	r0, r3
 80032ee:	f001 fb39 	bl	8004964 <HAL_RCC_OscConfig>
 80032f2:	1e03      	subs	r3, r0, #0
 80032f4:	d001      	beq.n	80032fa <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80032f6:	f000 f8e3 	bl	80034c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032fa:	2118      	movs	r1, #24
 80032fc:	187b      	adds	r3, r7, r1
 80032fe:	2207      	movs	r2, #7
 8003300:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003302:	187b      	adds	r3, r7, r1
 8003304:	2202      	movs	r2, #2
 8003306:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003308:	187b      	adds	r3, r7, r1
 800330a:	2200      	movs	r2, #0
 800330c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800330e:	187b      	adds	r3, r7, r1
 8003310:	2200      	movs	r2, #0
 8003312:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003314:	187b      	adds	r3, r7, r1
 8003316:	2101      	movs	r1, #1
 8003318:	0018      	movs	r0, r3
 800331a:	f001 fe3d 	bl	8004f98 <HAL_RCC_ClockConfig>
 800331e:	1e03      	subs	r3, r0, #0
 8003320:	d001      	beq.n	8003326 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8003322:	f000 f8cd 	bl	80034c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003326:	1d3b      	adds	r3, r7, #4
 8003328:	2220      	movs	r2, #32
 800332a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800332c:	1d3b      	adds	r3, r7, #4
 800332e:	2200      	movs	r2, #0
 8003330:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003332:	1d3b      	adds	r3, r7, #4
 8003334:	0018      	movs	r0, r3
 8003336:	f001 ff89 	bl	800524c <HAL_RCCEx_PeriphCLKConfig>
 800333a:	1e03      	subs	r3, r0, #0
 800333c:	d001      	beq.n	8003342 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800333e:	f000 f8bf 	bl	80034c0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8003342:	f001 fef7 	bl	8005134 <HAL_RCC_EnableCSS>
}
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	46bd      	mov	sp, r7
 800334a:	b017      	add	sp, #92	; 0x5c
 800334c:	bd90      	pop	{r4, r7, pc}
	...

08003350 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003354:	4b1b      	ldr	r3, [pc, #108]	; (80033c4 <MX_I2C1_Init+0x74>)
 8003356:	4a1c      	ldr	r2, [pc, #112]	; (80033c8 <MX_I2C1_Init+0x78>)
 8003358:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800335a:	4b1a      	ldr	r3, [pc, #104]	; (80033c4 <MX_I2C1_Init+0x74>)
 800335c:	4a1b      	ldr	r2, [pc, #108]	; (80033cc <MX_I2C1_Init+0x7c>)
 800335e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003360:	4b18      	ldr	r3, [pc, #96]	; (80033c4 <MX_I2C1_Init+0x74>)
 8003362:	2200      	movs	r2, #0
 8003364:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003366:	4b17      	ldr	r3, [pc, #92]	; (80033c4 <MX_I2C1_Init+0x74>)
 8003368:	2201      	movs	r2, #1
 800336a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800336c:	4b15      	ldr	r3, [pc, #84]	; (80033c4 <MX_I2C1_Init+0x74>)
 800336e:	2200      	movs	r2, #0
 8003370:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003372:	4b14      	ldr	r3, [pc, #80]	; (80033c4 <MX_I2C1_Init+0x74>)
 8003374:	2200      	movs	r2, #0
 8003376:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003378:	4b12      	ldr	r3, [pc, #72]	; (80033c4 <MX_I2C1_Init+0x74>)
 800337a:	2200      	movs	r2, #0
 800337c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800337e:	4b11      	ldr	r3, [pc, #68]	; (80033c4 <MX_I2C1_Init+0x74>)
 8003380:	2200      	movs	r2, #0
 8003382:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003384:	4b0f      	ldr	r3, [pc, #60]	; (80033c4 <MX_I2C1_Init+0x74>)
 8003386:	2200      	movs	r2, #0
 8003388:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800338a:	4b0e      	ldr	r3, [pc, #56]	; (80033c4 <MX_I2C1_Init+0x74>)
 800338c:	0018      	movs	r0, r3
 800338e:	f000 fc21 	bl	8003bd4 <HAL_I2C_Init>
 8003392:	1e03      	subs	r3, r0, #0
 8003394:	d001      	beq.n	800339a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003396:	f000 f893 	bl	80034c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800339a:	4b0a      	ldr	r3, [pc, #40]	; (80033c4 <MX_I2C1_Init+0x74>)
 800339c:	2100      	movs	r1, #0
 800339e:	0018      	movs	r0, r3
 80033a0:	f001 fa48 	bl	8004834 <HAL_I2CEx_ConfigAnalogFilter>
 80033a4:	1e03      	subs	r3, r0, #0
 80033a6:	d001      	beq.n	80033ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80033a8:	f000 f88a 	bl	80034c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80033ac:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <MX_I2C1_Init+0x74>)
 80033ae:	2100      	movs	r1, #0
 80033b0:	0018      	movs	r0, r3
 80033b2:	f001 fa8b 	bl	80048cc <HAL_I2CEx_ConfigDigitalFilter>
 80033b6:	1e03      	subs	r3, r0, #0
 80033b8:	d001      	beq.n	80033be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80033ba:	f000 f881 	bl	80034c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	2000008c 	.word	0x2000008c
 80033c8:	40005400 	.word	0x40005400
 80033cc:	2000090e 	.word	0x2000090e

080033d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033d0:	b590      	push	{r4, r7, lr}
 80033d2:	b08b      	sub	sp, #44	; 0x2c
 80033d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d6:	2414      	movs	r4, #20
 80033d8:	193b      	adds	r3, r7, r4
 80033da:	0018      	movs	r0, r3
 80033dc:	2314      	movs	r3, #20
 80033de:	001a      	movs	r2, r3
 80033e0:	2100      	movs	r1, #0
 80033e2:	f002 f83b 	bl	800545c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80033e6:	4b34      	ldr	r3, [pc, #208]	; (80034b8 <MX_GPIO_Init+0xe8>)
 80033e8:	695a      	ldr	r2, [r3, #20]
 80033ea:	4b33      	ldr	r3, [pc, #204]	; (80034b8 <MX_GPIO_Init+0xe8>)
 80033ec:	2180      	movs	r1, #128	; 0x80
 80033ee:	03c9      	lsls	r1, r1, #15
 80033f0:	430a      	orrs	r2, r1
 80033f2:	615a      	str	r2, [r3, #20]
 80033f4:	4b30      	ldr	r3, [pc, #192]	; (80034b8 <MX_GPIO_Init+0xe8>)
 80033f6:	695a      	ldr	r2, [r3, #20]
 80033f8:	2380      	movs	r3, #128	; 0x80
 80033fa:	03db      	lsls	r3, r3, #15
 80033fc:	4013      	ands	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]
 8003400:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003402:	4b2d      	ldr	r3, [pc, #180]	; (80034b8 <MX_GPIO_Init+0xe8>)
 8003404:	695a      	ldr	r2, [r3, #20]
 8003406:	4b2c      	ldr	r3, [pc, #176]	; (80034b8 <MX_GPIO_Init+0xe8>)
 8003408:	2180      	movs	r1, #128	; 0x80
 800340a:	0289      	lsls	r1, r1, #10
 800340c:	430a      	orrs	r2, r1
 800340e:	615a      	str	r2, [r3, #20]
 8003410:	4b29      	ldr	r3, [pc, #164]	; (80034b8 <MX_GPIO_Init+0xe8>)
 8003412:	695a      	ldr	r2, [r3, #20]
 8003414:	2380      	movs	r3, #128	; 0x80
 8003416:	029b      	lsls	r3, r3, #10
 8003418:	4013      	ands	r3, r2
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800341e:	4b26      	ldr	r3, [pc, #152]	; (80034b8 <MX_GPIO_Init+0xe8>)
 8003420:	695a      	ldr	r2, [r3, #20]
 8003422:	4b25      	ldr	r3, [pc, #148]	; (80034b8 <MX_GPIO_Init+0xe8>)
 8003424:	2180      	movs	r1, #128	; 0x80
 8003426:	0309      	lsls	r1, r1, #12
 8003428:	430a      	orrs	r2, r1
 800342a:	615a      	str	r2, [r3, #20]
 800342c:	4b22      	ldr	r3, [pc, #136]	; (80034b8 <MX_GPIO_Init+0xe8>)
 800342e:	695a      	ldr	r2, [r3, #20]
 8003430:	2380      	movs	r3, #128	; 0x80
 8003432:	031b      	lsls	r3, r3, #12
 8003434:	4013      	ands	r3, r2
 8003436:	60bb      	str	r3, [r7, #8]
 8003438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800343a:	4b1f      	ldr	r3, [pc, #124]	; (80034b8 <MX_GPIO_Init+0xe8>)
 800343c:	695a      	ldr	r2, [r3, #20]
 800343e:	4b1e      	ldr	r3, [pc, #120]	; (80034b8 <MX_GPIO_Init+0xe8>)
 8003440:	2180      	movs	r1, #128	; 0x80
 8003442:	02c9      	lsls	r1, r1, #11
 8003444:	430a      	orrs	r2, r1
 8003446:	615a      	str	r2, [r3, #20]
 8003448:	4b1b      	ldr	r3, [pc, #108]	; (80034b8 <MX_GPIO_Init+0xe8>)
 800344a:	695a      	ldr	r2, [r3, #20]
 800344c:	2380      	movs	r3, #128	; 0x80
 800344e:	02db      	lsls	r3, r3, #11
 8003450:	4013      	ands	r3, r2
 8003452:	607b      	str	r3, [r7, #4]
 8003454:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8003456:	23c0      	movs	r3, #192	; 0xc0
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4818      	ldr	r0, [pc, #96]	; (80034bc <MX_GPIO_Init+0xec>)
 800345c:	2200      	movs	r2, #0
 800345e:	0019      	movs	r1, r3
 8003460:	f000 fb9a 	bl	8003b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003464:	193b      	adds	r3, r7, r4
 8003466:	2201      	movs	r2, #1
 8003468:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800346a:	193b      	adds	r3, r7, r4
 800346c:	2290      	movs	r2, #144	; 0x90
 800346e:	0352      	lsls	r2, r2, #13
 8003470:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003472:	193b      	adds	r3, r7, r4
 8003474:	2200      	movs	r2, #0
 8003476:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003478:	193a      	adds	r2, r7, r4
 800347a:	2390      	movs	r3, #144	; 0x90
 800347c:	05db      	lsls	r3, r3, #23
 800347e:	0011      	movs	r1, r2
 8003480:	0018      	movs	r0, r3
 8003482:	f000 fa19 	bl	80038b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8003486:	0021      	movs	r1, r4
 8003488:	187b      	adds	r3, r7, r1
 800348a:	22c0      	movs	r2, #192	; 0xc0
 800348c:	0092      	lsls	r2, r2, #2
 800348e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003490:	187b      	adds	r3, r7, r1
 8003492:	2201      	movs	r2, #1
 8003494:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003496:	187b      	adds	r3, r7, r1
 8003498:	2200      	movs	r2, #0
 800349a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800349c:	187b      	adds	r3, r7, r1
 800349e:	2200      	movs	r2, #0
 80034a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034a2:	187b      	adds	r3, r7, r1
 80034a4:	4a05      	ldr	r2, [pc, #20]	; (80034bc <MX_GPIO_Init+0xec>)
 80034a6:	0019      	movs	r1, r3
 80034a8:	0010      	movs	r0, r2
 80034aa:	f000 fa05 	bl	80038b8 <HAL_GPIO_Init>

}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	46bd      	mov	sp, r7
 80034b2:	b00b      	add	sp, #44	; 0x2c
 80034b4:	bd90      	pop	{r4, r7, pc}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	40021000 	.word	0x40021000
 80034bc:	48000800 	.word	0x48000800

080034c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034c4:	b672      	cpsid	i
}
 80034c6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80034c8:	e7fe      	b.n	80034c8 <Error_Handler+0x8>
	...

080034cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034d2:	4b0f      	ldr	r3, [pc, #60]	; (8003510 <HAL_MspInit+0x44>)
 80034d4:	699a      	ldr	r2, [r3, #24]
 80034d6:	4b0e      	ldr	r3, [pc, #56]	; (8003510 <HAL_MspInit+0x44>)
 80034d8:	2101      	movs	r1, #1
 80034da:	430a      	orrs	r2, r1
 80034dc:	619a      	str	r2, [r3, #24]
 80034de:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <HAL_MspInit+0x44>)
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	2201      	movs	r2, #1
 80034e4:	4013      	ands	r3, r2
 80034e6:	607b      	str	r3, [r7, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034ea:	4b09      	ldr	r3, [pc, #36]	; (8003510 <HAL_MspInit+0x44>)
 80034ec:	69da      	ldr	r2, [r3, #28]
 80034ee:	4b08      	ldr	r3, [pc, #32]	; (8003510 <HAL_MspInit+0x44>)
 80034f0:	2180      	movs	r1, #128	; 0x80
 80034f2:	0549      	lsls	r1, r1, #21
 80034f4:	430a      	orrs	r2, r1
 80034f6:	61da      	str	r2, [r3, #28]
 80034f8:	4b05      	ldr	r3, [pc, #20]	; (8003510 <HAL_MspInit+0x44>)
 80034fa:	69da      	ldr	r2, [r3, #28]
 80034fc:	2380      	movs	r3, #128	; 0x80
 80034fe:	055b      	lsls	r3, r3, #21
 8003500:	4013      	ands	r3, r2
 8003502:	603b      	str	r3, [r7, #0]
 8003504:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	46bd      	mov	sp, r7
 800350a:	b002      	add	sp, #8
 800350c:	bd80      	pop	{r7, pc}
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	40021000 	.word	0x40021000

08003514 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003514:	b590      	push	{r4, r7, lr}
 8003516:	b08b      	sub	sp, #44	; 0x2c
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800351c:	2414      	movs	r4, #20
 800351e:	193b      	adds	r3, r7, r4
 8003520:	0018      	movs	r0, r3
 8003522:	2314      	movs	r3, #20
 8003524:	001a      	movs	r2, r3
 8003526:	2100      	movs	r1, #0
 8003528:	f001 ff98 	bl	800545c <memset>
  if(hi2c->Instance==I2C1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a1c      	ldr	r2, [pc, #112]	; (80035a4 <HAL_I2C_MspInit+0x90>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d131      	bne.n	800359a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003536:	4b1c      	ldr	r3, [pc, #112]	; (80035a8 <HAL_I2C_MspInit+0x94>)
 8003538:	695a      	ldr	r2, [r3, #20]
 800353a:	4b1b      	ldr	r3, [pc, #108]	; (80035a8 <HAL_I2C_MspInit+0x94>)
 800353c:	2180      	movs	r1, #128	; 0x80
 800353e:	02c9      	lsls	r1, r1, #11
 8003540:	430a      	orrs	r2, r1
 8003542:	615a      	str	r2, [r3, #20]
 8003544:	4b18      	ldr	r3, [pc, #96]	; (80035a8 <HAL_I2C_MspInit+0x94>)
 8003546:	695a      	ldr	r2, [r3, #20]
 8003548:	2380      	movs	r3, #128	; 0x80
 800354a:	02db      	lsls	r3, r3, #11
 800354c:	4013      	ands	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
 8003550:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003552:	0021      	movs	r1, r4
 8003554:	187b      	adds	r3, r7, r1
 8003556:	22c0      	movs	r2, #192	; 0xc0
 8003558:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800355a:	187b      	adds	r3, r7, r1
 800355c:	2212      	movs	r2, #18
 800355e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003560:	187b      	adds	r3, r7, r1
 8003562:	2200      	movs	r2, #0
 8003564:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003566:	187b      	adds	r3, r7, r1
 8003568:	2203      	movs	r2, #3
 800356a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800356c:	187b      	adds	r3, r7, r1
 800356e:	2201      	movs	r2, #1
 8003570:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003572:	187b      	adds	r3, r7, r1
 8003574:	4a0d      	ldr	r2, [pc, #52]	; (80035ac <HAL_I2C_MspInit+0x98>)
 8003576:	0019      	movs	r1, r3
 8003578:	0010      	movs	r0, r2
 800357a:	f000 f99d 	bl	80038b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800357e:	4b0a      	ldr	r3, [pc, #40]	; (80035a8 <HAL_I2C_MspInit+0x94>)
 8003580:	69da      	ldr	r2, [r3, #28]
 8003582:	4b09      	ldr	r3, [pc, #36]	; (80035a8 <HAL_I2C_MspInit+0x94>)
 8003584:	2180      	movs	r1, #128	; 0x80
 8003586:	0389      	lsls	r1, r1, #14
 8003588:	430a      	orrs	r2, r1
 800358a:	61da      	str	r2, [r3, #28]
 800358c:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <HAL_I2C_MspInit+0x94>)
 800358e:	69da      	ldr	r2, [r3, #28]
 8003590:	2380      	movs	r3, #128	; 0x80
 8003592:	039b      	lsls	r3, r3, #14
 8003594:	4013      	ands	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800359a:	46c0      	nop			; (mov r8, r8)
 800359c:	46bd      	mov	sp, r7
 800359e:	b00b      	add	sp, #44	; 0x2c
 80035a0:	bd90      	pop	{r4, r7, pc}
 80035a2:	46c0      	nop			; (mov r8, r8)
 80035a4:	40005400 	.word	0x40005400
 80035a8:	40021000 	.word	0x40021000
 80035ac:	48000400 	.word	0x48000400

080035b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80035b4:	f001 fe30 	bl	8005218 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035b8:	e7fe      	b.n	80035b8 <NMI_Handler+0x8>

080035ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035be:	e7fe      	b.n	80035be <HardFault_Handler+0x4>

080035c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80035c4:	46c0      	nop			; (mov r8, r8)
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035ce:	46c0      	nop			; (mov r8, r8)
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035d8:	f000 f87a 	bl	80036d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035dc:	46c0      	nop			; (mov r8, r8)
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80035ec:	480d      	ldr	r0, [pc, #52]	; (8003624 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80035ee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035f0:	480d      	ldr	r0, [pc, #52]	; (8003628 <LoopForever+0x6>)
  ldr r1, =_edata
 80035f2:	490e      	ldr	r1, [pc, #56]	; (800362c <LoopForever+0xa>)
  ldr r2, =_sidata
 80035f4:	4a0e      	ldr	r2, [pc, #56]	; (8003630 <LoopForever+0xe>)
  movs r3, #0
 80035f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035f8:	e002      	b.n	8003600 <LoopCopyDataInit>

080035fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035fe:	3304      	adds	r3, #4

08003600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003604:	d3f9      	bcc.n	80035fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003606:	4a0b      	ldr	r2, [pc, #44]	; (8003634 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003608:	4c0b      	ldr	r4, [pc, #44]	; (8003638 <LoopForever+0x16>)
  movs r3, #0
 800360a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800360c:	e001      	b.n	8003612 <LoopFillZerobss>

0800360e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800360e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003610:	3204      	adds	r2, #4

08003612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003614:	d3fb      	bcc.n	800360e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003616:	f7ff ffe4 	bl	80035e2 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800361a:	f001 fefb 	bl	8005414 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800361e:	f7ff faa7 	bl	8002b70 <main>

08003622 <LoopForever>:

LoopForever:
    b LoopForever
 8003622:	e7fe      	b.n	8003622 <LoopForever>
  ldr   r0, =_estack
 8003624:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003628:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800362c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003630:	08006d80 	.word	0x08006d80
  ldr r2, =_sbss
 8003634:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003638:	20000138 	.word	0x20000138

0800363c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800363c:	e7fe      	b.n	800363c <ADC1_COMP_IRQHandler>
	...

08003640 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003644:	4b07      	ldr	r3, [pc, #28]	; (8003664 <HAL_Init+0x24>)
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	4b06      	ldr	r3, [pc, #24]	; (8003664 <HAL_Init+0x24>)
 800364a:	2110      	movs	r1, #16
 800364c:	430a      	orrs	r2, r1
 800364e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003650:	2000      	movs	r0, #0
 8003652:	f000 f809 	bl	8003668 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003656:	f7ff ff39 	bl	80034cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	0018      	movs	r0, r3
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	40022000 	.word	0x40022000

08003668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003668:	b590      	push	{r4, r7, lr}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003670:	4b14      	ldr	r3, [pc, #80]	; (80036c4 <HAL_InitTick+0x5c>)
 8003672:	681c      	ldr	r4, [r3, #0]
 8003674:	4b14      	ldr	r3, [pc, #80]	; (80036c8 <HAL_InitTick+0x60>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	0019      	movs	r1, r3
 800367a:	23fa      	movs	r3, #250	; 0xfa
 800367c:	0098      	lsls	r0, r3, #2
 800367e:	f7fc fd43 	bl	8000108 <__udivsi3>
 8003682:	0003      	movs	r3, r0
 8003684:	0019      	movs	r1, r3
 8003686:	0020      	movs	r0, r4
 8003688:	f7fc fd3e 	bl	8000108 <__udivsi3>
 800368c:	0003      	movs	r3, r0
 800368e:	0018      	movs	r0, r3
 8003690:	f000 f905 	bl	800389e <HAL_SYSTICK_Config>
 8003694:	1e03      	subs	r3, r0, #0
 8003696:	d001      	beq.n	800369c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e00f      	b.n	80036bc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b03      	cmp	r3, #3
 80036a0:	d80b      	bhi.n	80036ba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	2301      	movs	r3, #1
 80036a6:	425b      	negs	r3, r3
 80036a8:	2200      	movs	r2, #0
 80036aa:	0018      	movs	r0, r3
 80036ac:	f000 f8e2 	bl	8003874 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036b0:	4b06      	ldr	r3, [pc, #24]	; (80036cc <HAL_InitTick+0x64>)
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
 80036b8:	e000      	b.n	80036bc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
}
 80036bc:	0018      	movs	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	b003      	add	sp, #12
 80036c2:	bd90      	pop	{r4, r7, pc}
 80036c4:	20000000 	.word	0x20000000
 80036c8:	20000008 	.word	0x20000008
 80036cc:	20000004 	.word	0x20000004

080036d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036d4:	4b05      	ldr	r3, [pc, #20]	; (80036ec <HAL_IncTick+0x1c>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	001a      	movs	r2, r3
 80036da:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <HAL_IncTick+0x20>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	18d2      	adds	r2, r2, r3
 80036e0:	4b03      	ldr	r3, [pc, #12]	; (80036f0 <HAL_IncTick+0x20>)
 80036e2:	601a      	str	r2, [r3, #0]
}
 80036e4:	46c0      	nop			; (mov r8, r8)
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	20000008 	.word	0x20000008
 80036f0:	20000134 	.word	0x20000134

080036f4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  return uwTick;
 80036f8:	4b02      	ldr	r3, [pc, #8]	; (8003704 <HAL_GetTick+0x10>)
 80036fa:	681b      	ldr	r3, [r3, #0]
}
 80036fc:	0018      	movs	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	46c0      	nop			; (mov r8, r8)
 8003704:	20000134 	.word	0x20000134

08003708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003710:	f7ff fff0 	bl	80036f4 <HAL_GetTick>
 8003714:	0003      	movs	r3, r0
 8003716:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	3301      	adds	r3, #1
 8003720:	d005      	beq.n	800372e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003722:	4b0a      	ldr	r3, [pc, #40]	; (800374c <HAL_Delay+0x44>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	001a      	movs	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	189b      	adds	r3, r3, r2
 800372c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	f7ff ffe0 	bl	80036f4 <HAL_GetTick>
 8003734:	0002      	movs	r2, r0
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	429a      	cmp	r2, r3
 800373e:	d8f7      	bhi.n	8003730 <HAL_Delay+0x28>
  {
  }
}
 8003740:	46c0      	nop			; (mov r8, r8)
 8003742:	46c0      	nop			; (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b004      	add	sp, #16
 8003748:	bd80      	pop	{r7, pc}
 800374a:	46c0      	nop			; (mov r8, r8)
 800374c:	20000008 	.word	0x20000008

08003750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003750:	b590      	push	{r4, r7, lr}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	0002      	movs	r2, r0
 8003758:	6039      	str	r1, [r7, #0]
 800375a:	1dfb      	adds	r3, r7, #7
 800375c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800375e:	1dfb      	adds	r3, r7, #7
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	2b7f      	cmp	r3, #127	; 0x7f
 8003764:	d828      	bhi.n	80037b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003766:	4a2f      	ldr	r2, [pc, #188]	; (8003824 <__NVIC_SetPriority+0xd4>)
 8003768:	1dfb      	adds	r3, r7, #7
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	b25b      	sxtb	r3, r3
 800376e:	089b      	lsrs	r3, r3, #2
 8003770:	33c0      	adds	r3, #192	; 0xc0
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	589b      	ldr	r3, [r3, r2]
 8003776:	1dfa      	adds	r2, r7, #7
 8003778:	7812      	ldrb	r2, [r2, #0]
 800377a:	0011      	movs	r1, r2
 800377c:	2203      	movs	r2, #3
 800377e:	400a      	ands	r2, r1
 8003780:	00d2      	lsls	r2, r2, #3
 8003782:	21ff      	movs	r1, #255	; 0xff
 8003784:	4091      	lsls	r1, r2
 8003786:	000a      	movs	r2, r1
 8003788:	43d2      	mvns	r2, r2
 800378a:	401a      	ands	r2, r3
 800378c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	019b      	lsls	r3, r3, #6
 8003792:	22ff      	movs	r2, #255	; 0xff
 8003794:	401a      	ands	r2, r3
 8003796:	1dfb      	adds	r3, r7, #7
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	0018      	movs	r0, r3
 800379c:	2303      	movs	r3, #3
 800379e:	4003      	ands	r3, r0
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037a4:	481f      	ldr	r0, [pc, #124]	; (8003824 <__NVIC_SetPriority+0xd4>)
 80037a6:	1dfb      	adds	r3, r7, #7
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	b25b      	sxtb	r3, r3
 80037ac:	089b      	lsrs	r3, r3, #2
 80037ae:	430a      	orrs	r2, r1
 80037b0:	33c0      	adds	r3, #192	; 0xc0
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80037b6:	e031      	b.n	800381c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037b8:	4a1b      	ldr	r2, [pc, #108]	; (8003828 <__NVIC_SetPriority+0xd8>)
 80037ba:	1dfb      	adds	r3, r7, #7
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	0019      	movs	r1, r3
 80037c0:	230f      	movs	r3, #15
 80037c2:	400b      	ands	r3, r1
 80037c4:	3b08      	subs	r3, #8
 80037c6:	089b      	lsrs	r3, r3, #2
 80037c8:	3306      	adds	r3, #6
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	18d3      	adds	r3, r2, r3
 80037ce:	3304      	adds	r3, #4
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	1dfa      	adds	r2, r7, #7
 80037d4:	7812      	ldrb	r2, [r2, #0]
 80037d6:	0011      	movs	r1, r2
 80037d8:	2203      	movs	r2, #3
 80037da:	400a      	ands	r2, r1
 80037dc:	00d2      	lsls	r2, r2, #3
 80037de:	21ff      	movs	r1, #255	; 0xff
 80037e0:	4091      	lsls	r1, r2
 80037e2:	000a      	movs	r2, r1
 80037e4:	43d2      	mvns	r2, r2
 80037e6:	401a      	ands	r2, r3
 80037e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	019b      	lsls	r3, r3, #6
 80037ee:	22ff      	movs	r2, #255	; 0xff
 80037f0:	401a      	ands	r2, r3
 80037f2:	1dfb      	adds	r3, r7, #7
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	0018      	movs	r0, r3
 80037f8:	2303      	movs	r3, #3
 80037fa:	4003      	ands	r3, r0
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003800:	4809      	ldr	r0, [pc, #36]	; (8003828 <__NVIC_SetPriority+0xd8>)
 8003802:	1dfb      	adds	r3, r7, #7
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	001c      	movs	r4, r3
 8003808:	230f      	movs	r3, #15
 800380a:	4023      	ands	r3, r4
 800380c:	3b08      	subs	r3, #8
 800380e:	089b      	lsrs	r3, r3, #2
 8003810:	430a      	orrs	r2, r1
 8003812:	3306      	adds	r3, #6
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	18c3      	adds	r3, r0, r3
 8003818:	3304      	adds	r3, #4
 800381a:	601a      	str	r2, [r3, #0]
}
 800381c:	46c0      	nop			; (mov r8, r8)
 800381e:	46bd      	mov	sp, r7
 8003820:	b003      	add	sp, #12
 8003822:	bd90      	pop	{r4, r7, pc}
 8003824:	e000e100 	.word	0xe000e100
 8003828:	e000ed00 	.word	0xe000ed00

0800382c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	1e5a      	subs	r2, r3, #1
 8003838:	2380      	movs	r3, #128	; 0x80
 800383a:	045b      	lsls	r3, r3, #17
 800383c:	429a      	cmp	r2, r3
 800383e:	d301      	bcc.n	8003844 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003840:	2301      	movs	r3, #1
 8003842:	e010      	b.n	8003866 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003844:	4b0a      	ldr	r3, [pc, #40]	; (8003870 <SysTick_Config+0x44>)
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	3a01      	subs	r2, #1
 800384a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800384c:	2301      	movs	r3, #1
 800384e:	425b      	negs	r3, r3
 8003850:	2103      	movs	r1, #3
 8003852:	0018      	movs	r0, r3
 8003854:	f7ff ff7c 	bl	8003750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003858:	4b05      	ldr	r3, [pc, #20]	; (8003870 <SysTick_Config+0x44>)
 800385a:	2200      	movs	r2, #0
 800385c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800385e:	4b04      	ldr	r3, [pc, #16]	; (8003870 <SysTick_Config+0x44>)
 8003860:	2207      	movs	r2, #7
 8003862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003864:	2300      	movs	r3, #0
}
 8003866:	0018      	movs	r0, r3
 8003868:	46bd      	mov	sp, r7
 800386a:	b002      	add	sp, #8
 800386c:	bd80      	pop	{r7, pc}
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	e000e010 	.word	0xe000e010

08003874 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	60b9      	str	r1, [r7, #8]
 800387c:	607a      	str	r2, [r7, #4]
 800387e:	210f      	movs	r1, #15
 8003880:	187b      	adds	r3, r7, r1
 8003882:	1c02      	adds	r2, r0, #0
 8003884:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	187b      	adds	r3, r7, r1
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	b25b      	sxtb	r3, r3
 800388e:	0011      	movs	r1, r2
 8003890:	0018      	movs	r0, r3
 8003892:	f7ff ff5d 	bl	8003750 <__NVIC_SetPriority>
}
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	46bd      	mov	sp, r7
 800389a:	b004      	add	sp, #16
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b082      	sub	sp, #8
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	0018      	movs	r0, r3
 80038aa:	f7ff ffbf 	bl	800382c <SysTick_Config>
 80038ae:	0003      	movs	r3, r0
}
 80038b0:	0018      	movs	r0, r3
 80038b2:	46bd      	mov	sp, r7
 80038b4:	b002      	add	sp, #8
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038c2:	2300      	movs	r3, #0
 80038c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038c6:	e14f      	b.n	8003b68 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2101      	movs	r1, #1
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	4091      	lsls	r1, r2
 80038d2:	000a      	movs	r2, r1
 80038d4:	4013      	ands	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d100      	bne.n	80038e0 <HAL_GPIO_Init+0x28>
 80038de:	e140      	b.n	8003b62 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	2203      	movs	r2, #3
 80038e6:	4013      	ands	r3, r2
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d005      	beq.n	80038f8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2203      	movs	r2, #3
 80038f2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d130      	bne.n	800395a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	2203      	movs	r2, #3
 8003904:	409a      	lsls	r2, r3
 8003906:	0013      	movs	r3, r2
 8003908:	43da      	mvns	r2, r3
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	4013      	ands	r3, r2
 800390e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	409a      	lsls	r2, r3
 800391a:	0013      	movs	r3, r2
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800392e:	2201      	movs	r2, #1
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	409a      	lsls	r2, r3
 8003934:	0013      	movs	r3, r2
 8003936:	43da      	mvns	r2, r3
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	4013      	ands	r3, r2
 800393c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	091b      	lsrs	r3, r3, #4
 8003944:	2201      	movs	r2, #1
 8003946:	401a      	ands	r2, r3
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	409a      	lsls	r2, r3
 800394c:	0013      	movs	r3, r2
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2203      	movs	r2, #3
 8003960:	4013      	ands	r3, r2
 8003962:	2b03      	cmp	r3, #3
 8003964:	d017      	beq.n	8003996 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	2203      	movs	r2, #3
 8003972:	409a      	lsls	r2, r3
 8003974:	0013      	movs	r3, r2
 8003976:	43da      	mvns	r2, r3
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	4013      	ands	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	409a      	lsls	r2, r3
 8003988:	0013      	movs	r3, r2
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	4313      	orrs	r3, r2
 800398e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2203      	movs	r2, #3
 800399c:	4013      	ands	r3, r2
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d123      	bne.n	80039ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	08da      	lsrs	r2, r3, #3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	3208      	adds	r2, #8
 80039aa:	0092      	lsls	r2, r2, #2
 80039ac:	58d3      	ldr	r3, [r2, r3]
 80039ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	2207      	movs	r2, #7
 80039b4:	4013      	ands	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	220f      	movs	r2, #15
 80039ba:	409a      	lsls	r2, r3
 80039bc:	0013      	movs	r3, r2
 80039be:	43da      	mvns	r2, r3
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	4013      	ands	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	691a      	ldr	r2, [r3, #16]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2107      	movs	r1, #7
 80039ce:	400b      	ands	r3, r1
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	409a      	lsls	r2, r3
 80039d4:	0013      	movs	r3, r2
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	08da      	lsrs	r2, r3, #3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3208      	adds	r2, #8
 80039e4:	0092      	lsls	r2, r2, #2
 80039e6:	6939      	ldr	r1, [r7, #16]
 80039e8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	2203      	movs	r2, #3
 80039f6:	409a      	lsls	r2, r3
 80039f8:	0013      	movs	r3, r2
 80039fa:	43da      	mvns	r2, r3
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	4013      	ands	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2203      	movs	r2, #3
 8003a08:	401a      	ands	r2, r3
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	409a      	lsls	r2, r3
 8003a10:	0013      	movs	r3, r2
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	23c0      	movs	r3, #192	; 0xc0
 8003a24:	029b      	lsls	r3, r3, #10
 8003a26:	4013      	ands	r3, r2
 8003a28:	d100      	bne.n	8003a2c <HAL_GPIO_Init+0x174>
 8003a2a:	e09a      	b.n	8003b62 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a2c:	4b54      	ldr	r3, [pc, #336]	; (8003b80 <HAL_GPIO_Init+0x2c8>)
 8003a2e:	699a      	ldr	r2, [r3, #24]
 8003a30:	4b53      	ldr	r3, [pc, #332]	; (8003b80 <HAL_GPIO_Init+0x2c8>)
 8003a32:	2101      	movs	r1, #1
 8003a34:	430a      	orrs	r2, r1
 8003a36:	619a      	str	r2, [r3, #24]
 8003a38:	4b51      	ldr	r3, [pc, #324]	; (8003b80 <HAL_GPIO_Init+0x2c8>)
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	4013      	ands	r3, r2
 8003a40:	60bb      	str	r3, [r7, #8]
 8003a42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a44:	4a4f      	ldr	r2, [pc, #316]	; (8003b84 <HAL_GPIO_Init+0x2cc>)
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	089b      	lsrs	r3, r3, #2
 8003a4a:	3302      	adds	r3, #2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	589b      	ldr	r3, [r3, r2]
 8003a50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	2203      	movs	r2, #3
 8003a56:	4013      	ands	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	220f      	movs	r2, #15
 8003a5c:	409a      	lsls	r2, r3
 8003a5e:	0013      	movs	r3, r2
 8003a60:	43da      	mvns	r2, r3
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	4013      	ands	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	2390      	movs	r3, #144	; 0x90
 8003a6c:	05db      	lsls	r3, r3, #23
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d013      	beq.n	8003a9a <HAL_GPIO_Init+0x1e2>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a44      	ldr	r2, [pc, #272]	; (8003b88 <HAL_GPIO_Init+0x2d0>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d00d      	beq.n	8003a96 <HAL_GPIO_Init+0x1de>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a43      	ldr	r2, [pc, #268]	; (8003b8c <HAL_GPIO_Init+0x2d4>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d007      	beq.n	8003a92 <HAL_GPIO_Init+0x1da>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a42      	ldr	r2, [pc, #264]	; (8003b90 <HAL_GPIO_Init+0x2d8>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d101      	bne.n	8003a8e <HAL_GPIO_Init+0x1d6>
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e006      	b.n	8003a9c <HAL_GPIO_Init+0x1e4>
 8003a8e:	2305      	movs	r3, #5
 8003a90:	e004      	b.n	8003a9c <HAL_GPIO_Init+0x1e4>
 8003a92:	2302      	movs	r3, #2
 8003a94:	e002      	b.n	8003a9c <HAL_GPIO_Init+0x1e4>
 8003a96:	2301      	movs	r3, #1
 8003a98:	e000      	b.n	8003a9c <HAL_GPIO_Init+0x1e4>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	2103      	movs	r1, #3
 8003aa0:	400a      	ands	r2, r1
 8003aa2:	0092      	lsls	r2, r2, #2
 8003aa4:	4093      	lsls	r3, r2
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003aac:	4935      	ldr	r1, [pc, #212]	; (8003b84 <HAL_GPIO_Init+0x2cc>)
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	089b      	lsrs	r3, r3, #2
 8003ab2:	3302      	adds	r3, #2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003aba:	4b36      	ldr	r3, [pc, #216]	; (8003b94 <HAL_GPIO_Init+0x2dc>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	43da      	mvns	r2, r3
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	2380      	movs	r3, #128	; 0x80
 8003ad0:	025b      	lsls	r3, r3, #9
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	d003      	beq.n	8003ade <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003ade:	4b2d      	ldr	r3, [pc, #180]	; (8003b94 <HAL_GPIO_Init+0x2dc>)
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003ae4:	4b2b      	ldr	r3, [pc, #172]	; (8003b94 <HAL_GPIO_Init+0x2dc>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	43da      	mvns	r2, r3
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	4013      	ands	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	2380      	movs	r3, #128	; 0x80
 8003afa:	029b      	lsls	r3, r3, #10
 8003afc:	4013      	ands	r3, r2
 8003afe:	d003      	beq.n	8003b08 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003b08:	4b22      	ldr	r3, [pc, #136]	; (8003b94 <HAL_GPIO_Init+0x2dc>)
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b0e:	4b21      	ldr	r3, [pc, #132]	; (8003b94 <HAL_GPIO_Init+0x2dc>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	43da      	mvns	r2, r3
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	2380      	movs	r3, #128	; 0x80
 8003b24:	035b      	lsls	r3, r3, #13
 8003b26:	4013      	ands	r3, r2
 8003b28:	d003      	beq.n	8003b32 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003b32:	4b18      	ldr	r3, [pc, #96]	; (8003b94 <HAL_GPIO_Init+0x2dc>)
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003b38:	4b16      	ldr	r3, [pc, #88]	; (8003b94 <HAL_GPIO_Init+0x2dc>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	43da      	mvns	r2, r3
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	4013      	ands	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	2380      	movs	r3, #128	; 0x80
 8003b4e:	039b      	lsls	r3, r3, #14
 8003b50:	4013      	ands	r3, r2
 8003b52:	d003      	beq.n	8003b5c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003b5c:	4b0d      	ldr	r3, [pc, #52]	; (8003b94 <HAL_GPIO_Init+0x2dc>)
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	3301      	adds	r3, #1
 8003b66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	40da      	lsrs	r2, r3
 8003b70:	1e13      	subs	r3, r2, #0
 8003b72:	d000      	beq.n	8003b76 <HAL_GPIO_Init+0x2be>
 8003b74:	e6a8      	b.n	80038c8 <HAL_GPIO_Init+0x10>
  } 
}
 8003b76:	46c0      	nop			; (mov r8, r8)
 8003b78:	46c0      	nop			; (mov r8, r8)
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	b006      	add	sp, #24
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40021000 	.word	0x40021000
 8003b84:	40010000 	.word	0x40010000
 8003b88:	48000400 	.word	0x48000400
 8003b8c:	48000800 	.word	0x48000800
 8003b90:	48000c00 	.word	0x48000c00
 8003b94:	40010400 	.word	0x40010400

08003b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	0008      	movs	r0, r1
 8003ba2:	0011      	movs	r1, r2
 8003ba4:	1cbb      	adds	r3, r7, #2
 8003ba6:	1c02      	adds	r2, r0, #0
 8003ba8:	801a      	strh	r2, [r3, #0]
 8003baa:	1c7b      	adds	r3, r7, #1
 8003bac:	1c0a      	adds	r2, r1, #0
 8003bae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bb0:	1c7b      	adds	r3, r7, #1
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d004      	beq.n	8003bc2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bb8:	1cbb      	adds	r3, r7, #2
 8003bba:	881a      	ldrh	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bc0:	e003      	b.n	8003bca <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bc2:	1cbb      	adds	r3, r7, #2
 8003bc4:	881a      	ldrh	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	b002      	add	sp, #8
 8003bd0:	bd80      	pop	{r7, pc}
	...

08003bd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e082      	b.n	8003cec <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2241      	movs	r2, #65	; 0x41
 8003bea:	5c9b      	ldrb	r3, [r3, r2]
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d107      	bne.n	8003c02 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2240      	movs	r2, #64	; 0x40
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	f7ff fc89 	bl	8003514 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2241      	movs	r2, #65	; 0x41
 8003c06:	2124      	movs	r1, #36	; 0x24
 8003c08:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2101      	movs	r1, #1
 8003c16:	438a      	bics	r2, r1
 8003c18:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4934      	ldr	r1, [pc, #208]	; (8003cf4 <HAL_I2C_Init+0x120>)
 8003c24:	400a      	ands	r2, r1
 8003c26:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4931      	ldr	r1, [pc, #196]	; (8003cf8 <HAL_I2C_Init+0x124>)
 8003c34:	400a      	ands	r2, r1
 8003c36:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d108      	bne.n	8003c52 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2180      	movs	r1, #128	; 0x80
 8003c4a:	0209      	lsls	r1, r1, #8
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	609a      	str	r2, [r3, #8]
 8003c50:	e007      	b.n	8003c62 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689a      	ldr	r2, [r3, #8]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2184      	movs	r1, #132	; 0x84
 8003c5c:	0209      	lsls	r1, r1, #8
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d104      	bne.n	8003c74 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2280      	movs	r2, #128	; 0x80
 8003c70:	0112      	lsls	r2, r2, #4
 8003c72:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	491f      	ldr	r1, [pc, #124]	; (8003cfc <HAL_I2C_Init+0x128>)
 8003c80:	430a      	orrs	r2, r1
 8003c82:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	491a      	ldr	r1, [pc, #104]	; (8003cf8 <HAL_I2C_Init+0x124>)
 8003c90:	400a      	ands	r2, r1
 8003c92:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	691a      	ldr	r2, [r3, #16]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69d9      	ldr	r1, [r3, #28]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1a      	ldr	r2, [r3, #32]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2101      	movs	r1, #1
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2241      	movs	r2, #65	; 0x41
 8003cd8:	2120      	movs	r1, #32
 8003cda:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2242      	movs	r2, #66	; 0x42
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	0018      	movs	r0, r3
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	b002      	add	sp, #8
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	f0ffffff 	.word	0xf0ffffff
 8003cf8:	ffff7fff 	.word	0xffff7fff
 8003cfc:	02008000 	.word	0x02008000

08003d00 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003d00:	b590      	push	{r4, r7, lr}
 8003d02:	b089      	sub	sp, #36	; 0x24
 8003d04:	af02      	add	r7, sp, #8
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	0008      	movs	r0, r1
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	0019      	movs	r1, r3
 8003d0e:	230a      	movs	r3, #10
 8003d10:	18fb      	adds	r3, r7, r3
 8003d12:	1c02      	adds	r2, r0, #0
 8003d14:	801a      	strh	r2, [r3, #0]
 8003d16:	2308      	movs	r3, #8
 8003d18:	18fb      	adds	r3, r7, r3
 8003d1a:	1c0a      	adds	r2, r1, #0
 8003d1c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2241      	movs	r2, #65	; 0x41
 8003d22:	5c9b      	ldrb	r3, [r3, r2]
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b20      	cmp	r3, #32
 8003d28:	d000      	beq.n	8003d2c <HAL_I2C_Master_Transmit+0x2c>
 8003d2a:	e0e7      	b.n	8003efc <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2240      	movs	r2, #64	; 0x40
 8003d30:	5c9b      	ldrb	r3, [r3, r2]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d101      	bne.n	8003d3a <HAL_I2C_Master_Transmit+0x3a>
 8003d36:	2302      	movs	r3, #2
 8003d38:	e0e1      	b.n	8003efe <HAL_I2C_Master_Transmit+0x1fe>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2240      	movs	r2, #64	; 0x40
 8003d3e:	2101      	movs	r1, #1
 8003d40:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d42:	f7ff fcd7 	bl	80036f4 <HAL_GetTick>
 8003d46:	0003      	movs	r3, r0
 8003d48:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d4a:	2380      	movs	r3, #128	; 0x80
 8003d4c:	0219      	lsls	r1, r3, #8
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	2319      	movs	r3, #25
 8003d56:	2201      	movs	r2, #1
 8003d58:	f000 fb96 	bl	8004488 <I2C_WaitOnFlagUntilTimeout>
 8003d5c:	1e03      	subs	r3, r0, #0
 8003d5e:	d001      	beq.n	8003d64 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e0cc      	b.n	8003efe <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2241      	movs	r2, #65	; 0x41
 8003d68:	2121      	movs	r1, #33	; 0x21
 8003d6a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2242      	movs	r2, #66	; 0x42
 8003d70:	2110      	movs	r1, #16
 8003d72:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2208      	movs	r2, #8
 8003d84:	18ba      	adds	r2, r7, r2
 8003d86:	8812      	ldrh	r2, [r2, #0]
 8003d88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	2bff      	cmp	r3, #255	; 0xff
 8003d98:	d911      	bls.n	8003dbe <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	22ff      	movs	r2, #255	; 0xff
 8003d9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	2380      	movs	r3, #128	; 0x80
 8003da8:	045c      	lsls	r4, r3, #17
 8003daa:	230a      	movs	r3, #10
 8003dac:	18fb      	adds	r3, r7, r3
 8003dae:	8819      	ldrh	r1, [r3, #0]
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	4b55      	ldr	r3, [pc, #340]	; (8003f08 <HAL_I2C_Master_Transmit+0x208>)
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	0023      	movs	r3, r4
 8003db8:	f000 fd06 	bl	80047c8 <I2C_TransferConfig>
 8003dbc:	e075      	b.n	8003eaa <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	2380      	movs	r3, #128	; 0x80
 8003dd0:	049c      	lsls	r4, r3, #18
 8003dd2:	230a      	movs	r3, #10
 8003dd4:	18fb      	adds	r3, r7, r3
 8003dd6:	8819      	ldrh	r1, [r3, #0]
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	4b4b      	ldr	r3, [pc, #300]	; (8003f08 <HAL_I2C_Master_Transmit+0x208>)
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	0023      	movs	r3, r4
 8003de0:	f000 fcf2 	bl	80047c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003de4:	e061      	b.n	8003eaa <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	0018      	movs	r0, r3
 8003dee:	f000 fb8a 	bl	8004506 <I2C_WaitOnTXISFlagUntilTimeout>
 8003df2:	1e03      	subs	r3, r0, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e081      	b.n	8003efe <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfe:	781a      	ldrb	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d03a      	beq.n	8003eaa <HAL_I2C_Master_Transmit+0x1aa>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d136      	bne.n	8003eaa <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	0013      	movs	r3, r2
 8003e46:	2200      	movs	r2, #0
 8003e48:	2180      	movs	r1, #128	; 0x80
 8003e4a:	f000 fb1d 	bl	8004488 <I2C_WaitOnFlagUntilTimeout>
 8003e4e:	1e03      	subs	r3, r0, #0
 8003e50:	d001      	beq.n	8003e56 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e053      	b.n	8003efe <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	2bff      	cmp	r3, #255	; 0xff
 8003e5e:	d911      	bls.n	8003e84 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	22ff      	movs	r2, #255	; 0xff
 8003e64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	2380      	movs	r3, #128	; 0x80
 8003e6e:	045c      	lsls	r4, r3, #17
 8003e70:	230a      	movs	r3, #10
 8003e72:	18fb      	adds	r3, r7, r3
 8003e74:	8819      	ldrh	r1, [r3, #0]
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	2300      	movs	r3, #0
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	0023      	movs	r3, r4
 8003e7e:	f000 fca3 	bl	80047c8 <I2C_TransferConfig>
 8003e82:	e012      	b.n	8003eaa <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e92:	b2da      	uxtb	r2, r3
 8003e94:	2380      	movs	r3, #128	; 0x80
 8003e96:	049c      	lsls	r4, r3, #18
 8003e98:	230a      	movs	r3, #10
 8003e9a:	18fb      	adds	r3, r7, r3
 8003e9c:	8819      	ldrh	r1, [r3, #0]
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	0023      	movs	r3, r4
 8003ea6:	f000 fc8f 	bl	80047c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d198      	bne.n	8003de6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	0018      	movs	r0, r3
 8003ebc:	f000 fb62 	bl	8004584 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ec0:	1e03      	subs	r3, r0, #0
 8003ec2:	d001      	beq.n	8003ec8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e01a      	b.n	8003efe <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	490c      	ldr	r1, [pc, #48]	; (8003f0c <HAL_I2C_Master_Transmit+0x20c>)
 8003edc:	400a      	ands	r2, r1
 8003ede:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2241      	movs	r2, #65	; 0x41
 8003ee4:	2120      	movs	r1, #32
 8003ee6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2242      	movs	r2, #66	; 0x42
 8003eec:	2100      	movs	r1, #0
 8003eee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2240      	movs	r2, #64	; 0x40
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	e000      	b.n	8003efe <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003efc:	2302      	movs	r3, #2
  }
}
 8003efe:	0018      	movs	r0, r3
 8003f00:	46bd      	mov	sp, r7
 8003f02:	b007      	add	sp, #28
 8003f04:	bd90      	pop	{r4, r7, pc}
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	80002000 	.word	0x80002000
 8003f0c:	fe00e800 	.word	0xfe00e800

08003f10 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003f10:	b590      	push	{r4, r7, lr}
 8003f12:	b089      	sub	sp, #36	; 0x24
 8003f14:	af02      	add	r7, sp, #8
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	0008      	movs	r0, r1
 8003f1a:	607a      	str	r2, [r7, #4]
 8003f1c:	0019      	movs	r1, r3
 8003f1e:	230a      	movs	r3, #10
 8003f20:	18fb      	adds	r3, r7, r3
 8003f22:	1c02      	adds	r2, r0, #0
 8003f24:	801a      	strh	r2, [r3, #0]
 8003f26:	2308      	movs	r3, #8
 8003f28:	18fb      	adds	r3, r7, r3
 8003f2a:	1c0a      	adds	r2, r1, #0
 8003f2c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2241      	movs	r2, #65	; 0x41
 8003f32:	5c9b      	ldrb	r3, [r3, r2]
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b20      	cmp	r3, #32
 8003f38:	d000      	beq.n	8003f3c <HAL_I2C_Master_Receive+0x2c>
 8003f3a:	e0e8      	b.n	800410e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2240      	movs	r2, #64	; 0x40
 8003f40:	5c9b      	ldrb	r3, [r3, r2]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d101      	bne.n	8003f4a <HAL_I2C_Master_Receive+0x3a>
 8003f46:	2302      	movs	r3, #2
 8003f48:	e0e2      	b.n	8004110 <HAL_I2C_Master_Receive+0x200>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2240      	movs	r2, #64	; 0x40
 8003f4e:	2101      	movs	r1, #1
 8003f50:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f52:	f7ff fbcf 	bl	80036f4 <HAL_GetTick>
 8003f56:	0003      	movs	r3, r0
 8003f58:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f5a:	2380      	movs	r3, #128	; 0x80
 8003f5c:	0219      	lsls	r1, r3, #8
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	2319      	movs	r3, #25
 8003f66:	2201      	movs	r2, #1
 8003f68:	f000 fa8e 	bl	8004488 <I2C_WaitOnFlagUntilTimeout>
 8003f6c:	1e03      	subs	r3, r0, #0
 8003f6e:	d001      	beq.n	8003f74 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e0cd      	b.n	8004110 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2241      	movs	r2, #65	; 0x41
 8003f78:	2122      	movs	r1, #34	; 0x22
 8003f7a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2242      	movs	r2, #66	; 0x42
 8003f80:	2110      	movs	r1, #16
 8003f82:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2208      	movs	r2, #8
 8003f94:	18ba      	adds	r2, r7, r2
 8003f96:	8812      	ldrh	r2, [r2, #0]
 8003f98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	2bff      	cmp	r3, #255	; 0xff
 8003fa8:	d911      	bls.n	8003fce <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	22ff      	movs	r2, #255	; 0xff
 8003fae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	2380      	movs	r3, #128	; 0x80
 8003fb8:	045c      	lsls	r4, r3, #17
 8003fba:	230a      	movs	r3, #10
 8003fbc:	18fb      	adds	r3, r7, r3
 8003fbe:	8819      	ldrh	r1, [r3, #0]
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	4b55      	ldr	r3, [pc, #340]	; (8004118 <HAL_I2C_Master_Receive+0x208>)
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	0023      	movs	r3, r4
 8003fc8:	f000 fbfe 	bl	80047c8 <I2C_TransferConfig>
 8003fcc:	e076      	b.n	80040bc <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	2380      	movs	r3, #128	; 0x80
 8003fe0:	049c      	lsls	r4, r3, #18
 8003fe2:	230a      	movs	r3, #10
 8003fe4:	18fb      	adds	r3, r7, r3
 8003fe6:	8819      	ldrh	r1, [r3, #0]
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	4b4b      	ldr	r3, [pc, #300]	; (8004118 <HAL_I2C_Master_Receive+0x208>)
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	0023      	movs	r3, r4
 8003ff0:	f000 fbea 	bl	80047c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003ff4:	e062      	b.n	80040bc <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	f000 fafd 	bl	80045fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004002:	1e03      	subs	r3, r0, #0
 8004004:	d001      	beq.n	800400a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e082      	b.n	8004110 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	b2d2      	uxtb	r2, r2
 8004016:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004026:	3b01      	subs	r3, #1
 8004028:	b29a      	uxth	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004032:	b29b      	uxth	r3, r3
 8004034:	3b01      	subs	r3, #1
 8004036:	b29a      	uxth	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004040:	b29b      	uxth	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d03a      	beq.n	80040bc <HAL_I2C_Master_Receive+0x1ac>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800404a:	2b00      	cmp	r3, #0
 800404c:	d136      	bne.n	80040bc <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800404e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	0013      	movs	r3, r2
 8004058:	2200      	movs	r2, #0
 800405a:	2180      	movs	r1, #128	; 0x80
 800405c:	f000 fa14 	bl	8004488 <I2C_WaitOnFlagUntilTimeout>
 8004060:	1e03      	subs	r3, r0, #0
 8004062:	d001      	beq.n	8004068 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e053      	b.n	8004110 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406c:	b29b      	uxth	r3, r3
 800406e:	2bff      	cmp	r3, #255	; 0xff
 8004070:	d911      	bls.n	8004096 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	22ff      	movs	r2, #255	; 0xff
 8004076:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800407c:	b2da      	uxtb	r2, r3
 800407e:	2380      	movs	r3, #128	; 0x80
 8004080:	045c      	lsls	r4, r3, #17
 8004082:	230a      	movs	r3, #10
 8004084:	18fb      	adds	r3, r7, r3
 8004086:	8819      	ldrh	r1, [r3, #0]
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	2300      	movs	r3, #0
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	0023      	movs	r3, r4
 8004090:	f000 fb9a 	bl	80047c8 <I2C_TransferConfig>
 8004094:	e012      	b.n	80040bc <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409a:	b29a      	uxth	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	2380      	movs	r3, #128	; 0x80
 80040a8:	049c      	lsls	r4, r3, #18
 80040aa:	230a      	movs	r3, #10
 80040ac:	18fb      	adds	r3, r7, r3
 80040ae:	8819      	ldrh	r1, [r3, #0]
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	2300      	movs	r3, #0
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	0023      	movs	r3, r4
 80040b8:	f000 fb86 	bl	80047c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d197      	bne.n	8003ff6 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	0018      	movs	r0, r3
 80040ce:	f000 fa59 	bl	8004584 <I2C_WaitOnSTOPFlagUntilTimeout>
 80040d2:	1e03      	subs	r3, r0, #0
 80040d4:	d001      	beq.n	80040da <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e01a      	b.n	8004110 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2220      	movs	r2, #32
 80040e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	490b      	ldr	r1, [pc, #44]	; (800411c <HAL_I2C_Master_Receive+0x20c>)
 80040ee:	400a      	ands	r2, r1
 80040f0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2241      	movs	r2, #65	; 0x41
 80040f6:	2120      	movs	r1, #32
 80040f8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2242      	movs	r2, #66	; 0x42
 80040fe:	2100      	movs	r1, #0
 8004100:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2240      	movs	r2, #64	; 0x40
 8004106:	2100      	movs	r1, #0
 8004108:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800410a:	2300      	movs	r3, #0
 800410c:	e000      	b.n	8004110 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800410e:	2302      	movs	r3, #2
  }
}
 8004110:	0018      	movs	r0, r3
 8004112:	46bd      	mov	sp, r7
 8004114:	b007      	add	sp, #28
 8004116:	bd90      	pop	{r4, r7, pc}
 8004118:	80002400 	.word	0x80002400
 800411c:	fe00e800 	.word	0xfe00e800

08004120 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004120:	b590      	push	{r4, r7, lr}
 8004122:	b089      	sub	sp, #36	; 0x24
 8004124:	af02      	add	r7, sp, #8
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	000c      	movs	r4, r1
 800412a:	0010      	movs	r0, r2
 800412c:	0019      	movs	r1, r3
 800412e:	230a      	movs	r3, #10
 8004130:	18fb      	adds	r3, r7, r3
 8004132:	1c22      	adds	r2, r4, #0
 8004134:	801a      	strh	r2, [r3, #0]
 8004136:	2308      	movs	r3, #8
 8004138:	18fb      	adds	r3, r7, r3
 800413a:	1c02      	adds	r2, r0, #0
 800413c:	801a      	strh	r2, [r3, #0]
 800413e:	1dbb      	adds	r3, r7, #6
 8004140:	1c0a      	adds	r2, r1, #0
 8004142:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2241      	movs	r2, #65	; 0x41
 8004148:	5c9b      	ldrb	r3, [r3, r2]
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b20      	cmp	r3, #32
 800414e:	d000      	beq.n	8004152 <HAL_I2C_Mem_Write+0x32>
 8004150:	e10c      	b.n	800436c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004154:	2b00      	cmp	r3, #0
 8004156:	d004      	beq.n	8004162 <HAL_I2C_Mem_Write+0x42>
 8004158:	232c      	movs	r3, #44	; 0x2c
 800415a:	18fb      	adds	r3, r7, r3
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d105      	bne.n	800416e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2280      	movs	r2, #128	; 0x80
 8004166:	0092      	lsls	r2, r2, #2
 8004168:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e0ff      	b.n	800436e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2240      	movs	r2, #64	; 0x40
 8004172:	5c9b      	ldrb	r3, [r3, r2]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <HAL_I2C_Mem_Write+0x5c>
 8004178:	2302      	movs	r3, #2
 800417a:	e0f8      	b.n	800436e <HAL_I2C_Mem_Write+0x24e>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2240      	movs	r2, #64	; 0x40
 8004180:	2101      	movs	r1, #1
 8004182:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004184:	f7ff fab6 	bl	80036f4 <HAL_GetTick>
 8004188:	0003      	movs	r3, r0
 800418a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800418c:	2380      	movs	r3, #128	; 0x80
 800418e:	0219      	lsls	r1, r3, #8
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	2319      	movs	r3, #25
 8004198:	2201      	movs	r2, #1
 800419a:	f000 f975 	bl	8004488 <I2C_WaitOnFlagUntilTimeout>
 800419e:	1e03      	subs	r3, r0, #0
 80041a0:	d001      	beq.n	80041a6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e0e3      	b.n	800436e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2241      	movs	r2, #65	; 0x41
 80041aa:	2121      	movs	r1, #33	; 0x21
 80041ac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2242      	movs	r2, #66	; 0x42
 80041b2:	2140      	movs	r1, #64	; 0x40
 80041b4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	222c      	movs	r2, #44	; 0x2c
 80041c6:	18ba      	adds	r2, r7, r2
 80041c8:	8812      	ldrh	r2, [r2, #0]
 80041ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041d2:	1dbb      	adds	r3, r7, #6
 80041d4:	881c      	ldrh	r4, [r3, #0]
 80041d6:	2308      	movs	r3, #8
 80041d8:	18fb      	adds	r3, r7, r3
 80041da:	881a      	ldrh	r2, [r3, #0]
 80041dc:	230a      	movs	r3, #10
 80041de:	18fb      	adds	r3, r7, r3
 80041e0:	8819      	ldrh	r1, [r3, #0]
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	9301      	str	r3, [sp, #4]
 80041e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	0023      	movs	r3, r4
 80041ee:	f000 f8c5 	bl	800437c <I2C_RequestMemoryWrite>
 80041f2:	1e03      	subs	r3, r0, #0
 80041f4:	d005      	beq.n	8004202 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2240      	movs	r2, #64	; 0x40
 80041fa:	2100      	movs	r1, #0
 80041fc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e0b5      	b.n	800436e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004206:	b29b      	uxth	r3, r3
 8004208:	2bff      	cmp	r3, #255	; 0xff
 800420a:	d911      	bls.n	8004230 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	22ff      	movs	r2, #255	; 0xff
 8004210:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004216:	b2da      	uxtb	r2, r3
 8004218:	2380      	movs	r3, #128	; 0x80
 800421a:	045c      	lsls	r4, r3, #17
 800421c:	230a      	movs	r3, #10
 800421e:	18fb      	adds	r3, r7, r3
 8004220:	8819      	ldrh	r1, [r3, #0]
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	2300      	movs	r3, #0
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	0023      	movs	r3, r4
 800422a:	f000 facd 	bl	80047c8 <I2C_TransferConfig>
 800422e:	e012      	b.n	8004256 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004234:	b29a      	uxth	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800423e:	b2da      	uxtb	r2, r3
 8004240:	2380      	movs	r3, #128	; 0x80
 8004242:	049c      	lsls	r4, r3, #18
 8004244:	230a      	movs	r3, #10
 8004246:	18fb      	adds	r3, r7, r3
 8004248:	8819      	ldrh	r1, [r3, #0]
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	2300      	movs	r3, #0
 800424e:	9300      	str	r3, [sp, #0]
 8004250:	0023      	movs	r3, r4
 8004252:	f000 fab9 	bl	80047c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	0018      	movs	r0, r3
 800425e:	f000 f952 	bl	8004506 <I2C_WaitOnTXISFlagUntilTimeout>
 8004262:	1e03      	subs	r3, r0, #0
 8004264:	d001      	beq.n	800426a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e081      	b.n	800436e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426e:	781a      	ldrb	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	1c5a      	adds	r2, r3, #1
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004284:	b29b      	uxth	r3, r3
 8004286:	3b01      	subs	r3, #1
 8004288:	b29a      	uxth	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004292:	3b01      	subs	r3, #1
 8004294:	b29a      	uxth	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d03a      	beq.n	800431a <HAL_I2C_Mem_Write+0x1fa>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d136      	bne.n	800431a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	0013      	movs	r3, r2
 80042b6:	2200      	movs	r2, #0
 80042b8:	2180      	movs	r1, #128	; 0x80
 80042ba:	f000 f8e5 	bl	8004488 <I2C_WaitOnFlagUntilTimeout>
 80042be:	1e03      	subs	r3, r0, #0
 80042c0:	d001      	beq.n	80042c6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e053      	b.n	800436e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	2bff      	cmp	r3, #255	; 0xff
 80042ce:	d911      	bls.n	80042f4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	22ff      	movs	r2, #255	; 0xff
 80042d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	2380      	movs	r3, #128	; 0x80
 80042de:	045c      	lsls	r4, r3, #17
 80042e0:	230a      	movs	r3, #10
 80042e2:	18fb      	adds	r3, r7, r3
 80042e4:	8819      	ldrh	r1, [r3, #0]
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	2300      	movs	r3, #0
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	0023      	movs	r3, r4
 80042ee:	f000 fa6b 	bl	80047c8 <I2C_TransferConfig>
 80042f2:	e012      	b.n	800431a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004302:	b2da      	uxtb	r2, r3
 8004304:	2380      	movs	r3, #128	; 0x80
 8004306:	049c      	lsls	r4, r3, #18
 8004308:	230a      	movs	r3, #10
 800430a:	18fb      	adds	r3, r7, r3
 800430c:	8819      	ldrh	r1, [r3, #0]
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	2300      	movs	r3, #0
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	0023      	movs	r3, r4
 8004316:	f000 fa57 	bl	80047c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431e:	b29b      	uxth	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	d198      	bne.n	8004256 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	0018      	movs	r0, r3
 800432c:	f000 f92a 	bl	8004584 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004330:	1e03      	subs	r3, r0, #0
 8004332:	d001      	beq.n	8004338 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e01a      	b.n	800436e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2220      	movs	r2, #32
 800433e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	490b      	ldr	r1, [pc, #44]	; (8004378 <HAL_I2C_Mem_Write+0x258>)
 800434c:	400a      	ands	r2, r1
 800434e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2241      	movs	r2, #65	; 0x41
 8004354:	2120      	movs	r1, #32
 8004356:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2242      	movs	r2, #66	; 0x42
 800435c:	2100      	movs	r1, #0
 800435e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2240      	movs	r2, #64	; 0x40
 8004364:	2100      	movs	r1, #0
 8004366:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004368:	2300      	movs	r3, #0
 800436a:	e000      	b.n	800436e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800436c:	2302      	movs	r3, #2
  }
}
 800436e:	0018      	movs	r0, r3
 8004370:	46bd      	mov	sp, r7
 8004372:	b007      	add	sp, #28
 8004374:	bd90      	pop	{r4, r7, pc}
 8004376:	46c0      	nop			; (mov r8, r8)
 8004378:	fe00e800 	.word	0xfe00e800

0800437c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800437c:	b5b0      	push	{r4, r5, r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af02      	add	r7, sp, #8
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	000c      	movs	r4, r1
 8004386:	0010      	movs	r0, r2
 8004388:	0019      	movs	r1, r3
 800438a:	250a      	movs	r5, #10
 800438c:	197b      	adds	r3, r7, r5
 800438e:	1c22      	adds	r2, r4, #0
 8004390:	801a      	strh	r2, [r3, #0]
 8004392:	2308      	movs	r3, #8
 8004394:	18fb      	adds	r3, r7, r3
 8004396:	1c02      	adds	r2, r0, #0
 8004398:	801a      	strh	r2, [r3, #0]
 800439a:	1dbb      	adds	r3, r7, #6
 800439c:	1c0a      	adds	r2, r1, #0
 800439e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80043a0:	1dbb      	adds	r3, r7, #6
 80043a2:	881b      	ldrh	r3, [r3, #0]
 80043a4:	b2da      	uxtb	r2, r3
 80043a6:	2380      	movs	r3, #128	; 0x80
 80043a8:	045c      	lsls	r4, r3, #17
 80043aa:	197b      	adds	r3, r7, r5
 80043ac:	8819      	ldrh	r1, [r3, #0]
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	4b23      	ldr	r3, [pc, #140]	; (8004440 <I2C_RequestMemoryWrite+0xc4>)
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	0023      	movs	r3, r4
 80043b6:	f000 fa07 	bl	80047c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043bc:	6a39      	ldr	r1, [r7, #32]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	0018      	movs	r0, r3
 80043c2:	f000 f8a0 	bl	8004506 <I2C_WaitOnTXISFlagUntilTimeout>
 80043c6:	1e03      	subs	r3, r0, #0
 80043c8:	d001      	beq.n	80043ce <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e033      	b.n	8004436 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043ce:	1dbb      	adds	r3, r7, #6
 80043d0:	881b      	ldrh	r3, [r3, #0]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d107      	bne.n	80043e6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043d6:	2308      	movs	r3, #8
 80043d8:	18fb      	adds	r3, r7, r3
 80043da:	881b      	ldrh	r3, [r3, #0]
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	629a      	str	r2, [r3, #40]	; 0x28
 80043e4:	e019      	b.n	800441a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80043e6:	2308      	movs	r3, #8
 80043e8:	18fb      	adds	r3, r7, r3
 80043ea:	881b      	ldrh	r3, [r3, #0]
 80043ec:	0a1b      	lsrs	r3, r3, #8
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043fa:	6a39      	ldr	r1, [r7, #32]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	0018      	movs	r0, r3
 8004400:	f000 f881 	bl	8004506 <I2C_WaitOnTXISFlagUntilTimeout>
 8004404:	1e03      	subs	r3, r0, #0
 8004406:	d001      	beq.n	800440c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e014      	b.n	8004436 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800440c:	2308      	movs	r3, #8
 800440e:	18fb      	adds	r3, r7, r3
 8004410:	881b      	ldrh	r3, [r3, #0]
 8004412:	b2da      	uxtb	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800441a:	6a3a      	ldr	r2, [r7, #32]
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004420:	9300      	str	r3, [sp, #0]
 8004422:	0013      	movs	r3, r2
 8004424:	2200      	movs	r2, #0
 8004426:	2180      	movs	r1, #128	; 0x80
 8004428:	f000 f82e 	bl	8004488 <I2C_WaitOnFlagUntilTimeout>
 800442c:	1e03      	subs	r3, r0, #0
 800442e:	d001      	beq.n	8004434 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e000      	b.n	8004436 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	0018      	movs	r0, r3
 8004438:	46bd      	mov	sp, r7
 800443a:	b004      	add	sp, #16
 800443c:	bdb0      	pop	{r4, r5, r7, pc}
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	80002000 	.word	0x80002000

08004444 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	2202      	movs	r2, #2
 8004454:	4013      	ands	r3, r2
 8004456:	2b02      	cmp	r3, #2
 8004458:	d103      	bne.n	8004462 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2200      	movs	r2, #0
 8004460:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	2201      	movs	r2, #1
 800446a:	4013      	ands	r3, r2
 800446c:	2b01      	cmp	r3, #1
 800446e:	d007      	beq.n	8004480 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	699a      	ldr	r2, [r3, #24]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2101      	movs	r1, #1
 800447c:	430a      	orrs	r2, r1
 800447e:	619a      	str	r2, [r3, #24]
  }
}
 8004480:	46c0      	nop			; (mov r8, r8)
 8004482:	46bd      	mov	sp, r7
 8004484:	b002      	add	sp, #8
 8004486:	bd80      	pop	{r7, pc}

08004488 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	603b      	str	r3, [r7, #0]
 8004494:	1dfb      	adds	r3, r7, #7
 8004496:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004498:	e021      	b.n	80044de <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	3301      	adds	r3, #1
 800449e:	d01e      	beq.n	80044de <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a0:	f7ff f928 	bl	80036f4 <HAL_GetTick>
 80044a4:	0002      	movs	r2, r0
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d302      	bcc.n	80044b6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d113      	bne.n	80044de <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ba:	2220      	movs	r2, #32
 80044bc:	431a      	orrs	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2241      	movs	r2, #65	; 0x41
 80044c6:	2120      	movs	r1, #32
 80044c8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2242      	movs	r2, #66	; 0x42
 80044ce:	2100      	movs	r1, #0
 80044d0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2240      	movs	r2, #64	; 0x40
 80044d6:	2100      	movs	r1, #0
 80044d8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e00f      	b.n	80044fe <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	4013      	ands	r3, r2
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	425a      	negs	r2, r3
 80044ee:	4153      	adcs	r3, r2
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	001a      	movs	r2, r3
 80044f4:	1dfb      	adds	r3, r7, #7
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d0ce      	beq.n	800449a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	0018      	movs	r0, r3
 8004500:	46bd      	mov	sp, r7
 8004502:	b004      	add	sp, #16
 8004504:	bd80      	pop	{r7, pc}

08004506 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b084      	sub	sp, #16
 800450a:	af00      	add	r7, sp, #0
 800450c:	60f8      	str	r0, [r7, #12]
 800450e:	60b9      	str	r1, [r7, #8]
 8004510:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004512:	e02b      	b.n	800456c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	68b9      	ldr	r1, [r7, #8]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	0018      	movs	r0, r3
 800451c:	f000 f8da 	bl	80046d4 <I2C_IsAcknowledgeFailed>
 8004520:	1e03      	subs	r3, r0, #0
 8004522:	d001      	beq.n	8004528 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e029      	b.n	800457c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	3301      	adds	r3, #1
 800452c:	d01e      	beq.n	800456c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800452e:	f7ff f8e1 	bl	80036f4 <HAL_GetTick>
 8004532:	0002      	movs	r2, r0
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	429a      	cmp	r2, r3
 800453c:	d302      	bcc.n	8004544 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d113      	bne.n	800456c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004548:	2220      	movs	r2, #32
 800454a:	431a      	orrs	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2241      	movs	r2, #65	; 0x41
 8004554:	2120      	movs	r1, #32
 8004556:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2242      	movs	r2, #66	; 0x42
 800455c:	2100      	movs	r1, #0
 800455e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2240      	movs	r2, #64	; 0x40
 8004564:	2100      	movs	r1, #0
 8004566:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e007      	b.n	800457c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	2202      	movs	r2, #2
 8004574:	4013      	ands	r3, r2
 8004576:	2b02      	cmp	r3, #2
 8004578:	d1cc      	bne.n	8004514 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	0018      	movs	r0, r3
 800457e:	46bd      	mov	sp, r7
 8004580:	b004      	add	sp, #16
 8004582:	bd80      	pop	{r7, pc}

08004584 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004590:	e028      	b.n	80045e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	68b9      	ldr	r1, [r7, #8]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	0018      	movs	r0, r3
 800459a:	f000 f89b 	bl	80046d4 <I2C_IsAcknowledgeFailed>
 800459e:	1e03      	subs	r3, r0, #0
 80045a0:	d001      	beq.n	80045a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e026      	b.n	80045f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045a6:	f7ff f8a5 	bl	80036f4 <HAL_GetTick>
 80045aa:	0002      	movs	r2, r0
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d302      	bcc.n	80045bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d113      	bne.n	80045e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c0:	2220      	movs	r2, #32
 80045c2:	431a      	orrs	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2241      	movs	r2, #65	; 0x41
 80045cc:	2120      	movs	r1, #32
 80045ce:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2242      	movs	r2, #66	; 0x42
 80045d4:	2100      	movs	r1, #0
 80045d6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2240      	movs	r2, #64	; 0x40
 80045dc:	2100      	movs	r1, #0
 80045de:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e007      	b.n	80045f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	2220      	movs	r2, #32
 80045ec:	4013      	ands	r3, r2
 80045ee:	2b20      	cmp	r3, #32
 80045f0:	d1cf      	bne.n	8004592 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	0018      	movs	r0, r3
 80045f6:	46bd      	mov	sp, r7
 80045f8:	b004      	add	sp, #16
 80045fa:	bd80      	pop	{r7, pc}

080045fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004608:	e055      	b.n	80046b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	68b9      	ldr	r1, [r7, #8]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	0018      	movs	r0, r3
 8004612:	f000 f85f 	bl	80046d4 <I2C_IsAcknowledgeFailed>
 8004616:	1e03      	subs	r3, r0, #0
 8004618:	d001      	beq.n	800461e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e053      	b.n	80046c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	2220      	movs	r2, #32
 8004626:	4013      	ands	r3, r2
 8004628:	2b20      	cmp	r3, #32
 800462a:	d129      	bne.n	8004680 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	2204      	movs	r2, #4
 8004634:	4013      	ands	r3, r2
 8004636:	2b04      	cmp	r3, #4
 8004638:	d105      	bne.n	8004646 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004642:	2300      	movs	r3, #0
 8004644:	e03f      	b.n	80046c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2220      	movs	r2, #32
 800464c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	491d      	ldr	r1, [pc, #116]	; (80046d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800465a:	400a      	ands	r2, r1
 800465c:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2241      	movs	r2, #65	; 0x41
 8004668:	2120      	movs	r1, #32
 800466a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2242      	movs	r2, #66	; 0x42
 8004670:	2100      	movs	r1, #0
 8004672:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2240      	movs	r2, #64	; 0x40
 8004678:	2100      	movs	r1, #0
 800467a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e022      	b.n	80046c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004680:	f7ff f838 	bl	80036f4 <HAL_GetTick>
 8004684:	0002      	movs	r2, r0
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	429a      	cmp	r2, r3
 800468e:	d302      	bcc.n	8004696 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10f      	bne.n	80046b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469a:	2220      	movs	r2, #32
 800469c:	431a      	orrs	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2241      	movs	r2, #65	; 0x41
 80046a6:	2120      	movs	r1, #32
 80046a8:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2240      	movs	r2, #64	; 0x40
 80046ae:	2100      	movs	r1, #0
 80046b0:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e007      	b.n	80046c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	2204      	movs	r2, #4
 80046be:	4013      	ands	r3, r2
 80046c0:	2b04      	cmp	r3, #4
 80046c2:	d1a2      	bne.n	800460a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	0018      	movs	r0, r3
 80046c8:	46bd      	mov	sp, r7
 80046ca:	b004      	add	sp, #16
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	46c0      	nop			; (mov r8, r8)
 80046d0:	fe00e800 	.word	0xfe00e800

080046d4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	2210      	movs	r2, #16
 80046e8:	4013      	ands	r3, r2
 80046ea:	2b10      	cmp	r3, #16
 80046ec:	d164      	bne.n	80047b8 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	2380      	movs	r3, #128	; 0x80
 80046f6:	049b      	lsls	r3, r3, #18
 80046f8:	401a      	ands	r2, r3
 80046fa:	2380      	movs	r3, #128	; 0x80
 80046fc:	049b      	lsls	r3, r3, #18
 80046fe:	429a      	cmp	r2, r3
 8004700:	d02b      	beq.n	800475a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2180      	movs	r1, #128	; 0x80
 800470e:	01c9      	lsls	r1, r1, #7
 8004710:	430a      	orrs	r2, r1
 8004712:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004714:	e021      	b.n	800475a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	3301      	adds	r3, #1
 800471a:	d01e      	beq.n	800475a <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800471c:	f7fe ffea 	bl	80036f4 <HAL_GetTick>
 8004720:	0002      	movs	r2, r0
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	429a      	cmp	r2, r3
 800472a:	d302      	bcc.n	8004732 <I2C_IsAcknowledgeFailed+0x5e>
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d113      	bne.n	800475a <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004736:	2220      	movs	r2, #32
 8004738:	431a      	orrs	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2241      	movs	r2, #65	; 0x41
 8004742:	2120      	movs	r1, #32
 8004744:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2242      	movs	r2, #66	; 0x42
 800474a:	2100      	movs	r1, #0
 800474c:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2240      	movs	r2, #64	; 0x40
 8004752:	2100      	movs	r1, #0
 8004754:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e02f      	b.n	80047ba <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	2220      	movs	r2, #32
 8004762:	4013      	ands	r3, r2
 8004764:	2b20      	cmp	r3, #32
 8004766:	d1d6      	bne.n	8004716 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2210      	movs	r2, #16
 800476e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2220      	movs	r2, #32
 8004776:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	0018      	movs	r0, r3
 800477c:	f7ff fe62 	bl	8004444 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	490e      	ldr	r1, [pc, #56]	; (80047c4 <I2C_IsAcknowledgeFailed+0xf0>)
 800478c:	400a      	ands	r2, r1
 800478e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004794:	2204      	movs	r2, #4
 8004796:	431a      	orrs	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2241      	movs	r2, #65	; 0x41
 80047a0:	2120      	movs	r1, #32
 80047a2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2242      	movs	r2, #66	; 0x42
 80047a8:	2100      	movs	r1, #0
 80047aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2240      	movs	r2, #64	; 0x40
 80047b0:	2100      	movs	r1, #0
 80047b2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e000      	b.n	80047ba <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	0018      	movs	r0, r3
 80047bc:	46bd      	mov	sp, r7
 80047be:	b004      	add	sp, #16
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	46c0      	nop			; (mov r8, r8)
 80047c4:	fe00e800 	.word	0xfe00e800

080047c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80047c8:	b590      	push	{r4, r7, lr}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	0008      	movs	r0, r1
 80047d2:	0011      	movs	r1, r2
 80047d4:	607b      	str	r3, [r7, #4]
 80047d6:	240a      	movs	r4, #10
 80047d8:	193b      	adds	r3, r7, r4
 80047da:	1c02      	adds	r2, r0, #0
 80047dc:	801a      	strh	r2, [r3, #0]
 80047de:	2009      	movs	r0, #9
 80047e0:	183b      	adds	r3, r7, r0
 80047e2:	1c0a      	adds	r2, r1, #0
 80047e4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	6a3a      	ldr	r2, [r7, #32]
 80047ee:	0d51      	lsrs	r1, r2, #21
 80047f0:	2280      	movs	r2, #128	; 0x80
 80047f2:	00d2      	lsls	r2, r2, #3
 80047f4:	400a      	ands	r2, r1
 80047f6:	490e      	ldr	r1, [pc, #56]	; (8004830 <I2C_TransferConfig+0x68>)
 80047f8:	430a      	orrs	r2, r1
 80047fa:	43d2      	mvns	r2, r2
 80047fc:	401a      	ands	r2, r3
 80047fe:	0011      	movs	r1, r2
 8004800:	193b      	adds	r3, r7, r4
 8004802:	881b      	ldrh	r3, [r3, #0]
 8004804:	059b      	lsls	r3, r3, #22
 8004806:	0d9a      	lsrs	r2, r3, #22
 8004808:	183b      	adds	r3, r7, r0
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	0418      	lsls	r0, r3, #16
 800480e:	23ff      	movs	r3, #255	; 0xff
 8004810:	041b      	lsls	r3, r3, #16
 8004812:	4003      	ands	r3, r0
 8004814:	431a      	orrs	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	431a      	orrs	r2, r3
 800481a:	6a3b      	ldr	r3, [r7, #32]
 800481c:	431a      	orrs	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004826:	46c0      	nop			; (mov r8, r8)
 8004828:	46bd      	mov	sp, r7
 800482a:	b005      	add	sp, #20
 800482c:	bd90      	pop	{r4, r7, pc}
 800482e:	46c0      	nop			; (mov r8, r8)
 8004830:	03ff63ff 	.word	0x03ff63ff

08004834 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2241      	movs	r2, #65	; 0x41
 8004842:	5c9b      	ldrb	r3, [r3, r2]
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b20      	cmp	r3, #32
 8004848:	d138      	bne.n	80048bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2240      	movs	r2, #64	; 0x40
 800484e:	5c9b      	ldrb	r3, [r3, r2]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d101      	bne.n	8004858 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004854:	2302      	movs	r3, #2
 8004856:	e032      	b.n	80048be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2240      	movs	r2, #64	; 0x40
 800485c:	2101      	movs	r1, #1
 800485e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2241      	movs	r2, #65	; 0x41
 8004864:	2124      	movs	r1, #36	; 0x24
 8004866:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2101      	movs	r1, #1
 8004874:	438a      	bics	r2, r1
 8004876:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4911      	ldr	r1, [pc, #68]	; (80048c8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004884:	400a      	ands	r2, r1
 8004886:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6819      	ldr	r1, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2101      	movs	r1, #1
 80048a4:	430a      	orrs	r2, r1
 80048a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2241      	movs	r2, #65	; 0x41
 80048ac:	2120      	movs	r1, #32
 80048ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2240      	movs	r2, #64	; 0x40
 80048b4:	2100      	movs	r1, #0
 80048b6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80048b8:	2300      	movs	r3, #0
 80048ba:	e000      	b.n	80048be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80048bc:	2302      	movs	r3, #2
  }
}
 80048be:	0018      	movs	r0, r3
 80048c0:	46bd      	mov	sp, r7
 80048c2:	b002      	add	sp, #8
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	46c0      	nop			; (mov r8, r8)
 80048c8:	ffffefff 	.word	0xffffefff

080048cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2241      	movs	r2, #65	; 0x41
 80048da:	5c9b      	ldrb	r3, [r3, r2]
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b20      	cmp	r3, #32
 80048e0:	d139      	bne.n	8004956 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2240      	movs	r2, #64	; 0x40
 80048e6:	5c9b      	ldrb	r3, [r3, r2]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d101      	bne.n	80048f0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80048ec:	2302      	movs	r3, #2
 80048ee:	e033      	b.n	8004958 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2240      	movs	r2, #64	; 0x40
 80048f4:	2101      	movs	r1, #1
 80048f6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2241      	movs	r2, #65	; 0x41
 80048fc:	2124      	movs	r1, #36	; 0x24
 80048fe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2101      	movs	r1, #1
 800490c:	438a      	bics	r2, r1
 800490e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4a11      	ldr	r2, [pc, #68]	; (8004960 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800491c:	4013      	ands	r3, r2
 800491e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	021b      	lsls	r3, r3, #8
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	4313      	orrs	r3, r2
 8004928:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2101      	movs	r1, #1
 800493e:	430a      	orrs	r2, r1
 8004940:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2241      	movs	r2, #65	; 0x41
 8004946:	2120      	movs	r1, #32
 8004948:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2240      	movs	r2, #64	; 0x40
 800494e:	2100      	movs	r1, #0
 8004950:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004952:	2300      	movs	r3, #0
 8004954:	e000      	b.n	8004958 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004956:	2302      	movs	r3, #2
  }
}
 8004958:	0018      	movs	r0, r3
 800495a:	46bd      	mov	sp, r7
 800495c:	b004      	add	sp, #16
 800495e:	bd80      	pop	{r7, pc}
 8004960:	fffff0ff 	.word	0xfffff0ff

08004964 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b088      	sub	sp, #32
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e301      	b.n	8004f7a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2201      	movs	r2, #1
 800497c:	4013      	ands	r3, r2
 800497e:	d100      	bne.n	8004982 <HAL_RCC_OscConfig+0x1e>
 8004980:	e08d      	b.n	8004a9e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004982:	4bc3      	ldr	r3, [pc, #780]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	220c      	movs	r2, #12
 8004988:	4013      	ands	r3, r2
 800498a:	2b04      	cmp	r3, #4
 800498c:	d00e      	beq.n	80049ac <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800498e:	4bc0      	ldr	r3, [pc, #768]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	220c      	movs	r2, #12
 8004994:	4013      	ands	r3, r2
 8004996:	2b08      	cmp	r3, #8
 8004998:	d116      	bne.n	80049c8 <HAL_RCC_OscConfig+0x64>
 800499a:	4bbd      	ldr	r3, [pc, #756]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	2380      	movs	r3, #128	; 0x80
 80049a0:	025b      	lsls	r3, r3, #9
 80049a2:	401a      	ands	r2, r3
 80049a4:	2380      	movs	r3, #128	; 0x80
 80049a6:	025b      	lsls	r3, r3, #9
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d10d      	bne.n	80049c8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049ac:	4bb8      	ldr	r3, [pc, #736]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	2380      	movs	r3, #128	; 0x80
 80049b2:	029b      	lsls	r3, r3, #10
 80049b4:	4013      	ands	r3, r2
 80049b6:	d100      	bne.n	80049ba <HAL_RCC_OscConfig+0x56>
 80049b8:	e070      	b.n	8004a9c <HAL_RCC_OscConfig+0x138>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d000      	beq.n	80049c4 <HAL_RCC_OscConfig+0x60>
 80049c2:	e06b      	b.n	8004a9c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e2d8      	b.n	8004f7a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d107      	bne.n	80049e0 <HAL_RCC_OscConfig+0x7c>
 80049d0:	4baf      	ldr	r3, [pc, #700]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	4bae      	ldr	r3, [pc, #696]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 80049d6:	2180      	movs	r1, #128	; 0x80
 80049d8:	0249      	lsls	r1, r1, #9
 80049da:	430a      	orrs	r2, r1
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	e02f      	b.n	8004a40 <HAL_RCC_OscConfig+0xdc>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10c      	bne.n	8004a02 <HAL_RCC_OscConfig+0x9e>
 80049e8:	4ba9      	ldr	r3, [pc, #676]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	4ba8      	ldr	r3, [pc, #672]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 80049ee:	49a9      	ldr	r1, [pc, #676]	; (8004c94 <HAL_RCC_OscConfig+0x330>)
 80049f0:	400a      	ands	r2, r1
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	4ba6      	ldr	r3, [pc, #664]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	4ba5      	ldr	r3, [pc, #660]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 80049fa:	49a7      	ldr	r1, [pc, #668]	; (8004c98 <HAL_RCC_OscConfig+0x334>)
 80049fc:	400a      	ands	r2, r1
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	e01e      	b.n	8004a40 <HAL_RCC_OscConfig+0xdc>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2b05      	cmp	r3, #5
 8004a08:	d10e      	bne.n	8004a28 <HAL_RCC_OscConfig+0xc4>
 8004a0a:	4ba1      	ldr	r3, [pc, #644]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	4ba0      	ldr	r3, [pc, #640]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 8004a10:	2180      	movs	r1, #128	; 0x80
 8004a12:	02c9      	lsls	r1, r1, #11
 8004a14:	430a      	orrs	r2, r1
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	4b9d      	ldr	r3, [pc, #628]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	4b9c      	ldr	r3, [pc, #624]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 8004a1e:	2180      	movs	r1, #128	; 0x80
 8004a20:	0249      	lsls	r1, r1, #9
 8004a22:	430a      	orrs	r2, r1
 8004a24:	601a      	str	r2, [r3, #0]
 8004a26:	e00b      	b.n	8004a40 <HAL_RCC_OscConfig+0xdc>
 8004a28:	4b99      	ldr	r3, [pc, #612]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	4b98      	ldr	r3, [pc, #608]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 8004a2e:	4999      	ldr	r1, [pc, #612]	; (8004c94 <HAL_RCC_OscConfig+0x330>)
 8004a30:	400a      	ands	r2, r1
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	4b96      	ldr	r3, [pc, #600]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	4b95      	ldr	r3, [pc, #596]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 8004a3a:	4997      	ldr	r1, [pc, #604]	; (8004c98 <HAL_RCC_OscConfig+0x334>)
 8004a3c:	400a      	ands	r2, r1
 8004a3e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d014      	beq.n	8004a72 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a48:	f7fe fe54 	bl	80036f4 <HAL_GetTick>
 8004a4c:	0003      	movs	r3, r0
 8004a4e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a50:	e008      	b.n	8004a64 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a52:	f7fe fe4f 	bl	80036f4 <HAL_GetTick>
 8004a56:	0002      	movs	r2, r0
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	2b64      	cmp	r3, #100	; 0x64
 8004a5e:	d901      	bls.n	8004a64 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e28a      	b.n	8004f7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a64:	4b8a      	ldr	r3, [pc, #552]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	2380      	movs	r3, #128	; 0x80
 8004a6a:	029b      	lsls	r3, r3, #10
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	d0f0      	beq.n	8004a52 <HAL_RCC_OscConfig+0xee>
 8004a70:	e015      	b.n	8004a9e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a72:	f7fe fe3f 	bl	80036f4 <HAL_GetTick>
 8004a76:	0003      	movs	r3, r0
 8004a78:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a7a:	e008      	b.n	8004a8e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a7c:	f7fe fe3a 	bl	80036f4 <HAL_GetTick>
 8004a80:	0002      	movs	r2, r0
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b64      	cmp	r3, #100	; 0x64
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e275      	b.n	8004f7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a8e:	4b80      	ldr	r3, [pc, #512]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	2380      	movs	r3, #128	; 0x80
 8004a94:	029b      	lsls	r3, r3, #10
 8004a96:	4013      	ands	r3, r2
 8004a98:	d1f0      	bne.n	8004a7c <HAL_RCC_OscConfig+0x118>
 8004a9a:	e000      	b.n	8004a9e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a9c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	d100      	bne.n	8004aaa <HAL_RCC_OscConfig+0x146>
 8004aa8:	e069      	b.n	8004b7e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004aaa:	4b79      	ldr	r3, [pc, #484]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	220c      	movs	r2, #12
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	d00b      	beq.n	8004acc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004ab4:	4b76      	ldr	r3, [pc, #472]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	220c      	movs	r2, #12
 8004aba:	4013      	ands	r3, r2
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d11c      	bne.n	8004afa <HAL_RCC_OscConfig+0x196>
 8004ac0:	4b73      	ldr	r3, [pc, #460]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	2380      	movs	r3, #128	; 0x80
 8004ac6:	025b      	lsls	r3, r3, #9
 8004ac8:	4013      	ands	r3, r2
 8004aca:	d116      	bne.n	8004afa <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004acc:	4b70      	ldr	r3, [pc, #448]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	d005      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x17e>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d001      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e24b      	b.n	8004f7a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ae2:	4b6b      	ldr	r3, [pc, #428]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	22f8      	movs	r2, #248	; 0xf8
 8004ae8:	4393      	bics	r3, r2
 8004aea:	0019      	movs	r1, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	00da      	lsls	r2, r3, #3
 8004af2:	4b67      	ldr	r3, [pc, #412]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 8004af4:	430a      	orrs	r2, r1
 8004af6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004af8:	e041      	b.n	8004b7e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d024      	beq.n	8004b4c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b02:	4b63      	ldr	r3, [pc, #396]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	4b62      	ldr	r3, [pc, #392]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 8004b08:	2101      	movs	r1, #1
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b0e:	f7fe fdf1 	bl	80036f4 <HAL_GetTick>
 8004b12:	0003      	movs	r3, r0
 8004b14:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b16:	e008      	b.n	8004b2a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b18:	f7fe fdec 	bl	80036f4 <HAL_GetTick>
 8004b1c:	0002      	movs	r2, r0
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e227      	b.n	8004f7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b2a:	4b59      	ldr	r3, [pc, #356]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	4013      	ands	r3, r2
 8004b32:	d0f1      	beq.n	8004b18 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b34:	4b56      	ldr	r3, [pc, #344]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	22f8      	movs	r2, #248	; 0xf8
 8004b3a:	4393      	bics	r3, r2
 8004b3c:	0019      	movs	r1, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	00da      	lsls	r2, r3, #3
 8004b44:	4b52      	ldr	r3, [pc, #328]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 8004b46:	430a      	orrs	r2, r1
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	e018      	b.n	8004b7e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b4c:	4b50      	ldr	r3, [pc, #320]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	4b4f      	ldr	r3, [pc, #316]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 8004b52:	2101      	movs	r1, #1
 8004b54:	438a      	bics	r2, r1
 8004b56:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b58:	f7fe fdcc 	bl	80036f4 <HAL_GetTick>
 8004b5c:	0003      	movs	r3, r0
 8004b5e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b60:	e008      	b.n	8004b74 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b62:	f7fe fdc7 	bl	80036f4 <HAL_GetTick>
 8004b66:	0002      	movs	r2, r0
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e202      	b.n	8004f7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b74:	4b46      	ldr	r3, [pc, #280]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2202      	movs	r2, #2
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	d1f1      	bne.n	8004b62 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2208      	movs	r2, #8
 8004b84:	4013      	ands	r3, r2
 8004b86:	d036      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	69db      	ldr	r3, [r3, #28]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d019      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b90:	4b3f      	ldr	r3, [pc, #252]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 8004b92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b94:	4b3e      	ldr	r3, [pc, #248]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 8004b96:	2101      	movs	r1, #1
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b9c:	f7fe fdaa 	bl	80036f4 <HAL_GetTick>
 8004ba0:	0003      	movs	r3, r0
 8004ba2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ba4:	e008      	b.n	8004bb8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ba6:	f7fe fda5 	bl	80036f4 <HAL_GetTick>
 8004baa:	0002      	movs	r2, r0
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e1e0      	b.n	8004f7a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bb8:	4b35      	ldr	r3, [pc, #212]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 8004bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	d0f1      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x242>
 8004bc2:	e018      	b.n	8004bf6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bc4:	4b32      	ldr	r3, [pc, #200]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 8004bc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bc8:	4b31      	ldr	r3, [pc, #196]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 8004bca:	2101      	movs	r1, #1
 8004bcc:	438a      	bics	r2, r1
 8004bce:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bd0:	f7fe fd90 	bl	80036f4 <HAL_GetTick>
 8004bd4:	0003      	movs	r3, r0
 8004bd6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bd8:	e008      	b.n	8004bec <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bda:	f7fe fd8b 	bl	80036f4 <HAL_GetTick>
 8004bde:	0002      	movs	r2, r0
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d901      	bls.n	8004bec <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e1c6      	b.n	8004f7a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bec:	4b28      	ldr	r3, [pc, #160]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 8004bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	d1f1      	bne.n	8004bda <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2204      	movs	r2, #4
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	d100      	bne.n	8004c02 <HAL_RCC_OscConfig+0x29e>
 8004c00:	e0b4      	b.n	8004d6c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c02:	201f      	movs	r0, #31
 8004c04:	183b      	adds	r3, r7, r0
 8004c06:	2200      	movs	r2, #0
 8004c08:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c0a:	4b21      	ldr	r3, [pc, #132]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 8004c0c:	69da      	ldr	r2, [r3, #28]
 8004c0e:	2380      	movs	r3, #128	; 0x80
 8004c10:	055b      	lsls	r3, r3, #21
 8004c12:	4013      	ands	r3, r2
 8004c14:	d110      	bne.n	8004c38 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c16:	4b1e      	ldr	r3, [pc, #120]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 8004c18:	69da      	ldr	r2, [r3, #28]
 8004c1a:	4b1d      	ldr	r3, [pc, #116]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 8004c1c:	2180      	movs	r1, #128	; 0x80
 8004c1e:	0549      	lsls	r1, r1, #21
 8004c20:	430a      	orrs	r2, r1
 8004c22:	61da      	str	r2, [r3, #28]
 8004c24:	4b1a      	ldr	r3, [pc, #104]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 8004c26:	69da      	ldr	r2, [r3, #28]
 8004c28:	2380      	movs	r3, #128	; 0x80
 8004c2a:	055b      	lsls	r3, r3, #21
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	60fb      	str	r3, [r7, #12]
 8004c30:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004c32:	183b      	adds	r3, r7, r0
 8004c34:	2201      	movs	r2, #1
 8004c36:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c38:	4b18      	ldr	r3, [pc, #96]	; (8004c9c <HAL_RCC_OscConfig+0x338>)
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	2380      	movs	r3, #128	; 0x80
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	4013      	ands	r3, r2
 8004c42:	d11a      	bne.n	8004c7a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c44:	4b15      	ldr	r3, [pc, #84]	; (8004c9c <HAL_RCC_OscConfig+0x338>)
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	4b14      	ldr	r3, [pc, #80]	; (8004c9c <HAL_RCC_OscConfig+0x338>)
 8004c4a:	2180      	movs	r1, #128	; 0x80
 8004c4c:	0049      	lsls	r1, r1, #1
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c52:	f7fe fd4f 	bl	80036f4 <HAL_GetTick>
 8004c56:	0003      	movs	r3, r0
 8004c58:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c5a:	e008      	b.n	8004c6e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c5c:	f7fe fd4a 	bl	80036f4 <HAL_GetTick>
 8004c60:	0002      	movs	r2, r0
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b64      	cmp	r3, #100	; 0x64
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e185      	b.n	8004f7a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c6e:	4b0b      	ldr	r3, [pc, #44]	; (8004c9c <HAL_RCC_OscConfig+0x338>)
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	2380      	movs	r3, #128	; 0x80
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	4013      	ands	r3, r2
 8004c78:	d0f0      	beq.n	8004c5c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d10e      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x33c>
 8004c82:	4b03      	ldr	r3, [pc, #12]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 8004c84:	6a1a      	ldr	r2, [r3, #32]
 8004c86:	4b02      	ldr	r3, [pc, #8]	; (8004c90 <HAL_RCC_OscConfig+0x32c>)
 8004c88:	2101      	movs	r1, #1
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	621a      	str	r2, [r3, #32]
 8004c8e:	e035      	b.n	8004cfc <HAL_RCC_OscConfig+0x398>
 8004c90:	40021000 	.word	0x40021000
 8004c94:	fffeffff 	.word	0xfffeffff
 8004c98:	fffbffff 	.word	0xfffbffff
 8004c9c:	40007000 	.word	0x40007000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10c      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x35e>
 8004ca8:	4bb6      	ldr	r3, [pc, #728]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004caa:	6a1a      	ldr	r2, [r3, #32]
 8004cac:	4bb5      	ldr	r3, [pc, #724]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004cae:	2101      	movs	r1, #1
 8004cb0:	438a      	bics	r2, r1
 8004cb2:	621a      	str	r2, [r3, #32]
 8004cb4:	4bb3      	ldr	r3, [pc, #716]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004cb6:	6a1a      	ldr	r2, [r3, #32]
 8004cb8:	4bb2      	ldr	r3, [pc, #712]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004cba:	2104      	movs	r1, #4
 8004cbc:	438a      	bics	r2, r1
 8004cbe:	621a      	str	r2, [r3, #32]
 8004cc0:	e01c      	b.n	8004cfc <HAL_RCC_OscConfig+0x398>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	2b05      	cmp	r3, #5
 8004cc8:	d10c      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x380>
 8004cca:	4bae      	ldr	r3, [pc, #696]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004ccc:	6a1a      	ldr	r2, [r3, #32]
 8004cce:	4bad      	ldr	r3, [pc, #692]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004cd0:	2104      	movs	r1, #4
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	621a      	str	r2, [r3, #32]
 8004cd6:	4bab      	ldr	r3, [pc, #684]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004cd8:	6a1a      	ldr	r2, [r3, #32]
 8004cda:	4baa      	ldr	r3, [pc, #680]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004cdc:	2101      	movs	r1, #1
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	621a      	str	r2, [r3, #32]
 8004ce2:	e00b      	b.n	8004cfc <HAL_RCC_OscConfig+0x398>
 8004ce4:	4ba7      	ldr	r3, [pc, #668]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004ce6:	6a1a      	ldr	r2, [r3, #32]
 8004ce8:	4ba6      	ldr	r3, [pc, #664]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004cea:	2101      	movs	r1, #1
 8004cec:	438a      	bics	r2, r1
 8004cee:	621a      	str	r2, [r3, #32]
 8004cf0:	4ba4      	ldr	r3, [pc, #656]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004cf2:	6a1a      	ldr	r2, [r3, #32]
 8004cf4:	4ba3      	ldr	r3, [pc, #652]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004cf6:	2104      	movs	r1, #4
 8004cf8:	438a      	bics	r2, r1
 8004cfa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d014      	beq.n	8004d2e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d04:	f7fe fcf6 	bl	80036f4 <HAL_GetTick>
 8004d08:	0003      	movs	r3, r0
 8004d0a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d0c:	e009      	b.n	8004d22 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d0e:	f7fe fcf1 	bl	80036f4 <HAL_GetTick>
 8004d12:	0002      	movs	r2, r0
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	4a9b      	ldr	r2, [pc, #620]	; (8004f88 <HAL_RCC_OscConfig+0x624>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e12b      	b.n	8004f7a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d22:	4b98      	ldr	r3, [pc, #608]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	2202      	movs	r2, #2
 8004d28:	4013      	ands	r3, r2
 8004d2a:	d0f0      	beq.n	8004d0e <HAL_RCC_OscConfig+0x3aa>
 8004d2c:	e013      	b.n	8004d56 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d2e:	f7fe fce1 	bl	80036f4 <HAL_GetTick>
 8004d32:	0003      	movs	r3, r0
 8004d34:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d36:	e009      	b.n	8004d4c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d38:	f7fe fcdc 	bl	80036f4 <HAL_GetTick>
 8004d3c:	0002      	movs	r2, r0
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	4a91      	ldr	r2, [pc, #580]	; (8004f88 <HAL_RCC_OscConfig+0x624>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e116      	b.n	8004f7a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d4c:	4b8d      	ldr	r3, [pc, #564]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	2202      	movs	r2, #2
 8004d52:	4013      	ands	r3, r2
 8004d54:	d1f0      	bne.n	8004d38 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004d56:	231f      	movs	r3, #31
 8004d58:	18fb      	adds	r3, r7, r3
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d105      	bne.n	8004d6c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d60:	4b88      	ldr	r3, [pc, #544]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004d62:	69da      	ldr	r2, [r3, #28]
 8004d64:	4b87      	ldr	r3, [pc, #540]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004d66:	4989      	ldr	r1, [pc, #548]	; (8004f8c <HAL_RCC_OscConfig+0x628>)
 8004d68:	400a      	ands	r2, r1
 8004d6a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2210      	movs	r2, #16
 8004d72:	4013      	ands	r3, r2
 8004d74:	d063      	beq.n	8004e3e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d12a      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004d7e:	4b81      	ldr	r3, [pc, #516]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004d80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d82:	4b80      	ldr	r3, [pc, #512]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004d84:	2104      	movs	r1, #4
 8004d86:	430a      	orrs	r2, r1
 8004d88:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004d8a:	4b7e      	ldr	r3, [pc, #504]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004d8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d8e:	4b7d      	ldr	r3, [pc, #500]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004d90:	2101      	movs	r1, #1
 8004d92:	430a      	orrs	r2, r1
 8004d94:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d96:	f7fe fcad 	bl	80036f4 <HAL_GetTick>
 8004d9a:	0003      	movs	r3, r0
 8004d9c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004da0:	f7fe fca8 	bl	80036f4 <HAL_GetTick>
 8004da4:	0002      	movs	r2, r0
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e0e3      	b.n	8004f7a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004db2:	4b74      	ldr	r3, [pc, #464]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db6:	2202      	movs	r2, #2
 8004db8:	4013      	ands	r3, r2
 8004dba:	d0f1      	beq.n	8004da0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004dbc:	4b71      	ldr	r3, [pc, #452]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc0:	22f8      	movs	r2, #248	; 0xf8
 8004dc2:	4393      	bics	r3, r2
 8004dc4:	0019      	movs	r1, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	00da      	lsls	r2, r3, #3
 8004dcc:	4b6d      	ldr	r3, [pc, #436]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	635a      	str	r2, [r3, #52]	; 0x34
 8004dd2:	e034      	b.n	8004e3e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	3305      	adds	r3, #5
 8004dda:	d111      	bne.n	8004e00 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004ddc:	4b69      	ldr	r3, [pc, #420]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004dde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004de0:	4b68      	ldr	r3, [pc, #416]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004de2:	2104      	movs	r1, #4
 8004de4:	438a      	bics	r2, r1
 8004de6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004de8:	4b66      	ldr	r3, [pc, #408]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dec:	22f8      	movs	r2, #248	; 0xf8
 8004dee:	4393      	bics	r3, r2
 8004df0:	0019      	movs	r1, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	00da      	lsls	r2, r3, #3
 8004df8:	4b62      	ldr	r3, [pc, #392]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	635a      	str	r2, [r3, #52]	; 0x34
 8004dfe:	e01e      	b.n	8004e3e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004e00:	4b60      	ldr	r3, [pc, #384]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004e02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e04:	4b5f      	ldr	r3, [pc, #380]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004e06:	2104      	movs	r1, #4
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004e0c:	4b5d      	ldr	r3, [pc, #372]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004e0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e10:	4b5c      	ldr	r3, [pc, #368]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004e12:	2101      	movs	r1, #1
 8004e14:	438a      	bics	r2, r1
 8004e16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e18:	f7fe fc6c 	bl	80036f4 <HAL_GetTick>
 8004e1c:	0003      	movs	r3, r0
 8004e1e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004e20:	e008      	b.n	8004e34 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004e22:	f7fe fc67 	bl	80036f4 <HAL_GetTick>
 8004e26:	0002      	movs	r2, r0
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e0a2      	b.n	8004f7a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004e34:	4b53      	ldr	r3, [pc, #332]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e38:	2202      	movs	r2, #2
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	d1f1      	bne.n	8004e22 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d100      	bne.n	8004e48 <HAL_RCC_OscConfig+0x4e4>
 8004e46:	e097      	b.n	8004f78 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e48:	4b4e      	ldr	r3, [pc, #312]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	220c      	movs	r2, #12
 8004e4e:	4013      	ands	r3, r2
 8004e50:	2b08      	cmp	r3, #8
 8004e52:	d100      	bne.n	8004e56 <HAL_RCC_OscConfig+0x4f2>
 8004e54:	e06b      	b.n	8004f2e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d14c      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e5e:	4b49      	ldr	r3, [pc, #292]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	4b48      	ldr	r3, [pc, #288]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004e64:	494a      	ldr	r1, [pc, #296]	; (8004f90 <HAL_RCC_OscConfig+0x62c>)
 8004e66:	400a      	ands	r2, r1
 8004e68:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e6a:	f7fe fc43 	bl	80036f4 <HAL_GetTick>
 8004e6e:	0003      	movs	r3, r0
 8004e70:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e72:	e008      	b.n	8004e86 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e74:	f7fe fc3e 	bl	80036f4 <HAL_GetTick>
 8004e78:	0002      	movs	r2, r0
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d901      	bls.n	8004e86 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e079      	b.n	8004f7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e86:	4b3f      	ldr	r3, [pc, #252]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	2380      	movs	r3, #128	; 0x80
 8004e8c:	049b      	lsls	r3, r3, #18
 8004e8e:	4013      	ands	r3, r2
 8004e90:	d1f0      	bne.n	8004e74 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e92:	4b3c      	ldr	r3, [pc, #240]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e96:	220f      	movs	r2, #15
 8004e98:	4393      	bics	r3, r2
 8004e9a:	0019      	movs	r1, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea0:	4b38      	ldr	r3, [pc, #224]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ea6:	4b37      	ldr	r3, [pc, #220]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	4a3a      	ldr	r2, [pc, #232]	; (8004f94 <HAL_RCC_OscConfig+0x630>)
 8004eac:	4013      	ands	r3, r2
 8004eae:	0019      	movs	r1, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	431a      	orrs	r2, r3
 8004eba:	4b32      	ldr	r3, [pc, #200]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ec0:	4b30      	ldr	r3, [pc, #192]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	4b2f      	ldr	r3, [pc, #188]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004ec6:	2180      	movs	r1, #128	; 0x80
 8004ec8:	0449      	lsls	r1, r1, #17
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ece:	f7fe fc11 	bl	80036f4 <HAL_GetTick>
 8004ed2:	0003      	movs	r3, r0
 8004ed4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ed6:	e008      	b.n	8004eea <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ed8:	f7fe fc0c 	bl	80036f4 <HAL_GetTick>
 8004edc:	0002      	movs	r2, r0
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e047      	b.n	8004f7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004eea:	4b26      	ldr	r3, [pc, #152]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	2380      	movs	r3, #128	; 0x80
 8004ef0:	049b      	lsls	r3, r3, #18
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	d0f0      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x574>
 8004ef6:	e03f      	b.n	8004f78 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ef8:	4b22      	ldr	r3, [pc, #136]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	4b21      	ldr	r3, [pc, #132]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004efe:	4924      	ldr	r1, [pc, #144]	; (8004f90 <HAL_RCC_OscConfig+0x62c>)
 8004f00:	400a      	ands	r2, r1
 8004f02:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f04:	f7fe fbf6 	bl	80036f4 <HAL_GetTick>
 8004f08:	0003      	movs	r3, r0
 8004f0a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f0c:	e008      	b.n	8004f20 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f0e:	f7fe fbf1 	bl	80036f4 <HAL_GetTick>
 8004f12:	0002      	movs	r2, r0
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e02c      	b.n	8004f7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f20:	4b18      	ldr	r3, [pc, #96]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	2380      	movs	r3, #128	; 0x80
 8004f26:	049b      	lsls	r3, r3, #18
 8004f28:	4013      	ands	r3, r2
 8004f2a:	d1f0      	bne.n	8004f0e <HAL_RCC_OscConfig+0x5aa>
 8004f2c:	e024      	b.n	8004f78 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d101      	bne.n	8004f3a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e01f      	b.n	8004f7a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004f3a:	4b12      	ldr	r3, [pc, #72]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004f40:	4b10      	ldr	r3, [pc, #64]	; (8004f84 <HAL_RCC_OscConfig+0x620>)
 8004f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f44:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	2380      	movs	r3, #128	; 0x80
 8004f4a:	025b      	lsls	r3, r3, #9
 8004f4c:	401a      	ands	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d10e      	bne.n	8004f74 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	220f      	movs	r2, #15
 8004f5a:	401a      	ands	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d107      	bne.n	8004f74 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	23f0      	movs	r3, #240	; 0xf0
 8004f68:	039b      	lsls	r3, r3, #14
 8004f6a:	401a      	ands	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d001      	beq.n	8004f78 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e000      	b.n	8004f7a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	0018      	movs	r0, r3
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	b008      	add	sp, #32
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	46c0      	nop			; (mov r8, r8)
 8004f84:	40021000 	.word	0x40021000
 8004f88:	00001388 	.word	0x00001388
 8004f8c:	efffffff 	.word	0xefffffff
 8004f90:	feffffff 	.word	0xfeffffff
 8004f94:	ffc2ffff 	.word	0xffc2ffff

08004f98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d101      	bne.n	8004fac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e0b3      	b.n	8005114 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fac:	4b5b      	ldr	r3, [pc, #364]	; (800511c <HAL_RCC_ClockConfig+0x184>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d911      	bls.n	8004fde <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fba:	4b58      	ldr	r3, [pc, #352]	; (800511c <HAL_RCC_ClockConfig+0x184>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	4393      	bics	r3, r2
 8004fc2:	0019      	movs	r1, r3
 8004fc4:	4b55      	ldr	r3, [pc, #340]	; (800511c <HAL_RCC_ClockConfig+0x184>)
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fcc:	4b53      	ldr	r3, [pc, #332]	; (800511c <HAL_RCC_ClockConfig+0x184>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	683a      	ldr	r2, [r7, #0]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d001      	beq.n	8004fde <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e09a      	b.n	8005114 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	d015      	beq.n	8005014 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2204      	movs	r2, #4
 8004fee:	4013      	ands	r3, r2
 8004ff0:	d006      	beq.n	8005000 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004ff2:	4b4b      	ldr	r3, [pc, #300]	; (8005120 <HAL_RCC_ClockConfig+0x188>)
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	4b4a      	ldr	r3, [pc, #296]	; (8005120 <HAL_RCC_ClockConfig+0x188>)
 8004ff8:	21e0      	movs	r1, #224	; 0xe0
 8004ffa:	00c9      	lsls	r1, r1, #3
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005000:	4b47      	ldr	r3, [pc, #284]	; (8005120 <HAL_RCC_ClockConfig+0x188>)
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	22f0      	movs	r2, #240	; 0xf0
 8005006:	4393      	bics	r3, r2
 8005008:	0019      	movs	r1, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689a      	ldr	r2, [r3, #8]
 800500e:	4b44      	ldr	r3, [pc, #272]	; (8005120 <HAL_RCC_ClockConfig+0x188>)
 8005010:	430a      	orrs	r2, r1
 8005012:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2201      	movs	r2, #1
 800501a:	4013      	ands	r3, r2
 800501c:	d040      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d107      	bne.n	8005036 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005026:	4b3e      	ldr	r3, [pc, #248]	; (8005120 <HAL_RCC_ClockConfig+0x188>)
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	2380      	movs	r3, #128	; 0x80
 800502c:	029b      	lsls	r3, r3, #10
 800502e:	4013      	ands	r3, r2
 8005030:	d114      	bne.n	800505c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e06e      	b.n	8005114 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	2b02      	cmp	r3, #2
 800503c:	d107      	bne.n	800504e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800503e:	4b38      	ldr	r3, [pc, #224]	; (8005120 <HAL_RCC_ClockConfig+0x188>)
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	2380      	movs	r3, #128	; 0x80
 8005044:	049b      	lsls	r3, r3, #18
 8005046:	4013      	ands	r3, r2
 8005048:	d108      	bne.n	800505c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e062      	b.n	8005114 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800504e:	4b34      	ldr	r3, [pc, #208]	; (8005120 <HAL_RCC_ClockConfig+0x188>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2202      	movs	r2, #2
 8005054:	4013      	ands	r3, r2
 8005056:	d101      	bne.n	800505c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e05b      	b.n	8005114 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800505c:	4b30      	ldr	r3, [pc, #192]	; (8005120 <HAL_RCC_ClockConfig+0x188>)
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	2203      	movs	r2, #3
 8005062:	4393      	bics	r3, r2
 8005064:	0019      	movs	r1, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	4b2d      	ldr	r3, [pc, #180]	; (8005120 <HAL_RCC_ClockConfig+0x188>)
 800506c:	430a      	orrs	r2, r1
 800506e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005070:	f7fe fb40 	bl	80036f4 <HAL_GetTick>
 8005074:	0003      	movs	r3, r0
 8005076:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005078:	e009      	b.n	800508e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800507a:	f7fe fb3b 	bl	80036f4 <HAL_GetTick>
 800507e:	0002      	movs	r2, r0
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	4a27      	ldr	r2, [pc, #156]	; (8005124 <HAL_RCC_ClockConfig+0x18c>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d901      	bls.n	800508e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e042      	b.n	8005114 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800508e:	4b24      	ldr	r3, [pc, #144]	; (8005120 <HAL_RCC_ClockConfig+0x188>)
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	220c      	movs	r2, #12
 8005094:	401a      	ands	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	429a      	cmp	r2, r3
 800509e:	d1ec      	bne.n	800507a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050a0:	4b1e      	ldr	r3, [pc, #120]	; (800511c <HAL_RCC_ClockConfig+0x184>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2201      	movs	r2, #1
 80050a6:	4013      	ands	r3, r2
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d211      	bcs.n	80050d2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ae:	4b1b      	ldr	r3, [pc, #108]	; (800511c <HAL_RCC_ClockConfig+0x184>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2201      	movs	r2, #1
 80050b4:	4393      	bics	r3, r2
 80050b6:	0019      	movs	r1, r3
 80050b8:	4b18      	ldr	r3, [pc, #96]	; (800511c <HAL_RCC_ClockConfig+0x184>)
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	430a      	orrs	r2, r1
 80050be:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050c0:	4b16      	ldr	r3, [pc, #88]	; (800511c <HAL_RCC_ClockConfig+0x184>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2201      	movs	r2, #1
 80050c6:	4013      	ands	r3, r2
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d001      	beq.n	80050d2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e020      	b.n	8005114 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2204      	movs	r2, #4
 80050d8:	4013      	ands	r3, r2
 80050da:	d009      	beq.n	80050f0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80050dc:	4b10      	ldr	r3, [pc, #64]	; (8005120 <HAL_RCC_ClockConfig+0x188>)
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	4a11      	ldr	r2, [pc, #68]	; (8005128 <HAL_RCC_ClockConfig+0x190>)
 80050e2:	4013      	ands	r3, r2
 80050e4:	0019      	movs	r1, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68da      	ldr	r2, [r3, #12]
 80050ea:	4b0d      	ldr	r3, [pc, #52]	; (8005120 <HAL_RCC_ClockConfig+0x188>)
 80050ec:	430a      	orrs	r2, r1
 80050ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80050f0:	f000 f82e 	bl	8005150 <HAL_RCC_GetSysClockFreq>
 80050f4:	0001      	movs	r1, r0
 80050f6:	4b0a      	ldr	r3, [pc, #40]	; (8005120 <HAL_RCC_ClockConfig+0x188>)
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	091b      	lsrs	r3, r3, #4
 80050fc:	220f      	movs	r2, #15
 80050fe:	4013      	ands	r3, r2
 8005100:	4a0a      	ldr	r2, [pc, #40]	; (800512c <HAL_RCC_ClockConfig+0x194>)
 8005102:	5cd3      	ldrb	r3, [r2, r3]
 8005104:	000a      	movs	r2, r1
 8005106:	40da      	lsrs	r2, r3
 8005108:	4b09      	ldr	r3, [pc, #36]	; (8005130 <HAL_RCC_ClockConfig+0x198>)
 800510a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800510c:	2000      	movs	r0, #0
 800510e:	f7fe faab 	bl	8003668 <HAL_InitTick>
  
  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	0018      	movs	r0, r3
 8005116:	46bd      	mov	sp, r7
 8005118:	b004      	add	sp, #16
 800511a:	bd80      	pop	{r7, pc}
 800511c:	40022000 	.word	0x40022000
 8005120:	40021000 	.word	0x40021000
 8005124:	00001388 	.word	0x00001388
 8005128:	fffff8ff 	.word	0xfffff8ff
 800512c:	08006b88 	.word	0x08006b88
 8005130:	20000000 	.word	0x20000000

08005134 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M0 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8005138:	4b04      	ldr	r3, [pc, #16]	; (800514c <HAL_RCC_EnableCSS+0x18>)
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	4b03      	ldr	r3, [pc, #12]	; (800514c <HAL_RCC_EnableCSS+0x18>)
 800513e:	2180      	movs	r1, #128	; 0x80
 8005140:	0309      	lsls	r1, r1, #12
 8005142:	430a      	orrs	r2, r1
 8005144:	601a      	str	r2, [r3, #0]
}
 8005146:	46c0      	nop			; (mov r8, r8)
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	40021000 	.word	0x40021000

08005150 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005150:	b590      	push	{r4, r7, lr}
 8005152:	b08f      	sub	sp, #60	; 0x3c
 8005154:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8005156:	2314      	movs	r3, #20
 8005158:	18fb      	adds	r3, r7, r3
 800515a:	4a2b      	ldr	r2, [pc, #172]	; (8005208 <HAL_RCC_GetSysClockFreq+0xb8>)
 800515c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800515e:	c313      	stmia	r3!, {r0, r1, r4}
 8005160:	6812      	ldr	r2, [r2, #0]
 8005162:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005164:	1d3b      	adds	r3, r7, #4
 8005166:	4a29      	ldr	r2, [pc, #164]	; (800520c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005168:	ca13      	ldmia	r2!, {r0, r1, r4}
 800516a:	c313      	stmia	r3!, {r0, r1, r4}
 800516c:	6812      	ldr	r2, [r2, #0]
 800516e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005170:	2300      	movs	r3, #0
 8005172:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005174:	2300      	movs	r3, #0
 8005176:	62bb      	str	r3, [r7, #40]	; 0x28
 8005178:	2300      	movs	r3, #0
 800517a:	637b      	str	r3, [r7, #52]	; 0x34
 800517c:	2300      	movs	r3, #0
 800517e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005180:	2300      	movs	r3, #0
 8005182:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005184:	4b22      	ldr	r3, [pc, #136]	; (8005210 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800518a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518c:	220c      	movs	r2, #12
 800518e:	4013      	ands	r3, r2
 8005190:	2b04      	cmp	r3, #4
 8005192:	d002      	beq.n	800519a <HAL_RCC_GetSysClockFreq+0x4a>
 8005194:	2b08      	cmp	r3, #8
 8005196:	d003      	beq.n	80051a0 <HAL_RCC_GetSysClockFreq+0x50>
 8005198:	e02d      	b.n	80051f6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800519a:	4b1e      	ldr	r3, [pc, #120]	; (8005214 <HAL_RCC_GetSysClockFreq+0xc4>)
 800519c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800519e:	e02d      	b.n	80051fc <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80051a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a2:	0c9b      	lsrs	r3, r3, #18
 80051a4:	220f      	movs	r2, #15
 80051a6:	4013      	ands	r3, r2
 80051a8:	2214      	movs	r2, #20
 80051aa:	18ba      	adds	r2, r7, r2
 80051ac:	5cd3      	ldrb	r3, [r2, r3]
 80051ae:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80051b0:	4b17      	ldr	r3, [pc, #92]	; (8005210 <HAL_RCC_GetSysClockFreq+0xc0>)
 80051b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b4:	220f      	movs	r2, #15
 80051b6:	4013      	ands	r3, r2
 80051b8:	1d3a      	adds	r2, r7, #4
 80051ba:	5cd3      	ldrb	r3, [r2, r3]
 80051bc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80051be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051c0:	2380      	movs	r3, #128	; 0x80
 80051c2:	025b      	lsls	r3, r3, #9
 80051c4:	4013      	ands	r3, r2
 80051c6:	d009      	beq.n	80051dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80051c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051ca:	4812      	ldr	r0, [pc, #72]	; (8005214 <HAL_RCC_GetSysClockFreq+0xc4>)
 80051cc:	f7fa ff9c 	bl	8000108 <__udivsi3>
 80051d0:	0003      	movs	r3, r0
 80051d2:	001a      	movs	r2, r3
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	4353      	muls	r3, r2
 80051d8:	637b      	str	r3, [r7, #52]	; 0x34
 80051da:	e009      	b.n	80051f0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80051dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051de:	000a      	movs	r2, r1
 80051e0:	0152      	lsls	r2, r2, #5
 80051e2:	1a52      	subs	r2, r2, r1
 80051e4:	0193      	lsls	r3, r2, #6
 80051e6:	1a9b      	subs	r3, r3, r2
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	185b      	adds	r3, r3, r1
 80051ec:	021b      	lsls	r3, r3, #8
 80051ee:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80051f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80051f4:	e002      	b.n	80051fc <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80051f6:	4b07      	ldr	r3, [pc, #28]	; (8005214 <HAL_RCC_GetSysClockFreq+0xc4>)
 80051f8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80051fa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80051fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80051fe:	0018      	movs	r0, r3
 8005200:	46bd      	mov	sp, r7
 8005202:	b00f      	add	sp, #60	; 0x3c
 8005204:	bd90      	pop	{r4, r7, pc}
 8005206:	46c0      	nop			; (mov r8, r8)
 8005208:	08006a68 	.word	0x08006a68
 800520c:	08006a78 	.word	0x08006a78
 8005210:	40021000 	.word	0x40021000
 8005214:	007a1200 	.word	0x007a1200

08005218 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800521c:	4b06      	ldr	r3, [pc, #24]	; (8005238 <HAL_RCC_NMI_IRQHandler+0x20>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	2280      	movs	r2, #128	; 0x80
 8005222:	4013      	ands	r3, r2
 8005224:	2b80      	cmp	r3, #128	; 0x80
 8005226:	d104      	bne.n	8005232 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005228:	f000 f80a 	bl	8005240 <HAL_RCC_CSSCallback>
    
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800522c:	4b03      	ldr	r3, [pc, #12]	; (800523c <HAL_RCC_NMI_IRQHandler+0x24>)
 800522e:	2280      	movs	r2, #128	; 0x80
 8005230:	701a      	strb	r2, [r3, #0]
  }
}
 8005232:	46c0      	nop			; (mov r8, r8)
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	40021000 	.word	0x40021000
 800523c:	4002100a 	.word	0x4002100a

08005240 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 8005244:	46c0      	nop			; (mov r8, r8)
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
	...

0800524c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005258:	2300      	movs	r3, #0
 800525a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	2380      	movs	r3, #128	; 0x80
 8005262:	025b      	lsls	r3, r3, #9
 8005264:	4013      	ands	r3, r2
 8005266:	d100      	bne.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005268:	e08e      	b.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800526a:	2017      	movs	r0, #23
 800526c:	183b      	adds	r3, r7, r0
 800526e:	2200      	movs	r2, #0
 8005270:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005272:	4b5f      	ldr	r3, [pc, #380]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005274:	69da      	ldr	r2, [r3, #28]
 8005276:	2380      	movs	r3, #128	; 0x80
 8005278:	055b      	lsls	r3, r3, #21
 800527a:	4013      	ands	r3, r2
 800527c:	d110      	bne.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800527e:	4b5c      	ldr	r3, [pc, #368]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005280:	69da      	ldr	r2, [r3, #28]
 8005282:	4b5b      	ldr	r3, [pc, #364]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005284:	2180      	movs	r1, #128	; 0x80
 8005286:	0549      	lsls	r1, r1, #21
 8005288:	430a      	orrs	r2, r1
 800528a:	61da      	str	r2, [r3, #28]
 800528c:	4b58      	ldr	r3, [pc, #352]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800528e:	69da      	ldr	r2, [r3, #28]
 8005290:	2380      	movs	r3, #128	; 0x80
 8005292:	055b      	lsls	r3, r3, #21
 8005294:	4013      	ands	r3, r2
 8005296:	60bb      	str	r3, [r7, #8]
 8005298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800529a:	183b      	adds	r3, r7, r0
 800529c:	2201      	movs	r2, #1
 800529e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a0:	4b54      	ldr	r3, [pc, #336]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	2380      	movs	r3, #128	; 0x80
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	4013      	ands	r3, r2
 80052aa:	d11a      	bne.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052ac:	4b51      	ldr	r3, [pc, #324]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	4b50      	ldr	r3, [pc, #320]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80052b2:	2180      	movs	r1, #128	; 0x80
 80052b4:	0049      	lsls	r1, r1, #1
 80052b6:	430a      	orrs	r2, r1
 80052b8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052ba:	f7fe fa1b 	bl	80036f4 <HAL_GetTick>
 80052be:	0003      	movs	r3, r0
 80052c0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052c2:	e008      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052c4:	f7fe fa16 	bl	80036f4 <HAL_GetTick>
 80052c8:	0002      	movs	r2, r0
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b64      	cmp	r3, #100	; 0x64
 80052d0:	d901      	bls.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e087      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052d6:	4b47      	ldr	r3, [pc, #284]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	2380      	movs	r3, #128	; 0x80
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	4013      	ands	r3, r2
 80052e0:	d0f0      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052e2:	4b43      	ldr	r3, [pc, #268]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80052e4:	6a1a      	ldr	r2, [r3, #32]
 80052e6:	23c0      	movs	r3, #192	; 0xc0
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4013      	ands	r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d034      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	23c0      	movs	r3, #192	; 0xc0
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4013      	ands	r3, r2
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	429a      	cmp	r2, r3
 8005302:	d02c      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005304:	4b3a      	ldr	r3, [pc, #232]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005306:	6a1b      	ldr	r3, [r3, #32]
 8005308:	4a3b      	ldr	r2, [pc, #236]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800530a:	4013      	ands	r3, r2
 800530c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800530e:	4b38      	ldr	r3, [pc, #224]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005310:	6a1a      	ldr	r2, [r3, #32]
 8005312:	4b37      	ldr	r3, [pc, #220]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005314:	2180      	movs	r1, #128	; 0x80
 8005316:	0249      	lsls	r1, r1, #9
 8005318:	430a      	orrs	r2, r1
 800531a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800531c:	4b34      	ldr	r3, [pc, #208]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800531e:	6a1a      	ldr	r2, [r3, #32]
 8005320:	4b33      	ldr	r3, [pc, #204]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005322:	4936      	ldr	r1, [pc, #216]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005324:	400a      	ands	r2, r1
 8005326:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005328:	4b31      	ldr	r3, [pc, #196]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2201      	movs	r2, #1
 8005332:	4013      	ands	r3, r2
 8005334:	d013      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005336:	f7fe f9dd 	bl	80036f4 <HAL_GetTick>
 800533a:	0003      	movs	r3, r0
 800533c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800533e:	e009      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005340:	f7fe f9d8 	bl	80036f4 <HAL_GetTick>
 8005344:	0002      	movs	r2, r0
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	4a2d      	ldr	r2, [pc, #180]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d901      	bls.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e048      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005354:	4b26      	ldr	r3, [pc, #152]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	2202      	movs	r2, #2
 800535a:	4013      	ands	r3, r2
 800535c:	d0f0      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800535e:	4b24      	ldr	r3, [pc, #144]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	4a25      	ldr	r2, [pc, #148]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005364:	4013      	ands	r3, r2
 8005366:	0019      	movs	r1, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	4b20      	ldr	r3, [pc, #128]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800536e:	430a      	orrs	r2, r1
 8005370:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005372:	2317      	movs	r3, #23
 8005374:	18fb      	adds	r3, r7, r3
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d105      	bne.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800537c:	4b1c      	ldr	r3, [pc, #112]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800537e:	69da      	ldr	r2, [r3, #28]
 8005380:	4b1b      	ldr	r3, [pc, #108]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005382:	4920      	ldr	r1, [pc, #128]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005384:	400a      	ands	r2, r1
 8005386:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2201      	movs	r2, #1
 800538e:	4013      	ands	r3, r2
 8005390:	d009      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005392:	4b17      	ldr	r3, [pc, #92]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005396:	2203      	movs	r2, #3
 8005398:	4393      	bics	r3, r2
 800539a:	0019      	movs	r1, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689a      	ldr	r2, [r3, #8]
 80053a0:	4b13      	ldr	r3, [pc, #76]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80053a2:	430a      	orrs	r2, r1
 80053a4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2220      	movs	r2, #32
 80053ac:	4013      	ands	r3, r2
 80053ae:	d009      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053b0:	4b0f      	ldr	r3, [pc, #60]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80053b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b4:	2210      	movs	r2, #16
 80053b6:	4393      	bics	r3, r2
 80053b8:	0019      	movs	r1, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68da      	ldr	r2, [r3, #12]
 80053be:	4b0c      	ldr	r3, [pc, #48]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80053c0:	430a      	orrs	r2, r1
 80053c2:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	2380      	movs	r3, #128	; 0x80
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	4013      	ands	r3, r2
 80053ce:	d009      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80053d0:	4b07      	ldr	r3, [pc, #28]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80053d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d4:	2240      	movs	r2, #64	; 0x40
 80053d6:	4393      	bics	r3, r2
 80053d8:	0019      	movs	r1, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	691a      	ldr	r2, [r3, #16]
 80053de:	4b04      	ldr	r3, [pc, #16]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80053e0:	430a      	orrs	r2, r1
 80053e2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	0018      	movs	r0, r3
 80053e8:	46bd      	mov	sp, r7
 80053ea:	b006      	add	sp, #24
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	46c0      	nop			; (mov r8, r8)
 80053f0:	40021000 	.word	0x40021000
 80053f4:	40007000 	.word	0x40007000
 80053f8:	fffffcff 	.word	0xfffffcff
 80053fc:	fffeffff 	.word	0xfffeffff
 8005400:	00001388 	.word	0x00001388
 8005404:	efffffff 	.word	0xefffffff

08005408 <__errno>:
 8005408:	4b01      	ldr	r3, [pc, #4]	; (8005410 <__errno+0x8>)
 800540a:	6818      	ldr	r0, [r3, #0]
 800540c:	4770      	bx	lr
 800540e:	46c0      	nop			; (mov r8, r8)
 8005410:	2000000c 	.word	0x2000000c

08005414 <__libc_init_array>:
 8005414:	b570      	push	{r4, r5, r6, lr}
 8005416:	2600      	movs	r6, #0
 8005418:	4d0c      	ldr	r5, [pc, #48]	; (800544c <__libc_init_array+0x38>)
 800541a:	4c0d      	ldr	r4, [pc, #52]	; (8005450 <__libc_init_array+0x3c>)
 800541c:	1b64      	subs	r4, r4, r5
 800541e:	10a4      	asrs	r4, r4, #2
 8005420:	42a6      	cmp	r6, r4
 8005422:	d109      	bne.n	8005438 <__libc_init_array+0x24>
 8005424:	2600      	movs	r6, #0
 8005426:	f001 fb13 	bl	8006a50 <_init>
 800542a:	4d0a      	ldr	r5, [pc, #40]	; (8005454 <__libc_init_array+0x40>)
 800542c:	4c0a      	ldr	r4, [pc, #40]	; (8005458 <__libc_init_array+0x44>)
 800542e:	1b64      	subs	r4, r4, r5
 8005430:	10a4      	asrs	r4, r4, #2
 8005432:	42a6      	cmp	r6, r4
 8005434:	d105      	bne.n	8005442 <__libc_init_array+0x2e>
 8005436:	bd70      	pop	{r4, r5, r6, pc}
 8005438:	00b3      	lsls	r3, r6, #2
 800543a:	58eb      	ldr	r3, [r5, r3]
 800543c:	4798      	blx	r3
 800543e:	3601      	adds	r6, #1
 8005440:	e7ee      	b.n	8005420 <__libc_init_array+0xc>
 8005442:	00b3      	lsls	r3, r6, #2
 8005444:	58eb      	ldr	r3, [r5, r3]
 8005446:	4798      	blx	r3
 8005448:	3601      	adds	r6, #1
 800544a:	e7f2      	b.n	8005432 <__libc_init_array+0x1e>
 800544c:	08006d78 	.word	0x08006d78
 8005450:	08006d78 	.word	0x08006d78
 8005454:	08006d78 	.word	0x08006d78
 8005458:	08006d7c 	.word	0x08006d7c

0800545c <memset>:
 800545c:	0003      	movs	r3, r0
 800545e:	1882      	adds	r2, r0, r2
 8005460:	4293      	cmp	r3, r2
 8005462:	d100      	bne.n	8005466 <memset+0xa>
 8005464:	4770      	bx	lr
 8005466:	7019      	strb	r1, [r3, #0]
 8005468:	3301      	adds	r3, #1
 800546a:	e7f9      	b.n	8005460 <memset+0x4>

0800546c <sin>:
 800546c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800546e:	4a20      	ldr	r2, [pc, #128]	; (80054f0 <sin+0x84>)
 8005470:	004b      	lsls	r3, r1, #1
 8005472:	b087      	sub	sp, #28
 8005474:	085b      	lsrs	r3, r3, #1
 8005476:	4293      	cmp	r3, r2
 8005478:	dc06      	bgt.n	8005488 <sin+0x1c>
 800547a:	2300      	movs	r3, #0
 800547c:	2200      	movs	r2, #0
 800547e:	9300      	str	r3, [sp, #0]
 8005480:	2300      	movs	r3, #0
 8005482:	f001 f931 	bl	80066e8 <__kernel_sin>
 8005486:	e006      	b.n	8005496 <sin+0x2a>
 8005488:	4a1a      	ldr	r2, [pc, #104]	; (80054f4 <sin+0x88>)
 800548a:	4293      	cmp	r3, r2
 800548c:	dd05      	ble.n	800549a <sin+0x2e>
 800548e:	0002      	movs	r2, r0
 8005490:	000b      	movs	r3, r1
 8005492:	f7fc fe69 	bl	8002168 <__aeabi_dsub>
 8005496:	b007      	add	sp, #28
 8005498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800549a:	aa02      	add	r2, sp, #8
 800549c:	f000 fa54 	bl	8005948 <__ieee754_rem_pio2>
 80054a0:	9c04      	ldr	r4, [sp, #16]
 80054a2:	9d05      	ldr	r5, [sp, #20]
 80054a4:	2303      	movs	r3, #3
 80054a6:	4003      	ands	r3, r0
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d00a      	beq.n	80054c2 <sin+0x56>
 80054ac:	9802      	ldr	r0, [sp, #8]
 80054ae:	9903      	ldr	r1, [sp, #12]
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d00d      	beq.n	80054d0 <sin+0x64>
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d115      	bne.n	80054e4 <sin+0x78>
 80054b8:	3301      	adds	r3, #1
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	0022      	movs	r2, r4
 80054be:	002b      	movs	r3, r5
 80054c0:	e7df      	b.n	8005482 <sin+0x16>
 80054c2:	0022      	movs	r2, r4
 80054c4:	9802      	ldr	r0, [sp, #8]
 80054c6:	9903      	ldr	r1, [sp, #12]
 80054c8:	002b      	movs	r3, r5
 80054ca:	f000 fce3 	bl	8005e94 <__kernel_cos>
 80054ce:	e7e2      	b.n	8005496 <sin+0x2a>
 80054d0:	2301      	movs	r3, #1
 80054d2:	0022      	movs	r2, r4
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	002b      	movs	r3, r5
 80054d8:	f001 f906 	bl	80066e8 <__kernel_sin>
 80054dc:	2380      	movs	r3, #128	; 0x80
 80054de:	061b      	lsls	r3, r3, #24
 80054e0:	18c9      	adds	r1, r1, r3
 80054e2:	e7d8      	b.n	8005496 <sin+0x2a>
 80054e4:	0022      	movs	r2, r4
 80054e6:	002b      	movs	r3, r5
 80054e8:	f000 fcd4 	bl	8005e94 <__kernel_cos>
 80054ec:	e7f6      	b.n	80054dc <sin+0x70>
 80054ee:	46c0      	nop			; (mov r8, r8)
 80054f0:	3fe921fb 	.word	0x3fe921fb
 80054f4:	7fefffff 	.word	0x7fefffff

080054f8 <asin>:
 80054f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054fa:	0004      	movs	r4, r0
 80054fc:	000d      	movs	r5, r1
 80054fe:	f000 f84b 	bl	8005598 <__ieee754_asin>
 8005502:	0022      	movs	r2, r4
 8005504:	0006      	movs	r6, r0
 8005506:	000f      	movs	r7, r1
 8005508:	002b      	movs	r3, r5
 800550a:	0020      	movs	r0, r4
 800550c:	0029      	movs	r1, r5
 800550e:	f7fd f9bd 	bl	800288c <__aeabi_dcmpun>
 8005512:	2800      	cmp	r0, #0
 8005514:	d112      	bne.n	800553c <asin+0x44>
 8005516:	0020      	movs	r0, r4
 8005518:	0029      	movs	r1, r5
 800551a:	f001 f991 	bl	8006840 <fabs>
 800551e:	2200      	movs	r2, #0
 8005520:	4b08      	ldr	r3, [pc, #32]	; (8005544 <asin+0x4c>)
 8005522:	f7fa ff91 	bl	8000448 <__aeabi_dcmpgt>
 8005526:	2800      	cmp	r0, #0
 8005528:	d008      	beq.n	800553c <asin+0x44>
 800552a:	f7ff ff6d 	bl	8005408 <__errno>
 800552e:	2321      	movs	r3, #33	; 0x21
 8005530:	6003      	str	r3, [r0, #0]
 8005532:	4805      	ldr	r0, [pc, #20]	; (8005548 <asin+0x50>)
 8005534:	f001 fa12 	bl	800695c <nan>
 8005538:	0006      	movs	r6, r0
 800553a:	000f      	movs	r7, r1
 800553c:	0030      	movs	r0, r6
 800553e:	0039      	movs	r1, r7
 8005540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005542:	46c0      	nop			; (mov r8, r8)
 8005544:	3ff00000 	.word	0x3ff00000
 8005548:	08006b98 	.word	0x08006b98

0800554c <sqrt>:
 800554c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800554e:	0004      	movs	r4, r0
 8005550:	000d      	movs	r5, r1
 8005552:	f000 fbe9 	bl	8005d28 <__ieee754_sqrt>
 8005556:	0022      	movs	r2, r4
 8005558:	0006      	movs	r6, r0
 800555a:	000f      	movs	r7, r1
 800555c:	002b      	movs	r3, r5
 800555e:	0020      	movs	r0, r4
 8005560:	0029      	movs	r1, r5
 8005562:	f7fd f993 	bl	800288c <__aeabi_dcmpun>
 8005566:	2800      	cmp	r0, #0
 8005568:	d113      	bne.n	8005592 <sqrt+0x46>
 800556a:	2200      	movs	r2, #0
 800556c:	2300      	movs	r3, #0
 800556e:	0020      	movs	r0, r4
 8005570:	0029      	movs	r1, r5
 8005572:	f7fa ff55 	bl	8000420 <__aeabi_dcmplt>
 8005576:	2800      	cmp	r0, #0
 8005578:	d00b      	beq.n	8005592 <sqrt+0x46>
 800557a:	f7ff ff45 	bl	8005408 <__errno>
 800557e:	2321      	movs	r3, #33	; 0x21
 8005580:	2200      	movs	r2, #0
 8005582:	6003      	str	r3, [r0, #0]
 8005584:	2300      	movs	r3, #0
 8005586:	0010      	movs	r0, r2
 8005588:	0019      	movs	r1, r3
 800558a:	f7fb ff7f 	bl	800148c <__aeabi_ddiv>
 800558e:	0006      	movs	r6, r0
 8005590:	000f      	movs	r7, r1
 8005592:	0030      	movs	r0, r6
 8005594:	0039      	movs	r1, r7
 8005596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005598 <__ieee754_asin>:
 8005598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800559a:	4bca      	ldr	r3, [pc, #808]	; (80058c4 <__ieee754_asin+0x32c>)
 800559c:	b08b      	sub	sp, #44	; 0x2c
 800559e:	004e      	lsls	r6, r1, #1
 80055a0:	0004      	movs	r4, r0
 80055a2:	000d      	movs	r5, r1
 80055a4:	9107      	str	r1, [sp, #28]
 80055a6:	0876      	lsrs	r6, r6, #1
 80055a8:	429e      	cmp	r6, r3
 80055aa:	dd24      	ble.n	80055f6 <__ieee754_asin+0x5e>
 80055ac:	4bc6      	ldr	r3, [pc, #792]	; (80058c8 <__ieee754_asin+0x330>)
 80055ae:	18f6      	adds	r6, r6, r3
 80055b0:	4306      	orrs	r6, r0
 80055b2:	d112      	bne.n	80055da <__ieee754_asin+0x42>
 80055b4:	4ac5      	ldr	r2, [pc, #788]	; (80058cc <__ieee754_asin+0x334>)
 80055b6:	4bc6      	ldr	r3, [pc, #792]	; (80058d0 <__ieee754_asin+0x338>)
 80055b8:	f7fc fb6a 	bl	8001c90 <__aeabi_dmul>
 80055bc:	4ac5      	ldr	r2, [pc, #788]	; (80058d4 <__ieee754_asin+0x33c>)
 80055be:	0006      	movs	r6, r0
 80055c0:	000f      	movs	r7, r1
 80055c2:	4bc5      	ldr	r3, [pc, #788]	; (80058d8 <__ieee754_asin+0x340>)
 80055c4:	0020      	movs	r0, r4
 80055c6:	0029      	movs	r1, r5
 80055c8:	f7fc fb62 	bl	8001c90 <__aeabi_dmul>
 80055cc:	0002      	movs	r2, r0
 80055ce:	000b      	movs	r3, r1
 80055d0:	0030      	movs	r0, r6
 80055d2:	0039      	movs	r1, r7
 80055d4:	f7fb fc1e 	bl	8000e14 <__aeabi_dadd>
 80055d8:	e007      	b.n	80055ea <__ieee754_asin+0x52>
 80055da:	0002      	movs	r2, r0
 80055dc:	000b      	movs	r3, r1
 80055de:	f7fc fdc3 	bl	8002168 <__aeabi_dsub>
 80055e2:	0002      	movs	r2, r0
 80055e4:	000b      	movs	r3, r1
 80055e6:	f7fb ff51 	bl	800148c <__aeabi_ddiv>
 80055ea:	0004      	movs	r4, r0
 80055ec:	000d      	movs	r5, r1
 80055ee:	0020      	movs	r0, r4
 80055f0:	0029      	movs	r1, r5
 80055f2:	b00b      	add	sp, #44	; 0x2c
 80055f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055f6:	4bb9      	ldr	r3, [pc, #740]	; (80058dc <__ieee754_asin+0x344>)
 80055f8:	429e      	cmp	r6, r3
 80055fa:	dc0e      	bgt.n	800561a <__ieee754_asin+0x82>
 80055fc:	23f9      	movs	r3, #249	; 0xf9
 80055fe:	059b      	lsls	r3, r3, #22
 8005600:	429e      	cmp	r6, r3
 8005602:	db00      	blt.n	8005606 <__ieee754_asin+0x6e>
 8005604:	e09c      	b.n	8005740 <__ieee754_asin+0x1a8>
 8005606:	4ab6      	ldr	r2, [pc, #728]	; (80058e0 <__ieee754_asin+0x348>)
 8005608:	4bb6      	ldr	r3, [pc, #728]	; (80058e4 <__ieee754_asin+0x34c>)
 800560a:	f7fb fc03 	bl	8000e14 <__aeabi_dadd>
 800560e:	2200      	movs	r2, #0
 8005610:	4bb5      	ldr	r3, [pc, #724]	; (80058e8 <__ieee754_asin+0x350>)
 8005612:	f7fa ff19 	bl	8000448 <__aeabi_dcmpgt>
 8005616:	2800      	cmp	r0, #0
 8005618:	d1e9      	bne.n	80055ee <__ieee754_asin+0x56>
 800561a:	0020      	movs	r0, r4
 800561c:	0029      	movs	r1, r5
 800561e:	f001 f90f 	bl	8006840 <fabs>
 8005622:	0002      	movs	r2, r0
 8005624:	000b      	movs	r3, r1
 8005626:	2000      	movs	r0, #0
 8005628:	49af      	ldr	r1, [pc, #700]	; (80058e8 <__ieee754_asin+0x350>)
 800562a:	f7fc fd9d 	bl	8002168 <__aeabi_dsub>
 800562e:	2200      	movs	r2, #0
 8005630:	4bae      	ldr	r3, [pc, #696]	; (80058ec <__ieee754_asin+0x354>)
 8005632:	f7fc fb2d 	bl	8001c90 <__aeabi_dmul>
 8005636:	0004      	movs	r4, r0
 8005638:	000d      	movs	r5, r1
 800563a:	4aad      	ldr	r2, [pc, #692]	; (80058f0 <__ieee754_asin+0x358>)
 800563c:	4bad      	ldr	r3, [pc, #692]	; (80058f4 <__ieee754_asin+0x35c>)
 800563e:	f7fc fb27 	bl	8001c90 <__aeabi_dmul>
 8005642:	4aad      	ldr	r2, [pc, #692]	; (80058f8 <__ieee754_asin+0x360>)
 8005644:	4bad      	ldr	r3, [pc, #692]	; (80058fc <__ieee754_asin+0x364>)
 8005646:	f7fb fbe5 	bl	8000e14 <__aeabi_dadd>
 800564a:	0022      	movs	r2, r4
 800564c:	002b      	movs	r3, r5
 800564e:	f7fc fb1f 	bl	8001c90 <__aeabi_dmul>
 8005652:	4aab      	ldr	r2, [pc, #684]	; (8005900 <__ieee754_asin+0x368>)
 8005654:	4bab      	ldr	r3, [pc, #684]	; (8005904 <__ieee754_asin+0x36c>)
 8005656:	f7fc fd87 	bl	8002168 <__aeabi_dsub>
 800565a:	0022      	movs	r2, r4
 800565c:	002b      	movs	r3, r5
 800565e:	f7fc fb17 	bl	8001c90 <__aeabi_dmul>
 8005662:	4aa9      	ldr	r2, [pc, #676]	; (8005908 <__ieee754_asin+0x370>)
 8005664:	4ba9      	ldr	r3, [pc, #676]	; (800590c <__ieee754_asin+0x374>)
 8005666:	f7fb fbd5 	bl	8000e14 <__aeabi_dadd>
 800566a:	0022      	movs	r2, r4
 800566c:	002b      	movs	r3, r5
 800566e:	f7fc fb0f 	bl	8001c90 <__aeabi_dmul>
 8005672:	4aa7      	ldr	r2, [pc, #668]	; (8005910 <__ieee754_asin+0x378>)
 8005674:	4ba7      	ldr	r3, [pc, #668]	; (8005914 <__ieee754_asin+0x37c>)
 8005676:	f7fc fd77 	bl	8002168 <__aeabi_dsub>
 800567a:	0022      	movs	r2, r4
 800567c:	002b      	movs	r3, r5
 800567e:	f7fc fb07 	bl	8001c90 <__aeabi_dmul>
 8005682:	4aa5      	ldr	r2, [pc, #660]	; (8005918 <__ieee754_asin+0x380>)
 8005684:	4ba5      	ldr	r3, [pc, #660]	; (800591c <__ieee754_asin+0x384>)
 8005686:	f7fb fbc5 	bl	8000e14 <__aeabi_dadd>
 800568a:	0022      	movs	r2, r4
 800568c:	002b      	movs	r3, r5
 800568e:	f7fc faff 	bl	8001c90 <__aeabi_dmul>
 8005692:	4aa3      	ldr	r2, [pc, #652]	; (8005920 <__ieee754_asin+0x388>)
 8005694:	9002      	str	r0, [sp, #8]
 8005696:	9103      	str	r1, [sp, #12]
 8005698:	4ba2      	ldr	r3, [pc, #648]	; (8005924 <__ieee754_asin+0x38c>)
 800569a:	0020      	movs	r0, r4
 800569c:	0029      	movs	r1, r5
 800569e:	f7fc faf7 	bl	8001c90 <__aeabi_dmul>
 80056a2:	4aa1      	ldr	r2, [pc, #644]	; (8005928 <__ieee754_asin+0x390>)
 80056a4:	4ba1      	ldr	r3, [pc, #644]	; (800592c <__ieee754_asin+0x394>)
 80056a6:	f7fc fd5f 	bl	8002168 <__aeabi_dsub>
 80056aa:	0022      	movs	r2, r4
 80056ac:	002b      	movs	r3, r5
 80056ae:	f7fc faef 	bl	8001c90 <__aeabi_dmul>
 80056b2:	4a9f      	ldr	r2, [pc, #636]	; (8005930 <__ieee754_asin+0x398>)
 80056b4:	4b9f      	ldr	r3, [pc, #636]	; (8005934 <__ieee754_asin+0x39c>)
 80056b6:	f7fb fbad 	bl	8000e14 <__aeabi_dadd>
 80056ba:	0022      	movs	r2, r4
 80056bc:	002b      	movs	r3, r5
 80056be:	f7fc fae7 	bl	8001c90 <__aeabi_dmul>
 80056c2:	4a9d      	ldr	r2, [pc, #628]	; (8005938 <__ieee754_asin+0x3a0>)
 80056c4:	4b9d      	ldr	r3, [pc, #628]	; (800593c <__ieee754_asin+0x3a4>)
 80056c6:	f7fc fd4f 	bl	8002168 <__aeabi_dsub>
 80056ca:	0022      	movs	r2, r4
 80056cc:	002b      	movs	r3, r5
 80056ce:	f7fc fadf 	bl	8001c90 <__aeabi_dmul>
 80056d2:	4b85      	ldr	r3, [pc, #532]	; (80058e8 <__ieee754_asin+0x350>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	f7fb fb9d 	bl	8000e14 <__aeabi_dadd>
 80056da:	9004      	str	r0, [sp, #16]
 80056dc:	9105      	str	r1, [sp, #20]
 80056de:	0020      	movs	r0, r4
 80056e0:	0029      	movs	r1, r5
 80056e2:	f000 fb21 	bl	8005d28 <__ieee754_sqrt>
 80056e6:	4b96      	ldr	r3, [pc, #600]	; (8005940 <__ieee754_asin+0x3a8>)
 80056e8:	9000      	str	r0, [sp, #0]
 80056ea:	9101      	str	r1, [sp, #4]
 80056ec:	429e      	cmp	r6, r3
 80056ee:	dc00      	bgt.n	80056f2 <__ieee754_asin+0x15a>
 80056f0:	e08b      	b.n	800580a <__ieee754_asin+0x272>
 80056f2:	9a04      	ldr	r2, [sp, #16]
 80056f4:	9b05      	ldr	r3, [sp, #20]
 80056f6:	9802      	ldr	r0, [sp, #8]
 80056f8:	9903      	ldr	r1, [sp, #12]
 80056fa:	f7fb fec7 	bl	800148c <__aeabi_ddiv>
 80056fe:	9a00      	ldr	r2, [sp, #0]
 8005700:	9b01      	ldr	r3, [sp, #4]
 8005702:	f7fc fac5 	bl	8001c90 <__aeabi_dmul>
 8005706:	9a00      	ldr	r2, [sp, #0]
 8005708:	9b01      	ldr	r3, [sp, #4]
 800570a:	f7fb fb83 	bl	8000e14 <__aeabi_dadd>
 800570e:	0002      	movs	r2, r0
 8005710:	000b      	movs	r3, r1
 8005712:	f7fb fb7f 	bl	8000e14 <__aeabi_dadd>
 8005716:	4a6f      	ldr	r2, [pc, #444]	; (80058d4 <__ieee754_asin+0x33c>)
 8005718:	4b6f      	ldr	r3, [pc, #444]	; (80058d8 <__ieee754_asin+0x340>)
 800571a:	f7fc fd25 	bl	8002168 <__aeabi_dsub>
 800571e:	0002      	movs	r2, r0
 8005720:	000b      	movs	r3, r1
 8005722:	486a      	ldr	r0, [pc, #424]	; (80058cc <__ieee754_asin+0x334>)
 8005724:	496a      	ldr	r1, [pc, #424]	; (80058d0 <__ieee754_asin+0x338>)
 8005726:	f7fc fd1f 	bl	8002168 <__aeabi_dsub>
 800572a:	9b07      	ldr	r3, [sp, #28]
 800572c:	0004      	movs	r4, r0
 800572e:	000d      	movs	r5, r1
 8005730:	2b00      	cmp	r3, #0
 8005732:	dd00      	ble.n	8005736 <__ieee754_asin+0x19e>
 8005734:	e75b      	b.n	80055ee <__ieee754_asin+0x56>
 8005736:	2180      	movs	r1, #128	; 0x80
 8005738:	0609      	lsls	r1, r1, #24
 800573a:	186b      	adds	r3, r5, r1
 800573c:	001d      	movs	r5, r3
 800573e:	e756      	b.n	80055ee <__ieee754_asin+0x56>
 8005740:	0002      	movs	r2, r0
 8005742:	000b      	movs	r3, r1
 8005744:	f7fc faa4 	bl	8001c90 <__aeabi_dmul>
 8005748:	0006      	movs	r6, r0
 800574a:	000f      	movs	r7, r1
 800574c:	4a68      	ldr	r2, [pc, #416]	; (80058f0 <__ieee754_asin+0x358>)
 800574e:	4b69      	ldr	r3, [pc, #420]	; (80058f4 <__ieee754_asin+0x35c>)
 8005750:	f7fc fa9e 	bl	8001c90 <__aeabi_dmul>
 8005754:	4a68      	ldr	r2, [pc, #416]	; (80058f8 <__ieee754_asin+0x360>)
 8005756:	4b69      	ldr	r3, [pc, #420]	; (80058fc <__ieee754_asin+0x364>)
 8005758:	f7fb fb5c 	bl	8000e14 <__aeabi_dadd>
 800575c:	0032      	movs	r2, r6
 800575e:	003b      	movs	r3, r7
 8005760:	f7fc fa96 	bl	8001c90 <__aeabi_dmul>
 8005764:	4a66      	ldr	r2, [pc, #408]	; (8005900 <__ieee754_asin+0x368>)
 8005766:	4b67      	ldr	r3, [pc, #412]	; (8005904 <__ieee754_asin+0x36c>)
 8005768:	f7fc fcfe 	bl	8002168 <__aeabi_dsub>
 800576c:	0032      	movs	r2, r6
 800576e:	003b      	movs	r3, r7
 8005770:	f7fc fa8e 	bl	8001c90 <__aeabi_dmul>
 8005774:	4a64      	ldr	r2, [pc, #400]	; (8005908 <__ieee754_asin+0x370>)
 8005776:	4b65      	ldr	r3, [pc, #404]	; (800590c <__ieee754_asin+0x374>)
 8005778:	f7fb fb4c 	bl	8000e14 <__aeabi_dadd>
 800577c:	0032      	movs	r2, r6
 800577e:	003b      	movs	r3, r7
 8005780:	f7fc fa86 	bl	8001c90 <__aeabi_dmul>
 8005784:	4a62      	ldr	r2, [pc, #392]	; (8005910 <__ieee754_asin+0x378>)
 8005786:	4b63      	ldr	r3, [pc, #396]	; (8005914 <__ieee754_asin+0x37c>)
 8005788:	f7fc fcee 	bl	8002168 <__aeabi_dsub>
 800578c:	0032      	movs	r2, r6
 800578e:	003b      	movs	r3, r7
 8005790:	f7fc fa7e 	bl	8001c90 <__aeabi_dmul>
 8005794:	4a60      	ldr	r2, [pc, #384]	; (8005918 <__ieee754_asin+0x380>)
 8005796:	4b61      	ldr	r3, [pc, #388]	; (800591c <__ieee754_asin+0x384>)
 8005798:	f7fb fb3c 	bl	8000e14 <__aeabi_dadd>
 800579c:	0032      	movs	r2, r6
 800579e:	003b      	movs	r3, r7
 80057a0:	f7fc fa76 	bl	8001c90 <__aeabi_dmul>
 80057a4:	4a5e      	ldr	r2, [pc, #376]	; (8005920 <__ieee754_asin+0x388>)
 80057a6:	9000      	str	r0, [sp, #0]
 80057a8:	9101      	str	r1, [sp, #4]
 80057aa:	4b5e      	ldr	r3, [pc, #376]	; (8005924 <__ieee754_asin+0x38c>)
 80057ac:	0030      	movs	r0, r6
 80057ae:	0039      	movs	r1, r7
 80057b0:	f7fc fa6e 	bl	8001c90 <__aeabi_dmul>
 80057b4:	4a5c      	ldr	r2, [pc, #368]	; (8005928 <__ieee754_asin+0x390>)
 80057b6:	4b5d      	ldr	r3, [pc, #372]	; (800592c <__ieee754_asin+0x394>)
 80057b8:	f7fc fcd6 	bl	8002168 <__aeabi_dsub>
 80057bc:	0032      	movs	r2, r6
 80057be:	003b      	movs	r3, r7
 80057c0:	f7fc fa66 	bl	8001c90 <__aeabi_dmul>
 80057c4:	4a5a      	ldr	r2, [pc, #360]	; (8005930 <__ieee754_asin+0x398>)
 80057c6:	4b5b      	ldr	r3, [pc, #364]	; (8005934 <__ieee754_asin+0x39c>)
 80057c8:	f7fb fb24 	bl	8000e14 <__aeabi_dadd>
 80057cc:	0032      	movs	r2, r6
 80057ce:	003b      	movs	r3, r7
 80057d0:	f7fc fa5e 	bl	8001c90 <__aeabi_dmul>
 80057d4:	4a58      	ldr	r2, [pc, #352]	; (8005938 <__ieee754_asin+0x3a0>)
 80057d6:	4b59      	ldr	r3, [pc, #356]	; (800593c <__ieee754_asin+0x3a4>)
 80057d8:	f7fc fcc6 	bl	8002168 <__aeabi_dsub>
 80057dc:	0032      	movs	r2, r6
 80057de:	003b      	movs	r3, r7
 80057e0:	f7fc fa56 	bl	8001c90 <__aeabi_dmul>
 80057e4:	2200      	movs	r2, #0
 80057e6:	4b40      	ldr	r3, [pc, #256]	; (80058e8 <__ieee754_asin+0x350>)
 80057e8:	f7fb fb14 	bl	8000e14 <__aeabi_dadd>
 80057ec:	0002      	movs	r2, r0
 80057ee:	000b      	movs	r3, r1
 80057f0:	9800      	ldr	r0, [sp, #0]
 80057f2:	9901      	ldr	r1, [sp, #4]
 80057f4:	f7fb fe4a 	bl	800148c <__aeabi_ddiv>
 80057f8:	0022      	movs	r2, r4
 80057fa:	002b      	movs	r3, r5
 80057fc:	f7fc fa48 	bl	8001c90 <__aeabi_dmul>
 8005800:	0002      	movs	r2, r0
 8005802:	000b      	movs	r3, r1
 8005804:	0020      	movs	r0, r4
 8005806:	0029      	movs	r1, r5
 8005808:	e6e4      	b.n	80055d4 <__ieee754_asin+0x3c>
 800580a:	9a00      	ldr	r2, [sp, #0]
 800580c:	9b01      	ldr	r3, [sp, #4]
 800580e:	0010      	movs	r0, r2
 8005810:	9e00      	ldr	r6, [sp, #0]
 8005812:	9f01      	ldr	r7, [sp, #4]
 8005814:	0019      	movs	r1, r3
 8005816:	f7fb fafd 	bl	8000e14 <__aeabi_dadd>
 800581a:	9a04      	ldr	r2, [sp, #16]
 800581c:	9b05      	ldr	r3, [sp, #20]
 800581e:	9008      	str	r0, [sp, #32]
 8005820:	9109      	str	r1, [sp, #36]	; 0x24
 8005822:	9802      	ldr	r0, [sp, #8]
 8005824:	9903      	ldr	r1, [sp, #12]
 8005826:	f7fb fe31 	bl	800148c <__aeabi_ddiv>
 800582a:	0002      	movs	r2, r0
 800582c:	000b      	movs	r3, r1
 800582e:	9808      	ldr	r0, [sp, #32]
 8005830:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005832:	f7fc fa2d 	bl	8001c90 <__aeabi_dmul>
 8005836:	2600      	movs	r6, #0
 8005838:	9002      	str	r0, [sp, #8]
 800583a:	9103      	str	r1, [sp, #12]
 800583c:	0032      	movs	r2, r6
 800583e:	003b      	movs	r3, r7
 8005840:	0030      	movs	r0, r6
 8005842:	0039      	movs	r1, r7
 8005844:	f7fc fa24 	bl	8001c90 <__aeabi_dmul>
 8005848:	0002      	movs	r2, r0
 800584a:	000b      	movs	r3, r1
 800584c:	0020      	movs	r0, r4
 800584e:	0029      	movs	r1, r5
 8005850:	f7fc fc8a 	bl	8002168 <__aeabi_dsub>
 8005854:	0032      	movs	r2, r6
 8005856:	0004      	movs	r4, r0
 8005858:	000d      	movs	r5, r1
 800585a:	9800      	ldr	r0, [sp, #0]
 800585c:	9901      	ldr	r1, [sp, #4]
 800585e:	003b      	movs	r3, r7
 8005860:	f7fb fad8 	bl	8000e14 <__aeabi_dadd>
 8005864:	0002      	movs	r2, r0
 8005866:	000b      	movs	r3, r1
 8005868:	0020      	movs	r0, r4
 800586a:	0029      	movs	r1, r5
 800586c:	f7fb fe0e 	bl	800148c <__aeabi_ddiv>
 8005870:	0002      	movs	r2, r0
 8005872:	000b      	movs	r3, r1
 8005874:	f7fb face 	bl	8000e14 <__aeabi_dadd>
 8005878:	0002      	movs	r2, r0
 800587a:	000b      	movs	r3, r1
 800587c:	4815      	ldr	r0, [pc, #84]	; (80058d4 <__ieee754_asin+0x33c>)
 800587e:	4916      	ldr	r1, [pc, #88]	; (80058d8 <__ieee754_asin+0x340>)
 8005880:	f7fc fc72 	bl	8002168 <__aeabi_dsub>
 8005884:	0002      	movs	r2, r0
 8005886:	000b      	movs	r3, r1
 8005888:	9802      	ldr	r0, [sp, #8]
 800588a:	9903      	ldr	r1, [sp, #12]
 800588c:	f7fc fc6c 	bl	8002168 <__aeabi_dsub>
 8005890:	0032      	movs	r2, r6
 8005892:	0004      	movs	r4, r0
 8005894:	000d      	movs	r5, r1
 8005896:	003b      	movs	r3, r7
 8005898:	0030      	movs	r0, r6
 800589a:	0039      	movs	r1, r7
 800589c:	f7fb faba 	bl	8000e14 <__aeabi_dadd>
 80058a0:	0002      	movs	r2, r0
 80058a2:	000b      	movs	r3, r1
 80058a4:	4809      	ldr	r0, [pc, #36]	; (80058cc <__ieee754_asin+0x334>)
 80058a6:	4927      	ldr	r1, [pc, #156]	; (8005944 <__ieee754_asin+0x3ac>)
 80058a8:	f7fc fc5e 	bl	8002168 <__aeabi_dsub>
 80058ac:	0002      	movs	r2, r0
 80058ae:	000b      	movs	r3, r1
 80058b0:	0020      	movs	r0, r4
 80058b2:	0029      	movs	r1, r5
 80058b4:	f7fc fc58 	bl	8002168 <__aeabi_dsub>
 80058b8:	0002      	movs	r2, r0
 80058ba:	000b      	movs	r3, r1
 80058bc:	4803      	ldr	r0, [pc, #12]	; (80058cc <__ieee754_asin+0x334>)
 80058be:	4921      	ldr	r1, [pc, #132]	; (8005944 <__ieee754_asin+0x3ac>)
 80058c0:	e731      	b.n	8005726 <__ieee754_asin+0x18e>
 80058c2:	46c0      	nop			; (mov r8, r8)
 80058c4:	3fefffff 	.word	0x3fefffff
 80058c8:	c0100000 	.word	0xc0100000
 80058cc:	54442d18 	.word	0x54442d18
 80058d0:	3ff921fb 	.word	0x3ff921fb
 80058d4:	33145c07 	.word	0x33145c07
 80058d8:	3c91a626 	.word	0x3c91a626
 80058dc:	3fdfffff 	.word	0x3fdfffff
 80058e0:	8800759c 	.word	0x8800759c
 80058e4:	7e37e43c 	.word	0x7e37e43c
 80058e8:	3ff00000 	.word	0x3ff00000
 80058ec:	3fe00000 	.word	0x3fe00000
 80058f0:	0dfdf709 	.word	0x0dfdf709
 80058f4:	3f023de1 	.word	0x3f023de1
 80058f8:	7501b288 	.word	0x7501b288
 80058fc:	3f49efe0 	.word	0x3f49efe0
 8005900:	b5688f3b 	.word	0xb5688f3b
 8005904:	3fa48228 	.word	0x3fa48228
 8005908:	0e884455 	.word	0x0e884455
 800590c:	3fc9c155 	.word	0x3fc9c155
 8005910:	03eb6f7d 	.word	0x03eb6f7d
 8005914:	3fd4d612 	.word	0x3fd4d612
 8005918:	55555555 	.word	0x55555555
 800591c:	3fc55555 	.word	0x3fc55555
 8005920:	b12e9282 	.word	0xb12e9282
 8005924:	3fb3b8c5 	.word	0x3fb3b8c5
 8005928:	1b8d0159 	.word	0x1b8d0159
 800592c:	3fe6066c 	.word	0x3fe6066c
 8005930:	9c598ac8 	.word	0x9c598ac8
 8005934:	40002ae5 	.word	0x40002ae5
 8005938:	1c8a2d4b 	.word	0x1c8a2d4b
 800593c:	40033a27 	.word	0x40033a27
 8005940:	3fef3332 	.word	0x3fef3332
 8005944:	3fe921fb 	.word	0x3fe921fb

08005948 <__ieee754_rem_pio2>:
 8005948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800594a:	004b      	lsls	r3, r1, #1
 800594c:	b091      	sub	sp, #68	; 0x44
 800594e:	085b      	lsrs	r3, r3, #1
 8005950:	9302      	str	r3, [sp, #8]
 8005952:	0017      	movs	r7, r2
 8005954:	4bb6      	ldr	r3, [pc, #728]	; (8005c30 <__ieee754_rem_pio2+0x2e8>)
 8005956:	9a02      	ldr	r2, [sp, #8]
 8005958:	0004      	movs	r4, r0
 800595a:	000d      	movs	r5, r1
 800595c:	9109      	str	r1, [sp, #36]	; 0x24
 800595e:	429a      	cmp	r2, r3
 8005960:	dc09      	bgt.n	8005976 <__ieee754_rem_pio2+0x2e>
 8005962:	0002      	movs	r2, r0
 8005964:	000b      	movs	r3, r1
 8005966:	603a      	str	r2, [r7, #0]
 8005968:	607b      	str	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	2300      	movs	r3, #0
 800596e:	60ba      	str	r2, [r7, #8]
 8005970:	60fb      	str	r3, [r7, #12]
 8005972:	2600      	movs	r6, #0
 8005974:	e025      	b.n	80059c2 <__ieee754_rem_pio2+0x7a>
 8005976:	4baf      	ldr	r3, [pc, #700]	; (8005c34 <__ieee754_rem_pio2+0x2ec>)
 8005978:	9a02      	ldr	r2, [sp, #8]
 800597a:	429a      	cmp	r2, r3
 800597c:	dd00      	ble.n	8005980 <__ieee754_rem_pio2+0x38>
 800597e:	e06e      	b.n	8005a5e <__ieee754_rem_pio2+0x116>
 8005980:	4ead      	ldr	r6, [pc, #692]	; (8005c38 <__ieee754_rem_pio2+0x2f0>)
 8005982:	4aae      	ldr	r2, [pc, #696]	; (8005c3c <__ieee754_rem_pio2+0x2f4>)
 8005984:	2d00      	cmp	r5, #0
 8005986:	dd35      	ble.n	80059f4 <__ieee754_rem_pio2+0xac>
 8005988:	0020      	movs	r0, r4
 800598a:	0029      	movs	r1, r5
 800598c:	4baa      	ldr	r3, [pc, #680]	; (8005c38 <__ieee754_rem_pio2+0x2f0>)
 800598e:	f7fc fbeb 	bl	8002168 <__aeabi_dsub>
 8005992:	9b02      	ldr	r3, [sp, #8]
 8005994:	0004      	movs	r4, r0
 8005996:	000d      	movs	r5, r1
 8005998:	42b3      	cmp	r3, r6
 800599a:	d015      	beq.n	80059c8 <__ieee754_rem_pio2+0x80>
 800599c:	4aa8      	ldr	r2, [pc, #672]	; (8005c40 <__ieee754_rem_pio2+0x2f8>)
 800599e:	4ba9      	ldr	r3, [pc, #676]	; (8005c44 <__ieee754_rem_pio2+0x2fc>)
 80059a0:	f7fc fbe2 	bl	8002168 <__aeabi_dsub>
 80059a4:	0002      	movs	r2, r0
 80059a6:	000b      	movs	r3, r1
 80059a8:	0020      	movs	r0, r4
 80059aa:	603a      	str	r2, [r7, #0]
 80059ac:	607b      	str	r3, [r7, #4]
 80059ae:	0029      	movs	r1, r5
 80059b0:	f7fc fbda 	bl	8002168 <__aeabi_dsub>
 80059b4:	4aa2      	ldr	r2, [pc, #648]	; (8005c40 <__ieee754_rem_pio2+0x2f8>)
 80059b6:	4ba3      	ldr	r3, [pc, #652]	; (8005c44 <__ieee754_rem_pio2+0x2fc>)
 80059b8:	f7fc fbd6 	bl	8002168 <__aeabi_dsub>
 80059bc:	2601      	movs	r6, #1
 80059be:	60b8      	str	r0, [r7, #8]
 80059c0:	60f9      	str	r1, [r7, #12]
 80059c2:	0030      	movs	r0, r6
 80059c4:	b011      	add	sp, #68	; 0x44
 80059c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059c8:	22d3      	movs	r2, #211	; 0xd3
 80059ca:	4b9e      	ldr	r3, [pc, #632]	; (8005c44 <__ieee754_rem_pio2+0x2fc>)
 80059cc:	0552      	lsls	r2, r2, #21
 80059ce:	f7fc fbcb 	bl	8002168 <__aeabi_dsub>
 80059d2:	4a9d      	ldr	r2, [pc, #628]	; (8005c48 <__ieee754_rem_pio2+0x300>)
 80059d4:	4b9d      	ldr	r3, [pc, #628]	; (8005c4c <__ieee754_rem_pio2+0x304>)
 80059d6:	0004      	movs	r4, r0
 80059d8:	000d      	movs	r5, r1
 80059da:	f7fc fbc5 	bl	8002168 <__aeabi_dsub>
 80059de:	0002      	movs	r2, r0
 80059e0:	000b      	movs	r3, r1
 80059e2:	0020      	movs	r0, r4
 80059e4:	603a      	str	r2, [r7, #0]
 80059e6:	607b      	str	r3, [r7, #4]
 80059e8:	0029      	movs	r1, r5
 80059ea:	f7fc fbbd 	bl	8002168 <__aeabi_dsub>
 80059ee:	4a96      	ldr	r2, [pc, #600]	; (8005c48 <__ieee754_rem_pio2+0x300>)
 80059f0:	4b96      	ldr	r3, [pc, #600]	; (8005c4c <__ieee754_rem_pio2+0x304>)
 80059f2:	e7e1      	b.n	80059b8 <__ieee754_rem_pio2+0x70>
 80059f4:	0020      	movs	r0, r4
 80059f6:	0029      	movs	r1, r5
 80059f8:	4b8f      	ldr	r3, [pc, #572]	; (8005c38 <__ieee754_rem_pio2+0x2f0>)
 80059fa:	f7fb fa0b 	bl	8000e14 <__aeabi_dadd>
 80059fe:	9b02      	ldr	r3, [sp, #8]
 8005a00:	0004      	movs	r4, r0
 8005a02:	000d      	movs	r5, r1
 8005a04:	42b3      	cmp	r3, r6
 8005a06:	d014      	beq.n	8005a32 <__ieee754_rem_pio2+0xea>
 8005a08:	4a8d      	ldr	r2, [pc, #564]	; (8005c40 <__ieee754_rem_pio2+0x2f8>)
 8005a0a:	4b8e      	ldr	r3, [pc, #568]	; (8005c44 <__ieee754_rem_pio2+0x2fc>)
 8005a0c:	f7fb fa02 	bl	8000e14 <__aeabi_dadd>
 8005a10:	0002      	movs	r2, r0
 8005a12:	000b      	movs	r3, r1
 8005a14:	0020      	movs	r0, r4
 8005a16:	603a      	str	r2, [r7, #0]
 8005a18:	607b      	str	r3, [r7, #4]
 8005a1a:	0029      	movs	r1, r5
 8005a1c:	f7fc fba4 	bl	8002168 <__aeabi_dsub>
 8005a20:	4a87      	ldr	r2, [pc, #540]	; (8005c40 <__ieee754_rem_pio2+0x2f8>)
 8005a22:	4b88      	ldr	r3, [pc, #544]	; (8005c44 <__ieee754_rem_pio2+0x2fc>)
 8005a24:	f7fb f9f6 	bl	8000e14 <__aeabi_dadd>
 8005a28:	2601      	movs	r6, #1
 8005a2a:	60b8      	str	r0, [r7, #8]
 8005a2c:	60f9      	str	r1, [r7, #12]
 8005a2e:	4276      	negs	r6, r6
 8005a30:	e7c7      	b.n	80059c2 <__ieee754_rem_pio2+0x7a>
 8005a32:	22d3      	movs	r2, #211	; 0xd3
 8005a34:	4b83      	ldr	r3, [pc, #524]	; (8005c44 <__ieee754_rem_pio2+0x2fc>)
 8005a36:	0552      	lsls	r2, r2, #21
 8005a38:	f7fb f9ec 	bl	8000e14 <__aeabi_dadd>
 8005a3c:	4a82      	ldr	r2, [pc, #520]	; (8005c48 <__ieee754_rem_pio2+0x300>)
 8005a3e:	4b83      	ldr	r3, [pc, #524]	; (8005c4c <__ieee754_rem_pio2+0x304>)
 8005a40:	0004      	movs	r4, r0
 8005a42:	000d      	movs	r5, r1
 8005a44:	f7fb f9e6 	bl	8000e14 <__aeabi_dadd>
 8005a48:	0002      	movs	r2, r0
 8005a4a:	000b      	movs	r3, r1
 8005a4c:	0020      	movs	r0, r4
 8005a4e:	603a      	str	r2, [r7, #0]
 8005a50:	607b      	str	r3, [r7, #4]
 8005a52:	0029      	movs	r1, r5
 8005a54:	f7fc fb88 	bl	8002168 <__aeabi_dsub>
 8005a58:	4a7b      	ldr	r2, [pc, #492]	; (8005c48 <__ieee754_rem_pio2+0x300>)
 8005a5a:	4b7c      	ldr	r3, [pc, #496]	; (8005c4c <__ieee754_rem_pio2+0x304>)
 8005a5c:	e7e2      	b.n	8005a24 <__ieee754_rem_pio2+0xdc>
 8005a5e:	4b7c      	ldr	r3, [pc, #496]	; (8005c50 <__ieee754_rem_pio2+0x308>)
 8005a60:	9a02      	ldr	r2, [sp, #8]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	dd00      	ble.n	8005a68 <__ieee754_rem_pio2+0x120>
 8005a66:	e0d3      	b.n	8005c10 <__ieee754_rem_pio2+0x2c8>
 8005a68:	0020      	movs	r0, r4
 8005a6a:	0029      	movs	r1, r5
 8005a6c:	f000 fee8 	bl	8006840 <fabs>
 8005a70:	4a78      	ldr	r2, [pc, #480]	; (8005c54 <__ieee754_rem_pio2+0x30c>)
 8005a72:	4b79      	ldr	r3, [pc, #484]	; (8005c58 <__ieee754_rem_pio2+0x310>)
 8005a74:	0004      	movs	r4, r0
 8005a76:	000d      	movs	r5, r1
 8005a78:	f7fc f90a 	bl	8001c90 <__aeabi_dmul>
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	4b77      	ldr	r3, [pc, #476]	; (8005c5c <__ieee754_rem_pio2+0x314>)
 8005a80:	f7fb f9c8 	bl	8000e14 <__aeabi_dadd>
 8005a84:	f7fc ff20 	bl	80028c8 <__aeabi_d2iz>
 8005a88:	0006      	movs	r6, r0
 8005a8a:	f7fc ff53 	bl	8002934 <__aeabi_i2d>
 8005a8e:	4a6b      	ldr	r2, [pc, #428]	; (8005c3c <__ieee754_rem_pio2+0x2f4>)
 8005a90:	4b69      	ldr	r3, [pc, #420]	; (8005c38 <__ieee754_rem_pio2+0x2f0>)
 8005a92:	9006      	str	r0, [sp, #24]
 8005a94:	9107      	str	r1, [sp, #28]
 8005a96:	f7fc f8fb 	bl	8001c90 <__aeabi_dmul>
 8005a9a:	0002      	movs	r2, r0
 8005a9c:	000b      	movs	r3, r1
 8005a9e:	0020      	movs	r0, r4
 8005aa0:	0029      	movs	r1, r5
 8005aa2:	f7fc fb61 	bl	8002168 <__aeabi_dsub>
 8005aa6:	4a66      	ldr	r2, [pc, #408]	; (8005c40 <__ieee754_rem_pio2+0x2f8>)
 8005aa8:	9004      	str	r0, [sp, #16]
 8005aaa:	9105      	str	r1, [sp, #20]
 8005aac:	9806      	ldr	r0, [sp, #24]
 8005aae:	9907      	ldr	r1, [sp, #28]
 8005ab0:	4b64      	ldr	r3, [pc, #400]	; (8005c44 <__ieee754_rem_pio2+0x2fc>)
 8005ab2:	f7fc f8ed 	bl	8001c90 <__aeabi_dmul>
 8005ab6:	0004      	movs	r4, r0
 8005ab8:	000d      	movs	r5, r1
 8005aba:	2e1f      	cmp	r6, #31
 8005abc:	dc0f      	bgt.n	8005ade <__ieee754_rem_pio2+0x196>
 8005abe:	4a68      	ldr	r2, [pc, #416]	; (8005c60 <__ieee754_rem_pio2+0x318>)
 8005ac0:	1e73      	subs	r3, r6, #1
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	589b      	ldr	r3, [r3, r2]
 8005ac6:	9a02      	ldr	r2, [sp, #8]
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d008      	beq.n	8005ade <__ieee754_rem_pio2+0x196>
 8005acc:	9804      	ldr	r0, [sp, #16]
 8005ace:	9905      	ldr	r1, [sp, #20]
 8005ad0:	0022      	movs	r2, r4
 8005ad2:	002b      	movs	r3, r5
 8005ad4:	f7fc fb48 	bl	8002168 <__aeabi_dsub>
 8005ad8:	6038      	str	r0, [r7, #0]
 8005ada:	6079      	str	r1, [r7, #4]
 8005adc:	e012      	b.n	8005b04 <__ieee754_rem_pio2+0x1bc>
 8005ade:	0022      	movs	r2, r4
 8005ae0:	9804      	ldr	r0, [sp, #16]
 8005ae2:	9905      	ldr	r1, [sp, #20]
 8005ae4:	002b      	movs	r3, r5
 8005ae6:	f7fc fb3f 	bl	8002168 <__aeabi_dsub>
 8005aea:	9b02      	ldr	r3, [sp, #8]
 8005aec:	151b      	asrs	r3, r3, #20
 8005aee:	9308      	str	r3, [sp, #32]
 8005af0:	9a08      	ldr	r2, [sp, #32]
 8005af2:	004b      	lsls	r3, r1, #1
 8005af4:	0d5b      	lsrs	r3, r3, #21
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b10      	cmp	r3, #16
 8005afa:	dc21      	bgt.n	8005b40 <__ieee754_rem_pio2+0x1f8>
 8005afc:	0002      	movs	r2, r0
 8005afe:	000b      	movs	r3, r1
 8005b00:	603a      	str	r2, [r7, #0]
 8005b02:	607b      	str	r3, [r7, #4]
 8005b04:	9804      	ldr	r0, [sp, #16]
 8005b06:	9905      	ldr	r1, [sp, #20]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	9302      	str	r3, [sp, #8]
 8005b0e:	9b02      	ldr	r3, [sp, #8]
 8005b10:	f7fc fb2a 	bl	8002168 <__aeabi_dsub>
 8005b14:	0022      	movs	r2, r4
 8005b16:	002b      	movs	r3, r5
 8005b18:	f7fc fb26 	bl	8002168 <__aeabi_dsub>
 8005b1c:	000b      	movs	r3, r1
 8005b1e:	0002      	movs	r2, r0
 8005b20:	60ba      	str	r2, [r7, #8]
 8005b22:	60fb      	str	r3, [r7, #12]
 8005b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	db00      	blt.n	8005b2c <__ieee754_rem_pio2+0x1e4>
 8005b2a:	e74a      	b.n	80059c2 <__ieee754_rem_pio2+0x7a>
 8005b2c:	2380      	movs	r3, #128	; 0x80
 8005b2e:	061b      	lsls	r3, r3, #24
 8005b30:	469c      	mov	ip, r3
 8005b32:	9c02      	ldr	r4, [sp, #8]
 8005b34:	18c9      	adds	r1, r1, r3
 8005b36:	4464      	add	r4, ip
 8005b38:	607c      	str	r4, [r7, #4]
 8005b3a:	60b8      	str	r0, [r7, #8]
 8005b3c:	60f9      	str	r1, [r7, #12]
 8005b3e:	e776      	b.n	8005a2e <__ieee754_rem_pio2+0xe6>
 8005b40:	22d3      	movs	r2, #211	; 0xd3
 8005b42:	9806      	ldr	r0, [sp, #24]
 8005b44:	9907      	ldr	r1, [sp, #28]
 8005b46:	4b3f      	ldr	r3, [pc, #252]	; (8005c44 <__ieee754_rem_pio2+0x2fc>)
 8005b48:	0552      	lsls	r2, r2, #21
 8005b4a:	f7fc f8a1 	bl	8001c90 <__aeabi_dmul>
 8005b4e:	0004      	movs	r4, r0
 8005b50:	000d      	movs	r5, r1
 8005b52:	0002      	movs	r2, r0
 8005b54:	000b      	movs	r3, r1
 8005b56:	9804      	ldr	r0, [sp, #16]
 8005b58:	9905      	ldr	r1, [sp, #20]
 8005b5a:	f7fc fb05 	bl	8002168 <__aeabi_dsub>
 8005b5e:	0002      	movs	r2, r0
 8005b60:	000b      	movs	r3, r1
 8005b62:	9002      	str	r0, [sp, #8]
 8005b64:	9103      	str	r1, [sp, #12]
 8005b66:	9804      	ldr	r0, [sp, #16]
 8005b68:	9905      	ldr	r1, [sp, #20]
 8005b6a:	f7fc fafd 	bl	8002168 <__aeabi_dsub>
 8005b6e:	0022      	movs	r2, r4
 8005b70:	002b      	movs	r3, r5
 8005b72:	f7fc faf9 	bl	8002168 <__aeabi_dsub>
 8005b76:	0004      	movs	r4, r0
 8005b78:	000d      	movs	r5, r1
 8005b7a:	9806      	ldr	r0, [sp, #24]
 8005b7c:	9907      	ldr	r1, [sp, #28]
 8005b7e:	4a32      	ldr	r2, [pc, #200]	; (8005c48 <__ieee754_rem_pio2+0x300>)
 8005b80:	4b32      	ldr	r3, [pc, #200]	; (8005c4c <__ieee754_rem_pio2+0x304>)
 8005b82:	f7fc f885 	bl	8001c90 <__aeabi_dmul>
 8005b86:	0022      	movs	r2, r4
 8005b88:	002b      	movs	r3, r5
 8005b8a:	f7fc faed 	bl	8002168 <__aeabi_dsub>
 8005b8e:	0002      	movs	r2, r0
 8005b90:	000b      	movs	r3, r1
 8005b92:	0004      	movs	r4, r0
 8005b94:	000d      	movs	r5, r1
 8005b96:	9802      	ldr	r0, [sp, #8]
 8005b98:	9903      	ldr	r1, [sp, #12]
 8005b9a:	f7fc fae5 	bl	8002168 <__aeabi_dsub>
 8005b9e:	9a08      	ldr	r2, [sp, #32]
 8005ba0:	004b      	lsls	r3, r1, #1
 8005ba2:	0d5b      	lsrs	r3, r3, #21
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	2b31      	cmp	r3, #49	; 0x31
 8005ba8:	dc08      	bgt.n	8005bbc <__ieee754_rem_pio2+0x274>
 8005baa:	0002      	movs	r2, r0
 8005bac:	000b      	movs	r3, r1
 8005bae:	603a      	str	r2, [r7, #0]
 8005bb0:	607b      	str	r3, [r7, #4]
 8005bb2:	9a02      	ldr	r2, [sp, #8]
 8005bb4:	9b03      	ldr	r3, [sp, #12]
 8005bb6:	9204      	str	r2, [sp, #16]
 8005bb8:	9305      	str	r3, [sp, #20]
 8005bba:	e7a3      	b.n	8005b04 <__ieee754_rem_pio2+0x1bc>
 8005bbc:	22b8      	movs	r2, #184	; 0xb8
 8005bbe:	9806      	ldr	r0, [sp, #24]
 8005bc0:	9907      	ldr	r1, [sp, #28]
 8005bc2:	4b22      	ldr	r3, [pc, #136]	; (8005c4c <__ieee754_rem_pio2+0x304>)
 8005bc4:	0592      	lsls	r2, r2, #22
 8005bc6:	f7fc f863 	bl	8001c90 <__aeabi_dmul>
 8005bca:	0004      	movs	r4, r0
 8005bcc:	000d      	movs	r5, r1
 8005bce:	0002      	movs	r2, r0
 8005bd0:	000b      	movs	r3, r1
 8005bd2:	9802      	ldr	r0, [sp, #8]
 8005bd4:	9903      	ldr	r1, [sp, #12]
 8005bd6:	f7fc fac7 	bl	8002168 <__aeabi_dsub>
 8005bda:	0002      	movs	r2, r0
 8005bdc:	000b      	movs	r3, r1
 8005bde:	9004      	str	r0, [sp, #16]
 8005be0:	9105      	str	r1, [sp, #20]
 8005be2:	9802      	ldr	r0, [sp, #8]
 8005be4:	9903      	ldr	r1, [sp, #12]
 8005be6:	f7fc fabf 	bl	8002168 <__aeabi_dsub>
 8005bea:	0022      	movs	r2, r4
 8005bec:	002b      	movs	r3, r5
 8005bee:	f7fc fabb 	bl	8002168 <__aeabi_dsub>
 8005bf2:	0004      	movs	r4, r0
 8005bf4:	000d      	movs	r5, r1
 8005bf6:	9806      	ldr	r0, [sp, #24]
 8005bf8:	9907      	ldr	r1, [sp, #28]
 8005bfa:	4a1a      	ldr	r2, [pc, #104]	; (8005c64 <__ieee754_rem_pio2+0x31c>)
 8005bfc:	4b1a      	ldr	r3, [pc, #104]	; (8005c68 <__ieee754_rem_pio2+0x320>)
 8005bfe:	f7fc f847 	bl	8001c90 <__aeabi_dmul>
 8005c02:	0022      	movs	r2, r4
 8005c04:	002b      	movs	r3, r5
 8005c06:	f7fc faaf 	bl	8002168 <__aeabi_dsub>
 8005c0a:	0004      	movs	r4, r0
 8005c0c:	000d      	movs	r5, r1
 8005c0e:	e75d      	b.n	8005acc <__ieee754_rem_pio2+0x184>
 8005c10:	4b16      	ldr	r3, [pc, #88]	; (8005c6c <__ieee754_rem_pio2+0x324>)
 8005c12:	9a02      	ldr	r2, [sp, #8]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	dd2b      	ble.n	8005c70 <__ieee754_rem_pio2+0x328>
 8005c18:	0022      	movs	r2, r4
 8005c1a:	002b      	movs	r3, r5
 8005c1c:	0020      	movs	r0, r4
 8005c1e:	0029      	movs	r1, r5
 8005c20:	f7fc faa2 	bl	8002168 <__aeabi_dsub>
 8005c24:	60b8      	str	r0, [r7, #8]
 8005c26:	60f9      	str	r1, [r7, #12]
 8005c28:	6038      	str	r0, [r7, #0]
 8005c2a:	6079      	str	r1, [r7, #4]
 8005c2c:	e6a1      	b.n	8005972 <__ieee754_rem_pio2+0x2a>
 8005c2e:	46c0      	nop			; (mov r8, r8)
 8005c30:	3fe921fb 	.word	0x3fe921fb
 8005c34:	4002d97b 	.word	0x4002d97b
 8005c38:	3ff921fb 	.word	0x3ff921fb
 8005c3c:	54400000 	.word	0x54400000
 8005c40:	1a626331 	.word	0x1a626331
 8005c44:	3dd0b461 	.word	0x3dd0b461
 8005c48:	2e037073 	.word	0x2e037073
 8005c4c:	3ba3198a 	.word	0x3ba3198a
 8005c50:	413921fb 	.word	0x413921fb
 8005c54:	6dc9c883 	.word	0x6dc9c883
 8005c58:	3fe45f30 	.word	0x3fe45f30
 8005c5c:	3fe00000 	.word	0x3fe00000
 8005c60:	08006b9c 	.word	0x08006b9c
 8005c64:	252049c1 	.word	0x252049c1
 8005c68:	397b839a 	.word	0x397b839a
 8005c6c:	7fefffff 	.word	0x7fefffff
 8005c70:	9a02      	ldr	r2, [sp, #8]
 8005c72:	0020      	movs	r0, r4
 8005c74:	1516      	asrs	r6, r2, #20
 8005c76:	4a29      	ldr	r2, [pc, #164]	; (8005d1c <__ieee754_rem_pio2+0x3d4>)
 8005c78:	18b6      	adds	r6, r6, r2
 8005c7a:	9a02      	ldr	r2, [sp, #8]
 8005c7c:	0533      	lsls	r3, r6, #20
 8005c7e:	1ad5      	subs	r5, r2, r3
 8005c80:	0029      	movs	r1, r5
 8005c82:	f7fc fe21 	bl	80028c8 <__aeabi_d2iz>
 8005c86:	f7fc fe55 	bl	8002934 <__aeabi_i2d>
 8005c8a:	0002      	movs	r2, r0
 8005c8c:	000b      	movs	r3, r1
 8005c8e:	0020      	movs	r0, r4
 8005c90:	0029      	movs	r1, r5
 8005c92:	920a      	str	r2, [sp, #40]	; 0x28
 8005c94:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c96:	f7fc fa67 	bl	8002168 <__aeabi_dsub>
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	4b20      	ldr	r3, [pc, #128]	; (8005d20 <__ieee754_rem_pio2+0x3d8>)
 8005c9e:	f7fb fff7 	bl	8001c90 <__aeabi_dmul>
 8005ca2:	000d      	movs	r5, r1
 8005ca4:	0004      	movs	r4, r0
 8005ca6:	f7fc fe0f 	bl	80028c8 <__aeabi_d2iz>
 8005caa:	f7fc fe43 	bl	8002934 <__aeabi_i2d>
 8005cae:	0002      	movs	r2, r0
 8005cb0:	000b      	movs	r3, r1
 8005cb2:	0020      	movs	r0, r4
 8005cb4:	0029      	movs	r1, r5
 8005cb6:	920c      	str	r2, [sp, #48]	; 0x30
 8005cb8:	930d      	str	r3, [sp, #52]	; 0x34
 8005cba:	f7fc fa55 	bl	8002168 <__aeabi_dsub>
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	4b17      	ldr	r3, [pc, #92]	; (8005d20 <__ieee754_rem_pio2+0x3d8>)
 8005cc2:	f7fb ffe5 	bl	8001c90 <__aeabi_dmul>
 8005cc6:	2503      	movs	r5, #3
 8005cc8:	900e      	str	r0, [sp, #56]	; 0x38
 8005cca:	910f      	str	r1, [sp, #60]	; 0x3c
 8005ccc:	ac0a      	add	r4, sp, #40	; 0x28
 8005cce:	2200      	movs	r2, #0
 8005cd0:	6920      	ldr	r0, [r4, #16]
 8005cd2:	6961      	ldr	r1, [r4, #20]
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	9502      	str	r5, [sp, #8]
 8005cd8:	3c08      	subs	r4, #8
 8005cda:	3d01      	subs	r5, #1
 8005cdc:	f7fa fb9a 	bl	8000414 <__aeabi_dcmpeq>
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	d1f4      	bne.n	8005cce <__ieee754_rem_pio2+0x386>
 8005ce4:	4b0f      	ldr	r3, [pc, #60]	; (8005d24 <__ieee754_rem_pio2+0x3dc>)
 8005ce6:	0032      	movs	r2, r6
 8005ce8:	9301      	str	r3, [sp, #4]
 8005cea:	2302      	movs	r3, #2
 8005cec:	0039      	movs	r1, r7
 8005cee:	9300      	str	r3, [sp, #0]
 8005cf0:	a80a      	add	r0, sp, #40	; 0x28
 8005cf2:	9b02      	ldr	r3, [sp, #8]
 8005cf4:	f000 f98e 	bl	8006014 <__kernel_rem_pio2>
 8005cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cfa:	0006      	movs	r6, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	db00      	blt.n	8005d02 <__ieee754_rem_pio2+0x3ba>
 8005d00:	e65f      	b.n	80059c2 <__ieee754_rem_pio2+0x7a>
 8005d02:	2180      	movs	r1, #128	; 0x80
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	0609      	lsls	r1, r1, #24
 8005d0a:	1843      	adds	r3, r0, r1
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	603a      	str	r2, [r7, #0]
 8005d10:	607b      	str	r3, [r7, #4]
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	1843      	adds	r3, r0, r1
 8005d16:	60ba      	str	r2, [r7, #8]
 8005d18:	60fb      	str	r3, [r7, #12]
 8005d1a:	e688      	b.n	8005a2e <__ieee754_rem_pio2+0xe6>
 8005d1c:	fffffbea 	.word	0xfffffbea
 8005d20:	41700000 	.word	0x41700000
 8005d24:	08006c1c 	.word	0x08006c1c

08005d28 <__ieee754_sqrt>:
 8005d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d2a:	000b      	movs	r3, r1
 8005d2c:	000c      	movs	r4, r1
 8005d2e:	4956      	ldr	r1, [pc, #344]	; (8005e88 <__ieee754_sqrt+0x160>)
 8005d30:	0005      	movs	r5, r0
 8005d32:	0002      	movs	r2, r0
 8005d34:	0008      	movs	r0, r1
 8005d36:	b085      	sub	sp, #20
 8005d38:	4020      	ands	r0, r4
 8005d3a:	4288      	cmp	r0, r1
 8005d3c:	d10f      	bne.n	8005d5e <__ieee754_sqrt+0x36>
 8005d3e:	0028      	movs	r0, r5
 8005d40:	0021      	movs	r1, r4
 8005d42:	f7fb ffa5 	bl	8001c90 <__aeabi_dmul>
 8005d46:	0002      	movs	r2, r0
 8005d48:	000b      	movs	r3, r1
 8005d4a:	0028      	movs	r0, r5
 8005d4c:	0021      	movs	r1, r4
 8005d4e:	f7fb f861 	bl	8000e14 <__aeabi_dadd>
 8005d52:	0005      	movs	r5, r0
 8005d54:	000c      	movs	r4, r1
 8005d56:	0028      	movs	r0, r5
 8005d58:	0021      	movs	r1, r4
 8005d5a:	b005      	add	sp, #20
 8005d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d5e:	2c00      	cmp	r4, #0
 8005d60:	dc10      	bgt.n	8005d84 <__ieee754_sqrt+0x5c>
 8005d62:	0061      	lsls	r1, r4, #1
 8005d64:	0849      	lsrs	r1, r1, #1
 8005d66:	4329      	orrs	r1, r5
 8005d68:	d0f5      	beq.n	8005d56 <__ieee754_sqrt+0x2e>
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	428c      	cmp	r4, r1
 8005d6e:	d100      	bne.n	8005d72 <__ieee754_sqrt+0x4a>
 8005d70:	e080      	b.n	8005e74 <__ieee754_sqrt+0x14c>
 8005d72:	0028      	movs	r0, r5
 8005d74:	0021      	movs	r1, r4
 8005d76:	f7fc f9f7 	bl	8002168 <__aeabi_dsub>
 8005d7a:	0002      	movs	r2, r0
 8005d7c:	000b      	movs	r3, r1
 8005d7e:	f7fb fb85 	bl	800148c <__aeabi_ddiv>
 8005d82:	e7e6      	b.n	8005d52 <__ieee754_sqrt+0x2a>
 8005d84:	1521      	asrs	r1, r4, #20
 8005d86:	d075      	beq.n	8005e74 <__ieee754_sqrt+0x14c>
 8005d88:	4840      	ldr	r0, [pc, #256]	; (8005e8c <__ieee754_sqrt+0x164>)
 8005d8a:	031b      	lsls	r3, r3, #12
 8005d8c:	180c      	adds	r4, r1, r0
 8005d8e:	2080      	movs	r0, #128	; 0x80
 8005d90:	0b1b      	lsrs	r3, r3, #12
 8005d92:	0340      	lsls	r0, r0, #13
 8005d94:	4303      	orrs	r3, r0
 8005d96:	07c9      	lsls	r1, r1, #31
 8005d98:	d403      	bmi.n	8005da2 <__ieee754_sqrt+0x7a>
 8005d9a:	0fd1      	lsrs	r1, r2, #31
 8005d9c:	005b      	lsls	r3, r3, #1
 8005d9e:	185b      	adds	r3, r3, r1
 8005da0:	0052      	lsls	r2, r2, #1
 8005da2:	1061      	asrs	r1, r4, #1
 8005da4:	2400      	movs	r4, #0
 8005da6:	9103      	str	r1, [sp, #12]
 8005da8:	005b      	lsls	r3, r3, #1
 8005daa:	0fd1      	lsrs	r1, r2, #31
 8005dac:	185b      	adds	r3, r3, r1
 8005dae:	2180      	movs	r1, #128	; 0x80
 8005db0:	2516      	movs	r5, #22
 8005db2:	0020      	movs	r0, r4
 8005db4:	0052      	lsls	r2, r2, #1
 8005db6:	0389      	lsls	r1, r1, #14
 8005db8:	1846      	adds	r6, r0, r1
 8005dba:	429e      	cmp	r6, r3
 8005dbc:	dc02      	bgt.n	8005dc4 <__ieee754_sqrt+0x9c>
 8005dbe:	1870      	adds	r0, r6, r1
 8005dc0:	1b9b      	subs	r3, r3, r6
 8005dc2:	1864      	adds	r4, r4, r1
 8005dc4:	0fd6      	lsrs	r6, r2, #31
 8005dc6:	005b      	lsls	r3, r3, #1
 8005dc8:	3d01      	subs	r5, #1
 8005dca:	18f3      	adds	r3, r6, r3
 8005dcc:	0052      	lsls	r2, r2, #1
 8005dce:	0849      	lsrs	r1, r1, #1
 8005dd0:	2d00      	cmp	r5, #0
 8005dd2:	d1f1      	bne.n	8005db8 <__ieee754_sqrt+0x90>
 8005dd4:	2620      	movs	r6, #32
 8005dd6:	2780      	movs	r7, #128	; 0x80
 8005dd8:	0029      	movs	r1, r5
 8005dda:	9601      	str	r6, [sp, #4]
 8005ddc:	063f      	lsls	r7, r7, #24
 8005dde:	197e      	adds	r6, r7, r5
 8005de0:	46b4      	mov	ip, r6
 8005de2:	4283      	cmp	r3, r0
 8005de4:	dc02      	bgt.n	8005dec <__ieee754_sqrt+0xc4>
 8005de6:	d114      	bne.n	8005e12 <__ieee754_sqrt+0xea>
 8005de8:	4296      	cmp	r6, r2
 8005dea:	d812      	bhi.n	8005e12 <__ieee754_sqrt+0xea>
 8005dec:	4665      	mov	r5, ip
 8005dee:	4666      	mov	r6, ip
 8005df0:	19ed      	adds	r5, r5, r7
 8005df2:	9002      	str	r0, [sp, #8]
 8005df4:	2e00      	cmp	r6, #0
 8005df6:	da03      	bge.n	8005e00 <__ieee754_sqrt+0xd8>
 8005df8:	43ee      	mvns	r6, r5
 8005dfa:	0ff6      	lsrs	r6, r6, #31
 8005dfc:	1986      	adds	r6, r0, r6
 8005dfe:	9602      	str	r6, [sp, #8]
 8005e00:	1a1b      	subs	r3, r3, r0
 8005e02:	4562      	cmp	r2, ip
 8005e04:	4180      	sbcs	r0, r0
 8005e06:	4240      	negs	r0, r0
 8005e08:	1a1b      	subs	r3, r3, r0
 8005e0a:	4660      	mov	r0, ip
 8005e0c:	1a12      	subs	r2, r2, r0
 8005e0e:	9802      	ldr	r0, [sp, #8]
 8005e10:	19c9      	adds	r1, r1, r7
 8005e12:	0fd6      	lsrs	r6, r2, #31
 8005e14:	005b      	lsls	r3, r3, #1
 8005e16:	199b      	adds	r3, r3, r6
 8005e18:	9e01      	ldr	r6, [sp, #4]
 8005e1a:	0052      	lsls	r2, r2, #1
 8005e1c:	3e01      	subs	r6, #1
 8005e1e:	087f      	lsrs	r7, r7, #1
 8005e20:	9601      	str	r6, [sp, #4]
 8005e22:	2e00      	cmp	r6, #0
 8005e24:	d1db      	bne.n	8005dde <__ieee754_sqrt+0xb6>
 8005e26:	4313      	orrs	r3, r2
 8005e28:	d003      	beq.n	8005e32 <__ieee754_sqrt+0x10a>
 8005e2a:	1c4b      	adds	r3, r1, #1
 8005e2c:	d127      	bne.n	8005e7e <__ieee754_sqrt+0x156>
 8005e2e:	0031      	movs	r1, r6
 8005e30:	3401      	adds	r4, #1
 8005e32:	4b17      	ldr	r3, [pc, #92]	; (8005e90 <__ieee754_sqrt+0x168>)
 8005e34:	1060      	asrs	r0, r4, #1
 8005e36:	18c0      	adds	r0, r0, r3
 8005e38:	0849      	lsrs	r1, r1, #1
 8005e3a:	07e3      	lsls	r3, r4, #31
 8005e3c:	d502      	bpl.n	8005e44 <__ieee754_sqrt+0x11c>
 8005e3e:	2380      	movs	r3, #128	; 0x80
 8005e40:	061b      	lsls	r3, r3, #24
 8005e42:	4319      	orrs	r1, r3
 8005e44:	9b03      	ldr	r3, [sp, #12]
 8005e46:	000d      	movs	r5, r1
 8005e48:	051c      	lsls	r4, r3, #20
 8005e4a:	1823      	adds	r3, r4, r0
 8005e4c:	001c      	movs	r4, r3
 8005e4e:	e782      	b.n	8005d56 <__ieee754_sqrt+0x2e>
 8005e50:	0ad3      	lsrs	r3, r2, #11
 8005e52:	3815      	subs	r0, #21
 8005e54:	0552      	lsls	r2, r2, #21
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d0fa      	beq.n	8005e50 <__ieee754_sqrt+0x128>
 8005e5a:	2480      	movs	r4, #128	; 0x80
 8005e5c:	0364      	lsls	r4, r4, #13
 8005e5e:	4223      	tst	r3, r4
 8005e60:	d00a      	beq.n	8005e78 <__ieee754_sqrt+0x150>
 8005e62:	2420      	movs	r4, #32
 8005e64:	0016      	movs	r6, r2
 8005e66:	1a64      	subs	r4, r4, r1
 8005e68:	40e6      	lsrs	r6, r4
 8005e6a:	1e4d      	subs	r5, r1, #1
 8005e6c:	408a      	lsls	r2, r1
 8005e6e:	4333      	orrs	r3, r6
 8005e70:	1b41      	subs	r1, r0, r5
 8005e72:	e789      	b.n	8005d88 <__ieee754_sqrt+0x60>
 8005e74:	2000      	movs	r0, #0
 8005e76:	e7ee      	b.n	8005e56 <__ieee754_sqrt+0x12e>
 8005e78:	005b      	lsls	r3, r3, #1
 8005e7a:	3101      	adds	r1, #1
 8005e7c:	e7ef      	b.n	8005e5e <__ieee754_sqrt+0x136>
 8005e7e:	2301      	movs	r3, #1
 8005e80:	3101      	adds	r1, #1
 8005e82:	4399      	bics	r1, r3
 8005e84:	e7d5      	b.n	8005e32 <__ieee754_sqrt+0x10a>
 8005e86:	46c0      	nop			; (mov r8, r8)
 8005e88:	7ff00000 	.word	0x7ff00000
 8005e8c:	fffffc01 	.word	0xfffffc01
 8005e90:	3fe00000 	.word	0x3fe00000

08005e94 <__kernel_cos>:
 8005e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e96:	b087      	sub	sp, #28
 8005e98:	9204      	str	r2, [sp, #16]
 8005e9a:	9305      	str	r3, [sp, #20]
 8005e9c:	004b      	lsls	r3, r1, #1
 8005e9e:	085b      	lsrs	r3, r3, #1
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	23f9      	movs	r3, #249	; 0xf9
 8005ea4:	9a00      	ldr	r2, [sp, #0]
 8005ea6:	0007      	movs	r7, r0
 8005ea8:	000e      	movs	r6, r1
 8005eaa:	059b      	lsls	r3, r3, #22
 8005eac:	429a      	cmp	r2, r3
 8005eae:	da04      	bge.n	8005eba <__kernel_cos+0x26>
 8005eb0:	f7fc fd0a 	bl	80028c8 <__aeabi_d2iz>
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	d100      	bne.n	8005eba <__kernel_cos+0x26>
 8005eb8:	e084      	b.n	8005fc4 <__kernel_cos+0x130>
 8005eba:	003a      	movs	r2, r7
 8005ebc:	0033      	movs	r3, r6
 8005ebe:	0038      	movs	r0, r7
 8005ec0:	0031      	movs	r1, r6
 8005ec2:	f7fb fee5 	bl	8001c90 <__aeabi_dmul>
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	4b40      	ldr	r3, [pc, #256]	; (8005fcc <__kernel_cos+0x138>)
 8005eca:	0004      	movs	r4, r0
 8005ecc:	000d      	movs	r5, r1
 8005ece:	f7fb fedf 	bl	8001c90 <__aeabi_dmul>
 8005ed2:	4a3f      	ldr	r2, [pc, #252]	; (8005fd0 <__kernel_cos+0x13c>)
 8005ed4:	9002      	str	r0, [sp, #8]
 8005ed6:	9103      	str	r1, [sp, #12]
 8005ed8:	4b3e      	ldr	r3, [pc, #248]	; (8005fd4 <__kernel_cos+0x140>)
 8005eda:	0020      	movs	r0, r4
 8005edc:	0029      	movs	r1, r5
 8005ede:	f7fb fed7 	bl	8001c90 <__aeabi_dmul>
 8005ee2:	4a3d      	ldr	r2, [pc, #244]	; (8005fd8 <__kernel_cos+0x144>)
 8005ee4:	4b3d      	ldr	r3, [pc, #244]	; (8005fdc <__kernel_cos+0x148>)
 8005ee6:	f7fa ff95 	bl	8000e14 <__aeabi_dadd>
 8005eea:	0022      	movs	r2, r4
 8005eec:	002b      	movs	r3, r5
 8005eee:	f7fb fecf 	bl	8001c90 <__aeabi_dmul>
 8005ef2:	4a3b      	ldr	r2, [pc, #236]	; (8005fe0 <__kernel_cos+0x14c>)
 8005ef4:	4b3b      	ldr	r3, [pc, #236]	; (8005fe4 <__kernel_cos+0x150>)
 8005ef6:	f7fc f937 	bl	8002168 <__aeabi_dsub>
 8005efa:	0022      	movs	r2, r4
 8005efc:	002b      	movs	r3, r5
 8005efe:	f7fb fec7 	bl	8001c90 <__aeabi_dmul>
 8005f02:	4a39      	ldr	r2, [pc, #228]	; (8005fe8 <__kernel_cos+0x154>)
 8005f04:	4b39      	ldr	r3, [pc, #228]	; (8005fec <__kernel_cos+0x158>)
 8005f06:	f7fa ff85 	bl	8000e14 <__aeabi_dadd>
 8005f0a:	0022      	movs	r2, r4
 8005f0c:	002b      	movs	r3, r5
 8005f0e:	f7fb febf 	bl	8001c90 <__aeabi_dmul>
 8005f12:	4a37      	ldr	r2, [pc, #220]	; (8005ff0 <__kernel_cos+0x15c>)
 8005f14:	4b37      	ldr	r3, [pc, #220]	; (8005ff4 <__kernel_cos+0x160>)
 8005f16:	f7fc f927 	bl	8002168 <__aeabi_dsub>
 8005f1a:	0022      	movs	r2, r4
 8005f1c:	002b      	movs	r3, r5
 8005f1e:	f7fb feb7 	bl	8001c90 <__aeabi_dmul>
 8005f22:	4a35      	ldr	r2, [pc, #212]	; (8005ff8 <__kernel_cos+0x164>)
 8005f24:	4b35      	ldr	r3, [pc, #212]	; (8005ffc <__kernel_cos+0x168>)
 8005f26:	f7fa ff75 	bl	8000e14 <__aeabi_dadd>
 8005f2a:	0022      	movs	r2, r4
 8005f2c:	002b      	movs	r3, r5
 8005f2e:	f7fb feaf 	bl	8001c90 <__aeabi_dmul>
 8005f32:	0022      	movs	r2, r4
 8005f34:	002b      	movs	r3, r5
 8005f36:	f7fb feab 	bl	8001c90 <__aeabi_dmul>
 8005f3a:	9a04      	ldr	r2, [sp, #16]
 8005f3c:	9b05      	ldr	r3, [sp, #20]
 8005f3e:	0004      	movs	r4, r0
 8005f40:	000d      	movs	r5, r1
 8005f42:	0038      	movs	r0, r7
 8005f44:	0031      	movs	r1, r6
 8005f46:	f7fb fea3 	bl	8001c90 <__aeabi_dmul>
 8005f4a:	0002      	movs	r2, r0
 8005f4c:	000b      	movs	r3, r1
 8005f4e:	0020      	movs	r0, r4
 8005f50:	0029      	movs	r1, r5
 8005f52:	f7fc f909 	bl	8002168 <__aeabi_dsub>
 8005f56:	4b2a      	ldr	r3, [pc, #168]	; (8006000 <__kernel_cos+0x16c>)
 8005f58:	9a00      	ldr	r2, [sp, #0]
 8005f5a:	0004      	movs	r4, r0
 8005f5c:	000d      	movs	r5, r1
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	dc0d      	bgt.n	8005f7e <__kernel_cos+0xea>
 8005f62:	0002      	movs	r2, r0
 8005f64:	000b      	movs	r3, r1
 8005f66:	9802      	ldr	r0, [sp, #8]
 8005f68:	9903      	ldr	r1, [sp, #12]
 8005f6a:	f7fc f8fd 	bl	8002168 <__aeabi_dsub>
 8005f6e:	0002      	movs	r2, r0
 8005f70:	2000      	movs	r0, #0
 8005f72:	000b      	movs	r3, r1
 8005f74:	4923      	ldr	r1, [pc, #140]	; (8006004 <__kernel_cos+0x170>)
 8005f76:	f7fc f8f7 	bl	8002168 <__aeabi_dsub>
 8005f7a:	b007      	add	sp, #28
 8005f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f7e:	4b22      	ldr	r3, [pc, #136]	; (8006008 <__kernel_cos+0x174>)
 8005f80:	9a00      	ldr	r2, [sp, #0]
 8005f82:	2600      	movs	r6, #0
 8005f84:	429a      	cmp	r2, r3
 8005f86:	dc1b      	bgt.n	8005fc0 <__kernel_cos+0x12c>
 8005f88:	0013      	movs	r3, r2
 8005f8a:	4a20      	ldr	r2, [pc, #128]	; (800600c <__kernel_cos+0x178>)
 8005f8c:	4694      	mov	ip, r2
 8005f8e:	4463      	add	r3, ip
 8005f90:	001f      	movs	r7, r3
 8005f92:	0032      	movs	r2, r6
 8005f94:	003b      	movs	r3, r7
 8005f96:	2000      	movs	r0, #0
 8005f98:	491a      	ldr	r1, [pc, #104]	; (8006004 <__kernel_cos+0x170>)
 8005f9a:	f7fc f8e5 	bl	8002168 <__aeabi_dsub>
 8005f9e:	0032      	movs	r2, r6
 8005fa0:	003b      	movs	r3, r7
 8005fa2:	9000      	str	r0, [sp, #0]
 8005fa4:	9101      	str	r1, [sp, #4]
 8005fa6:	9802      	ldr	r0, [sp, #8]
 8005fa8:	9903      	ldr	r1, [sp, #12]
 8005faa:	f7fc f8dd 	bl	8002168 <__aeabi_dsub>
 8005fae:	0022      	movs	r2, r4
 8005fb0:	002b      	movs	r3, r5
 8005fb2:	f7fc f8d9 	bl	8002168 <__aeabi_dsub>
 8005fb6:	0002      	movs	r2, r0
 8005fb8:	000b      	movs	r3, r1
 8005fba:	9800      	ldr	r0, [sp, #0]
 8005fbc:	9901      	ldr	r1, [sp, #4]
 8005fbe:	e7da      	b.n	8005f76 <__kernel_cos+0xe2>
 8005fc0:	4f13      	ldr	r7, [pc, #76]	; (8006010 <__kernel_cos+0x17c>)
 8005fc2:	e7e6      	b.n	8005f92 <__kernel_cos+0xfe>
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	490f      	ldr	r1, [pc, #60]	; (8006004 <__kernel_cos+0x170>)
 8005fc8:	e7d7      	b.n	8005f7a <__kernel_cos+0xe6>
 8005fca:	46c0      	nop			; (mov r8, r8)
 8005fcc:	3fe00000 	.word	0x3fe00000
 8005fd0:	be8838d4 	.word	0xbe8838d4
 8005fd4:	bda8fae9 	.word	0xbda8fae9
 8005fd8:	bdb4b1c4 	.word	0xbdb4b1c4
 8005fdc:	3e21ee9e 	.word	0x3e21ee9e
 8005fe0:	809c52ad 	.word	0x809c52ad
 8005fe4:	3e927e4f 	.word	0x3e927e4f
 8005fe8:	19cb1590 	.word	0x19cb1590
 8005fec:	3efa01a0 	.word	0x3efa01a0
 8005ff0:	16c15177 	.word	0x16c15177
 8005ff4:	3f56c16c 	.word	0x3f56c16c
 8005ff8:	5555554c 	.word	0x5555554c
 8005ffc:	3fa55555 	.word	0x3fa55555
 8006000:	3fd33332 	.word	0x3fd33332
 8006004:	3ff00000 	.word	0x3ff00000
 8006008:	3fe90000 	.word	0x3fe90000
 800600c:	ffe00000 	.word	0xffe00000
 8006010:	3fd20000 	.word	0x3fd20000

08006014 <__kernel_rem_pio2>:
 8006014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006016:	4ccb      	ldr	r4, [pc, #812]	; (8006344 <__kernel_rem_pio2+0x330>)
 8006018:	44a5      	add	sp, r4
 800601a:	930d      	str	r3, [sp, #52]	; 0x34
 800601c:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800601e:	0014      	movs	r4, r2
 8006020:	009a      	lsls	r2, r3, #2
 8006022:	4bc9      	ldr	r3, [pc, #804]	; (8006348 <__kernel_rem_pio2+0x334>)
 8006024:	900e      	str	r0, [sp, #56]	; 0x38
 8006026:	58d3      	ldr	r3, [r2, r3]
 8006028:	9107      	str	r1, [sp, #28]
 800602a:	930a      	str	r3, [sp, #40]	; 0x28
 800602c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800602e:	3b01      	subs	r3, #1
 8006030:	930c      	str	r3, [sp, #48]	; 0x30
 8006032:	2300      	movs	r3, #0
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	0023      	movs	r3, r4
 8006038:	3314      	adds	r3, #20
 800603a:	db04      	blt.n	8006046 <__kernel_rem_pio2+0x32>
 800603c:	2118      	movs	r1, #24
 800603e:	1ee0      	subs	r0, r4, #3
 8006040:	f7fa f8ec 	bl	800021c <__divsi3>
 8006044:	9000      	str	r0, [sp, #0]
 8006046:	2218      	movs	r2, #24
 8006048:	9b00      	ldr	r3, [sp, #0]
 800604a:	4252      	negs	r2, r2
 800604c:	3301      	adds	r3, #1
 800604e:	435a      	muls	r2, r3
 8006050:	1913      	adds	r3, r2, r4
 8006052:	9302      	str	r3, [sp, #8]
 8006054:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006056:	9b00      	ldr	r3, [sp, #0]
 8006058:	ae26      	add	r6, sp, #152	; 0x98
 800605a:	1a9d      	subs	r5, r3, r2
 800605c:	002c      	movs	r4, r5
 800605e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006060:	189f      	adds	r7, r3, r2
 8006062:	1b63      	subs	r3, r4, r5
 8006064:	429f      	cmp	r7, r3
 8006066:	da0f      	bge.n	8006088 <__kernel_rem_pio2+0x74>
 8006068:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800606a:	af76      	add	r7, sp, #472	; 0x1d8
 800606c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800606e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006070:	1af3      	subs	r3, r6, r3
 8006072:	429a      	cmp	r2, r3
 8006074:	db30      	blt.n	80060d8 <__kernel_rem_pio2+0xc4>
 8006076:	ab26      	add	r3, sp, #152	; 0x98
 8006078:	00f4      	lsls	r4, r6, #3
 800607a:	2200      	movs	r2, #0
 800607c:	18e4      	adds	r4, r4, r3
 800607e:	2300      	movs	r3, #0
 8006080:	2500      	movs	r5, #0
 8006082:	9204      	str	r2, [sp, #16]
 8006084:	9305      	str	r3, [sp, #20]
 8006086:	e01e      	b.n	80060c6 <__kernel_rem_pio2+0xb2>
 8006088:	2c00      	cmp	r4, #0
 800608a:	db07      	blt.n	800609c <__kernel_rem_pio2+0x88>
 800608c:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 800608e:	00a3      	lsls	r3, r4, #2
 8006090:	58d0      	ldr	r0, [r2, r3]
 8006092:	f7fc fc4f 	bl	8002934 <__aeabi_i2d>
 8006096:	c603      	stmia	r6!, {r0, r1}
 8006098:	3401      	adds	r4, #1
 800609a:	e7e2      	b.n	8006062 <__kernel_rem_pio2+0x4e>
 800609c:	2000      	movs	r0, #0
 800609e:	2100      	movs	r1, #0
 80060a0:	e7f9      	b.n	8006096 <__kernel_rem_pio2+0x82>
 80060a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060a4:	00e9      	lsls	r1, r5, #3
 80060a6:	1859      	adds	r1, r3, r1
 80060a8:	6808      	ldr	r0, [r1, #0]
 80060aa:	6849      	ldr	r1, [r1, #4]
 80060ac:	6822      	ldr	r2, [r4, #0]
 80060ae:	6863      	ldr	r3, [r4, #4]
 80060b0:	f7fb fdee 	bl	8001c90 <__aeabi_dmul>
 80060b4:	0002      	movs	r2, r0
 80060b6:	000b      	movs	r3, r1
 80060b8:	9804      	ldr	r0, [sp, #16]
 80060ba:	9905      	ldr	r1, [sp, #20]
 80060bc:	f7fa feaa 	bl	8000e14 <__aeabi_dadd>
 80060c0:	9004      	str	r0, [sp, #16]
 80060c2:	9105      	str	r1, [sp, #20]
 80060c4:	3501      	adds	r5, #1
 80060c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060c8:	3c08      	subs	r4, #8
 80060ca:	429d      	cmp	r5, r3
 80060cc:	dde9      	ble.n	80060a2 <__kernel_rem_pio2+0x8e>
 80060ce:	9b04      	ldr	r3, [sp, #16]
 80060d0:	9c05      	ldr	r4, [sp, #20]
 80060d2:	3601      	adds	r6, #1
 80060d4:	c718      	stmia	r7!, {r3, r4}
 80060d6:	e7c9      	b.n	800606c <__kernel_rem_pio2+0x58>
 80060d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060da:	aa12      	add	r2, sp, #72	; 0x48
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	189b      	adds	r3, r3, r2
 80060e0:	9310      	str	r3, [sp, #64]	; 0x40
 80060e2:	9b00      	ldr	r3, [sp, #0]
 80060e4:	0098      	lsls	r0, r3, #2
 80060e6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80060e8:	181b      	adds	r3, r3, r0
 80060ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80060ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060ee:	9304      	str	r3, [sp, #16]
 80060f0:	9b04      	ldr	r3, [sp, #16]
 80060f2:	aa76      	add	r2, sp, #472	; 0x1d8
 80060f4:	00db      	lsls	r3, r3, #3
 80060f6:	18d3      	adds	r3, r2, r3
 80060f8:	681c      	ldr	r4, [r3, #0]
 80060fa:	685d      	ldr	r5, [r3, #4]
 80060fc:	ab12      	add	r3, sp, #72	; 0x48
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	9309      	str	r3, [sp, #36]	; 0x24
 8006102:	9b04      	ldr	r3, [sp, #16]
 8006104:	9211      	str	r2, [sp, #68]	; 0x44
 8006106:	9308      	str	r3, [sp, #32]
 8006108:	9b08      	ldr	r3, [sp, #32]
 800610a:	2b00      	cmp	r3, #0
 800610c:	dc74      	bgt.n	80061f8 <__kernel_rem_pio2+0x1e4>
 800610e:	0020      	movs	r0, r4
 8006110:	0029      	movs	r1, r5
 8006112:	9a02      	ldr	r2, [sp, #8]
 8006114:	f000 fc28 	bl	8006968 <scalbn>
 8006118:	23ff      	movs	r3, #255	; 0xff
 800611a:	2200      	movs	r2, #0
 800611c:	059b      	lsls	r3, r3, #22
 800611e:	0004      	movs	r4, r0
 8006120:	000d      	movs	r5, r1
 8006122:	f7fb fdb5 	bl	8001c90 <__aeabi_dmul>
 8006126:	f000 fb8f 	bl	8006848 <floor>
 800612a:	2200      	movs	r2, #0
 800612c:	4b87      	ldr	r3, [pc, #540]	; (800634c <__kernel_rem_pio2+0x338>)
 800612e:	f7fb fdaf 	bl	8001c90 <__aeabi_dmul>
 8006132:	0002      	movs	r2, r0
 8006134:	000b      	movs	r3, r1
 8006136:	0020      	movs	r0, r4
 8006138:	0029      	movs	r1, r5
 800613a:	f7fc f815 	bl	8002168 <__aeabi_dsub>
 800613e:	000d      	movs	r5, r1
 8006140:	0004      	movs	r4, r0
 8006142:	f7fc fbc1 	bl	80028c8 <__aeabi_d2iz>
 8006146:	9009      	str	r0, [sp, #36]	; 0x24
 8006148:	f7fc fbf4 	bl	8002934 <__aeabi_i2d>
 800614c:	000b      	movs	r3, r1
 800614e:	0002      	movs	r2, r0
 8006150:	0029      	movs	r1, r5
 8006152:	0020      	movs	r0, r4
 8006154:	f7fc f808 	bl	8002168 <__aeabi_dsub>
 8006158:	9b02      	ldr	r3, [sp, #8]
 800615a:	0006      	movs	r6, r0
 800615c:	000f      	movs	r7, r1
 800615e:	2b00      	cmp	r3, #0
 8006160:	dd74      	ble.n	800624c <__kernel_rem_pio2+0x238>
 8006162:	2118      	movs	r1, #24
 8006164:	9b04      	ldr	r3, [sp, #16]
 8006166:	aa12      	add	r2, sp, #72	; 0x48
 8006168:	3b01      	subs	r3, #1
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	589a      	ldr	r2, [r3, r2]
 800616e:	9802      	ldr	r0, [sp, #8]
 8006170:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006172:	1a09      	subs	r1, r1, r0
 8006174:	0010      	movs	r0, r2
 8006176:	4108      	asrs	r0, r1
 8006178:	1824      	adds	r4, r4, r0
 800617a:	4088      	lsls	r0, r1
 800617c:	a912      	add	r1, sp, #72	; 0x48
 800617e:	1a12      	subs	r2, r2, r0
 8006180:	505a      	str	r2, [r3, r1]
 8006182:	2317      	movs	r3, #23
 8006184:	9902      	ldr	r1, [sp, #8]
 8006186:	9409      	str	r4, [sp, #36]	; 0x24
 8006188:	1a5b      	subs	r3, r3, r1
 800618a:	411a      	asrs	r2, r3
 800618c:	9208      	str	r2, [sp, #32]
 800618e:	9b08      	ldr	r3, [sp, #32]
 8006190:	2b00      	cmp	r3, #0
 8006192:	dd6d      	ble.n	8006270 <__kernel_rem_pio2+0x25c>
 8006194:	2200      	movs	r2, #0
 8006196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006198:	2080      	movs	r0, #128	; 0x80
 800619a:	3301      	adds	r3, #1
 800619c:	9309      	str	r3, [sp, #36]	; 0x24
 800619e:	4b6c      	ldr	r3, [pc, #432]	; (8006350 <__kernel_rem_pio2+0x33c>)
 80061a0:	0014      	movs	r4, r2
 80061a2:	469c      	mov	ip, r3
 80061a4:	2501      	movs	r5, #1
 80061a6:	0440      	lsls	r0, r0, #17
 80061a8:	9b04      	ldr	r3, [sp, #16]
 80061aa:	4293      	cmp	r3, r2
 80061ac:	dd00      	ble.n	80061b0 <__kernel_rem_pio2+0x19c>
 80061ae:	e099      	b.n	80062e4 <__kernel_rem_pio2+0x2d0>
 80061b0:	9b02      	ldr	r3, [sp, #8]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	dd05      	ble.n	80061c2 <__kernel_rem_pio2+0x1ae>
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d100      	bne.n	80061bc <__kernel_rem_pio2+0x1a8>
 80061ba:	e0a9      	b.n	8006310 <__kernel_rem_pio2+0x2fc>
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d100      	bne.n	80061c2 <__kernel_rem_pio2+0x1ae>
 80061c0:	e0b1      	b.n	8006326 <__kernel_rem_pio2+0x312>
 80061c2:	9b08      	ldr	r3, [sp, #32]
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d153      	bne.n	8006270 <__kernel_rem_pio2+0x25c>
 80061c8:	0032      	movs	r2, r6
 80061ca:	003b      	movs	r3, r7
 80061cc:	2000      	movs	r0, #0
 80061ce:	4961      	ldr	r1, [pc, #388]	; (8006354 <__kernel_rem_pio2+0x340>)
 80061d0:	f7fb ffca 	bl	8002168 <__aeabi_dsub>
 80061d4:	0006      	movs	r6, r0
 80061d6:	000f      	movs	r7, r1
 80061d8:	2c00      	cmp	r4, #0
 80061da:	d049      	beq.n	8006270 <__kernel_rem_pio2+0x25c>
 80061dc:	9a02      	ldr	r2, [sp, #8]
 80061de:	2000      	movs	r0, #0
 80061e0:	495c      	ldr	r1, [pc, #368]	; (8006354 <__kernel_rem_pio2+0x340>)
 80061e2:	f000 fbc1 	bl	8006968 <scalbn>
 80061e6:	0002      	movs	r2, r0
 80061e8:	000b      	movs	r3, r1
 80061ea:	0030      	movs	r0, r6
 80061ec:	0039      	movs	r1, r7
 80061ee:	f7fb ffbb 	bl	8002168 <__aeabi_dsub>
 80061f2:	0006      	movs	r6, r0
 80061f4:	000f      	movs	r7, r1
 80061f6:	e03b      	b.n	8006270 <__kernel_rem_pio2+0x25c>
 80061f8:	2200      	movs	r2, #0
 80061fa:	4b57      	ldr	r3, [pc, #348]	; (8006358 <__kernel_rem_pio2+0x344>)
 80061fc:	0020      	movs	r0, r4
 80061fe:	0029      	movs	r1, r5
 8006200:	f7fb fd46 	bl	8001c90 <__aeabi_dmul>
 8006204:	f7fc fb60 	bl	80028c8 <__aeabi_d2iz>
 8006208:	f7fc fb94 	bl	8002934 <__aeabi_i2d>
 800620c:	2200      	movs	r2, #0
 800620e:	4b53      	ldr	r3, [pc, #332]	; (800635c <__kernel_rem_pio2+0x348>)
 8006210:	0006      	movs	r6, r0
 8006212:	000f      	movs	r7, r1
 8006214:	f7fb fd3c 	bl	8001c90 <__aeabi_dmul>
 8006218:	0002      	movs	r2, r0
 800621a:	000b      	movs	r3, r1
 800621c:	0020      	movs	r0, r4
 800621e:	0029      	movs	r1, r5
 8006220:	f7fb ffa2 	bl	8002168 <__aeabi_dsub>
 8006224:	f7fc fb50 	bl	80028c8 <__aeabi_d2iz>
 8006228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800622a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800622c:	c301      	stmia	r3!, {r0}
 800622e:	9309      	str	r3, [sp, #36]	; 0x24
 8006230:	9b08      	ldr	r3, [sp, #32]
 8006232:	0030      	movs	r0, r6
 8006234:	3b01      	subs	r3, #1
 8006236:	9308      	str	r3, [sp, #32]
 8006238:	00db      	lsls	r3, r3, #3
 800623a:	18d3      	adds	r3, r2, r3
 800623c:	0039      	movs	r1, r7
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	f7fa fde7 	bl	8000e14 <__aeabi_dadd>
 8006246:	0004      	movs	r4, r0
 8006248:	000d      	movs	r5, r1
 800624a:	e75d      	b.n	8006108 <__kernel_rem_pio2+0xf4>
 800624c:	9b02      	ldr	r3, [sp, #8]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d107      	bne.n	8006262 <__kernel_rem_pio2+0x24e>
 8006252:	9b04      	ldr	r3, [sp, #16]
 8006254:	aa12      	add	r2, sp, #72	; 0x48
 8006256:	3b01      	subs	r3, #1
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	5898      	ldr	r0, [r3, r2]
 800625c:	15c3      	asrs	r3, r0, #23
 800625e:	9308      	str	r3, [sp, #32]
 8006260:	e795      	b.n	800618e <__kernel_rem_pio2+0x17a>
 8006262:	2200      	movs	r2, #0
 8006264:	4b3e      	ldr	r3, [pc, #248]	; (8006360 <__kernel_rem_pio2+0x34c>)
 8006266:	f7fa f8f9 	bl	800045c <__aeabi_dcmpge>
 800626a:	2800      	cmp	r0, #0
 800626c:	d137      	bne.n	80062de <__kernel_rem_pio2+0x2ca>
 800626e:	9008      	str	r0, [sp, #32]
 8006270:	2200      	movs	r2, #0
 8006272:	2300      	movs	r3, #0
 8006274:	0030      	movs	r0, r6
 8006276:	0039      	movs	r1, r7
 8006278:	f7fa f8cc 	bl	8000414 <__aeabi_dcmpeq>
 800627c:	2800      	cmp	r0, #0
 800627e:	d100      	bne.n	8006282 <__kernel_rem_pio2+0x26e>
 8006280:	e0b9      	b.n	80063f6 <__kernel_rem_pio2+0x3e2>
 8006282:	2200      	movs	r2, #0
 8006284:	9b04      	ldr	r3, [sp, #16]
 8006286:	3b01      	subs	r3, #1
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800628c:	428b      	cmp	r3, r1
 800628e:	da53      	bge.n	8006338 <__kernel_rem_pio2+0x324>
 8006290:	2a00      	cmp	r2, #0
 8006292:	d100      	bne.n	8006296 <__kernel_rem_pio2+0x282>
 8006294:	e095      	b.n	80063c2 <__kernel_rem_pio2+0x3ae>
 8006296:	9b02      	ldr	r3, [sp, #8]
 8006298:	aa12      	add	r2, sp, #72	; 0x48
 800629a:	3b18      	subs	r3, #24
 800629c:	9302      	str	r3, [sp, #8]
 800629e:	9b00      	ldr	r3, [sp, #0]
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	589b      	ldr	r3, [r3, r2]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d100      	bne.n	80062aa <__kernel_rem_pio2+0x296>
 80062a8:	e0a1      	b.n	80063ee <__kernel_rem_pio2+0x3da>
 80062aa:	2000      	movs	r0, #0
 80062ac:	9a02      	ldr	r2, [sp, #8]
 80062ae:	4929      	ldr	r1, [pc, #164]	; (8006354 <__kernel_rem_pio2+0x340>)
 80062b0:	f000 fb5a 	bl	8006968 <scalbn>
 80062b4:	0006      	movs	r6, r0
 80062b6:	000f      	movs	r7, r1
 80062b8:	9c00      	ldr	r4, [sp, #0]
 80062ba:	2c00      	cmp	r4, #0
 80062bc:	db00      	blt.n	80062c0 <__kernel_rem_pio2+0x2ac>
 80062be:	e0d9      	b.n	8006474 <__kernel_rem_pio2+0x460>
 80062c0:	9c00      	ldr	r4, [sp, #0]
 80062c2:	2c00      	cmp	r4, #0
 80062c4:	da00      	bge.n	80062c8 <__kernel_rem_pio2+0x2b4>
 80062c6:	e10c      	b.n	80064e2 <__kernel_rem_pio2+0x4ce>
 80062c8:	ab76      	add	r3, sp, #472	; 0x1d8
 80062ca:	00e6      	lsls	r6, r4, #3
 80062cc:	2200      	movs	r2, #0
 80062ce:	18f6      	adds	r6, r6, r3
 80062d0:	2300      	movs	r3, #0
 80062d2:	9202      	str	r2, [sp, #8]
 80062d4:	9303      	str	r3, [sp, #12]
 80062d6:	9b00      	ldr	r3, [sp, #0]
 80062d8:	2500      	movs	r5, #0
 80062da:	1b1f      	subs	r7, r3, r4
 80062dc:	e0f3      	b.n	80064c6 <__kernel_rem_pio2+0x4b2>
 80062de:	2302      	movs	r3, #2
 80062e0:	9308      	str	r3, [sp, #32]
 80062e2:	e757      	b.n	8006194 <__kernel_rem_pio2+0x180>
 80062e4:	9b00      	ldr	r3, [sp, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2c00      	cmp	r4, #0
 80062ea:	d10b      	bne.n	8006304 <__kernel_rem_pio2+0x2f0>
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d003      	beq.n	80062f8 <__kernel_rem_pio2+0x2e4>
 80062f0:	9c00      	ldr	r4, [sp, #0]
 80062f2:	1ac3      	subs	r3, r0, r3
 80062f4:	6023      	str	r3, [r4, #0]
 80062f6:	002b      	movs	r3, r5
 80062f8:	9c00      	ldr	r4, [sp, #0]
 80062fa:	3201      	adds	r2, #1
 80062fc:	3404      	adds	r4, #4
 80062fe:	9400      	str	r4, [sp, #0]
 8006300:	001c      	movs	r4, r3
 8006302:	e751      	b.n	80061a8 <__kernel_rem_pio2+0x194>
 8006304:	4661      	mov	r1, ip
 8006306:	1acb      	subs	r3, r1, r3
 8006308:	9900      	ldr	r1, [sp, #0]
 800630a:	600b      	str	r3, [r1, #0]
 800630c:	0023      	movs	r3, r4
 800630e:	e7f3      	b.n	80062f8 <__kernel_rem_pio2+0x2e4>
 8006310:	9b04      	ldr	r3, [sp, #16]
 8006312:	aa12      	add	r2, sp, #72	; 0x48
 8006314:	3b01      	subs	r3, #1
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	589a      	ldr	r2, [r3, r2]
 800631a:	9200      	str	r2, [sp, #0]
 800631c:	0252      	lsls	r2, r2, #9
 800631e:	0a52      	lsrs	r2, r2, #9
 8006320:	a912      	add	r1, sp, #72	; 0x48
 8006322:	505a      	str	r2, [r3, r1]
 8006324:	e74d      	b.n	80061c2 <__kernel_rem_pio2+0x1ae>
 8006326:	9b04      	ldr	r3, [sp, #16]
 8006328:	aa12      	add	r2, sp, #72	; 0x48
 800632a:	3b01      	subs	r3, #1
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	589a      	ldr	r2, [r3, r2]
 8006330:	9200      	str	r2, [sp, #0]
 8006332:	0292      	lsls	r2, r2, #10
 8006334:	0a92      	lsrs	r2, r2, #10
 8006336:	e7f3      	b.n	8006320 <__kernel_rem_pio2+0x30c>
 8006338:	0099      	lsls	r1, r3, #2
 800633a:	a812      	add	r0, sp, #72	; 0x48
 800633c:	5809      	ldr	r1, [r1, r0]
 800633e:	3b01      	subs	r3, #1
 8006340:	430a      	orrs	r2, r1
 8006342:	e7a2      	b.n	800628a <__kernel_rem_pio2+0x276>
 8006344:	fffffd84 	.word	0xfffffd84
 8006348:	08006d68 	.word	0x08006d68
 800634c:	40200000 	.word	0x40200000
 8006350:	00ffffff 	.word	0x00ffffff
 8006354:	3ff00000 	.word	0x3ff00000
 8006358:	3e700000 	.word	0x3e700000
 800635c:	41700000 	.word	0x41700000
 8006360:	3fe00000 	.word	0x3fe00000
 8006364:	3301      	adds	r3, #1
 8006366:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006368:	009a      	lsls	r2, r3, #2
 800636a:	4252      	negs	r2, r2
 800636c:	588a      	ldr	r2, [r1, r2]
 800636e:	2a00      	cmp	r2, #0
 8006370:	d0f8      	beq.n	8006364 <__kernel_rem_pio2+0x350>
 8006372:	9a04      	ldr	r2, [sp, #16]
 8006374:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006376:	1c57      	adds	r7, r2, #1
 8006378:	1854      	adds	r4, r2, r1
 800637a:	00e4      	lsls	r4, r4, #3
 800637c:	aa26      	add	r2, sp, #152	; 0x98
 800637e:	1914      	adds	r4, r2, r4
 8006380:	9a04      	ldr	r2, [sp, #16]
 8006382:	18d3      	adds	r3, r2, r3
 8006384:	9304      	str	r3, [sp, #16]
 8006386:	9b04      	ldr	r3, [sp, #16]
 8006388:	42bb      	cmp	r3, r7
 800638a:	da00      	bge.n	800638e <__kernel_rem_pio2+0x37a>
 800638c:	e6b0      	b.n	80060f0 <__kernel_rem_pio2+0xdc>
 800638e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006390:	00bb      	lsls	r3, r7, #2
 8006392:	58d0      	ldr	r0, [r2, r3]
 8006394:	f7fc face 	bl	8002934 <__aeabi_i2d>
 8006398:	2200      	movs	r2, #0
 800639a:	2300      	movs	r3, #0
 800639c:	0026      	movs	r6, r4
 800639e:	2500      	movs	r5, #0
 80063a0:	6020      	str	r0, [r4, #0]
 80063a2:	6061      	str	r1, [r4, #4]
 80063a4:	9200      	str	r2, [sp, #0]
 80063a6:	9301      	str	r3, [sp, #4]
 80063a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063aa:	429d      	cmp	r5, r3
 80063ac:	dd0b      	ble.n	80063c6 <__kernel_rem_pio2+0x3b2>
 80063ae:	00fb      	lsls	r3, r7, #3
 80063b0:	aa76      	add	r2, sp, #472	; 0x1d8
 80063b2:	18d3      	adds	r3, r2, r3
 80063b4:	3701      	adds	r7, #1
 80063b6:	9900      	ldr	r1, [sp, #0]
 80063b8:	9a01      	ldr	r2, [sp, #4]
 80063ba:	3408      	adds	r4, #8
 80063bc:	6019      	str	r1, [r3, #0]
 80063be:	605a      	str	r2, [r3, #4]
 80063c0:	e7e1      	b.n	8006386 <__kernel_rem_pio2+0x372>
 80063c2:	2301      	movs	r3, #1
 80063c4:	e7cf      	b.n	8006366 <__kernel_rem_pio2+0x352>
 80063c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063c8:	00e9      	lsls	r1, r5, #3
 80063ca:	1859      	adds	r1, r3, r1
 80063cc:	6808      	ldr	r0, [r1, #0]
 80063ce:	6849      	ldr	r1, [r1, #4]
 80063d0:	6832      	ldr	r2, [r6, #0]
 80063d2:	6873      	ldr	r3, [r6, #4]
 80063d4:	f7fb fc5c 	bl	8001c90 <__aeabi_dmul>
 80063d8:	0002      	movs	r2, r0
 80063da:	000b      	movs	r3, r1
 80063dc:	9800      	ldr	r0, [sp, #0]
 80063de:	9901      	ldr	r1, [sp, #4]
 80063e0:	f7fa fd18 	bl	8000e14 <__aeabi_dadd>
 80063e4:	3501      	adds	r5, #1
 80063e6:	9000      	str	r0, [sp, #0]
 80063e8:	9101      	str	r1, [sp, #4]
 80063ea:	3e08      	subs	r6, #8
 80063ec:	e7dc      	b.n	80063a8 <__kernel_rem_pio2+0x394>
 80063ee:	9b00      	ldr	r3, [sp, #0]
 80063f0:	3b01      	subs	r3, #1
 80063f2:	9300      	str	r3, [sp, #0]
 80063f4:	e74f      	b.n	8006296 <__kernel_rem_pio2+0x282>
 80063f6:	9b02      	ldr	r3, [sp, #8]
 80063f8:	0030      	movs	r0, r6
 80063fa:	425a      	negs	r2, r3
 80063fc:	0039      	movs	r1, r7
 80063fe:	f000 fab3 	bl	8006968 <scalbn>
 8006402:	2200      	movs	r2, #0
 8006404:	4bb5      	ldr	r3, [pc, #724]	; (80066dc <__kernel_rem_pio2+0x6c8>)
 8006406:	0004      	movs	r4, r0
 8006408:	000d      	movs	r5, r1
 800640a:	f7fa f827 	bl	800045c <__aeabi_dcmpge>
 800640e:	2800      	cmp	r0, #0
 8006410:	d025      	beq.n	800645e <__kernel_rem_pio2+0x44a>
 8006412:	2200      	movs	r2, #0
 8006414:	4bb2      	ldr	r3, [pc, #712]	; (80066e0 <__kernel_rem_pio2+0x6cc>)
 8006416:	0020      	movs	r0, r4
 8006418:	0029      	movs	r1, r5
 800641a:	f7fb fc39 	bl	8001c90 <__aeabi_dmul>
 800641e:	f7fc fa53 	bl	80028c8 <__aeabi_d2iz>
 8006422:	9b04      	ldr	r3, [sp, #16]
 8006424:	0006      	movs	r6, r0
 8006426:	009f      	lsls	r7, r3, #2
 8006428:	f7fc fa84 	bl	8002934 <__aeabi_i2d>
 800642c:	2200      	movs	r2, #0
 800642e:	4bab      	ldr	r3, [pc, #684]	; (80066dc <__kernel_rem_pio2+0x6c8>)
 8006430:	f7fb fc2e 	bl	8001c90 <__aeabi_dmul>
 8006434:	0002      	movs	r2, r0
 8006436:	000b      	movs	r3, r1
 8006438:	0020      	movs	r0, r4
 800643a:	0029      	movs	r1, r5
 800643c:	f7fb fe94 	bl	8002168 <__aeabi_dsub>
 8006440:	f7fc fa42 	bl	80028c8 <__aeabi_d2iz>
 8006444:	ab12      	add	r3, sp, #72	; 0x48
 8006446:	51d8      	str	r0, [r3, r7]
 8006448:	9b04      	ldr	r3, [sp, #16]
 800644a:	aa12      	add	r2, sp, #72	; 0x48
 800644c:	3301      	adds	r3, #1
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	9b02      	ldr	r3, [sp, #8]
 8006452:	3318      	adds	r3, #24
 8006454:	9302      	str	r3, [sp, #8]
 8006456:	9b00      	ldr	r3, [sp, #0]
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	509e      	str	r6, [r3, r2]
 800645c:	e725      	b.n	80062aa <__kernel_rem_pio2+0x296>
 800645e:	9b04      	ldr	r3, [sp, #16]
 8006460:	0020      	movs	r0, r4
 8006462:	0029      	movs	r1, r5
 8006464:	009e      	lsls	r6, r3, #2
 8006466:	f7fc fa2f 	bl	80028c8 <__aeabi_d2iz>
 800646a:	ab12      	add	r3, sp, #72	; 0x48
 800646c:	5198      	str	r0, [r3, r6]
 800646e:	9b04      	ldr	r3, [sp, #16]
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	e71a      	b.n	80062aa <__kernel_rem_pio2+0x296>
 8006474:	00e5      	lsls	r5, r4, #3
 8006476:	ab76      	add	r3, sp, #472	; 0x1d8
 8006478:	aa12      	add	r2, sp, #72	; 0x48
 800647a:	195d      	adds	r5, r3, r5
 800647c:	00a3      	lsls	r3, r4, #2
 800647e:	5898      	ldr	r0, [r3, r2]
 8006480:	f7fc fa58 	bl	8002934 <__aeabi_i2d>
 8006484:	0032      	movs	r2, r6
 8006486:	003b      	movs	r3, r7
 8006488:	f7fb fc02 	bl	8001c90 <__aeabi_dmul>
 800648c:	2200      	movs	r2, #0
 800648e:	6028      	str	r0, [r5, #0]
 8006490:	6069      	str	r1, [r5, #4]
 8006492:	4b93      	ldr	r3, [pc, #588]	; (80066e0 <__kernel_rem_pio2+0x6cc>)
 8006494:	0030      	movs	r0, r6
 8006496:	0039      	movs	r1, r7
 8006498:	f7fb fbfa 	bl	8001c90 <__aeabi_dmul>
 800649c:	3c01      	subs	r4, #1
 800649e:	0006      	movs	r6, r0
 80064a0:	000f      	movs	r7, r1
 80064a2:	e70a      	b.n	80062ba <__kernel_rem_pio2+0x2a6>
 80064a4:	4b8f      	ldr	r3, [pc, #572]	; (80066e4 <__kernel_rem_pio2+0x6d0>)
 80064a6:	00e9      	lsls	r1, r5, #3
 80064a8:	1859      	adds	r1, r3, r1
 80064aa:	6808      	ldr	r0, [r1, #0]
 80064ac:	6849      	ldr	r1, [r1, #4]
 80064ae:	ce0c      	ldmia	r6!, {r2, r3}
 80064b0:	f7fb fbee 	bl	8001c90 <__aeabi_dmul>
 80064b4:	0002      	movs	r2, r0
 80064b6:	000b      	movs	r3, r1
 80064b8:	9802      	ldr	r0, [sp, #8]
 80064ba:	9903      	ldr	r1, [sp, #12]
 80064bc:	f7fa fcaa 	bl	8000e14 <__aeabi_dadd>
 80064c0:	9002      	str	r0, [sp, #8]
 80064c2:	9103      	str	r1, [sp, #12]
 80064c4:	3501      	adds	r5, #1
 80064c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064c8:	429d      	cmp	r5, r3
 80064ca:	dc01      	bgt.n	80064d0 <__kernel_rem_pio2+0x4bc>
 80064cc:	42bd      	cmp	r5, r7
 80064ce:	dde9      	ble.n	80064a4 <__kernel_rem_pio2+0x490>
 80064d0:	ab4e      	add	r3, sp, #312	; 0x138
 80064d2:	00ff      	lsls	r7, r7, #3
 80064d4:	19df      	adds	r7, r3, r7
 80064d6:	3c01      	subs	r4, #1
 80064d8:	9a02      	ldr	r2, [sp, #8]
 80064da:	9b03      	ldr	r3, [sp, #12]
 80064dc:	603a      	str	r2, [r7, #0]
 80064de:	607b      	str	r3, [r7, #4]
 80064e0:	e6ef      	b.n	80062c2 <__kernel_rem_pio2+0x2ae>
 80064e2:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	dc0e      	bgt.n	8006506 <__kernel_rem_pio2+0x4f2>
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	dd00      	ble.n	80064ee <__kernel_rem_pio2+0x4da>
 80064ec:	e08c      	b.n	8006608 <__kernel_rem_pio2+0x5f4>
 80064ee:	2500      	movs	r5, #0
 80064f0:	002c      	movs	r4, r5
 80064f2:	42ab      	cmp	r3, r5
 80064f4:	d046      	beq.n	8006584 <__kernel_rem_pio2+0x570>
 80064f6:	2007      	movs	r0, #7
 80064f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064fa:	4003      	ands	r3, r0
 80064fc:	0018      	movs	r0, r3
 80064fe:	239f      	movs	r3, #159	; 0x9f
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	449d      	add	sp, r3
 8006504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006506:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006508:	2b03      	cmp	r3, #3
 800650a:	d1f4      	bne.n	80064f6 <__kernel_rem_pio2+0x4e2>
 800650c:	9b00      	ldr	r3, [sp, #0]
 800650e:	00dc      	lsls	r4, r3, #3
 8006510:	ab4e      	add	r3, sp, #312	; 0x138
 8006512:	191c      	adds	r4, r3, r4
 8006514:	0025      	movs	r5, r4
 8006516:	9b00      	ldr	r3, [sp, #0]
 8006518:	9302      	str	r3, [sp, #8]
 800651a:	9b02      	ldr	r3, [sp, #8]
 800651c:	3d08      	subs	r5, #8
 800651e:	2b00      	cmp	r3, #0
 8006520:	dd00      	ble.n	8006524 <__kernel_rem_pio2+0x510>
 8006522:	e07f      	b.n	8006624 <__kernel_rem_pio2+0x610>
 8006524:	9d00      	ldr	r5, [sp, #0]
 8006526:	3c08      	subs	r4, #8
 8006528:	2d01      	cmp	r5, #1
 800652a:	dd00      	ble.n	800652e <__kernel_rem_pio2+0x51a>
 800652c:	e09c      	b.n	8006668 <__kernel_rem_pio2+0x654>
 800652e:	2400      	movs	r4, #0
 8006530:	0021      	movs	r1, r4
 8006532:	9b00      	ldr	r3, [sp, #0]
 8006534:	2b01      	cmp	r3, #1
 8006536:	dd00      	ble.n	800653a <__kernel_rem_pio2+0x526>
 8006538:	e0b4      	b.n	80066a4 <__kernel_rem_pio2+0x690>
 800653a:	9b08      	ldr	r3, [sp, #32]
 800653c:	9f4e      	ldr	r7, [sp, #312]	; 0x138
 800653e:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
 8006540:	9d50      	ldr	r5, [sp, #320]	; 0x140
 8006542:	9851      	ldr	r0, [sp, #324]	; 0x144
 8006544:	2b00      	cmp	r3, #0
 8006546:	d000      	beq.n	800654a <__kernel_rem_pio2+0x536>
 8006548:	e0ba      	b.n	80066c0 <__kernel_rem_pio2+0x6ac>
 800654a:	0033      	movs	r3, r6
 800654c:	003a      	movs	r2, r7
 800654e:	9e07      	ldr	r6, [sp, #28]
 8006550:	6032      	str	r2, [r6, #0]
 8006552:	6073      	str	r3, [r6, #4]
 8006554:	002a      	movs	r2, r5
 8006556:	0003      	movs	r3, r0
 8006558:	60b2      	str	r2, [r6, #8]
 800655a:	60f3      	str	r3, [r6, #12]
 800655c:	0022      	movs	r2, r4
 800655e:	000b      	movs	r3, r1
 8006560:	6132      	str	r2, [r6, #16]
 8006562:	6173      	str	r3, [r6, #20]
 8006564:	e7c7      	b.n	80064f6 <__kernel_rem_pio2+0x4e2>
 8006566:	9b00      	ldr	r3, [sp, #0]
 8006568:	aa4e      	add	r2, sp, #312	; 0x138
 800656a:	00db      	lsls	r3, r3, #3
 800656c:	18d3      	adds	r3, r2, r3
 800656e:	0028      	movs	r0, r5
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	0021      	movs	r1, r4
 8006576:	f7fa fc4d 	bl	8000e14 <__aeabi_dadd>
 800657a:	0005      	movs	r5, r0
 800657c:	000c      	movs	r4, r1
 800657e:	9b00      	ldr	r3, [sp, #0]
 8006580:	3b01      	subs	r3, #1
 8006582:	9300      	str	r3, [sp, #0]
 8006584:	9b00      	ldr	r3, [sp, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	daed      	bge.n	8006566 <__kernel_rem_pio2+0x552>
 800658a:	9b08      	ldr	r3, [sp, #32]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <__kernel_rem_pio2+0x582>
 8006590:	2380      	movs	r3, #128	; 0x80
 8006592:	061b      	lsls	r3, r3, #24
 8006594:	18e4      	adds	r4, r4, r3
 8006596:	002a      	movs	r2, r5
 8006598:	0023      	movs	r3, r4
 800659a:	9907      	ldr	r1, [sp, #28]
 800659c:	600a      	str	r2, [r1, #0]
 800659e:	604b      	str	r3, [r1, #4]
 80065a0:	e7a9      	b.n	80064f6 <__kernel_rem_pio2+0x4e2>
 80065a2:	00e3      	lsls	r3, r4, #3
 80065a4:	aa4e      	add	r2, sp, #312	; 0x138
 80065a6:	18d3      	adds	r3, r2, r3
 80065a8:	0030      	movs	r0, r6
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	0029      	movs	r1, r5
 80065b0:	f7fa fc30 	bl	8000e14 <__aeabi_dadd>
 80065b4:	0006      	movs	r6, r0
 80065b6:	000d      	movs	r5, r1
 80065b8:	3c01      	subs	r4, #1
 80065ba:	2c00      	cmp	r4, #0
 80065bc:	daf1      	bge.n	80065a2 <__kernel_rem_pio2+0x58e>
 80065be:	9b08      	ldr	r3, [sp, #32]
 80065c0:	0029      	movs	r1, r5
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d002      	beq.n	80065cc <__kernel_rem_pio2+0x5b8>
 80065c6:	2380      	movs	r3, #128	; 0x80
 80065c8:	061b      	lsls	r3, r3, #24
 80065ca:	18e9      	adds	r1, r5, r3
 80065cc:	0032      	movs	r2, r6
 80065ce:	000b      	movs	r3, r1
 80065d0:	9907      	ldr	r1, [sp, #28]
 80065d2:	2401      	movs	r4, #1
 80065d4:	600a      	str	r2, [r1, #0]
 80065d6:	604b      	str	r3, [r1, #4]
 80065d8:	984e      	ldr	r0, [sp, #312]	; 0x138
 80065da:	994f      	ldr	r1, [sp, #316]	; 0x13c
 80065dc:	002b      	movs	r3, r5
 80065de:	f7fb fdc3 	bl	8002168 <__aeabi_dsub>
 80065e2:	0007      	movs	r7, r0
 80065e4:	000e      	movs	r6, r1
 80065e6:	ad4e      	add	r5, sp, #312	; 0x138
 80065e8:	9b00      	ldr	r3, [sp, #0]
 80065ea:	3508      	adds	r5, #8
 80065ec:	42a3      	cmp	r3, r4
 80065ee:	da0f      	bge.n	8006610 <__kernel_rem_pio2+0x5fc>
 80065f0:	9b08      	ldr	r3, [sp, #32]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d002      	beq.n	80065fc <__kernel_rem_pio2+0x5e8>
 80065f6:	2380      	movs	r3, #128	; 0x80
 80065f8:	061b      	lsls	r3, r3, #24
 80065fa:	18f6      	adds	r6, r6, r3
 80065fc:	003a      	movs	r2, r7
 80065fe:	0033      	movs	r3, r6
 8006600:	9907      	ldr	r1, [sp, #28]
 8006602:	608a      	str	r2, [r1, #8]
 8006604:	60cb      	str	r3, [r1, #12]
 8006606:	e776      	b.n	80064f6 <__kernel_rem_pio2+0x4e2>
 8006608:	2600      	movs	r6, #0
 800660a:	9c00      	ldr	r4, [sp, #0]
 800660c:	0035      	movs	r5, r6
 800660e:	e7d4      	b.n	80065ba <__kernel_rem_pio2+0x5a6>
 8006610:	0038      	movs	r0, r7
 8006612:	682a      	ldr	r2, [r5, #0]
 8006614:	686b      	ldr	r3, [r5, #4]
 8006616:	0031      	movs	r1, r6
 8006618:	f7fa fbfc 	bl	8000e14 <__aeabi_dadd>
 800661c:	3401      	adds	r4, #1
 800661e:	0007      	movs	r7, r0
 8006620:	000e      	movs	r6, r1
 8006622:	e7e1      	b.n	80065e8 <__kernel_rem_pio2+0x5d4>
 8006624:	9b02      	ldr	r3, [sp, #8]
 8006626:	68ae      	ldr	r6, [r5, #8]
 8006628:	68ef      	ldr	r7, [r5, #12]
 800662a:	3b01      	subs	r3, #1
 800662c:	9302      	str	r3, [sp, #8]
 800662e:	682a      	ldr	r2, [r5, #0]
 8006630:	686b      	ldr	r3, [r5, #4]
 8006632:	9204      	str	r2, [sp, #16]
 8006634:	9305      	str	r3, [sp, #20]
 8006636:	9804      	ldr	r0, [sp, #16]
 8006638:	9905      	ldr	r1, [sp, #20]
 800663a:	0032      	movs	r2, r6
 800663c:	003b      	movs	r3, r7
 800663e:	f7fa fbe9 	bl	8000e14 <__aeabi_dadd>
 8006642:	0002      	movs	r2, r0
 8006644:	000b      	movs	r3, r1
 8006646:	900a      	str	r0, [sp, #40]	; 0x28
 8006648:	910b      	str	r1, [sp, #44]	; 0x2c
 800664a:	9804      	ldr	r0, [sp, #16]
 800664c:	9905      	ldr	r1, [sp, #20]
 800664e:	f7fb fd8b 	bl	8002168 <__aeabi_dsub>
 8006652:	0032      	movs	r2, r6
 8006654:	003b      	movs	r3, r7
 8006656:	f7fa fbdd 	bl	8000e14 <__aeabi_dadd>
 800665a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800665c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800665e:	60a8      	str	r0, [r5, #8]
 8006660:	60e9      	str	r1, [r5, #12]
 8006662:	602a      	str	r2, [r5, #0]
 8006664:	606b      	str	r3, [r5, #4]
 8006666:	e758      	b.n	800651a <__kernel_rem_pio2+0x506>
 8006668:	6826      	ldr	r6, [r4, #0]
 800666a:	6867      	ldr	r7, [r4, #4]
 800666c:	68a2      	ldr	r2, [r4, #8]
 800666e:	68e3      	ldr	r3, [r4, #12]
 8006670:	0030      	movs	r0, r6
 8006672:	0039      	movs	r1, r7
 8006674:	9202      	str	r2, [sp, #8]
 8006676:	9303      	str	r3, [sp, #12]
 8006678:	f7fa fbcc 	bl	8000e14 <__aeabi_dadd>
 800667c:	0002      	movs	r2, r0
 800667e:	000b      	movs	r3, r1
 8006680:	9004      	str	r0, [sp, #16]
 8006682:	9105      	str	r1, [sp, #20]
 8006684:	0030      	movs	r0, r6
 8006686:	0039      	movs	r1, r7
 8006688:	f7fb fd6e 	bl	8002168 <__aeabi_dsub>
 800668c:	9a02      	ldr	r2, [sp, #8]
 800668e:	9b03      	ldr	r3, [sp, #12]
 8006690:	f7fa fbc0 	bl	8000e14 <__aeabi_dadd>
 8006694:	9a04      	ldr	r2, [sp, #16]
 8006696:	9b05      	ldr	r3, [sp, #20]
 8006698:	60a0      	str	r0, [r4, #8]
 800669a:	60e1      	str	r1, [r4, #12]
 800669c:	6022      	str	r2, [r4, #0]
 800669e:	6063      	str	r3, [r4, #4]
 80066a0:	3d01      	subs	r5, #1
 80066a2:	e740      	b.n	8006526 <__kernel_rem_pio2+0x512>
 80066a4:	9b00      	ldr	r3, [sp, #0]
 80066a6:	aa4e      	add	r2, sp, #312	; 0x138
 80066a8:	00db      	lsls	r3, r3, #3
 80066aa:	18d3      	adds	r3, r2, r3
 80066ac:	0020      	movs	r0, r4
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	f7fa fbaf 	bl	8000e14 <__aeabi_dadd>
 80066b6:	9b00      	ldr	r3, [sp, #0]
 80066b8:	0004      	movs	r4, r0
 80066ba:	3b01      	subs	r3, #1
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	e738      	b.n	8006532 <__kernel_rem_pio2+0x51e>
 80066c0:	9b07      	ldr	r3, [sp, #28]
 80066c2:	9a07      	ldr	r2, [sp, #28]
 80066c4:	601f      	str	r7, [r3, #0]
 80066c6:	2380      	movs	r3, #128	; 0x80
 80066c8:	061b      	lsls	r3, r3, #24
 80066ca:	18f6      	adds	r6, r6, r3
 80066cc:	18c0      	adds	r0, r0, r3
 80066ce:	18c9      	adds	r1, r1, r3
 80066d0:	6056      	str	r6, [r2, #4]
 80066d2:	6095      	str	r5, [r2, #8]
 80066d4:	60d0      	str	r0, [r2, #12]
 80066d6:	6114      	str	r4, [r2, #16]
 80066d8:	6151      	str	r1, [r2, #20]
 80066da:	e70c      	b.n	80064f6 <__kernel_rem_pio2+0x4e2>
 80066dc:	41700000 	.word	0x41700000
 80066e0:	3e700000 	.word	0x3e700000
 80066e4:	08006d28 	.word	0x08006d28

080066e8 <__kernel_sin>:
 80066e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066ea:	b089      	sub	sp, #36	; 0x24
 80066ec:	9202      	str	r2, [sp, #8]
 80066ee:	9303      	str	r3, [sp, #12]
 80066f0:	22f9      	movs	r2, #249	; 0xf9
 80066f2:	004b      	lsls	r3, r1, #1
 80066f4:	0007      	movs	r7, r0
 80066f6:	000e      	movs	r6, r1
 80066f8:	085b      	lsrs	r3, r3, #1
 80066fa:	0592      	lsls	r2, r2, #22
 80066fc:	4293      	cmp	r3, r2
 80066fe:	da03      	bge.n	8006708 <__kernel_sin+0x20>
 8006700:	f7fc f8e2 	bl	80028c8 <__aeabi_d2iz>
 8006704:	2800      	cmp	r0, #0
 8006706:	d04c      	beq.n	80067a2 <__kernel_sin+0xba>
 8006708:	003a      	movs	r2, r7
 800670a:	0033      	movs	r3, r6
 800670c:	0038      	movs	r0, r7
 800670e:	0031      	movs	r1, r6
 8006710:	f7fb fabe 	bl	8001c90 <__aeabi_dmul>
 8006714:	0004      	movs	r4, r0
 8006716:	000d      	movs	r5, r1
 8006718:	0002      	movs	r2, r0
 800671a:	000b      	movs	r3, r1
 800671c:	0038      	movs	r0, r7
 800671e:	0031      	movs	r1, r6
 8006720:	f7fb fab6 	bl	8001c90 <__aeabi_dmul>
 8006724:	4a39      	ldr	r2, [pc, #228]	; (800680c <__kernel_sin+0x124>)
 8006726:	9000      	str	r0, [sp, #0]
 8006728:	9101      	str	r1, [sp, #4]
 800672a:	4b39      	ldr	r3, [pc, #228]	; (8006810 <__kernel_sin+0x128>)
 800672c:	0020      	movs	r0, r4
 800672e:	0029      	movs	r1, r5
 8006730:	f7fb faae 	bl	8001c90 <__aeabi_dmul>
 8006734:	4a37      	ldr	r2, [pc, #220]	; (8006814 <__kernel_sin+0x12c>)
 8006736:	4b38      	ldr	r3, [pc, #224]	; (8006818 <__kernel_sin+0x130>)
 8006738:	f7fb fd16 	bl	8002168 <__aeabi_dsub>
 800673c:	0022      	movs	r2, r4
 800673e:	002b      	movs	r3, r5
 8006740:	f7fb faa6 	bl	8001c90 <__aeabi_dmul>
 8006744:	4a35      	ldr	r2, [pc, #212]	; (800681c <__kernel_sin+0x134>)
 8006746:	4b36      	ldr	r3, [pc, #216]	; (8006820 <__kernel_sin+0x138>)
 8006748:	f7fa fb64 	bl	8000e14 <__aeabi_dadd>
 800674c:	0022      	movs	r2, r4
 800674e:	002b      	movs	r3, r5
 8006750:	f7fb fa9e 	bl	8001c90 <__aeabi_dmul>
 8006754:	4a33      	ldr	r2, [pc, #204]	; (8006824 <__kernel_sin+0x13c>)
 8006756:	4b34      	ldr	r3, [pc, #208]	; (8006828 <__kernel_sin+0x140>)
 8006758:	f7fb fd06 	bl	8002168 <__aeabi_dsub>
 800675c:	0022      	movs	r2, r4
 800675e:	002b      	movs	r3, r5
 8006760:	f7fb fa96 	bl	8001c90 <__aeabi_dmul>
 8006764:	4b31      	ldr	r3, [pc, #196]	; (800682c <__kernel_sin+0x144>)
 8006766:	4a32      	ldr	r2, [pc, #200]	; (8006830 <__kernel_sin+0x148>)
 8006768:	f7fa fb54 	bl	8000e14 <__aeabi_dadd>
 800676c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800676e:	9004      	str	r0, [sp, #16]
 8006770:	9105      	str	r1, [sp, #20]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d119      	bne.n	80067aa <__kernel_sin+0xc2>
 8006776:	0002      	movs	r2, r0
 8006778:	000b      	movs	r3, r1
 800677a:	0020      	movs	r0, r4
 800677c:	0029      	movs	r1, r5
 800677e:	f7fb fa87 	bl	8001c90 <__aeabi_dmul>
 8006782:	4a2c      	ldr	r2, [pc, #176]	; (8006834 <__kernel_sin+0x14c>)
 8006784:	4b2c      	ldr	r3, [pc, #176]	; (8006838 <__kernel_sin+0x150>)
 8006786:	f7fb fcef 	bl	8002168 <__aeabi_dsub>
 800678a:	9a00      	ldr	r2, [sp, #0]
 800678c:	9b01      	ldr	r3, [sp, #4]
 800678e:	f7fb fa7f 	bl	8001c90 <__aeabi_dmul>
 8006792:	0002      	movs	r2, r0
 8006794:	000b      	movs	r3, r1
 8006796:	0038      	movs	r0, r7
 8006798:	0031      	movs	r1, r6
 800679a:	f7fa fb3b 	bl	8000e14 <__aeabi_dadd>
 800679e:	0007      	movs	r7, r0
 80067a0:	000e      	movs	r6, r1
 80067a2:	0038      	movs	r0, r7
 80067a4:	0031      	movs	r1, r6
 80067a6:	b009      	add	sp, #36	; 0x24
 80067a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067aa:	2200      	movs	r2, #0
 80067ac:	9802      	ldr	r0, [sp, #8]
 80067ae:	9903      	ldr	r1, [sp, #12]
 80067b0:	4b22      	ldr	r3, [pc, #136]	; (800683c <__kernel_sin+0x154>)
 80067b2:	f7fb fa6d 	bl	8001c90 <__aeabi_dmul>
 80067b6:	9a04      	ldr	r2, [sp, #16]
 80067b8:	9b05      	ldr	r3, [sp, #20]
 80067ba:	9006      	str	r0, [sp, #24]
 80067bc:	9107      	str	r1, [sp, #28]
 80067be:	9800      	ldr	r0, [sp, #0]
 80067c0:	9901      	ldr	r1, [sp, #4]
 80067c2:	f7fb fa65 	bl	8001c90 <__aeabi_dmul>
 80067c6:	0002      	movs	r2, r0
 80067c8:	000b      	movs	r3, r1
 80067ca:	9806      	ldr	r0, [sp, #24]
 80067cc:	9907      	ldr	r1, [sp, #28]
 80067ce:	f7fb fccb 	bl	8002168 <__aeabi_dsub>
 80067d2:	0022      	movs	r2, r4
 80067d4:	002b      	movs	r3, r5
 80067d6:	f7fb fa5b 	bl	8001c90 <__aeabi_dmul>
 80067da:	9a02      	ldr	r2, [sp, #8]
 80067dc:	9b03      	ldr	r3, [sp, #12]
 80067de:	f7fb fcc3 	bl	8002168 <__aeabi_dsub>
 80067e2:	4a14      	ldr	r2, [pc, #80]	; (8006834 <__kernel_sin+0x14c>)
 80067e4:	0004      	movs	r4, r0
 80067e6:	000d      	movs	r5, r1
 80067e8:	9800      	ldr	r0, [sp, #0]
 80067ea:	9901      	ldr	r1, [sp, #4]
 80067ec:	4b12      	ldr	r3, [pc, #72]	; (8006838 <__kernel_sin+0x150>)
 80067ee:	f7fb fa4f 	bl	8001c90 <__aeabi_dmul>
 80067f2:	0002      	movs	r2, r0
 80067f4:	000b      	movs	r3, r1
 80067f6:	0020      	movs	r0, r4
 80067f8:	0029      	movs	r1, r5
 80067fa:	f7fa fb0b 	bl	8000e14 <__aeabi_dadd>
 80067fe:	0002      	movs	r2, r0
 8006800:	000b      	movs	r3, r1
 8006802:	0038      	movs	r0, r7
 8006804:	0031      	movs	r1, r6
 8006806:	f7fb fcaf 	bl	8002168 <__aeabi_dsub>
 800680a:	e7c8      	b.n	800679e <__kernel_sin+0xb6>
 800680c:	5acfd57c 	.word	0x5acfd57c
 8006810:	3de5d93a 	.word	0x3de5d93a
 8006814:	8a2b9ceb 	.word	0x8a2b9ceb
 8006818:	3e5ae5e6 	.word	0x3e5ae5e6
 800681c:	57b1fe7d 	.word	0x57b1fe7d
 8006820:	3ec71de3 	.word	0x3ec71de3
 8006824:	19c161d5 	.word	0x19c161d5
 8006828:	3f2a01a0 	.word	0x3f2a01a0
 800682c:	3f811111 	.word	0x3f811111
 8006830:	1110f8a6 	.word	0x1110f8a6
 8006834:	55555549 	.word	0x55555549
 8006838:	3fc55555 	.word	0x3fc55555
 800683c:	3fe00000 	.word	0x3fe00000

08006840 <fabs>:
 8006840:	004b      	lsls	r3, r1, #1
 8006842:	0859      	lsrs	r1, r3, #1
 8006844:	4770      	bx	lr
	...

08006848 <floor>:
 8006848:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800684a:	004b      	lsls	r3, r1, #1
 800684c:	4a3d      	ldr	r2, [pc, #244]	; (8006944 <floor+0xfc>)
 800684e:	0d5b      	lsrs	r3, r3, #21
 8006850:	189f      	adds	r7, r3, r2
 8006852:	4684      	mov	ip, r0
 8006854:	000e      	movs	r6, r1
 8006856:	000d      	movs	r5, r1
 8006858:	0004      	movs	r4, r0
 800685a:	9001      	str	r0, [sp, #4]
 800685c:	2f13      	cmp	r7, #19
 800685e:	dc34      	bgt.n	80068ca <floor+0x82>
 8006860:	2f00      	cmp	r7, #0
 8006862:	da16      	bge.n	8006892 <floor+0x4a>
 8006864:	4a38      	ldr	r2, [pc, #224]	; (8006948 <floor+0x100>)
 8006866:	4b39      	ldr	r3, [pc, #228]	; (800694c <floor+0x104>)
 8006868:	4660      	mov	r0, ip
 800686a:	0031      	movs	r1, r6
 800686c:	f7fa fad2 	bl	8000e14 <__aeabi_dadd>
 8006870:	2200      	movs	r2, #0
 8006872:	2300      	movs	r3, #0
 8006874:	f7f9 fde8 	bl	8000448 <__aeabi_dcmpgt>
 8006878:	2800      	cmp	r0, #0
 800687a:	d007      	beq.n	800688c <floor+0x44>
 800687c:	2e00      	cmp	r6, #0
 800687e:	da5d      	bge.n	800693c <floor+0xf4>
 8006880:	0073      	lsls	r3, r6, #1
 8006882:	085b      	lsrs	r3, r3, #1
 8006884:	431c      	orrs	r4, r3
 8006886:	d001      	beq.n	800688c <floor+0x44>
 8006888:	2400      	movs	r4, #0
 800688a:	4d31      	ldr	r5, [pc, #196]	; (8006950 <floor+0x108>)
 800688c:	46a4      	mov	ip, r4
 800688e:	002e      	movs	r6, r5
 8006890:	e029      	b.n	80068e6 <floor+0x9e>
 8006892:	4b30      	ldr	r3, [pc, #192]	; (8006954 <floor+0x10c>)
 8006894:	413b      	asrs	r3, r7
 8006896:	9300      	str	r3, [sp, #0]
 8006898:	400b      	ands	r3, r1
 800689a:	4303      	orrs	r3, r0
 800689c:	d023      	beq.n	80068e6 <floor+0x9e>
 800689e:	4a2a      	ldr	r2, [pc, #168]	; (8006948 <floor+0x100>)
 80068a0:	4b2a      	ldr	r3, [pc, #168]	; (800694c <floor+0x104>)
 80068a2:	4660      	mov	r0, ip
 80068a4:	0031      	movs	r1, r6
 80068a6:	f7fa fab5 	bl	8000e14 <__aeabi_dadd>
 80068aa:	2200      	movs	r2, #0
 80068ac:	2300      	movs	r3, #0
 80068ae:	f7f9 fdcb 	bl	8000448 <__aeabi_dcmpgt>
 80068b2:	2800      	cmp	r0, #0
 80068b4:	d0ea      	beq.n	800688c <floor+0x44>
 80068b6:	2e00      	cmp	r6, #0
 80068b8:	da03      	bge.n	80068c2 <floor+0x7a>
 80068ba:	2380      	movs	r3, #128	; 0x80
 80068bc:	035b      	lsls	r3, r3, #13
 80068be:	413b      	asrs	r3, r7
 80068c0:	18f5      	adds	r5, r6, r3
 80068c2:	9b00      	ldr	r3, [sp, #0]
 80068c4:	2400      	movs	r4, #0
 80068c6:	439d      	bics	r5, r3
 80068c8:	e7e0      	b.n	800688c <floor+0x44>
 80068ca:	2f33      	cmp	r7, #51	; 0x33
 80068cc:	dd0f      	ble.n	80068ee <floor+0xa6>
 80068ce:	2380      	movs	r3, #128	; 0x80
 80068d0:	00db      	lsls	r3, r3, #3
 80068d2:	429f      	cmp	r7, r3
 80068d4:	d107      	bne.n	80068e6 <floor+0x9e>
 80068d6:	0002      	movs	r2, r0
 80068d8:	000b      	movs	r3, r1
 80068da:	4660      	mov	r0, ip
 80068dc:	0031      	movs	r1, r6
 80068de:	f7fa fa99 	bl	8000e14 <__aeabi_dadd>
 80068e2:	4684      	mov	ip, r0
 80068e4:	000e      	movs	r6, r1
 80068e6:	4660      	mov	r0, ip
 80068e8:	0031      	movs	r1, r6
 80068ea:	b003      	add	sp, #12
 80068ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068ee:	4a1a      	ldr	r2, [pc, #104]	; (8006958 <floor+0x110>)
 80068f0:	189b      	adds	r3, r3, r2
 80068f2:	2201      	movs	r2, #1
 80068f4:	4252      	negs	r2, r2
 80068f6:	40da      	lsrs	r2, r3
 80068f8:	9200      	str	r2, [sp, #0]
 80068fa:	4210      	tst	r0, r2
 80068fc:	d0f3      	beq.n	80068e6 <floor+0x9e>
 80068fe:	4a12      	ldr	r2, [pc, #72]	; (8006948 <floor+0x100>)
 8006900:	4b12      	ldr	r3, [pc, #72]	; (800694c <floor+0x104>)
 8006902:	4660      	mov	r0, ip
 8006904:	0031      	movs	r1, r6
 8006906:	f7fa fa85 	bl	8000e14 <__aeabi_dadd>
 800690a:	2200      	movs	r2, #0
 800690c:	2300      	movs	r3, #0
 800690e:	f7f9 fd9b 	bl	8000448 <__aeabi_dcmpgt>
 8006912:	2800      	cmp	r0, #0
 8006914:	d0ba      	beq.n	800688c <floor+0x44>
 8006916:	2e00      	cmp	r6, #0
 8006918:	da02      	bge.n	8006920 <floor+0xd8>
 800691a:	2f14      	cmp	r7, #20
 800691c:	d103      	bne.n	8006926 <floor+0xde>
 800691e:	3501      	adds	r5, #1
 8006920:	9b00      	ldr	r3, [sp, #0]
 8006922:	439c      	bics	r4, r3
 8006924:	e7b2      	b.n	800688c <floor+0x44>
 8006926:	2334      	movs	r3, #52	; 0x34
 8006928:	1bdf      	subs	r7, r3, r7
 800692a:	3b33      	subs	r3, #51	; 0x33
 800692c:	40bb      	lsls	r3, r7
 800692e:	18e4      	adds	r4, r4, r3
 8006930:	9b01      	ldr	r3, [sp, #4]
 8006932:	429c      	cmp	r4, r3
 8006934:	419b      	sbcs	r3, r3
 8006936:	425b      	negs	r3, r3
 8006938:	18f5      	adds	r5, r6, r3
 800693a:	e7f1      	b.n	8006920 <floor+0xd8>
 800693c:	2400      	movs	r4, #0
 800693e:	0025      	movs	r5, r4
 8006940:	e7a4      	b.n	800688c <floor+0x44>
 8006942:	46c0      	nop			; (mov r8, r8)
 8006944:	fffffc01 	.word	0xfffffc01
 8006948:	8800759c 	.word	0x8800759c
 800694c:	7e37e43c 	.word	0x7e37e43c
 8006950:	bff00000 	.word	0xbff00000
 8006954:	000fffff 	.word	0x000fffff
 8006958:	fffffbed 	.word	0xfffffbed

0800695c <nan>:
 800695c:	2000      	movs	r0, #0
 800695e:	4901      	ldr	r1, [pc, #4]	; (8006964 <nan+0x8>)
 8006960:	4770      	bx	lr
 8006962:	46c0      	nop			; (mov r8, r8)
 8006964:	7ff80000 	.word	0x7ff80000

08006968 <scalbn>:
 8006968:	004b      	lsls	r3, r1, #1
 800696a:	b570      	push	{r4, r5, r6, lr}
 800696c:	0d5b      	lsrs	r3, r3, #21
 800696e:	0014      	movs	r4, r2
 8006970:	000a      	movs	r2, r1
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10d      	bne.n	8006992 <scalbn+0x2a>
 8006976:	004b      	lsls	r3, r1, #1
 8006978:	085b      	lsrs	r3, r3, #1
 800697a:	4303      	orrs	r3, r0
 800697c:	d010      	beq.n	80069a0 <scalbn+0x38>
 800697e:	4b27      	ldr	r3, [pc, #156]	; (8006a1c <scalbn+0xb4>)
 8006980:	2200      	movs	r2, #0
 8006982:	f7fb f985 	bl	8001c90 <__aeabi_dmul>
 8006986:	4b26      	ldr	r3, [pc, #152]	; (8006a20 <scalbn+0xb8>)
 8006988:	429c      	cmp	r4, r3
 800698a:	da0a      	bge.n	80069a2 <scalbn+0x3a>
 800698c:	4a25      	ldr	r2, [pc, #148]	; (8006a24 <scalbn+0xbc>)
 800698e:	4b26      	ldr	r3, [pc, #152]	; (8006a28 <scalbn+0xc0>)
 8006990:	e019      	b.n	80069c6 <scalbn+0x5e>
 8006992:	4d26      	ldr	r5, [pc, #152]	; (8006a2c <scalbn+0xc4>)
 8006994:	42ab      	cmp	r3, r5
 8006996:	d108      	bne.n	80069aa <scalbn+0x42>
 8006998:	0002      	movs	r2, r0
 800699a:	000b      	movs	r3, r1
 800699c:	f7fa fa3a 	bl	8000e14 <__aeabi_dadd>
 80069a0:	bd70      	pop	{r4, r5, r6, pc}
 80069a2:	000a      	movs	r2, r1
 80069a4:	004b      	lsls	r3, r1, #1
 80069a6:	0d5b      	lsrs	r3, r3, #21
 80069a8:	3b36      	subs	r3, #54	; 0x36
 80069aa:	4d21      	ldr	r5, [pc, #132]	; (8006a30 <scalbn+0xc8>)
 80069ac:	18e3      	adds	r3, r4, r3
 80069ae:	42ab      	cmp	r3, r5
 80069b0:	dd0c      	ble.n	80069cc <scalbn+0x64>
 80069b2:	4c20      	ldr	r4, [pc, #128]	; (8006a34 <scalbn+0xcc>)
 80069b4:	4d20      	ldr	r5, [pc, #128]	; (8006a38 <scalbn+0xd0>)
 80069b6:	2900      	cmp	r1, #0
 80069b8:	da01      	bge.n	80069be <scalbn+0x56>
 80069ba:	4c1e      	ldr	r4, [pc, #120]	; (8006a34 <scalbn+0xcc>)
 80069bc:	4d1f      	ldr	r5, [pc, #124]	; (8006a3c <scalbn+0xd4>)
 80069be:	0020      	movs	r0, r4
 80069c0:	0029      	movs	r1, r5
 80069c2:	4a1c      	ldr	r2, [pc, #112]	; (8006a34 <scalbn+0xcc>)
 80069c4:	4b1c      	ldr	r3, [pc, #112]	; (8006a38 <scalbn+0xd0>)
 80069c6:	f7fb f963 	bl	8001c90 <__aeabi_dmul>
 80069ca:	e7e9      	b.n	80069a0 <scalbn+0x38>
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	dd05      	ble.n	80069dc <scalbn+0x74>
 80069d0:	4c1b      	ldr	r4, [pc, #108]	; (8006a40 <scalbn+0xd8>)
 80069d2:	051b      	lsls	r3, r3, #20
 80069d4:	4022      	ands	r2, r4
 80069d6:	431a      	orrs	r2, r3
 80069d8:	0011      	movs	r1, r2
 80069da:	e7e1      	b.n	80069a0 <scalbn+0x38>
 80069dc:	001d      	movs	r5, r3
 80069de:	3535      	adds	r5, #53	; 0x35
 80069e0:	da13      	bge.n	8006a0a <scalbn+0xa2>
 80069e2:	4a18      	ldr	r2, [pc, #96]	; (8006a44 <scalbn+0xdc>)
 80069e4:	0fcb      	lsrs	r3, r1, #31
 80069e6:	4294      	cmp	r4, r2
 80069e8:	dd08      	ble.n	80069fc <scalbn+0x94>
 80069ea:	4812      	ldr	r0, [pc, #72]	; (8006a34 <scalbn+0xcc>)
 80069ec:	4912      	ldr	r1, [pc, #72]	; (8006a38 <scalbn+0xd0>)
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <scalbn+0x8e>
 80069f2:	4810      	ldr	r0, [pc, #64]	; (8006a34 <scalbn+0xcc>)
 80069f4:	4911      	ldr	r1, [pc, #68]	; (8006a3c <scalbn+0xd4>)
 80069f6:	4a0f      	ldr	r2, [pc, #60]	; (8006a34 <scalbn+0xcc>)
 80069f8:	4b0f      	ldr	r3, [pc, #60]	; (8006a38 <scalbn+0xd0>)
 80069fa:	e7e4      	b.n	80069c6 <scalbn+0x5e>
 80069fc:	4809      	ldr	r0, [pc, #36]	; (8006a24 <scalbn+0xbc>)
 80069fe:	490a      	ldr	r1, [pc, #40]	; (8006a28 <scalbn+0xc0>)
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d0c3      	beq.n	800698c <scalbn+0x24>
 8006a04:	4807      	ldr	r0, [pc, #28]	; (8006a24 <scalbn+0xbc>)
 8006a06:	4910      	ldr	r1, [pc, #64]	; (8006a48 <scalbn+0xe0>)
 8006a08:	e7c0      	b.n	800698c <scalbn+0x24>
 8006a0a:	4c0d      	ldr	r4, [pc, #52]	; (8006a40 <scalbn+0xd8>)
 8006a0c:	3336      	adds	r3, #54	; 0x36
 8006a0e:	4022      	ands	r2, r4
 8006a10:	051b      	lsls	r3, r3, #20
 8006a12:	4313      	orrs	r3, r2
 8006a14:	0019      	movs	r1, r3
 8006a16:	2200      	movs	r2, #0
 8006a18:	4b0c      	ldr	r3, [pc, #48]	; (8006a4c <scalbn+0xe4>)
 8006a1a:	e7d4      	b.n	80069c6 <scalbn+0x5e>
 8006a1c:	43500000 	.word	0x43500000
 8006a20:	ffff3cb0 	.word	0xffff3cb0
 8006a24:	c2f8f359 	.word	0xc2f8f359
 8006a28:	01a56e1f 	.word	0x01a56e1f
 8006a2c:	000007ff 	.word	0x000007ff
 8006a30:	000007fe 	.word	0x000007fe
 8006a34:	8800759c 	.word	0x8800759c
 8006a38:	7e37e43c 	.word	0x7e37e43c
 8006a3c:	fe37e43c 	.word	0xfe37e43c
 8006a40:	800fffff 	.word	0x800fffff
 8006a44:	0000c350 	.word	0x0000c350
 8006a48:	81a56e1f 	.word	0x81a56e1f
 8006a4c:	3c900000 	.word	0x3c900000

08006a50 <_init>:
 8006a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a52:	46c0      	nop			; (mov r8, r8)
 8006a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a56:	bc08      	pop	{r3}
 8006a58:	469e      	mov	lr, r3
 8006a5a:	4770      	bx	lr

08006a5c <_fini>:
 8006a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a5e:	46c0      	nop			; (mov r8, r8)
 8006a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a62:	bc08      	pop	{r3}
 8006a64:	469e      	mov	lr, r3
 8006a66:	4770      	bx	lr
