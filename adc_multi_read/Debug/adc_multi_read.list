
adc_multi_read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004560  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08004620  08004620  00014620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004750  08004750  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004750  08004750  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004750  08004750  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004750  08004750  00014750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004754  08004754  00014754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004758  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  20000010  08004768  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08004768  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000436c  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001136  00000000  00000000  000243a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000490  00000000  00000000  000254e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003f8  00000000  00000000  00025970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011342  00000000  00000000  00025d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005cf0  00000000  00000000  000370aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006708c  00000000  00000000  0003cd9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a3e26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001198  00000000  00000000  000a3e78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004608 	.word	0x08004608

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08004608 	.word	0x08004608

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_f2uiz>:
 8000220:	219e      	movs	r1, #158	; 0x9e
 8000222:	b510      	push	{r4, lr}
 8000224:	05c9      	lsls	r1, r1, #23
 8000226:	1c04      	adds	r4, r0, #0
 8000228:	f002 f8c2 	bl	80023b0 <__aeabi_fcmpge>
 800022c:	2800      	cmp	r0, #0
 800022e:	d103      	bne.n	8000238 <__aeabi_f2uiz+0x18>
 8000230:	1c20      	adds	r0, r4, #0
 8000232:	f000 fd97 	bl	8000d64 <__aeabi_f2iz>
 8000236:	bd10      	pop	{r4, pc}
 8000238:	219e      	movs	r1, #158	; 0x9e
 800023a:	1c20      	adds	r0, r4, #0
 800023c:	05c9      	lsls	r1, r1, #23
 800023e:	f000 fbe3 	bl	8000a08 <__aeabi_fsub>
 8000242:	f000 fd8f 	bl	8000d64 <__aeabi_f2iz>
 8000246:	2380      	movs	r3, #128	; 0x80
 8000248:	061b      	lsls	r3, r3, #24
 800024a:	469c      	mov	ip, r3
 800024c:	4460      	add	r0, ip
 800024e:	e7f2      	b.n	8000236 <__aeabi_f2uiz+0x16>

08000250 <__aeabi_fadd>:
 8000250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000252:	46c6      	mov	lr, r8
 8000254:	0243      	lsls	r3, r0, #9
 8000256:	0a5b      	lsrs	r3, r3, #9
 8000258:	024e      	lsls	r6, r1, #9
 800025a:	0045      	lsls	r5, r0, #1
 800025c:	004f      	lsls	r7, r1, #1
 800025e:	00da      	lsls	r2, r3, #3
 8000260:	0fc4      	lsrs	r4, r0, #31
 8000262:	469c      	mov	ip, r3
 8000264:	0a70      	lsrs	r0, r6, #9
 8000266:	4690      	mov	r8, r2
 8000268:	b500      	push	{lr}
 800026a:	0e2d      	lsrs	r5, r5, #24
 800026c:	0e3f      	lsrs	r7, r7, #24
 800026e:	0fc9      	lsrs	r1, r1, #31
 8000270:	09b6      	lsrs	r6, r6, #6
 8000272:	428c      	cmp	r4, r1
 8000274:	d04b      	beq.n	800030e <__aeabi_fadd+0xbe>
 8000276:	1bea      	subs	r2, r5, r7
 8000278:	2a00      	cmp	r2, #0
 800027a:	dd36      	ble.n	80002ea <__aeabi_fadd+0x9a>
 800027c:	2f00      	cmp	r7, #0
 800027e:	d061      	beq.n	8000344 <__aeabi_fadd+0xf4>
 8000280:	2dff      	cmp	r5, #255	; 0xff
 8000282:	d100      	bne.n	8000286 <__aeabi_fadd+0x36>
 8000284:	e0ad      	b.n	80003e2 <__aeabi_fadd+0x192>
 8000286:	2380      	movs	r3, #128	; 0x80
 8000288:	04db      	lsls	r3, r3, #19
 800028a:	431e      	orrs	r6, r3
 800028c:	2a1b      	cmp	r2, #27
 800028e:	dc00      	bgt.n	8000292 <__aeabi_fadd+0x42>
 8000290:	e0d3      	b.n	800043a <__aeabi_fadd+0x1ea>
 8000292:	2001      	movs	r0, #1
 8000294:	4643      	mov	r3, r8
 8000296:	1a18      	subs	r0, r3, r0
 8000298:	0143      	lsls	r3, r0, #5
 800029a:	d400      	bmi.n	800029e <__aeabi_fadd+0x4e>
 800029c:	e08c      	b.n	80003b8 <__aeabi_fadd+0x168>
 800029e:	0180      	lsls	r0, r0, #6
 80002a0:	0987      	lsrs	r7, r0, #6
 80002a2:	0038      	movs	r0, r7
 80002a4:	f002 f88e 	bl	80023c4 <__clzsi2>
 80002a8:	3805      	subs	r0, #5
 80002aa:	4087      	lsls	r7, r0
 80002ac:	4285      	cmp	r5, r0
 80002ae:	dc00      	bgt.n	80002b2 <__aeabi_fadd+0x62>
 80002b0:	e0b6      	b.n	8000420 <__aeabi_fadd+0x1d0>
 80002b2:	1a2d      	subs	r5, r5, r0
 80002b4:	48b3      	ldr	r0, [pc, #716]	; (8000584 <__aeabi_fadd+0x334>)
 80002b6:	4038      	ands	r0, r7
 80002b8:	0743      	lsls	r3, r0, #29
 80002ba:	d004      	beq.n	80002c6 <__aeabi_fadd+0x76>
 80002bc:	230f      	movs	r3, #15
 80002be:	4003      	ands	r3, r0
 80002c0:	2b04      	cmp	r3, #4
 80002c2:	d000      	beq.n	80002c6 <__aeabi_fadd+0x76>
 80002c4:	3004      	adds	r0, #4
 80002c6:	0143      	lsls	r3, r0, #5
 80002c8:	d400      	bmi.n	80002cc <__aeabi_fadd+0x7c>
 80002ca:	e078      	b.n	80003be <__aeabi_fadd+0x16e>
 80002cc:	1c6a      	adds	r2, r5, #1
 80002ce:	2dfe      	cmp	r5, #254	; 0xfe
 80002d0:	d065      	beq.n	800039e <__aeabi_fadd+0x14e>
 80002d2:	0180      	lsls	r0, r0, #6
 80002d4:	0a43      	lsrs	r3, r0, #9
 80002d6:	469c      	mov	ip, r3
 80002d8:	b2d2      	uxtb	r2, r2
 80002da:	4663      	mov	r3, ip
 80002dc:	05d0      	lsls	r0, r2, #23
 80002de:	4318      	orrs	r0, r3
 80002e0:	07e4      	lsls	r4, r4, #31
 80002e2:	4320      	orrs	r0, r4
 80002e4:	bc80      	pop	{r7}
 80002e6:	46b8      	mov	r8, r7
 80002e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ea:	2a00      	cmp	r2, #0
 80002ec:	d035      	beq.n	800035a <__aeabi_fadd+0x10a>
 80002ee:	1b7a      	subs	r2, r7, r5
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d000      	beq.n	80002f6 <__aeabi_fadd+0xa6>
 80002f4:	e0af      	b.n	8000456 <__aeabi_fadd+0x206>
 80002f6:	4643      	mov	r3, r8
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d100      	bne.n	80002fe <__aeabi_fadd+0xae>
 80002fc:	e0a7      	b.n	800044e <__aeabi_fadd+0x1fe>
 80002fe:	1e53      	subs	r3, r2, #1
 8000300:	2a01      	cmp	r2, #1
 8000302:	d100      	bne.n	8000306 <__aeabi_fadd+0xb6>
 8000304:	e12f      	b.n	8000566 <__aeabi_fadd+0x316>
 8000306:	2aff      	cmp	r2, #255	; 0xff
 8000308:	d069      	beq.n	80003de <__aeabi_fadd+0x18e>
 800030a:	001a      	movs	r2, r3
 800030c:	e0aa      	b.n	8000464 <__aeabi_fadd+0x214>
 800030e:	1be9      	subs	r1, r5, r7
 8000310:	2900      	cmp	r1, #0
 8000312:	dd70      	ble.n	80003f6 <__aeabi_fadd+0x1a6>
 8000314:	2f00      	cmp	r7, #0
 8000316:	d037      	beq.n	8000388 <__aeabi_fadd+0x138>
 8000318:	2dff      	cmp	r5, #255	; 0xff
 800031a:	d062      	beq.n	80003e2 <__aeabi_fadd+0x192>
 800031c:	2380      	movs	r3, #128	; 0x80
 800031e:	04db      	lsls	r3, r3, #19
 8000320:	431e      	orrs	r6, r3
 8000322:	291b      	cmp	r1, #27
 8000324:	dc00      	bgt.n	8000328 <__aeabi_fadd+0xd8>
 8000326:	e0b0      	b.n	800048a <__aeabi_fadd+0x23a>
 8000328:	2001      	movs	r0, #1
 800032a:	4440      	add	r0, r8
 800032c:	0143      	lsls	r3, r0, #5
 800032e:	d543      	bpl.n	80003b8 <__aeabi_fadd+0x168>
 8000330:	3501      	adds	r5, #1
 8000332:	2dff      	cmp	r5, #255	; 0xff
 8000334:	d033      	beq.n	800039e <__aeabi_fadd+0x14e>
 8000336:	2301      	movs	r3, #1
 8000338:	4a93      	ldr	r2, [pc, #588]	; (8000588 <__aeabi_fadd+0x338>)
 800033a:	4003      	ands	r3, r0
 800033c:	0840      	lsrs	r0, r0, #1
 800033e:	4010      	ands	r0, r2
 8000340:	4318      	orrs	r0, r3
 8000342:	e7b9      	b.n	80002b8 <__aeabi_fadd+0x68>
 8000344:	2e00      	cmp	r6, #0
 8000346:	d100      	bne.n	800034a <__aeabi_fadd+0xfa>
 8000348:	e083      	b.n	8000452 <__aeabi_fadd+0x202>
 800034a:	1e51      	subs	r1, r2, #1
 800034c:	2a01      	cmp	r2, #1
 800034e:	d100      	bne.n	8000352 <__aeabi_fadd+0x102>
 8000350:	e0d8      	b.n	8000504 <__aeabi_fadd+0x2b4>
 8000352:	2aff      	cmp	r2, #255	; 0xff
 8000354:	d045      	beq.n	80003e2 <__aeabi_fadd+0x192>
 8000356:	000a      	movs	r2, r1
 8000358:	e798      	b.n	800028c <__aeabi_fadd+0x3c>
 800035a:	27fe      	movs	r7, #254	; 0xfe
 800035c:	1c6a      	adds	r2, r5, #1
 800035e:	4217      	tst	r7, r2
 8000360:	d000      	beq.n	8000364 <__aeabi_fadd+0x114>
 8000362:	e086      	b.n	8000472 <__aeabi_fadd+0x222>
 8000364:	2d00      	cmp	r5, #0
 8000366:	d000      	beq.n	800036a <__aeabi_fadd+0x11a>
 8000368:	e0b7      	b.n	80004da <__aeabi_fadd+0x28a>
 800036a:	4643      	mov	r3, r8
 800036c:	2b00      	cmp	r3, #0
 800036e:	d100      	bne.n	8000372 <__aeabi_fadd+0x122>
 8000370:	e0f3      	b.n	800055a <__aeabi_fadd+0x30a>
 8000372:	2200      	movs	r2, #0
 8000374:	2e00      	cmp	r6, #0
 8000376:	d0b0      	beq.n	80002da <__aeabi_fadd+0x8a>
 8000378:	1b98      	subs	r0, r3, r6
 800037a:	0143      	lsls	r3, r0, #5
 800037c:	d400      	bmi.n	8000380 <__aeabi_fadd+0x130>
 800037e:	e0fa      	b.n	8000576 <__aeabi_fadd+0x326>
 8000380:	4643      	mov	r3, r8
 8000382:	000c      	movs	r4, r1
 8000384:	1af0      	subs	r0, r6, r3
 8000386:	e797      	b.n	80002b8 <__aeabi_fadd+0x68>
 8000388:	2e00      	cmp	r6, #0
 800038a:	d100      	bne.n	800038e <__aeabi_fadd+0x13e>
 800038c:	e0c8      	b.n	8000520 <__aeabi_fadd+0x2d0>
 800038e:	1e4a      	subs	r2, r1, #1
 8000390:	2901      	cmp	r1, #1
 8000392:	d100      	bne.n	8000396 <__aeabi_fadd+0x146>
 8000394:	e0ae      	b.n	80004f4 <__aeabi_fadd+0x2a4>
 8000396:	29ff      	cmp	r1, #255	; 0xff
 8000398:	d023      	beq.n	80003e2 <__aeabi_fadd+0x192>
 800039a:	0011      	movs	r1, r2
 800039c:	e7c1      	b.n	8000322 <__aeabi_fadd+0xd2>
 800039e:	2300      	movs	r3, #0
 80003a0:	22ff      	movs	r2, #255	; 0xff
 80003a2:	469c      	mov	ip, r3
 80003a4:	e799      	b.n	80002da <__aeabi_fadd+0x8a>
 80003a6:	21fe      	movs	r1, #254	; 0xfe
 80003a8:	1c6a      	adds	r2, r5, #1
 80003aa:	4211      	tst	r1, r2
 80003ac:	d077      	beq.n	800049e <__aeabi_fadd+0x24e>
 80003ae:	2aff      	cmp	r2, #255	; 0xff
 80003b0:	d0f5      	beq.n	800039e <__aeabi_fadd+0x14e>
 80003b2:	0015      	movs	r5, r2
 80003b4:	4446      	add	r6, r8
 80003b6:	0870      	lsrs	r0, r6, #1
 80003b8:	0743      	lsls	r3, r0, #29
 80003ba:	d000      	beq.n	80003be <__aeabi_fadd+0x16e>
 80003bc:	e77e      	b.n	80002bc <__aeabi_fadd+0x6c>
 80003be:	08c3      	lsrs	r3, r0, #3
 80003c0:	2dff      	cmp	r5, #255	; 0xff
 80003c2:	d00e      	beq.n	80003e2 <__aeabi_fadd+0x192>
 80003c4:	025b      	lsls	r3, r3, #9
 80003c6:	0a5b      	lsrs	r3, r3, #9
 80003c8:	469c      	mov	ip, r3
 80003ca:	b2ea      	uxtb	r2, r5
 80003cc:	e785      	b.n	80002da <__aeabi_fadd+0x8a>
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d007      	beq.n	80003e2 <__aeabi_fadd+0x192>
 80003d2:	2280      	movs	r2, #128	; 0x80
 80003d4:	03d2      	lsls	r2, r2, #15
 80003d6:	4213      	tst	r3, r2
 80003d8:	d003      	beq.n	80003e2 <__aeabi_fadd+0x192>
 80003da:	4210      	tst	r0, r2
 80003dc:	d101      	bne.n	80003e2 <__aeabi_fadd+0x192>
 80003de:	000c      	movs	r4, r1
 80003e0:	0003      	movs	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d0db      	beq.n	800039e <__aeabi_fadd+0x14e>
 80003e6:	2080      	movs	r0, #128	; 0x80
 80003e8:	03c0      	lsls	r0, r0, #15
 80003ea:	4318      	orrs	r0, r3
 80003ec:	0240      	lsls	r0, r0, #9
 80003ee:	0a43      	lsrs	r3, r0, #9
 80003f0:	469c      	mov	ip, r3
 80003f2:	22ff      	movs	r2, #255	; 0xff
 80003f4:	e771      	b.n	80002da <__aeabi_fadd+0x8a>
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d0d5      	beq.n	80003a6 <__aeabi_fadd+0x156>
 80003fa:	1b7a      	subs	r2, r7, r5
 80003fc:	2d00      	cmp	r5, #0
 80003fe:	d160      	bne.n	80004c2 <__aeabi_fadd+0x272>
 8000400:	4643      	mov	r3, r8
 8000402:	2b00      	cmp	r3, #0
 8000404:	d024      	beq.n	8000450 <__aeabi_fadd+0x200>
 8000406:	1e53      	subs	r3, r2, #1
 8000408:	2a01      	cmp	r2, #1
 800040a:	d073      	beq.n	80004f4 <__aeabi_fadd+0x2a4>
 800040c:	2aff      	cmp	r2, #255	; 0xff
 800040e:	d0e7      	beq.n	80003e0 <__aeabi_fadd+0x190>
 8000410:	001a      	movs	r2, r3
 8000412:	2a1b      	cmp	r2, #27
 8000414:	dc00      	bgt.n	8000418 <__aeabi_fadd+0x1c8>
 8000416:	e085      	b.n	8000524 <__aeabi_fadd+0x2d4>
 8000418:	2001      	movs	r0, #1
 800041a:	003d      	movs	r5, r7
 800041c:	1980      	adds	r0, r0, r6
 800041e:	e785      	b.n	800032c <__aeabi_fadd+0xdc>
 8000420:	2320      	movs	r3, #32
 8000422:	003a      	movs	r2, r7
 8000424:	1b45      	subs	r5, r0, r5
 8000426:	0038      	movs	r0, r7
 8000428:	3501      	adds	r5, #1
 800042a:	40ea      	lsrs	r2, r5
 800042c:	1b5d      	subs	r5, r3, r5
 800042e:	40a8      	lsls	r0, r5
 8000430:	1e43      	subs	r3, r0, #1
 8000432:	4198      	sbcs	r0, r3
 8000434:	2500      	movs	r5, #0
 8000436:	4310      	orrs	r0, r2
 8000438:	e73e      	b.n	80002b8 <__aeabi_fadd+0x68>
 800043a:	2320      	movs	r3, #32
 800043c:	0030      	movs	r0, r6
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	0031      	movs	r1, r6
 8000442:	4098      	lsls	r0, r3
 8000444:	40d1      	lsrs	r1, r2
 8000446:	1e43      	subs	r3, r0, #1
 8000448:	4198      	sbcs	r0, r3
 800044a:	4308      	orrs	r0, r1
 800044c:	e722      	b.n	8000294 <__aeabi_fadd+0x44>
 800044e:	000c      	movs	r4, r1
 8000450:	0003      	movs	r3, r0
 8000452:	0015      	movs	r5, r2
 8000454:	e7b4      	b.n	80003c0 <__aeabi_fadd+0x170>
 8000456:	2fff      	cmp	r7, #255	; 0xff
 8000458:	d0c1      	beq.n	80003de <__aeabi_fadd+0x18e>
 800045a:	2380      	movs	r3, #128	; 0x80
 800045c:	4640      	mov	r0, r8
 800045e:	04db      	lsls	r3, r3, #19
 8000460:	4318      	orrs	r0, r3
 8000462:	4680      	mov	r8, r0
 8000464:	2a1b      	cmp	r2, #27
 8000466:	dd51      	ble.n	800050c <__aeabi_fadd+0x2bc>
 8000468:	2001      	movs	r0, #1
 800046a:	000c      	movs	r4, r1
 800046c:	003d      	movs	r5, r7
 800046e:	1a30      	subs	r0, r6, r0
 8000470:	e712      	b.n	8000298 <__aeabi_fadd+0x48>
 8000472:	4643      	mov	r3, r8
 8000474:	1b9f      	subs	r7, r3, r6
 8000476:	017b      	lsls	r3, r7, #5
 8000478:	d42b      	bmi.n	80004d2 <__aeabi_fadd+0x282>
 800047a:	2f00      	cmp	r7, #0
 800047c:	d000      	beq.n	8000480 <__aeabi_fadd+0x230>
 800047e:	e710      	b.n	80002a2 <__aeabi_fadd+0x52>
 8000480:	2300      	movs	r3, #0
 8000482:	2400      	movs	r4, #0
 8000484:	2200      	movs	r2, #0
 8000486:	469c      	mov	ip, r3
 8000488:	e727      	b.n	80002da <__aeabi_fadd+0x8a>
 800048a:	2320      	movs	r3, #32
 800048c:	0032      	movs	r2, r6
 800048e:	0030      	movs	r0, r6
 8000490:	40ca      	lsrs	r2, r1
 8000492:	1a59      	subs	r1, r3, r1
 8000494:	4088      	lsls	r0, r1
 8000496:	1e43      	subs	r3, r0, #1
 8000498:	4198      	sbcs	r0, r3
 800049a:	4310      	orrs	r0, r2
 800049c:	e745      	b.n	800032a <__aeabi_fadd+0xda>
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d14a      	bne.n	8000538 <__aeabi_fadd+0x2e8>
 80004a2:	4643      	mov	r3, r8
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d063      	beq.n	8000570 <__aeabi_fadd+0x320>
 80004a8:	2200      	movs	r2, #0
 80004aa:	2e00      	cmp	r6, #0
 80004ac:	d100      	bne.n	80004b0 <__aeabi_fadd+0x260>
 80004ae:	e714      	b.n	80002da <__aeabi_fadd+0x8a>
 80004b0:	0030      	movs	r0, r6
 80004b2:	4440      	add	r0, r8
 80004b4:	0143      	lsls	r3, r0, #5
 80004b6:	d400      	bmi.n	80004ba <__aeabi_fadd+0x26a>
 80004b8:	e77e      	b.n	80003b8 <__aeabi_fadd+0x168>
 80004ba:	4b32      	ldr	r3, [pc, #200]	; (8000584 <__aeabi_fadd+0x334>)
 80004bc:	3501      	adds	r5, #1
 80004be:	4018      	ands	r0, r3
 80004c0:	e77a      	b.n	80003b8 <__aeabi_fadd+0x168>
 80004c2:	2fff      	cmp	r7, #255	; 0xff
 80004c4:	d08c      	beq.n	80003e0 <__aeabi_fadd+0x190>
 80004c6:	2380      	movs	r3, #128	; 0x80
 80004c8:	4641      	mov	r1, r8
 80004ca:	04db      	lsls	r3, r3, #19
 80004cc:	4319      	orrs	r1, r3
 80004ce:	4688      	mov	r8, r1
 80004d0:	e79f      	b.n	8000412 <__aeabi_fadd+0x1c2>
 80004d2:	4643      	mov	r3, r8
 80004d4:	000c      	movs	r4, r1
 80004d6:	1af7      	subs	r7, r6, r3
 80004d8:	e6e3      	b.n	80002a2 <__aeabi_fadd+0x52>
 80004da:	4642      	mov	r2, r8
 80004dc:	2a00      	cmp	r2, #0
 80004de:	d000      	beq.n	80004e2 <__aeabi_fadd+0x292>
 80004e0:	e775      	b.n	80003ce <__aeabi_fadd+0x17e>
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d000      	beq.n	80004e8 <__aeabi_fadd+0x298>
 80004e6:	e77a      	b.n	80003de <__aeabi_fadd+0x18e>
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	03db      	lsls	r3, r3, #15
 80004ec:	2400      	movs	r4, #0
 80004ee:	469c      	mov	ip, r3
 80004f0:	22ff      	movs	r2, #255	; 0xff
 80004f2:	e6f2      	b.n	80002da <__aeabi_fadd+0x8a>
 80004f4:	0030      	movs	r0, r6
 80004f6:	4440      	add	r0, r8
 80004f8:	2501      	movs	r5, #1
 80004fa:	0143      	lsls	r3, r0, #5
 80004fc:	d400      	bmi.n	8000500 <__aeabi_fadd+0x2b0>
 80004fe:	e75b      	b.n	80003b8 <__aeabi_fadd+0x168>
 8000500:	2502      	movs	r5, #2
 8000502:	e718      	b.n	8000336 <__aeabi_fadd+0xe6>
 8000504:	4643      	mov	r3, r8
 8000506:	2501      	movs	r5, #1
 8000508:	1b98      	subs	r0, r3, r6
 800050a:	e6c5      	b.n	8000298 <__aeabi_fadd+0x48>
 800050c:	2320      	movs	r3, #32
 800050e:	4644      	mov	r4, r8
 8000510:	4640      	mov	r0, r8
 8000512:	40d4      	lsrs	r4, r2
 8000514:	1a9a      	subs	r2, r3, r2
 8000516:	4090      	lsls	r0, r2
 8000518:	1e43      	subs	r3, r0, #1
 800051a:	4198      	sbcs	r0, r3
 800051c:	4320      	orrs	r0, r4
 800051e:	e7a4      	b.n	800046a <__aeabi_fadd+0x21a>
 8000520:	000d      	movs	r5, r1
 8000522:	e74d      	b.n	80003c0 <__aeabi_fadd+0x170>
 8000524:	2320      	movs	r3, #32
 8000526:	4641      	mov	r1, r8
 8000528:	4640      	mov	r0, r8
 800052a:	40d1      	lsrs	r1, r2
 800052c:	1a9a      	subs	r2, r3, r2
 800052e:	4090      	lsls	r0, r2
 8000530:	1e43      	subs	r3, r0, #1
 8000532:	4198      	sbcs	r0, r3
 8000534:	4308      	orrs	r0, r1
 8000536:	e770      	b.n	800041a <__aeabi_fadd+0x1ca>
 8000538:	4642      	mov	r2, r8
 800053a:	2a00      	cmp	r2, #0
 800053c:	d100      	bne.n	8000540 <__aeabi_fadd+0x2f0>
 800053e:	e74f      	b.n	80003e0 <__aeabi_fadd+0x190>
 8000540:	2e00      	cmp	r6, #0
 8000542:	d100      	bne.n	8000546 <__aeabi_fadd+0x2f6>
 8000544:	e74d      	b.n	80003e2 <__aeabi_fadd+0x192>
 8000546:	2280      	movs	r2, #128	; 0x80
 8000548:	03d2      	lsls	r2, r2, #15
 800054a:	4213      	tst	r3, r2
 800054c:	d100      	bne.n	8000550 <__aeabi_fadd+0x300>
 800054e:	e748      	b.n	80003e2 <__aeabi_fadd+0x192>
 8000550:	4210      	tst	r0, r2
 8000552:	d000      	beq.n	8000556 <__aeabi_fadd+0x306>
 8000554:	e745      	b.n	80003e2 <__aeabi_fadd+0x192>
 8000556:	0003      	movs	r3, r0
 8000558:	e743      	b.n	80003e2 <__aeabi_fadd+0x192>
 800055a:	2e00      	cmp	r6, #0
 800055c:	d090      	beq.n	8000480 <__aeabi_fadd+0x230>
 800055e:	000c      	movs	r4, r1
 8000560:	4684      	mov	ip, r0
 8000562:	2200      	movs	r2, #0
 8000564:	e6b9      	b.n	80002da <__aeabi_fadd+0x8a>
 8000566:	4643      	mov	r3, r8
 8000568:	000c      	movs	r4, r1
 800056a:	1af0      	subs	r0, r6, r3
 800056c:	3501      	adds	r5, #1
 800056e:	e693      	b.n	8000298 <__aeabi_fadd+0x48>
 8000570:	4684      	mov	ip, r0
 8000572:	2200      	movs	r2, #0
 8000574:	e6b1      	b.n	80002da <__aeabi_fadd+0x8a>
 8000576:	2800      	cmp	r0, #0
 8000578:	d000      	beq.n	800057c <__aeabi_fadd+0x32c>
 800057a:	e71d      	b.n	80003b8 <__aeabi_fadd+0x168>
 800057c:	2300      	movs	r3, #0
 800057e:	2400      	movs	r4, #0
 8000580:	469c      	mov	ip, r3
 8000582:	e6aa      	b.n	80002da <__aeabi_fadd+0x8a>
 8000584:	fbffffff 	.word	0xfbffffff
 8000588:	7dffffff 	.word	0x7dffffff

0800058c <__aeabi_fdiv>:
 800058c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058e:	464f      	mov	r7, r9
 8000590:	4646      	mov	r6, r8
 8000592:	46d6      	mov	lr, sl
 8000594:	0245      	lsls	r5, r0, #9
 8000596:	b5c0      	push	{r6, r7, lr}
 8000598:	0047      	lsls	r7, r0, #1
 800059a:	1c0c      	adds	r4, r1, #0
 800059c:	0a6d      	lsrs	r5, r5, #9
 800059e:	0e3f      	lsrs	r7, r7, #24
 80005a0:	0fc6      	lsrs	r6, r0, #31
 80005a2:	2f00      	cmp	r7, #0
 80005a4:	d100      	bne.n	80005a8 <__aeabi_fdiv+0x1c>
 80005a6:	e070      	b.n	800068a <__aeabi_fdiv+0xfe>
 80005a8:	2fff      	cmp	r7, #255	; 0xff
 80005aa:	d100      	bne.n	80005ae <__aeabi_fdiv+0x22>
 80005ac:	e075      	b.n	800069a <__aeabi_fdiv+0x10e>
 80005ae:	00eb      	lsls	r3, r5, #3
 80005b0:	2580      	movs	r5, #128	; 0x80
 80005b2:	04ed      	lsls	r5, r5, #19
 80005b4:	431d      	orrs	r5, r3
 80005b6:	2300      	movs	r3, #0
 80005b8:	4699      	mov	r9, r3
 80005ba:	469a      	mov	sl, r3
 80005bc:	3f7f      	subs	r7, #127	; 0x7f
 80005be:	0260      	lsls	r0, r4, #9
 80005c0:	0a43      	lsrs	r3, r0, #9
 80005c2:	4698      	mov	r8, r3
 80005c4:	0063      	lsls	r3, r4, #1
 80005c6:	0e1b      	lsrs	r3, r3, #24
 80005c8:	0fe4      	lsrs	r4, r4, #31
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d04e      	beq.n	800066c <__aeabi_fdiv+0xe0>
 80005ce:	2bff      	cmp	r3, #255	; 0xff
 80005d0:	d046      	beq.n	8000660 <__aeabi_fdiv+0xd4>
 80005d2:	4642      	mov	r2, r8
 80005d4:	00d0      	lsls	r0, r2, #3
 80005d6:	2280      	movs	r2, #128	; 0x80
 80005d8:	04d2      	lsls	r2, r2, #19
 80005da:	4302      	orrs	r2, r0
 80005dc:	4690      	mov	r8, r2
 80005de:	2200      	movs	r2, #0
 80005e0:	3b7f      	subs	r3, #127	; 0x7f
 80005e2:	0031      	movs	r1, r6
 80005e4:	1aff      	subs	r7, r7, r3
 80005e6:	464b      	mov	r3, r9
 80005e8:	4061      	eors	r1, r4
 80005ea:	b2c9      	uxtb	r1, r1
 80005ec:	4313      	orrs	r3, r2
 80005ee:	2b0f      	cmp	r3, #15
 80005f0:	d900      	bls.n	80005f4 <__aeabi_fdiv+0x68>
 80005f2:	e0b5      	b.n	8000760 <__aeabi_fdiv+0x1d4>
 80005f4:	486e      	ldr	r0, [pc, #440]	; (80007b0 <__aeabi_fdiv+0x224>)
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	58c3      	ldr	r3, [r0, r3]
 80005fa:	469f      	mov	pc, r3
 80005fc:	2300      	movs	r3, #0
 80005fe:	4698      	mov	r8, r3
 8000600:	0026      	movs	r6, r4
 8000602:	4645      	mov	r5, r8
 8000604:	4692      	mov	sl, r2
 8000606:	4653      	mov	r3, sl
 8000608:	2b02      	cmp	r3, #2
 800060a:	d100      	bne.n	800060e <__aeabi_fdiv+0x82>
 800060c:	e089      	b.n	8000722 <__aeabi_fdiv+0x196>
 800060e:	2b03      	cmp	r3, #3
 8000610:	d100      	bne.n	8000614 <__aeabi_fdiv+0x88>
 8000612:	e09e      	b.n	8000752 <__aeabi_fdiv+0x1c6>
 8000614:	2b01      	cmp	r3, #1
 8000616:	d018      	beq.n	800064a <__aeabi_fdiv+0xbe>
 8000618:	003b      	movs	r3, r7
 800061a:	337f      	adds	r3, #127	; 0x7f
 800061c:	2b00      	cmp	r3, #0
 800061e:	dd69      	ble.n	80006f4 <__aeabi_fdiv+0x168>
 8000620:	076a      	lsls	r2, r5, #29
 8000622:	d004      	beq.n	800062e <__aeabi_fdiv+0xa2>
 8000624:	220f      	movs	r2, #15
 8000626:	402a      	ands	r2, r5
 8000628:	2a04      	cmp	r2, #4
 800062a:	d000      	beq.n	800062e <__aeabi_fdiv+0xa2>
 800062c:	3504      	adds	r5, #4
 800062e:	012a      	lsls	r2, r5, #4
 8000630:	d503      	bpl.n	800063a <__aeabi_fdiv+0xae>
 8000632:	4b60      	ldr	r3, [pc, #384]	; (80007b4 <__aeabi_fdiv+0x228>)
 8000634:	401d      	ands	r5, r3
 8000636:	003b      	movs	r3, r7
 8000638:	3380      	adds	r3, #128	; 0x80
 800063a:	2bfe      	cmp	r3, #254	; 0xfe
 800063c:	dd00      	ble.n	8000640 <__aeabi_fdiv+0xb4>
 800063e:	e070      	b.n	8000722 <__aeabi_fdiv+0x196>
 8000640:	01ad      	lsls	r5, r5, #6
 8000642:	0a6d      	lsrs	r5, r5, #9
 8000644:	b2d8      	uxtb	r0, r3
 8000646:	e002      	b.n	800064e <__aeabi_fdiv+0xc2>
 8000648:	000e      	movs	r6, r1
 800064a:	2000      	movs	r0, #0
 800064c:	2500      	movs	r5, #0
 800064e:	05c0      	lsls	r0, r0, #23
 8000650:	4328      	orrs	r0, r5
 8000652:	07f6      	lsls	r6, r6, #31
 8000654:	4330      	orrs	r0, r6
 8000656:	bce0      	pop	{r5, r6, r7}
 8000658:	46ba      	mov	sl, r7
 800065a:	46b1      	mov	r9, r6
 800065c:	46a8      	mov	r8, r5
 800065e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000660:	4643      	mov	r3, r8
 8000662:	2b00      	cmp	r3, #0
 8000664:	d13f      	bne.n	80006e6 <__aeabi_fdiv+0x15a>
 8000666:	2202      	movs	r2, #2
 8000668:	3fff      	subs	r7, #255	; 0xff
 800066a:	e003      	b.n	8000674 <__aeabi_fdiv+0xe8>
 800066c:	4643      	mov	r3, r8
 800066e:	2b00      	cmp	r3, #0
 8000670:	d12d      	bne.n	80006ce <__aeabi_fdiv+0x142>
 8000672:	2201      	movs	r2, #1
 8000674:	0031      	movs	r1, r6
 8000676:	464b      	mov	r3, r9
 8000678:	4061      	eors	r1, r4
 800067a:	b2c9      	uxtb	r1, r1
 800067c:	4313      	orrs	r3, r2
 800067e:	2b0f      	cmp	r3, #15
 8000680:	d834      	bhi.n	80006ec <__aeabi_fdiv+0x160>
 8000682:	484d      	ldr	r0, [pc, #308]	; (80007b8 <__aeabi_fdiv+0x22c>)
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	58c3      	ldr	r3, [r0, r3]
 8000688:	469f      	mov	pc, r3
 800068a:	2d00      	cmp	r5, #0
 800068c:	d113      	bne.n	80006b6 <__aeabi_fdiv+0x12a>
 800068e:	2304      	movs	r3, #4
 8000690:	4699      	mov	r9, r3
 8000692:	3b03      	subs	r3, #3
 8000694:	2700      	movs	r7, #0
 8000696:	469a      	mov	sl, r3
 8000698:	e791      	b.n	80005be <__aeabi_fdiv+0x32>
 800069a:	2d00      	cmp	r5, #0
 800069c:	d105      	bne.n	80006aa <__aeabi_fdiv+0x11e>
 800069e:	2308      	movs	r3, #8
 80006a0:	4699      	mov	r9, r3
 80006a2:	3b06      	subs	r3, #6
 80006a4:	27ff      	movs	r7, #255	; 0xff
 80006a6:	469a      	mov	sl, r3
 80006a8:	e789      	b.n	80005be <__aeabi_fdiv+0x32>
 80006aa:	230c      	movs	r3, #12
 80006ac:	4699      	mov	r9, r3
 80006ae:	3b09      	subs	r3, #9
 80006b0:	27ff      	movs	r7, #255	; 0xff
 80006b2:	469a      	mov	sl, r3
 80006b4:	e783      	b.n	80005be <__aeabi_fdiv+0x32>
 80006b6:	0028      	movs	r0, r5
 80006b8:	f001 fe84 	bl	80023c4 <__clzsi2>
 80006bc:	2776      	movs	r7, #118	; 0x76
 80006be:	1f43      	subs	r3, r0, #5
 80006c0:	409d      	lsls	r5, r3
 80006c2:	2300      	movs	r3, #0
 80006c4:	427f      	negs	r7, r7
 80006c6:	4699      	mov	r9, r3
 80006c8:	469a      	mov	sl, r3
 80006ca:	1a3f      	subs	r7, r7, r0
 80006cc:	e777      	b.n	80005be <__aeabi_fdiv+0x32>
 80006ce:	4640      	mov	r0, r8
 80006d0:	f001 fe78 	bl	80023c4 <__clzsi2>
 80006d4:	4642      	mov	r2, r8
 80006d6:	1f43      	subs	r3, r0, #5
 80006d8:	409a      	lsls	r2, r3
 80006da:	2376      	movs	r3, #118	; 0x76
 80006dc:	425b      	negs	r3, r3
 80006de:	4690      	mov	r8, r2
 80006e0:	1a1b      	subs	r3, r3, r0
 80006e2:	2200      	movs	r2, #0
 80006e4:	e77d      	b.n	80005e2 <__aeabi_fdiv+0x56>
 80006e6:	23ff      	movs	r3, #255	; 0xff
 80006e8:	2203      	movs	r2, #3
 80006ea:	e77a      	b.n	80005e2 <__aeabi_fdiv+0x56>
 80006ec:	000e      	movs	r6, r1
 80006ee:	20ff      	movs	r0, #255	; 0xff
 80006f0:	2500      	movs	r5, #0
 80006f2:	e7ac      	b.n	800064e <__aeabi_fdiv+0xc2>
 80006f4:	2001      	movs	r0, #1
 80006f6:	1ac0      	subs	r0, r0, r3
 80006f8:	281b      	cmp	r0, #27
 80006fa:	dca6      	bgt.n	800064a <__aeabi_fdiv+0xbe>
 80006fc:	379e      	adds	r7, #158	; 0x9e
 80006fe:	002a      	movs	r2, r5
 8000700:	40bd      	lsls	r5, r7
 8000702:	40c2      	lsrs	r2, r0
 8000704:	1e6b      	subs	r3, r5, #1
 8000706:	419d      	sbcs	r5, r3
 8000708:	4315      	orrs	r5, r2
 800070a:	076b      	lsls	r3, r5, #29
 800070c:	d004      	beq.n	8000718 <__aeabi_fdiv+0x18c>
 800070e:	230f      	movs	r3, #15
 8000710:	402b      	ands	r3, r5
 8000712:	2b04      	cmp	r3, #4
 8000714:	d000      	beq.n	8000718 <__aeabi_fdiv+0x18c>
 8000716:	3504      	adds	r5, #4
 8000718:	016b      	lsls	r3, r5, #5
 800071a:	d544      	bpl.n	80007a6 <__aeabi_fdiv+0x21a>
 800071c:	2001      	movs	r0, #1
 800071e:	2500      	movs	r5, #0
 8000720:	e795      	b.n	800064e <__aeabi_fdiv+0xc2>
 8000722:	20ff      	movs	r0, #255	; 0xff
 8000724:	2500      	movs	r5, #0
 8000726:	e792      	b.n	800064e <__aeabi_fdiv+0xc2>
 8000728:	2580      	movs	r5, #128	; 0x80
 800072a:	2600      	movs	r6, #0
 800072c:	20ff      	movs	r0, #255	; 0xff
 800072e:	03ed      	lsls	r5, r5, #15
 8000730:	e78d      	b.n	800064e <__aeabi_fdiv+0xc2>
 8000732:	2300      	movs	r3, #0
 8000734:	4698      	mov	r8, r3
 8000736:	2080      	movs	r0, #128	; 0x80
 8000738:	03c0      	lsls	r0, r0, #15
 800073a:	4205      	tst	r5, r0
 800073c:	d009      	beq.n	8000752 <__aeabi_fdiv+0x1c6>
 800073e:	4643      	mov	r3, r8
 8000740:	4203      	tst	r3, r0
 8000742:	d106      	bne.n	8000752 <__aeabi_fdiv+0x1c6>
 8000744:	4645      	mov	r5, r8
 8000746:	4305      	orrs	r5, r0
 8000748:	026d      	lsls	r5, r5, #9
 800074a:	0026      	movs	r6, r4
 800074c:	20ff      	movs	r0, #255	; 0xff
 800074e:	0a6d      	lsrs	r5, r5, #9
 8000750:	e77d      	b.n	800064e <__aeabi_fdiv+0xc2>
 8000752:	2080      	movs	r0, #128	; 0x80
 8000754:	03c0      	lsls	r0, r0, #15
 8000756:	4305      	orrs	r5, r0
 8000758:	026d      	lsls	r5, r5, #9
 800075a:	20ff      	movs	r0, #255	; 0xff
 800075c:	0a6d      	lsrs	r5, r5, #9
 800075e:	e776      	b.n	800064e <__aeabi_fdiv+0xc2>
 8000760:	4642      	mov	r2, r8
 8000762:	016b      	lsls	r3, r5, #5
 8000764:	0150      	lsls	r0, r2, #5
 8000766:	4283      	cmp	r3, r0
 8000768:	d219      	bcs.n	800079e <__aeabi_fdiv+0x212>
 800076a:	221b      	movs	r2, #27
 800076c:	2500      	movs	r5, #0
 800076e:	3f01      	subs	r7, #1
 8000770:	2601      	movs	r6, #1
 8000772:	001c      	movs	r4, r3
 8000774:	006d      	lsls	r5, r5, #1
 8000776:	005b      	lsls	r3, r3, #1
 8000778:	2c00      	cmp	r4, #0
 800077a:	db01      	blt.n	8000780 <__aeabi_fdiv+0x1f4>
 800077c:	4298      	cmp	r0, r3
 800077e:	d801      	bhi.n	8000784 <__aeabi_fdiv+0x1f8>
 8000780:	1a1b      	subs	r3, r3, r0
 8000782:	4335      	orrs	r5, r6
 8000784:	3a01      	subs	r2, #1
 8000786:	2a00      	cmp	r2, #0
 8000788:	d1f3      	bne.n	8000772 <__aeabi_fdiv+0x1e6>
 800078a:	1e5a      	subs	r2, r3, #1
 800078c:	4193      	sbcs	r3, r2
 800078e:	431d      	orrs	r5, r3
 8000790:	003b      	movs	r3, r7
 8000792:	337f      	adds	r3, #127	; 0x7f
 8000794:	000e      	movs	r6, r1
 8000796:	2b00      	cmp	r3, #0
 8000798:	dd00      	ble.n	800079c <__aeabi_fdiv+0x210>
 800079a:	e741      	b.n	8000620 <__aeabi_fdiv+0x94>
 800079c:	e7aa      	b.n	80006f4 <__aeabi_fdiv+0x168>
 800079e:	221a      	movs	r2, #26
 80007a0:	2501      	movs	r5, #1
 80007a2:	1a1b      	subs	r3, r3, r0
 80007a4:	e7e4      	b.n	8000770 <__aeabi_fdiv+0x1e4>
 80007a6:	01ad      	lsls	r5, r5, #6
 80007a8:	2000      	movs	r0, #0
 80007aa:	0a6d      	lsrs	r5, r5, #9
 80007ac:	e74f      	b.n	800064e <__aeabi_fdiv+0xc2>
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	08004640 	.word	0x08004640
 80007b4:	f7ffffff 	.word	0xf7ffffff
 80007b8:	08004680 	.word	0x08004680

080007bc <__aeabi_fmul>:
 80007bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007be:	464f      	mov	r7, r9
 80007c0:	4646      	mov	r6, r8
 80007c2:	46d6      	mov	lr, sl
 80007c4:	0244      	lsls	r4, r0, #9
 80007c6:	0045      	lsls	r5, r0, #1
 80007c8:	b5c0      	push	{r6, r7, lr}
 80007ca:	0a64      	lsrs	r4, r4, #9
 80007cc:	1c0f      	adds	r7, r1, #0
 80007ce:	0e2d      	lsrs	r5, r5, #24
 80007d0:	0fc6      	lsrs	r6, r0, #31
 80007d2:	2d00      	cmp	r5, #0
 80007d4:	d100      	bne.n	80007d8 <__aeabi_fmul+0x1c>
 80007d6:	e08d      	b.n	80008f4 <__aeabi_fmul+0x138>
 80007d8:	2dff      	cmp	r5, #255	; 0xff
 80007da:	d100      	bne.n	80007de <__aeabi_fmul+0x22>
 80007dc:	e092      	b.n	8000904 <__aeabi_fmul+0x148>
 80007de:	2300      	movs	r3, #0
 80007e0:	2080      	movs	r0, #128	; 0x80
 80007e2:	4699      	mov	r9, r3
 80007e4:	469a      	mov	sl, r3
 80007e6:	00e4      	lsls	r4, r4, #3
 80007e8:	04c0      	lsls	r0, r0, #19
 80007ea:	4304      	orrs	r4, r0
 80007ec:	3d7f      	subs	r5, #127	; 0x7f
 80007ee:	0278      	lsls	r0, r7, #9
 80007f0:	0a43      	lsrs	r3, r0, #9
 80007f2:	4698      	mov	r8, r3
 80007f4:	007b      	lsls	r3, r7, #1
 80007f6:	0e1b      	lsrs	r3, r3, #24
 80007f8:	0fff      	lsrs	r7, r7, #31
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d100      	bne.n	8000800 <__aeabi_fmul+0x44>
 80007fe:	e070      	b.n	80008e2 <__aeabi_fmul+0x126>
 8000800:	2bff      	cmp	r3, #255	; 0xff
 8000802:	d100      	bne.n	8000806 <__aeabi_fmul+0x4a>
 8000804:	e086      	b.n	8000914 <__aeabi_fmul+0x158>
 8000806:	4642      	mov	r2, r8
 8000808:	00d0      	lsls	r0, r2, #3
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	3b7f      	subs	r3, #127	; 0x7f
 800080e:	18ed      	adds	r5, r5, r3
 8000810:	2300      	movs	r3, #0
 8000812:	04d2      	lsls	r2, r2, #19
 8000814:	4302      	orrs	r2, r0
 8000816:	4690      	mov	r8, r2
 8000818:	469c      	mov	ip, r3
 800081a:	0031      	movs	r1, r6
 800081c:	464b      	mov	r3, r9
 800081e:	4079      	eors	r1, r7
 8000820:	1c68      	adds	r0, r5, #1
 8000822:	2b0f      	cmp	r3, #15
 8000824:	d81c      	bhi.n	8000860 <__aeabi_fmul+0xa4>
 8000826:	4a76      	ldr	r2, [pc, #472]	; (8000a00 <__aeabi_fmul+0x244>)
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	58d3      	ldr	r3, [r2, r3]
 800082c:	469f      	mov	pc, r3
 800082e:	0039      	movs	r1, r7
 8000830:	4644      	mov	r4, r8
 8000832:	46e2      	mov	sl, ip
 8000834:	4653      	mov	r3, sl
 8000836:	2b02      	cmp	r3, #2
 8000838:	d00f      	beq.n	800085a <__aeabi_fmul+0x9e>
 800083a:	2b03      	cmp	r3, #3
 800083c:	d100      	bne.n	8000840 <__aeabi_fmul+0x84>
 800083e:	e0d7      	b.n	80009f0 <__aeabi_fmul+0x234>
 8000840:	2b01      	cmp	r3, #1
 8000842:	d137      	bne.n	80008b4 <__aeabi_fmul+0xf8>
 8000844:	2000      	movs	r0, #0
 8000846:	2400      	movs	r4, #0
 8000848:	05c0      	lsls	r0, r0, #23
 800084a:	4320      	orrs	r0, r4
 800084c:	07c9      	lsls	r1, r1, #31
 800084e:	4308      	orrs	r0, r1
 8000850:	bce0      	pop	{r5, r6, r7}
 8000852:	46ba      	mov	sl, r7
 8000854:	46b1      	mov	r9, r6
 8000856:	46a8      	mov	r8, r5
 8000858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800085a:	20ff      	movs	r0, #255	; 0xff
 800085c:	2400      	movs	r4, #0
 800085e:	e7f3      	b.n	8000848 <__aeabi_fmul+0x8c>
 8000860:	0c26      	lsrs	r6, r4, #16
 8000862:	0424      	lsls	r4, r4, #16
 8000864:	0c22      	lsrs	r2, r4, #16
 8000866:	4644      	mov	r4, r8
 8000868:	0424      	lsls	r4, r4, #16
 800086a:	0c24      	lsrs	r4, r4, #16
 800086c:	4643      	mov	r3, r8
 800086e:	0027      	movs	r7, r4
 8000870:	0c1b      	lsrs	r3, r3, #16
 8000872:	4357      	muls	r7, r2
 8000874:	4374      	muls	r4, r6
 8000876:	435a      	muls	r2, r3
 8000878:	435e      	muls	r6, r3
 800087a:	1912      	adds	r2, r2, r4
 800087c:	0c3b      	lsrs	r3, r7, #16
 800087e:	189b      	adds	r3, r3, r2
 8000880:	429c      	cmp	r4, r3
 8000882:	d903      	bls.n	800088c <__aeabi_fmul+0xd0>
 8000884:	2280      	movs	r2, #128	; 0x80
 8000886:	0252      	lsls	r2, r2, #9
 8000888:	4694      	mov	ip, r2
 800088a:	4466      	add	r6, ip
 800088c:	043f      	lsls	r7, r7, #16
 800088e:	041a      	lsls	r2, r3, #16
 8000890:	0c3f      	lsrs	r7, r7, #16
 8000892:	19d2      	adds	r2, r2, r7
 8000894:	0194      	lsls	r4, r2, #6
 8000896:	1e67      	subs	r7, r4, #1
 8000898:	41bc      	sbcs	r4, r7
 800089a:	0c1b      	lsrs	r3, r3, #16
 800089c:	0e92      	lsrs	r2, r2, #26
 800089e:	199b      	adds	r3, r3, r6
 80008a0:	4314      	orrs	r4, r2
 80008a2:	019b      	lsls	r3, r3, #6
 80008a4:	431c      	orrs	r4, r3
 80008a6:	011b      	lsls	r3, r3, #4
 80008a8:	d400      	bmi.n	80008ac <__aeabi_fmul+0xf0>
 80008aa:	e09b      	b.n	80009e4 <__aeabi_fmul+0x228>
 80008ac:	2301      	movs	r3, #1
 80008ae:	0862      	lsrs	r2, r4, #1
 80008b0:	401c      	ands	r4, r3
 80008b2:	4314      	orrs	r4, r2
 80008b4:	0002      	movs	r2, r0
 80008b6:	327f      	adds	r2, #127	; 0x7f
 80008b8:	2a00      	cmp	r2, #0
 80008ba:	dd64      	ble.n	8000986 <__aeabi_fmul+0x1ca>
 80008bc:	0763      	lsls	r3, r4, #29
 80008be:	d004      	beq.n	80008ca <__aeabi_fmul+0x10e>
 80008c0:	230f      	movs	r3, #15
 80008c2:	4023      	ands	r3, r4
 80008c4:	2b04      	cmp	r3, #4
 80008c6:	d000      	beq.n	80008ca <__aeabi_fmul+0x10e>
 80008c8:	3404      	adds	r4, #4
 80008ca:	0123      	lsls	r3, r4, #4
 80008cc:	d503      	bpl.n	80008d6 <__aeabi_fmul+0x11a>
 80008ce:	0002      	movs	r2, r0
 80008d0:	4b4c      	ldr	r3, [pc, #304]	; (8000a04 <__aeabi_fmul+0x248>)
 80008d2:	3280      	adds	r2, #128	; 0x80
 80008d4:	401c      	ands	r4, r3
 80008d6:	2afe      	cmp	r2, #254	; 0xfe
 80008d8:	dcbf      	bgt.n	800085a <__aeabi_fmul+0x9e>
 80008da:	01a4      	lsls	r4, r4, #6
 80008dc:	0a64      	lsrs	r4, r4, #9
 80008de:	b2d0      	uxtb	r0, r2
 80008e0:	e7b2      	b.n	8000848 <__aeabi_fmul+0x8c>
 80008e2:	4643      	mov	r3, r8
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d13d      	bne.n	8000964 <__aeabi_fmul+0x1a8>
 80008e8:	464a      	mov	r2, r9
 80008ea:	3301      	adds	r3, #1
 80008ec:	431a      	orrs	r2, r3
 80008ee:	4691      	mov	r9, r2
 80008f0:	469c      	mov	ip, r3
 80008f2:	e792      	b.n	800081a <__aeabi_fmul+0x5e>
 80008f4:	2c00      	cmp	r4, #0
 80008f6:	d129      	bne.n	800094c <__aeabi_fmul+0x190>
 80008f8:	2304      	movs	r3, #4
 80008fa:	4699      	mov	r9, r3
 80008fc:	3b03      	subs	r3, #3
 80008fe:	2500      	movs	r5, #0
 8000900:	469a      	mov	sl, r3
 8000902:	e774      	b.n	80007ee <__aeabi_fmul+0x32>
 8000904:	2c00      	cmp	r4, #0
 8000906:	d11b      	bne.n	8000940 <__aeabi_fmul+0x184>
 8000908:	2308      	movs	r3, #8
 800090a:	4699      	mov	r9, r3
 800090c:	3b06      	subs	r3, #6
 800090e:	25ff      	movs	r5, #255	; 0xff
 8000910:	469a      	mov	sl, r3
 8000912:	e76c      	b.n	80007ee <__aeabi_fmul+0x32>
 8000914:	4643      	mov	r3, r8
 8000916:	35ff      	adds	r5, #255	; 0xff
 8000918:	2b00      	cmp	r3, #0
 800091a:	d10b      	bne.n	8000934 <__aeabi_fmul+0x178>
 800091c:	2302      	movs	r3, #2
 800091e:	464a      	mov	r2, r9
 8000920:	431a      	orrs	r2, r3
 8000922:	4691      	mov	r9, r2
 8000924:	469c      	mov	ip, r3
 8000926:	e778      	b.n	800081a <__aeabi_fmul+0x5e>
 8000928:	4653      	mov	r3, sl
 800092a:	0031      	movs	r1, r6
 800092c:	2b02      	cmp	r3, #2
 800092e:	d000      	beq.n	8000932 <__aeabi_fmul+0x176>
 8000930:	e783      	b.n	800083a <__aeabi_fmul+0x7e>
 8000932:	e792      	b.n	800085a <__aeabi_fmul+0x9e>
 8000934:	2303      	movs	r3, #3
 8000936:	464a      	mov	r2, r9
 8000938:	431a      	orrs	r2, r3
 800093a:	4691      	mov	r9, r2
 800093c:	469c      	mov	ip, r3
 800093e:	e76c      	b.n	800081a <__aeabi_fmul+0x5e>
 8000940:	230c      	movs	r3, #12
 8000942:	4699      	mov	r9, r3
 8000944:	3b09      	subs	r3, #9
 8000946:	25ff      	movs	r5, #255	; 0xff
 8000948:	469a      	mov	sl, r3
 800094a:	e750      	b.n	80007ee <__aeabi_fmul+0x32>
 800094c:	0020      	movs	r0, r4
 800094e:	f001 fd39 	bl	80023c4 <__clzsi2>
 8000952:	2576      	movs	r5, #118	; 0x76
 8000954:	1f43      	subs	r3, r0, #5
 8000956:	409c      	lsls	r4, r3
 8000958:	2300      	movs	r3, #0
 800095a:	426d      	negs	r5, r5
 800095c:	4699      	mov	r9, r3
 800095e:	469a      	mov	sl, r3
 8000960:	1a2d      	subs	r5, r5, r0
 8000962:	e744      	b.n	80007ee <__aeabi_fmul+0x32>
 8000964:	4640      	mov	r0, r8
 8000966:	f001 fd2d 	bl	80023c4 <__clzsi2>
 800096a:	4642      	mov	r2, r8
 800096c:	1f43      	subs	r3, r0, #5
 800096e:	409a      	lsls	r2, r3
 8000970:	2300      	movs	r3, #0
 8000972:	1a2d      	subs	r5, r5, r0
 8000974:	4690      	mov	r8, r2
 8000976:	469c      	mov	ip, r3
 8000978:	3d76      	subs	r5, #118	; 0x76
 800097a:	e74e      	b.n	800081a <__aeabi_fmul+0x5e>
 800097c:	2480      	movs	r4, #128	; 0x80
 800097e:	2100      	movs	r1, #0
 8000980:	20ff      	movs	r0, #255	; 0xff
 8000982:	03e4      	lsls	r4, r4, #15
 8000984:	e760      	b.n	8000848 <__aeabi_fmul+0x8c>
 8000986:	2301      	movs	r3, #1
 8000988:	1a9b      	subs	r3, r3, r2
 800098a:	2b1b      	cmp	r3, #27
 800098c:	dd00      	ble.n	8000990 <__aeabi_fmul+0x1d4>
 800098e:	e759      	b.n	8000844 <__aeabi_fmul+0x88>
 8000990:	0022      	movs	r2, r4
 8000992:	309e      	adds	r0, #158	; 0x9e
 8000994:	40da      	lsrs	r2, r3
 8000996:	4084      	lsls	r4, r0
 8000998:	0013      	movs	r3, r2
 800099a:	1e62      	subs	r2, r4, #1
 800099c:	4194      	sbcs	r4, r2
 800099e:	431c      	orrs	r4, r3
 80009a0:	0763      	lsls	r3, r4, #29
 80009a2:	d004      	beq.n	80009ae <__aeabi_fmul+0x1f2>
 80009a4:	230f      	movs	r3, #15
 80009a6:	4023      	ands	r3, r4
 80009a8:	2b04      	cmp	r3, #4
 80009aa:	d000      	beq.n	80009ae <__aeabi_fmul+0x1f2>
 80009ac:	3404      	adds	r4, #4
 80009ae:	0163      	lsls	r3, r4, #5
 80009b0:	d51a      	bpl.n	80009e8 <__aeabi_fmul+0x22c>
 80009b2:	2001      	movs	r0, #1
 80009b4:	2400      	movs	r4, #0
 80009b6:	e747      	b.n	8000848 <__aeabi_fmul+0x8c>
 80009b8:	2080      	movs	r0, #128	; 0x80
 80009ba:	03c0      	lsls	r0, r0, #15
 80009bc:	4204      	tst	r4, r0
 80009be:	d009      	beq.n	80009d4 <__aeabi_fmul+0x218>
 80009c0:	4643      	mov	r3, r8
 80009c2:	4203      	tst	r3, r0
 80009c4:	d106      	bne.n	80009d4 <__aeabi_fmul+0x218>
 80009c6:	4644      	mov	r4, r8
 80009c8:	4304      	orrs	r4, r0
 80009ca:	0264      	lsls	r4, r4, #9
 80009cc:	0039      	movs	r1, r7
 80009ce:	20ff      	movs	r0, #255	; 0xff
 80009d0:	0a64      	lsrs	r4, r4, #9
 80009d2:	e739      	b.n	8000848 <__aeabi_fmul+0x8c>
 80009d4:	2080      	movs	r0, #128	; 0x80
 80009d6:	03c0      	lsls	r0, r0, #15
 80009d8:	4304      	orrs	r4, r0
 80009da:	0264      	lsls	r4, r4, #9
 80009dc:	0031      	movs	r1, r6
 80009de:	20ff      	movs	r0, #255	; 0xff
 80009e0:	0a64      	lsrs	r4, r4, #9
 80009e2:	e731      	b.n	8000848 <__aeabi_fmul+0x8c>
 80009e4:	0028      	movs	r0, r5
 80009e6:	e765      	b.n	80008b4 <__aeabi_fmul+0xf8>
 80009e8:	01a4      	lsls	r4, r4, #6
 80009ea:	2000      	movs	r0, #0
 80009ec:	0a64      	lsrs	r4, r4, #9
 80009ee:	e72b      	b.n	8000848 <__aeabi_fmul+0x8c>
 80009f0:	2080      	movs	r0, #128	; 0x80
 80009f2:	03c0      	lsls	r0, r0, #15
 80009f4:	4304      	orrs	r4, r0
 80009f6:	0264      	lsls	r4, r4, #9
 80009f8:	20ff      	movs	r0, #255	; 0xff
 80009fa:	0a64      	lsrs	r4, r4, #9
 80009fc:	e724      	b.n	8000848 <__aeabi_fmul+0x8c>
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	080046c0 	.word	0x080046c0
 8000a04:	f7ffffff 	.word	0xf7ffffff

08000a08 <__aeabi_fsub>:
 8000a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a0a:	46ce      	mov	lr, r9
 8000a0c:	4647      	mov	r7, r8
 8000a0e:	0243      	lsls	r3, r0, #9
 8000a10:	0a5b      	lsrs	r3, r3, #9
 8000a12:	024e      	lsls	r6, r1, #9
 8000a14:	00da      	lsls	r2, r3, #3
 8000a16:	4694      	mov	ip, r2
 8000a18:	0a72      	lsrs	r2, r6, #9
 8000a1a:	4691      	mov	r9, r2
 8000a1c:	0045      	lsls	r5, r0, #1
 8000a1e:	004a      	lsls	r2, r1, #1
 8000a20:	b580      	push	{r7, lr}
 8000a22:	0e2d      	lsrs	r5, r5, #24
 8000a24:	001f      	movs	r7, r3
 8000a26:	0fc4      	lsrs	r4, r0, #31
 8000a28:	0e12      	lsrs	r2, r2, #24
 8000a2a:	0fc9      	lsrs	r1, r1, #31
 8000a2c:	09b6      	lsrs	r6, r6, #6
 8000a2e:	2aff      	cmp	r2, #255	; 0xff
 8000a30:	d05b      	beq.n	8000aea <__aeabi_fsub+0xe2>
 8000a32:	2001      	movs	r0, #1
 8000a34:	4041      	eors	r1, r0
 8000a36:	428c      	cmp	r4, r1
 8000a38:	d039      	beq.n	8000aae <__aeabi_fsub+0xa6>
 8000a3a:	1aa8      	subs	r0, r5, r2
 8000a3c:	2800      	cmp	r0, #0
 8000a3e:	dd5a      	ble.n	8000af6 <__aeabi_fsub+0xee>
 8000a40:	2a00      	cmp	r2, #0
 8000a42:	d06a      	beq.n	8000b1a <__aeabi_fsub+0x112>
 8000a44:	2dff      	cmp	r5, #255	; 0xff
 8000a46:	d100      	bne.n	8000a4a <__aeabi_fsub+0x42>
 8000a48:	e0d9      	b.n	8000bfe <__aeabi_fsub+0x1f6>
 8000a4a:	2280      	movs	r2, #128	; 0x80
 8000a4c:	04d2      	lsls	r2, r2, #19
 8000a4e:	4316      	orrs	r6, r2
 8000a50:	281b      	cmp	r0, #27
 8000a52:	dc00      	bgt.n	8000a56 <__aeabi_fsub+0x4e>
 8000a54:	e0e9      	b.n	8000c2a <__aeabi_fsub+0x222>
 8000a56:	2001      	movs	r0, #1
 8000a58:	4663      	mov	r3, ip
 8000a5a:	1a18      	subs	r0, r3, r0
 8000a5c:	0143      	lsls	r3, r0, #5
 8000a5e:	d400      	bmi.n	8000a62 <__aeabi_fsub+0x5a>
 8000a60:	e0b4      	b.n	8000bcc <__aeabi_fsub+0x1c4>
 8000a62:	0180      	lsls	r0, r0, #6
 8000a64:	0987      	lsrs	r7, r0, #6
 8000a66:	0038      	movs	r0, r7
 8000a68:	f001 fcac 	bl	80023c4 <__clzsi2>
 8000a6c:	3805      	subs	r0, #5
 8000a6e:	4087      	lsls	r7, r0
 8000a70:	4285      	cmp	r5, r0
 8000a72:	dc00      	bgt.n	8000a76 <__aeabi_fsub+0x6e>
 8000a74:	e0cc      	b.n	8000c10 <__aeabi_fsub+0x208>
 8000a76:	1a2d      	subs	r5, r5, r0
 8000a78:	48b5      	ldr	r0, [pc, #724]	; (8000d50 <__aeabi_fsub+0x348>)
 8000a7a:	4038      	ands	r0, r7
 8000a7c:	0743      	lsls	r3, r0, #29
 8000a7e:	d004      	beq.n	8000a8a <__aeabi_fsub+0x82>
 8000a80:	230f      	movs	r3, #15
 8000a82:	4003      	ands	r3, r0
 8000a84:	2b04      	cmp	r3, #4
 8000a86:	d000      	beq.n	8000a8a <__aeabi_fsub+0x82>
 8000a88:	3004      	adds	r0, #4
 8000a8a:	0143      	lsls	r3, r0, #5
 8000a8c:	d400      	bmi.n	8000a90 <__aeabi_fsub+0x88>
 8000a8e:	e0a0      	b.n	8000bd2 <__aeabi_fsub+0x1ca>
 8000a90:	1c6a      	adds	r2, r5, #1
 8000a92:	2dfe      	cmp	r5, #254	; 0xfe
 8000a94:	d100      	bne.n	8000a98 <__aeabi_fsub+0x90>
 8000a96:	e08d      	b.n	8000bb4 <__aeabi_fsub+0x1ac>
 8000a98:	0180      	lsls	r0, r0, #6
 8000a9a:	0a47      	lsrs	r7, r0, #9
 8000a9c:	b2d2      	uxtb	r2, r2
 8000a9e:	05d0      	lsls	r0, r2, #23
 8000aa0:	4338      	orrs	r0, r7
 8000aa2:	07e4      	lsls	r4, r4, #31
 8000aa4:	4320      	orrs	r0, r4
 8000aa6:	bcc0      	pop	{r6, r7}
 8000aa8:	46b9      	mov	r9, r7
 8000aaa:	46b0      	mov	r8, r6
 8000aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000aae:	1aa8      	subs	r0, r5, r2
 8000ab0:	4680      	mov	r8, r0
 8000ab2:	2800      	cmp	r0, #0
 8000ab4:	dd45      	ble.n	8000b42 <__aeabi_fsub+0x13a>
 8000ab6:	2a00      	cmp	r2, #0
 8000ab8:	d070      	beq.n	8000b9c <__aeabi_fsub+0x194>
 8000aba:	2dff      	cmp	r5, #255	; 0xff
 8000abc:	d100      	bne.n	8000ac0 <__aeabi_fsub+0xb8>
 8000abe:	e09e      	b.n	8000bfe <__aeabi_fsub+0x1f6>
 8000ac0:	2380      	movs	r3, #128	; 0x80
 8000ac2:	04db      	lsls	r3, r3, #19
 8000ac4:	431e      	orrs	r6, r3
 8000ac6:	4643      	mov	r3, r8
 8000ac8:	2b1b      	cmp	r3, #27
 8000aca:	dc00      	bgt.n	8000ace <__aeabi_fsub+0xc6>
 8000acc:	e0d2      	b.n	8000c74 <__aeabi_fsub+0x26c>
 8000ace:	2001      	movs	r0, #1
 8000ad0:	4460      	add	r0, ip
 8000ad2:	0143      	lsls	r3, r0, #5
 8000ad4:	d57a      	bpl.n	8000bcc <__aeabi_fsub+0x1c4>
 8000ad6:	3501      	adds	r5, #1
 8000ad8:	2dff      	cmp	r5, #255	; 0xff
 8000ada:	d06b      	beq.n	8000bb4 <__aeabi_fsub+0x1ac>
 8000adc:	2301      	movs	r3, #1
 8000ade:	4a9d      	ldr	r2, [pc, #628]	; (8000d54 <__aeabi_fsub+0x34c>)
 8000ae0:	4003      	ands	r3, r0
 8000ae2:	0840      	lsrs	r0, r0, #1
 8000ae4:	4010      	ands	r0, r2
 8000ae6:	4318      	orrs	r0, r3
 8000ae8:	e7c8      	b.n	8000a7c <__aeabi_fsub+0x74>
 8000aea:	2e00      	cmp	r6, #0
 8000aec:	d020      	beq.n	8000b30 <__aeabi_fsub+0x128>
 8000aee:	428c      	cmp	r4, r1
 8000af0:	d023      	beq.n	8000b3a <__aeabi_fsub+0x132>
 8000af2:	0028      	movs	r0, r5
 8000af4:	38ff      	subs	r0, #255	; 0xff
 8000af6:	2800      	cmp	r0, #0
 8000af8:	d039      	beq.n	8000b6e <__aeabi_fsub+0x166>
 8000afa:	1b57      	subs	r7, r2, r5
 8000afc:	2d00      	cmp	r5, #0
 8000afe:	d000      	beq.n	8000b02 <__aeabi_fsub+0xfa>
 8000b00:	e09d      	b.n	8000c3e <__aeabi_fsub+0x236>
 8000b02:	4663      	mov	r3, ip
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d100      	bne.n	8000b0a <__aeabi_fsub+0x102>
 8000b08:	e0db      	b.n	8000cc2 <__aeabi_fsub+0x2ba>
 8000b0a:	1e7b      	subs	r3, r7, #1
 8000b0c:	2f01      	cmp	r7, #1
 8000b0e:	d100      	bne.n	8000b12 <__aeabi_fsub+0x10a>
 8000b10:	e10d      	b.n	8000d2e <__aeabi_fsub+0x326>
 8000b12:	2fff      	cmp	r7, #255	; 0xff
 8000b14:	d071      	beq.n	8000bfa <__aeabi_fsub+0x1f2>
 8000b16:	001f      	movs	r7, r3
 8000b18:	e098      	b.n	8000c4c <__aeabi_fsub+0x244>
 8000b1a:	2e00      	cmp	r6, #0
 8000b1c:	d100      	bne.n	8000b20 <__aeabi_fsub+0x118>
 8000b1e:	e0a7      	b.n	8000c70 <__aeabi_fsub+0x268>
 8000b20:	1e42      	subs	r2, r0, #1
 8000b22:	2801      	cmp	r0, #1
 8000b24:	d100      	bne.n	8000b28 <__aeabi_fsub+0x120>
 8000b26:	e0e6      	b.n	8000cf6 <__aeabi_fsub+0x2ee>
 8000b28:	28ff      	cmp	r0, #255	; 0xff
 8000b2a:	d068      	beq.n	8000bfe <__aeabi_fsub+0x1f6>
 8000b2c:	0010      	movs	r0, r2
 8000b2e:	e78f      	b.n	8000a50 <__aeabi_fsub+0x48>
 8000b30:	2001      	movs	r0, #1
 8000b32:	4041      	eors	r1, r0
 8000b34:	42a1      	cmp	r1, r4
 8000b36:	d000      	beq.n	8000b3a <__aeabi_fsub+0x132>
 8000b38:	e77f      	b.n	8000a3a <__aeabi_fsub+0x32>
 8000b3a:	20ff      	movs	r0, #255	; 0xff
 8000b3c:	4240      	negs	r0, r0
 8000b3e:	4680      	mov	r8, r0
 8000b40:	44a8      	add	r8, r5
 8000b42:	4640      	mov	r0, r8
 8000b44:	2800      	cmp	r0, #0
 8000b46:	d038      	beq.n	8000bba <__aeabi_fsub+0x1b2>
 8000b48:	1b51      	subs	r1, r2, r5
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	d100      	bne.n	8000b50 <__aeabi_fsub+0x148>
 8000b4e:	e0ae      	b.n	8000cae <__aeabi_fsub+0x2a6>
 8000b50:	2aff      	cmp	r2, #255	; 0xff
 8000b52:	d100      	bne.n	8000b56 <__aeabi_fsub+0x14e>
 8000b54:	e0df      	b.n	8000d16 <__aeabi_fsub+0x30e>
 8000b56:	2380      	movs	r3, #128	; 0x80
 8000b58:	4660      	mov	r0, ip
 8000b5a:	04db      	lsls	r3, r3, #19
 8000b5c:	4318      	orrs	r0, r3
 8000b5e:	4684      	mov	ip, r0
 8000b60:	291b      	cmp	r1, #27
 8000b62:	dc00      	bgt.n	8000b66 <__aeabi_fsub+0x15e>
 8000b64:	e0d9      	b.n	8000d1a <__aeabi_fsub+0x312>
 8000b66:	2001      	movs	r0, #1
 8000b68:	0015      	movs	r5, r2
 8000b6a:	1980      	adds	r0, r0, r6
 8000b6c:	e7b1      	b.n	8000ad2 <__aeabi_fsub+0xca>
 8000b6e:	20fe      	movs	r0, #254	; 0xfe
 8000b70:	1c6a      	adds	r2, r5, #1
 8000b72:	4210      	tst	r0, r2
 8000b74:	d171      	bne.n	8000c5a <__aeabi_fsub+0x252>
 8000b76:	2d00      	cmp	r5, #0
 8000b78:	d000      	beq.n	8000b7c <__aeabi_fsub+0x174>
 8000b7a:	e0a6      	b.n	8000cca <__aeabi_fsub+0x2c2>
 8000b7c:	4663      	mov	r3, ip
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d100      	bne.n	8000b84 <__aeabi_fsub+0x17c>
 8000b82:	e0d9      	b.n	8000d38 <__aeabi_fsub+0x330>
 8000b84:	2200      	movs	r2, #0
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	d100      	bne.n	8000b8c <__aeabi_fsub+0x184>
 8000b8a:	e788      	b.n	8000a9e <__aeabi_fsub+0x96>
 8000b8c:	1b98      	subs	r0, r3, r6
 8000b8e:	0143      	lsls	r3, r0, #5
 8000b90:	d400      	bmi.n	8000b94 <__aeabi_fsub+0x18c>
 8000b92:	e0e1      	b.n	8000d58 <__aeabi_fsub+0x350>
 8000b94:	4663      	mov	r3, ip
 8000b96:	000c      	movs	r4, r1
 8000b98:	1af0      	subs	r0, r6, r3
 8000b9a:	e76f      	b.n	8000a7c <__aeabi_fsub+0x74>
 8000b9c:	2e00      	cmp	r6, #0
 8000b9e:	d100      	bne.n	8000ba2 <__aeabi_fsub+0x19a>
 8000ba0:	e0b7      	b.n	8000d12 <__aeabi_fsub+0x30a>
 8000ba2:	0002      	movs	r2, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	2801      	cmp	r0, #1
 8000ba8:	d100      	bne.n	8000bac <__aeabi_fsub+0x1a4>
 8000baa:	e09c      	b.n	8000ce6 <__aeabi_fsub+0x2de>
 8000bac:	28ff      	cmp	r0, #255	; 0xff
 8000bae:	d026      	beq.n	8000bfe <__aeabi_fsub+0x1f6>
 8000bb0:	4690      	mov	r8, r2
 8000bb2:	e788      	b.n	8000ac6 <__aeabi_fsub+0xbe>
 8000bb4:	22ff      	movs	r2, #255	; 0xff
 8000bb6:	2700      	movs	r7, #0
 8000bb8:	e771      	b.n	8000a9e <__aeabi_fsub+0x96>
 8000bba:	20fe      	movs	r0, #254	; 0xfe
 8000bbc:	1c6a      	adds	r2, r5, #1
 8000bbe:	4210      	tst	r0, r2
 8000bc0:	d064      	beq.n	8000c8c <__aeabi_fsub+0x284>
 8000bc2:	2aff      	cmp	r2, #255	; 0xff
 8000bc4:	d0f6      	beq.n	8000bb4 <__aeabi_fsub+0x1ac>
 8000bc6:	0015      	movs	r5, r2
 8000bc8:	4466      	add	r6, ip
 8000bca:	0870      	lsrs	r0, r6, #1
 8000bcc:	0743      	lsls	r3, r0, #29
 8000bce:	d000      	beq.n	8000bd2 <__aeabi_fsub+0x1ca>
 8000bd0:	e756      	b.n	8000a80 <__aeabi_fsub+0x78>
 8000bd2:	08c3      	lsrs	r3, r0, #3
 8000bd4:	2dff      	cmp	r5, #255	; 0xff
 8000bd6:	d012      	beq.n	8000bfe <__aeabi_fsub+0x1f6>
 8000bd8:	025b      	lsls	r3, r3, #9
 8000bda:	0a5f      	lsrs	r7, r3, #9
 8000bdc:	b2ea      	uxtb	r2, r5
 8000bde:	e75e      	b.n	8000a9e <__aeabi_fsub+0x96>
 8000be0:	4662      	mov	r2, ip
 8000be2:	2a00      	cmp	r2, #0
 8000be4:	d100      	bne.n	8000be8 <__aeabi_fsub+0x1e0>
 8000be6:	e096      	b.n	8000d16 <__aeabi_fsub+0x30e>
 8000be8:	2e00      	cmp	r6, #0
 8000bea:	d008      	beq.n	8000bfe <__aeabi_fsub+0x1f6>
 8000bec:	2280      	movs	r2, #128	; 0x80
 8000bee:	03d2      	lsls	r2, r2, #15
 8000bf0:	4213      	tst	r3, r2
 8000bf2:	d004      	beq.n	8000bfe <__aeabi_fsub+0x1f6>
 8000bf4:	4648      	mov	r0, r9
 8000bf6:	4210      	tst	r0, r2
 8000bf8:	d101      	bne.n	8000bfe <__aeabi_fsub+0x1f6>
 8000bfa:	000c      	movs	r4, r1
 8000bfc:	464b      	mov	r3, r9
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d0d8      	beq.n	8000bb4 <__aeabi_fsub+0x1ac>
 8000c02:	2780      	movs	r7, #128	; 0x80
 8000c04:	03ff      	lsls	r7, r7, #15
 8000c06:	431f      	orrs	r7, r3
 8000c08:	027f      	lsls	r7, r7, #9
 8000c0a:	22ff      	movs	r2, #255	; 0xff
 8000c0c:	0a7f      	lsrs	r7, r7, #9
 8000c0e:	e746      	b.n	8000a9e <__aeabi_fsub+0x96>
 8000c10:	2320      	movs	r3, #32
 8000c12:	003a      	movs	r2, r7
 8000c14:	1b45      	subs	r5, r0, r5
 8000c16:	0038      	movs	r0, r7
 8000c18:	3501      	adds	r5, #1
 8000c1a:	40ea      	lsrs	r2, r5
 8000c1c:	1b5d      	subs	r5, r3, r5
 8000c1e:	40a8      	lsls	r0, r5
 8000c20:	1e43      	subs	r3, r0, #1
 8000c22:	4198      	sbcs	r0, r3
 8000c24:	2500      	movs	r5, #0
 8000c26:	4310      	orrs	r0, r2
 8000c28:	e728      	b.n	8000a7c <__aeabi_fsub+0x74>
 8000c2a:	2320      	movs	r3, #32
 8000c2c:	1a1b      	subs	r3, r3, r0
 8000c2e:	0032      	movs	r2, r6
 8000c30:	409e      	lsls	r6, r3
 8000c32:	40c2      	lsrs	r2, r0
 8000c34:	0030      	movs	r0, r6
 8000c36:	1e43      	subs	r3, r0, #1
 8000c38:	4198      	sbcs	r0, r3
 8000c3a:	4310      	orrs	r0, r2
 8000c3c:	e70c      	b.n	8000a58 <__aeabi_fsub+0x50>
 8000c3e:	2aff      	cmp	r2, #255	; 0xff
 8000c40:	d0db      	beq.n	8000bfa <__aeabi_fsub+0x1f2>
 8000c42:	2380      	movs	r3, #128	; 0x80
 8000c44:	4660      	mov	r0, ip
 8000c46:	04db      	lsls	r3, r3, #19
 8000c48:	4318      	orrs	r0, r3
 8000c4a:	4684      	mov	ip, r0
 8000c4c:	2f1b      	cmp	r7, #27
 8000c4e:	dd56      	ble.n	8000cfe <__aeabi_fsub+0x2f6>
 8000c50:	2001      	movs	r0, #1
 8000c52:	000c      	movs	r4, r1
 8000c54:	0015      	movs	r5, r2
 8000c56:	1a30      	subs	r0, r6, r0
 8000c58:	e700      	b.n	8000a5c <__aeabi_fsub+0x54>
 8000c5a:	4663      	mov	r3, ip
 8000c5c:	1b9f      	subs	r7, r3, r6
 8000c5e:	017b      	lsls	r3, r7, #5
 8000c60:	d43d      	bmi.n	8000cde <__aeabi_fsub+0x2d6>
 8000c62:	2f00      	cmp	r7, #0
 8000c64:	d000      	beq.n	8000c68 <__aeabi_fsub+0x260>
 8000c66:	e6fe      	b.n	8000a66 <__aeabi_fsub+0x5e>
 8000c68:	2400      	movs	r4, #0
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	e716      	b.n	8000a9e <__aeabi_fsub+0x96>
 8000c70:	0005      	movs	r5, r0
 8000c72:	e7af      	b.n	8000bd4 <__aeabi_fsub+0x1cc>
 8000c74:	0032      	movs	r2, r6
 8000c76:	4643      	mov	r3, r8
 8000c78:	4641      	mov	r1, r8
 8000c7a:	40da      	lsrs	r2, r3
 8000c7c:	2320      	movs	r3, #32
 8000c7e:	1a5b      	subs	r3, r3, r1
 8000c80:	409e      	lsls	r6, r3
 8000c82:	0030      	movs	r0, r6
 8000c84:	1e43      	subs	r3, r0, #1
 8000c86:	4198      	sbcs	r0, r3
 8000c88:	4310      	orrs	r0, r2
 8000c8a:	e721      	b.n	8000ad0 <__aeabi_fsub+0xc8>
 8000c8c:	2d00      	cmp	r5, #0
 8000c8e:	d1a7      	bne.n	8000be0 <__aeabi_fsub+0x1d8>
 8000c90:	4663      	mov	r3, ip
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d059      	beq.n	8000d4a <__aeabi_fsub+0x342>
 8000c96:	2200      	movs	r2, #0
 8000c98:	2e00      	cmp	r6, #0
 8000c9a:	d100      	bne.n	8000c9e <__aeabi_fsub+0x296>
 8000c9c:	e6ff      	b.n	8000a9e <__aeabi_fsub+0x96>
 8000c9e:	0030      	movs	r0, r6
 8000ca0:	4460      	add	r0, ip
 8000ca2:	0143      	lsls	r3, r0, #5
 8000ca4:	d592      	bpl.n	8000bcc <__aeabi_fsub+0x1c4>
 8000ca6:	4b2a      	ldr	r3, [pc, #168]	; (8000d50 <__aeabi_fsub+0x348>)
 8000ca8:	3501      	adds	r5, #1
 8000caa:	4018      	ands	r0, r3
 8000cac:	e78e      	b.n	8000bcc <__aeabi_fsub+0x1c4>
 8000cae:	4663      	mov	r3, ip
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d047      	beq.n	8000d44 <__aeabi_fsub+0x33c>
 8000cb4:	1e4b      	subs	r3, r1, #1
 8000cb6:	2901      	cmp	r1, #1
 8000cb8:	d015      	beq.n	8000ce6 <__aeabi_fsub+0x2de>
 8000cba:	29ff      	cmp	r1, #255	; 0xff
 8000cbc:	d02b      	beq.n	8000d16 <__aeabi_fsub+0x30e>
 8000cbe:	0019      	movs	r1, r3
 8000cc0:	e74e      	b.n	8000b60 <__aeabi_fsub+0x158>
 8000cc2:	000c      	movs	r4, r1
 8000cc4:	464b      	mov	r3, r9
 8000cc6:	003d      	movs	r5, r7
 8000cc8:	e784      	b.n	8000bd4 <__aeabi_fsub+0x1cc>
 8000cca:	4662      	mov	r2, ip
 8000ccc:	2a00      	cmp	r2, #0
 8000cce:	d18b      	bne.n	8000be8 <__aeabi_fsub+0x1e0>
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d192      	bne.n	8000bfa <__aeabi_fsub+0x1f2>
 8000cd4:	2780      	movs	r7, #128	; 0x80
 8000cd6:	2400      	movs	r4, #0
 8000cd8:	22ff      	movs	r2, #255	; 0xff
 8000cda:	03ff      	lsls	r7, r7, #15
 8000cdc:	e6df      	b.n	8000a9e <__aeabi_fsub+0x96>
 8000cde:	4663      	mov	r3, ip
 8000ce0:	000c      	movs	r4, r1
 8000ce2:	1af7      	subs	r7, r6, r3
 8000ce4:	e6bf      	b.n	8000a66 <__aeabi_fsub+0x5e>
 8000ce6:	0030      	movs	r0, r6
 8000ce8:	4460      	add	r0, ip
 8000cea:	2501      	movs	r5, #1
 8000cec:	0143      	lsls	r3, r0, #5
 8000cee:	d400      	bmi.n	8000cf2 <__aeabi_fsub+0x2ea>
 8000cf0:	e76c      	b.n	8000bcc <__aeabi_fsub+0x1c4>
 8000cf2:	2502      	movs	r5, #2
 8000cf4:	e6f2      	b.n	8000adc <__aeabi_fsub+0xd4>
 8000cf6:	4663      	mov	r3, ip
 8000cf8:	2501      	movs	r5, #1
 8000cfa:	1b98      	subs	r0, r3, r6
 8000cfc:	e6ae      	b.n	8000a5c <__aeabi_fsub+0x54>
 8000cfe:	2320      	movs	r3, #32
 8000d00:	4664      	mov	r4, ip
 8000d02:	4660      	mov	r0, ip
 8000d04:	40fc      	lsrs	r4, r7
 8000d06:	1bdf      	subs	r7, r3, r7
 8000d08:	40b8      	lsls	r0, r7
 8000d0a:	1e43      	subs	r3, r0, #1
 8000d0c:	4198      	sbcs	r0, r3
 8000d0e:	4320      	orrs	r0, r4
 8000d10:	e79f      	b.n	8000c52 <__aeabi_fsub+0x24a>
 8000d12:	0005      	movs	r5, r0
 8000d14:	e75e      	b.n	8000bd4 <__aeabi_fsub+0x1cc>
 8000d16:	464b      	mov	r3, r9
 8000d18:	e771      	b.n	8000bfe <__aeabi_fsub+0x1f6>
 8000d1a:	2320      	movs	r3, #32
 8000d1c:	4665      	mov	r5, ip
 8000d1e:	4660      	mov	r0, ip
 8000d20:	40cd      	lsrs	r5, r1
 8000d22:	1a59      	subs	r1, r3, r1
 8000d24:	4088      	lsls	r0, r1
 8000d26:	1e43      	subs	r3, r0, #1
 8000d28:	4198      	sbcs	r0, r3
 8000d2a:	4328      	orrs	r0, r5
 8000d2c:	e71c      	b.n	8000b68 <__aeabi_fsub+0x160>
 8000d2e:	4663      	mov	r3, ip
 8000d30:	000c      	movs	r4, r1
 8000d32:	2501      	movs	r5, #1
 8000d34:	1af0      	subs	r0, r6, r3
 8000d36:	e691      	b.n	8000a5c <__aeabi_fsub+0x54>
 8000d38:	2e00      	cmp	r6, #0
 8000d3a:	d095      	beq.n	8000c68 <__aeabi_fsub+0x260>
 8000d3c:	000c      	movs	r4, r1
 8000d3e:	464f      	mov	r7, r9
 8000d40:	2200      	movs	r2, #0
 8000d42:	e6ac      	b.n	8000a9e <__aeabi_fsub+0x96>
 8000d44:	464b      	mov	r3, r9
 8000d46:	000d      	movs	r5, r1
 8000d48:	e744      	b.n	8000bd4 <__aeabi_fsub+0x1cc>
 8000d4a:	464f      	mov	r7, r9
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	e6a6      	b.n	8000a9e <__aeabi_fsub+0x96>
 8000d50:	fbffffff 	.word	0xfbffffff
 8000d54:	7dffffff 	.word	0x7dffffff
 8000d58:	2800      	cmp	r0, #0
 8000d5a:	d000      	beq.n	8000d5e <__aeabi_fsub+0x356>
 8000d5c:	e736      	b.n	8000bcc <__aeabi_fsub+0x1c4>
 8000d5e:	2400      	movs	r4, #0
 8000d60:	2700      	movs	r7, #0
 8000d62:	e69c      	b.n	8000a9e <__aeabi_fsub+0x96>

08000d64 <__aeabi_f2iz>:
 8000d64:	0241      	lsls	r1, r0, #9
 8000d66:	0042      	lsls	r2, r0, #1
 8000d68:	0fc3      	lsrs	r3, r0, #31
 8000d6a:	0a49      	lsrs	r1, r1, #9
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	0e12      	lsrs	r2, r2, #24
 8000d70:	2a7e      	cmp	r2, #126	; 0x7e
 8000d72:	dd03      	ble.n	8000d7c <__aeabi_f2iz+0x18>
 8000d74:	2a9d      	cmp	r2, #157	; 0x9d
 8000d76:	dd02      	ble.n	8000d7e <__aeabi_f2iz+0x1a>
 8000d78:	4a09      	ldr	r2, [pc, #36]	; (8000da0 <__aeabi_f2iz+0x3c>)
 8000d7a:	1898      	adds	r0, r3, r2
 8000d7c:	4770      	bx	lr
 8000d7e:	2080      	movs	r0, #128	; 0x80
 8000d80:	0400      	lsls	r0, r0, #16
 8000d82:	4301      	orrs	r1, r0
 8000d84:	2a95      	cmp	r2, #149	; 0x95
 8000d86:	dc07      	bgt.n	8000d98 <__aeabi_f2iz+0x34>
 8000d88:	2096      	movs	r0, #150	; 0x96
 8000d8a:	1a82      	subs	r2, r0, r2
 8000d8c:	40d1      	lsrs	r1, r2
 8000d8e:	4248      	negs	r0, r1
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d1f3      	bne.n	8000d7c <__aeabi_f2iz+0x18>
 8000d94:	0008      	movs	r0, r1
 8000d96:	e7f1      	b.n	8000d7c <__aeabi_f2iz+0x18>
 8000d98:	3a96      	subs	r2, #150	; 0x96
 8000d9a:	4091      	lsls	r1, r2
 8000d9c:	e7f7      	b.n	8000d8e <__aeabi_f2iz+0x2a>
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	7fffffff 	.word	0x7fffffff

08000da4 <__aeabi_ui2f>:
 8000da4:	b570      	push	{r4, r5, r6, lr}
 8000da6:	1e05      	subs	r5, r0, #0
 8000da8:	d00e      	beq.n	8000dc8 <__aeabi_ui2f+0x24>
 8000daa:	f001 fb0b 	bl	80023c4 <__clzsi2>
 8000dae:	239e      	movs	r3, #158	; 0x9e
 8000db0:	0004      	movs	r4, r0
 8000db2:	1a1b      	subs	r3, r3, r0
 8000db4:	2b96      	cmp	r3, #150	; 0x96
 8000db6:	dc0c      	bgt.n	8000dd2 <__aeabi_ui2f+0x2e>
 8000db8:	2808      	cmp	r0, #8
 8000dba:	dd01      	ble.n	8000dc0 <__aeabi_ui2f+0x1c>
 8000dbc:	3c08      	subs	r4, #8
 8000dbe:	40a5      	lsls	r5, r4
 8000dc0:	026d      	lsls	r5, r5, #9
 8000dc2:	0a6d      	lsrs	r5, r5, #9
 8000dc4:	b2d8      	uxtb	r0, r3
 8000dc6:	e001      	b.n	8000dcc <__aeabi_ui2f+0x28>
 8000dc8:	2000      	movs	r0, #0
 8000dca:	2500      	movs	r5, #0
 8000dcc:	05c0      	lsls	r0, r0, #23
 8000dce:	4328      	orrs	r0, r5
 8000dd0:	bd70      	pop	{r4, r5, r6, pc}
 8000dd2:	2b99      	cmp	r3, #153	; 0x99
 8000dd4:	dd09      	ble.n	8000dea <__aeabi_ui2f+0x46>
 8000dd6:	0002      	movs	r2, r0
 8000dd8:	0029      	movs	r1, r5
 8000dda:	321b      	adds	r2, #27
 8000ddc:	4091      	lsls	r1, r2
 8000dde:	1e4a      	subs	r2, r1, #1
 8000de0:	4191      	sbcs	r1, r2
 8000de2:	2205      	movs	r2, #5
 8000de4:	1a12      	subs	r2, r2, r0
 8000de6:	40d5      	lsrs	r5, r2
 8000de8:	430d      	orrs	r5, r1
 8000dea:	2c05      	cmp	r4, #5
 8000dec:	dc12      	bgt.n	8000e14 <__aeabi_ui2f+0x70>
 8000dee:	0029      	movs	r1, r5
 8000df0:	4e0c      	ldr	r6, [pc, #48]	; (8000e24 <__aeabi_ui2f+0x80>)
 8000df2:	4031      	ands	r1, r6
 8000df4:	076a      	lsls	r2, r5, #29
 8000df6:	d009      	beq.n	8000e0c <__aeabi_ui2f+0x68>
 8000df8:	200f      	movs	r0, #15
 8000dfa:	4028      	ands	r0, r5
 8000dfc:	2804      	cmp	r0, #4
 8000dfe:	d005      	beq.n	8000e0c <__aeabi_ui2f+0x68>
 8000e00:	3104      	adds	r1, #4
 8000e02:	014a      	lsls	r2, r1, #5
 8000e04:	d502      	bpl.n	8000e0c <__aeabi_ui2f+0x68>
 8000e06:	239f      	movs	r3, #159	; 0x9f
 8000e08:	4031      	ands	r1, r6
 8000e0a:	1b1b      	subs	r3, r3, r4
 8000e0c:	0189      	lsls	r1, r1, #6
 8000e0e:	0a4d      	lsrs	r5, r1, #9
 8000e10:	b2d8      	uxtb	r0, r3
 8000e12:	e7db      	b.n	8000dcc <__aeabi_ui2f+0x28>
 8000e14:	1f62      	subs	r2, r4, #5
 8000e16:	4095      	lsls	r5, r2
 8000e18:	0029      	movs	r1, r5
 8000e1a:	4e02      	ldr	r6, [pc, #8]	; (8000e24 <__aeabi_ui2f+0x80>)
 8000e1c:	4031      	ands	r1, r6
 8000e1e:	076a      	lsls	r2, r5, #29
 8000e20:	d0f4      	beq.n	8000e0c <__aeabi_ui2f+0x68>
 8000e22:	e7e9      	b.n	8000df8 <__aeabi_ui2f+0x54>
 8000e24:	fbffffff 	.word	0xfbffffff

08000e28 <__aeabi_dadd>:
 8000e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e2a:	464f      	mov	r7, r9
 8000e2c:	4646      	mov	r6, r8
 8000e2e:	46d6      	mov	lr, sl
 8000e30:	000d      	movs	r5, r1
 8000e32:	0004      	movs	r4, r0
 8000e34:	b5c0      	push	{r6, r7, lr}
 8000e36:	001f      	movs	r7, r3
 8000e38:	0011      	movs	r1, r2
 8000e3a:	0328      	lsls	r0, r5, #12
 8000e3c:	0f62      	lsrs	r2, r4, #29
 8000e3e:	0a40      	lsrs	r0, r0, #9
 8000e40:	4310      	orrs	r0, r2
 8000e42:	007a      	lsls	r2, r7, #1
 8000e44:	0d52      	lsrs	r2, r2, #21
 8000e46:	00e3      	lsls	r3, r4, #3
 8000e48:	033c      	lsls	r4, r7, #12
 8000e4a:	4691      	mov	r9, r2
 8000e4c:	0a64      	lsrs	r4, r4, #9
 8000e4e:	0ffa      	lsrs	r2, r7, #31
 8000e50:	0f4f      	lsrs	r7, r1, #29
 8000e52:	006e      	lsls	r6, r5, #1
 8000e54:	4327      	orrs	r7, r4
 8000e56:	4692      	mov	sl, r2
 8000e58:	46b8      	mov	r8, r7
 8000e5a:	0d76      	lsrs	r6, r6, #21
 8000e5c:	0fed      	lsrs	r5, r5, #31
 8000e5e:	00c9      	lsls	r1, r1, #3
 8000e60:	4295      	cmp	r5, r2
 8000e62:	d100      	bne.n	8000e66 <__aeabi_dadd+0x3e>
 8000e64:	e099      	b.n	8000f9a <__aeabi_dadd+0x172>
 8000e66:	464c      	mov	r4, r9
 8000e68:	1b34      	subs	r4, r6, r4
 8000e6a:	46a4      	mov	ip, r4
 8000e6c:	2c00      	cmp	r4, #0
 8000e6e:	dc00      	bgt.n	8000e72 <__aeabi_dadd+0x4a>
 8000e70:	e07c      	b.n	8000f6c <__aeabi_dadd+0x144>
 8000e72:	464a      	mov	r2, r9
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	d100      	bne.n	8000e7a <__aeabi_dadd+0x52>
 8000e78:	e0b8      	b.n	8000fec <__aeabi_dadd+0x1c4>
 8000e7a:	4ac5      	ldr	r2, [pc, #788]	; (8001190 <__aeabi_dadd+0x368>)
 8000e7c:	4296      	cmp	r6, r2
 8000e7e:	d100      	bne.n	8000e82 <__aeabi_dadd+0x5a>
 8000e80:	e11c      	b.n	80010bc <__aeabi_dadd+0x294>
 8000e82:	2280      	movs	r2, #128	; 0x80
 8000e84:	003c      	movs	r4, r7
 8000e86:	0412      	lsls	r2, r2, #16
 8000e88:	4314      	orrs	r4, r2
 8000e8a:	46a0      	mov	r8, r4
 8000e8c:	4662      	mov	r2, ip
 8000e8e:	2a38      	cmp	r2, #56	; 0x38
 8000e90:	dd00      	ble.n	8000e94 <__aeabi_dadd+0x6c>
 8000e92:	e161      	b.n	8001158 <__aeabi_dadd+0x330>
 8000e94:	2a1f      	cmp	r2, #31
 8000e96:	dd00      	ble.n	8000e9a <__aeabi_dadd+0x72>
 8000e98:	e1cc      	b.n	8001234 <__aeabi_dadd+0x40c>
 8000e9a:	4664      	mov	r4, ip
 8000e9c:	2220      	movs	r2, #32
 8000e9e:	1b12      	subs	r2, r2, r4
 8000ea0:	4644      	mov	r4, r8
 8000ea2:	4094      	lsls	r4, r2
 8000ea4:	000f      	movs	r7, r1
 8000ea6:	46a1      	mov	r9, r4
 8000ea8:	4664      	mov	r4, ip
 8000eaa:	4091      	lsls	r1, r2
 8000eac:	40e7      	lsrs	r7, r4
 8000eae:	464c      	mov	r4, r9
 8000eb0:	1e4a      	subs	r2, r1, #1
 8000eb2:	4191      	sbcs	r1, r2
 8000eb4:	433c      	orrs	r4, r7
 8000eb6:	4642      	mov	r2, r8
 8000eb8:	4321      	orrs	r1, r4
 8000eba:	4664      	mov	r4, ip
 8000ebc:	40e2      	lsrs	r2, r4
 8000ebe:	1a80      	subs	r0, r0, r2
 8000ec0:	1a5c      	subs	r4, r3, r1
 8000ec2:	42a3      	cmp	r3, r4
 8000ec4:	419b      	sbcs	r3, r3
 8000ec6:	425f      	negs	r7, r3
 8000ec8:	1bc7      	subs	r7, r0, r7
 8000eca:	023b      	lsls	r3, r7, #8
 8000ecc:	d400      	bmi.n	8000ed0 <__aeabi_dadd+0xa8>
 8000ece:	e0d0      	b.n	8001072 <__aeabi_dadd+0x24a>
 8000ed0:	027f      	lsls	r7, r7, #9
 8000ed2:	0a7f      	lsrs	r7, r7, #9
 8000ed4:	2f00      	cmp	r7, #0
 8000ed6:	d100      	bne.n	8000eda <__aeabi_dadd+0xb2>
 8000ed8:	e0ff      	b.n	80010da <__aeabi_dadd+0x2b2>
 8000eda:	0038      	movs	r0, r7
 8000edc:	f001 fa72 	bl	80023c4 <__clzsi2>
 8000ee0:	0001      	movs	r1, r0
 8000ee2:	3908      	subs	r1, #8
 8000ee4:	2320      	movs	r3, #32
 8000ee6:	0022      	movs	r2, r4
 8000ee8:	1a5b      	subs	r3, r3, r1
 8000eea:	408f      	lsls	r7, r1
 8000eec:	40da      	lsrs	r2, r3
 8000eee:	408c      	lsls	r4, r1
 8000ef0:	4317      	orrs	r7, r2
 8000ef2:	42b1      	cmp	r1, r6
 8000ef4:	da00      	bge.n	8000ef8 <__aeabi_dadd+0xd0>
 8000ef6:	e0ff      	b.n	80010f8 <__aeabi_dadd+0x2d0>
 8000ef8:	1b89      	subs	r1, r1, r6
 8000efa:	1c4b      	adds	r3, r1, #1
 8000efc:	2b1f      	cmp	r3, #31
 8000efe:	dd00      	ble.n	8000f02 <__aeabi_dadd+0xda>
 8000f00:	e0a8      	b.n	8001054 <__aeabi_dadd+0x22c>
 8000f02:	2220      	movs	r2, #32
 8000f04:	0039      	movs	r1, r7
 8000f06:	1ad2      	subs	r2, r2, r3
 8000f08:	0020      	movs	r0, r4
 8000f0a:	4094      	lsls	r4, r2
 8000f0c:	4091      	lsls	r1, r2
 8000f0e:	40d8      	lsrs	r0, r3
 8000f10:	1e62      	subs	r2, r4, #1
 8000f12:	4194      	sbcs	r4, r2
 8000f14:	40df      	lsrs	r7, r3
 8000f16:	2600      	movs	r6, #0
 8000f18:	4301      	orrs	r1, r0
 8000f1a:	430c      	orrs	r4, r1
 8000f1c:	0763      	lsls	r3, r4, #29
 8000f1e:	d009      	beq.n	8000f34 <__aeabi_dadd+0x10c>
 8000f20:	230f      	movs	r3, #15
 8000f22:	4023      	ands	r3, r4
 8000f24:	2b04      	cmp	r3, #4
 8000f26:	d005      	beq.n	8000f34 <__aeabi_dadd+0x10c>
 8000f28:	1d23      	adds	r3, r4, #4
 8000f2a:	42a3      	cmp	r3, r4
 8000f2c:	41a4      	sbcs	r4, r4
 8000f2e:	4264      	negs	r4, r4
 8000f30:	193f      	adds	r7, r7, r4
 8000f32:	001c      	movs	r4, r3
 8000f34:	023b      	lsls	r3, r7, #8
 8000f36:	d400      	bmi.n	8000f3a <__aeabi_dadd+0x112>
 8000f38:	e09e      	b.n	8001078 <__aeabi_dadd+0x250>
 8000f3a:	4b95      	ldr	r3, [pc, #596]	; (8001190 <__aeabi_dadd+0x368>)
 8000f3c:	3601      	adds	r6, #1
 8000f3e:	429e      	cmp	r6, r3
 8000f40:	d100      	bne.n	8000f44 <__aeabi_dadd+0x11c>
 8000f42:	e0b7      	b.n	80010b4 <__aeabi_dadd+0x28c>
 8000f44:	4a93      	ldr	r2, [pc, #588]	; (8001194 <__aeabi_dadd+0x36c>)
 8000f46:	08e4      	lsrs	r4, r4, #3
 8000f48:	4017      	ands	r7, r2
 8000f4a:	077b      	lsls	r3, r7, #29
 8000f4c:	0571      	lsls	r1, r6, #21
 8000f4e:	027f      	lsls	r7, r7, #9
 8000f50:	4323      	orrs	r3, r4
 8000f52:	0b3f      	lsrs	r7, r7, #12
 8000f54:	0d4a      	lsrs	r2, r1, #21
 8000f56:	0512      	lsls	r2, r2, #20
 8000f58:	433a      	orrs	r2, r7
 8000f5a:	07ed      	lsls	r5, r5, #31
 8000f5c:	432a      	orrs	r2, r5
 8000f5e:	0018      	movs	r0, r3
 8000f60:	0011      	movs	r1, r2
 8000f62:	bce0      	pop	{r5, r6, r7}
 8000f64:	46ba      	mov	sl, r7
 8000f66:	46b1      	mov	r9, r6
 8000f68:	46a8      	mov	r8, r5
 8000f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f6c:	2c00      	cmp	r4, #0
 8000f6e:	d04b      	beq.n	8001008 <__aeabi_dadd+0x1e0>
 8000f70:	464c      	mov	r4, r9
 8000f72:	1ba4      	subs	r4, r4, r6
 8000f74:	46a4      	mov	ip, r4
 8000f76:	2e00      	cmp	r6, #0
 8000f78:	d000      	beq.n	8000f7c <__aeabi_dadd+0x154>
 8000f7a:	e123      	b.n	80011c4 <__aeabi_dadd+0x39c>
 8000f7c:	0004      	movs	r4, r0
 8000f7e:	431c      	orrs	r4, r3
 8000f80:	d100      	bne.n	8000f84 <__aeabi_dadd+0x15c>
 8000f82:	e1af      	b.n	80012e4 <__aeabi_dadd+0x4bc>
 8000f84:	4662      	mov	r2, ip
 8000f86:	1e54      	subs	r4, r2, #1
 8000f88:	2a01      	cmp	r2, #1
 8000f8a:	d100      	bne.n	8000f8e <__aeabi_dadd+0x166>
 8000f8c:	e215      	b.n	80013ba <__aeabi_dadd+0x592>
 8000f8e:	4d80      	ldr	r5, [pc, #512]	; (8001190 <__aeabi_dadd+0x368>)
 8000f90:	45ac      	cmp	ip, r5
 8000f92:	d100      	bne.n	8000f96 <__aeabi_dadd+0x16e>
 8000f94:	e1c8      	b.n	8001328 <__aeabi_dadd+0x500>
 8000f96:	46a4      	mov	ip, r4
 8000f98:	e11b      	b.n	80011d2 <__aeabi_dadd+0x3aa>
 8000f9a:	464a      	mov	r2, r9
 8000f9c:	1ab2      	subs	r2, r6, r2
 8000f9e:	4694      	mov	ip, r2
 8000fa0:	2a00      	cmp	r2, #0
 8000fa2:	dc00      	bgt.n	8000fa6 <__aeabi_dadd+0x17e>
 8000fa4:	e0ac      	b.n	8001100 <__aeabi_dadd+0x2d8>
 8000fa6:	464a      	mov	r2, r9
 8000fa8:	2a00      	cmp	r2, #0
 8000faa:	d043      	beq.n	8001034 <__aeabi_dadd+0x20c>
 8000fac:	4a78      	ldr	r2, [pc, #480]	; (8001190 <__aeabi_dadd+0x368>)
 8000fae:	4296      	cmp	r6, r2
 8000fb0:	d100      	bne.n	8000fb4 <__aeabi_dadd+0x18c>
 8000fb2:	e1af      	b.n	8001314 <__aeabi_dadd+0x4ec>
 8000fb4:	2280      	movs	r2, #128	; 0x80
 8000fb6:	003c      	movs	r4, r7
 8000fb8:	0412      	lsls	r2, r2, #16
 8000fba:	4314      	orrs	r4, r2
 8000fbc:	46a0      	mov	r8, r4
 8000fbe:	4662      	mov	r2, ip
 8000fc0:	2a38      	cmp	r2, #56	; 0x38
 8000fc2:	dc67      	bgt.n	8001094 <__aeabi_dadd+0x26c>
 8000fc4:	2a1f      	cmp	r2, #31
 8000fc6:	dc00      	bgt.n	8000fca <__aeabi_dadd+0x1a2>
 8000fc8:	e15f      	b.n	800128a <__aeabi_dadd+0x462>
 8000fca:	4647      	mov	r7, r8
 8000fcc:	3a20      	subs	r2, #32
 8000fce:	40d7      	lsrs	r7, r2
 8000fd0:	4662      	mov	r2, ip
 8000fd2:	2a20      	cmp	r2, #32
 8000fd4:	d005      	beq.n	8000fe2 <__aeabi_dadd+0x1ba>
 8000fd6:	4664      	mov	r4, ip
 8000fd8:	2240      	movs	r2, #64	; 0x40
 8000fda:	1b12      	subs	r2, r2, r4
 8000fdc:	4644      	mov	r4, r8
 8000fde:	4094      	lsls	r4, r2
 8000fe0:	4321      	orrs	r1, r4
 8000fe2:	1e4a      	subs	r2, r1, #1
 8000fe4:	4191      	sbcs	r1, r2
 8000fe6:	000c      	movs	r4, r1
 8000fe8:	433c      	orrs	r4, r7
 8000fea:	e057      	b.n	800109c <__aeabi_dadd+0x274>
 8000fec:	003a      	movs	r2, r7
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	d100      	bne.n	8000ff4 <__aeabi_dadd+0x1cc>
 8000ff2:	e105      	b.n	8001200 <__aeabi_dadd+0x3d8>
 8000ff4:	0022      	movs	r2, r4
 8000ff6:	3a01      	subs	r2, #1
 8000ff8:	2c01      	cmp	r4, #1
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_dadd+0x1d6>
 8000ffc:	e182      	b.n	8001304 <__aeabi_dadd+0x4dc>
 8000ffe:	4c64      	ldr	r4, [pc, #400]	; (8001190 <__aeabi_dadd+0x368>)
 8001000:	45a4      	cmp	ip, r4
 8001002:	d05b      	beq.n	80010bc <__aeabi_dadd+0x294>
 8001004:	4694      	mov	ip, r2
 8001006:	e741      	b.n	8000e8c <__aeabi_dadd+0x64>
 8001008:	4c63      	ldr	r4, [pc, #396]	; (8001198 <__aeabi_dadd+0x370>)
 800100a:	1c77      	adds	r7, r6, #1
 800100c:	4227      	tst	r7, r4
 800100e:	d000      	beq.n	8001012 <__aeabi_dadd+0x1ea>
 8001010:	e0c4      	b.n	800119c <__aeabi_dadd+0x374>
 8001012:	0004      	movs	r4, r0
 8001014:	431c      	orrs	r4, r3
 8001016:	2e00      	cmp	r6, #0
 8001018:	d000      	beq.n	800101c <__aeabi_dadd+0x1f4>
 800101a:	e169      	b.n	80012f0 <__aeabi_dadd+0x4c8>
 800101c:	2c00      	cmp	r4, #0
 800101e:	d100      	bne.n	8001022 <__aeabi_dadd+0x1fa>
 8001020:	e1bf      	b.n	80013a2 <__aeabi_dadd+0x57a>
 8001022:	4644      	mov	r4, r8
 8001024:	430c      	orrs	r4, r1
 8001026:	d000      	beq.n	800102a <__aeabi_dadd+0x202>
 8001028:	e1d0      	b.n	80013cc <__aeabi_dadd+0x5a4>
 800102a:	0742      	lsls	r2, r0, #29
 800102c:	08db      	lsrs	r3, r3, #3
 800102e:	4313      	orrs	r3, r2
 8001030:	08c0      	lsrs	r0, r0, #3
 8001032:	e029      	b.n	8001088 <__aeabi_dadd+0x260>
 8001034:	003a      	movs	r2, r7
 8001036:	430a      	orrs	r2, r1
 8001038:	d100      	bne.n	800103c <__aeabi_dadd+0x214>
 800103a:	e170      	b.n	800131e <__aeabi_dadd+0x4f6>
 800103c:	4662      	mov	r2, ip
 800103e:	4664      	mov	r4, ip
 8001040:	3a01      	subs	r2, #1
 8001042:	2c01      	cmp	r4, #1
 8001044:	d100      	bne.n	8001048 <__aeabi_dadd+0x220>
 8001046:	e0e0      	b.n	800120a <__aeabi_dadd+0x3e2>
 8001048:	4c51      	ldr	r4, [pc, #324]	; (8001190 <__aeabi_dadd+0x368>)
 800104a:	45a4      	cmp	ip, r4
 800104c:	d100      	bne.n	8001050 <__aeabi_dadd+0x228>
 800104e:	e161      	b.n	8001314 <__aeabi_dadd+0x4ec>
 8001050:	4694      	mov	ip, r2
 8001052:	e7b4      	b.n	8000fbe <__aeabi_dadd+0x196>
 8001054:	003a      	movs	r2, r7
 8001056:	391f      	subs	r1, #31
 8001058:	40ca      	lsrs	r2, r1
 800105a:	0011      	movs	r1, r2
 800105c:	2b20      	cmp	r3, #32
 800105e:	d003      	beq.n	8001068 <__aeabi_dadd+0x240>
 8001060:	2240      	movs	r2, #64	; 0x40
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	409f      	lsls	r7, r3
 8001066:	433c      	orrs	r4, r7
 8001068:	1e63      	subs	r3, r4, #1
 800106a:	419c      	sbcs	r4, r3
 800106c:	2700      	movs	r7, #0
 800106e:	2600      	movs	r6, #0
 8001070:	430c      	orrs	r4, r1
 8001072:	0763      	lsls	r3, r4, #29
 8001074:	d000      	beq.n	8001078 <__aeabi_dadd+0x250>
 8001076:	e753      	b.n	8000f20 <__aeabi_dadd+0xf8>
 8001078:	46b4      	mov	ip, r6
 800107a:	08e4      	lsrs	r4, r4, #3
 800107c:	077b      	lsls	r3, r7, #29
 800107e:	4323      	orrs	r3, r4
 8001080:	08f8      	lsrs	r0, r7, #3
 8001082:	4a43      	ldr	r2, [pc, #268]	; (8001190 <__aeabi_dadd+0x368>)
 8001084:	4594      	cmp	ip, r2
 8001086:	d01d      	beq.n	80010c4 <__aeabi_dadd+0x29c>
 8001088:	4662      	mov	r2, ip
 800108a:	0307      	lsls	r7, r0, #12
 800108c:	0552      	lsls	r2, r2, #21
 800108e:	0b3f      	lsrs	r7, r7, #12
 8001090:	0d52      	lsrs	r2, r2, #21
 8001092:	e760      	b.n	8000f56 <__aeabi_dadd+0x12e>
 8001094:	4644      	mov	r4, r8
 8001096:	430c      	orrs	r4, r1
 8001098:	1e62      	subs	r2, r4, #1
 800109a:	4194      	sbcs	r4, r2
 800109c:	18e4      	adds	r4, r4, r3
 800109e:	429c      	cmp	r4, r3
 80010a0:	419b      	sbcs	r3, r3
 80010a2:	425f      	negs	r7, r3
 80010a4:	183f      	adds	r7, r7, r0
 80010a6:	023b      	lsls	r3, r7, #8
 80010a8:	d5e3      	bpl.n	8001072 <__aeabi_dadd+0x24a>
 80010aa:	4b39      	ldr	r3, [pc, #228]	; (8001190 <__aeabi_dadd+0x368>)
 80010ac:	3601      	adds	r6, #1
 80010ae:	429e      	cmp	r6, r3
 80010b0:	d000      	beq.n	80010b4 <__aeabi_dadd+0x28c>
 80010b2:	e0b5      	b.n	8001220 <__aeabi_dadd+0x3f8>
 80010b4:	0032      	movs	r2, r6
 80010b6:	2700      	movs	r7, #0
 80010b8:	2300      	movs	r3, #0
 80010ba:	e74c      	b.n	8000f56 <__aeabi_dadd+0x12e>
 80010bc:	0742      	lsls	r2, r0, #29
 80010be:	08db      	lsrs	r3, r3, #3
 80010c0:	4313      	orrs	r3, r2
 80010c2:	08c0      	lsrs	r0, r0, #3
 80010c4:	001a      	movs	r2, r3
 80010c6:	4302      	orrs	r2, r0
 80010c8:	d100      	bne.n	80010cc <__aeabi_dadd+0x2a4>
 80010ca:	e1e1      	b.n	8001490 <__aeabi_dadd+0x668>
 80010cc:	2780      	movs	r7, #128	; 0x80
 80010ce:	033f      	lsls	r7, r7, #12
 80010d0:	4307      	orrs	r7, r0
 80010d2:	033f      	lsls	r7, r7, #12
 80010d4:	4a2e      	ldr	r2, [pc, #184]	; (8001190 <__aeabi_dadd+0x368>)
 80010d6:	0b3f      	lsrs	r7, r7, #12
 80010d8:	e73d      	b.n	8000f56 <__aeabi_dadd+0x12e>
 80010da:	0020      	movs	r0, r4
 80010dc:	f001 f972 	bl	80023c4 <__clzsi2>
 80010e0:	0001      	movs	r1, r0
 80010e2:	3118      	adds	r1, #24
 80010e4:	291f      	cmp	r1, #31
 80010e6:	dc00      	bgt.n	80010ea <__aeabi_dadd+0x2c2>
 80010e8:	e6fc      	b.n	8000ee4 <__aeabi_dadd+0xbc>
 80010ea:	3808      	subs	r0, #8
 80010ec:	4084      	lsls	r4, r0
 80010ee:	0027      	movs	r7, r4
 80010f0:	2400      	movs	r4, #0
 80010f2:	42b1      	cmp	r1, r6
 80010f4:	db00      	blt.n	80010f8 <__aeabi_dadd+0x2d0>
 80010f6:	e6ff      	b.n	8000ef8 <__aeabi_dadd+0xd0>
 80010f8:	4a26      	ldr	r2, [pc, #152]	; (8001194 <__aeabi_dadd+0x36c>)
 80010fa:	1a76      	subs	r6, r6, r1
 80010fc:	4017      	ands	r7, r2
 80010fe:	e70d      	b.n	8000f1c <__aeabi_dadd+0xf4>
 8001100:	2a00      	cmp	r2, #0
 8001102:	d02f      	beq.n	8001164 <__aeabi_dadd+0x33c>
 8001104:	464a      	mov	r2, r9
 8001106:	1b92      	subs	r2, r2, r6
 8001108:	4694      	mov	ip, r2
 800110a:	2e00      	cmp	r6, #0
 800110c:	d100      	bne.n	8001110 <__aeabi_dadd+0x2e8>
 800110e:	e0ad      	b.n	800126c <__aeabi_dadd+0x444>
 8001110:	4a1f      	ldr	r2, [pc, #124]	; (8001190 <__aeabi_dadd+0x368>)
 8001112:	4591      	cmp	r9, r2
 8001114:	d100      	bne.n	8001118 <__aeabi_dadd+0x2f0>
 8001116:	e10f      	b.n	8001338 <__aeabi_dadd+0x510>
 8001118:	2280      	movs	r2, #128	; 0x80
 800111a:	0412      	lsls	r2, r2, #16
 800111c:	4310      	orrs	r0, r2
 800111e:	4662      	mov	r2, ip
 8001120:	2a38      	cmp	r2, #56	; 0x38
 8001122:	dd00      	ble.n	8001126 <__aeabi_dadd+0x2fe>
 8001124:	e10f      	b.n	8001346 <__aeabi_dadd+0x51e>
 8001126:	2a1f      	cmp	r2, #31
 8001128:	dd00      	ble.n	800112c <__aeabi_dadd+0x304>
 800112a:	e180      	b.n	800142e <__aeabi_dadd+0x606>
 800112c:	4664      	mov	r4, ip
 800112e:	2220      	movs	r2, #32
 8001130:	001e      	movs	r6, r3
 8001132:	1b12      	subs	r2, r2, r4
 8001134:	4667      	mov	r7, ip
 8001136:	0004      	movs	r4, r0
 8001138:	4093      	lsls	r3, r2
 800113a:	4094      	lsls	r4, r2
 800113c:	40fe      	lsrs	r6, r7
 800113e:	1e5a      	subs	r2, r3, #1
 8001140:	4193      	sbcs	r3, r2
 8001142:	40f8      	lsrs	r0, r7
 8001144:	4334      	orrs	r4, r6
 8001146:	431c      	orrs	r4, r3
 8001148:	4480      	add	r8, r0
 800114a:	1864      	adds	r4, r4, r1
 800114c:	428c      	cmp	r4, r1
 800114e:	41bf      	sbcs	r7, r7
 8001150:	427f      	negs	r7, r7
 8001152:	464e      	mov	r6, r9
 8001154:	4447      	add	r7, r8
 8001156:	e7a6      	b.n	80010a6 <__aeabi_dadd+0x27e>
 8001158:	4642      	mov	r2, r8
 800115a:	430a      	orrs	r2, r1
 800115c:	0011      	movs	r1, r2
 800115e:	1e4a      	subs	r2, r1, #1
 8001160:	4191      	sbcs	r1, r2
 8001162:	e6ad      	b.n	8000ec0 <__aeabi_dadd+0x98>
 8001164:	4c0c      	ldr	r4, [pc, #48]	; (8001198 <__aeabi_dadd+0x370>)
 8001166:	1c72      	adds	r2, r6, #1
 8001168:	4222      	tst	r2, r4
 800116a:	d000      	beq.n	800116e <__aeabi_dadd+0x346>
 800116c:	e0a1      	b.n	80012b2 <__aeabi_dadd+0x48a>
 800116e:	0002      	movs	r2, r0
 8001170:	431a      	orrs	r2, r3
 8001172:	2e00      	cmp	r6, #0
 8001174:	d000      	beq.n	8001178 <__aeabi_dadd+0x350>
 8001176:	e0fa      	b.n	800136e <__aeabi_dadd+0x546>
 8001178:	2a00      	cmp	r2, #0
 800117a:	d100      	bne.n	800117e <__aeabi_dadd+0x356>
 800117c:	e145      	b.n	800140a <__aeabi_dadd+0x5e2>
 800117e:	003a      	movs	r2, r7
 8001180:	430a      	orrs	r2, r1
 8001182:	d000      	beq.n	8001186 <__aeabi_dadd+0x35e>
 8001184:	e146      	b.n	8001414 <__aeabi_dadd+0x5ec>
 8001186:	0742      	lsls	r2, r0, #29
 8001188:	08db      	lsrs	r3, r3, #3
 800118a:	4313      	orrs	r3, r2
 800118c:	08c0      	lsrs	r0, r0, #3
 800118e:	e77b      	b.n	8001088 <__aeabi_dadd+0x260>
 8001190:	000007ff 	.word	0x000007ff
 8001194:	ff7fffff 	.word	0xff7fffff
 8001198:	000007fe 	.word	0x000007fe
 800119c:	4647      	mov	r7, r8
 800119e:	1a5c      	subs	r4, r3, r1
 80011a0:	1bc2      	subs	r2, r0, r7
 80011a2:	42a3      	cmp	r3, r4
 80011a4:	41bf      	sbcs	r7, r7
 80011a6:	427f      	negs	r7, r7
 80011a8:	46b9      	mov	r9, r7
 80011aa:	0017      	movs	r7, r2
 80011ac:	464a      	mov	r2, r9
 80011ae:	1abf      	subs	r7, r7, r2
 80011b0:	023a      	lsls	r2, r7, #8
 80011b2:	d500      	bpl.n	80011b6 <__aeabi_dadd+0x38e>
 80011b4:	e08d      	b.n	80012d2 <__aeabi_dadd+0x4aa>
 80011b6:	0023      	movs	r3, r4
 80011b8:	433b      	orrs	r3, r7
 80011ba:	d000      	beq.n	80011be <__aeabi_dadd+0x396>
 80011bc:	e68a      	b.n	8000ed4 <__aeabi_dadd+0xac>
 80011be:	2000      	movs	r0, #0
 80011c0:	2500      	movs	r5, #0
 80011c2:	e761      	b.n	8001088 <__aeabi_dadd+0x260>
 80011c4:	4cb4      	ldr	r4, [pc, #720]	; (8001498 <__aeabi_dadd+0x670>)
 80011c6:	45a1      	cmp	r9, r4
 80011c8:	d100      	bne.n	80011cc <__aeabi_dadd+0x3a4>
 80011ca:	e0ad      	b.n	8001328 <__aeabi_dadd+0x500>
 80011cc:	2480      	movs	r4, #128	; 0x80
 80011ce:	0424      	lsls	r4, r4, #16
 80011d0:	4320      	orrs	r0, r4
 80011d2:	4664      	mov	r4, ip
 80011d4:	2c38      	cmp	r4, #56	; 0x38
 80011d6:	dc3d      	bgt.n	8001254 <__aeabi_dadd+0x42c>
 80011d8:	4662      	mov	r2, ip
 80011da:	2c1f      	cmp	r4, #31
 80011dc:	dd00      	ble.n	80011e0 <__aeabi_dadd+0x3b8>
 80011de:	e0b7      	b.n	8001350 <__aeabi_dadd+0x528>
 80011e0:	2520      	movs	r5, #32
 80011e2:	001e      	movs	r6, r3
 80011e4:	1b2d      	subs	r5, r5, r4
 80011e6:	0004      	movs	r4, r0
 80011e8:	40ab      	lsls	r3, r5
 80011ea:	40ac      	lsls	r4, r5
 80011ec:	40d6      	lsrs	r6, r2
 80011ee:	40d0      	lsrs	r0, r2
 80011f0:	4642      	mov	r2, r8
 80011f2:	1e5d      	subs	r5, r3, #1
 80011f4:	41ab      	sbcs	r3, r5
 80011f6:	4334      	orrs	r4, r6
 80011f8:	1a12      	subs	r2, r2, r0
 80011fa:	4690      	mov	r8, r2
 80011fc:	4323      	orrs	r3, r4
 80011fe:	e02c      	b.n	800125a <__aeabi_dadd+0x432>
 8001200:	0742      	lsls	r2, r0, #29
 8001202:	08db      	lsrs	r3, r3, #3
 8001204:	4313      	orrs	r3, r2
 8001206:	08c0      	lsrs	r0, r0, #3
 8001208:	e73b      	b.n	8001082 <__aeabi_dadd+0x25a>
 800120a:	185c      	adds	r4, r3, r1
 800120c:	429c      	cmp	r4, r3
 800120e:	419b      	sbcs	r3, r3
 8001210:	4440      	add	r0, r8
 8001212:	425b      	negs	r3, r3
 8001214:	18c7      	adds	r7, r0, r3
 8001216:	2601      	movs	r6, #1
 8001218:	023b      	lsls	r3, r7, #8
 800121a:	d400      	bmi.n	800121e <__aeabi_dadd+0x3f6>
 800121c:	e729      	b.n	8001072 <__aeabi_dadd+0x24a>
 800121e:	2602      	movs	r6, #2
 8001220:	4a9e      	ldr	r2, [pc, #632]	; (800149c <__aeabi_dadd+0x674>)
 8001222:	0863      	lsrs	r3, r4, #1
 8001224:	4017      	ands	r7, r2
 8001226:	2201      	movs	r2, #1
 8001228:	4014      	ands	r4, r2
 800122a:	431c      	orrs	r4, r3
 800122c:	07fb      	lsls	r3, r7, #31
 800122e:	431c      	orrs	r4, r3
 8001230:	087f      	lsrs	r7, r7, #1
 8001232:	e673      	b.n	8000f1c <__aeabi_dadd+0xf4>
 8001234:	4644      	mov	r4, r8
 8001236:	3a20      	subs	r2, #32
 8001238:	40d4      	lsrs	r4, r2
 800123a:	4662      	mov	r2, ip
 800123c:	2a20      	cmp	r2, #32
 800123e:	d005      	beq.n	800124c <__aeabi_dadd+0x424>
 8001240:	4667      	mov	r7, ip
 8001242:	2240      	movs	r2, #64	; 0x40
 8001244:	1bd2      	subs	r2, r2, r7
 8001246:	4647      	mov	r7, r8
 8001248:	4097      	lsls	r7, r2
 800124a:	4339      	orrs	r1, r7
 800124c:	1e4a      	subs	r2, r1, #1
 800124e:	4191      	sbcs	r1, r2
 8001250:	4321      	orrs	r1, r4
 8001252:	e635      	b.n	8000ec0 <__aeabi_dadd+0x98>
 8001254:	4303      	orrs	r3, r0
 8001256:	1e58      	subs	r0, r3, #1
 8001258:	4183      	sbcs	r3, r0
 800125a:	1acc      	subs	r4, r1, r3
 800125c:	42a1      	cmp	r1, r4
 800125e:	41bf      	sbcs	r7, r7
 8001260:	4643      	mov	r3, r8
 8001262:	427f      	negs	r7, r7
 8001264:	4655      	mov	r5, sl
 8001266:	464e      	mov	r6, r9
 8001268:	1bdf      	subs	r7, r3, r7
 800126a:	e62e      	b.n	8000eca <__aeabi_dadd+0xa2>
 800126c:	0002      	movs	r2, r0
 800126e:	431a      	orrs	r2, r3
 8001270:	d100      	bne.n	8001274 <__aeabi_dadd+0x44c>
 8001272:	e0bd      	b.n	80013f0 <__aeabi_dadd+0x5c8>
 8001274:	4662      	mov	r2, ip
 8001276:	4664      	mov	r4, ip
 8001278:	3a01      	subs	r2, #1
 800127a:	2c01      	cmp	r4, #1
 800127c:	d100      	bne.n	8001280 <__aeabi_dadd+0x458>
 800127e:	e0e5      	b.n	800144c <__aeabi_dadd+0x624>
 8001280:	4c85      	ldr	r4, [pc, #532]	; (8001498 <__aeabi_dadd+0x670>)
 8001282:	45a4      	cmp	ip, r4
 8001284:	d058      	beq.n	8001338 <__aeabi_dadd+0x510>
 8001286:	4694      	mov	ip, r2
 8001288:	e749      	b.n	800111e <__aeabi_dadd+0x2f6>
 800128a:	4664      	mov	r4, ip
 800128c:	2220      	movs	r2, #32
 800128e:	1b12      	subs	r2, r2, r4
 8001290:	4644      	mov	r4, r8
 8001292:	4094      	lsls	r4, r2
 8001294:	000f      	movs	r7, r1
 8001296:	46a1      	mov	r9, r4
 8001298:	4664      	mov	r4, ip
 800129a:	4091      	lsls	r1, r2
 800129c:	40e7      	lsrs	r7, r4
 800129e:	464c      	mov	r4, r9
 80012a0:	1e4a      	subs	r2, r1, #1
 80012a2:	4191      	sbcs	r1, r2
 80012a4:	433c      	orrs	r4, r7
 80012a6:	4642      	mov	r2, r8
 80012a8:	430c      	orrs	r4, r1
 80012aa:	4661      	mov	r1, ip
 80012ac:	40ca      	lsrs	r2, r1
 80012ae:	1880      	adds	r0, r0, r2
 80012b0:	e6f4      	b.n	800109c <__aeabi_dadd+0x274>
 80012b2:	4c79      	ldr	r4, [pc, #484]	; (8001498 <__aeabi_dadd+0x670>)
 80012b4:	42a2      	cmp	r2, r4
 80012b6:	d100      	bne.n	80012ba <__aeabi_dadd+0x492>
 80012b8:	e6fd      	b.n	80010b6 <__aeabi_dadd+0x28e>
 80012ba:	1859      	adds	r1, r3, r1
 80012bc:	4299      	cmp	r1, r3
 80012be:	419b      	sbcs	r3, r3
 80012c0:	4440      	add	r0, r8
 80012c2:	425f      	negs	r7, r3
 80012c4:	19c7      	adds	r7, r0, r7
 80012c6:	07fc      	lsls	r4, r7, #31
 80012c8:	0849      	lsrs	r1, r1, #1
 80012ca:	0016      	movs	r6, r2
 80012cc:	430c      	orrs	r4, r1
 80012ce:	087f      	lsrs	r7, r7, #1
 80012d0:	e6cf      	b.n	8001072 <__aeabi_dadd+0x24a>
 80012d2:	1acc      	subs	r4, r1, r3
 80012d4:	42a1      	cmp	r1, r4
 80012d6:	41bf      	sbcs	r7, r7
 80012d8:	4643      	mov	r3, r8
 80012da:	427f      	negs	r7, r7
 80012dc:	1a18      	subs	r0, r3, r0
 80012de:	4655      	mov	r5, sl
 80012e0:	1bc7      	subs	r7, r0, r7
 80012e2:	e5f7      	b.n	8000ed4 <__aeabi_dadd+0xac>
 80012e4:	08c9      	lsrs	r1, r1, #3
 80012e6:	077b      	lsls	r3, r7, #29
 80012e8:	4655      	mov	r5, sl
 80012ea:	430b      	orrs	r3, r1
 80012ec:	08f8      	lsrs	r0, r7, #3
 80012ee:	e6c8      	b.n	8001082 <__aeabi_dadd+0x25a>
 80012f0:	2c00      	cmp	r4, #0
 80012f2:	d000      	beq.n	80012f6 <__aeabi_dadd+0x4ce>
 80012f4:	e081      	b.n	80013fa <__aeabi_dadd+0x5d2>
 80012f6:	4643      	mov	r3, r8
 80012f8:	430b      	orrs	r3, r1
 80012fa:	d115      	bne.n	8001328 <__aeabi_dadd+0x500>
 80012fc:	2080      	movs	r0, #128	; 0x80
 80012fe:	2500      	movs	r5, #0
 8001300:	0300      	lsls	r0, r0, #12
 8001302:	e6e3      	b.n	80010cc <__aeabi_dadd+0x2a4>
 8001304:	1a5c      	subs	r4, r3, r1
 8001306:	42a3      	cmp	r3, r4
 8001308:	419b      	sbcs	r3, r3
 800130a:	1bc7      	subs	r7, r0, r7
 800130c:	425b      	negs	r3, r3
 800130e:	2601      	movs	r6, #1
 8001310:	1aff      	subs	r7, r7, r3
 8001312:	e5da      	b.n	8000eca <__aeabi_dadd+0xa2>
 8001314:	0742      	lsls	r2, r0, #29
 8001316:	08db      	lsrs	r3, r3, #3
 8001318:	4313      	orrs	r3, r2
 800131a:	08c0      	lsrs	r0, r0, #3
 800131c:	e6d2      	b.n	80010c4 <__aeabi_dadd+0x29c>
 800131e:	0742      	lsls	r2, r0, #29
 8001320:	08db      	lsrs	r3, r3, #3
 8001322:	4313      	orrs	r3, r2
 8001324:	08c0      	lsrs	r0, r0, #3
 8001326:	e6ac      	b.n	8001082 <__aeabi_dadd+0x25a>
 8001328:	4643      	mov	r3, r8
 800132a:	4642      	mov	r2, r8
 800132c:	08c9      	lsrs	r1, r1, #3
 800132e:	075b      	lsls	r3, r3, #29
 8001330:	4655      	mov	r5, sl
 8001332:	430b      	orrs	r3, r1
 8001334:	08d0      	lsrs	r0, r2, #3
 8001336:	e6c5      	b.n	80010c4 <__aeabi_dadd+0x29c>
 8001338:	4643      	mov	r3, r8
 800133a:	4642      	mov	r2, r8
 800133c:	075b      	lsls	r3, r3, #29
 800133e:	08c9      	lsrs	r1, r1, #3
 8001340:	430b      	orrs	r3, r1
 8001342:	08d0      	lsrs	r0, r2, #3
 8001344:	e6be      	b.n	80010c4 <__aeabi_dadd+0x29c>
 8001346:	4303      	orrs	r3, r0
 8001348:	001c      	movs	r4, r3
 800134a:	1e63      	subs	r3, r4, #1
 800134c:	419c      	sbcs	r4, r3
 800134e:	e6fc      	b.n	800114a <__aeabi_dadd+0x322>
 8001350:	0002      	movs	r2, r0
 8001352:	3c20      	subs	r4, #32
 8001354:	40e2      	lsrs	r2, r4
 8001356:	0014      	movs	r4, r2
 8001358:	4662      	mov	r2, ip
 800135a:	2a20      	cmp	r2, #32
 800135c:	d003      	beq.n	8001366 <__aeabi_dadd+0x53e>
 800135e:	2540      	movs	r5, #64	; 0x40
 8001360:	1aad      	subs	r5, r5, r2
 8001362:	40a8      	lsls	r0, r5
 8001364:	4303      	orrs	r3, r0
 8001366:	1e58      	subs	r0, r3, #1
 8001368:	4183      	sbcs	r3, r0
 800136a:	4323      	orrs	r3, r4
 800136c:	e775      	b.n	800125a <__aeabi_dadd+0x432>
 800136e:	2a00      	cmp	r2, #0
 8001370:	d0e2      	beq.n	8001338 <__aeabi_dadd+0x510>
 8001372:	003a      	movs	r2, r7
 8001374:	430a      	orrs	r2, r1
 8001376:	d0cd      	beq.n	8001314 <__aeabi_dadd+0x4ec>
 8001378:	0742      	lsls	r2, r0, #29
 800137a:	08db      	lsrs	r3, r3, #3
 800137c:	4313      	orrs	r3, r2
 800137e:	2280      	movs	r2, #128	; 0x80
 8001380:	08c0      	lsrs	r0, r0, #3
 8001382:	0312      	lsls	r2, r2, #12
 8001384:	4210      	tst	r0, r2
 8001386:	d006      	beq.n	8001396 <__aeabi_dadd+0x56e>
 8001388:	08fc      	lsrs	r4, r7, #3
 800138a:	4214      	tst	r4, r2
 800138c:	d103      	bne.n	8001396 <__aeabi_dadd+0x56e>
 800138e:	0020      	movs	r0, r4
 8001390:	08cb      	lsrs	r3, r1, #3
 8001392:	077a      	lsls	r2, r7, #29
 8001394:	4313      	orrs	r3, r2
 8001396:	0f5a      	lsrs	r2, r3, #29
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	0752      	lsls	r2, r2, #29
 800139c:	08db      	lsrs	r3, r3, #3
 800139e:	4313      	orrs	r3, r2
 80013a0:	e690      	b.n	80010c4 <__aeabi_dadd+0x29c>
 80013a2:	4643      	mov	r3, r8
 80013a4:	430b      	orrs	r3, r1
 80013a6:	d100      	bne.n	80013aa <__aeabi_dadd+0x582>
 80013a8:	e709      	b.n	80011be <__aeabi_dadd+0x396>
 80013aa:	4643      	mov	r3, r8
 80013ac:	4642      	mov	r2, r8
 80013ae:	08c9      	lsrs	r1, r1, #3
 80013b0:	075b      	lsls	r3, r3, #29
 80013b2:	4655      	mov	r5, sl
 80013b4:	430b      	orrs	r3, r1
 80013b6:	08d0      	lsrs	r0, r2, #3
 80013b8:	e666      	b.n	8001088 <__aeabi_dadd+0x260>
 80013ba:	1acc      	subs	r4, r1, r3
 80013bc:	42a1      	cmp	r1, r4
 80013be:	4189      	sbcs	r1, r1
 80013c0:	1a3f      	subs	r7, r7, r0
 80013c2:	4249      	negs	r1, r1
 80013c4:	4655      	mov	r5, sl
 80013c6:	2601      	movs	r6, #1
 80013c8:	1a7f      	subs	r7, r7, r1
 80013ca:	e57e      	b.n	8000eca <__aeabi_dadd+0xa2>
 80013cc:	4642      	mov	r2, r8
 80013ce:	1a5c      	subs	r4, r3, r1
 80013d0:	1a87      	subs	r7, r0, r2
 80013d2:	42a3      	cmp	r3, r4
 80013d4:	4192      	sbcs	r2, r2
 80013d6:	4252      	negs	r2, r2
 80013d8:	1abf      	subs	r7, r7, r2
 80013da:	023a      	lsls	r2, r7, #8
 80013dc:	d53d      	bpl.n	800145a <__aeabi_dadd+0x632>
 80013de:	1acc      	subs	r4, r1, r3
 80013e0:	42a1      	cmp	r1, r4
 80013e2:	4189      	sbcs	r1, r1
 80013e4:	4643      	mov	r3, r8
 80013e6:	4249      	negs	r1, r1
 80013e8:	1a1f      	subs	r7, r3, r0
 80013ea:	4655      	mov	r5, sl
 80013ec:	1a7f      	subs	r7, r7, r1
 80013ee:	e595      	b.n	8000f1c <__aeabi_dadd+0xf4>
 80013f0:	077b      	lsls	r3, r7, #29
 80013f2:	08c9      	lsrs	r1, r1, #3
 80013f4:	430b      	orrs	r3, r1
 80013f6:	08f8      	lsrs	r0, r7, #3
 80013f8:	e643      	b.n	8001082 <__aeabi_dadd+0x25a>
 80013fa:	4644      	mov	r4, r8
 80013fc:	08db      	lsrs	r3, r3, #3
 80013fe:	430c      	orrs	r4, r1
 8001400:	d130      	bne.n	8001464 <__aeabi_dadd+0x63c>
 8001402:	0742      	lsls	r2, r0, #29
 8001404:	4313      	orrs	r3, r2
 8001406:	08c0      	lsrs	r0, r0, #3
 8001408:	e65c      	b.n	80010c4 <__aeabi_dadd+0x29c>
 800140a:	077b      	lsls	r3, r7, #29
 800140c:	08c9      	lsrs	r1, r1, #3
 800140e:	430b      	orrs	r3, r1
 8001410:	08f8      	lsrs	r0, r7, #3
 8001412:	e639      	b.n	8001088 <__aeabi_dadd+0x260>
 8001414:	185c      	adds	r4, r3, r1
 8001416:	429c      	cmp	r4, r3
 8001418:	419b      	sbcs	r3, r3
 800141a:	4440      	add	r0, r8
 800141c:	425b      	negs	r3, r3
 800141e:	18c7      	adds	r7, r0, r3
 8001420:	023b      	lsls	r3, r7, #8
 8001422:	d400      	bmi.n	8001426 <__aeabi_dadd+0x5fe>
 8001424:	e625      	b.n	8001072 <__aeabi_dadd+0x24a>
 8001426:	4b1d      	ldr	r3, [pc, #116]	; (800149c <__aeabi_dadd+0x674>)
 8001428:	2601      	movs	r6, #1
 800142a:	401f      	ands	r7, r3
 800142c:	e621      	b.n	8001072 <__aeabi_dadd+0x24a>
 800142e:	0004      	movs	r4, r0
 8001430:	3a20      	subs	r2, #32
 8001432:	40d4      	lsrs	r4, r2
 8001434:	4662      	mov	r2, ip
 8001436:	2a20      	cmp	r2, #32
 8001438:	d004      	beq.n	8001444 <__aeabi_dadd+0x61c>
 800143a:	2240      	movs	r2, #64	; 0x40
 800143c:	4666      	mov	r6, ip
 800143e:	1b92      	subs	r2, r2, r6
 8001440:	4090      	lsls	r0, r2
 8001442:	4303      	orrs	r3, r0
 8001444:	1e5a      	subs	r2, r3, #1
 8001446:	4193      	sbcs	r3, r2
 8001448:	431c      	orrs	r4, r3
 800144a:	e67e      	b.n	800114a <__aeabi_dadd+0x322>
 800144c:	185c      	adds	r4, r3, r1
 800144e:	428c      	cmp	r4, r1
 8001450:	4189      	sbcs	r1, r1
 8001452:	4440      	add	r0, r8
 8001454:	4249      	negs	r1, r1
 8001456:	1847      	adds	r7, r0, r1
 8001458:	e6dd      	b.n	8001216 <__aeabi_dadd+0x3ee>
 800145a:	0023      	movs	r3, r4
 800145c:	433b      	orrs	r3, r7
 800145e:	d100      	bne.n	8001462 <__aeabi_dadd+0x63a>
 8001460:	e6ad      	b.n	80011be <__aeabi_dadd+0x396>
 8001462:	e606      	b.n	8001072 <__aeabi_dadd+0x24a>
 8001464:	0744      	lsls	r4, r0, #29
 8001466:	4323      	orrs	r3, r4
 8001468:	2480      	movs	r4, #128	; 0x80
 800146a:	08c0      	lsrs	r0, r0, #3
 800146c:	0324      	lsls	r4, r4, #12
 800146e:	4220      	tst	r0, r4
 8001470:	d008      	beq.n	8001484 <__aeabi_dadd+0x65c>
 8001472:	4642      	mov	r2, r8
 8001474:	08d6      	lsrs	r6, r2, #3
 8001476:	4226      	tst	r6, r4
 8001478:	d104      	bne.n	8001484 <__aeabi_dadd+0x65c>
 800147a:	4655      	mov	r5, sl
 800147c:	0030      	movs	r0, r6
 800147e:	08cb      	lsrs	r3, r1, #3
 8001480:	0751      	lsls	r1, r2, #29
 8001482:	430b      	orrs	r3, r1
 8001484:	0f5a      	lsrs	r2, r3, #29
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	08db      	lsrs	r3, r3, #3
 800148a:	0752      	lsls	r2, r2, #29
 800148c:	4313      	orrs	r3, r2
 800148e:	e619      	b.n	80010c4 <__aeabi_dadd+0x29c>
 8001490:	2300      	movs	r3, #0
 8001492:	4a01      	ldr	r2, [pc, #4]	; (8001498 <__aeabi_dadd+0x670>)
 8001494:	001f      	movs	r7, r3
 8001496:	e55e      	b.n	8000f56 <__aeabi_dadd+0x12e>
 8001498:	000007ff 	.word	0x000007ff
 800149c:	ff7fffff 	.word	0xff7fffff

080014a0 <__aeabi_ddiv>:
 80014a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a2:	4657      	mov	r7, sl
 80014a4:	464e      	mov	r6, r9
 80014a6:	4645      	mov	r5, r8
 80014a8:	46de      	mov	lr, fp
 80014aa:	b5e0      	push	{r5, r6, r7, lr}
 80014ac:	4681      	mov	r9, r0
 80014ae:	0005      	movs	r5, r0
 80014b0:	030c      	lsls	r4, r1, #12
 80014b2:	0048      	lsls	r0, r1, #1
 80014b4:	4692      	mov	sl, r2
 80014b6:	001f      	movs	r7, r3
 80014b8:	b085      	sub	sp, #20
 80014ba:	0b24      	lsrs	r4, r4, #12
 80014bc:	0d40      	lsrs	r0, r0, #21
 80014be:	0fce      	lsrs	r6, r1, #31
 80014c0:	2800      	cmp	r0, #0
 80014c2:	d100      	bne.n	80014c6 <__aeabi_ddiv+0x26>
 80014c4:	e156      	b.n	8001774 <__aeabi_ddiv+0x2d4>
 80014c6:	4bd4      	ldr	r3, [pc, #848]	; (8001818 <__aeabi_ddiv+0x378>)
 80014c8:	4298      	cmp	r0, r3
 80014ca:	d100      	bne.n	80014ce <__aeabi_ddiv+0x2e>
 80014cc:	e172      	b.n	80017b4 <__aeabi_ddiv+0x314>
 80014ce:	0f6b      	lsrs	r3, r5, #29
 80014d0:	00e4      	lsls	r4, r4, #3
 80014d2:	431c      	orrs	r4, r3
 80014d4:	2380      	movs	r3, #128	; 0x80
 80014d6:	041b      	lsls	r3, r3, #16
 80014d8:	4323      	orrs	r3, r4
 80014da:	4698      	mov	r8, r3
 80014dc:	4bcf      	ldr	r3, [pc, #828]	; (800181c <__aeabi_ddiv+0x37c>)
 80014de:	00ed      	lsls	r5, r5, #3
 80014e0:	469b      	mov	fp, r3
 80014e2:	2300      	movs	r3, #0
 80014e4:	4699      	mov	r9, r3
 80014e6:	4483      	add	fp, r0
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	033c      	lsls	r4, r7, #12
 80014ec:	007b      	lsls	r3, r7, #1
 80014ee:	4650      	mov	r0, sl
 80014f0:	0b24      	lsrs	r4, r4, #12
 80014f2:	0d5b      	lsrs	r3, r3, #21
 80014f4:	0fff      	lsrs	r7, r7, #31
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d100      	bne.n	80014fc <__aeabi_ddiv+0x5c>
 80014fa:	e11f      	b.n	800173c <__aeabi_ddiv+0x29c>
 80014fc:	4ac6      	ldr	r2, [pc, #792]	; (8001818 <__aeabi_ddiv+0x378>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d100      	bne.n	8001504 <__aeabi_ddiv+0x64>
 8001502:	e162      	b.n	80017ca <__aeabi_ddiv+0x32a>
 8001504:	49c5      	ldr	r1, [pc, #788]	; (800181c <__aeabi_ddiv+0x37c>)
 8001506:	0f42      	lsrs	r2, r0, #29
 8001508:	468c      	mov	ip, r1
 800150a:	00e4      	lsls	r4, r4, #3
 800150c:	4659      	mov	r1, fp
 800150e:	4314      	orrs	r4, r2
 8001510:	2280      	movs	r2, #128	; 0x80
 8001512:	4463      	add	r3, ip
 8001514:	0412      	lsls	r2, r2, #16
 8001516:	1acb      	subs	r3, r1, r3
 8001518:	4314      	orrs	r4, r2
 800151a:	469b      	mov	fp, r3
 800151c:	00c2      	lsls	r2, r0, #3
 800151e:	2000      	movs	r0, #0
 8001520:	0033      	movs	r3, r6
 8001522:	407b      	eors	r3, r7
 8001524:	469a      	mov	sl, r3
 8001526:	464b      	mov	r3, r9
 8001528:	2b0f      	cmp	r3, #15
 800152a:	d827      	bhi.n	800157c <__aeabi_ddiv+0xdc>
 800152c:	49bc      	ldr	r1, [pc, #752]	; (8001820 <__aeabi_ddiv+0x380>)
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	58cb      	ldr	r3, [r1, r3]
 8001532:	469f      	mov	pc, r3
 8001534:	46b2      	mov	sl, r6
 8001536:	9b00      	ldr	r3, [sp, #0]
 8001538:	2b02      	cmp	r3, #2
 800153a:	d016      	beq.n	800156a <__aeabi_ddiv+0xca>
 800153c:	2b03      	cmp	r3, #3
 800153e:	d100      	bne.n	8001542 <__aeabi_ddiv+0xa2>
 8001540:	e28e      	b.n	8001a60 <__aeabi_ddiv+0x5c0>
 8001542:	2b01      	cmp	r3, #1
 8001544:	d000      	beq.n	8001548 <__aeabi_ddiv+0xa8>
 8001546:	e0d9      	b.n	80016fc <__aeabi_ddiv+0x25c>
 8001548:	2300      	movs	r3, #0
 800154a:	2400      	movs	r4, #0
 800154c:	2500      	movs	r5, #0
 800154e:	4652      	mov	r2, sl
 8001550:	051b      	lsls	r3, r3, #20
 8001552:	4323      	orrs	r3, r4
 8001554:	07d2      	lsls	r2, r2, #31
 8001556:	4313      	orrs	r3, r2
 8001558:	0028      	movs	r0, r5
 800155a:	0019      	movs	r1, r3
 800155c:	b005      	add	sp, #20
 800155e:	bcf0      	pop	{r4, r5, r6, r7}
 8001560:	46bb      	mov	fp, r7
 8001562:	46b2      	mov	sl, r6
 8001564:	46a9      	mov	r9, r5
 8001566:	46a0      	mov	r8, r4
 8001568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800156a:	2400      	movs	r4, #0
 800156c:	2500      	movs	r5, #0
 800156e:	4baa      	ldr	r3, [pc, #680]	; (8001818 <__aeabi_ddiv+0x378>)
 8001570:	e7ed      	b.n	800154e <__aeabi_ddiv+0xae>
 8001572:	46ba      	mov	sl, r7
 8001574:	46a0      	mov	r8, r4
 8001576:	0015      	movs	r5, r2
 8001578:	9000      	str	r0, [sp, #0]
 800157a:	e7dc      	b.n	8001536 <__aeabi_ddiv+0x96>
 800157c:	4544      	cmp	r4, r8
 800157e:	d200      	bcs.n	8001582 <__aeabi_ddiv+0xe2>
 8001580:	e1c7      	b.n	8001912 <__aeabi_ddiv+0x472>
 8001582:	d100      	bne.n	8001586 <__aeabi_ddiv+0xe6>
 8001584:	e1c2      	b.n	800190c <__aeabi_ddiv+0x46c>
 8001586:	2301      	movs	r3, #1
 8001588:	425b      	negs	r3, r3
 800158a:	469c      	mov	ip, r3
 800158c:	002e      	movs	r6, r5
 800158e:	4640      	mov	r0, r8
 8001590:	2500      	movs	r5, #0
 8001592:	44e3      	add	fp, ip
 8001594:	0223      	lsls	r3, r4, #8
 8001596:	0e14      	lsrs	r4, r2, #24
 8001598:	431c      	orrs	r4, r3
 800159a:	0c1b      	lsrs	r3, r3, #16
 800159c:	4699      	mov	r9, r3
 800159e:	0423      	lsls	r3, r4, #16
 80015a0:	0c1f      	lsrs	r7, r3, #16
 80015a2:	0212      	lsls	r2, r2, #8
 80015a4:	4649      	mov	r1, r9
 80015a6:	9200      	str	r2, [sp, #0]
 80015a8:	9701      	str	r7, [sp, #4]
 80015aa:	f7fe fe33 	bl	8000214 <__aeabi_uidivmod>
 80015ae:	0002      	movs	r2, r0
 80015b0:	437a      	muls	r2, r7
 80015b2:	040b      	lsls	r3, r1, #16
 80015b4:	0c31      	lsrs	r1, r6, #16
 80015b6:	4680      	mov	r8, r0
 80015b8:	4319      	orrs	r1, r3
 80015ba:	428a      	cmp	r2, r1
 80015bc:	d907      	bls.n	80015ce <__aeabi_ddiv+0x12e>
 80015be:	2301      	movs	r3, #1
 80015c0:	425b      	negs	r3, r3
 80015c2:	469c      	mov	ip, r3
 80015c4:	1909      	adds	r1, r1, r4
 80015c6:	44e0      	add	r8, ip
 80015c8:	428c      	cmp	r4, r1
 80015ca:	d800      	bhi.n	80015ce <__aeabi_ddiv+0x12e>
 80015cc:	e207      	b.n	80019de <__aeabi_ddiv+0x53e>
 80015ce:	1a88      	subs	r0, r1, r2
 80015d0:	4649      	mov	r1, r9
 80015d2:	f7fe fe1f 	bl	8000214 <__aeabi_uidivmod>
 80015d6:	0409      	lsls	r1, r1, #16
 80015d8:	468c      	mov	ip, r1
 80015da:	0431      	lsls	r1, r6, #16
 80015dc:	4666      	mov	r6, ip
 80015de:	9a01      	ldr	r2, [sp, #4]
 80015e0:	0c09      	lsrs	r1, r1, #16
 80015e2:	4342      	muls	r2, r0
 80015e4:	0003      	movs	r3, r0
 80015e6:	4331      	orrs	r1, r6
 80015e8:	428a      	cmp	r2, r1
 80015ea:	d904      	bls.n	80015f6 <__aeabi_ddiv+0x156>
 80015ec:	1909      	adds	r1, r1, r4
 80015ee:	3b01      	subs	r3, #1
 80015f0:	428c      	cmp	r4, r1
 80015f2:	d800      	bhi.n	80015f6 <__aeabi_ddiv+0x156>
 80015f4:	e1ed      	b.n	80019d2 <__aeabi_ddiv+0x532>
 80015f6:	1a88      	subs	r0, r1, r2
 80015f8:	4642      	mov	r2, r8
 80015fa:	0412      	lsls	r2, r2, #16
 80015fc:	431a      	orrs	r2, r3
 80015fe:	4690      	mov	r8, r2
 8001600:	4641      	mov	r1, r8
 8001602:	9b00      	ldr	r3, [sp, #0]
 8001604:	040e      	lsls	r6, r1, #16
 8001606:	0c1b      	lsrs	r3, r3, #16
 8001608:	001f      	movs	r7, r3
 800160a:	9302      	str	r3, [sp, #8]
 800160c:	9b00      	ldr	r3, [sp, #0]
 800160e:	0c36      	lsrs	r6, r6, #16
 8001610:	041b      	lsls	r3, r3, #16
 8001612:	0c19      	lsrs	r1, r3, #16
 8001614:	000b      	movs	r3, r1
 8001616:	4373      	muls	r3, r6
 8001618:	0c12      	lsrs	r2, r2, #16
 800161a:	437e      	muls	r6, r7
 800161c:	9103      	str	r1, [sp, #12]
 800161e:	4351      	muls	r1, r2
 8001620:	437a      	muls	r2, r7
 8001622:	0c1f      	lsrs	r7, r3, #16
 8001624:	46bc      	mov	ip, r7
 8001626:	1876      	adds	r6, r6, r1
 8001628:	4466      	add	r6, ip
 800162a:	42b1      	cmp	r1, r6
 800162c:	d903      	bls.n	8001636 <__aeabi_ddiv+0x196>
 800162e:	2180      	movs	r1, #128	; 0x80
 8001630:	0249      	lsls	r1, r1, #9
 8001632:	468c      	mov	ip, r1
 8001634:	4462      	add	r2, ip
 8001636:	0c31      	lsrs	r1, r6, #16
 8001638:	188a      	adds	r2, r1, r2
 800163a:	0431      	lsls	r1, r6, #16
 800163c:	041e      	lsls	r6, r3, #16
 800163e:	0c36      	lsrs	r6, r6, #16
 8001640:	198e      	adds	r6, r1, r6
 8001642:	4290      	cmp	r0, r2
 8001644:	d302      	bcc.n	800164c <__aeabi_ddiv+0x1ac>
 8001646:	d112      	bne.n	800166e <__aeabi_ddiv+0x1ce>
 8001648:	42b5      	cmp	r5, r6
 800164a:	d210      	bcs.n	800166e <__aeabi_ddiv+0x1ce>
 800164c:	4643      	mov	r3, r8
 800164e:	1e59      	subs	r1, r3, #1
 8001650:	9b00      	ldr	r3, [sp, #0]
 8001652:	469c      	mov	ip, r3
 8001654:	4465      	add	r5, ip
 8001656:	001f      	movs	r7, r3
 8001658:	429d      	cmp	r5, r3
 800165a:	419b      	sbcs	r3, r3
 800165c:	425b      	negs	r3, r3
 800165e:	191b      	adds	r3, r3, r4
 8001660:	18c0      	adds	r0, r0, r3
 8001662:	4284      	cmp	r4, r0
 8001664:	d200      	bcs.n	8001668 <__aeabi_ddiv+0x1c8>
 8001666:	e1a0      	b.n	80019aa <__aeabi_ddiv+0x50a>
 8001668:	d100      	bne.n	800166c <__aeabi_ddiv+0x1cc>
 800166a:	e19b      	b.n	80019a4 <__aeabi_ddiv+0x504>
 800166c:	4688      	mov	r8, r1
 800166e:	1bae      	subs	r6, r5, r6
 8001670:	42b5      	cmp	r5, r6
 8001672:	41ad      	sbcs	r5, r5
 8001674:	1a80      	subs	r0, r0, r2
 8001676:	426d      	negs	r5, r5
 8001678:	1b40      	subs	r0, r0, r5
 800167a:	4284      	cmp	r4, r0
 800167c:	d100      	bne.n	8001680 <__aeabi_ddiv+0x1e0>
 800167e:	e1d5      	b.n	8001a2c <__aeabi_ddiv+0x58c>
 8001680:	4649      	mov	r1, r9
 8001682:	f7fe fdc7 	bl	8000214 <__aeabi_uidivmod>
 8001686:	9a01      	ldr	r2, [sp, #4]
 8001688:	040b      	lsls	r3, r1, #16
 800168a:	4342      	muls	r2, r0
 800168c:	0c31      	lsrs	r1, r6, #16
 800168e:	0005      	movs	r5, r0
 8001690:	4319      	orrs	r1, r3
 8001692:	428a      	cmp	r2, r1
 8001694:	d900      	bls.n	8001698 <__aeabi_ddiv+0x1f8>
 8001696:	e16c      	b.n	8001972 <__aeabi_ddiv+0x4d2>
 8001698:	1a88      	subs	r0, r1, r2
 800169a:	4649      	mov	r1, r9
 800169c:	f7fe fdba 	bl	8000214 <__aeabi_uidivmod>
 80016a0:	9a01      	ldr	r2, [sp, #4]
 80016a2:	0436      	lsls	r6, r6, #16
 80016a4:	4342      	muls	r2, r0
 80016a6:	0409      	lsls	r1, r1, #16
 80016a8:	0c36      	lsrs	r6, r6, #16
 80016aa:	0003      	movs	r3, r0
 80016ac:	430e      	orrs	r6, r1
 80016ae:	42b2      	cmp	r2, r6
 80016b0:	d900      	bls.n	80016b4 <__aeabi_ddiv+0x214>
 80016b2:	e153      	b.n	800195c <__aeabi_ddiv+0x4bc>
 80016b4:	9803      	ldr	r0, [sp, #12]
 80016b6:	1ab6      	subs	r6, r6, r2
 80016b8:	0002      	movs	r2, r0
 80016ba:	042d      	lsls	r5, r5, #16
 80016bc:	431d      	orrs	r5, r3
 80016be:	9f02      	ldr	r7, [sp, #8]
 80016c0:	042b      	lsls	r3, r5, #16
 80016c2:	0c1b      	lsrs	r3, r3, #16
 80016c4:	435a      	muls	r2, r3
 80016c6:	437b      	muls	r3, r7
 80016c8:	469c      	mov	ip, r3
 80016ca:	0c29      	lsrs	r1, r5, #16
 80016cc:	4348      	muls	r0, r1
 80016ce:	0c13      	lsrs	r3, r2, #16
 80016d0:	4484      	add	ip, r0
 80016d2:	4463      	add	r3, ip
 80016d4:	4379      	muls	r1, r7
 80016d6:	4298      	cmp	r0, r3
 80016d8:	d903      	bls.n	80016e2 <__aeabi_ddiv+0x242>
 80016da:	2080      	movs	r0, #128	; 0x80
 80016dc:	0240      	lsls	r0, r0, #9
 80016de:	4684      	mov	ip, r0
 80016e0:	4461      	add	r1, ip
 80016e2:	0c18      	lsrs	r0, r3, #16
 80016e4:	0412      	lsls	r2, r2, #16
 80016e6:	041b      	lsls	r3, r3, #16
 80016e8:	0c12      	lsrs	r2, r2, #16
 80016ea:	1841      	adds	r1, r0, r1
 80016ec:	189b      	adds	r3, r3, r2
 80016ee:	428e      	cmp	r6, r1
 80016f0:	d200      	bcs.n	80016f4 <__aeabi_ddiv+0x254>
 80016f2:	e0ff      	b.n	80018f4 <__aeabi_ddiv+0x454>
 80016f4:	d100      	bne.n	80016f8 <__aeabi_ddiv+0x258>
 80016f6:	e0fa      	b.n	80018ee <__aeabi_ddiv+0x44e>
 80016f8:	2301      	movs	r3, #1
 80016fa:	431d      	orrs	r5, r3
 80016fc:	4a49      	ldr	r2, [pc, #292]	; (8001824 <__aeabi_ddiv+0x384>)
 80016fe:	445a      	add	r2, fp
 8001700:	2a00      	cmp	r2, #0
 8001702:	dc00      	bgt.n	8001706 <__aeabi_ddiv+0x266>
 8001704:	e0aa      	b.n	800185c <__aeabi_ddiv+0x3bc>
 8001706:	076b      	lsls	r3, r5, #29
 8001708:	d000      	beq.n	800170c <__aeabi_ddiv+0x26c>
 800170a:	e13d      	b.n	8001988 <__aeabi_ddiv+0x4e8>
 800170c:	08ed      	lsrs	r5, r5, #3
 800170e:	4643      	mov	r3, r8
 8001710:	01db      	lsls	r3, r3, #7
 8001712:	d506      	bpl.n	8001722 <__aeabi_ddiv+0x282>
 8001714:	4642      	mov	r2, r8
 8001716:	4b44      	ldr	r3, [pc, #272]	; (8001828 <__aeabi_ddiv+0x388>)
 8001718:	401a      	ands	r2, r3
 800171a:	4690      	mov	r8, r2
 800171c:	2280      	movs	r2, #128	; 0x80
 800171e:	00d2      	lsls	r2, r2, #3
 8001720:	445a      	add	r2, fp
 8001722:	4b42      	ldr	r3, [pc, #264]	; (800182c <__aeabi_ddiv+0x38c>)
 8001724:	429a      	cmp	r2, r3
 8001726:	dd00      	ble.n	800172a <__aeabi_ddiv+0x28a>
 8001728:	e71f      	b.n	800156a <__aeabi_ddiv+0xca>
 800172a:	4643      	mov	r3, r8
 800172c:	075b      	lsls	r3, r3, #29
 800172e:	431d      	orrs	r5, r3
 8001730:	4643      	mov	r3, r8
 8001732:	0552      	lsls	r2, r2, #21
 8001734:	025c      	lsls	r4, r3, #9
 8001736:	0b24      	lsrs	r4, r4, #12
 8001738:	0d53      	lsrs	r3, r2, #21
 800173a:	e708      	b.n	800154e <__aeabi_ddiv+0xae>
 800173c:	4652      	mov	r2, sl
 800173e:	4322      	orrs	r2, r4
 8001740:	d100      	bne.n	8001744 <__aeabi_ddiv+0x2a4>
 8001742:	e07b      	b.n	800183c <__aeabi_ddiv+0x39c>
 8001744:	2c00      	cmp	r4, #0
 8001746:	d100      	bne.n	800174a <__aeabi_ddiv+0x2aa>
 8001748:	e0fa      	b.n	8001940 <__aeabi_ddiv+0x4a0>
 800174a:	0020      	movs	r0, r4
 800174c:	f000 fe3a 	bl	80023c4 <__clzsi2>
 8001750:	0002      	movs	r2, r0
 8001752:	3a0b      	subs	r2, #11
 8001754:	231d      	movs	r3, #29
 8001756:	0001      	movs	r1, r0
 8001758:	1a9b      	subs	r3, r3, r2
 800175a:	4652      	mov	r2, sl
 800175c:	3908      	subs	r1, #8
 800175e:	40da      	lsrs	r2, r3
 8001760:	408c      	lsls	r4, r1
 8001762:	4314      	orrs	r4, r2
 8001764:	4652      	mov	r2, sl
 8001766:	408a      	lsls	r2, r1
 8001768:	4b31      	ldr	r3, [pc, #196]	; (8001830 <__aeabi_ddiv+0x390>)
 800176a:	4458      	add	r0, fp
 800176c:	469b      	mov	fp, r3
 800176e:	4483      	add	fp, r0
 8001770:	2000      	movs	r0, #0
 8001772:	e6d5      	b.n	8001520 <__aeabi_ddiv+0x80>
 8001774:	464b      	mov	r3, r9
 8001776:	4323      	orrs	r3, r4
 8001778:	4698      	mov	r8, r3
 800177a:	d044      	beq.n	8001806 <__aeabi_ddiv+0x366>
 800177c:	2c00      	cmp	r4, #0
 800177e:	d100      	bne.n	8001782 <__aeabi_ddiv+0x2e2>
 8001780:	e0ce      	b.n	8001920 <__aeabi_ddiv+0x480>
 8001782:	0020      	movs	r0, r4
 8001784:	f000 fe1e 	bl	80023c4 <__clzsi2>
 8001788:	0001      	movs	r1, r0
 800178a:	0002      	movs	r2, r0
 800178c:	390b      	subs	r1, #11
 800178e:	231d      	movs	r3, #29
 8001790:	1a5b      	subs	r3, r3, r1
 8001792:	4649      	mov	r1, r9
 8001794:	0010      	movs	r0, r2
 8001796:	40d9      	lsrs	r1, r3
 8001798:	3808      	subs	r0, #8
 800179a:	4084      	lsls	r4, r0
 800179c:	000b      	movs	r3, r1
 800179e:	464d      	mov	r5, r9
 80017a0:	4323      	orrs	r3, r4
 80017a2:	4698      	mov	r8, r3
 80017a4:	4085      	lsls	r5, r0
 80017a6:	4823      	ldr	r0, [pc, #140]	; (8001834 <__aeabi_ddiv+0x394>)
 80017a8:	1a83      	subs	r3, r0, r2
 80017aa:	469b      	mov	fp, r3
 80017ac:	2300      	movs	r3, #0
 80017ae:	4699      	mov	r9, r3
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	e69a      	b.n	80014ea <__aeabi_ddiv+0x4a>
 80017b4:	464b      	mov	r3, r9
 80017b6:	4323      	orrs	r3, r4
 80017b8:	4698      	mov	r8, r3
 80017ba:	d11d      	bne.n	80017f8 <__aeabi_ddiv+0x358>
 80017bc:	2308      	movs	r3, #8
 80017be:	4699      	mov	r9, r3
 80017c0:	3b06      	subs	r3, #6
 80017c2:	2500      	movs	r5, #0
 80017c4:	4683      	mov	fp, r0
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	e68f      	b.n	80014ea <__aeabi_ddiv+0x4a>
 80017ca:	4652      	mov	r2, sl
 80017cc:	4322      	orrs	r2, r4
 80017ce:	d109      	bne.n	80017e4 <__aeabi_ddiv+0x344>
 80017d0:	2302      	movs	r3, #2
 80017d2:	4649      	mov	r1, r9
 80017d4:	4319      	orrs	r1, r3
 80017d6:	4b18      	ldr	r3, [pc, #96]	; (8001838 <__aeabi_ddiv+0x398>)
 80017d8:	4689      	mov	r9, r1
 80017da:	469c      	mov	ip, r3
 80017dc:	2400      	movs	r4, #0
 80017de:	2002      	movs	r0, #2
 80017e0:	44e3      	add	fp, ip
 80017e2:	e69d      	b.n	8001520 <__aeabi_ddiv+0x80>
 80017e4:	2303      	movs	r3, #3
 80017e6:	464a      	mov	r2, r9
 80017e8:	431a      	orrs	r2, r3
 80017ea:	4b13      	ldr	r3, [pc, #76]	; (8001838 <__aeabi_ddiv+0x398>)
 80017ec:	4691      	mov	r9, r2
 80017ee:	469c      	mov	ip, r3
 80017f0:	4652      	mov	r2, sl
 80017f2:	2003      	movs	r0, #3
 80017f4:	44e3      	add	fp, ip
 80017f6:	e693      	b.n	8001520 <__aeabi_ddiv+0x80>
 80017f8:	230c      	movs	r3, #12
 80017fa:	4699      	mov	r9, r3
 80017fc:	3b09      	subs	r3, #9
 80017fe:	46a0      	mov	r8, r4
 8001800:	4683      	mov	fp, r0
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	e671      	b.n	80014ea <__aeabi_ddiv+0x4a>
 8001806:	2304      	movs	r3, #4
 8001808:	4699      	mov	r9, r3
 800180a:	2300      	movs	r3, #0
 800180c:	469b      	mov	fp, r3
 800180e:	3301      	adds	r3, #1
 8001810:	2500      	movs	r5, #0
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	e669      	b.n	80014ea <__aeabi_ddiv+0x4a>
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	000007ff 	.word	0x000007ff
 800181c:	fffffc01 	.word	0xfffffc01
 8001820:	08004700 	.word	0x08004700
 8001824:	000003ff 	.word	0x000003ff
 8001828:	feffffff 	.word	0xfeffffff
 800182c:	000007fe 	.word	0x000007fe
 8001830:	000003f3 	.word	0x000003f3
 8001834:	fffffc0d 	.word	0xfffffc0d
 8001838:	fffff801 	.word	0xfffff801
 800183c:	4649      	mov	r1, r9
 800183e:	2301      	movs	r3, #1
 8001840:	4319      	orrs	r1, r3
 8001842:	4689      	mov	r9, r1
 8001844:	2400      	movs	r4, #0
 8001846:	2001      	movs	r0, #1
 8001848:	e66a      	b.n	8001520 <__aeabi_ddiv+0x80>
 800184a:	2300      	movs	r3, #0
 800184c:	2480      	movs	r4, #128	; 0x80
 800184e:	469a      	mov	sl, r3
 8001850:	2500      	movs	r5, #0
 8001852:	4b8a      	ldr	r3, [pc, #552]	; (8001a7c <__aeabi_ddiv+0x5dc>)
 8001854:	0324      	lsls	r4, r4, #12
 8001856:	e67a      	b.n	800154e <__aeabi_ddiv+0xae>
 8001858:	2501      	movs	r5, #1
 800185a:	426d      	negs	r5, r5
 800185c:	2301      	movs	r3, #1
 800185e:	1a9b      	subs	r3, r3, r2
 8001860:	2b38      	cmp	r3, #56	; 0x38
 8001862:	dd00      	ble.n	8001866 <__aeabi_ddiv+0x3c6>
 8001864:	e670      	b.n	8001548 <__aeabi_ddiv+0xa8>
 8001866:	2b1f      	cmp	r3, #31
 8001868:	dc00      	bgt.n	800186c <__aeabi_ddiv+0x3cc>
 800186a:	e0bf      	b.n	80019ec <__aeabi_ddiv+0x54c>
 800186c:	211f      	movs	r1, #31
 800186e:	4249      	negs	r1, r1
 8001870:	1a8a      	subs	r2, r1, r2
 8001872:	4641      	mov	r1, r8
 8001874:	40d1      	lsrs	r1, r2
 8001876:	000a      	movs	r2, r1
 8001878:	2b20      	cmp	r3, #32
 800187a:	d004      	beq.n	8001886 <__aeabi_ddiv+0x3e6>
 800187c:	4641      	mov	r1, r8
 800187e:	4b80      	ldr	r3, [pc, #512]	; (8001a80 <__aeabi_ddiv+0x5e0>)
 8001880:	445b      	add	r3, fp
 8001882:	4099      	lsls	r1, r3
 8001884:	430d      	orrs	r5, r1
 8001886:	1e6b      	subs	r3, r5, #1
 8001888:	419d      	sbcs	r5, r3
 800188a:	2307      	movs	r3, #7
 800188c:	432a      	orrs	r2, r5
 800188e:	001d      	movs	r5, r3
 8001890:	2400      	movs	r4, #0
 8001892:	4015      	ands	r5, r2
 8001894:	4213      	tst	r3, r2
 8001896:	d100      	bne.n	800189a <__aeabi_ddiv+0x3fa>
 8001898:	e0d4      	b.n	8001a44 <__aeabi_ddiv+0x5a4>
 800189a:	210f      	movs	r1, #15
 800189c:	2300      	movs	r3, #0
 800189e:	4011      	ands	r1, r2
 80018a0:	2904      	cmp	r1, #4
 80018a2:	d100      	bne.n	80018a6 <__aeabi_ddiv+0x406>
 80018a4:	e0cb      	b.n	8001a3e <__aeabi_ddiv+0x59e>
 80018a6:	1d11      	adds	r1, r2, #4
 80018a8:	4291      	cmp	r1, r2
 80018aa:	4192      	sbcs	r2, r2
 80018ac:	4252      	negs	r2, r2
 80018ae:	189b      	adds	r3, r3, r2
 80018b0:	000a      	movs	r2, r1
 80018b2:	0219      	lsls	r1, r3, #8
 80018b4:	d400      	bmi.n	80018b8 <__aeabi_ddiv+0x418>
 80018b6:	e0c2      	b.n	8001a3e <__aeabi_ddiv+0x59e>
 80018b8:	2301      	movs	r3, #1
 80018ba:	2400      	movs	r4, #0
 80018bc:	2500      	movs	r5, #0
 80018be:	e646      	b.n	800154e <__aeabi_ddiv+0xae>
 80018c0:	2380      	movs	r3, #128	; 0x80
 80018c2:	4641      	mov	r1, r8
 80018c4:	031b      	lsls	r3, r3, #12
 80018c6:	4219      	tst	r1, r3
 80018c8:	d008      	beq.n	80018dc <__aeabi_ddiv+0x43c>
 80018ca:	421c      	tst	r4, r3
 80018cc:	d106      	bne.n	80018dc <__aeabi_ddiv+0x43c>
 80018ce:	431c      	orrs	r4, r3
 80018d0:	0324      	lsls	r4, r4, #12
 80018d2:	46ba      	mov	sl, r7
 80018d4:	0015      	movs	r5, r2
 80018d6:	4b69      	ldr	r3, [pc, #420]	; (8001a7c <__aeabi_ddiv+0x5dc>)
 80018d8:	0b24      	lsrs	r4, r4, #12
 80018da:	e638      	b.n	800154e <__aeabi_ddiv+0xae>
 80018dc:	2480      	movs	r4, #128	; 0x80
 80018de:	4643      	mov	r3, r8
 80018e0:	0324      	lsls	r4, r4, #12
 80018e2:	431c      	orrs	r4, r3
 80018e4:	0324      	lsls	r4, r4, #12
 80018e6:	46b2      	mov	sl, r6
 80018e8:	4b64      	ldr	r3, [pc, #400]	; (8001a7c <__aeabi_ddiv+0x5dc>)
 80018ea:	0b24      	lsrs	r4, r4, #12
 80018ec:	e62f      	b.n	800154e <__aeabi_ddiv+0xae>
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d100      	bne.n	80018f4 <__aeabi_ddiv+0x454>
 80018f2:	e703      	b.n	80016fc <__aeabi_ddiv+0x25c>
 80018f4:	19a6      	adds	r6, r4, r6
 80018f6:	1e68      	subs	r0, r5, #1
 80018f8:	42a6      	cmp	r6, r4
 80018fa:	d200      	bcs.n	80018fe <__aeabi_ddiv+0x45e>
 80018fc:	e08d      	b.n	8001a1a <__aeabi_ddiv+0x57a>
 80018fe:	428e      	cmp	r6, r1
 8001900:	d200      	bcs.n	8001904 <__aeabi_ddiv+0x464>
 8001902:	e0a3      	b.n	8001a4c <__aeabi_ddiv+0x5ac>
 8001904:	d100      	bne.n	8001908 <__aeabi_ddiv+0x468>
 8001906:	e0b3      	b.n	8001a70 <__aeabi_ddiv+0x5d0>
 8001908:	0005      	movs	r5, r0
 800190a:	e6f5      	b.n	80016f8 <__aeabi_ddiv+0x258>
 800190c:	42aa      	cmp	r2, r5
 800190e:	d900      	bls.n	8001912 <__aeabi_ddiv+0x472>
 8001910:	e639      	b.n	8001586 <__aeabi_ddiv+0xe6>
 8001912:	4643      	mov	r3, r8
 8001914:	07de      	lsls	r6, r3, #31
 8001916:	0858      	lsrs	r0, r3, #1
 8001918:	086b      	lsrs	r3, r5, #1
 800191a:	431e      	orrs	r6, r3
 800191c:	07ed      	lsls	r5, r5, #31
 800191e:	e639      	b.n	8001594 <__aeabi_ddiv+0xf4>
 8001920:	4648      	mov	r0, r9
 8001922:	f000 fd4f 	bl	80023c4 <__clzsi2>
 8001926:	0001      	movs	r1, r0
 8001928:	0002      	movs	r2, r0
 800192a:	3115      	adds	r1, #21
 800192c:	3220      	adds	r2, #32
 800192e:	291c      	cmp	r1, #28
 8001930:	dc00      	bgt.n	8001934 <__aeabi_ddiv+0x494>
 8001932:	e72c      	b.n	800178e <__aeabi_ddiv+0x2ee>
 8001934:	464b      	mov	r3, r9
 8001936:	3808      	subs	r0, #8
 8001938:	4083      	lsls	r3, r0
 800193a:	2500      	movs	r5, #0
 800193c:	4698      	mov	r8, r3
 800193e:	e732      	b.n	80017a6 <__aeabi_ddiv+0x306>
 8001940:	f000 fd40 	bl	80023c4 <__clzsi2>
 8001944:	0003      	movs	r3, r0
 8001946:	001a      	movs	r2, r3
 8001948:	3215      	adds	r2, #21
 800194a:	3020      	adds	r0, #32
 800194c:	2a1c      	cmp	r2, #28
 800194e:	dc00      	bgt.n	8001952 <__aeabi_ddiv+0x4b2>
 8001950:	e700      	b.n	8001754 <__aeabi_ddiv+0x2b4>
 8001952:	4654      	mov	r4, sl
 8001954:	3b08      	subs	r3, #8
 8001956:	2200      	movs	r2, #0
 8001958:	409c      	lsls	r4, r3
 800195a:	e705      	b.n	8001768 <__aeabi_ddiv+0x2c8>
 800195c:	1936      	adds	r6, r6, r4
 800195e:	3b01      	subs	r3, #1
 8001960:	42b4      	cmp	r4, r6
 8001962:	d900      	bls.n	8001966 <__aeabi_ddiv+0x4c6>
 8001964:	e6a6      	b.n	80016b4 <__aeabi_ddiv+0x214>
 8001966:	42b2      	cmp	r2, r6
 8001968:	d800      	bhi.n	800196c <__aeabi_ddiv+0x4cc>
 800196a:	e6a3      	b.n	80016b4 <__aeabi_ddiv+0x214>
 800196c:	1e83      	subs	r3, r0, #2
 800196e:	1936      	adds	r6, r6, r4
 8001970:	e6a0      	b.n	80016b4 <__aeabi_ddiv+0x214>
 8001972:	1909      	adds	r1, r1, r4
 8001974:	3d01      	subs	r5, #1
 8001976:	428c      	cmp	r4, r1
 8001978:	d900      	bls.n	800197c <__aeabi_ddiv+0x4dc>
 800197a:	e68d      	b.n	8001698 <__aeabi_ddiv+0x1f8>
 800197c:	428a      	cmp	r2, r1
 800197e:	d800      	bhi.n	8001982 <__aeabi_ddiv+0x4e2>
 8001980:	e68a      	b.n	8001698 <__aeabi_ddiv+0x1f8>
 8001982:	1e85      	subs	r5, r0, #2
 8001984:	1909      	adds	r1, r1, r4
 8001986:	e687      	b.n	8001698 <__aeabi_ddiv+0x1f8>
 8001988:	230f      	movs	r3, #15
 800198a:	402b      	ands	r3, r5
 800198c:	2b04      	cmp	r3, #4
 800198e:	d100      	bne.n	8001992 <__aeabi_ddiv+0x4f2>
 8001990:	e6bc      	b.n	800170c <__aeabi_ddiv+0x26c>
 8001992:	2305      	movs	r3, #5
 8001994:	425b      	negs	r3, r3
 8001996:	42ab      	cmp	r3, r5
 8001998:	419b      	sbcs	r3, r3
 800199a:	3504      	adds	r5, #4
 800199c:	425b      	negs	r3, r3
 800199e:	08ed      	lsrs	r5, r5, #3
 80019a0:	4498      	add	r8, r3
 80019a2:	e6b4      	b.n	800170e <__aeabi_ddiv+0x26e>
 80019a4:	42af      	cmp	r7, r5
 80019a6:	d900      	bls.n	80019aa <__aeabi_ddiv+0x50a>
 80019a8:	e660      	b.n	800166c <__aeabi_ddiv+0x1cc>
 80019aa:	4282      	cmp	r2, r0
 80019ac:	d804      	bhi.n	80019b8 <__aeabi_ddiv+0x518>
 80019ae:	d000      	beq.n	80019b2 <__aeabi_ddiv+0x512>
 80019b0:	e65c      	b.n	800166c <__aeabi_ddiv+0x1cc>
 80019b2:	42ae      	cmp	r6, r5
 80019b4:	d800      	bhi.n	80019b8 <__aeabi_ddiv+0x518>
 80019b6:	e659      	b.n	800166c <__aeabi_ddiv+0x1cc>
 80019b8:	2302      	movs	r3, #2
 80019ba:	425b      	negs	r3, r3
 80019bc:	469c      	mov	ip, r3
 80019be:	9b00      	ldr	r3, [sp, #0]
 80019c0:	44e0      	add	r8, ip
 80019c2:	469c      	mov	ip, r3
 80019c4:	4465      	add	r5, ip
 80019c6:	429d      	cmp	r5, r3
 80019c8:	419b      	sbcs	r3, r3
 80019ca:	425b      	negs	r3, r3
 80019cc:	191b      	adds	r3, r3, r4
 80019ce:	18c0      	adds	r0, r0, r3
 80019d0:	e64d      	b.n	800166e <__aeabi_ddiv+0x1ce>
 80019d2:	428a      	cmp	r2, r1
 80019d4:	d800      	bhi.n	80019d8 <__aeabi_ddiv+0x538>
 80019d6:	e60e      	b.n	80015f6 <__aeabi_ddiv+0x156>
 80019d8:	1e83      	subs	r3, r0, #2
 80019da:	1909      	adds	r1, r1, r4
 80019dc:	e60b      	b.n	80015f6 <__aeabi_ddiv+0x156>
 80019de:	428a      	cmp	r2, r1
 80019e0:	d800      	bhi.n	80019e4 <__aeabi_ddiv+0x544>
 80019e2:	e5f4      	b.n	80015ce <__aeabi_ddiv+0x12e>
 80019e4:	1e83      	subs	r3, r0, #2
 80019e6:	4698      	mov	r8, r3
 80019e8:	1909      	adds	r1, r1, r4
 80019ea:	e5f0      	b.n	80015ce <__aeabi_ddiv+0x12e>
 80019ec:	4925      	ldr	r1, [pc, #148]	; (8001a84 <__aeabi_ddiv+0x5e4>)
 80019ee:	0028      	movs	r0, r5
 80019f0:	4459      	add	r1, fp
 80019f2:	408d      	lsls	r5, r1
 80019f4:	4642      	mov	r2, r8
 80019f6:	408a      	lsls	r2, r1
 80019f8:	1e69      	subs	r1, r5, #1
 80019fa:	418d      	sbcs	r5, r1
 80019fc:	4641      	mov	r1, r8
 80019fe:	40d8      	lsrs	r0, r3
 8001a00:	40d9      	lsrs	r1, r3
 8001a02:	4302      	orrs	r2, r0
 8001a04:	432a      	orrs	r2, r5
 8001a06:	000b      	movs	r3, r1
 8001a08:	0751      	lsls	r1, r2, #29
 8001a0a:	d100      	bne.n	8001a0e <__aeabi_ddiv+0x56e>
 8001a0c:	e751      	b.n	80018b2 <__aeabi_ddiv+0x412>
 8001a0e:	210f      	movs	r1, #15
 8001a10:	4011      	ands	r1, r2
 8001a12:	2904      	cmp	r1, #4
 8001a14:	d000      	beq.n	8001a18 <__aeabi_ddiv+0x578>
 8001a16:	e746      	b.n	80018a6 <__aeabi_ddiv+0x406>
 8001a18:	e74b      	b.n	80018b2 <__aeabi_ddiv+0x412>
 8001a1a:	0005      	movs	r5, r0
 8001a1c:	428e      	cmp	r6, r1
 8001a1e:	d000      	beq.n	8001a22 <__aeabi_ddiv+0x582>
 8001a20:	e66a      	b.n	80016f8 <__aeabi_ddiv+0x258>
 8001a22:	9a00      	ldr	r2, [sp, #0]
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d000      	beq.n	8001a2a <__aeabi_ddiv+0x58a>
 8001a28:	e666      	b.n	80016f8 <__aeabi_ddiv+0x258>
 8001a2a:	e667      	b.n	80016fc <__aeabi_ddiv+0x25c>
 8001a2c:	4a16      	ldr	r2, [pc, #88]	; (8001a88 <__aeabi_ddiv+0x5e8>)
 8001a2e:	445a      	add	r2, fp
 8001a30:	2a00      	cmp	r2, #0
 8001a32:	dc00      	bgt.n	8001a36 <__aeabi_ddiv+0x596>
 8001a34:	e710      	b.n	8001858 <__aeabi_ddiv+0x3b8>
 8001a36:	2301      	movs	r3, #1
 8001a38:	2500      	movs	r5, #0
 8001a3a:	4498      	add	r8, r3
 8001a3c:	e667      	b.n	800170e <__aeabi_ddiv+0x26e>
 8001a3e:	075d      	lsls	r5, r3, #29
 8001a40:	025b      	lsls	r3, r3, #9
 8001a42:	0b1c      	lsrs	r4, r3, #12
 8001a44:	08d2      	lsrs	r2, r2, #3
 8001a46:	2300      	movs	r3, #0
 8001a48:	4315      	orrs	r5, r2
 8001a4a:	e580      	b.n	800154e <__aeabi_ddiv+0xae>
 8001a4c:	9800      	ldr	r0, [sp, #0]
 8001a4e:	3d02      	subs	r5, #2
 8001a50:	0042      	lsls	r2, r0, #1
 8001a52:	4282      	cmp	r2, r0
 8001a54:	41bf      	sbcs	r7, r7
 8001a56:	427f      	negs	r7, r7
 8001a58:	193c      	adds	r4, r7, r4
 8001a5a:	1936      	adds	r6, r6, r4
 8001a5c:	9200      	str	r2, [sp, #0]
 8001a5e:	e7dd      	b.n	8001a1c <__aeabi_ddiv+0x57c>
 8001a60:	2480      	movs	r4, #128	; 0x80
 8001a62:	4643      	mov	r3, r8
 8001a64:	0324      	lsls	r4, r4, #12
 8001a66:	431c      	orrs	r4, r3
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <__aeabi_ddiv+0x5dc>)
 8001a6c:	0b24      	lsrs	r4, r4, #12
 8001a6e:	e56e      	b.n	800154e <__aeabi_ddiv+0xae>
 8001a70:	9a00      	ldr	r2, [sp, #0]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d3ea      	bcc.n	8001a4c <__aeabi_ddiv+0x5ac>
 8001a76:	0005      	movs	r5, r0
 8001a78:	e7d3      	b.n	8001a22 <__aeabi_ddiv+0x582>
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	000007ff 	.word	0x000007ff
 8001a80:	0000043e 	.word	0x0000043e
 8001a84:	0000041e 	.word	0x0000041e
 8001a88:	000003ff 	.word	0x000003ff

08001a8c <__aeabi_dsub>:
 8001a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a8e:	4657      	mov	r7, sl
 8001a90:	464e      	mov	r6, r9
 8001a92:	4645      	mov	r5, r8
 8001a94:	46de      	mov	lr, fp
 8001a96:	b5e0      	push	{r5, r6, r7, lr}
 8001a98:	001e      	movs	r6, r3
 8001a9a:	0017      	movs	r7, r2
 8001a9c:	004a      	lsls	r2, r1, #1
 8001a9e:	030b      	lsls	r3, r1, #12
 8001aa0:	0d52      	lsrs	r2, r2, #21
 8001aa2:	0a5b      	lsrs	r3, r3, #9
 8001aa4:	4690      	mov	r8, r2
 8001aa6:	0f42      	lsrs	r2, r0, #29
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	0fcd      	lsrs	r5, r1, #31
 8001aac:	4ccd      	ldr	r4, [pc, #820]	; (8001de4 <__aeabi_dsub+0x358>)
 8001aae:	0331      	lsls	r1, r6, #12
 8001ab0:	00c3      	lsls	r3, r0, #3
 8001ab2:	4694      	mov	ip, r2
 8001ab4:	0070      	lsls	r0, r6, #1
 8001ab6:	0f7a      	lsrs	r2, r7, #29
 8001ab8:	0a49      	lsrs	r1, r1, #9
 8001aba:	00ff      	lsls	r7, r7, #3
 8001abc:	469a      	mov	sl, r3
 8001abe:	46b9      	mov	r9, r7
 8001ac0:	0d40      	lsrs	r0, r0, #21
 8001ac2:	0ff6      	lsrs	r6, r6, #31
 8001ac4:	4311      	orrs	r1, r2
 8001ac6:	42a0      	cmp	r0, r4
 8001ac8:	d100      	bne.n	8001acc <__aeabi_dsub+0x40>
 8001aca:	e0b1      	b.n	8001c30 <__aeabi_dsub+0x1a4>
 8001acc:	2201      	movs	r2, #1
 8001ace:	4056      	eors	r6, r2
 8001ad0:	46b3      	mov	fp, r6
 8001ad2:	42b5      	cmp	r5, r6
 8001ad4:	d100      	bne.n	8001ad8 <__aeabi_dsub+0x4c>
 8001ad6:	e088      	b.n	8001bea <__aeabi_dsub+0x15e>
 8001ad8:	4642      	mov	r2, r8
 8001ada:	1a12      	subs	r2, r2, r0
 8001adc:	2a00      	cmp	r2, #0
 8001ade:	dc00      	bgt.n	8001ae2 <__aeabi_dsub+0x56>
 8001ae0:	e0ae      	b.n	8001c40 <__aeabi_dsub+0x1b4>
 8001ae2:	2800      	cmp	r0, #0
 8001ae4:	d100      	bne.n	8001ae8 <__aeabi_dsub+0x5c>
 8001ae6:	e0c1      	b.n	8001c6c <__aeabi_dsub+0x1e0>
 8001ae8:	48be      	ldr	r0, [pc, #760]	; (8001de4 <__aeabi_dsub+0x358>)
 8001aea:	4580      	cmp	r8, r0
 8001aec:	d100      	bne.n	8001af0 <__aeabi_dsub+0x64>
 8001aee:	e151      	b.n	8001d94 <__aeabi_dsub+0x308>
 8001af0:	2080      	movs	r0, #128	; 0x80
 8001af2:	0400      	lsls	r0, r0, #16
 8001af4:	4301      	orrs	r1, r0
 8001af6:	2a38      	cmp	r2, #56	; 0x38
 8001af8:	dd00      	ble.n	8001afc <__aeabi_dsub+0x70>
 8001afa:	e17b      	b.n	8001df4 <__aeabi_dsub+0x368>
 8001afc:	2a1f      	cmp	r2, #31
 8001afe:	dd00      	ble.n	8001b02 <__aeabi_dsub+0x76>
 8001b00:	e1ee      	b.n	8001ee0 <__aeabi_dsub+0x454>
 8001b02:	2020      	movs	r0, #32
 8001b04:	003e      	movs	r6, r7
 8001b06:	1a80      	subs	r0, r0, r2
 8001b08:	000c      	movs	r4, r1
 8001b0a:	40d6      	lsrs	r6, r2
 8001b0c:	40d1      	lsrs	r1, r2
 8001b0e:	4087      	lsls	r7, r0
 8001b10:	4662      	mov	r2, ip
 8001b12:	4084      	lsls	r4, r0
 8001b14:	1a52      	subs	r2, r2, r1
 8001b16:	1e78      	subs	r0, r7, #1
 8001b18:	4187      	sbcs	r7, r0
 8001b1a:	4694      	mov	ip, r2
 8001b1c:	4334      	orrs	r4, r6
 8001b1e:	4327      	orrs	r7, r4
 8001b20:	1bdc      	subs	r4, r3, r7
 8001b22:	42a3      	cmp	r3, r4
 8001b24:	419b      	sbcs	r3, r3
 8001b26:	4662      	mov	r2, ip
 8001b28:	425b      	negs	r3, r3
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	4699      	mov	r9, r3
 8001b2e:	464b      	mov	r3, r9
 8001b30:	021b      	lsls	r3, r3, #8
 8001b32:	d400      	bmi.n	8001b36 <__aeabi_dsub+0xaa>
 8001b34:	e118      	b.n	8001d68 <__aeabi_dsub+0x2dc>
 8001b36:	464b      	mov	r3, r9
 8001b38:	0258      	lsls	r0, r3, #9
 8001b3a:	0a43      	lsrs	r3, r0, #9
 8001b3c:	4699      	mov	r9, r3
 8001b3e:	464b      	mov	r3, r9
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d100      	bne.n	8001b46 <__aeabi_dsub+0xba>
 8001b44:	e137      	b.n	8001db6 <__aeabi_dsub+0x32a>
 8001b46:	4648      	mov	r0, r9
 8001b48:	f000 fc3c 	bl	80023c4 <__clzsi2>
 8001b4c:	0001      	movs	r1, r0
 8001b4e:	3908      	subs	r1, #8
 8001b50:	2320      	movs	r3, #32
 8001b52:	0022      	movs	r2, r4
 8001b54:	4648      	mov	r0, r9
 8001b56:	1a5b      	subs	r3, r3, r1
 8001b58:	40da      	lsrs	r2, r3
 8001b5a:	4088      	lsls	r0, r1
 8001b5c:	408c      	lsls	r4, r1
 8001b5e:	4643      	mov	r3, r8
 8001b60:	4310      	orrs	r0, r2
 8001b62:	4588      	cmp	r8, r1
 8001b64:	dd00      	ble.n	8001b68 <__aeabi_dsub+0xdc>
 8001b66:	e136      	b.n	8001dd6 <__aeabi_dsub+0x34a>
 8001b68:	1ac9      	subs	r1, r1, r3
 8001b6a:	1c4b      	adds	r3, r1, #1
 8001b6c:	2b1f      	cmp	r3, #31
 8001b6e:	dd00      	ble.n	8001b72 <__aeabi_dsub+0xe6>
 8001b70:	e0ea      	b.n	8001d48 <__aeabi_dsub+0x2bc>
 8001b72:	2220      	movs	r2, #32
 8001b74:	0026      	movs	r6, r4
 8001b76:	1ad2      	subs	r2, r2, r3
 8001b78:	0001      	movs	r1, r0
 8001b7a:	4094      	lsls	r4, r2
 8001b7c:	40de      	lsrs	r6, r3
 8001b7e:	40d8      	lsrs	r0, r3
 8001b80:	2300      	movs	r3, #0
 8001b82:	4091      	lsls	r1, r2
 8001b84:	1e62      	subs	r2, r4, #1
 8001b86:	4194      	sbcs	r4, r2
 8001b88:	4681      	mov	r9, r0
 8001b8a:	4698      	mov	r8, r3
 8001b8c:	4331      	orrs	r1, r6
 8001b8e:	430c      	orrs	r4, r1
 8001b90:	0763      	lsls	r3, r4, #29
 8001b92:	d009      	beq.n	8001ba8 <__aeabi_dsub+0x11c>
 8001b94:	230f      	movs	r3, #15
 8001b96:	4023      	ands	r3, r4
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	d005      	beq.n	8001ba8 <__aeabi_dsub+0x11c>
 8001b9c:	1d23      	adds	r3, r4, #4
 8001b9e:	42a3      	cmp	r3, r4
 8001ba0:	41a4      	sbcs	r4, r4
 8001ba2:	4264      	negs	r4, r4
 8001ba4:	44a1      	add	r9, r4
 8001ba6:	001c      	movs	r4, r3
 8001ba8:	464b      	mov	r3, r9
 8001baa:	021b      	lsls	r3, r3, #8
 8001bac:	d400      	bmi.n	8001bb0 <__aeabi_dsub+0x124>
 8001bae:	e0de      	b.n	8001d6e <__aeabi_dsub+0x2e2>
 8001bb0:	4641      	mov	r1, r8
 8001bb2:	4b8c      	ldr	r3, [pc, #560]	; (8001de4 <__aeabi_dsub+0x358>)
 8001bb4:	3101      	adds	r1, #1
 8001bb6:	4299      	cmp	r1, r3
 8001bb8:	d100      	bne.n	8001bbc <__aeabi_dsub+0x130>
 8001bba:	e0e7      	b.n	8001d8c <__aeabi_dsub+0x300>
 8001bbc:	464b      	mov	r3, r9
 8001bbe:	488a      	ldr	r0, [pc, #552]	; (8001de8 <__aeabi_dsub+0x35c>)
 8001bc0:	08e4      	lsrs	r4, r4, #3
 8001bc2:	4003      	ands	r3, r0
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	0549      	lsls	r1, r1, #21
 8001bc8:	075b      	lsls	r3, r3, #29
 8001bca:	0240      	lsls	r0, r0, #9
 8001bcc:	4323      	orrs	r3, r4
 8001bce:	0d4a      	lsrs	r2, r1, #21
 8001bd0:	0b04      	lsrs	r4, r0, #12
 8001bd2:	0512      	lsls	r2, r2, #20
 8001bd4:	07ed      	lsls	r5, r5, #31
 8001bd6:	4322      	orrs	r2, r4
 8001bd8:	432a      	orrs	r2, r5
 8001bda:	0018      	movs	r0, r3
 8001bdc:	0011      	movs	r1, r2
 8001bde:	bcf0      	pop	{r4, r5, r6, r7}
 8001be0:	46bb      	mov	fp, r7
 8001be2:	46b2      	mov	sl, r6
 8001be4:	46a9      	mov	r9, r5
 8001be6:	46a0      	mov	r8, r4
 8001be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bea:	4642      	mov	r2, r8
 8001bec:	1a12      	subs	r2, r2, r0
 8001bee:	2a00      	cmp	r2, #0
 8001bf0:	dd52      	ble.n	8001c98 <__aeabi_dsub+0x20c>
 8001bf2:	2800      	cmp	r0, #0
 8001bf4:	d100      	bne.n	8001bf8 <__aeabi_dsub+0x16c>
 8001bf6:	e09c      	b.n	8001d32 <__aeabi_dsub+0x2a6>
 8001bf8:	45a0      	cmp	r8, r4
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dsub+0x172>
 8001bfc:	e0ca      	b.n	8001d94 <__aeabi_dsub+0x308>
 8001bfe:	2080      	movs	r0, #128	; 0x80
 8001c00:	0400      	lsls	r0, r0, #16
 8001c02:	4301      	orrs	r1, r0
 8001c04:	2a38      	cmp	r2, #56	; 0x38
 8001c06:	dd00      	ble.n	8001c0a <__aeabi_dsub+0x17e>
 8001c08:	e149      	b.n	8001e9e <__aeabi_dsub+0x412>
 8001c0a:	2a1f      	cmp	r2, #31
 8001c0c:	dc00      	bgt.n	8001c10 <__aeabi_dsub+0x184>
 8001c0e:	e197      	b.n	8001f40 <__aeabi_dsub+0x4b4>
 8001c10:	0010      	movs	r0, r2
 8001c12:	000e      	movs	r6, r1
 8001c14:	3820      	subs	r0, #32
 8001c16:	40c6      	lsrs	r6, r0
 8001c18:	2a20      	cmp	r2, #32
 8001c1a:	d004      	beq.n	8001c26 <__aeabi_dsub+0x19a>
 8001c1c:	2040      	movs	r0, #64	; 0x40
 8001c1e:	1a82      	subs	r2, r0, r2
 8001c20:	4091      	lsls	r1, r2
 8001c22:	430f      	orrs	r7, r1
 8001c24:	46b9      	mov	r9, r7
 8001c26:	464c      	mov	r4, r9
 8001c28:	1e62      	subs	r2, r4, #1
 8001c2a:	4194      	sbcs	r4, r2
 8001c2c:	4334      	orrs	r4, r6
 8001c2e:	e13a      	b.n	8001ea6 <__aeabi_dsub+0x41a>
 8001c30:	000a      	movs	r2, r1
 8001c32:	433a      	orrs	r2, r7
 8001c34:	d028      	beq.n	8001c88 <__aeabi_dsub+0x1fc>
 8001c36:	46b3      	mov	fp, r6
 8001c38:	42b5      	cmp	r5, r6
 8001c3a:	d02b      	beq.n	8001c94 <__aeabi_dsub+0x208>
 8001c3c:	4a6b      	ldr	r2, [pc, #428]	; (8001dec <__aeabi_dsub+0x360>)
 8001c3e:	4442      	add	r2, r8
 8001c40:	2a00      	cmp	r2, #0
 8001c42:	d05d      	beq.n	8001d00 <__aeabi_dsub+0x274>
 8001c44:	4642      	mov	r2, r8
 8001c46:	4644      	mov	r4, r8
 8001c48:	1a82      	subs	r2, r0, r2
 8001c4a:	2c00      	cmp	r4, #0
 8001c4c:	d000      	beq.n	8001c50 <__aeabi_dsub+0x1c4>
 8001c4e:	e0f5      	b.n	8001e3c <__aeabi_dsub+0x3b0>
 8001c50:	4665      	mov	r5, ip
 8001c52:	431d      	orrs	r5, r3
 8001c54:	d100      	bne.n	8001c58 <__aeabi_dsub+0x1cc>
 8001c56:	e19c      	b.n	8001f92 <__aeabi_dsub+0x506>
 8001c58:	1e55      	subs	r5, r2, #1
 8001c5a:	2a01      	cmp	r2, #1
 8001c5c:	d100      	bne.n	8001c60 <__aeabi_dsub+0x1d4>
 8001c5e:	e1fb      	b.n	8002058 <__aeabi_dsub+0x5cc>
 8001c60:	4c60      	ldr	r4, [pc, #384]	; (8001de4 <__aeabi_dsub+0x358>)
 8001c62:	42a2      	cmp	r2, r4
 8001c64:	d100      	bne.n	8001c68 <__aeabi_dsub+0x1dc>
 8001c66:	e1bd      	b.n	8001fe4 <__aeabi_dsub+0x558>
 8001c68:	002a      	movs	r2, r5
 8001c6a:	e0f0      	b.n	8001e4e <__aeabi_dsub+0x3c2>
 8001c6c:	0008      	movs	r0, r1
 8001c6e:	4338      	orrs	r0, r7
 8001c70:	d100      	bne.n	8001c74 <__aeabi_dsub+0x1e8>
 8001c72:	e0c3      	b.n	8001dfc <__aeabi_dsub+0x370>
 8001c74:	1e50      	subs	r0, r2, #1
 8001c76:	2a01      	cmp	r2, #1
 8001c78:	d100      	bne.n	8001c7c <__aeabi_dsub+0x1f0>
 8001c7a:	e1a8      	b.n	8001fce <__aeabi_dsub+0x542>
 8001c7c:	4c59      	ldr	r4, [pc, #356]	; (8001de4 <__aeabi_dsub+0x358>)
 8001c7e:	42a2      	cmp	r2, r4
 8001c80:	d100      	bne.n	8001c84 <__aeabi_dsub+0x1f8>
 8001c82:	e087      	b.n	8001d94 <__aeabi_dsub+0x308>
 8001c84:	0002      	movs	r2, r0
 8001c86:	e736      	b.n	8001af6 <__aeabi_dsub+0x6a>
 8001c88:	2201      	movs	r2, #1
 8001c8a:	4056      	eors	r6, r2
 8001c8c:	46b3      	mov	fp, r6
 8001c8e:	42b5      	cmp	r5, r6
 8001c90:	d000      	beq.n	8001c94 <__aeabi_dsub+0x208>
 8001c92:	e721      	b.n	8001ad8 <__aeabi_dsub+0x4c>
 8001c94:	4a55      	ldr	r2, [pc, #340]	; (8001dec <__aeabi_dsub+0x360>)
 8001c96:	4442      	add	r2, r8
 8001c98:	2a00      	cmp	r2, #0
 8001c9a:	d100      	bne.n	8001c9e <__aeabi_dsub+0x212>
 8001c9c:	e0b5      	b.n	8001e0a <__aeabi_dsub+0x37e>
 8001c9e:	4642      	mov	r2, r8
 8001ca0:	4644      	mov	r4, r8
 8001ca2:	1a82      	subs	r2, r0, r2
 8001ca4:	2c00      	cmp	r4, #0
 8001ca6:	d100      	bne.n	8001caa <__aeabi_dsub+0x21e>
 8001ca8:	e138      	b.n	8001f1c <__aeabi_dsub+0x490>
 8001caa:	4e4e      	ldr	r6, [pc, #312]	; (8001de4 <__aeabi_dsub+0x358>)
 8001cac:	42b0      	cmp	r0, r6
 8001cae:	d100      	bne.n	8001cb2 <__aeabi_dsub+0x226>
 8001cb0:	e1de      	b.n	8002070 <__aeabi_dsub+0x5e4>
 8001cb2:	2680      	movs	r6, #128	; 0x80
 8001cb4:	4664      	mov	r4, ip
 8001cb6:	0436      	lsls	r6, r6, #16
 8001cb8:	4334      	orrs	r4, r6
 8001cba:	46a4      	mov	ip, r4
 8001cbc:	2a38      	cmp	r2, #56	; 0x38
 8001cbe:	dd00      	ble.n	8001cc2 <__aeabi_dsub+0x236>
 8001cc0:	e196      	b.n	8001ff0 <__aeabi_dsub+0x564>
 8001cc2:	2a1f      	cmp	r2, #31
 8001cc4:	dd00      	ble.n	8001cc8 <__aeabi_dsub+0x23c>
 8001cc6:	e224      	b.n	8002112 <__aeabi_dsub+0x686>
 8001cc8:	2620      	movs	r6, #32
 8001cca:	1ab4      	subs	r4, r6, r2
 8001ccc:	46a2      	mov	sl, r4
 8001cce:	4664      	mov	r4, ip
 8001cd0:	4656      	mov	r6, sl
 8001cd2:	40b4      	lsls	r4, r6
 8001cd4:	46a1      	mov	r9, r4
 8001cd6:	001c      	movs	r4, r3
 8001cd8:	464e      	mov	r6, r9
 8001cda:	40d4      	lsrs	r4, r2
 8001cdc:	4326      	orrs	r6, r4
 8001cde:	0034      	movs	r4, r6
 8001ce0:	4656      	mov	r6, sl
 8001ce2:	40b3      	lsls	r3, r6
 8001ce4:	1e5e      	subs	r6, r3, #1
 8001ce6:	41b3      	sbcs	r3, r6
 8001ce8:	431c      	orrs	r4, r3
 8001cea:	4663      	mov	r3, ip
 8001cec:	40d3      	lsrs	r3, r2
 8001cee:	18c9      	adds	r1, r1, r3
 8001cf0:	19e4      	adds	r4, r4, r7
 8001cf2:	42bc      	cmp	r4, r7
 8001cf4:	41bf      	sbcs	r7, r7
 8001cf6:	427f      	negs	r7, r7
 8001cf8:	46b9      	mov	r9, r7
 8001cfa:	4680      	mov	r8, r0
 8001cfc:	4489      	add	r9, r1
 8001cfe:	e0d8      	b.n	8001eb2 <__aeabi_dsub+0x426>
 8001d00:	4640      	mov	r0, r8
 8001d02:	4c3b      	ldr	r4, [pc, #236]	; (8001df0 <__aeabi_dsub+0x364>)
 8001d04:	3001      	adds	r0, #1
 8001d06:	4220      	tst	r0, r4
 8001d08:	d000      	beq.n	8001d0c <__aeabi_dsub+0x280>
 8001d0a:	e0b4      	b.n	8001e76 <__aeabi_dsub+0x3ea>
 8001d0c:	4640      	mov	r0, r8
 8001d0e:	2800      	cmp	r0, #0
 8001d10:	d000      	beq.n	8001d14 <__aeabi_dsub+0x288>
 8001d12:	e144      	b.n	8001f9e <__aeabi_dsub+0x512>
 8001d14:	4660      	mov	r0, ip
 8001d16:	4318      	orrs	r0, r3
 8001d18:	d100      	bne.n	8001d1c <__aeabi_dsub+0x290>
 8001d1a:	e190      	b.n	800203e <__aeabi_dsub+0x5b2>
 8001d1c:	0008      	movs	r0, r1
 8001d1e:	4338      	orrs	r0, r7
 8001d20:	d000      	beq.n	8001d24 <__aeabi_dsub+0x298>
 8001d22:	e1aa      	b.n	800207a <__aeabi_dsub+0x5ee>
 8001d24:	4661      	mov	r1, ip
 8001d26:	08db      	lsrs	r3, r3, #3
 8001d28:	0749      	lsls	r1, r1, #29
 8001d2a:	430b      	orrs	r3, r1
 8001d2c:	4661      	mov	r1, ip
 8001d2e:	08cc      	lsrs	r4, r1, #3
 8001d30:	e027      	b.n	8001d82 <__aeabi_dsub+0x2f6>
 8001d32:	0008      	movs	r0, r1
 8001d34:	4338      	orrs	r0, r7
 8001d36:	d061      	beq.n	8001dfc <__aeabi_dsub+0x370>
 8001d38:	1e50      	subs	r0, r2, #1
 8001d3a:	2a01      	cmp	r2, #1
 8001d3c:	d100      	bne.n	8001d40 <__aeabi_dsub+0x2b4>
 8001d3e:	e139      	b.n	8001fb4 <__aeabi_dsub+0x528>
 8001d40:	42a2      	cmp	r2, r4
 8001d42:	d027      	beq.n	8001d94 <__aeabi_dsub+0x308>
 8001d44:	0002      	movs	r2, r0
 8001d46:	e75d      	b.n	8001c04 <__aeabi_dsub+0x178>
 8001d48:	0002      	movs	r2, r0
 8001d4a:	391f      	subs	r1, #31
 8001d4c:	40ca      	lsrs	r2, r1
 8001d4e:	0011      	movs	r1, r2
 8001d50:	2b20      	cmp	r3, #32
 8001d52:	d003      	beq.n	8001d5c <__aeabi_dsub+0x2d0>
 8001d54:	2240      	movs	r2, #64	; 0x40
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	4098      	lsls	r0, r3
 8001d5a:	4304      	orrs	r4, r0
 8001d5c:	1e63      	subs	r3, r4, #1
 8001d5e:	419c      	sbcs	r4, r3
 8001d60:	2300      	movs	r3, #0
 8001d62:	4699      	mov	r9, r3
 8001d64:	4698      	mov	r8, r3
 8001d66:	430c      	orrs	r4, r1
 8001d68:	0763      	lsls	r3, r4, #29
 8001d6a:	d000      	beq.n	8001d6e <__aeabi_dsub+0x2e2>
 8001d6c:	e712      	b.n	8001b94 <__aeabi_dsub+0x108>
 8001d6e:	464b      	mov	r3, r9
 8001d70:	464a      	mov	r2, r9
 8001d72:	08e4      	lsrs	r4, r4, #3
 8001d74:	075b      	lsls	r3, r3, #29
 8001d76:	4323      	orrs	r3, r4
 8001d78:	08d4      	lsrs	r4, r2, #3
 8001d7a:	4642      	mov	r2, r8
 8001d7c:	4919      	ldr	r1, [pc, #100]	; (8001de4 <__aeabi_dsub+0x358>)
 8001d7e:	428a      	cmp	r2, r1
 8001d80:	d00e      	beq.n	8001da0 <__aeabi_dsub+0x314>
 8001d82:	0324      	lsls	r4, r4, #12
 8001d84:	0552      	lsls	r2, r2, #21
 8001d86:	0b24      	lsrs	r4, r4, #12
 8001d88:	0d52      	lsrs	r2, r2, #21
 8001d8a:	e722      	b.n	8001bd2 <__aeabi_dsub+0x146>
 8001d8c:	000a      	movs	r2, r1
 8001d8e:	2400      	movs	r4, #0
 8001d90:	2300      	movs	r3, #0
 8001d92:	e71e      	b.n	8001bd2 <__aeabi_dsub+0x146>
 8001d94:	08db      	lsrs	r3, r3, #3
 8001d96:	4662      	mov	r2, ip
 8001d98:	0752      	lsls	r2, r2, #29
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	4662      	mov	r2, ip
 8001d9e:	08d4      	lsrs	r4, r2, #3
 8001da0:	001a      	movs	r2, r3
 8001da2:	4322      	orrs	r2, r4
 8001da4:	d100      	bne.n	8001da8 <__aeabi_dsub+0x31c>
 8001da6:	e1fc      	b.n	80021a2 <__aeabi_dsub+0x716>
 8001da8:	2280      	movs	r2, #128	; 0x80
 8001daa:	0312      	lsls	r2, r2, #12
 8001dac:	4314      	orrs	r4, r2
 8001dae:	0324      	lsls	r4, r4, #12
 8001db0:	4a0c      	ldr	r2, [pc, #48]	; (8001de4 <__aeabi_dsub+0x358>)
 8001db2:	0b24      	lsrs	r4, r4, #12
 8001db4:	e70d      	b.n	8001bd2 <__aeabi_dsub+0x146>
 8001db6:	0020      	movs	r0, r4
 8001db8:	f000 fb04 	bl	80023c4 <__clzsi2>
 8001dbc:	0001      	movs	r1, r0
 8001dbe:	3118      	adds	r1, #24
 8001dc0:	291f      	cmp	r1, #31
 8001dc2:	dc00      	bgt.n	8001dc6 <__aeabi_dsub+0x33a>
 8001dc4:	e6c4      	b.n	8001b50 <__aeabi_dsub+0xc4>
 8001dc6:	3808      	subs	r0, #8
 8001dc8:	4084      	lsls	r4, r0
 8001dca:	4643      	mov	r3, r8
 8001dcc:	0020      	movs	r0, r4
 8001dce:	2400      	movs	r4, #0
 8001dd0:	4588      	cmp	r8, r1
 8001dd2:	dc00      	bgt.n	8001dd6 <__aeabi_dsub+0x34a>
 8001dd4:	e6c8      	b.n	8001b68 <__aeabi_dsub+0xdc>
 8001dd6:	4a04      	ldr	r2, [pc, #16]	; (8001de8 <__aeabi_dsub+0x35c>)
 8001dd8:	1a5b      	subs	r3, r3, r1
 8001dda:	4010      	ands	r0, r2
 8001ddc:	4698      	mov	r8, r3
 8001dde:	4681      	mov	r9, r0
 8001de0:	e6d6      	b.n	8001b90 <__aeabi_dsub+0x104>
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	000007ff 	.word	0x000007ff
 8001de8:	ff7fffff 	.word	0xff7fffff
 8001dec:	fffff801 	.word	0xfffff801
 8001df0:	000007fe 	.word	0x000007fe
 8001df4:	430f      	orrs	r7, r1
 8001df6:	1e7a      	subs	r2, r7, #1
 8001df8:	4197      	sbcs	r7, r2
 8001dfa:	e691      	b.n	8001b20 <__aeabi_dsub+0x94>
 8001dfc:	4661      	mov	r1, ip
 8001dfe:	08db      	lsrs	r3, r3, #3
 8001e00:	0749      	lsls	r1, r1, #29
 8001e02:	430b      	orrs	r3, r1
 8001e04:	4661      	mov	r1, ip
 8001e06:	08cc      	lsrs	r4, r1, #3
 8001e08:	e7b8      	b.n	8001d7c <__aeabi_dsub+0x2f0>
 8001e0a:	4640      	mov	r0, r8
 8001e0c:	4cd3      	ldr	r4, [pc, #844]	; (800215c <__aeabi_dsub+0x6d0>)
 8001e0e:	3001      	adds	r0, #1
 8001e10:	4220      	tst	r0, r4
 8001e12:	d000      	beq.n	8001e16 <__aeabi_dsub+0x38a>
 8001e14:	e0a2      	b.n	8001f5c <__aeabi_dsub+0x4d0>
 8001e16:	4640      	mov	r0, r8
 8001e18:	2800      	cmp	r0, #0
 8001e1a:	d000      	beq.n	8001e1e <__aeabi_dsub+0x392>
 8001e1c:	e101      	b.n	8002022 <__aeabi_dsub+0x596>
 8001e1e:	4660      	mov	r0, ip
 8001e20:	4318      	orrs	r0, r3
 8001e22:	d100      	bne.n	8001e26 <__aeabi_dsub+0x39a>
 8001e24:	e15e      	b.n	80020e4 <__aeabi_dsub+0x658>
 8001e26:	0008      	movs	r0, r1
 8001e28:	4338      	orrs	r0, r7
 8001e2a:	d000      	beq.n	8001e2e <__aeabi_dsub+0x3a2>
 8001e2c:	e15f      	b.n	80020ee <__aeabi_dsub+0x662>
 8001e2e:	4661      	mov	r1, ip
 8001e30:	08db      	lsrs	r3, r3, #3
 8001e32:	0749      	lsls	r1, r1, #29
 8001e34:	430b      	orrs	r3, r1
 8001e36:	4661      	mov	r1, ip
 8001e38:	08cc      	lsrs	r4, r1, #3
 8001e3a:	e7a2      	b.n	8001d82 <__aeabi_dsub+0x2f6>
 8001e3c:	4dc8      	ldr	r5, [pc, #800]	; (8002160 <__aeabi_dsub+0x6d4>)
 8001e3e:	42a8      	cmp	r0, r5
 8001e40:	d100      	bne.n	8001e44 <__aeabi_dsub+0x3b8>
 8001e42:	e0cf      	b.n	8001fe4 <__aeabi_dsub+0x558>
 8001e44:	2580      	movs	r5, #128	; 0x80
 8001e46:	4664      	mov	r4, ip
 8001e48:	042d      	lsls	r5, r5, #16
 8001e4a:	432c      	orrs	r4, r5
 8001e4c:	46a4      	mov	ip, r4
 8001e4e:	2a38      	cmp	r2, #56	; 0x38
 8001e50:	dc56      	bgt.n	8001f00 <__aeabi_dsub+0x474>
 8001e52:	2a1f      	cmp	r2, #31
 8001e54:	dd00      	ble.n	8001e58 <__aeabi_dsub+0x3cc>
 8001e56:	e0d1      	b.n	8001ffc <__aeabi_dsub+0x570>
 8001e58:	2520      	movs	r5, #32
 8001e5a:	001e      	movs	r6, r3
 8001e5c:	1aad      	subs	r5, r5, r2
 8001e5e:	4664      	mov	r4, ip
 8001e60:	40ab      	lsls	r3, r5
 8001e62:	40ac      	lsls	r4, r5
 8001e64:	40d6      	lsrs	r6, r2
 8001e66:	1e5d      	subs	r5, r3, #1
 8001e68:	41ab      	sbcs	r3, r5
 8001e6a:	4334      	orrs	r4, r6
 8001e6c:	4323      	orrs	r3, r4
 8001e6e:	4664      	mov	r4, ip
 8001e70:	40d4      	lsrs	r4, r2
 8001e72:	1b09      	subs	r1, r1, r4
 8001e74:	e049      	b.n	8001f0a <__aeabi_dsub+0x47e>
 8001e76:	4660      	mov	r0, ip
 8001e78:	1bdc      	subs	r4, r3, r7
 8001e7a:	1a46      	subs	r6, r0, r1
 8001e7c:	42a3      	cmp	r3, r4
 8001e7e:	4180      	sbcs	r0, r0
 8001e80:	4240      	negs	r0, r0
 8001e82:	4681      	mov	r9, r0
 8001e84:	0030      	movs	r0, r6
 8001e86:	464e      	mov	r6, r9
 8001e88:	1b80      	subs	r0, r0, r6
 8001e8a:	4681      	mov	r9, r0
 8001e8c:	0200      	lsls	r0, r0, #8
 8001e8e:	d476      	bmi.n	8001f7e <__aeabi_dsub+0x4f2>
 8001e90:	464b      	mov	r3, r9
 8001e92:	4323      	orrs	r3, r4
 8001e94:	d000      	beq.n	8001e98 <__aeabi_dsub+0x40c>
 8001e96:	e652      	b.n	8001b3e <__aeabi_dsub+0xb2>
 8001e98:	2400      	movs	r4, #0
 8001e9a:	2500      	movs	r5, #0
 8001e9c:	e771      	b.n	8001d82 <__aeabi_dsub+0x2f6>
 8001e9e:	4339      	orrs	r1, r7
 8001ea0:	000c      	movs	r4, r1
 8001ea2:	1e62      	subs	r2, r4, #1
 8001ea4:	4194      	sbcs	r4, r2
 8001ea6:	18e4      	adds	r4, r4, r3
 8001ea8:	429c      	cmp	r4, r3
 8001eaa:	419b      	sbcs	r3, r3
 8001eac:	425b      	negs	r3, r3
 8001eae:	4463      	add	r3, ip
 8001eb0:	4699      	mov	r9, r3
 8001eb2:	464b      	mov	r3, r9
 8001eb4:	021b      	lsls	r3, r3, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x42e>
 8001eb8:	e756      	b.n	8001d68 <__aeabi_dsub+0x2dc>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	469c      	mov	ip, r3
 8001ebe:	4ba8      	ldr	r3, [pc, #672]	; (8002160 <__aeabi_dsub+0x6d4>)
 8001ec0:	44e0      	add	r8, ip
 8001ec2:	4598      	cmp	r8, r3
 8001ec4:	d038      	beq.n	8001f38 <__aeabi_dsub+0x4ac>
 8001ec6:	464b      	mov	r3, r9
 8001ec8:	48a6      	ldr	r0, [pc, #664]	; (8002164 <__aeabi_dsub+0x6d8>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	4003      	ands	r3, r0
 8001ece:	0018      	movs	r0, r3
 8001ed0:	0863      	lsrs	r3, r4, #1
 8001ed2:	4014      	ands	r4, r2
 8001ed4:	431c      	orrs	r4, r3
 8001ed6:	07c3      	lsls	r3, r0, #31
 8001ed8:	431c      	orrs	r4, r3
 8001eda:	0843      	lsrs	r3, r0, #1
 8001edc:	4699      	mov	r9, r3
 8001ede:	e657      	b.n	8001b90 <__aeabi_dsub+0x104>
 8001ee0:	0010      	movs	r0, r2
 8001ee2:	000e      	movs	r6, r1
 8001ee4:	3820      	subs	r0, #32
 8001ee6:	40c6      	lsrs	r6, r0
 8001ee8:	2a20      	cmp	r2, #32
 8001eea:	d004      	beq.n	8001ef6 <__aeabi_dsub+0x46a>
 8001eec:	2040      	movs	r0, #64	; 0x40
 8001eee:	1a82      	subs	r2, r0, r2
 8001ef0:	4091      	lsls	r1, r2
 8001ef2:	430f      	orrs	r7, r1
 8001ef4:	46b9      	mov	r9, r7
 8001ef6:	464f      	mov	r7, r9
 8001ef8:	1e7a      	subs	r2, r7, #1
 8001efa:	4197      	sbcs	r7, r2
 8001efc:	4337      	orrs	r7, r6
 8001efe:	e60f      	b.n	8001b20 <__aeabi_dsub+0x94>
 8001f00:	4662      	mov	r2, ip
 8001f02:	431a      	orrs	r2, r3
 8001f04:	0013      	movs	r3, r2
 8001f06:	1e5a      	subs	r2, r3, #1
 8001f08:	4193      	sbcs	r3, r2
 8001f0a:	1afc      	subs	r4, r7, r3
 8001f0c:	42a7      	cmp	r7, r4
 8001f0e:	41bf      	sbcs	r7, r7
 8001f10:	427f      	negs	r7, r7
 8001f12:	1bcb      	subs	r3, r1, r7
 8001f14:	4699      	mov	r9, r3
 8001f16:	465d      	mov	r5, fp
 8001f18:	4680      	mov	r8, r0
 8001f1a:	e608      	b.n	8001b2e <__aeabi_dsub+0xa2>
 8001f1c:	4666      	mov	r6, ip
 8001f1e:	431e      	orrs	r6, r3
 8001f20:	d100      	bne.n	8001f24 <__aeabi_dsub+0x498>
 8001f22:	e0be      	b.n	80020a2 <__aeabi_dsub+0x616>
 8001f24:	1e56      	subs	r6, r2, #1
 8001f26:	2a01      	cmp	r2, #1
 8001f28:	d100      	bne.n	8001f2c <__aeabi_dsub+0x4a0>
 8001f2a:	e109      	b.n	8002140 <__aeabi_dsub+0x6b4>
 8001f2c:	4c8c      	ldr	r4, [pc, #560]	; (8002160 <__aeabi_dsub+0x6d4>)
 8001f2e:	42a2      	cmp	r2, r4
 8001f30:	d100      	bne.n	8001f34 <__aeabi_dsub+0x4a8>
 8001f32:	e119      	b.n	8002168 <__aeabi_dsub+0x6dc>
 8001f34:	0032      	movs	r2, r6
 8001f36:	e6c1      	b.n	8001cbc <__aeabi_dsub+0x230>
 8001f38:	4642      	mov	r2, r8
 8001f3a:	2400      	movs	r4, #0
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	e648      	b.n	8001bd2 <__aeabi_dsub+0x146>
 8001f40:	2020      	movs	r0, #32
 8001f42:	000c      	movs	r4, r1
 8001f44:	1a80      	subs	r0, r0, r2
 8001f46:	003e      	movs	r6, r7
 8001f48:	4087      	lsls	r7, r0
 8001f4a:	4084      	lsls	r4, r0
 8001f4c:	40d6      	lsrs	r6, r2
 8001f4e:	1e78      	subs	r0, r7, #1
 8001f50:	4187      	sbcs	r7, r0
 8001f52:	40d1      	lsrs	r1, r2
 8001f54:	4334      	orrs	r4, r6
 8001f56:	433c      	orrs	r4, r7
 8001f58:	448c      	add	ip, r1
 8001f5a:	e7a4      	b.n	8001ea6 <__aeabi_dsub+0x41a>
 8001f5c:	4a80      	ldr	r2, [pc, #512]	; (8002160 <__aeabi_dsub+0x6d4>)
 8001f5e:	4290      	cmp	r0, r2
 8001f60:	d100      	bne.n	8001f64 <__aeabi_dsub+0x4d8>
 8001f62:	e0e9      	b.n	8002138 <__aeabi_dsub+0x6ac>
 8001f64:	19df      	adds	r7, r3, r7
 8001f66:	429f      	cmp	r7, r3
 8001f68:	419b      	sbcs	r3, r3
 8001f6a:	4461      	add	r1, ip
 8001f6c:	425b      	negs	r3, r3
 8001f6e:	18c9      	adds	r1, r1, r3
 8001f70:	07cc      	lsls	r4, r1, #31
 8001f72:	087f      	lsrs	r7, r7, #1
 8001f74:	084b      	lsrs	r3, r1, #1
 8001f76:	4699      	mov	r9, r3
 8001f78:	4680      	mov	r8, r0
 8001f7a:	433c      	orrs	r4, r7
 8001f7c:	e6f4      	b.n	8001d68 <__aeabi_dsub+0x2dc>
 8001f7e:	1afc      	subs	r4, r7, r3
 8001f80:	42a7      	cmp	r7, r4
 8001f82:	41bf      	sbcs	r7, r7
 8001f84:	4663      	mov	r3, ip
 8001f86:	427f      	negs	r7, r7
 8001f88:	1ac9      	subs	r1, r1, r3
 8001f8a:	1bcb      	subs	r3, r1, r7
 8001f8c:	4699      	mov	r9, r3
 8001f8e:	465d      	mov	r5, fp
 8001f90:	e5d5      	b.n	8001b3e <__aeabi_dsub+0xb2>
 8001f92:	08ff      	lsrs	r7, r7, #3
 8001f94:	074b      	lsls	r3, r1, #29
 8001f96:	465d      	mov	r5, fp
 8001f98:	433b      	orrs	r3, r7
 8001f9a:	08cc      	lsrs	r4, r1, #3
 8001f9c:	e6ee      	b.n	8001d7c <__aeabi_dsub+0x2f0>
 8001f9e:	4662      	mov	r2, ip
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	d000      	beq.n	8001fa6 <__aeabi_dsub+0x51a>
 8001fa4:	e082      	b.n	80020ac <__aeabi_dsub+0x620>
 8001fa6:	000b      	movs	r3, r1
 8001fa8:	433b      	orrs	r3, r7
 8001faa:	d11b      	bne.n	8001fe4 <__aeabi_dsub+0x558>
 8001fac:	2480      	movs	r4, #128	; 0x80
 8001fae:	2500      	movs	r5, #0
 8001fb0:	0324      	lsls	r4, r4, #12
 8001fb2:	e6f9      	b.n	8001da8 <__aeabi_dsub+0x31c>
 8001fb4:	19dc      	adds	r4, r3, r7
 8001fb6:	429c      	cmp	r4, r3
 8001fb8:	419b      	sbcs	r3, r3
 8001fba:	4461      	add	r1, ip
 8001fbc:	4689      	mov	r9, r1
 8001fbe:	425b      	negs	r3, r3
 8001fc0:	4499      	add	r9, r3
 8001fc2:	464b      	mov	r3, r9
 8001fc4:	021b      	lsls	r3, r3, #8
 8001fc6:	d444      	bmi.n	8002052 <__aeabi_dsub+0x5c6>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	4698      	mov	r8, r3
 8001fcc:	e6cc      	b.n	8001d68 <__aeabi_dsub+0x2dc>
 8001fce:	1bdc      	subs	r4, r3, r7
 8001fd0:	4662      	mov	r2, ip
 8001fd2:	42a3      	cmp	r3, r4
 8001fd4:	419b      	sbcs	r3, r3
 8001fd6:	1a51      	subs	r1, r2, r1
 8001fd8:	425b      	negs	r3, r3
 8001fda:	1acb      	subs	r3, r1, r3
 8001fdc:	4699      	mov	r9, r3
 8001fde:	2301      	movs	r3, #1
 8001fe0:	4698      	mov	r8, r3
 8001fe2:	e5a4      	b.n	8001b2e <__aeabi_dsub+0xa2>
 8001fe4:	08ff      	lsrs	r7, r7, #3
 8001fe6:	074b      	lsls	r3, r1, #29
 8001fe8:	465d      	mov	r5, fp
 8001fea:	433b      	orrs	r3, r7
 8001fec:	08cc      	lsrs	r4, r1, #3
 8001fee:	e6d7      	b.n	8001da0 <__aeabi_dsub+0x314>
 8001ff0:	4662      	mov	r2, ip
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	0014      	movs	r4, r2
 8001ff6:	1e63      	subs	r3, r4, #1
 8001ff8:	419c      	sbcs	r4, r3
 8001ffa:	e679      	b.n	8001cf0 <__aeabi_dsub+0x264>
 8001ffc:	0015      	movs	r5, r2
 8001ffe:	4664      	mov	r4, ip
 8002000:	3d20      	subs	r5, #32
 8002002:	40ec      	lsrs	r4, r5
 8002004:	46a0      	mov	r8, r4
 8002006:	2a20      	cmp	r2, #32
 8002008:	d005      	beq.n	8002016 <__aeabi_dsub+0x58a>
 800200a:	2540      	movs	r5, #64	; 0x40
 800200c:	4664      	mov	r4, ip
 800200e:	1aaa      	subs	r2, r5, r2
 8002010:	4094      	lsls	r4, r2
 8002012:	4323      	orrs	r3, r4
 8002014:	469a      	mov	sl, r3
 8002016:	4654      	mov	r4, sl
 8002018:	1e63      	subs	r3, r4, #1
 800201a:	419c      	sbcs	r4, r3
 800201c:	4643      	mov	r3, r8
 800201e:	4323      	orrs	r3, r4
 8002020:	e773      	b.n	8001f0a <__aeabi_dsub+0x47e>
 8002022:	4662      	mov	r2, ip
 8002024:	431a      	orrs	r2, r3
 8002026:	d023      	beq.n	8002070 <__aeabi_dsub+0x5e4>
 8002028:	000a      	movs	r2, r1
 800202a:	433a      	orrs	r2, r7
 800202c:	d000      	beq.n	8002030 <__aeabi_dsub+0x5a4>
 800202e:	e0a0      	b.n	8002172 <__aeabi_dsub+0x6e6>
 8002030:	4662      	mov	r2, ip
 8002032:	08db      	lsrs	r3, r3, #3
 8002034:	0752      	lsls	r2, r2, #29
 8002036:	4313      	orrs	r3, r2
 8002038:	4662      	mov	r2, ip
 800203a:	08d4      	lsrs	r4, r2, #3
 800203c:	e6b0      	b.n	8001da0 <__aeabi_dsub+0x314>
 800203e:	000b      	movs	r3, r1
 8002040:	433b      	orrs	r3, r7
 8002042:	d100      	bne.n	8002046 <__aeabi_dsub+0x5ba>
 8002044:	e728      	b.n	8001e98 <__aeabi_dsub+0x40c>
 8002046:	08ff      	lsrs	r7, r7, #3
 8002048:	074b      	lsls	r3, r1, #29
 800204a:	465d      	mov	r5, fp
 800204c:	433b      	orrs	r3, r7
 800204e:	08cc      	lsrs	r4, r1, #3
 8002050:	e697      	b.n	8001d82 <__aeabi_dsub+0x2f6>
 8002052:	2302      	movs	r3, #2
 8002054:	4698      	mov	r8, r3
 8002056:	e736      	b.n	8001ec6 <__aeabi_dsub+0x43a>
 8002058:	1afc      	subs	r4, r7, r3
 800205a:	42a7      	cmp	r7, r4
 800205c:	41bf      	sbcs	r7, r7
 800205e:	4663      	mov	r3, ip
 8002060:	427f      	negs	r7, r7
 8002062:	1ac9      	subs	r1, r1, r3
 8002064:	1bcb      	subs	r3, r1, r7
 8002066:	4699      	mov	r9, r3
 8002068:	2301      	movs	r3, #1
 800206a:	465d      	mov	r5, fp
 800206c:	4698      	mov	r8, r3
 800206e:	e55e      	b.n	8001b2e <__aeabi_dsub+0xa2>
 8002070:	074b      	lsls	r3, r1, #29
 8002072:	08ff      	lsrs	r7, r7, #3
 8002074:	433b      	orrs	r3, r7
 8002076:	08cc      	lsrs	r4, r1, #3
 8002078:	e692      	b.n	8001da0 <__aeabi_dsub+0x314>
 800207a:	1bdc      	subs	r4, r3, r7
 800207c:	4660      	mov	r0, ip
 800207e:	42a3      	cmp	r3, r4
 8002080:	41b6      	sbcs	r6, r6
 8002082:	1a40      	subs	r0, r0, r1
 8002084:	4276      	negs	r6, r6
 8002086:	1b80      	subs	r0, r0, r6
 8002088:	4681      	mov	r9, r0
 800208a:	0200      	lsls	r0, r0, #8
 800208c:	d560      	bpl.n	8002150 <__aeabi_dsub+0x6c4>
 800208e:	1afc      	subs	r4, r7, r3
 8002090:	42a7      	cmp	r7, r4
 8002092:	41bf      	sbcs	r7, r7
 8002094:	4663      	mov	r3, ip
 8002096:	427f      	negs	r7, r7
 8002098:	1ac9      	subs	r1, r1, r3
 800209a:	1bcb      	subs	r3, r1, r7
 800209c:	4699      	mov	r9, r3
 800209e:	465d      	mov	r5, fp
 80020a0:	e576      	b.n	8001b90 <__aeabi_dsub+0x104>
 80020a2:	08ff      	lsrs	r7, r7, #3
 80020a4:	074b      	lsls	r3, r1, #29
 80020a6:	433b      	orrs	r3, r7
 80020a8:	08cc      	lsrs	r4, r1, #3
 80020aa:	e667      	b.n	8001d7c <__aeabi_dsub+0x2f0>
 80020ac:	000a      	movs	r2, r1
 80020ae:	08db      	lsrs	r3, r3, #3
 80020b0:	433a      	orrs	r2, r7
 80020b2:	d100      	bne.n	80020b6 <__aeabi_dsub+0x62a>
 80020b4:	e66f      	b.n	8001d96 <__aeabi_dsub+0x30a>
 80020b6:	4662      	mov	r2, ip
 80020b8:	0752      	lsls	r2, r2, #29
 80020ba:	4313      	orrs	r3, r2
 80020bc:	4662      	mov	r2, ip
 80020be:	08d4      	lsrs	r4, r2, #3
 80020c0:	2280      	movs	r2, #128	; 0x80
 80020c2:	0312      	lsls	r2, r2, #12
 80020c4:	4214      	tst	r4, r2
 80020c6:	d007      	beq.n	80020d8 <__aeabi_dsub+0x64c>
 80020c8:	08c8      	lsrs	r0, r1, #3
 80020ca:	4210      	tst	r0, r2
 80020cc:	d104      	bne.n	80020d8 <__aeabi_dsub+0x64c>
 80020ce:	465d      	mov	r5, fp
 80020d0:	0004      	movs	r4, r0
 80020d2:	08fb      	lsrs	r3, r7, #3
 80020d4:	0749      	lsls	r1, r1, #29
 80020d6:	430b      	orrs	r3, r1
 80020d8:	0f5a      	lsrs	r2, r3, #29
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	08db      	lsrs	r3, r3, #3
 80020de:	0752      	lsls	r2, r2, #29
 80020e0:	4313      	orrs	r3, r2
 80020e2:	e65d      	b.n	8001da0 <__aeabi_dsub+0x314>
 80020e4:	074b      	lsls	r3, r1, #29
 80020e6:	08ff      	lsrs	r7, r7, #3
 80020e8:	433b      	orrs	r3, r7
 80020ea:	08cc      	lsrs	r4, r1, #3
 80020ec:	e649      	b.n	8001d82 <__aeabi_dsub+0x2f6>
 80020ee:	19dc      	adds	r4, r3, r7
 80020f0:	429c      	cmp	r4, r3
 80020f2:	419b      	sbcs	r3, r3
 80020f4:	4461      	add	r1, ip
 80020f6:	4689      	mov	r9, r1
 80020f8:	425b      	negs	r3, r3
 80020fa:	4499      	add	r9, r3
 80020fc:	464b      	mov	r3, r9
 80020fe:	021b      	lsls	r3, r3, #8
 8002100:	d400      	bmi.n	8002104 <__aeabi_dsub+0x678>
 8002102:	e631      	b.n	8001d68 <__aeabi_dsub+0x2dc>
 8002104:	464a      	mov	r2, r9
 8002106:	4b17      	ldr	r3, [pc, #92]	; (8002164 <__aeabi_dsub+0x6d8>)
 8002108:	401a      	ands	r2, r3
 800210a:	2301      	movs	r3, #1
 800210c:	4691      	mov	r9, r2
 800210e:	4698      	mov	r8, r3
 8002110:	e62a      	b.n	8001d68 <__aeabi_dsub+0x2dc>
 8002112:	0016      	movs	r6, r2
 8002114:	4664      	mov	r4, ip
 8002116:	3e20      	subs	r6, #32
 8002118:	40f4      	lsrs	r4, r6
 800211a:	46a0      	mov	r8, r4
 800211c:	2a20      	cmp	r2, #32
 800211e:	d005      	beq.n	800212c <__aeabi_dsub+0x6a0>
 8002120:	2640      	movs	r6, #64	; 0x40
 8002122:	4664      	mov	r4, ip
 8002124:	1ab2      	subs	r2, r6, r2
 8002126:	4094      	lsls	r4, r2
 8002128:	4323      	orrs	r3, r4
 800212a:	469a      	mov	sl, r3
 800212c:	4654      	mov	r4, sl
 800212e:	1e63      	subs	r3, r4, #1
 8002130:	419c      	sbcs	r4, r3
 8002132:	4643      	mov	r3, r8
 8002134:	431c      	orrs	r4, r3
 8002136:	e5db      	b.n	8001cf0 <__aeabi_dsub+0x264>
 8002138:	0002      	movs	r2, r0
 800213a:	2400      	movs	r4, #0
 800213c:	2300      	movs	r3, #0
 800213e:	e548      	b.n	8001bd2 <__aeabi_dsub+0x146>
 8002140:	19dc      	adds	r4, r3, r7
 8002142:	42bc      	cmp	r4, r7
 8002144:	41bf      	sbcs	r7, r7
 8002146:	4461      	add	r1, ip
 8002148:	4689      	mov	r9, r1
 800214a:	427f      	negs	r7, r7
 800214c:	44b9      	add	r9, r7
 800214e:	e738      	b.n	8001fc2 <__aeabi_dsub+0x536>
 8002150:	464b      	mov	r3, r9
 8002152:	4323      	orrs	r3, r4
 8002154:	d100      	bne.n	8002158 <__aeabi_dsub+0x6cc>
 8002156:	e69f      	b.n	8001e98 <__aeabi_dsub+0x40c>
 8002158:	e606      	b.n	8001d68 <__aeabi_dsub+0x2dc>
 800215a:	46c0      	nop			; (mov r8, r8)
 800215c:	000007fe 	.word	0x000007fe
 8002160:	000007ff 	.word	0x000007ff
 8002164:	ff7fffff 	.word	0xff7fffff
 8002168:	08ff      	lsrs	r7, r7, #3
 800216a:	074b      	lsls	r3, r1, #29
 800216c:	433b      	orrs	r3, r7
 800216e:	08cc      	lsrs	r4, r1, #3
 8002170:	e616      	b.n	8001da0 <__aeabi_dsub+0x314>
 8002172:	4662      	mov	r2, ip
 8002174:	08db      	lsrs	r3, r3, #3
 8002176:	0752      	lsls	r2, r2, #29
 8002178:	4313      	orrs	r3, r2
 800217a:	4662      	mov	r2, ip
 800217c:	08d4      	lsrs	r4, r2, #3
 800217e:	2280      	movs	r2, #128	; 0x80
 8002180:	0312      	lsls	r2, r2, #12
 8002182:	4214      	tst	r4, r2
 8002184:	d007      	beq.n	8002196 <__aeabi_dsub+0x70a>
 8002186:	08c8      	lsrs	r0, r1, #3
 8002188:	4210      	tst	r0, r2
 800218a:	d104      	bne.n	8002196 <__aeabi_dsub+0x70a>
 800218c:	465d      	mov	r5, fp
 800218e:	0004      	movs	r4, r0
 8002190:	08fb      	lsrs	r3, r7, #3
 8002192:	0749      	lsls	r1, r1, #29
 8002194:	430b      	orrs	r3, r1
 8002196:	0f5a      	lsrs	r2, r3, #29
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	0752      	lsls	r2, r2, #29
 800219c:	08db      	lsrs	r3, r3, #3
 800219e:	4313      	orrs	r3, r2
 80021a0:	e5fe      	b.n	8001da0 <__aeabi_dsub+0x314>
 80021a2:	2300      	movs	r3, #0
 80021a4:	4a01      	ldr	r2, [pc, #4]	; (80021ac <__aeabi_dsub+0x720>)
 80021a6:	001c      	movs	r4, r3
 80021a8:	e513      	b.n	8001bd2 <__aeabi_dsub+0x146>
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	000007ff 	.word	0x000007ff

080021b0 <__aeabi_f2d>:
 80021b0:	b570      	push	{r4, r5, r6, lr}
 80021b2:	0043      	lsls	r3, r0, #1
 80021b4:	0246      	lsls	r6, r0, #9
 80021b6:	0fc4      	lsrs	r4, r0, #31
 80021b8:	20fe      	movs	r0, #254	; 0xfe
 80021ba:	0e1b      	lsrs	r3, r3, #24
 80021bc:	1c59      	adds	r1, r3, #1
 80021be:	0a75      	lsrs	r5, r6, #9
 80021c0:	4208      	tst	r0, r1
 80021c2:	d00c      	beq.n	80021de <__aeabi_f2d+0x2e>
 80021c4:	22e0      	movs	r2, #224	; 0xe0
 80021c6:	0092      	lsls	r2, r2, #2
 80021c8:	4694      	mov	ip, r2
 80021ca:	076d      	lsls	r5, r5, #29
 80021cc:	0b36      	lsrs	r6, r6, #12
 80021ce:	4463      	add	r3, ip
 80021d0:	051b      	lsls	r3, r3, #20
 80021d2:	4333      	orrs	r3, r6
 80021d4:	07e4      	lsls	r4, r4, #31
 80021d6:	4323      	orrs	r3, r4
 80021d8:	0028      	movs	r0, r5
 80021da:	0019      	movs	r1, r3
 80021dc:	bd70      	pop	{r4, r5, r6, pc}
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d114      	bne.n	800220c <__aeabi_f2d+0x5c>
 80021e2:	2d00      	cmp	r5, #0
 80021e4:	d01b      	beq.n	800221e <__aeabi_f2d+0x6e>
 80021e6:	0028      	movs	r0, r5
 80021e8:	f000 f8ec 	bl	80023c4 <__clzsi2>
 80021ec:	280a      	cmp	r0, #10
 80021ee:	dc1c      	bgt.n	800222a <__aeabi_f2d+0x7a>
 80021f0:	230b      	movs	r3, #11
 80021f2:	002e      	movs	r6, r5
 80021f4:	1a1b      	subs	r3, r3, r0
 80021f6:	40de      	lsrs	r6, r3
 80021f8:	0003      	movs	r3, r0
 80021fa:	3315      	adds	r3, #21
 80021fc:	409d      	lsls	r5, r3
 80021fe:	4a0e      	ldr	r2, [pc, #56]	; (8002238 <__aeabi_f2d+0x88>)
 8002200:	0336      	lsls	r6, r6, #12
 8002202:	1a12      	subs	r2, r2, r0
 8002204:	0552      	lsls	r2, r2, #21
 8002206:	0b36      	lsrs	r6, r6, #12
 8002208:	0d53      	lsrs	r3, r2, #21
 800220a:	e7e1      	b.n	80021d0 <__aeabi_f2d+0x20>
 800220c:	2d00      	cmp	r5, #0
 800220e:	d009      	beq.n	8002224 <__aeabi_f2d+0x74>
 8002210:	2280      	movs	r2, #128	; 0x80
 8002212:	0b36      	lsrs	r6, r6, #12
 8002214:	0312      	lsls	r2, r2, #12
 8002216:	4b09      	ldr	r3, [pc, #36]	; (800223c <__aeabi_f2d+0x8c>)
 8002218:	076d      	lsls	r5, r5, #29
 800221a:	4316      	orrs	r6, r2
 800221c:	e7d8      	b.n	80021d0 <__aeabi_f2d+0x20>
 800221e:	2300      	movs	r3, #0
 8002220:	2600      	movs	r6, #0
 8002222:	e7d5      	b.n	80021d0 <__aeabi_f2d+0x20>
 8002224:	2600      	movs	r6, #0
 8002226:	4b05      	ldr	r3, [pc, #20]	; (800223c <__aeabi_f2d+0x8c>)
 8002228:	e7d2      	b.n	80021d0 <__aeabi_f2d+0x20>
 800222a:	0003      	movs	r3, r0
 800222c:	3b0b      	subs	r3, #11
 800222e:	409d      	lsls	r5, r3
 8002230:	002e      	movs	r6, r5
 8002232:	2500      	movs	r5, #0
 8002234:	e7e3      	b.n	80021fe <__aeabi_f2d+0x4e>
 8002236:	46c0      	nop			; (mov r8, r8)
 8002238:	00000389 	.word	0x00000389
 800223c:	000007ff 	.word	0x000007ff

08002240 <__aeabi_d2f>:
 8002240:	0002      	movs	r2, r0
 8002242:	004b      	lsls	r3, r1, #1
 8002244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002246:	0d5b      	lsrs	r3, r3, #21
 8002248:	030c      	lsls	r4, r1, #12
 800224a:	4e3d      	ldr	r6, [pc, #244]	; (8002340 <__aeabi_d2f+0x100>)
 800224c:	0a64      	lsrs	r4, r4, #9
 800224e:	0f40      	lsrs	r0, r0, #29
 8002250:	1c5f      	adds	r7, r3, #1
 8002252:	0fc9      	lsrs	r1, r1, #31
 8002254:	4304      	orrs	r4, r0
 8002256:	00d5      	lsls	r5, r2, #3
 8002258:	4237      	tst	r7, r6
 800225a:	d00a      	beq.n	8002272 <__aeabi_d2f+0x32>
 800225c:	4839      	ldr	r0, [pc, #228]	; (8002344 <__aeabi_d2f+0x104>)
 800225e:	181e      	adds	r6, r3, r0
 8002260:	2efe      	cmp	r6, #254	; 0xfe
 8002262:	dd16      	ble.n	8002292 <__aeabi_d2f+0x52>
 8002264:	20ff      	movs	r0, #255	; 0xff
 8002266:	2400      	movs	r4, #0
 8002268:	05c0      	lsls	r0, r0, #23
 800226a:	4320      	orrs	r0, r4
 800226c:	07c9      	lsls	r1, r1, #31
 800226e:	4308      	orrs	r0, r1
 8002270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002272:	2b00      	cmp	r3, #0
 8002274:	d106      	bne.n	8002284 <__aeabi_d2f+0x44>
 8002276:	432c      	orrs	r4, r5
 8002278:	d026      	beq.n	80022c8 <__aeabi_d2f+0x88>
 800227a:	2205      	movs	r2, #5
 800227c:	0192      	lsls	r2, r2, #6
 800227e:	0a54      	lsrs	r4, r2, #9
 8002280:	b2d8      	uxtb	r0, r3
 8002282:	e7f1      	b.n	8002268 <__aeabi_d2f+0x28>
 8002284:	4325      	orrs	r5, r4
 8002286:	d0ed      	beq.n	8002264 <__aeabi_d2f+0x24>
 8002288:	2080      	movs	r0, #128	; 0x80
 800228a:	03c0      	lsls	r0, r0, #15
 800228c:	4304      	orrs	r4, r0
 800228e:	20ff      	movs	r0, #255	; 0xff
 8002290:	e7ea      	b.n	8002268 <__aeabi_d2f+0x28>
 8002292:	2e00      	cmp	r6, #0
 8002294:	dd1b      	ble.n	80022ce <__aeabi_d2f+0x8e>
 8002296:	0192      	lsls	r2, r2, #6
 8002298:	1e53      	subs	r3, r2, #1
 800229a:	419a      	sbcs	r2, r3
 800229c:	00e4      	lsls	r4, r4, #3
 800229e:	0f6d      	lsrs	r5, r5, #29
 80022a0:	4322      	orrs	r2, r4
 80022a2:	432a      	orrs	r2, r5
 80022a4:	0753      	lsls	r3, r2, #29
 80022a6:	d048      	beq.n	800233a <__aeabi_d2f+0xfa>
 80022a8:	230f      	movs	r3, #15
 80022aa:	4013      	ands	r3, r2
 80022ac:	2b04      	cmp	r3, #4
 80022ae:	d000      	beq.n	80022b2 <__aeabi_d2f+0x72>
 80022b0:	3204      	adds	r2, #4
 80022b2:	2380      	movs	r3, #128	; 0x80
 80022b4:	04db      	lsls	r3, r3, #19
 80022b6:	4013      	ands	r3, r2
 80022b8:	d03f      	beq.n	800233a <__aeabi_d2f+0xfa>
 80022ba:	1c70      	adds	r0, r6, #1
 80022bc:	2efe      	cmp	r6, #254	; 0xfe
 80022be:	d0d1      	beq.n	8002264 <__aeabi_d2f+0x24>
 80022c0:	0192      	lsls	r2, r2, #6
 80022c2:	0a54      	lsrs	r4, r2, #9
 80022c4:	b2c0      	uxtb	r0, r0
 80022c6:	e7cf      	b.n	8002268 <__aeabi_d2f+0x28>
 80022c8:	2000      	movs	r0, #0
 80022ca:	2400      	movs	r4, #0
 80022cc:	e7cc      	b.n	8002268 <__aeabi_d2f+0x28>
 80022ce:	0032      	movs	r2, r6
 80022d0:	3217      	adds	r2, #23
 80022d2:	db22      	blt.n	800231a <__aeabi_d2f+0xda>
 80022d4:	2080      	movs	r0, #128	; 0x80
 80022d6:	0400      	lsls	r0, r0, #16
 80022d8:	4320      	orrs	r0, r4
 80022da:	241e      	movs	r4, #30
 80022dc:	1ba4      	subs	r4, r4, r6
 80022de:	2c1f      	cmp	r4, #31
 80022e0:	dd1d      	ble.n	800231e <__aeabi_d2f+0xde>
 80022e2:	2202      	movs	r2, #2
 80022e4:	4252      	negs	r2, r2
 80022e6:	1b96      	subs	r6, r2, r6
 80022e8:	0002      	movs	r2, r0
 80022ea:	40f2      	lsrs	r2, r6
 80022ec:	0016      	movs	r6, r2
 80022ee:	2c20      	cmp	r4, #32
 80022f0:	d004      	beq.n	80022fc <__aeabi_d2f+0xbc>
 80022f2:	4a15      	ldr	r2, [pc, #84]	; (8002348 <__aeabi_d2f+0x108>)
 80022f4:	4694      	mov	ip, r2
 80022f6:	4463      	add	r3, ip
 80022f8:	4098      	lsls	r0, r3
 80022fa:	4305      	orrs	r5, r0
 80022fc:	002a      	movs	r2, r5
 80022fe:	1e53      	subs	r3, r2, #1
 8002300:	419a      	sbcs	r2, r3
 8002302:	4332      	orrs	r2, r6
 8002304:	2600      	movs	r6, #0
 8002306:	0753      	lsls	r3, r2, #29
 8002308:	d1ce      	bne.n	80022a8 <__aeabi_d2f+0x68>
 800230a:	2480      	movs	r4, #128	; 0x80
 800230c:	0013      	movs	r3, r2
 800230e:	04e4      	lsls	r4, r4, #19
 8002310:	2001      	movs	r0, #1
 8002312:	4023      	ands	r3, r4
 8002314:	4222      	tst	r2, r4
 8002316:	d1d3      	bne.n	80022c0 <__aeabi_d2f+0x80>
 8002318:	e7b0      	b.n	800227c <__aeabi_d2f+0x3c>
 800231a:	2300      	movs	r3, #0
 800231c:	e7ad      	b.n	800227a <__aeabi_d2f+0x3a>
 800231e:	4a0b      	ldr	r2, [pc, #44]	; (800234c <__aeabi_d2f+0x10c>)
 8002320:	4694      	mov	ip, r2
 8002322:	002a      	movs	r2, r5
 8002324:	40e2      	lsrs	r2, r4
 8002326:	0014      	movs	r4, r2
 8002328:	002a      	movs	r2, r5
 800232a:	4463      	add	r3, ip
 800232c:	409a      	lsls	r2, r3
 800232e:	4098      	lsls	r0, r3
 8002330:	1e55      	subs	r5, r2, #1
 8002332:	41aa      	sbcs	r2, r5
 8002334:	4302      	orrs	r2, r0
 8002336:	4322      	orrs	r2, r4
 8002338:	e7e4      	b.n	8002304 <__aeabi_d2f+0xc4>
 800233a:	0033      	movs	r3, r6
 800233c:	e79e      	b.n	800227c <__aeabi_d2f+0x3c>
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	000007fe 	.word	0x000007fe
 8002344:	fffffc80 	.word	0xfffffc80
 8002348:	fffffca2 	.word	0xfffffca2
 800234c:	fffffc82 	.word	0xfffffc82

08002350 <__aeabi_cfrcmple>:
 8002350:	4684      	mov	ip, r0
 8002352:	0008      	movs	r0, r1
 8002354:	4661      	mov	r1, ip
 8002356:	e7ff      	b.n	8002358 <__aeabi_cfcmpeq>

08002358 <__aeabi_cfcmpeq>:
 8002358:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800235a:	f000 f8bd 	bl	80024d8 <__lesf2>
 800235e:	2800      	cmp	r0, #0
 8002360:	d401      	bmi.n	8002366 <__aeabi_cfcmpeq+0xe>
 8002362:	2100      	movs	r1, #0
 8002364:	42c8      	cmn	r0, r1
 8002366:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002368 <__aeabi_fcmpeq>:
 8002368:	b510      	push	{r4, lr}
 800236a:	f000 f849 	bl	8002400 <__eqsf2>
 800236e:	4240      	negs	r0, r0
 8002370:	3001      	adds	r0, #1
 8002372:	bd10      	pop	{r4, pc}

08002374 <__aeabi_fcmplt>:
 8002374:	b510      	push	{r4, lr}
 8002376:	f000 f8af 	bl	80024d8 <__lesf2>
 800237a:	2800      	cmp	r0, #0
 800237c:	db01      	blt.n	8002382 <__aeabi_fcmplt+0xe>
 800237e:	2000      	movs	r0, #0
 8002380:	bd10      	pop	{r4, pc}
 8002382:	2001      	movs	r0, #1
 8002384:	bd10      	pop	{r4, pc}
 8002386:	46c0      	nop			; (mov r8, r8)

08002388 <__aeabi_fcmple>:
 8002388:	b510      	push	{r4, lr}
 800238a:	f000 f8a5 	bl	80024d8 <__lesf2>
 800238e:	2800      	cmp	r0, #0
 8002390:	dd01      	ble.n	8002396 <__aeabi_fcmple+0xe>
 8002392:	2000      	movs	r0, #0
 8002394:	bd10      	pop	{r4, pc}
 8002396:	2001      	movs	r0, #1
 8002398:	bd10      	pop	{r4, pc}
 800239a:	46c0      	nop			; (mov r8, r8)

0800239c <__aeabi_fcmpgt>:
 800239c:	b510      	push	{r4, lr}
 800239e:	f000 f855 	bl	800244c <__gesf2>
 80023a2:	2800      	cmp	r0, #0
 80023a4:	dc01      	bgt.n	80023aa <__aeabi_fcmpgt+0xe>
 80023a6:	2000      	movs	r0, #0
 80023a8:	bd10      	pop	{r4, pc}
 80023aa:	2001      	movs	r0, #1
 80023ac:	bd10      	pop	{r4, pc}
 80023ae:	46c0      	nop			; (mov r8, r8)

080023b0 <__aeabi_fcmpge>:
 80023b0:	b510      	push	{r4, lr}
 80023b2:	f000 f84b 	bl	800244c <__gesf2>
 80023b6:	2800      	cmp	r0, #0
 80023b8:	da01      	bge.n	80023be <__aeabi_fcmpge+0xe>
 80023ba:	2000      	movs	r0, #0
 80023bc:	bd10      	pop	{r4, pc}
 80023be:	2001      	movs	r0, #1
 80023c0:	bd10      	pop	{r4, pc}
 80023c2:	46c0      	nop			; (mov r8, r8)

080023c4 <__clzsi2>:
 80023c4:	211c      	movs	r1, #28
 80023c6:	2301      	movs	r3, #1
 80023c8:	041b      	lsls	r3, r3, #16
 80023ca:	4298      	cmp	r0, r3
 80023cc:	d301      	bcc.n	80023d2 <__clzsi2+0xe>
 80023ce:	0c00      	lsrs	r0, r0, #16
 80023d0:	3910      	subs	r1, #16
 80023d2:	0a1b      	lsrs	r3, r3, #8
 80023d4:	4298      	cmp	r0, r3
 80023d6:	d301      	bcc.n	80023dc <__clzsi2+0x18>
 80023d8:	0a00      	lsrs	r0, r0, #8
 80023da:	3908      	subs	r1, #8
 80023dc:	091b      	lsrs	r3, r3, #4
 80023de:	4298      	cmp	r0, r3
 80023e0:	d301      	bcc.n	80023e6 <__clzsi2+0x22>
 80023e2:	0900      	lsrs	r0, r0, #4
 80023e4:	3904      	subs	r1, #4
 80023e6:	a202      	add	r2, pc, #8	; (adr r2, 80023f0 <__clzsi2+0x2c>)
 80023e8:	5c10      	ldrb	r0, [r2, r0]
 80023ea:	1840      	adds	r0, r0, r1
 80023ec:	4770      	bx	lr
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	02020304 	.word	0x02020304
 80023f4:	01010101 	.word	0x01010101
	...

08002400 <__eqsf2>:
 8002400:	b570      	push	{r4, r5, r6, lr}
 8002402:	0042      	lsls	r2, r0, #1
 8002404:	0245      	lsls	r5, r0, #9
 8002406:	024e      	lsls	r6, r1, #9
 8002408:	004c      	lsls	r4, r1, #1
 800240a:	0fc3      	lsrs	r3, r0, #31
 800240c:	0a6d      	lsrs	r5, r5, #9
 800240e:	2001      	movs	r0, #1
 8002410:	0e12      	lsrs	r2, r2, #24
 8002412:	0a76      	lsrs	r6, r6, #9
 8002414:	0e24      	lsrs	r4, r4, #24
 8002416:	0fc9      	lsrs	r1, r1, #31
 8002418:	2aff      	cmp	r2, #255	; 0xff
 800241a:	d006      	beq.n	800242a <__eqsf2+0x2a>
 800241c:	2cff      	cmp	r4, #255	; 0xff
 800241e:	d003      	beq.n	8002428 <__eqsf2+0x28>
 8002420:	42a2      	cmp	r2, r4
 8002422:	d101      	bne.n	8002428 <__eqsf2+0x28>
 8002424:	42b5      	cmp	r5, r6
 8002426:	d006      	beq.n	8002436 <__eqsf2+0x36>
 8002428:	bd70      	pop	{r4, r5, r6, pc}
 800242a:	2d00      	cmp	r5, #0
 800242c:	d1fc      	bne.n	8002428 <__eqsf2+0x28>
 800242e:	2cff      	cmp	r4, #255	; 0xff
 8002430:	d1fa      	bne.n	8002428 <__eqsf2+0x28>
 8002432:	2e00      	cmp	r6, #0
 8002434:	d1f8      	bne.n	8002428 <__eqsf2+0x28>
 8002436:	428b      	cmp	r3, r1
 8002438:	d006      	beq.n	8002448 <__eqsf2+0x48>
 800243a:	2001      	movs	r0, #1
 800243c:	2a00      	cmp	r2, #0
 800243e:	d1f3      	bne.n	8002428 <__eqsf2+0x28>
 8002440:	0028      	movs	r0, r5
 8002442:	1e43      	subs	r3, r0, #1
 8002444:	4198      	sbcs	r0, r3
 8002446:	e7ef      	b.n	8002428 <__eqsf2+0x28>
 8002448:	2000      	movs	r0, #0
 800244a:	e7ed      	b.n	8002428 <__eqsf2+0x28>

0800244c <__gesf2>:
 800244c:	b570      	push	{r4, r5, r6, lr}
 800244e:	0042      	lsls	r2, r0, #1
 8002450:	0245      	lsls	r5, r0, #9
 8002452:	024e      	lsls	r6, r1, #9
 8002454:	004c      	lsls	r4, r1, #1
 8002456:	0fc3      	lsrs	r3, r0, #31
 8002458:	0a6d      	lsrs	r5, r5, #9
 800245a:	0e12      	lsrs	r2, r2, #24
 800245c:	0a76      	lsrs	r6, r6, #9
 800245e:	0e24      	lsrs	r4, r4, #24
 8002460:	0fc8      	lsrs	r0, r1, #31
 8002462:	2aff      	cmp	r2, #255	; 0xff
 8002464:	d01b      	beq.n	800249e <__gesf2+0x52>
 8002466:	2cff      	cmp	r4, #255	; 0xff
 8002468:	d00e      	beq.n	8002488 <__gesf2+0x3c>
 800246a:	2a00      	cmp	r2, #0
 800246c:	d11b      	bne.n	80024a6 <__gesf2+0x5a>
 800246e:	2c00      	cmp	r4, #0
 8002470:	d101      	bne.n	8002476 <__gesf2+0x2a>
 8002472:	2e00      	cmp	r6, #0
 8002474:	d01c      	beq.n	80024b0 <__gesf2+0x64>
 8002476:	2d00      	cmp	r5, #0
 8002478:	d00c      	beq.n	8002494 <__gesf2+0x48>
 800247a:	4283      	cmp	r3, r0
 800247c:	d01c      	beq.n	80024b8 <__gesf2+0x6c>
 800247e:	2102      	movs	r1, #2
 8002480:	1e58      	subs	r0, r3, #1
 8002482:	4008      	ands	r0, r1
 8002484:	3801      	subs	r0, #1
 8002486:	bd70      	pop	{r4, r5, r6, pc}
 8002488:	2e00      	cmp	r6, #0
 800248a:	d122      	bne.n	80024d2 <__gesf2+0x86>
 800248c:	2a00      	cmp	r2, #0
 800248e:	d1f4      	bne.n	800247a <__gesf2+0x2e>
 8002490:	2d00      	cmp	r5, #0
 8002492:	d1f2      	bne.n	800247a <__gesf2+0x2e>
 8002494:	2800      	cmp	r0, #0
 8002496:	d1f6      	bne.n	8002486 <__gesf2+0x3a>
 8002498:	2001      	movs	r0, #1
 800249a:	4240      	negs	r0, r0
 800249c:	e7f3      	b.n	8002486 <__gesf2+0x3a>
 800249e:	2d00      	cmp	r5, #0
 80024a0:	d117      	bne.n	80024d2 <__gesf2+0x86>
 80024a2:	2cff      	cmp	r4, #255	; 0xff
 80024a4:	d0f0      	beq.n	8002488 <__gesf2+0x3c>
 80024a6:	2c00      	cmp	r4, #0
 80024a8:	d1e7      	bne.n	800247a <__gesf2+0x2e>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d1e5      	bne.n	800247a <__gesf2+0x2e>
 80024ae:	e7e6      	b.n	800247e <__gesf2+0x32>
 80024b0:	2000      	movs	r0, #0
 80024b2:	2d00      	cmp	r5, #0
 80024b4:	d0e7      	beq.n	8002486 <__gesf2+0x3a>
 80024b6:	e7e2      	b.n	800247e <__gesf2+0x32>
 80024b8:	42a2      	cmp	r2, r4
 80024ba:	dc05      	bgt.n	80024c8 <__gesf2+0x7c>
 80024bc:	dbea      	blt.n	8002494 <__gesf2+0x48>
 80024be:	42b5      	cmp	r5, r6
 80024c0:	d802      	bhi.n	80024c8 <__gesf2+0x7c>
 80024c2:	d3e7      	bcc.n	8002494 <__gesf2+0x48>
 80024c4:	2000      	movs	r0, #0
 80024c6:	e7de      	b.n	8002486 <__gesf2+0x3a>
 80024c8:	4243      	negs	r3, r0
 80024ca:	4158      	adcs	r0, r3
 80024cc:	0040      	lsls	r0, r0, #1
 80024ce:	3801      	subs	r0, #1
 80024d0:	e7d9      	b.n	8002486 <__gesf2+0x3a>
 80024d2:	2002      	movs	r0, #2
 80024d4:	4240      	negs	r0, r0
 80024d6:	e7d6      	b.n	8002486 <__gesf2+0x3a>

080024d8 <__lesf2>:
 80024d8:	b570      	push	{r4, r5, r6, lr}
 80024da:	0042      	lsls	r2, r0, #1
 80024dc:	0245      	lsls	r5, r0, #9
 80024de:	024e      	lsls	r6, r1, #9
 80024e0:	004c      	lsls	r4, r1, #1
 80024e2:	0fc3      	lsrs	r3, r0, #31
 80024e4:	0a6d      	lsrs	r5, r5, #9
 80024e6:	0e12      	lsrs	r2, r2, #24
 80024e8:	0a76      	lsrs	r6, r6, #9
 80024ea:	0e24      	lsrs	r4, r4, #24
 80024ec:	0fc8      	lsrs	r0, r1, #31
 80024ee:	2aff      	cmp	r2, #255	; 0xff
 80024f0:	d00b      	beq.n	800250a <__lesf2+0x32>
 80024f2:	2cff      	cmp	r4, #255	; 0xff
 80024f4:	d00d      	beq.n	8002512 <__lesf2+0x3a>
 80024f6:	2a00      	cmp	r2, #0
 80024f8:	d11f      	bne.n	800253a <__lesf2+0x62>
 80024fa:	2c00      	cmp	r4, #0
 80024fc:	d116      	bne.n	800252c <__lesf2+0x54>
 80024fe:	2e00      	cmp	r6, #0
 8002500:	d114      	bne.n	800252c <__lesf2+0x54>
 8002502:	2000      	movs	r0, #0
 8002504:	2d00      	cmp	r5, #0
 8002506:	d010      	beq.n	800252a <__lesf2+0x52>
 8002508:	e009      	b.n	800251e <__lesf2+0x46>
 800250a:	2d00      	cmp	r5, #0
 800250c:	d10c      	bne.n	8002528 <__lesf2+0x50>
 800250e:	2cff      	cmp	r4, #255	; 0xff
 8002510:	d113      	bne.n	800253a <__lesf2+0x62>
 8002512:	2e00      	cmp	r6, #0
 8002514:	d108      	bne.n	8002528 <__lesf2+0x50>
 8002516:	2a00      	cmp	r2, #0
 8002518:	d008      	beq.n	800252c <__lesf2+0x54>
 800251a:	4283      	cmp	r3, r0
 800251c:	d012      	beq.n	8002544 <__lesf2+0x6c>
 800251e:	2102      	movs	r1, #2
 8002520:	1e58      	subs	r0, r3, #1
 8002522:	4008      	ands	r0, r1
 8002524:	3801      	subs	r0, #1
 8002526:	e000      	b.n	800252a <__lesf2+0x52>
 8002528:	2002      	movs	r0, #2
 800252a:	bd70      	pop	{r4, r5, r6, pc}
 800252c:	2d00      	cmp	r5, #0
 800252e:	d1f4      	bne.n	800251a <__lesf2+0x42>
 8002530:	2800      	cmp	r0, #0
 8002532:	d1fa      	bne.n	800252a <__lesf2+0x52>
 8002534:	2001      	movs	r0, #1
 8002536:	4240      	negs	r0, r0
 8002538:	e7f7      	b.n	800252a <__lesf2+0x52>
 800253a:	2c00      	cmp	r4, #0
 800253c:	d1ed      	bne.n	800251a <__lesf2+0x42>
 800253e:	2e00      	cmp	r6, #0
 8002540:	d1eb      	bne.n	800251a <__lesf2+0x42>
 8002542:	e7ec      	b.n	800251e <__lesf2+0x46>
 8002544:	42a2      	cmp	r2, r4
 8002546:	dc05      	bgt.n	8002554 <__lesf2+0x7c>
 8002548:	dbf2      	blt.n	8002530 <__lesf2+0x58>
 800254a:	42b5      	cmp	r5, r6
 800254c:	d802      	bhi.n	8002554 <__lesf2+0x7c>
 800254e:	d3ef      	bcc.n	8002530 <__lesf2+0x58>
 8002550:	2000      	movs	r0, #0
 8002552:	e7ea      	b.n	800252a <__lesf2+0x52>
 8002554:	4243      	negs	r3, r0
 8002556:	4158      	adcs	r0, r3
 8002558:	0040      	lsls	r0, r0, #1
 800255a:	3801      	subs	r0, #1
 800255c:	e7e5      	b.n	800252a <__lesf2+0x52>
 800255e:	46c0      	nop			; (mov r8, r8)

08002560 <gettemp>:


}

float gettemp(float value)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
	return (((value*vsense)-0.76)/0.0025)+25;
 8002568:	4b14      	ldr	r3, [pc, #80]	; (80025bc <gettemp+0x5c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	1c18      	adds	r0, r3, #0
 8002570:	f7fe f924 	bl	80007bc <__aeabi_fmul>
 8002574:	1c03      	adds	r3, r0, #0
 8002576:	1c18      	adds	r0, r3, #0
 8002578:	f7ff fe1a 	bl	80021b0 <__aeabi_f2d>
 800257c:	4a10      	ldr	r2, [pc, #64]	; (80025c0 <gettemp+0x60>)
 800257e:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <gettemp+0x64>)
 8002580:	f7ff fa84 	bl	8001a8c <__aeabi_dsub>
 8002584:	0002      	movs	r2, r0
 8002586:	000b      	movs	r3, r1
 8002588:	0010      	movs	r0, r2
 800258a:	0019      	movs	r1, r3
 800258c:	4a0e      	ldr	r2, [pc, #56]	; (80025c8 <gettemp+0x68>)
 800258e:	4b0f      	ldr	r3, [pc, #60]	; (80025cc <gettemp+0x6c>)
 8002590:	f7fe ff86 	bl	80014a0 <__aeabi_ddiv>
 8002594:	0002      	movs	r2, r0
 8002596:	000b      	movs	r3, r1
 8002598:	0010      	movs	r0, r2
 800259a:	0019      	movs	r1, r3
 800259c:	2200      	movs	r2, #0
 800259e:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <gettemp+0x70>)
 80025a0:	f7fe fc42 	bl	8000e28 <__aeabi_dadd>
 80025a4:	0002      	movs	r2, r0
 80025a6:	000b      	movs	r3, r1
 80025a8:	0010      	movs	r0, r2
 80025aa:	0019      	movs	r1, r3
 80025ac:	f7ff fe48 	bl	8002240 <__aeabi_d2f>
 80025b0:	1c03      	adds	r3, r0, #0
}
 80025b2:	1c18      	adds	r0, r3, #0
 80025b4:	46bd      	mov	sp, r7
 80025b6:	b002      	add	sp, #8
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	46c0      	nop			; (mov r8, r8)
 80025bc:	20000000 	.word	0x20000000
 80025c0:	851eb852 	.word	0x851eb852
 80025c4:	3fe851eb 	.word	0x3fe851eb
 80025c8:	47ae147b 	.word	0x47ae147b
 80025cc:	3f647ae1 	.word	0x3f647ae1
 80025d0:	40390000 	.word	0x40390000

080025d4 <Read_ADC>:

}


float Read_ADC(float channel)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08a      	sub	sp, #40	; 0x28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
	  HAL_ADC_DeInit(&hadc);
 80025dc:	4b57      	ldr	r3, [pc, #348]	; (800273c <Read_ADC+0x168>)
 80025de:	0018      	movs	r0, r3
 80025e0:	f000 fc76 	bl	8002ed0 <HAL_ADC_DeInit>
	  ADC_ChannelConfTypeDef sConfig = {0};
 80025e4:	230c      	movs	r3, #12
 80025e6:	18fb      	adds	r3, r7, r3
 80025e8:	0018      	movs	r0, r3
 80025ea:	230c      	movs	r3, #12
 80025ec:	001a      	movs	r2, r3
 80025ee:	2100      	movs	r1, #0
 80025f0:	f002 f802 	bl	80045f8 <memset>
	  hadc.Instance = ADC1;
 80025f4:	4b51      	ldr	r3, [pc, #324]	; (800273c <Read_ADC+0x168>)
 80025f6:	4a52      	ldr	r2, [pc, #328]	; (8002740 <Read_ADC+0x16c>)
 80025f8:	601a      	str	r2, [r3, #0]
	  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80025fa:	4b50      	ldr	r3, [pc, #320]	; (800273c <Read_ADC+0x168>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	605a      	str	r2, [r3, #4]
	  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002600:	4b4e      	ldr	r3, [pc, #312]	; (800273c <Read_ADC+0x168>)
 8002602:	2200      	movs	r2, #0
 8002604:	609a      	str	r2, [r3, #8]
	  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002606:	4b4d      	ldr	r3, [pc, #308]	; (800273c <Read_ADC+0x168>)
 8002608:	2200      	movs	r2, #0
 800260a:	60da      	str	r2, [r3, #12]
	  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800260c:	4b4b      	ldr	r3, [pc, #300]	; (800273c <Read_ADC+0x168>)
 800260e:	2201      	movs	r2, #1
 8002610:	611a      	str	r2, [r3, #16]
	  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002612:	4b4a      	ldr	r3, [pc, #296]	; (800273c <Read_ADC+0x168>)
 8002614:	2204      	movs	r2, #4
 8002616:	615a      	str	r2, [r3, #20]
	  hadc.Init.LowPowerAutoWait = DISABLE;
 8002618:	4b48      	ldr	r3, [pc, #288]	; (800273c <Read_ADC+0x168>)
 800261a:	2200      	movs	r2, #0
 800261c:	761a      	strb	r2, [r3, #24]
	  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800261e:	4b47      	ldr	r3, [pc, #284]	; (800273c <Read_ADC+0x168>)
 8002620:	2200      	movs	r2, #0
 8002622:	765a      	strb	r2, [r3, #25]
	  hadc.Init.ContinuousConvMode = ENABLE;
 8002624:	4b45      	ldr	r3, [pc, #276]	; (800273c <Read_ADC+0x168>)
 8002626:	2201      	movs	r2, #1
 8002628:	769a      	strb	r2, [r3, #26]
	  hadc.Init.DiscontinuousConvMode = DISABLE;
 800262a:	4b44      	ldr	r3, [pc, #272]	; (800273c <Read_ADC+0x168>)
 800262c:	2200      	movs	r2, #0
 800262e:	76da      	strb	r2, [r3, #27]
	  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002630:	4b42      	ldr	r3, [pc, #264]	; (800273c <Read_ADC+0x168>)
 8002632:	22c2      	movs	r2, #194	; 0xc2
 8002634:	32ff      	adds	r2, #255	; 0xff
 8002636:	61da      	str	r2, [r3, #28]
	  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002638:	4b40      	ldr	r3, [pc, #256]	; (800273c <Read_ADC+0x168>)
 800263a:	2200      	movs	r2, #0
 800263c:	621a      	str	r2, [r3, #32]
	  hadc.Init.DMAContinuousRequests = DISABLE;
 800263e:	4b3f      	ldr	r3, [pc, #252]	; (800273c <Read_ADC+0x168>)
 8002640:	2224      	movs	r2, #36	; 0x24
 8002642:	2100      	movs	r1, #0
 8002644:	5499      	strb	r1, [r3, r2]
	  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002646:	4b3d      	ldr	r3, [pc, #244]	; (800273c <Read_ADC+0x168>)
 8002648:	2201      	movs	r2, #1
 800264a:	629a      	str	r2, [r3, #40]	; 0x28
	  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800264c:	4b3b      	ldr	r3, [pc, #236]	; (800273c <Read_ADC+0x168>)
 800264e:	0018      	movs	r0, r3
 8002650:	f000 fafe 	bl	8002c50 <HAL_ADC_Init>
 8002654:	1e03      	subs	r3, r0, #0
 8002656:	d001      	beq.n	800265c <Read_ADC+0x88>
	  {
	    Error_Handler();
 8002658:	f000 f99c 	bl	8002994 <Error_Handler>
	  }
	  sConfig.Channel = channel;
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7fd fddf 	bl	8000220 <__aeabi_f2uiz>
 8002662:	0002      	movs	r2, r0
 8002664:	210c      	movs	r1, #12
 8002666:	187b      	adds	r3, r7, r1
 8002668:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800266a:	187b      	adds	r3, r7, r1
 800266c:	2280      	movs	r2, #128	; 0x80
 800266e:	0152      	lsls	r2, r2, #5
 8002670:	605a      	str	r2, [r3, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002672:	187b      	adds	r3, r7, r1
 8002674:	2280      	movs	r2, #128	; 0x80
 8002676:	0552      	lsls	r2, r2, #21
 8002678:	609a      	str	r2, [r3, #8]
	  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800267a:	187a      	adds	r2, r7, r1
 800267c:	4b2f      	ldr	r3, [pc, #188]	; (800273c <Read_ADC+0x168>)
 800267e:	0011      	movs	r1, r2
 8002680:	0018      	movs	r0, r3
 8002682:	f000 fde7 	bl	8003254 <HAL_ADC_ConfigChannel>
 8002686:	1e03      	subs	r3, r0, #0
 8002688:	d002      	beq.n	8002690 <Read_ADC+0xbc>
	  {
	    Error_Handler();
 800268a:	f000 f983 	bl	8002994 <Error_Handler>
			  sum +=values[i];
		  }
		  values[maxsize-1] = val;
		  return ((sum+values[maxsize-1])/10);
	  }
}
 800268e:	e050      	b.n	8002732 <Read_ADC+0x15e>
		  HAL_ADC_Start(&hadc);
 8002690:	4b2a      	ldr	r3, [pc, #168]	; (800273c <Read_ADC+0x168>)
 8002692:	0018      	movs	r0, r3
 8002694:	f000 fca6 	bl	8002fe4 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc, 100);
 8002698:	4b28      	ldr	r3, [pc, #160]	; (800273c <Read_ADC+0x168>)
 800269a:	2164      	movs	r1, #100	; 0x64
 800269c:	0018      	movs	r0, r3
 800269e:	f000 fd35 	bl	800310c <HAL_ADC_PollForConversion>
		  HAL_Delay(100);
 80026a2:	2064      	movs	r0, #100	; 0x64
 80026a4:	f000 fab0 	bl	8002c08 <HAL_Delay>
		  float val = HAL_ADC_GetValue(&hadc);
 80026a8:	4b24      	ldr	r3, [pc, #144]	; (800273c <Read_ADC+0x168>)
 80026aa:	0018      	movs	r0, r3
 80026ac:	f000 fdc6 	bl	800323c <HAL_ADC_GetValue>
 80026b0:	0003      	movs	r3, r0
 80026b2:	0018      	movs	r0, r3
 80026b4:	f7fe fb76 	bl	8000da4 <__aeabi_ui2f>
 80026b8:	1c03      	adds	r3, r0, #0
 80026ba:	61bb      	str	r3, [r7, #24]
		  float sum = 0;
 80026bc:	2300      	movs	r3, #0
 80026be:	627b      	str	r3, [r7, #36]	; 0x24
		  for (int i = 0; i < maxsize; i++)
 80026c0:	2300      	movs	r3, #0
 80026c2:	623b      	str	r3, [r7, #32]
 80026c4:	e007      	b.n	80026d6 <Read_ADC+0x102>
			values[i] = val;
 80026c6:	4b1f      	ldr	r3, [pc, #124]	; (8002744 <Read_ADC+0x170>)
 80026c8:	6a3a      	ldr	r2, [r7, #32]
 80026ca:	0092      	lsls	r2, r2, #2
 80026cc:	69b9      	ldr	r1, [r7, #24]
 80026ce:	50d1      	str	r1, [r2, r3]
		  for (int i = 0; i < maxsize; i++)
 80026d0:	6a3b      	ldr	r3, [r7, #32]
 80026d2:	3301      	adds	r3, #1
 80026d4:	623b      	str	r3, [r7, #32]
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	2b09      	cmp	r3, #9
 80026da:	ddf4      	ble.n	80026c6 <Read_ADC+0xf2>
		  for(int i = 0; i < maxsize-1; i++)
 80026dc:	2300      	movs	r3, #0
 80026de:	61fb      	str	r3, [r7, #28]
 80026e0:	e015      	b.n	800270e <Read_ADC+0x13a>
			  values[i] = values[i+1];
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	4b17      	ldr	r3, [pc, #92]	; (8002744 <Read_ADC+0x170>)
 80026e8:	0092      	lsls	r2, r2, #2
 80026ea:	58d1      	ldr	r1, [r2, r3]
 80026ec:	4b15      	ldr	r3, [pc, #84]	; (8002744 <Read_ADC+0x170>)
 80026ee:	69fa      	ldr	r2, [r7, #28]
 80026f0:	0092      	lsls	r2, r2, #2
 80026f2:	50d1      	str	r1, [r2, r3]
			  sum +=values[i];
 80026f4:	4b13      	ldr	r3, [pc, #76]	; (8002744 <Read_ADC+0x170>)
 80026f6:	69fa      	ldr	r2, [r7, #28]
 80026f8:	0092      	lsls	r2, r2, #2
 80026fa:	58d3      	ldr	r3, [r2, r3]
 80026fc:	1c19      	adds	r1, r3, #0
 80026fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002700:	f7fd fda6 	bl	8000250 <__aeabi_fadd>
 8002704:	1c03      	adds	r3, r0, #0
 8002706:	627b      	str	r3, [r7, #36]	; 0x24
		  for(int i = 0; i < maxsize-1; i++)
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	3301      	adds	r3, #1
 800270c:	61fb      	str	r3, [r7, #28]
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	2b08      	cmp	r3, #8
 8002712:	dde6      	ble.n	80026e2 <Read_ADC+0x10e>
		  values[maxsize-1] = val;
 8002714:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <Read_ADC+0x170>)
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	625a      	str	r2, [r3, #36]	; 0x24
		  return ((sum+values[maxsize-1])/10);
 800271a:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <Read_ADC+0x170>)
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002720:	1c18      	adds	r0, r3, #0
 8002722:	f7fd fd95 	bl	8000250 <__aeabi_fadd>
 8002726:	1c03      	adds	r3, r0, #0
 8002728:	4907      	ldr	r1, [pc, #28]	; (8002748 <Read_ADC+0x174>)
 800272a:	1c18      	adds	r0, r3, #0
 800272c:	f7fd ff2e 	bl	800058c <__aeabi_fdiv>
 8002730:	1c03      	adds	r3, r0, #0
}
 8002732:	1c18      	adds	r0, r3, #0
 8002734:	46bd      	mov	sp, r7
 8002736:	b00a      	add	sp, #40	; 0x28
 8002738:	bd80      	pop	{r7, pc}
 800273a:	46c0      	nop			; (mov r8, r8)
 800273c:	2000002c 	.word	0x2000002c
 8002740:	40012400 	.word	0x40012400
 8002744:	20000078 	.word	0x20000078
 8002748:	41200000 	.word	0x41200000

0800274c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002750:	f000 f9f6 	bl	8002b40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002754:	f000 f82c 	bl	80027b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002758:	f000 f8c0 	bl	80028dc <MX_GPIO_Init>
  MX_ADC_Init();
 800275c:	f000 f878 	bl	8002850 <MX_ADC_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  arr[0] = Read_ADC(ADC_CHANNEL_5);
 8002760:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <main+0x54>)
 8002762:	1c18      	adds	r0, r3, #0
 8002764:	f7ff ff36 	bl	80025d4 <Read_ADC>
 8002768:	1c02      	adds	r2, r0, #0
 800276a:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <main+0x58>)
 800276c:	601a      	str	r2, [r3, #0]
	  arr[1] = Read_ADC(ADC_CHANNEL_6);
 800276e:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <main+0x5c>)
 8002770:	1c18      	adds	r0, r3, #0
 8002772:	f7ff ff2f 	bl	80025d4 <Read_ADC>
 8002776:	1c02      	adds	r2, r0, #0
 8002778:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <main+0x58>)
 800277a:	605a      	str	r2, [r3, #4]
	  arr[2] = gettemp(Read_ADC(ADC_CHANNEL_TEMPSENSOR));
 800277c:	2383      	movs	r3, #131	; 0x83
 800277e:	05db      	lsls	r3, r3, #23
 8002780:	1c18      	adds	r0, r3, #0
 8002782:	f7ff ff27 	bl	80025d4 <Read_ADC>
 8002786:	1c03      	adds	r3, r0, #0
 8002788:	1c18      	adds	r0, r3, #0
 800278a:	f7ff fee9 	bl	8002560 <gettemp>
 800278e:	1c02      	adds	r2, r0, #0
 8002790:	4b04      	ldr	r3, [pc, #16]	; (80027a4 <main+0x58>)
 8002792:	609a      	str	r2, [r3, #8]

	  HAL_ADC_Stop(&hadc);
 8002794:	4b05      	ldr	r3, [pc, #20]	; (80027ac <main+0x60>)
 8002796:	0018      	movs	r0, r3
 8002798:	f000 fc78 	bl	800308c <HAL_ADC_Stop>
	  arr[0] = Read_ADC(ADC_CHANNEL_5);
 800279c:	e7e0      	b.n	8002760 <main+0x14>
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	40a00000 	.word	0x40a00000
 80027a4:	2000006c 	.word	0x2000006c
 80027a8:	40c00000 	.word	0x40c00000
 80027ac:	2000002c 	.word	0x2000002c

080027b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027b0:	b590      	push	{r4, r7, lr}
 80027b2:	b091      	sub	sp, #68	; 0x44
 80027b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027b6:	2410      	movs	r4, #16
 80027b8:	193b      	adds	r3, r7, r4
 80027ba:	0018      	movs	r0, r3
 80027bc:	2330      	movs	r3, #48	; 0x30
 80027be:	001a      	movs	r2, r3
 80027c0:	2100      	movs	r1, #0
 80027c2:	f001 ff19 	bl	80045f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027c6:	003b      	movs	r3, r7
 80027c8:	0018      	movs	r0, r3
 80027ca:	2310      	movs	r3, #16
 80027cc:	001a      	movs	r2, r3
 80027ce:	2100      	movs	r1, #0
 80027d0:	f001 ff12 	bl	80045f8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80027d4:	0021      	movs	r1, r4
 80027d6:	187b      	adds	r3, r7, r1
 80027d8:	2212      	movs	r2, #18
 80027da:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027dc:	187b      	adds	r3, r7, r1
 80027de:	2201      	movs	r2, #1
 80027e0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80027e2:	187b      	adds	r3, r7, r1
 80027e4:	2201      	movs	r2, #1
 80027e6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027e8:	187b      	adds	r3, r7, r1
 80027ea:	2210      	movs	r2, #16
 80027ec:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80027ee:	187b      	adds	r3, r7, r1
 80027f0:	2210      	movs	r2, #16
 80027f2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027f4:	187b      	adds	r3, r7, r1
 80027f6:	2202      	movs	r2, #2
 80027f8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027fa:	187b      	adds	r3, r7, r1
 80027fc:	2200      	movs	r2, #0
 80027fe:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002800:	187b      	adds	r3, r7, r1
 8002802:	22a0      	movs	r2, #160	; 0xa0
 8002804:	0392      	lsls	r2, r2, #14
 8002806:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002808:	187b      	adds	r3, r7, r1
 800280a:	2200      	movs	r2, #0
 800280c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800280e:	187b      	adds	r3, r7, r1
 8002810:	0018      	movs	r0, r3
 8002812:	f001 fa81 	bl	8003d18 <HAL_RCC_OscConfig>
 8002816:	1e03      	subs	r3, r0, #0
 8002818:	d001      	beq.n	800281e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800281a:	f000 f8bb 	bl	8002994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800281e:	003b      	movs	r3, r7
 8002820:	2207      	movs	r2, #7
 8002822:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002824:	003b      	movs	r3, r7
 8002826:	2202      	movs	r2, #2
 8002828:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800282a:	003b      	movs	r3, r7
 800282c:	2200      	movs	r2, #0
 800282e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002830:	003b      	movs	r3, r7
 8002832:	2200      	movs	r2, #0
 8002834:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002836:	003b      	movs	r3, r7
 8002838:	2101      	movs	r1, #1
 800283a:	0018      	movs	r0, r3
 800283c:	f001 fd86 	bl	800434c <HAL_RCC_ClockConfig>
 8002840:	1e03      	subs	r3, r0, #0
 8002842:	d001      	beq.n	8002848 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002844:	f000 f8a6 	bl	8002994 <Error_Handler>
  }
}
 8002848:	46c0      	nop			; (mov r8, r8)
 800284a:	46bd      	mov	sp, r7
 800284c:	b011      	add	sp, #68	; 0x44
 800284e:	bd90      	pop	{r4, r7, pc}

08002850 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002856:	1d3b      	adds	r3, r7, #4
 8002858:	0018      	movs	r0, r3
 800285a:	230c      	movs	r3, #12
 800285c:	001a      	movs	r2, r3
 800285e:	2100      	movs	r1, #0
 8002860:	f001 feca 	bl	80045f8 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002864:	4b1b      	ldr	r3, [pc, #108]	; (80028d4 <MX_ADC_Init+0x84>)
 8002866:	4a1c      	ldr	r2, [pc, #112]	; (80028d8 <MX_ADC_Init+0x88>)
 8002868:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800286a:	4b1a      	ldr	r3, [pc, #104]	; (80028d4 <MX_ADC_Init+0x84>)
 800286c:	2200      	movs	r2, #0
 800286e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002870:	4b18      	ldr	r3, [pc, #96]	; (80028d4 <MX_ADC_Init+0x84>)
 8002872:	2200      	movs	r2, #0
 8002874:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002876:	4b17      	ldr	r3, [pc, #92]	; (80028d4 <MX_ADC_Init+0x84>)
 8002878:	2200      	movs	r2, #0
 800287a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800287c:	4b15      	ldr	r3, [pc, #84]	; (80028d4 <MX_ADC_Init+0x84>)
 800287e:	2201      	movs	r2, #1
 8002880:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002882:	4b14      	ldr	r3, [pc, #80]	; (80028d4 <MX_ADC_Init+0x84>)
 8002884:	2204      	movs	r2, #4
 8002886:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002888:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <MX_ADC_Init+0x84>)
 800288a:	2200      	movs	r2, #0
 800288c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800288e:	4b11      	ldr	r3, [pc, #68]	; (80028d4 <MX_ADC_Init+0x84>)
 8002890:	2200      	movs	r2, #0
 8002892:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8002894:	4b0f      	ldr	r3, [pc, #60]	; (80028d4 <MX_ADC_Init+0x84>)
 8002896:	2201      	movs	r2, #1
 8002898:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800289a:	4b0e      	ldr	r3, [pc, #56]	; (80028d4 <MX_ADC_Init+0x84>)
 800289c:	2200      	movs	r2, #0
 800289e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80028a0:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <MX_ADC_Init+0x84>)
 80028a2:	22c2      	movs	r2, #194	; 0xc2
 80028a4:	32ff      	adds	r2, #255	; 0xff
 80028a6:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80028a8:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <MX_ADC_Init+0x84>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80028ae:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <MX_ADC_Init+0x84>)
 80028b0:	2224      	movs	r2, #36	; 0x24
 80028b2:	2100      	movs	r1, #0
 80028b4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80028b6:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <MX_ADC_Init+0x84>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80028bc:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <MX_ADC_Init+0x84>)
 80028be:	0018      	movs	r0, r3
 80028c0:	f000 f9c6 	bl	8002c50 <HAL_ADC_Init>
 80028c4:	1e03      	subs	r3, r0, #0
 80028c6:	d001      	beq.n	80028cc <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80028c8:	f000 f864 	bl	8002994 <Error_Handler>

  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80028cc:	46c0      	nop			; (mov r8, r8)
 80028ce:	46bd      	mov	sp, r7
 80028d0:	b004      	add	sp, #16
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	2000002c 	.word	0x2000002c
 80028d8:	40012400 	.word	0x40012400

080028dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028dc:	b590      	push	{r4, r7, lr}
 80028de:	b089      	sub	sp, #36	; 0x24
 80028e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e2:	240c      	movs	r4, #12
 80028e4:	193b      	adds	r3, r7, r4
 80028e6:	0018      	movs	r0, r3
 80028e8:	2314      	movs	r3, #20
 80028ea:	001a      	movs	r2, r3
 80028ec:	2100      	movs	r1, #0
 80028ee:	f001 fe83 	bl	80045f8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f2:	4b26      	ldr	r3, [pc, #152]	; (800298c <MX_GPIO_Init+0xb0>)
 80028f4:	695a      	ldr	r2, [r3, #20]
 80028f6:	4b25      	ldr	r3, [pc, #148]	; (800298c <MX_GPIO_Init+0xb0>)
 80028f8:	2180      	movs	r1, #128	; 0x80
 80028fa:	0289      	lsls	r1, r1, #10
 80028fc:	430a      	orrs	r2, r1
 80028fe:	615a      	str	r2, [r3, #20]
 8002900:	4b22      	ldr	r3, [pc, #136]	; (800298c <MX_GPIO_Init+0xb0>)
 8002902:	695a      	ldr	r2, [r3, #20]
 8002904:	2380      	movs	r3, #128	; 0x80
 8002906:	029b      	lsls	r3, r3, #10
 8002908:	4013      	ands	r3, r2
 800290a:	60bb      	str	r3, [r7, #8]
 800290c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800290e:	4b1f      	ldr	r3, [pc, #124]	; (800298c <MX_GPIO_Init+0xb0>)
 8002910:	695a      	ldr	r2, [r3, #20]
 8002912:	4b1e      	ldr	r3, [pc, #120]	; (800298c <MX_GPIO_Init+0xb0>)
 8002914:	2180      	movs	r1, #128	; 0x80
 8002916:	0309      	lsls	r1, r1, #12
 8002918:	430a      	orrs	r2, r1
 800291a:	615a      	str	r2, [r3, #20]
 800291c:	4b1b      	ldr	r3, [pc, #108]	; (800298c <MX_GPIO_Init+0xb0>)
 800291e:	695a      	ldr	r2, [r3, #20]
 8002920:	2380      	movs	r3, #128	; 0x80
 8002922:	031b      	lsls	r3, r3, #12
 8002924:	4013      	ands	r3, r2
 8002926:	607b      	str	r3, [r7, #4]
 8002928:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 800292a:	23c0      	movs	r3, #192	; 0xc0
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4818      	ldr	r0, [pc, #96]	; (8002990 <MX_GPIO_Init+0xb4>)
 8002930:	2200      	movs	r2, #0
 8002932:	0019      	movs	r1, r3
 8002934:	f001 f9d2 	bl	8003cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002938:	193b      	adds	r3, r7, r4
 800293a:	2201      	movs	r2, #1
 800293c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800293e:	193b      	adds	r3, r7, r4
 8002940:	2290      	movs	r2, #144	; 0x90
 8002942:	0352      	lsls	r2, r2, #13
 8002944:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002946:	193b      	adds	r3, r7, r4
 8002948:	2200      	movs	r2, #0
 800294a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800294c:	193a      	adds	r2, r7, r4
 800294e:	2390      	movs	r3, #144	; 0x90
 8002950:	05db      	lsls	r3, r3, #23
 8002952:	0011      	movs	r1, r2
 8002954:	0018      	movs	r0, r3
 8002956:	f000 ff81 	bl	800385c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 800295a:	0021      	movs	r1, r4
 800295c:	187b      	adds	r3, r7, r1
 800295e:	22c0      	movs	r2, #192	; 0xc0
 8002960:	0092      	lsls	r2, r2, #2
 8002962:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002964:	187b      	adds	r3, r7, r1
 8002966:	2201      	movs	r2, #1
 8002968:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296a:	187b      	adds	r3, r7, r1
 800296c:	2200      	movs	r2, #0
 800296e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002970:	187b      	adds	r3, r7, r1
 8002972:	2200      	movs	r2, #0
 8002974:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002976:	187b      	adds	r3, r7, r1
 8002978:	4a05      	ldr	r2, [pc, #20]	; (8002990 <MX_GPIO_Init+0xb4>)
 800297a:	0019      	movs	r1, r3
 800297c:	0010      	movs	r0, r2
 800297e:	f000 ff6d 	bl	800385c <HAL_GPIO_Init>

}
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	46bd      	mov	sp, r7
 8002986:	b009      	add	sp, #36	; 0x24
 8002988:	bd90      	pop	{r4, r7, pc}
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	40021000 	.word	0x40021000
 8002990:	48000800 	.word	0x48000800

08002994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002998:	b672      	cpsid	i
}
 800299a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800299c:	e7fe      	b.n	800299c <Error_Handler+0x8>
	...

080029a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a6:	4b0f      	ldr	r3, [pc, #60]	; (80029e4 <HAL_MspInit+0x44>)
 80029a8:	699a      	ldr	r2, [r3, #24]
 80029aa:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <HAL_MspInit+0x44>)
 80029ac:	2101      	movs	r1, #1
 80029ae:	430a      	orrs	r2, r1
 80029b0:	619a      	str	r2, [r3, #24]
 80029b2:	4b0c      	ldr	r3, [pc, #48]	; (80029e4 <HAL_MspInit+0x44>)
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	2201      	movs	r2, #1
 80029b8:	4013      	ands	r3, r2
 80029ba:	607b      	str	r3, [r7, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029be:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <HAL_MspInit+0x44>)
 80029c0:	69da      	ldr	r2, [r3, #28]
 80029c2:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <HAL_MspInit+0x44>)
 80029c4:	2180      	movs	r1, #128	; 0x80
 80029c6:	0549      	lsls	r1, r1, #21
 80029c8:	430a      	orrs	r2, r1
 80029ca:	61da      	str	r2, [r3, #28]
 80029cc:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <HAL_MspInit+0x44>)
 80029ce:	69da      	ldr	r2, [r3, #28]
 80029d0:	2380      	movs	r3, #128	; 0x80
 80029d2:	055b      	lsls	r3, r3, #21
 80029d4:	4013      	ands	r3, r2
 80029d6:	603b      	str	r3, [r7, #0]
 80029d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	46bd      	mov	sp, r7
 80029de:	b002      	add	sp, #8
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	40021000 	.word	0x40021000

080029e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029e8:	b590      	push	{r4, r7, lr}
 80029ea:	b08b      	sub	sp, #44	; 0x2c
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f0:	2414      	movs	r4, #20
 80029f2:	193b      	adds	r3, r7, r4
 80029f4:	0018      	movs	r0, r3
 80029f6:	2314      	movs	r3, #20
 80029f8:	001a      	movs	r2, r3
 80029fa:	2100      	movs	r1, #0
 80029fc:	f001 fdfc 	bl	80045f8 <memset>
  if(hadc->Instance==ADC1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a19      	ldr	r2, [pc, #100]	; (8002a6c <HAL_ADC_MspInit+0x84>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d12b      	bne.n	8002a62 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a0a:	4b19      	ldr	r3, [pc, #100]	; (8002a70 <HAL_ADC_MspInit+0x88>)
 8002a0c:	699a      	ldr	r2, [r3, #24]
 8002a0e:	4b18      	ldr	r3, [pc, #96]	; (8002a70 <HAL_ADC_MspInit+0x88>)
 8002a10:	2180      	movs	r1, #128	; 0x80
 8002a12:	0089      	lsls	r1, r1, #2
 8002a14:	430a      	orrs	r2, r1
 8002a16:	619a      	str	r2, [r3, #24]
 8002a18:	4b15      	ldr	r3, [pc, #84]	; (8002a70 <HAL_ADC_MspInit+0x88>)
 8002a1a:	699a      	ldr	r2, [r3, #24]
 8002a1c:	2380      	movs	r3, #128	; 0x80
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4013      	ands	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
 8002a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a26:	4b12      	ldr	r3, [pc, #72]	; (8002a70 <HAL_ADC_MspInit+0x88>)
 8002a28:	695a      	ldr	r2, [r3, #20]
 8002a2a:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <HAL_ADC_MspInit+0x88>)
 8002a2c:	2180      	movs	r1, #128	; 0x80
 8002a2e:	0289      	lsls	r1, r1, #10
 8002a30:	430a      	orrs	r2, r1
 8002a32:	615a      	str	r2, [r3, #20]
 8002a34:	4b0e      	ldr	r3, [pc, #56]	; (8002a70 <HAL_ADC_MspInit+0x88>)
 8002a36:	695a      	ldr	r2, [r3, #20]
 8002a38:	2380      	movs	r3, #128	; 0x80
 8002a3a:	029b      	lsls	r3, r3, #10
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002a42:	193b      	adds	r3, r7, r4
 8002a44:	2260      	movs	r2, #96	; 0x60
 8002a46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a48:	193b      	adds	r3, r7, r4
 8002a4a:	2203      	movs	r2, #3
 8002a4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4e:	193b      	adds	r3, r7, r4
 8002a50:	2200      	movs	r2, #0
 8002a52:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a54:	193a      	adds	r2, r7, r4
 8002a56:	2390      	movs	r3, #144	; 0x90
 8002a58:	05db      	lsls	r3, r3, #23
 8002a5a:	0011      	movs	r1, r2
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f000 fefd 	bl	800385c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	46bd      	mov	sp, r7
 8002a66:	b00b      	add	sp, #44	; 0x2c
 8002a68:	bd90      	pop	{r4, r7, pc}
 8002a6a:	46c0      	nop			; (mov r8, r8)
 8002a6c:	40012400 	.word	0x40012400
 8002a70:	40021000 	.word	0x40021000

08002a74 <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a09      	ldr	r2, [pc, #36]	; (8002aa8 <HAL_ADC_MspDeInit+0x34>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d10b      	bne.n	8002a9e <HAL_ADC_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8002a86:	4b09      	ldr	r3, [pc, #36]	; (8002aac <HAL_ADC_MspDeInit+0x38>)
 8002a88:	699a      	ldr	r2, [r3, #24]
 8002a8a:	4b08      	ldr	r3, [pc, #32]	; (8002aac <HAL_ADC_MspDeInit+0x38>)
 8002a8c:	4908      	ldr	r1, [pc, #32]	; (8002ab0 <HAL_ADC_MspDeInit+0x3c>)
 8002a8e:	400a      	ands	r2, r1
 8002a90:	619a      	str	r2, [r3, #24]

    /**ADC GPIO Configuration
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6);
 8002a92:	2390      	movs	r3, #144	; 0x90
 8002a94:	05db      	lsls	r3, r3, #23
 8002a96:	2160      	movs	r1, #96	; 0x60
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f001 f84f 	bl	8003b3c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	b002      	add	sp, #8
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	40012400 	.word	0x40012400
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	fffffdff 	.word	0xfffffdff

08002ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ab8:	e7fe      	b.n	8002ab8 <NMI_Handler+0x4>

08002aba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002abe:	e7fe      	b.n	8002abe <HardFault_Handler+0x4>

08002ac0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002ac4:	46c0      	nop			; (mov r8, r8)
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ad8:	f000 f87a 	bl	8002bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002adc:	46c0      	nop			; (mov r8, r8)
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002aec:	480d      	ldr	r0, [pc, #52]	; (8002b24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002aee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002af0:	480d      	ldr	r0, [pc, #52]	; (8002b28 <LoopForever+0x6>)
  ldr r1, =_edata
 8002af2:	490e      	ldr	r1, [pc, #56]	; (8002b2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002af4:	4a0e      	ldr	r2, [pc, #56]	; (8002b30 <LoopForever+0xe>)
  movs r3, #0
 8002af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002af8:	e002      	b.n	8002b00 <LoopCopyDataInit>

08002afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002afe:	3304      	adds	r3, #4

08002b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b04:	d3f9      	bcc.n	8002afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b06:	4a0b      	ldr	r2, [pc, #44]	; (8002b34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b08:	4c0b      	ldr	r4, [pc, #44]	; (8002b38 <LoopForever+0x16>)
  movs r3, #0
 8002b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b0c:	e001      	b.n	8002b12 <LoopFillZerobss>

08002b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b10:	3204      	adds	r2, #4

08002b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b14:	d3fb      	bcc.n	8002b0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002b16:	f7ff ffe4 	bl	8002ae2 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002b1a:	f001 fd49 	bl	80045b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b1e:	f7ff fe15 	bl	800274c <main>

08002b22 <LoopForever>:

LoopForever:
    b LoopForever
 8002b22:	e7fe      	b.n	8002b22 <LoopForever>
  ldr   r0, =_estack
 8002b24:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b2c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002b30:	08004758 	.word	0x08004758
  ldr r2, =_sbss
 8002b34:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002b38:	200000a4 	.word	0x200000a4

08002b3c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b3c:	e7fe      	b.n	8002b3c <ADC1_COMP_IRQHandler>
	...

08002b40 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b44:	4b07      	ldr	r3, [pc, #28]	; (8002b64 <HAL_Init+0x24>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <HAL_Init+0x24>)
 8002b4a:	2110      	movs	r1, #16
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002b50:	2000      	movs	r0, #0
 8002b52:	f000 f809 	bl	8002b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b56:	f7ff ff23 	bl	80029a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	40022000 	.word	0x40022000

08002b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b68:	b590      	push	{r4, r7, lr}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b70:	4b14      	ldr	r3, [pc, #80]	; (8002bc4 <HAL_InitTick+0x5c>)
 8002b72:	681c      	ldr	r4, [r3, #0]
 8002b74:	4b14      	ldr	r3, [pc, #80]	; (8002bc8 <HAL_InitTick+0x60>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	0019      	movs	r1, r3
 8002b7a:	23fa      	movs	r3, #250	; 0xfa
 8002b7c:	0098      	lsls	r0, r3, #2
 8002b7e:	f7fd fac3 	bl	8000108 <__udivsi3>
 8002b82:	0003      	movs	r3, r0
 8002b84:	0019      	movs	r1, r3
 8002b86:	0020      	movs	r0, r4
 8002b88:	f7fd fabe 	bl	8000108 <__udivsi3>
 8002b8c:	0003      	movs	r3, r0
 8002b8e:	0018      	movs	r0, r3
 8002b90:	f000 fe57 	bl	8003842 <HAL_SYSTICK_Config>
 8002b94:	1e03      	subs	r3, r0, #0
 8002b96:	d001      	beq.n	8002b9c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e00f      	b.n	8002bbc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b03      	cmp	r3, #3
 8002ba0:	d80b      	bhi.n	8002bba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	425b      	negs	r3, r3
 8002ba8:	2200      	movs	r2, #0
 8002baa:	0018      	movs	r0, r3
 8002bac:	f000 fe34 	bl	8003818 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bb0:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <HAL_InitTick+0x64>)
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	e000      	b.n	8002bbc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
}
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	b003      	add	sp, #12
 8002bc2:	bd90      	pop	{r4, r7, pc}
 8002bc4:	20000004 	.word	0x20000004
 8002bc8:	2000000c 	.word	0x2000000c
 8002bcc:	20000008 	.word	0x20000008

08002bd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bd4:	4b05      	ldr	r3, [pc, #20]	; (8002bec <HAL_IncTick+0x1c>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	001a      	movs	r2, r3
 8002bda:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <HAL_IncTick+0x20>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	18d2      	adds	r2, r2, r3
 8002be0:	4b03      	ldr	r3, [pc, #12]	; (8002bf0 <HAL_IncTick+0x20>)
 8002be2:	601a      	str	r2, [r3, #0]
}
 8002be4:	46c0      	nop			; (mov r8, r8)
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	46c0      	nop			; (mov r8, r8)
 8002bec:	2000000c 	.word	0x2000000c
 8002bf0:	200000a0 	.word	0x200000a0

08002bf4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8002bf8:	4b02      	ldr	r3, [pc, #8]	; (8002c04 <HAL_GetTick+0x10>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
}
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	200000a0 	.word	0x200000a0

08002c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c10:	f7ff fff0 	bl	8002bf4 <HAL_GetTick>
 8002c14:	0003      	movs	r3, r0
 8002c16:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	d005      	beq.n	8002c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c22:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <HAL_Delay+0x44>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	001a      	movs	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	189b      	adds	r3, r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002c2e:	46c0      	nop			; (mov r8, r8)
 8002c30:	f7ff ffe0 	bl	8002bf4 <HAL_GetTick>
 8002c34:	0002      	movs	r2, r0
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d8f7      	bhi.n	8002c30 <HAL_Delay+0x28>
  {
  }
}
 8002c40:	46c0      	nop			; (mov r8, r8)
 8002c42:	46c0      	nop			; (mov r8, r8)
 8002c44:	46bd      	mov	sp, r7
 8002c46:	b004      	add	sp, #16
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	46c0      	nop			; (mov r8, r8)
 8002c4c:	2000000c 	.word	0x2000000c

08002c50 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c58:	230f      	movs	r3, #15
 8002c5a:	18fb      	adds	r3, r7, r3
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e125      	b.n	8002eba <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10a      	bne.n	8002c8c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2234      	movs	r2, #52	; 0x34
 8002c80:	2100      	movs	r1, #0
 8002c82:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	0018      	movs	r0, r3
 8002c88:	f7ff feae 	bl	80029e8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c90:	2210      	movs	r2, #16
 8002c92:	4013      	ands	r3, r2
 8002c94:	d000      	beq.n	8002c98 <HAL_ADC_Init+0x48>
 8002c96:	e103      	b.n	8002ea0 <HAL_ADC_Init+0x250>
 8002c98:	230f      	movs	r3, #15
 8002c9a:	18fb      	adds	r3, r7, r3
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d000      	beq.n	8002ca4 <HAL_ADC_Init+0x54>
 8002ca2:	e0fd      	b.n	8002ea0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	2204      	movs	r2, #4
 8002cac:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002cae:	d000      	beq.n	8002cb2 <HAL_ADC_Init+0x62>
 8002cb0:	e0f6      	b.n	8002ea0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb6:	4a83      	ldr	r2, [pc, #524]	; (8002ec4 <HAL_ADC_Init+0x274>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	2202      	movs	r2, #2
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	2203      	movs	r2, #3
 8002cca:	4013      	ands	r3, r2
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d112      	bne.n	8002cf6 <HAL_ADC_Init+0xa6>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	4013      	ands	r3, r2
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d009      	beq.n	8002cf2 <HAL_ADC_Init+0xa2>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68da      	ldr	r2, [r3, #12]
 8002ce4:	2380      	movs	r3, #128	; 0x80
 8002ce6:	021b      	lsls	r3, r3, #8
 8002ce8:	401a      	ands	r2, r3
 8002cea:	2380      	movs	r3, #128	; 0x80
 8002cec:	021b      	lsls	r3, r3, #8
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d101      	bne.n	8002cf6 <HAL_ADC_Init+0xa6>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <HAL_ADC_Init+0xa8>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d116      	bne.n	8002d2a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	2218      	movs	r2, #24
 8002d04:	4393      	bics	r3, r2
 8002d06:	0019      	movs	r1, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	0899      	lsrs	r1, r3, #2
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68da      	ldr	r2, [r3, #12]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4964      	ldr	r1, [pc, #400]	; (8002ec8 <HAL_ADC_Init+0x278>)
 8002d36:	400a      	ands	r2, r1
 8002d38:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	7e1b      	ldrb	r3, [r3, #24]
 8002d3e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	7e5b      	ldrb	r3, [r3, #25]
 8002d44:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d46:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	7e9b      	ldrb	r3, [r3, #26]
 8002d4c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002d4e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d002      	beq.n	8002d5e <HAL_ADC_Init+0x10e>
 8002d58:	2380      	movs	r3, #128	; 0x80
 8002d5a:	015b      	lsls	r3, r3, #5
 8002d5c:	e000      	b.n	8002d60 <HAL_ADC_Init+0x110>
 8002d5e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002d60:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002d66:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d101      	bne.n	8002d74 <HAL_ADC_Init+0x124>
 8002d70:	2304      	movs	r3, #4
 8002d72:	e000      	b.n	8002d76 <HAL_ADC_Init+0x126>
 8002d74:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002d76:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2124      	movs	r1, #36	; 0x24
 8002d7c:	5c5b      	ldrb	r3, [r3, r1]
 8002d7e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002d80:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	7edb      	ldrb	r3, [r3, #27]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d115      	bne.n	8002dbc <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	7e9b      	ldrb	r3, [r3, #26]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d105      	bne.n	8002da4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2280      	movs	r2, #128	; 0x80
 8002d9c:	0252      	lsls	r2, r2, #9
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	60bb      	str	r3, [r7, #8]
 8002da2:	e00b      	b.n	8002dbc <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da8:	2220      	movs	r2, #32
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db4:	2201      	movs	r2, #1
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	69da      	ldr	r2, [r3, #28]
 8002dc0:	23c2      	movs	r3, #194	; 0xc2
 8002dc2:	33ff      	adds	r3, #255	; 0xff
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d007      	beq.n	8002dd8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68d9      	ldr	r1, [r3, #12]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dec:	2380      	movs	r3, #128	; 0x80
 8002dee:	055b      	lsls	r3, r3, #21
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d01b      	beq.n	8002e2c <HAL_ADC_Init+0x1dc>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d017      	beq.n	8002e2c <HAL_ADC_Init+0x1dc>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d013      	beq.n	8002e2c <HAL_ADC_Init+0x1dc>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d00f      	beq.n	8002e2c <HAL_ADC_Init+0x1dc>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d00b      	beq.n	8002e2c <HAL_ADC_Init+0x1dc>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e18:	2b05      	cmp	r3, #5
 8002e1a:	d007      	beq.n	8002e2c <HAL_ADC_Init+0x1dc>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	2b06      	cmp	r3, #6
 8002e22:	d003      	beq.n	8002e2c <HAL_ADC_Init+0x1dc>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e28:	2b07      	cmp	r3, #7
 8002e2a:	d112      	bne.n	8002e52 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695a      	ldr	r2, [r3, #20]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2107      	movs	r1, #7
 8002e38:	438a      	bics	r2, r1
 8002e3a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6959      	ldr	r1, [r3, #20]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e46:	2207      	movs	r2, #7
 8002e48:	401a      	ands	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	4a1c      	ldr	r2, [pc, #112]	; (8002ecc <HAL_ADC_Init+0x27c>)
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	68ba      	ldr	r2, [r7, #8]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d10b      	bne.n	8002e7a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6c:	2203      	movs	r2, #3
 8002e6e:	4393      	bics	r3, r2
 8002e70:	2201      	movs	r2, #1
 8002e72:	431a      	orrs	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002e78:	e01c      	b.n	8002eb4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7e:	2212      	movs	r2, #18
 8002e80:	4393      	bics	r3, r2
 8002e82:	2210      	movs	r2, #16
 8002e84:	431a      	orrs	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8e:	2201      	movs	r2, #1
 8002e90:	431a      	orrs	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002e96:	230f      	movs	r3, #15
 8002e98:	18fb      	adds	r3, r7, r3
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002e9e:	e009      	b.n	8002eb4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea4:	2210      	movs	r2, #16
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002eac:	230f      	movs	r3, #15
 8002eae:	18fb      	adds	r3, r7, r3
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002eb4:	230f      	movs	r3, #15
 8002eb6:	18fb      	adds	r3, r7, r3
 8002eb8:	781b      	ldrb	r3, [r3, #0]
}
 8002eba:	0018      	movs	r0, r3
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	b004      	add	sp, #16
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	fffffefd 	.word	0xfffffefd
 8002ec8:	fffe0219 	.word	0xfffe0219
 8002ecc:	833fffe7 	.word	0x833fffe7

08002ed0 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8002ed0:	b5b0      	push	{r4, r5, r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ed8:	230f      	movs	r3, #15
 8002eda:	18fb      	adds	r3, r7, r3
 8002edc:	2200      	movs	r2, #0
 8002ede:	701a      	strb	r2, [r3, #0]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_ADC_DeInit+0x1a>
  {
     return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e06f      	b.n	8002fca <HAL_ADC_DeInit+0xfa>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eee:	2202      	movs	r2, #2
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002ef6:	250f      	movs	r5, #15
 8002ef8:	197c      	adds	r4, r7, r5
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	0018      	movs	r0, r3
 8002efe:	f000 fbac 	bl	800365a <ADC_ConversionStop>
 8002f02:	0003      	movs	r3, r0
 8002f04:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002f06:	197b      	adds	r3, r7, r5
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10d      	bne.n	8002f2a <HAL_ADC_DeInit+0x5a>
  {   
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002f0e:	197c      	adds	r4, r7, r5
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	0018      	movs	r0, r3
 8002f14:	f000 fb30 	bl	8003578 <ADC_Disable>
 8002f18:	0003      	movs	r3, r0
 8002f1a:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status != HAL_ERROR)
 8002f1c:	197b      	adds	r3, r7, r5
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d002      	beq.n	8002f2a <HAL_ADC_DeInit+0x5a>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (tmp_hal_status != HAL_ERROR)
 8002f2a:	230f      	movs	r3, #15
 8002f2c:	18fb      	adds	r3, r7, r3
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d043      	beq.n	8002fbc <HAL_ADC_DeInit+0xec>
  {
  
    /* ========== Reset ADC registers ========== */
    /* Reset register IER */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD   | ADC_IT_OVR  |
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	219f      	movs	r1, #159	; 0x9f
 8002f40:	438a      	bics	r2, r1
 8002f42:	605a      	str	r2, [r3, #4]
                                ADC_IT_EOS   | ADC_IT_EOC  |
                                ADC_IT_EOSMP | ADC_IT_RDY   ) );
        
    /* Reset register ISR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD   | ADC_FLAG_OVR  |
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	229f      	movs	r2, #159	; 0x9f
 8002f4a:	601a      	str	r2, [r3, #0]
    /* Reset register CR */
    /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
    /* "read-set": no direct reset applicable.                                */

    /* Reset register CFGR1 */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH   | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | ADC_CFGR1_DISCEN |
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	491f      	ldr	r1, [pc, #124]	; (8002fd4 <HAL_ADC_DeInit+0x104>)
 8002f58:	400a      	ands	r2, r1
 8002f5a:	60da      	str	r2, [r3, #12]
                               ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN                      );
    
    /* Reset register CFGR2 */
    /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
    /*       already done above.                                              */
    hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	691a      	ldr	r2, [r3, #16]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	0092      	lsls	r2, r2, #2
 8002f68:	0892      	lsrs	r2, r2, #2
 8002f6a:	611a      	str	r2, [r3, #16]
    
    /* Reset register SMPR */
    hadc->Instance->SMPR &= ~ADC_SMPR_SMP;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695a      	ldr	r2, [r3, #20]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2107      	movs	r1, #7
 8002f78:	438a      	bics	r2, r1
 8002f7a:	615a      	str	r2, [r3, #20]
    
    /* Reset register TR1 */
    hadc->Instance->TR &= ~(ADC_TR_HT | ADC_TR_LT);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6a1a      	ldr	r2, [r3, #32]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4914      	ldr	r1, [pc, #80]	; (8002fd8 <HAL_ADC_DeInit+0x108>)
 8002f88:	400a      	ands	r2, r1
 8002f8a:	621a      	str	r2, [r3, #32]
    
    /* Reset register CHSELR */
    hadc->Instance->CHSELR &= ~(ADC_CHSELR_CHSEL18 | ADC_CHSELR_CHSEL17 | ADC_CHSELR_CHSEL16 |
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	0cd2      	lsrs	r2, r2, #19
 8002f98:	04d2      	lsls	r2, r2, #19
 8002f9a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Reset register DR */
    /* bits in access mode read only, no direct reset applicable*/
    
    /* Reset register CCR */
    ADC->CCR &= ~(ADC_CCR_ALL);
 8002f9c:	4b0f      	ldr	r3, [pc, #60]	; (8002fdc <HAL_ADC_DeInit+0x10c>)
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	4b0e      	ldr	r3, [pc, #56]	; (8002fdc <HAL_ADC_DeInit+0x10c>)
 8002fa2:	490f      	ldr	r1, [pc, #60]	; (8002fe0 <HAL_ADC_DeInit+0x110>)
 8002fa4:	400a      	ands	r2, r1
 8002fa6:	601a      	str	r2, [r3, #0]
    
    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	0018      	movs	r0, r3
 8002fac:	f7ff fd62 	bl	8002a74 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET; 
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2234      	movs	r2, #52	; 0x34
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002fc4:	230f      	movs	r3, #15
 8002fc6:	18fb      	adds	r3, r7, r3
 8002fc8:	781b      	ldrb	r3, [r3, #0]
}
 8002fca:	0018      	movs	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	b004      	add	sp, #16
 8002fd0:	bdb0      	pop	{r4, r5, r7, pc}
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	833e0200 	.word	0x833e0200
 8002fd8:	f000f000 	.word	0xf000f000
 8002fdc:	40012708 	.word	0x40012708
 8002fe0:	fe3fffff 	.word	0xfe3fffff

08002fe4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002fe4:	b590      	push	{r4, r7, lr}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fec:	230f      	movs	r3, #15
 8002fee:	18fb      	adds	r3, r7, r3
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	2204      	movs	r2, #4
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d138      	bne.n	8003072 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2234      	movs	r2, #52	; 0x34
 8003004:	5c9b      	ldrb	r3, [r3, r2]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <HAL_ADC_Start+0x2a>
 800300a:	2302      	movs	r3, #2
 800300c:	e038      	b.n	8003080 <HAL_ADC_Start+0x9c>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2234      	movs	r2, #52	; 0x34
 8003012:	2101      	movs	r1, #1
 8003014:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	7e5b      	ldrb	r3, [r3, #25]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d007      	beq.n	800302e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800301e:	230f      	movs	r3, #15
 8003020:	18fc      	adds	r4, r7, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	0018      	movs	r0, r3
 8003026:	f000 fa23 	bl	8003470 <ADC_Enable>
 800302a:	0003      	movs	r3, r0
 800302c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800302e:	230f      	movs	r3, #15
 8003030:	18fb      	adds	r3, r7, r3
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d120      	bne.n	800307a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303c:	4a12      	ldr	r2, [pc, #72]	; (8003088 <HAL_ADC_Start+0xa4>)
 800303e:	4013      	ands	r3, r2
 8003040:	2280      	movs	r2, #128	; 0x80
 8003042:	0052      	lsls	r2, r2, #1
 8003044:	431a      	orrs	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2234      	movs	r2, #52	; 0x34
 8003054:	2100      	movs	r1, #0
 8003056:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	221c      	movs	r2, #28
 800305e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2104      	movs	r1, #4
 800306c:	430a      	orrs	r2, r1
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	e003      	b.n	800307a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003072:	230f      	movs	r3, #15
 8003074:	18fb      	adds	r3, r7, r3
 8003076:	2202      	movs	r2, #2
 8003078:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800307a:	230f      	movs	r3, #15
 800307c:	18fb      	adds	r3, r7, r3
 800307e:	781b      	ldrb	r3, [r3, #0]
}
 8003080:	0018      	movs	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	b005      	add	sp, #20
 8003086:	bd90      	pop	{r4, r7, pc}
 8003088:	fffff0fe 	.word	0xfffff0fe

0800308c <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 800308c:	b5b0      	push	{r4, r5, r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003094:	230f      	movs	r3, #15
 8003096:	18fb      	adds	r3, r7, r3
 8003098:	2200      	movs	r2, #0
 800309a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2234      	movs	r2, #52	; 0x34
 80030a0:	5c9b      	ldrb	r3, [r3, r2]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d101      	bne.n	80030aa <HAL_ADC_Stop+0x1e>
 80030a6:	2302      	movs	r3, #2
 80030a8:	e029      	b.n	80030fe <HAL_ADC_Stop+0x72>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2234      	movs	r2, #52	; 0x34
 80030ae:	2101      	movs	r1, #1
 80030b0:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80030b2:	250f      	movs	r5, #15
 80030b4:	197c      	adds	r4, r7, r5
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	0018      	movs	r0, r3
 80030ba:	f000 face 	bl	800365a <ADC_ConversionStop>
 80030be:	0003      	movs	r3, r0
 80030c0:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80030c2:	197b      	adds	r3, r7, r5
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d112      	bne.n	80030f0 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80030ca:	197c      	adds	r4, r7, r5
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	0018      	movs	r0, r3
 80030d0:	f000 fa52 	bl	8003578 <ADC_Disable>
 80030d4:	0003      	movs	r3, r0
 80030d6:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80030d8:	197b      	adds	r3, r7, r5
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d107      	bne.n	80030f0 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e4:	4a08      	ldr	r2, [pc, #32]	; (8003108 <HAL_ADC_Stop+0x7c>)
 80030e6:	4013      	ands	r3, r2
 80030e8:	2201      	movs	r2, #1
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2234      	movs	r2, #52	; 0x34
 80030f4:	2100      	movs	r1, #0
 80030f6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80030f8:	230f      	movs	r3, #15
 80030fa:	18fb      	adds	r3, r7, r3
 80030fc:	781b      	ldrb	r3, [r3, #0]
}
 80030fe:	0018      	movs	r0, r3
 8003100:	46bd      	mov	sp, r7
 8003102:	b004      	add	sp, #16
 8003104:	bdb0      	pop	{r4, r5, r7, pc}
 8003106:	46c0      	nop			; (mov r8, r8)
 8003108:	fffffefe 	.word	0xfffffefe

0800310c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	2b08      	cmp	r3, #8
 800311c:	d102      	bne.n	8003124 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800311e:	2308      	movs	r3, #8
 8003120:	60fb      	str	r3, [r7, #12]
 8003122:	e014      	b.n	800314e <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	2201      	movs	r2, #1
 800312c:	4013      	ands	r3, r2
 800312e:	2b01      	cmp	r3, #1
 8003130:	d10b      	bne.n	800314a <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003136:	2220      	movs	r2, #32
 8003138:	431a      	orrs	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2234      	movs	r2, #52	; 0x34
 8003142:	2100      	movs	r1, #0
 8003144:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e071      	b.n	800322e <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800314a:	230c      	movs	r3, #12
 800314c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800314e:	f7ff fd51 	bl	8002bf4 <HAL_GetTick>
 8003152:	0003      	movs	r3, r0
 8003154:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003156:	e01f      	b.n	8003198 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	3301      	adds	r3, #1
 800315c:	d01c      	beq.n	8003198 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d007      	beq.n	8003174 <HAL_ADC_PollForConversion+0x68>
 8003164:	f7ff fd46 	bl	8002bf4 <HAL_GetTick>
 8003168:	0002      	movs	r2, r0
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	429a      	cmp	r2, r3
 8003172:	d211      	bcs.n	8003198 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	4013      	ands	r3, r2
 800317e:	d10b      	bne.n	8003198 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003184:	2204      	movs	r2, #4
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2234      	movs	r2, #52	; 0x34
 8003190:	2100      	movs	r1, #0
 8003192:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e04a      	b.n	800322e <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	4013      	ands	r3, r2
 80031a2:	d0d9      	beq.n	8003158 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a8:	2280      	movs	r2, #128	; 0x80
 80031aa:	0092      	lsls	r2, r2, #2
 80031ac:	431a      	orrs	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68da      	ldr	r2, [r3, #12]
 80031b8:	23c0      	movs	r3, #192	; 0xc0
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	4013      	ands	r3, r2
 80031be:	d12d      	bne.n	800321c <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d129      	bne.n	800321c <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2208      	movs	r2, #8
 80031d0:	4013      	ands	r3, r2
 80031d2:	2b08      	cmp	r3, #8
 80031d4:	d122      	bne.n	800321c <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	2204      	movs	r2, #4
 80031de:	4013      	ands	r3, r2
 80031e0:	d110      	bne.n	8003204 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	210c      	movs	r1, #12
 80031ee:	438a      	bics	r2, r1
 80031f0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f6:	4a10      	ldr	r2, [pc, #64]	; (8003238 <HAL_ADC_PollForConversion+0x12c>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	2201      	movs	r2, #1
 80031fc:	431a      	orrs	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	639a      	str	r2, [r3, #56]	; 0x38
 8003202:	e00b      	b.n	800321c <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003208:	2220      	movs	r2, #32
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003214:	2201      	movs	r2, #1
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	7e1b      	ldrb	r3, [r3, #24]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d103      	bne.n	800322c <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	220c      	movs	r2, #12
 800322a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	0018      	movs	r0, r3
 8003230:	46bd      	mov	sp, r7
 8003232:	b004      	add	sp, #16
 8003234:	bd80      	pop	{r7, pc}
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	fffffefe 	.word	0xfffffefe

0800323c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800324a:	0018      	movs	r0, r3
 800324c:	46bd      	mov	sp, r7
 800324e:	b002      	add	sp, #8
 8003250:	bd80      	pop	{r7, pc}
	...

08003254 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800325e:	230f      	movs	r3, #15
 8003260:	18fb      	adds	r3, r7, r3
 8003262:	2200      	movs	r2, #0
 8003264:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003266:	2300      	movs	r3, #0
 8003268:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800326e:	2380      	movs	r3, #128	; 0x80
 8003270:	055b      	lsls	r3, r3, #21
 8003272:	429a      	cmp	r2, r3
 8003274:	d011      	beq.n	800329a <HAL_ADC_ConfigChannel+0x46>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327a:	2b01      	cmp	r3, #1
 800327c:	d00d      	beq.n	800329a <HAL_ADC_ConfigChannel+0x46>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003282:	2b02      	cmp	r3, #2
 8003284:	d009      	beq.n	800329a <HAL_ADC_ConfigChannel+0x46>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328a:	2b03      	cmp	r3, #3
 800328c:	d005      	beq.n	800329a <HAL_ADC_ConfigChannel+0x46>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003292:	2b04      	cmp	r3, #4
 8003294:	d001      	beq.n	800329a <HAL_ADC_ConfigChannel+0x46>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2234      	movs	r2, #52	; 0x34
 800329e:	5c9b      	ldrb	r3, [r3, r2]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d101      	bne.n	80032a8 <HAL_ADC_ConfigChannel+0x54>
 80032a4:	2302      	movs	r3, #2
 80032a6:	e0d0      	b.n	800344a <HAL_ADC_ConfigChannel+0x1f6>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2234      	movs	r2, #52	; 0x34
 80032ac:	2101      	movs	r1, #1
 80032ae:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2204      	movs	r2, #4
 80032b8:	4013      	ands	r3, r2
 80032ba:	d000      	beq.n	80032be <HAL_ADC_ConfigChannel+0x6a>
 80032bc:	e0b4      	b.n	8003428 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	4a64      	ldr	r2, [pc, #400]	; (8003454 <HAL_ADC_ConfigChannel+0x200>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d100      	bne.n	80032ca <HAL_ADC_ConfigChannel+0x76>
 80032c8:	e082      	b.n	80033d0 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2201      	movs	r2, #1
 80032d6:	409a      	lsls	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e4:	2380      	movs	r3, #128	; 0x80
 80032e6:	055b      	lsls	r3, r3, #21
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d037      	beq.n	800335c <HAL_ADC_ConfigChannel+0x108>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d033      	beq.n	800335c <HAL_ADC_ConfigChannel+0x108>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d02f      	beq.n	800335c <HAL_ADC_ConfigChannel+0x108>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003300:	2b03      	cmp	r3, #3
 8003302:	d02b      	beq.n	800335c <HAL_ADC_ConfigChannel+0x108>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003308:	2b04      	cmp	r3, #4
 800330a:	d027      	beq.n	800335c <HAL_ADC_ConfigChannel+0x108>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003310:	2b05      	cmp	r3, #5
 8003312:	d023      	beq.n	800335c <HAL_ADC_ConfigChannel+0x108>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003318:	2b06      	cmp	r3, #6
 800331a:	d01f      	beq.n	800335c <HAL_ADC_ConfigChannel+0x108>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	2b07      	cmp	r3, #7
 8003322:	d01b      	beq.n	800335c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	2107      	movs	r1, #7
 8003330:	400b      	ands	r3, r1
 8003332:	429a      	cmp	r2, r3
 8003334:	d012      	beq.n	800335c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695a      	ldr	r2, [r3, #20]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2107      	movs	r1, #7
 8003342:	438a      	bics	r2, r1
 8003344:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6959      	ldr	r1, [r3, #20]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	2207      	movs	r2, #7
 8003352:	401a      	ands	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2b10      	cmp	r3, #16
 8003362:	d007      	beq.n	8003374 <HAL_ADC_ConfigChannel+0x120>
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b11      	cmp	r3, #17
 800336a:	d003      	beq.n	8003374 <HAL_ADC_ConfigChannel+0x120>
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b12      	cmp	r3, #18
 8003372:	d163      	bne.n	800343c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003374:	4b38      	ldr	r3, [pc, #224]	; (8003458 <HAL_ADC_ConfigChannel+0x204>)
 8003376:	6819      	ldr	r1, [r3, #0]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2b10      	cmp	r3, #16
 800337e:	d009      	beq.n	8003394 <HAL_ADC_ConfigChannel+0x140>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b11      	cmp	r3, #17
 8003386:	d102      	bne.n	800338e <HAL_ADC_ConfigChannel+0x13a>
 8003388:	2380      	movs	r3, #128	; 0x80
 800338a:	03db      	lsls	r3, r3, #15
 800338c:	e004      	b.n	8003398 <HAL_ADC_ConfigChannel+0x144>
 800338e:	2380      	movs	r3, #128	; 0x80
 8003390:	045b      	lsls	r3, r3, #17
 8003392:	e001      	b.n	8003398 <HAL_ADC_ConfigChannel+0x144>
 8003394:	2380      	movs	r3, #128	; 0x80
 8003396:	041b      	lsls	r3, r3, #16
 8003398:	4a2f      	ldr	r2, [pc, #188]	; (8003458 <HAL_ADC_ConfigChannel+0x204>)
 800339a:	430b      	orrs	r3, r1
 800339c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b10      	cmp	r3, #16
 80033a4:	d14a      	bne.n	800343c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033a6:	4b2d      	ldr	r3, [pc, #180]	; (800345c <HAL_ADC_ConfigChannel+0x208>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	492d      	ldr	r1, [pc, #180]	; (8003460 <HAL_ADC_ConfigChannel+0x20c>)
 80033ac:	0018      	movs	r0, r3
 80033ae:	f7fc feab 	bl	8000108 <__udivsi3>
 80033b2:	0003      	movs	r3, r0
 80033b4:	001a      	movs	r2, r3
 80033b6:	0013      	movs	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	189b      	adds	r3, r3, r2
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033c0:	e002      	b.n	80033c8 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	3b01      	subs	r3, #1
 80033c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1f9      	bne.n	80033c2 <HAL_ADC_ConfigChannel+0x16e>
 80033ce:	e035      	b.n	800343c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2101      	movs	r1, #1
 80033dc:	4099      	lsls	r1, r3
 80033de:	000b      	movs	r3, r1
 80033e0:	43d9      	mvns	r1, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	400a      	ands	r2, r1
 80033e8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2b10      	cmp	r3, #16
 80033f0:	d007      	beq.n	8003402 <HAL_ADC_ConfigChannel+0x1ae>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2b11      	cmp	r3, #17
 80033f8:	d003      	beq.n	8003402 <HAL_ADC_ConfigChannel+0x1ae>
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2b12      	cmp	r3, #18
 8003400:	d11c      	bne.n	800343c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003402:	4b15      	ldr	r3, [pc, #84]	; (8003458 <HAL_ADC_ConfigChannel+0x204>)
 8003404:	6819      	ldr	r1, [r3, #0]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b10      	cmp	r3, #16
 800340c:	d007      	beq.n	800341e <HAL_ADC_ConfigChannel+0x1ca>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2b11      	cmp	r3, #17
 8003414:	d101      	bne.n	800341a <HAL_ADC_ConfigChannel+0x1c6>
 8003416:	4b13      	ldr	r3, [pc, #76]	; (8003464 <HAL_ADC_ConfigChannel+0x210>)
 8003418:	e002      	b.n	8003420 <HAL_ADC_ConfigChannel+0x1cc>
 800341a:	4b13      	ldr	r3, [pc, #76]	; (8003468 <HAL_ADC_ConfigChannel+0x214>)
 800341c:	e000      	b.n	8003420 <HAL_ADC_ConfigChannel+0x1cc>
 800341e:	4b13      	ldr	r3, [pc, #76]	; (800346c <HAL_ADC_ConfigChannel+0x218>)
 8003420:	4a0d      	ldr	r2, [pc, #52]	; (8003458 <HAL_ADC_ConfigChannel+0x204>)
 8003422:	400b      	ands	r3, r1
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	e009      	b.n	800343c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342c:	2220      	movs	r2, #32
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003434:	230f      	movs	r3, #15
 8003436:	18fb      	adds	r3, r7, r3
 8003438:	2201      	movs	r2, #1
 800343a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2234      	movs	r2, #52	; 0x34
 8003440:	2100      	movs	r1, #0
 8003442:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003444:	230f      	movs	r3, #15
 8003446:	18fb      	adds	r3, r7, r3
 8003448:	781b      	ldrb	r3, [r3, #0]
}
 800344a:	0018      	movs	r0, r3
 800344c:	46bd      	mov	sp, r7
 800344e:	b004      	add	sp, #16
 8003450:	bd80      	pop	{r7, pc}
 8003452:	46c0      	nop			; (mov r8, r8)
 8003454:	00001001 	.word	0x00001001
 8003458:	40012708 	.word	0x40012708
 800345c:	20000004 	.word	0x20000004
 8003460:	000f4240 	.word	0x000f4240
 8003464:	ffbfffff 	.word	0xffbfffff
 8003468:	feffffff 	.word	0xfeffffff
 800346c:	ff7fffff 	.word	0xff7fffff

08003470 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003478:	2300      	movs	r3, #0
 800347a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800347c:	2300      	movs	r3, #0
 800347e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	2203      	movs	r2, #3
 8003488:	4013      	ands	r3, r2
 800348a:	2b01      	cmp	r3, #1
 800348c:	d112      	bne.n	80034b4 <ADC_Enable+0x44>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2201      	movs	r2, #1
 8003496:	4013      	ands	r3, r2
 8003498:	2b01      	cmp	r3, #1
 800349a:	d009      	beq.n	80034b0 <ADC_Enable+0x40>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	2380      	movs	r3, #128	; 0x80
 80034a4:	021b      	lsls	r3, r3, #8
 80034a6:	401a      	ands	r2, r3
 80034a8:	2380      	movs	r3, #128	; 0x80
 80034aa:	021b      	lsls	r3, r3, #8
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d101      	bne.n	80034b4 <ADC_Enable+0x44>
 80034b0:	2301      	movs	r3, #1
 80034b2:	e000      	b.n	80034b6 <ADC_Enable+0x46>
 80034b4:	2300      	movs	r3, #0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d152      	bne.n	8003560 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	4a2a      	ldr	r2, [pc, #168]	; (800356c <ADC_Enable+0xfc>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	d00d      	beq.n	80034e2 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ca:	2210      	movs	r2, #16
 80034cc:	431a      	orrs	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d6:	2201      	movs	r2, #1
 80034d8:	431a      	orrs	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e03f      	b.n	8003562 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2101      	movs	r1, #1
 80034ee:	430a      	orrs	r2, r1
 80034f0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80034f2:	4b1f      	ldr	r3, [pc, #124]	; (8003570 <ADC_Enable+0x100>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	491f      	ldr	r1, [pc, #124]	; (8003574 <ADC_Enable+0x104>)
 80034f8:	0018      	movs	r0, r3
 80034fa:	f7fc fe05 	bl	8000108 <__udivsi3>
 80034fe:	0003      	movs	r3, r0
 8003500:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003502:	e002      	b.n	800350a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	3b01      	subs	r3, #1
 8003508:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1f9      	bne.n	8003504 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003510:	f7ff fb70 	bl	8002bf4 <HAL_GetTick>
 8003514:	0003      	movs	r3, r0
 8003516:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003518:	e01b      	b.n	8003552 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800351a:	f7ff fb6b 	bl	8002bf4 <HAL_GetTick>
 800351e:	0002      	movs	r2, r0
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d914      	bls.n	8003552 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2201      	movs	r2, #1
 8003530:	4013      	ands	r3, r2
 8003532:	2b01      	cmp	r3, #1
 8003534:	d00d      	beq.n	8003552 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353a:	2210      	movs	r2, #16
 800353c:	431a      	orrs	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003546:	2201      	movs	r2, #1
 8003548:	431a      	orrs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e007      	b.n	8003562 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2201      	movs	r2, #1
 800355a:	4013      	ands	r3, r2
 800355c:	2b01      	cmp	r3, #1
 800355e:	d1dc      	bne.n	800351a <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	0018      	movs	r0, r3
 8003564:	46bd      	mov	sp, r7
 8003566:	b004      	add	sp, #16
 8003568:	bd80      	pop	{r7, pc}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	80000017 	.word	0x80000017
 8003570:	20000004 	.word	0x20000004
 8003574:	000f4240 	.word	0x000f4240

08003578 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	2203      	movs	r2, #3
 800358c:	4013      	ands	r3, r2
 800358e:	2b01      	cmp	r3, #1
 8003590:	d112      	bne.n	80035b8 <ADC_Disable+0x40>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2201      	movs	r2, #1
 800359a:	4013      	ands	r3, r2
 800359c:	2b01      	cmp	r3, #1
 800359e:	d009      	beq.n	80035b4 <ADC_Disable+0x3c>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68da      	ldr	r2, [r3, #12]
 80035a6:	2380      	movs	r3, #128	; 0x80
 80035a8:	021b      	lsls	r3, r3, #8
 80035aa:	401a      	ands	r2, r3
 80035ac:	2380      	movs	r3, #128	; 0x80
 80035ae:	021b      	lsls	r3, r3, #8
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d101      	bne.n	80035b8 <ADC_Disable+0x40>
 80035b4:	2301      	movs	r3, #1
 80035b6:	e000      	b.n	80035ba <ADC_Disable+0x42>
 80035b8:	2300      	movs	r3, #0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d048      	beq.n	8003650 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	2205      	movs	r2, #5
 80035c6:	4013      	ands	r3, r2
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d110      	bne.n	80035ee <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689a      	ldr	r2, [r3, #8]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2102      	movs	r1, #2
 80035d8:	430a      	orrs	r2, r1
 80035da:	609a      	str	r2, [r3, #8]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2203      	movs	r2, #3
 80035e2:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80035e4:	f7ff fb06 	bl	8002bf4 <HAL_GetTick>
 80035e8:	0003      	movs	r3, r0
 80035ea:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80035ec:	e029      	b.n	8003642 <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f2:	2210      	movs	r2, #16
 80035f4:	431a      	orrs	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fe:	2201      	movs	r2, #1
 8003600:	431a      	orrs	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e023      	b.n	8003652 <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800360a:	f7ff faf3 	bl	8002bf4 <HAL_GetTick>
 800360e:	0002      	movs	r2, r0
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d914      	bls.n	8003642 <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	2201      	movs	r2, #1
 8003620:	4013      	ands	r3, r2
 8003622:	2b01      	cmp	r3, #1
 8003624:	d10d      	bne.n	8003642 <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362a:	2210      	movs	r2, #16
 800362c:	431a      	orrs	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003636:	2201      	movs	r2, #1
 8003638:	431a      	orrs	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e007      	b.n	8003652 <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	2201      	movs	r2, #1
 800364a:	4013      	ands	r3, r2
 800364c:	2b01      	cmp	r3, #1
 800364e:	d0dc      	beq.n	800360a <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	0018      	movs	r0, r3
 8003654:	46bd      	mov	sp, r7
 8003656:	b004      	add	sp, #16
 8003658:	bd80      	pop	{r7, pc}

0800365a <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b084      	sub	sp, #16
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003662:	2300      	movs	r3, #0
 8003664:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	2204      	movs	r2, #4
 800366e:	4013      	ands	r3, r2
 8003670:	d03a      	beq.n	80036e8 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2204      	movs	r2, #4
 800367a:	4013      	ands	r3, r2
 800367c:	2b04      	cmp	r3, #4
 800367e:	d10d      	bne.n	800369c <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	2202      	movs	r2, #2
 8003688:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800368a:	d107      	bne.n	800369c <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689a      	ldr	r2, [r3, #8]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2110      	movs	r1, #16
 8003698:	430a      	orrs	r2, r1
 800369a:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800369c:	f7ff faaa 	bl	8002bf4 <HAL_GetTick>
 80036a0:	0003      	movs	r3, r0
 80036a2:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80036a4:	e01a      	b.n	80036dc <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80036a6:	f7ff faa5 	bl	8002bf4 <HAL_GetTick>
 80036aa:	0002      	movs	r2, r0
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d913      	bls.n	80036dc <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	2204      	movs	r2, #4
 80036bc:	4013      	ands	r3, r2
 80036be:	d00d      	beq.n	80036dc <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c4:	2210      	movs	r2, #16
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d0:	2201      	movs	r2, #1
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e006      	b.n	80036ea <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2204      	movs	r2, #4
 80036e4:	4013      	ands	r3, r2
 80036e6:	d1de      	bne.n	80036a6 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	0018      	movs	r0, r3
 80036ec:	46bd      	mov	sp, r7
 80036ee:	b004      	add	sp, #16
 80036f0:	bd80      	pop	{r7, pc}
	...

080036f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036f4:	b590      	push	{r4, r7, lr}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	0002      	movs	r2, r0
 80036fc:	6039      	str	r1, [r7, #0]
 80036fe:	1dfb      	adds	r3, r7, #7
 8003700:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003702:	1dfb      	adds	r3, r7, #7
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	2b7f      	cmp	r3, #127	; 0x7f
 8003708:	d828      	bhi.n	800375c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800370a:	4a2f      	ldr	r2, [pc, #188]	; (80037c8 <__NVIC_SetPriority+0xd4>)
 800370c:	1dfb      	adds	r3, r7, #7
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	b25b      	sxtb	r3, r3
 8003712:	089b      	lsrs	r3, r3, #2
 8003714:	33c0      	adds	r3, #192	; 0xc0
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	589b      	ldr	r3, [r3, r2]
 800371a:	1dfa      	adds	r2, r7, #7
 800371c:	7812      	ldrb	r2, [r2, #0]
 800371e:	0011      	movs	r1, r2
 8003720:	2203      	movs	r2, #3
 8003722:	400a      	ands	r2, r1
 8003724:	00d2      	lsls	r2, r2, #3
 8003726:	21ff      	movs	r1, #255	; 0xff
 8003728:	4091      	lsls	r1, r2
 800372a:	000a      	movs	r2, r1
 800372c:	43d2      	mvns	r2, r2
 800372e:	401a      	ands	r2, r3
 8003730:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	019b      	lsls	r3, r3, #6
 8003736:	22ff      	movs	r2, #255	; 0xff
 8003738:	401a      	ands	r2, r3
 800373a:	1dfb      	adds	r3, r7, #7
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	0018      	movs	r0, r3
 8003740:	2303      	movs	r3, #3
 8003742:	4003      	ands	r3, r0
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003748:	481f      	ldr	r0, [pc, #124]	; (80037c8 <__NVIC_SetPriority+0xd4>)
 800374a:	1dfb      	adds	r3, r7, #7
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	b25b      	sxtb	r3, r3
 8003750:	089b      	lsrs	r3, r3, #2
 8003752:	430a      	orrs	r2, r1
 8003754:	33c0      	adds	r3, #192	; 0xc0
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800375a:	e031      	b.n	80037c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800375c:	4a1b      	ldr	r2, [pc, #108]	; (80037cc <__NVIC_SetPriority+0xd8>)
 800375e:	1dfb      	adds	r3, r7, #7
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	0019      	movs	r1, r3
 8003764:	230f      	movs	r3, #15
 8003766:	400b      	ands	r3, r1
 8003768:	3b08      	subs	r3, #8
 800376a:	089b      	lsrs	r3, r3, #2
 800376c:	3306      	adds	r3, #6
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	18d3      	adds	r3, r2, r3
 8003772:	3304      	adds	r3, #4
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	1dfa      	adds	r2, r7, #7
 8003778:	7812      	ldrb	r2, [r2, #0]
 800377a:	0011      	movs	r1, r2
 800377c:	2203      	movs	r2, #3
 800377e:	400a      	ands	r2, r1
 8003780:	00d2      	lsls	r2, r2, #3
 8003782:	21ff      	movs	r1, #255	; 0xff
 8003784:	4091      	lsls	r1, r2
 8003786:	000a      	movs	r2, r1
 8003788:	43d2      	mvns	r2, r2
 800378a:	401a      	ands	r2, r3
 800378c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	019b      	lsls	r3, r3, #6
 8003792:	22ff      	movs	r2, #255	; 0xff
 8003794:	401a      	ands	r2, r3
 8003796:	1dfb      	adds	r3, r7, #7
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	0018      	movs	r0, r3
 800379c:	2303      	movs	r3, #3
 800379e:	4003      	ands	r3, r0
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037a4:	4809      	ldr	r0, [pc, #36]	; (80037cc <__NVIC_SetPriority+0xd8>)
 80037a6:	1dfb      	adds	r3, r7, #7
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	001c      	movs	r4, r3
 80037ac:	230f      	movs	r3, #15
 80037ae:	4023      	ands	r3, r4
 80037b0:	3b08      	subs	r3, #8
 80037b2:	089b      	lsrs	r3, r3, #2
 80037b4:	430a      	orrs	r2, r1
 80037b6:	3306      	adds	r3, #6
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	18c3      	adds	r3, r0, r3
 80037bc:	3304      	adds	r3, #4
 80037be:	601a      	str	r2, [r3, #0]
}
 80037c0:	46c0      	nop			; (mov r8, r8)
 80037c2:	46bd      	mov	sp, r7
 80037c4:	b003      	add	sp, #12
 80037c6:	bd90      	pop	{r4, r7, pc}
 80037c8:	e000e100 	.word	0xe000e100
 80037cc:	e000ed00 	.word	0xe000ed00

080037d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	1e5a      	subs	r2, r3, #1
 80037dc:	2380      	movs	r3, #128	; 0x80
 80037de:	045b      	lsls	r3, r3, #17
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d301      	bcc.n	80037e8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037e4:	2301      	movs	r3, #1
 80037e6:	e010      	b.n	800380a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037e8:	4b0a      	ldr	r3, [pc, #40]	; (8003814 <SysTick_Config+0x44>)
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	3a01      	subs	r2, #1
 80037ee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037f0:	2301      	movs	r3, #1
 80037f2:	425b      	negs	r3, r3
 80037f4:	2103      	movs	r1, #3
 80037f6:	0018      	movs	r0, r3
 80037f8:	f7ff ff7c 	bl	80036f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037fc:	4b05      	ldr	r3, [pc, #20]	; (8003814 <SysTick_Config+0x44>)
 80037fe:	2200      	movs	r2, #0
 8003800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003802:	4b04      	ldr	r3, [pc, #16]	; (8003814 <SysTick_Config+0x44>)
 8003804:	2207      	movs	r2, #7
 8003806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003808:	2300      	movs	r3, #0
}
 800380a:	0018      	movs	r0, r3
 800380c:	46bd      	mov	sp, r7
 800380e:	b002      	add	sp, #8
 8003810:	bd80      	pop	{r7, pc}
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	e000e010 	.word	0xe000e010

08003818 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	607a      	str	r2, [r7, #4]
 8003822:	210f      	movs	r1, #15
 8003824:	187b      	adds	r3, r7, r1
 8003826:	1c02      	adds	r2, r0, #0
 8003828:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	187b      	adds	r3, r7, r1
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	b25b      	sxtb	r3, r3
 8003832:	0011      	movs	r1, r2
 8003834:	0018      	movs	r0, r3
 8003836:	f7ff ff5d 	bl	80036f4 <__NVIC_SetPriority>
}
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	46bd      	mov	sp, r7
 800383e:	b004      	add	sp, #16
 8003840:	bd80      	pop	{r7, pc}

08003842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b082      	sub	sp, #8
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	0018      	movs	r0, r3
 800384e:	f7ff ffbf 	bl	80037d0 <SysTick_Config>
 8003852:	0003      	movs	r3, r0
}
 8003854:	0018      	movs	r0, r3
 8003856:	46bd      	mov	sp, r7
 8003858:	b002      	add	sp, #8
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800386a:	e14f      	b.n	8003b0c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2101      	movs	r1, #1
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	4091      	lsls	r1, r2
 8003876:	000a      	movs	r2, r1
 8003878:	4013      	ands	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d100      	bne.n	8003884 <HAL_GPIO_Init+0x28>
 8003882:	e140      	b.n	8003b06 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2203      	movs	r2, #3
 800388a:	4013      	ands	r3, r2
 800388c:	2b01      	cmp	r3, #1
 800388e:	d005      	beq.n	800389c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	2203      	movs	r2, #3
 8003896:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003898:	2b02      	cmp	r3, #2
 800389a:	d130      	bne.n	80038fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	2203      	movs	r2, #3
 80038a8:	409a      	lsls	r2, r3
 80038aa:	0013      	movs	r3, r2
 80038ac:	43da      	mvns	r2, r3
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	4013      	ands	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	409a      	lsls	r2, r3
 80038be:	0013      	movs	r3, r2
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038d2:	2201      	movs	r2, #1
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	409a      	lsls	r2, r3
 80038d8:	0013      	movs	r3, r2
 80038da:	43da      	mvns	r2, r3
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	4013      	ands	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	091b      	lsrs	r3, r3, #4
 80038e8:	2201      	movs	r2, #1
 80038ea:	401a      	ands	r2, r3
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	409a      	lsls	r2, r3
 80038f0:	0013      	movs	r3, r2
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2203      	movs	r2, #3
 8003904:	4013      	ands	r3, r2
 8003906:	2b03      	cmp	r3, #3
 8003908:	d017      	beq.n	800393a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	2203      	movs	r2, #3
 8003916:	409a      	lsls	r2, r3
 8003918:	0013      	movs	r3, r2
 800391a:	43da      	mvns	r2, r3
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	4013      	ands	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	409a      	lsls	r2, r3
 800392c:	0013      	movs	r3, r2
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	4313      	orrs	r3, r2
 8003932:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2203      	movs	r2, #3
 8003940:	4013      	ands	r3, r2
 8003942:	2b02      	cmp	r3, #2
 8003944:	d123      	bne.n	800398e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	08da      	lsrs	r2, r3, #3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	3208      	adds	r2, #8
 800394e:	0092      	lsls	r2, r2, #2
 8003950:	58d3      	ldr	r3, [r2, r3]
 8003952:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	2207      	movs	r2, #7
 8003958:	4013      	ands	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	220f      	movs	r2, #15
 800395e:	409a      	lsls	r2, r3
 8003960:	0013      	movs	r3, r2
 8003962:	43da      	mvns	r2, r3
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	4013      	ands	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	691a      	ldr	r2, [r3, #16]
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	2107      	movs	r1, #7
 8003972:	400b      	ands	r3, r1
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	409a      	lsls	r2, r3
 8003978:	0013      	movs	r3, r2
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	4313      	orrs	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	08da      	lsrs	r2, r3, #3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3208      	adds	r2, #8
 8003988:	0092      	lsls	r2, r2, #2
 800398a:	6939      	ldr	r1, [r7, #16]
 800398c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	2203      	movs	r2, #3
 800399a:	409a      	lsls	r2, r3
 800399c:	0013      	movs	r3, r2
 800399e:	43da      	mvns	r2, r3
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	4013      	ands	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2203      	movs	r2, #3
 80039ac:	401a      	ands	r2, r3
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	409a      	lsls	r2, r3
 80039b4:	0013      	movs	r3, r2
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	23c0      	movs	r3, #192	; 0xc0
 80039c8:	029b      	lsls	r3, r3, #10
 80039ca:	4013      	ands	r3, r2
 80039cc:	d100      	bne.n	80039d0 <HAL_GPIO_Init+0x174>
 80039ce:	e09a      	b.n	8003b06 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039d0:	4b54      	ldr	r3, [pc, #336]	; (8003b24 <HAL_GPIO_Init+0x2c8>)
 80039d2:	699a      	ldr	r2, [r3, #24]
 80039d4:	4b53      	ldr	r3, [pc, #332]	; (8003b24 <HAL_GPIO_Init+0x2c8>)
 80039d6:	2101      	movs	r1, #1
 80039d8:	430a      	orrs	r2, r1
 80039da:	619a      	str	r2, [r3, #24]
 80039dc:	4b51      	ldr	r3, [pc, #324]	; (8003b24 <HAL_GPIO_Init+0x2c8>)
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	2201      	movs	r2, #1
 80039e2:	4013      	ands	r3, r2
 80039e4:	60bb      	str	r3, [r7, #8]
 80039e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80039e8:	4a4f      	ldr	r2, [pc, #316]	; (8003b28 <HAL_GPIO_Init+0x2cc>)
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	089b      	lsrs	r3, r3, #2
 80039ee:	3302      	adds	r3, #2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	589b      	ldr	r3, [r3, r2]
 80039f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2203      	movs	r2, #3
 80039fa:	4013      	ands	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	220f      	movs	r2, #15
 8003a00:	409a      	lsls	r2, r3
 8003a02:	0013      	movs	r3, r2
 8003a04:	43da      	mvns	r2, r3
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	2390      	movs	r3, #144	; 0x90
 8003a10:	05db      	lsls	r3, r3, #23
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d013      	beq.n	8003a3e <HAL_GPIO_Init+0x1e2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a44      	ldr	r2, [pc, #272]	; (8003b2c <HAL_GPIO_Init+0x2d0>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d00d      	beq.n	8003a3a <HAL_GPIO_Init+0x1de>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a43      	ldr	r2, [pc, #268]	; (8003b30 <HAL_GPIO_Init+0x2d4>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d007      	beq.n	8003a36 <HAL_GPIO_Init+0x1da>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a42      	ldr	r2, [pc, #264]	; (8003b34 <HAL_GPIO_Init+0x2d8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d101      	bne.n	8003a32 <HAL_GPIO_Init+0x1d6>
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e006      	b.n	8003a40 <HAL_GPIO_Init+0x1e4>
 8003a32:	2305      	movs	r3, #5
 8003a34:	e004      	b.n	8003a40 <HAL_GPIO_Init+0x1e4>
 8003a36:	2302      	movs	r3, #2
 8003a38:	e002      	b.n	8003a40 <HAL_GPIO_Init+0x1e4>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e000      	b.n	8003a40 <HAL_GPIO_Init+0x1e4>
 8003a3e:	2300      	movs	r3, #0
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	2103      	movs	r1, #3
 8003a44:	400a      	ands	r2, r1
 8003a46:	0092      	lsls	r2, r2, #2
 8003a48:	4093      	lsls	r3, r2
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a50:	4935      	ldr	r1, [pc, #212]	; (8003b28 <HAL_GPIO_Init+0x2cc>)
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	089b      	lsrs	r3, r3, #2
 8003a56:	3302      	adds	r3, #2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a5e:	4b36      	ldr	r3, [pc, #216]	; (8003b38 <HAL_GPIO_Init+0x2dc>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	43da      	mvns	r2, r3
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	2380      	movs	r3, #128	; 0x80
 8003a74:	025b      	lsls	r3, r3, #9
 8003a76:	4013      	ands	r3, r2
 8003a78:	d003      	beq.n	8003a82 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003a82:	4b2d      	ldr	r3, [pc, #180]	; (8003b38 <HAL_GPIO_Init+0x2dc>)
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003a88:	4b2b      	ldr	r3, [pc, #172]	; (8003b38 <HAL_GPIO_Init+0x2dc>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	43da      	mvns	r2, r3
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	4013      	ands	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	2380      	movs	r3, #128	; 0x80
 8003a9e:	029b      	lsls	r3, r3, #10
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	d003      	beq.n	8003aac <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003aac:	4b22      	ldr	r3, [pc, #136]	; (8003b38 <HAL_GPIO_Init+0x2dc>)
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ab2:	4b21      	ldr	r3, [pc, #132]	; (8003b38 <HAL_GPIO_Init+0x2dc>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	43da      	mvns	r2, r3
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	2380      	movs	r3, #128	; 0x80
 8003ac8:	035b      	lsls	r3, r3, #13
 8003aca:	4013      	ands	r3, r2
 8003acc:	d003      	beq.n	8003ad6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003ad6:	4b18      	ldr	r3, [pc, #96]	; (8003b38 <HAL_GPIO_Init+0x2dc>)
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003adc:	4b16      	ldr	r3, [pc, #88]	; (8003b38 <HAL_GPIO_Init+0x2dc>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	43da      	mvns	r2, r3
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	2380      	movs	r3, #128	; 0x80
 8003af2:	039b      	lsls	r3, r3, #14
 8003af4:	4013      	ands	r3, r2
 8003af6:	d003      	beq.n	8003b00 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003b00:	4b0d      	ldr	r3, [pc, #52]	; (8003b38 <HAL_GPIO_Init+0x2dc>)
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	40da      	lsrs	r2, r3
 8003b14:	1e13      	subs	r3, r2, #0
 8003b16:	d000      	beq.n	8003b1a <HAL_GPIO_Init+0x2be>
 8003b18:	e6a8      	b.n	800386c <HAL_GPIO_Init+0x10>
  } 
}
 8003b1a:	46c0      	nop			; (mov r8, r8)
 8003b1c:	46c0      	nop			; (mov r8, r8)
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	b006      	add	sp, #24
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40021000 	.word	0x40021000
 8003b28:	40010000 	.word	0x40010000
 8003b2c:	48000400 	.word	0x48000400
 8003b30:	48000800 	.word	0x48000800
 8003b34:	48000c00 	.word	0x48000c00
 8003b38:	40010400 	.word	0x40010400

08003b3c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b46:	2300      	movs	r3, #0
 8003b48:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003b4a:	e0b1      	b.n	8003cb0 <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	409a      	lsls	r2, r3
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	4013      	ands	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d100      	bne.n	8003b60 <HAL_GPIO_DeInit+0x24>
 8003b5e:	e0a4      	b.n	8003caa <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003b60:	4a59      	ldr	r2, [pc, #356]	; (8003cc8 <HAL_GPIO_DeInit+0x18c>)
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	089b      	lsrs	r3, r3, #2
 8003b66:	3302      	adds	r3, #2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	589b      	ldr	r3, [r3, r2]
 8003b6c:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2203      	movs	r2, #3
 8003b72:	4013      	ands	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	220f      	movs	r2, #15
 8003b78:	409a      	lsls	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	2390      	movs	r3, #144	; 0x90
 8003b84:	05db      	lsls	r3, r3, #23
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d013      	beq.n	8003bb2 <HAL_GPIO_DeInit+0x76>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a4f      	ldr	r2, [pc, #316]	; (8003ccc <HAL_GPIO_DeInit+0x190>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d00d      	beq.n	8003bae <HAL_GPIO_DeInit+0x72>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a4e      	ldr	r2, [pc, #312]	; (8003cd0 <HAL_GPIO_DeInit+0x194>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d007      	beq.n	8003baa <HAL_GPIO_DeInit+0x6e>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a4d      	ldr	r2, [pc, #308]	; (8003cd4 <HAL_GPIO_DeInit+0x198>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d101      	bne.n	8003ba6 <HAL_GPIO_DeInit+0x6a>
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e006      	b.n	8003bb4 <HAL_GPIO_DeInit+0x78>
 8003ba6:	2305      	movs	r3, #5
 8003ba8:	e004      	b.n	8003bb4 <HAL_GPIO_DeInit+0x78>
 8003baa:	2302      	movs	r3, #2
 8003bac:	e002      	b.n	8003bb4 <HAL_GPIO_DeInit+0x78>
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e000      	b.n	8003bb4 <HAL_GPIO_DeInit+0x78>
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	2103      	movs	r1, #3
 8003bb8:	400a      	ands	r2, r1
 8003bba:	0092      	lsls	r2, r2, #2
 8003bbc:	4093      	lsls	r3, r2
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d132      	bne.n	8003c2a <HAL_GPIO_DeInit+0xee>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003bc4:	4b44      	ldr	r3, [pc, #272]	; (8003cd8 <HAL_GPIO_DeInit+0x19c>)
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	43d9      	mvns	r1, r3
 8003bcc:	4b42      	ldr	r3, [pc, #264]	; (8003cd8 <HAL_GPIO_DeInit+0x19c>)
 8003bce:	400a      	ands	r2, r1
 8003bd0:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003bd2:	4b41      	ldr	r3, [pc, #260]	; (8003cd8 <HAL_GPIO_DeInit+0x19c>)
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	43d9      	mvns	r1, r3
 8003bda:	4b3f      	ldr	r3, [pc, #252]	; (8003cd8 <HAL_GPIO_DeInit+0x19c>)
 8003bdc:	400a      	ands	r2, r1
 8003bde:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003be0:	4b3d      	ldr	r3, [pc, #244]	; (8003cd8 <HAL_GPIO_DeInit+0x19c>)
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	43d9      	mvns	r1, r3
 8003be8:	4b3b      	ldr	r3, [pc, #236]	; (8003cd8 <HAL_GPIO_DeInit+0x19c>)
 8003bea:	400a      	ands	r2, r1
 8003bec:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003bee:	4b3a      	ldr	r3, [pc, #232]	; (8003cd8 <HAL_GPIO_DeInit+0x19c>)
 8003bf0:	68da      	ldr	r2, [r3, #12]
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	43d9      	mvns	r1, r3
 8003bf6:	4b38      	ldr	r3, [pc, #224]	; (8003cd8 <HAL_GPIO_DeInit+0x19c>)
 8003bf8:	400a      	ands	r2, r1
 8003bfa:	60da      	str	r2, [r3, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	2203      	movs	r2, #3
 8003c00:	4013      	ands	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	220f      	movs	r2, #15
 8003c06:	409a      	lsls	r2, r3
 8003c08:	0013      	movs	r3, r2
 8003c0a:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003c0c:	4a2e      	ldr	r2, [pc, #184]	; (8003cc8 <HAL_GPIO_DeInit+0x18c>)
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	089b      	lsrs	r3, r3, #2
 8003c12:	3302      	adds	r3, #2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	589a      	ldr	r2, [r3, r2]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	43d9      	mvns	r1, r3
 8003c1c:	482a      	ldr	r0, [pc, #168]	; (8003cc8 <HAL_GPIO_DeInit+0x18c>)
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	089b      	lsrs	r3, r3, #2
 8003c22:	400a      	ands	r2, r1
 8003c24:	3302      	adds	r3, #2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	0052      	lsls	r2, r2, #1
 8003c32:	2103      	movs	r1, #3
 8003c34:	4091      	lsls	r1, r2
 8003c36:	000a      	movs	r2, r1
 8003c38:	43d2      	mvns	r2, r2
 8003c3a:	401a      	ands	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	08da      	lsrs	r2, r3, #3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3208      	adds	r2, #8
 8003c48:	0092      	lsls	r2, r2, #2
 8003c4a:	58d3      	ldr	r3, [r2, r3]
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	2107      	movs	r1, #7
 8003c50:	400a      	ands	r2, r1
 8003c52:	0092      	lsls	r2, r2, #2
 8003c54:	210f      	movs	r1, #15
 8003c56:	4091      	lsls	r1, r2
 8003c58:	000a      	movs	r2, r1
 8003c5a:	43d1      	mvns	r1, r2
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	08d2      	lsrs	r2, r2, #3
 8003c60:	4019      	ands	r1, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	3208      	adds	r2, #8
 8003c66:	0092      	lsls	r2, r2, #2
 8003c68:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	0052      	lsls	r2, r2, #1
 8003c72:	2103      	movs	r1, #3
 8003c74:	4091      	lsls	r1, r2
 8003c76:	000a      	movs	r2, r1
 8003c78:	43d2      	mvns	r2, r2
 8003c7a:	401a      	ands	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2101      	movs	r1, #1
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	4091      	lsls	r1, r2
 8003c8a:	000a      	movs	r2, r1
 8003c8c:	43d2      	mvns	r2, r2
 8003c8e:	401a      	ands	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	0052      	lsls	r2, r2, #1
 8003c9c:	2103      	movs	r1, #3
 8003c9e:	4091      	lsls	r1, r2
 8003ca0:	000a      	movs	r2, r1
 8003ca2:	43d2      	mvns	r2, r2
 8003ca4:	401a      	ands	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	609a      	str	r2, [r3, #8]

    }

    position++;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	3301      	adds	r3, #1
 8003cae:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	40da      	lsrs	r2, r3
 8003cb6:	1e13      	subs	r3, r2, #0
 8003cb8:	d000      	beq.n	8003cbc <HAL_GPIO_DeInit+0x180>
 8003cba:	e747      	b.n	8003b4c <HAL_GPIO_DeInit+0x10>
  }
}
 8003cbc:	46c0      	nop			; (mov r8, r8)
 8003cbe:	46c0      	nop			; (mov r8, r8)
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	b006      	add	sp, #24
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	40010000 	.word	0x40010000
 8003ccc:	48000400 	.word	0x48000400
 8003cd0:	48000800 	.word	0x48000800
 8003cd4:	48000c00 	.word	0x48000c00
 8003cd8:	40010400 	.word	0x40010400

08003cdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	0008      	movs	r0, r1
 8003ce6:	0011      	movs	r1, r2
 8003ce8:	1cbb      	adds	r3, r7, #2
 8003cea:	1c02      	adds	r2, r0, #0
 8003cec:	801a      	strh	r2, [r3, #0]
 8003cee:	1c7b      	adds	r3, r7, #1
 8003cf0:	1c0a      	adds	r2, r1, #0
 8003cf2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cf4:	1c7b      	adds	r3, r7, #1
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d004      	beq.n	8003d06 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cfc:	1cbb      	adds	r3, r7, #2
 8003cfe:	881a      	ldrh	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d04:	e003      	b.n	8003d0e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d06:	1cbb      	adds	r3, r7, #2
 8003d08:	881a      	ldrh	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d0e:	46c0      	nop			; (mov r8, r8)
 8003d10:	46bd      	mov	sp, r7
 8003d12:	b002      	add	sp, #8
 8003d14:	bd80      	pop	{r7, pc}
	...

08003d18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b088      	sub	sp, #32
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e301      	b.n	800432e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	4013      	ands	r3, r2
 8003d32:	d100      	bne.n	8003d36 <HAL_RCC_OscConfig+0x1e>
 8003d34:	e08d      	b.n	8003e52 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003d36:	4bc3      	ldr	r3, [pc, #780]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	220c      	movs	r2, #12
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d00e      	beq.n	8003d60 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d42:	4bc0      	ldr	r3, [pc, #768]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	220c      	movs	r2, #12
 8003d48:	4013      	ands	r3, r2
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d116      	bne.n	8003d7c <HAL_RCC_OscConfig+0x64>
 8003d4e:	4bbd      	ldr	r3, [pc, #756]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	2380      	movs	r3, #128	; 0x80
 8003d54:	025b      	lsls	r3, r3, #9
 8003d56:	401a      	ands	r2, r3
 8003d58:	2380      	movs	r3, #128	; 0x80
 8003d5a:	025b      	lsls	r3, r3, #9
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d10d      	bne.n	8003d7c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d60:	4bb8      	ldr	r3, [pc, #736]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	2380      	movs	r3, #128	; 0x80
 8003d66:	029b      	lsls	r3, r3, #10
 8003d68:	4013      	ands	r3, r2
 8003d6a:	d100      	bne.n	8003d6e <HAL_RCC_OscConfig+0x56>
 8003d6c:	e070      	b.n	8003e50 <HAL_RCC_OscConfig+0x138>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d000      	beq.n	8003d78 <HAL_RCC_OscConfig+0x60>
 8003d76:	e06b      	b.n	8003e50 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e2d8      	b.n	800432e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d107      	bne.n	8003d94 <HAL_RCC_OscConfig+0x7c>
 8003d84:	4baf      	ldr	r3, [pc, #700]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	4bae      	ldr	r3, [pc, #696]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003d8a:	2180      	movs	r1, #128	; 0x80
 8003d8c:	0249      	lsls	r1, r1, #9
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	e02f      	b.n	8003df4 <HAL_RCC_OscConfig+0xdc>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10c      	bne.n	8003db6 <HAL_RCC_OscConfig+0x9e>
 8003d9c:	4ba9      	ldr	r3, [pc, #676]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	4ba8      	ldr	r3, [pc, #672]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003da2:	49a9      	ldr	r1, [pc, #676]	; (8004048 <HAL_RCC_OscConfig+0x330>)
 8003da4:	400a      	ands	r2, r1
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	4ba6      	ldr	r3, [pc, #664]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	4ba5      	ldr	r3, [pc, #660]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003dae:	49a7      	ldr	r1, [pc, #668]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003db0:	400a      	ands	r2, r1
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	e01e      	b.n	8003df4 <HAL_RCC_OscConfig+0xdc>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b05      	cmp	r3, #5
 8003dbc:	d10e      	bne.n	8003ddc <HAL_RCC_OscConfig+0xc4>
 8003dbe:	4ba1      	ldr	r3, [pc, #644]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	4ba0      	ldr	r3, [pc, #640]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003dc4:	2180      	movs	r1, #128	; 0x80
 8003dc6:	02c9      	lsls	r1, r1, #11
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	4b9d      	ldr	r3, [pc, #628]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	4b9c      	ldr	r3, [pc, #624]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003dd2:	2180      	movs	r1, #128	; 0x80
 8003dd4:	0249      	lsls	r1, r1, #9
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	e00b      	b.n	8003df4 <HAL_RCC_OscConfig+0xdc>
 8003ddc:	4b99      	ldr	r3, [pc, #612]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	4b98      	ldr	r3, [pc, #608]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003de2:	4999      	ldr	r1, [pc, #612]	; (8004048 <HAL_RCC_OscConfig+0x330>)
 8003de4:	400a      	ands	r2, r1
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	4b96      	ldr	r3, [pc, #600]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	4b95      	ldr	r3, [pc, #596]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003dee:	4997      	ldr	r1, [pc, #604]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003df0:	400a      	ands	r2, r1
 8003df2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d014      	beq.n	8003e26 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfc:	f7fe fefa 	bl	8002bf4 <HAL_GetTick>
 8003e00:	0003      	movs	r3, r0
 8003e02:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e04:	e008      	b.n	8003e18 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e06:	f7fe fef5 	bl	8002bf4 <HAL_GetTick>
 8003e0a:	0002      	movs	r2, r0
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b64      	cmp	r3, #100	; 0x64
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e28a      	b.n	800432e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e18:	4b8a      	ldr	r3, [pc, #552]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	2380      	movs	r3, #128	; 0x80
 8003e1e:	029b      	lsls	r3, r3, #10
 8003e20:	4013      	ands	r3, r2
 8003e22:	d0f0      	beq.n	8003e06 <HAL_RCC_OscConfig+0xee>
 8003e24:	e015      	b.n	8003e52 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e26:	f7fe fee5 	bl	8002bf4 <HAL_GetTick>
 8003e2a:	0003      	movs	r3, r0
 8003e2c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e30:	f7fe fee0 	bl	8002bf4 <HAL_GetTick>
 8003e34:	0002      	movs	r2, r0
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b64      	cmp	r3, #100	; 0x64
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e275      	b.n	800432e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e42:	4b80      	ldr	r3, [pc, #512]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	2380      	movs	r3, #128	; 0x80
 8003e48:	029b      	lsls	r3, r3, #10
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	d1f0      	bne.n	8003e30 <HAL_RCC_OscConfig+0x118>
 8003e4e:	e000      	b.n	8003e52 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e50:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2202      	movs	r2, #2
 8003e58:	4013      	ands	r3, r2
 8003e5a:	d100      	bne.n	8003e5e <HAL_RCC_OscConfig+0x146>
 8003e5c:	e069      	b.n	8003f32 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003e5e:	4b79      	ldr	r3, [pc, #484]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	220c      	movs	r2, #12
 8003e64:	4013      	ands	r3, r2
 8003e66:	d00b      	beq.n	8003e80 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003e68:	4b76      	ldr	r3, [pc, #472]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	220c      	movs	r2, #12
 8003e6e:	4013      	ands	r3, r2
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d11c      	bne.n	8003eae <HAL_RCC_OscConfig+0x196>
 8003e74:	4b73      	ldr	r3, [pc, #460]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	2380      	movs	r3, #128	; 0x80
 8003e7a:	025b      	lsls	r3, r3, #9
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	d116      	bne.n	8003eae <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e80:	4b70      	ldr	r3, [pc, #448]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2202      	movs	r2, #2
 8003e86:	4013      	ands	r3, r2
 8003e88:	d005      	beq.n	8003e96 <HAL_RCC_OscConfig+0x17e>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d001      	beq.n	8003e96 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e24b      	b.n	800432e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e96:	4b6b      	ldr	r3, [pc, #428]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	22f8      	movs	r2, #248	; 0xf8
 8003e9c:	4393      	bics	r3, r2
 8003e9e:	0019      	movs	r1, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	00da      	lsls	r2, r3, #3
 8003ea6:	4b67      	ldr	r3, [pc, #412]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eac:	e041      	b.n	8003f32 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d024      	beq.n	8003f00 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eb6:	4b63      	ldr	r3, [pc, #396]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	4b62      	ldr	r3, [pc, #392]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec2:	f7fe fe97 	bl	8002bf4 <HAL_GetTick>
 8003ec6:	0003      	movs	r3, r0
 8003ec8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ecc:	f7fe fe92 	bl	8002bf4 <HAL_GetTick>
 8003ed0:	0002      	movs	r2, r0
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e227      	b.n	800432e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ede:	4b59      	ldr	r3, [pc, #356]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	d0f1      	beq.n	8003ecc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee8:	4b56      	ldr	r3, [pc, #344]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	22f8      	movs	r2, #248	; 0xf8
 8003eee:	4393      	bics	r3, r2
 8003ef0:	0019      	movs	r1, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	00da      	lsls	r2, r3, #3
 8003ef8:	4b52      	ldr	r3, [pc, #328]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003efa:	430a      	orrs	r2, r1
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	e018      	b.n	8003f32 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f00:	4b50      	ldr	r3, [pc, #320]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	4b4f      	ldr	r3, [pc, #316]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003f06:	2101      	movs	r1, #1
 8003f08:	438a      	bics	r2, r1
 8003f0a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0c:	f7fe fe72 	bl	8002bf4 <HAL_GetTick>
 8003f10:	0003      	movs	r3, r0
 8003f12:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f14:	e008      	b.n	8003f28 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f16:	f7fe fe6d 	bl	8002bf4 <HAL_GetTick>
 8003f1a:	0002      	movs	r2, r0
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e202      	b.n	800432e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f28:	4b46      	ldr	r3, [pc, #280]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2202      	movs	r2, #2
 8003f2e:	4013      	ands	r3, r2
 8003f30:	d1f1      	bne.n	8003f16 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2208      	movs	r2, #8
 8003f38:	4013      	ands	r3, r2
 8003f3a:	d036      	beq.n	8003faa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d019      	beq.n	8003f78 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f44:	4b3f      	ldr	r3, [pc, #252]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003f46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f48:	4b3e      	ldr	r3, [pc, #248]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f50:	f7fe fe50 	bl	8002bf4 <HAL_GetTick>
 8003f54:	0003      	movs	r3, r0
 8003f56:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f5a:	f7fe fe4b 	bl	8002bf4 <HAL_GetTick>
 8003f5e:	0002      	movs	r2, r0
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e1e0      	b.n	800432e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f6c:	4b35      	ldr	r3, [pc, #212]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	2202      	movs	r2, #2
 8003f72:	4013      	ands	r3, r2
 8003f74:	d0f1      	beq.n	8003f5a <HAL_RCC_OscConfig+0x242>
 8003f76:	e018      	b.n	8003faa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f78:	4b32      	ldr	r3, [pc, #200]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003f7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f7c:	4b31      	ldr	r3, [pc, #196]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003f7e:	2101      	movs	r1, #1
 8003f80:	438a      	bics	r2, r1
 8003f82:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f84:	f7fe fe36 	bl	8002bf4 <HAL_GetTick>
 8003f88:	0003      	movs	r3, r0
 8003f8a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f8c:	e008      	b.n	8003fa0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f8e:	f7fe fe31 	bl	8002bf4 <HAL_GetTick>
 8003f92:	0002      	movs	r2, r0
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d901      	bls.n	8003fa0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e1c6      	b.n	800432e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fa0:	4b28      	ldr	r3, [pc, #160]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	d1f1      	bne.n	8003f8e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2204      	movs	r2, #4
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	d100      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x29e>
 8003fb4:	e0b4      	b.n	8004120 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fb6:	201f      	movs	r0, #31
 8003fb8:	183b      	adds	r3, r7, r0
 8003fba:	2200      	movs	r2, #0
 8003fbc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fbe:	4b21      	ldr	r3, [pc, #132]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003fc0:	69da      	ldr	r2, [r3, #28]
 8003fc2:	2380      	movs	r3, #128	; 0x80
 8003fc4:	055b      	lsls	r3, r3, #21
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	d110      	bne.n	8003fec <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fca:	4b1e      	ldr	r3, [pc, #120]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003fcc:	69da      	ldr	r2, [r3, #28]
 8003fce:	4b1d      	ldr	r3, [pc, #116]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003fd0:	2180      	movs	r1, #128	; 0x80
 8003fd2:	0549      	lsls	r1, r1, #21
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	61da      	str	r2, [r3, #28]
 8003fd8:	4b1a      	ldr	r3, [pc, #104]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003fda:	69da      	ldr	r2, [r3, #28]
 8003fdc:	2380      	movs	r3, #128	; 0x80
 8003fde:	055b      	lsls	r3, r3, #21
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003fe6:	183b      	adds	r3, r7, r0
 8003fe8:	2201      	movs	r2, #1
 8003fea:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fec:	4b18      	ldr	r3, [pc, #96]	; (8004050 <HAL_RCC_OscConfig+0x338>)
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	2380      	movs	r3, #128	; 0x80
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	d11a      	bne.n	800402e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ff8:	4b15      	ldr	r3, [pc, #84]	; (8004050 <HAL_RCC_OscConfig+0x338>)
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	4b14      	ldr	r3, [pc, #80]	; (8004050 <HAL_RCC_OscConfig+0x338>)
 8003ffe:	2180      	movs	r1, #128	; 0x80
 8004000:	0049      	lsls	r1, r1, #1
 8004002:	430a      	orrs	r2, r1
 8004004:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004006:	f7fe fdf5 	bl	8002bf4 <HAL_GetTick>
 800400a:	0003      	movs	r3, r0
 800400c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004010:	f7fe fdf0 	bl	8002bf4 <HAL_GetTick>
 8004014:	0002      	movs	r2, r0
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b64      	cmp	r3, #100	; 0x64
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e185      	b.n	800432e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004022:	4b0b      	ldr	r3, [pc, #44]	; (8004050 <HAL_RCC_OscConfig+0x338>)
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	2380      	movs	r3, #128	; 0x80
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	4013      	ands	r3, r2
 800402c:	d0f0      	beq.n	8004010 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d10e      	bne.n	8004054 <HAL_RCC_OscConfig+0x33c>
 8004036:	4b03      	ldr	r3, [pc, #12]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 8004038:	6a1a      	ldr	r2, [r3, #32]
 800403a:	4b02      	ldr	r3, [pc, #8]	; (8004044 <HAL_RCC_OscConfig+0x32c>)
 800403c:	2101      	movs	r1, #1
 800403e:	430a      	orrs	r2, r1
 8004040:	621a      	str	r2, [r3, #32]
 8004042:	e035      	b.n	80040b0 <HAL_RCC_OscConfig+0x398>
 8004044:	40021000 	.word	0x40021000
 8004048:	fffeffff 	.word	0xfffeffff
 800404c:	fffbffff 	.word	0xfffbffff
 8004050:	40007000 	.word	0x40007000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10c      	bne.n	8004076 <HAL_RCC_OscConfig+0x35e>
 800405c:	4bb6      	ldr	r3, [pc, #728]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 800405e:	6a1a      	ldr	r2, [r3, #32]
 8004060:	4bb5      	ldr	r3, [pc, #724]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 8004062:	2101      	movs	r1, #1
 8004064:	438a      	bics	r2, r1
 8004066:	621a      	str	r2, [r3, #32]
 8004068:	4bb3      	ldr	r3, [pc, #716]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 800406a:	6a1a      	ldr	r2, [r3, #32]
 800406c:	4bb2      	ldr	r3, [pc, #712]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 800406e:	2104      	movs	r1, #4
 8004070:	438a      	bics	r2, r1
 8004072:	621a      	str	r2, [r3, #32]
 8004074:	e01c      	b.n	80040b0 <HAL_RCC_OscConfig+0x398>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	2b05      	cmp	r3, #5
 800407c:	d10c      	bne.n	8004098 <HAL_RCC_OscConfig+0x380>
 800407e:	4bae      	ldr	r3, [pc, #696]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 8004080:	6a1a      	ldr	r2, [r3, #32]
 8004082:	4bad      	ldr	r3, [pc, #692]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 8004084:	2104      	movs	r1, #4
 8004086:	430a      	orrs	r2, r1
 8004088:	621a      	str	r2, [r3, #32]
 800408a:	4bab      	ldr	r3, [pc, #684]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 800408c:	6a1a      	ldr	r2, [r3, #32]
 800408e:	4baa      	ldr	r3, [pc, #680]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 8004090:	2101      	movs	r1, #1
 8004092:	430a      	orrs	r2, r1
 8004094:	621a      	str	r2, [r3, #32]
 8004096:	e00b      	b.n	80040b0 <HAL_RCC_OscConfig+0x398>
 8004098:	4ba7      	ldr	r3, [pc, #668]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 800409a:	6a1a      	ldr	r2, [r3, #32]
 800409c:	4ba6      	ldr	r3, [pc, #664]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 800409e:	2101      	movs	r1, #1
 80040a0:	438a      	bics	r2, r1
 80040a2:	621a      	str	r2, [r3, #32]
 80040a4:	4ba4      	ldr	r3, [pc, #656]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 80040a6:	6a1a      	ldr	r2, [r3, #32]
 80040a8:	4ba3      	ldr	r3, [pc, #652]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 80040aa:	2104      	movs	r1, #4
 80040ac:	438a      	bics	r2, r1
 80040ae:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d014      	beq.n	80040e2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040b8:	f7fe fd9c 	bl	8002bf4 <HAL_GetTick>
 80040bc:	0003      	movs	r3, r0
 80040be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c0:	e009      	b.n	80040d6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040c2:	f7fe fd97 	bl	8002bf4 <HAL_GetTick>
 80040c6:	0002      	movs	r2, r0
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	4a9b      	ldr	r2, [pc, #620]	; (800433c <HAL_RCC_OscConfig+0x624>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e12b      	b.n	800432e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040d6:	4b98      	ldr	r3, [pc, #608]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	2202      	movs	r2, #2
 80040dc:	4013      	ands	r3, r2
 80040de:	d0f0      	beq.n	80040c2 <HAL_RCC_OscConfig+0x3aa>
 80040e0:	e013      	b.n	800410a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040e2:	f7fe fd87 	bl	8002bf4 <HAL_GetTick>
 80040e6:	0003      	movs	r3, r0
 80040e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ea:	e009      	b.n	8004100 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040ec:	f7fe fd82 	bl	8002bf4 <HAL_GetTick>
 80040f0:	0002      	movs	r2, r0
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	4a91      	ldr	r2, [pc, #580]	; (800433c <HAL_RCC_OscConfig+0x624>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e116      	b.n	800432e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004100:	4b8d      	ldr	r3, [pc, #564]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	2202      	movs	r2, #2
 8004106:	4013      	ands	r3, r2
 8004108:	d1f0      	bne.n	80040ec <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800410a:	231f      	movs	r3, #31
 800410c:	18fb      	adds	r3, r7, r3
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d105      	bne.n	8004120 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004114:	4b88      	ldr	r3, [pc, #544]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 8004116:	69da      	ldr	r2, [r3, #28]
 8004118:	4b87      	ldr	r3, [pc, #540]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 800411a:	4989      	ldr	r1, [pc, #548]	; (8004340 <HAL_RCC_OscConfig+0x628>)
 800411c:	400a      	ands	r2, r1
 800411e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2210      	movs	r2, #16
 8004126:	4013      	ands	r3, r2
 8004128:	d063      	beq.n	80041f2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d12a      	bne.n	8004188 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004132:	4b81      	ldr	r3, [pc, #516]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 8004134:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004136:	4b80      	ldr	r3, [pc, #512]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 8004138:	2104      	movs	r1, #4
 800413a:	430a      	orrs	r2, r1
 800413c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800413e:	4b7e      	ldr	r3, [pc, #504]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 8004140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004142:	4b7d      	ldr	r3, [pc, #500]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 8004144:	2101      	movs	r1, #1
 8004146:	430a      	orrs	r2, r1
 8004148:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800414a:	f7fe fd53 	bl	8002bf4 <HAL_GetTick>
 800414e:	0003      	movs	r3, r0
 8004150:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004154:	f7fe fd4e 	bl	8002bf4 <HAL_GetTick>
 8004158:	0002      	movs	r2, r0
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e0e3      	b.n	800432e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004166:	4b74      	ldr	r3, [pc, #464]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 8004168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800416a:	2202      	movs	r2, #2
 800416c:	4013      	ands	r3, r2
 800416e:	d0f1      	beq.n	8004154 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004170:	4b71      	ldr	r3, [pc, #452]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 8004172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004174:	22f8      	movs	r2, #248	; 0xf8
 8004176:	4393      	bics	r3, r2
 8004178:	0019      	movs	r1, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	00da      	lsls	r2, r3, #3
 8004180:	4b6d      	ldr	r3, [pc, #436]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 8004182:	430a      	orrs	r2, r1
 8004184:	635a      	str	r2, [r3, #52]	; 0x34
 8004186:	e034      	b.n	80041f2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	3305      	adds	r3, #5
 800418e:	d111      	bne.n	80041b4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004190:	4b69      	ldr	r3, [pc, #420]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 8004192:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004194:	4b68      	ldr	r3, [pc, #416]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 8004196:	2104      	movs	r1, #4
 8004198:	438a      	bics	r2, r1
 800419a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800419c:	4b66      	ldr	r3, [pc, #408]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 800419e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a0:	22f8      	movs	r2, #248	; 0xf8
 80041a2:	4393      	bics	r3, r2
 80041a4:	0019      	movs	r1, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	00da      	lsls	r2, r3, #3
 80041ac:	4b62      	ldr	r3, [pc, #392]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 80041ae:	430a      	orrs	r2, r1
 80041b0:	635a      	str	r2, [r3, #52]	; 0x34
 80041b2:	e01e      	b.n	80041f2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80041b4:	4b60      	ldr	r3, [pc, #384]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 80041b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041b8:	4b5f      	ldr	r3, [pc, #380]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 80041ba:	2104      	movs	r1, #4
 80041bc:	430a      	orrs	r2, r1
 80041be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80041c0:	4b5d      	ldr	r3, [pc, #372]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 80041c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041c4:	4b5c      	ldr	r3, [pc, #368]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 80041c6:	2101      	movs	r1, #1
 80041c8:	438a      	bics	r2, r1
 80041ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041cc:	f7fe fd12 	bl	8002bf4 <HAL_GetTick>
 80041d0:	0003      	movs	r3, r0
 80041d2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80041d4:	e008      	b.n	80041e8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80041d6:	f7fe fd0d 	bl	8002bf4 <HAL_GetTick>
 80041da:	0002      	movs	r2, r0
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e0a2      	b.n	800432e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80041e8:	4b53      	ldr	r3, [pc, #332]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 80041ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ec:	2202      	movs	r2, #2
 80041ee:	4013      	ands	r3, r2
 80041f0:	d1f1      	bne.n	80041d6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d100      	bne.n	80041fc <HAL_RCC_OscConfig+0x4e4>
 80041fa:	e097      	b.n	800432c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041fc:	4b4e      	ldr	r3, [pc, #312]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	220c      	movs	r2, #12
 8004202:	4013      	ands	r3, r2
 8004204:	2b08      	cmp	r3, #8
 8004206:	d100      	bne.n	800420a <HAL_RCC_OscConfig+0x4f2>
 8004208:	e06b      	b.n	80042e2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	2b02      	cmp	r3, #2
 8004210:	d14c      	bne.n	80042ac <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004212:	4b49      	ldr	r3, [pc, #292]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	4b48      	ldr	r3, [pc, #288]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 8004218:	494a      	ldr	r1, [pc, #296]	; (8004344 <HAL_RCC_OscConfig+0x62c>)
 800421a:	400a      	ands	r2, r1
 800421c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421e:	f7fe fce9 	bl	8002bf4 <HAL_GetTick>
 8004222:	0003      	movs	r3, r0
 8004224:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004228:	f7fe fce4 	bl	8002bf4 <HAL_GetTick>
 800422c:	0002      	movs	r2, r0
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e079      	b.n	800432e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800423a:	4b3f      	ldr	r3, [pc, #252]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	2380      	movs	r3, #128	; 0x80
 8004240:	049b      	lsls	r3, r3, #18
 8004242:	4013      	ands	r3, r2
 8004244:	d1f0      	bne.n	8004228 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004246:	4b3c      	ldr	r3, [pc, #240]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 8004248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424a:	220f      	movs	r2, #15
 800424c:	4393      	bics	r3, r2
 800424e:	0019      	movs	r1, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004254:	4b38      	ldr	r3, [pc, #224]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 8004256:	430a      	orrs	r2, r1
 8004258:	62da      	str	r2, [r3, #44]	; 0x2c
 800425a:	4b37      	ldr	r3, [pc, #220]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	4a3a      	ldr	r2, [pc, #232]	; (8004348 <HAL_RCC_OscConfig+0x630>)
 8004260:	4013      	ands	r3, r2
 8004262:	0019      	movs	r1, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	431a      	orrs	r2, r3
 800426e:	4b32      	ldr	r3, [pc, #200]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 8004270:	430a      	orrs	r2, r1
 8004272:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004274:	4b30      	ldr	r3, [pc, #192]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	4b2f      	ldr	r3, [pc, #188]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 800427a:	2180      	movs	r1, #128	; 0x80
 800427c:	0449      	lsls	r1, r1, #17
 800427e:	430a      	orrs	r2, r1
 8004280:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004282:	f7fe fcb7 	bl	8002bf4 <HAL_GetTick>
 8004286:	0003      	movs	r3, r0
 8004288:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800428c:	f7fe fcb2 	bl	8002bf4 <HAL_GetTick>
 8004290:	0002      	movs	r2, r0
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b02      	cmp	r3, #2
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e047      	b.n	800432e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800429e:	4b26      	ldr	r3, [pc, #152]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	2380      	movs	r3, #128	; 0x80
 80042a4:	049b      	lsls	r3, r3, #18
 80042a6:	4013      	ands	r3, r2
 80042a8:	d0f0      	beq.n	800428c <HAL_RCC_OscConfig+0x574>
 80042aa:	e03f      	b.n	800432c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ac:	4b22      	ldr	r3, [pc, #136]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	4b21      	ldr	r3, [pc, #132]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 80042b2:	4924      	ldr	r1, [pc, #144]	; (8004344 <HAL_RCC_OscConfig+0x62c>)
 80042b4:	400a      	ands	r2, r1
 80042b6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b8:	f7fe fc9c 	bl	8002bf4 <HAL_GetTick>
 80042bc:	0003      	movs	r3, r0
 80042be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042c0:	e008      	b.n	80042d4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042c2:	f7fe fc97 	bl	8002bf4 <HAL_GetTick>
 80042c6:	0002      	movs	r2, r0
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e02c      	b.n	800432e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042d4:	4b18      	ldr	r3, [pc, #96]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	2380      	movs	r3, #128	; 0x80
 80042da:	049b      	lsls	r3, r3, #18
 80042dc:	4013      	ands	r3, r2
 80042de:	d1f0      	bne.n	80042c2 <HAL_RCC_OscConfig+0x5aa>
 80042e0:	e024      	b.n	800432c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d101      	bne.n	80042ee <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e01f      	b.n	800432e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80042ee:	4b12      	ldr	r3, [pc, #72]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80042f4:	4b10      	ldr	r3, [pc, #64]	; (8004338 <HAL_RCC_OscConfig+0x620>)
 80042f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	2380      	movs	r3, #128	; 0x80
 80042fe:	025b      	lsls	r3, r3, #9
 8004300:	401a      	ands	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004306:	429a      	cmp	r2, r3
 8004308:	d10e      	bne.n	8004328 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	220f      	movs	r2, #15
 800430e:	401a      	ands	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004314:	429a      	cmp	r2, r3
 8004316:	d107      	bne.n	8004328 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	23f0      	movs	r3, #240	; 0xf0
 800431c:	039b      	lsls	r3, r3, #14
 800431e:	401a      	ands	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004324:	429a      	cmp	r2, r3
 8004326:	d001      	beq.n	800432c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e000      	b.n	800432e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	0018      	movs	r0, r3
 8004330:	46bd      	mov	sp, r7
 8004332:	b008      	add	sp, #32
 8004334:	bd80      	pop	{r7, pc}
 8004336:	46c0      	nop			; (mov r8, r8)
 8004338:	40021000 	.word	0x40021000
 800433c:	00001388 	.word	0x00001388
 8004340:	efffffff 	.word	0xefffffff
 8004344:	feffffff 	.word	0xfeffffff
 8004348:	ffc2ffff 	.word	0xffc2ffff

0800434c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e0b3      	b.n	80044c8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004360:	4b5b      	ldr	r3, [pc, #364]	; (80044d0 <HAL_RCC_ClockConfig+0x184>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2201      	movs	r2, #1
 8004366:	4013      	ands	r3, r2
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	429a      	cmp	r2, r3
 800436c:	d911      	bls.n	8004392 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800436e:	4b58      	ldr	r3, [pc, #352]	; (80044d0 <HAL_RCC_ClockConfig+0x184>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2201      	movs	r2, #1
 8004374:	4393      	bics	r3, r2
 8004376:	0019      	movs	r1, r3
 8004378:	4b55      	ldr	r3, [pc, #340]	; (80044d0 <HAL_RCC_ClockConfig+0x184>)
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	430a      	orrs	r2, r1
 800437e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004380:	4b53      	ldr	r3, [pc, #332]	; (80044d0 <HAL_RCC_ClockConfig+0x184>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2201      	movs	r2, #1
 8004386:	4013      	ands	r3, r2
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d001      	beq.n	8004392 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e09a      	b.n	80044c8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2202      	movs	r2, #2
 8004398:	4013      	ands	r3, r2
 800439a:	d015      	beq.n	80043c8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2204      	movs	r2, #4
 80043a2:	4013      	ands	r3, r2
 80043a4:	d006      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80043a6:	4b4b      	ldr	r3, [pc, #300]	; (80044d4 <HAL_RCC_ClockConfig+0x188>)
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	4b4a      	ldr	r3, [pc, #296]	; (80044d4 <HAL_RCC_ClockConfig+0x188>)
 80043ac:	21e0      	movs	r1, #224	; 0xe0
 80043ae:	00c9      	lsls	r1, r1, #3
 80043b0:	430a      	orrs	r2, r1
 80043b2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043b4:	4b47      	ldr	r3, [pc, #284]	; (80044d4 <HAL_RCC_ClockConfig+0x188>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	22f0      	movs	r2, #240	; 0xf0
 80043ba:	4393      	bics	r3, r2
 80043bc:	0019      	movs	r1, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689a      	ldr	r2, [r3, #8]
 80043c2:	4b44      	ldr	r3, [pc, #272]	; (80044d4 <HAL_RCC_ClockConfig+0x188>)
 80043c4:	430a      	orrs	r2, r1
 80043c6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2201      	movs	r2, #1
 80043ce:	4013      	ands	r3, r2
 80043d0:	d040      	beq.n	8004454 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d107      	bne.n	80043ea <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043da:	4b3e      	ldr	r3, [pc, #248]	; (80044d4 <HAL_RCC_ClockConfig+0x188>)
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	2380      	movs	r3, #128	; 0x80
 80043e0:	029b      	lsls	r3, r3, #10
 80043e2:	4013      	ands	r3, r2
 80043e4:	d114      	bne.n	8004410 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e06e      	b.n	80044c8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d107      	bne.n	8004402 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043f2:	4b38      	ldr	r3, [pc, #224]	; (80044d4 <HAL_RCC_ClockConfig+0x188>)
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	2380      	movs	r3, #128	; 0x80
 80043f8:	049b      	lsls	r3, r3, #18
 80043fa:	4013      	ands	r3, r2
 80043fc:	d108      	bne.n	8004410 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e062      	b.n	80044c8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004402:	4b34      	ldr	r3, [pc, #208]	; (80044d4 <HAL_RCC_ClockConfig+0x188>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2202      	movs	r2, #2
 8004408:	4013      	ands	r3, r2
 800440a:	d101      	bne.n	8004410 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e05b      	b.n	80044c8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004410:	4b30      	ldr	r3, [pc, #192]	; (80044d4 <HAL_RCC_ClockConfig+0x188>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	2203      	movs	r2, #3
 8004416:	4393      	bics	r3, r2
 8004418:	0019      	movs	r1, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	4b2d      	ldr	r3, [pc, #180]	; (80044d4 <HAL_RCC_ClockConfig+0x188>)
 8004420:	430a      	orrs	r2, r1
 8004422:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004424:	f7fe fbe6 	bl	8002bf4 <HAL_GetTick>
 8004428:	0003      	movs	r3, r0
 800442a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800442c:	e009      	b.n	8004442 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800442e:	f7fe fbe1 	bl	8002bf4 <HAL_GetTick>
 8004432:	0002      	movs	r2, r0
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	4a27      	ldr	r2, [pc, #156]	; (80044d8 <HAL_RCC_ClockConfig+0x18c>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e042      	b.n	80044c8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004442:	4b24      	ldr	r3, [pc, #144]	; (80044d4 <HAL_RCC_ClockConfig+0x188>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	220c      	movs	r2, #12
 8004448:	401a      	ands	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	429a      	cmp	r2, r3
 8004452:	d1ec      	bne.n	800442e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004454:	4b1e      	ldr	r3, [pc, #120]	; (80044d0 <HAL_RCC_ClockConfig+0x184>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2201      	movs	r2, #1
 800445a:	4013      	ands	r3, r2
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d211      	bcs.n	8004486 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004462:	4b1b      	ldr	r3, [pc, #108]	; (80044d0 <HAL_RCC_ClockConfig+0x184>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2201      	movs	r2, #1
 8004468:	4393      	bics	r3, r2
 800446a:	0019      	movs	r1, r3
 800446c:	4b18      	ldr	r3, [pc, #96]	; (80044d0 <HAL_RCC_ClockConfig+0x184>)
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004474:	4b16      	ldr	r3, [pc, #88]	; (80044d0 <HAL_RCC_ClockConfig+0x184>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2201      	movs	r2, #1
 800447a:	4013      	ands	r3, r2
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	429a      	cmp	r2, r3
 8004480:	d001      	beq.n	8004486 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e020      	b.n	80044c8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2204      	movs	r2, #4
 800448c:	4013      	ands	r3, r2
 800448e:	d009      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004490:	4b10      	ldr	r3, [pc, #64]	; (80044d4 <HAL_RCC_ClockConfig+0x188>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	4a11      	ldr	r2, [pc, #68]	; (80044dc <HAL_RCC_ClockConfig+0x190>)
 8004496:	4013      	ands	r3, r2
 8004498:	0019      	movs	r1, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68da      	ldr	r2, [r3, #12]
 800449e:	4b0d      	ldr	r3, [pc, #52]	; (80044d4 <HAL_RCC_ClockConfig+0x188>)
 80044a0:	430a      	orrs	r2, r1
 80044a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80044a4:	f000 f820 	bl	80044e8 <HAL_RCC_GetSysClockFreq>
 80044a8:	0001      	movs	r1, r0
 80044aa:	4b0a      	ldr	r3, [pc, #40]	; (80044d4 <HAL_RCC_ClockConfig+0x188>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	091b      	lsrs	r3, r3, #4
 80044b0:	220f      	movs	r2, #15
 80044b2:	4013      	ands	r3, r2
 80044b4:	4a0a      	ldr	r2, [pc, #40]	; (80044e0 <HAL_RCC_ClockConfig+0x194>)
 80044b6:	5cd3      	ldrb	r3, [r2, r3]
 80044b8:	000a      	movs	r2, r1
 80044ba:	40da      	lsrs	r2, r3
 80044bc:	4b09      	ldr	r3, [pc, #36]	; (80044e4 <HAL_RCC_ClockConfig+0x198>)
 80044be:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80044c0:	2000      	movs	r0, #0
 80044c2:	f7fe fb51 	bl	8002b68 <HAL_InitTick>
  
  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	0018      	movs	r0, r3
 80044ca:	46bd      	mov	sp, r7
 80044cc:	b004      	add	sp, #16
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	40022000 	.word	0x40022000
 80044d4:	40021000 	.word	0x40021000
 80044d8:	00001388 	.word	0x00001388
 80044dc:	fffff8ff 	.word	0xfffff8ff
 80044e0:	08004740 	.word	0x08004740
 80044e4:	20000004 	.word	0x20000004

080044e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044e8:	b590      	push	{r4, r7, lr}
 80044ea:	b08f      	sub	sp, #60	; 0x3c
 80044ec:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80044ee:	2314      	movs	r3, #20
 80044f0:	18fb      	adds	r3, r7, r3
 80044f2:	4a2b      	ldr	r2, [pc, #172]	; (80045a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044f4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80044f6:	c313      	stmia	r3!, {r0, r1, r4}
 80044f8:	6812      	ldr	r2, [r2, #0]
 80044fa:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80044fc:	1d3b      	adds	r3, r7, #4
 80044fe:	4a29      	ldr	r2, [pc, #164]	; (80045a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004500:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004502:	c313      	stmia	r3!, {r0, r1, r4}
 8004504:	6812      	ldr	r2, [r2, #0]
 8004506:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004508:	2300      	movs	r3, #0
 800450a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800450c:	2300      	movs	r3, #0
 800450e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004510:	2300      	movs	r3, #0
 8004512:	637b      	str	r3, [r7, #52]	; 0x34
 8004514:	2300      	movs	r3, #0
 8004516:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004518:	2300      	movs	r3, #0
 800451a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800451c:	4b22      	ldr	r3, [pc, #136]	; (80045a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004524:	220c      	movs	r2, #12
 8004526:	4013      	ands	r3, r2
 8004528:	2b04      	cmp	r3, #4
 800452a:	d002      	beq.n	8004532 <HAL_RCC_GetSysClockFreq+0x4a>
 800452c:	2b08      	cmp	r3, #8
 800452e:	d003      	beq.n	8004538 <HAL_RCC_GetSysClockFreq+0x50>
 8004530:	e02d      	b.n	800458e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004532:	4b1e      	ldr	r3, [pc, #120]	; (80045ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8004534:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004536:	e02d      	b.n	8004594 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453a:	0c9b      	lsrs	r3, r3, #18
 800453c:	220f      	movs	r2, #15
 800453e:	4013      	ands	r3, r2
 8004540:	2214      	movs	r2, #20
 8004542:	18ba      	adds	r2, r7, r2
 8004544:	5cd3      	ldrb	r3, [r2, r3]
 8004546:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004548:	4b17      	ldr	r3, [pc, #92]	; (80045a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454c:	220f      	movs	r2, #15
 800454e:	4013      	ands	r3, r2
 8004550:	1d3a      	adds	r2, r7, #4
 8004552:	5cd3      	ldrb	r3, [r2, r3]
 8004554:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004556:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004558:	2380      	movs	r3, #128	; 0x80
 800455a:	025b      	lsls	r3, r3, #9
 800455c:	4013      	ands	r3, r2
 800455e:	d009      	beq.n	8004574 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004560:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004562:	4812      	ldr	r0, [pc, #72]	; (80045ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8004564:	f7fb fdd0 	bl	8000108 <__udivsi3>
 8004568:	0003      	movs	r3, r0
 800456a:	001a      	movs	r2, r3
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	4353      	muls	r3, r2
 8004570:	637b      	str	r3, [r7, #52]	; 0x34
 8004572:	e009      	b.n	8004588 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004574:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004576:	000a      	movs	r2, r1
 8004578:	0152      	lsls	r2, r2, #5
 800457a:	1a52      	subs	r2, r2, r1
 800457c:	0193      	lsls	r3, r2, #6
 800457e:	1a9b      	subs	r3, r3, r2
 8004580:	00db      	lsls	r3, r3, #3
 8004582:	185b      	adds	r3, r3, r1
 8004584:	021b      	lsls	r3, r3, #8
 8004586:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800458a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800458c:	e002      	b.n	8004594 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800458e:	4b07      	ldr	r3, [pc, #28]	; (80045ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8004590:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004592:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004596:	0018      	movs	r0, r3
 8004598:	46bd      	mov	sp, r7
 800459a:	b00f      	add	sp, #60	; 0x3c
 800459c:	bd90      	pop	{r4, r7, pc}
 800459e:	46c0      	nop			; (mov r8, r8)
 80045a0:	08004620 	.word	0x08004620
 80045a4:	08004630 	.word	0x08004630
 80045a8:	40021000 	.word	0x40021000
 80045ac:	007a1200 	.word	0x007a1200

080045b0 <__libc_init_array>:
 80045b0:	b570      	push	{r4, r5, r6, lr}
 80045b2:	2600      	movs	r6, #0
 80045b4:	4d0c      	ldr	r5, [pc, #48]	; (80045e8 <__libc_init_array+0x38>)
 80045b6:	4c0d      	ldr	r4, [pc, #52]	; (80045ec <__libc_init_array+0x3c>)
 80045b8:	1b64      	subs	r4, r4, r5
 80045ba:	10a4      	asrs	r4, r4, #2
 80045bc:	42a6      	cmp	r6, r4
 80045be:	d109      	bne.n	80045d4 <__libc_init_array+0x24>
 80045c0:	2600      	movs	r6, #0
 80045c2:	f000 f821 	bl	8004608 <_init>
 80045c6:	4d0a      	ldr	r5, [pc, #40]	; (80045f0 <__libc_init_array+0x40>)
 80045c8:	4c0a      	ldr	r4, [pc, #40]	; (80045f4 <__libc_init_array+0x44>)
 80045ca:	1b64      	subs	r4, r4, r5
 80045cc:	10a4      	asrs	r4, r4, #2
 80045ce:	42a6      	cmp	r6, r4
 80045d0:	d105      	bne.n	80045de <__libc_init_array+0x2e>
 80045d2:	bd70      	pop	{r4, r5, r6, pc}
 80045d4:	00b3      	lsls	r3, r6, #2
 80045d6:	58eb      	ldr	r3, [r5, r3]
 80045d8:	4798      	blx	r3
 80045da:	3601      	adds	r6, #1
 80045dc:	e7ee      	b.n	80045bc <__libc_init_array+0xc>
 80045de:	00b3      	lsls	r3, r6, #2
 80045e0:	58eb      	ldr	r3, [r5, r3]
 80045e2:	4798      	blx	r3
 80045e4:	3601      	adds	r6, #1
 80045e6:	e7f2      	b.n	80045ce <__libc_init_array+0x1e>
 80045e8:	08004750 	.word	0x08004750
 80045ec:	08004750 	.word	0x08004750
 80045f0:	08004750 	.word	0x08004750
 80045f4:	08004754 	.word	0x08004754

080045f8 <memset>:
 80045f8:	0003      	movs	r3, r0
 80045fa:	1882      	adds	r2, r0, r2
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d100      	bne.n	8004602 <memset+0xa>
 8004600:	4770      	bx	lr
 8004602:	7019      	strb	r1, [r3, #0]
 8004604:	3301      	adds	r3, #1
 8004606:	e7f9      	b.n	80045fc <memset+0x4>

08004608 <_init>:
 8004608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460a:	46c0      	nop			; (mov r8, r8)
 800460c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800460e:	bc08      	pop	{r3}
 8004610:	469e      	mov	lr, r3
 8004612:	4770      	bx	lr

08004614 <_fini>:
 8004614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004616:	46c0      	nop			; (mov r8, r8)
 8004618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800461a:	bc08      	pop	{r3}
 800461c:	469e      	mov	lr, r3
 800461e:	4770      	bx	lr
