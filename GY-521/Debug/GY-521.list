
GY-521.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bf4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08002cb4  08002cb4  00012cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d24  08002d24  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d24  08002d24  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d24  08002d24  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d24  08002d24  00012d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d28  08002d28  00012d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  2000000c  08002d38  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08002d38  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000064bb  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001433  00000000  00000000  000264ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000690  00000000  00000000  00027928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005d8  00000000  00000000  00027fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000105e7  00000000  00000000  00028590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008b3b  00000000  00000000  00038b77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00061713  00000000  00000000  000416b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a2dc5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016c8  00000000  00000000  000a2e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002c9c 	.word	0x08002c9c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002c9c 	.word	0x08002c9c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_ddiv>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	4657      	mov	r7, sl
 8000224:	464e      	mov	r6, r9
 8000226:	4645      	mov	r5, r8
 8000228:	46de      	mov	lr, fp
 800022a:	b5e0      	push	{r5, r6, r7, lr}
 800022c:	4681      	mov	r9, r0
 800022e:	0005      	movs	r5, r0
 8000230:	030c      	lsls	r4, r1, #12
 8000232:	0048      	lsls	r0, r1, #1
 8000234:	4692      	mov	sl, r2
 8000236:	001f      	movs	r7, r3
 8000238:	b085      	sub	sp, #20
 800023a:	0b24      	lsrs	r4, r4, #12
 800023c:	0d40      	lsrs	r0, r0, #21
 800023e:	0fce      	lsrs	r6, r1, #31
 8000240:	2800      	cmp	r0, #0
 8000242:	d100      	bne.n	8000246 <__aeabi_ddiv+0x26>
 8000244:	e156      	b.n	80004f4 <__aeabi_ddiv+0x2d4>
 8000246:	4bd4      	ldr	r3, [pc, #848]	; (8000598 <__aeabi_ddiv+0x378>)
 8000248:	4298      	cmp	r0, r3
 800024a:	d100      	bne.n	800024e <__aeabi_ddiv+0x2e>
 800024c:	e172      	b.n	8000534 <__aeabi_ddiv+0x314>
 800024e:	0f6b      	lsrs	r3, r5, #29
 8000250:	00e4      	lsls	r4, r4, #3
 8000252:	431c      	orrs	r4, r3
 8000254:	2380      	movs	r3, #128	; 0x80
 8000256:	041b      	lsls	r3, r3, #16
 8000258:	4323      	orrs	r3, r4
 800025a:	4698      	mov	r8, r3
 800025c:	4bcf      	ldr	r3, [pc, #828]	; (800059c <__aeabi_ddiv+0x37c>)
 800025e:	00ed      	lsls	r5, r5, #3
 8000260:	469b      	mov	fp, r3
 8000262:	2300      	movs	r3, #0
 8000264:	4699      	mov	r9, r3
 8000266:	4483      	add	fp, r0
 8000268:	9300      	str	r3, [sp, #0]
 800026a:	033c      	lsls	r4, r7, #12
 800026c:	007b      	lsls	r3, r7, #1
 800026e:	4650      	mov	r0, sl
 8000270:	0b24      	lsrs	r4, r4, #12
 8000272:	0d5b      	lsrs	r3, r3, #21
 8000274:	0fff      	lsrs	r7, r7, #31
 8000276:	2b00      	cmp	r3, #0
 8000278:	d100      	bne.n	800027c <__aeabi_ddiv+0x5c>
 800027a:	e11f      	b.n	80004bc <__aeabi_ddiv+0x29c>
 800027c:	4ac6      	ldr	r2, [pc, #792]	; (8000598 <__aeabi_ddiv+0x378>)
 800027e:	4293      	cmp	r3, r2
 8000280:	d100      	bne.n	8000284 <__aeabi_ddiv+0x64>
 8000282:	e162      	b.n	800054a <__aeabi_ddiv+0x32a>
 8000284:	49c5      	ldr	r1, [pc, #788]	; (800059c <__aeabi_ddiv+0x37c>)
 8000286:	0f42      	lsrs	r2, r0, #29
 8000288:	468c      	mov	ip, r1
 800028a:	00e4      	lsls	r4, r4, #3
 800028c:	4659      	mov	r1, fp
 800028e:	4314      	orrs	r4, r2
 8000290:	2280      	movs	r2, #128	; 0x80
 8000292:	4463      	add	r3, ip
 8000294:	0412      	lsls	r2, r2, #16
 8000296:	1acb      	subs	r3, r1, r3
 8000298:	4314      	orrs	r4, r2
 800029a:	469b      	mov	fp, r3
 800029c:	00c2      	lsls	r2, r0, #3
 800029e:	2000      	movs	r0, #0
 80002a0:	0033      	movs	r3, r6
 80002a2:	407b      	eors	r3, r7
 80002a4:	469a      	mov	sl, r3
 80002a6:	464b      	mov	r3, r9
 80002a8:	2b0f      	cmp	r3, #15
 80002aa:	d827      	bhi.n	80002fc <__aeabi_ddiv+0xdc>
 80002ac:	49bc      	ldr	r1, [pc, #752]	; (80005a0 <__aeabi_ddiv+0x380>)
 80002ae:	009b      	lsls	r3, r3, #2
 80002b0:	58cb      	ldr	r3, [r1, r3]
 80002b2:	469f      	mov	pc, r3
 80002b4:	46b2      	mov	sl, r6
 80002b6:	9b00      	ldr	r3, [sp, #0]
 80002b8:	2b02      	cmp	r3, #2
 80002ba:	d016      	beq.n	80002ea <__aeabi_ddiv+0xca>
 80002bc:	2b03      	cmp	r3, #3
 80002be:	d100      	bne.n	80002c2 <__aeabi_ddiv+0xa2>
 80002c0:	e28e      	b.n	80007e0 <__aeabi_ddiv+0x5c0>
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	d000      	beq.n	80002c8 <__aeabi_ddiv+0xa8>
 80002c6:	e0d9      	b.n	800047c <__aeabi_ddiv+0x25c>
 80002c8:	2300      	movs	r3, #0
 80002ca:	2400      	movs	r4, #0
 80002cc:	2500      	movs	r5, #0
 80002ce:	4652      	mov	r2, sl
 80002d0:	051b      	lsls	r3, r3, #20
 80002d2:	4323      	orrs	r3, r4
 80002d4:	07d2      	lsls	r2, r2, #31
 80002d6:	4313      	orrs	r3, r2
 80002d8:	0028      	movs	r0, r5
 80002da:	0019      	movs	r1, r3
 80002dc:	b005      	add	sp, #20
 80002de:	bcf0      	pop	{r4, r5, r6, r7}
 80002e0:	46bb      	mov	fp, r7
 80002e2:	46b2      	mov	sl, r6
 80002e4:	46a9      	mov	r9, r5
 80002e6:	46a0      	mov	r8, r4
 80002e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ea:	2400      	movs	r4, #0
 80002ec:	2500      	movs	r5, #0
 80002ee:	4baa      	ldr	r3, [pc, #680]	; (8000598 <__aeabi_ddiv+0x378>)
 80002f0:	e7ed      	b.n	80002ce <__aeabi_ddiv+0xae>
 80002f2:	46ba      	mov	sl, r7
 80002f4:	46a0      	mov	r8, r4
 80002f6:	0015      	movs	r5, r2
 80002f8:	9000      	str	r0, [sp, #0]
 80002fa:	e7dc      	b.n	80002b6 <__aeabi_ddiv+0x96>
 80002fc:	4544      	cmp	r4, r8
 80002fe:	d200      	bcs.n	8000302 <__aeabi_ddiv+0xe2>
 8000300:	e1c7      	b.n	8000692 <__aeabi_ddiv+0x472>
 8000302:	d100      	bne.n	8000306 <__aeabi_ddiv+0xe6>
 8000304:	e1c2      	b.n	800068c <__aeabi_ddiv+0x46c>
 8000306:	2301      	movs	r3, #1
 8000308:	425b      	negs	r3, r3
 800030a:	469c      	mov	ip, r3
 800030c:	002e      	movs	r6, r5
 800030e:	4640      	mov	r0, r8
 8000310:	2500      	movs	r5, #0
 8000312:	44e3      	add	fp, ip
 8000314:	0223      	lsls	r3, r4, #8
 8000316:	0e14      	lsrs	r4, r2, #24
 8000318:	431c      	orrs	r4, r3
 800031a:	0c1b      	lsrs	r3, r3, #16
 800031c:	4699      	mov	r9, r3
 800031e:	0423      	lsls	r3, r4, #16
 8000320:	0c1f      	lsrs	r7, r3, #16
 8000322:	0212      	lsls	r2, r2, #8
 8000324:	4649      	mov	r1, r9
 8000326:	9200      	str	r2, [sp, #0]
 8000328:	9701      	str	r7, [sp, #4]
 800032a:	f7ff ff73 	bl	8000214 <__aeabi_uidivmod>
 800032e:	0002      	movs	r2, r0
 8000330:	437a      	muls	r2, r7
 8000332:	040b      	lsls	r3, r1, #16
 8000334:	0c31      	lsrs	r1, r6, #16
 8000336:	4680      	mov	r8, r0
 8000338:	4319      	orrs	r1, r3
 800033a:	428a      	cmp	r2, r1
 800033c:	d907      	bls.n	800034e <__aeabi_ddiv+0x12e>
 800033e:	2301      	movs	r3, #1
 8000340:	425b      	negs	r3, r3
 8000342:	469c      	mov	ip, r3
 8000344:	1909      	adds	r1, r1, r4
 8000346:	44e0      	add	r8, ip
 8000348:	428c      	cmp	r4, r1
 800034a:	d800      	bhi.n	800034e <__aeabi_ddiv+0x12e>
 800034c:	e207      	b.n	800075e <__aeabi_ddiv+0x53e>
 800034e:	1a88      	subs	r0, r1, r2
 8000350:	4649      	mov	r1, r9
 8000352:	f7ff ff5f 	bl	8000214 <__aeabi_uidivmod>
 8000356:	0409      	lsls	r1, r1, #16
 8000358:	468c      	mov	ip, r1
 800035a:	0431      	lsls	r1, r6, #16
 800035c:	4666      	mov	r6, ip
 800035e:	9a01      	ldr	r2, [sp, #4]
 8000360:	0c09      	lsrs	r1, r1, #16
 8000362:	4342      	muls	r2, r0
 8000364:	0003      	movs	r3, r0
 8000366:	4331      	orrs	r1, r6
 8000368:	428a      	cmp	r2, r1
 800036a:	d904      	bls.n	8000376 <__aeabi_ddiv+0x156>
 800036c:	1909      	adds	r1, r1, r4
 800036e:	3b01      	subs	r3, #1
 8000370:	428c      	cmp	r4, r1
 8000372:	d800      	bhi.n	8000376 <__aeabi_ddiv+0x156>
 8000374:	e1ed      	b.n	8000752 <__aeabi_ddiv+0x532>
 8000376:	1a88      	subs	r0, r1, r2
 8000378:	4642      	mov	r2, r8
 800037a:	0412      	lsls	r2, r2, #16
 800037c:	431a      	orrs	r2, r3
 800037e:	4690      	mov	r8, r2
 8000380:	4641      	mov	r1, r8
 8000382:	9b00      	ldr	r3, [sp, #0]
 8000384:	040e      	lsls	r6, r1, #16
 8000386:	0c1b      	lsrs	r3, r3, #16
 8000388:	001f      	movs	r7, r3
 800038a:	9302      	str	r3, [sp, #8]
 800038c:	9b00      	ldr	r3, [sp, #0]
 800038e:	0c36      	lsrs	r6, r6, #16
 8000390:	041b      	lsls	r3, r3, #16
 8000392:	0c19      	lsrs	r1, r3, #16
 8000394:	000b      	movs	r3, r1
 8000396:	4373      	muls	r3, r6
 8000398:	0c12      	lsrs	r2, r2, #16
 800039a:	437e      	muls	r6, r7
 800039c:	9103      	str	r1, [sp, #12]
 800039e:	4351      	muls	r1, r2
 80003a0:	437a      	muls	r2, r7
 80003a2:	0c1f      	lsrs	r7, r3, #16
 80003a4:	46bc      	mov	ip, r7
 80003a6:	1876      	adds	r6, r6, r1
 80003a8:	4466      	add	r6, ip
 80003aa:	42b1      	cmp	r1, r6
 80003ac:	d903      	bls.n	80003b6 <__aeabi_ddiv+0x196>
 80003ae:	2180      	movs	r1, #128	; 0x80
 80003b0:	0249      	lsls	r1, r1, #9
 80003b2:	468c      	mov	ip, r1
 80003b4:	4462      	add	r2, ip
 80003b6:	0c31      	lsrs	r1, r6, #16
 80003b8:	188a      	adds	r2, r1, r2
 80003ba:	0431      	lsls	r1, r6, #16
 80003bc:	041e      	lsls	r6, r3, #16
 80003be:	0c36      	lsrs	r6, r6, #16
 80003c0:	198e      	adds	r6, r1, r6
 80003c2:	4290      	cmp	r0, r2
 80003c4:	d302      	bcc.n	80003cc <__aeabi_ddiv+0x1ac>
 80003c6:	d112      	bne.n	80003ee <__aeabi_ddiv+0x1ce>
 80003c8:	42b5      	cmp	r5, r6
 80003ca:	d210      	bcs.n	80003ee <__aeabi_ddiv+0x1ce>
 80003cc:	4643      	mov	r3, r8
 80003ce:	1e59      	subs	r1, r3, #1
 80003d0:	9b00      	ldr	r3, [sp, #0]
 80003d2:	469c      	mov	ip, r3
 80003d4:	4465      	add	r5, ip
 80003d6:	001f      	movs	r7, r3
 80003d8:	429d      	cmp	r5, r3
 80003da:	419b      	sbcs	r3, r3
 80003dc:	425b      	negs	r3, r3
 80003de:	191b      	adds	r3, r3, r4
 80003e0:	18c0      	adds	r0, r0, r3
 80003e2:	4284      	cmp	r4, r0
 80003e4:	d200      	bcs.n	80003e8 <__aeabi_ddiv+0x1c8>
 80003e6:	e1a0      	b.n	800072a <__aeabi_ddiv+0x50a>
 80003e8:	d100      	bne.n	80003ec <__aeabi_ddiv+0x1cc>
 80003ea:	e19b      	b.n	8000724 <__aeabi_ddiv+0x504>
 80003ec:	4688      	mov	r8, r1
 80003ee:	1bae      	subs	r6, r5, r6
 80003f0:	42b5      	cmp	r5, r6
 80003f2:	41ad      	sbcs	r5, r5
 80003f4:	1a80      	subs	r0, r0, r2
 80003f6:	426d      	negs	r5, r5
 80003f8:	1b40      	subs	r0, r0, r5
 80003fa:	4284      	cmp	r4, r0
 80003fc:	d100      	bne.n	8000400 <__aeabi_ddiv+0x1e0>
 80003fe:	e1d5      	b.n	80007ac <__aeabi_ddiv+0x58c>
 8000400:	4649      	mov	r1, r9
 8000402:	f7ff ff07 	bl	8000214 <__aeabi_uidivmod>
 8000406:	9a01      	ldr	r2, [sp, #4]
 8000408:	040b      	lsls	r3, r1, #16
 800040a:	4342      	muls	r2, r0
 800040c:	0c31      	lsrs	r1, r6, #16
 800040e:	0005      	movs	r5, r0
 8000410:	4319      	orrs	r1, r3
 8000412:	428a      	cmp	r2, r1
 8000414:	d900      	bls.n	8000418 <__aeabi_ddiv+0x1f8>
 8000416:	e16c      	b.n	80006f2 <__aeabi_ddiv+0x4d2>
 8000418:	1a88      	subs	r0, r1, r2
 800041a:	4649      	mov	r1, r9
 800041c:	f7ff fefa 	bl	8000214 <__aeabi_uidivmod>
 8000420:	9a01      	ldr	r2, [sp, #4]
 8000422:	0436      	lsls	r6, r6, #16
 8000424:	4342      	muls	r2, r0
 8000426:	0409      	lsls	r1, r1, #16
 8000428:	0c36      	lsrs	r6, r6, #16
 800042a:	0003      	movs	r3, r0
 800042c:	430e      	orrs	r6, r1
 800042e:	42b2      	cmp	r2, r6
 8000430:	d900      	bls.n	8000434 <__aeabi_ddiv+0x214>
 8000432:	e153      	b.n	80006dc <__aeabi_ddiv+0x4bc>
 8000434:	9803      	ldr	r0, [sp, #12]
 8000436:	1ab6      	subs	r6, r6, r2
 8000438:	0002      	movs	r2, r0
 800043a:	042d      	lsls	r5, r5, #16
 800043c:	431d      	orrs	r5, r3
 800043e:	9f02      	ldr	r7, [sp, #8]
 8000440:	042b      	lsls	r3, r5, #16
 8000442:	0c1b      	lsrs	r3, r3, #16
 8000444:	435a      	muls	r2, r3
 8000446:	437b      	muls	r3, r7
 8000448:	469c      	mov	ip, r3
 800044a:	0c29      	lsrs	r1, r5, #16
 800044c:	4348      	muls	r0, r1
 800044e:	0c13      	lsrs	r3, r2, #16
 8000450:	4484      	add	ip, r0
 8000452:	4463      	add	r3, ip
 8000454:	4379      	muls	r1, r7
 8000456:	4298      	cmp	r0, r3
 8000458:	d903      	bls.n	8000462 <__aeabi_ddiv+0x242>
 800045a:	2080      	movs	r0, #128	; 0x80
 800045c:	0240      	lsls	r0, r0, #9
 800045e:	4684      	mov	ip, r0
 8000460:	4461      	add	r1, ip
 8000462:	0c18      	lsrs	r0, r3, #16
 8000464:	0412      	lsls	r2, r2, #16
 8000466:	041b      	lsls	r3, r3, #16
 8000468:	0c12      	lsrs	r2, r2, #16
 800046a:	1841      	adds	r1, r0, r1
 800046c:	189b      	adds	r3, r3, r2
 800046e:	428e      	cmp	r6, r1
 8000470:	d200      	bcs.n	8000474 <__aeabi_ddiv+0x254>
 8000472:	e0ff      	b.n	8000674 <__aeabi_ddiv+0x454>
 8000474:	d100      	bne.n	8000478 <__aeabi_ddiv+0x258>
 8000476:	e0fa      	b.n	800066e <__aeabi_ddiv+0x44e>
 8000478:	2301      	movs	r3, #1
 800047a:	431d      	orrs	r5, r3
 800047c:	4a49      	ldr	r2, [pc, #292]	; (80005a4 <__aeabi_ddiv+0x384>)
 800047e:	445a      	add	r2, fp
 8000480:	2a00      	cmp	r2, #0
 8000482:	dc00      	bgt.n	8000486 <__aeabi_ddiv+0x266>
 8000484:	e0aa      	b.n	80005dc <__aeabi_ddiv+0x3bc>
 8000486:	076b      	lsls	r3, r5, #29
 8000488:	d000      	beq.n	800048c <__aeabi_ddiv+0x26c>
 800048a:	e13d      	b.n	8000708 <__aeabi_ddiv+0x4e8>
 800048c:	08ed      	lsrs	r5, r5, #3
 800048e:	4643      	mov	r3, r8
 8000490:	01db      	lsls	r3, r3, #7
 8000492:	d506      	bpl.n	80004a2 <__aeabi_ddiv+0x282>
 8000494:	4642      	mov	r2, r8
 8000496:	4b44      	ldr	r3, [pc, #272]	; (80005a8 <__aeabi_ddiv+0x388>)
 8000498:	401a      	ands	r2, r3
 800049a:	4690      	mov	r8, r2
 800049c:	2280      	movs	r2, #128	; 0x80
 800049e:	00d2      	lsls	r2, r2, #3
 80004a0:	445a      	add	r2, fp
 80004a2:	4b42      	ldr	r3, [pc, #264]	; (80005ac <__aeabi_ddiv+0x38c>)
 80004a4:	429a      	cmp	r2, r3
 80004a6:	dd00      	ble.n	80004aa <__aeabi_ddiv+0x28a>
 80004a8:	e71f      	b.n	80002ea <__aeabi_ddiv+0xca>
 80004aa:	4643      	mov	r3, r8
 80004ac:	075b      	lsls	r3, r3, #29
 80004ae:	431d      	orrs	r5, r3
 80004b0:	4643      	mov	r3, r8
 80004b2:	0552      	lsls	r2, r2, #21
 80004b4:	025c      	lsls	r4, r3, #9
 80004b6:	0b24      	lsrs	r4, r4, #12
 80004b8:	0d53      	lsrs	r3, r2, #21
 80004ba:	e708      	b.n	80002ce <__aeabi_ddiv+0xae>
 80004bc:	4652      	mov	r2, sl
 80004be:	4322      	orrs	r2, r4
 80004c0:	d100      	bne.n	80004c4 <__aeabi_ddiv+0x2a4>
 80004c2:	e07b      	b.n	80005bc <__aeabi_ddiv+0x39c>
 80004c4:	2c00      	cmp	r4, #0
 80004c6:	d100      	bne.n	80004ca <__aeabi_ddiv+0x2aa>
 80004c8:	e0fa      	b.n	80006c0 <__aeabi_ddiv+0x4a0>
 80004ca:	0020      	movs	r0, r4
 80004cc:	f000 fa04 	bl	80008d8 <__clzsi2>
 80004d0:	0002      	movs	r2, r0
 80004d2:	3a0b      	subs	r2, #11
 80004d4:	231d      	movs	r3, #29
 80004d6:	0001      	movs	r1, r0
 80004d8:	1a9b      	subs	r3, r3, r2
 80004da:	4652      	mov	r2, sl
 80004dc:	3908      	subs	r1, #8
 80004de:	40da      	lsrs	r2, r3
 80004e0:	408c      	lsls	r4, r1
 80004e2:	4314      	orrs	r4, r2
 80004e4:	4652      	mov	r2, sl
 80004e6:	408a      	lsls	r2, r1
 80004e8:	4b31      	ldr	r3, [pc, #196]	; (80005b0 <__aeabi_ddiv+0x390>)
 80004ea:	4458      	add	r0, fp
 80004ec:	469b      	mov	fp, r3
 80004ee:	4483      	add	fp, r0
 80004f0:	2000      	movs	r0, #0
 80004f2:	e6d5      	b.n	80002a0 <__aeabi_ddiv+0x80>
 80004f4:	464b      	mov	r3, r9
 80004f6:	4323      	orrs	r3, r4
 80004f8:	4698      	mov	r8, r3
 80004fa:	d044      	beq.n	8000586 <__aeabi_ddiv+0x366>
 80004fc:	2c00      	cmp	r4, #0
 80004fe:	d100      	bne.n	8000502 <__aeabi_ddiv+0x2e2>
 8000500:	e0ce      	b.n	80006a0 <__aeabi_ddiv+0x480>
 8000502:	0020      	movs	r0, r4
 8000504:	f000 f9e8 	bl	80008d8 <__clzsi2>
 8000508:	0001      	movs	r1, r0
 800050a:	0002      	movs	r2, r0
 800050c:	390b      	subs	r1, #11
 800050e:	231d      	movs	r3, #29
 8000510:	1a5b      	subs	r3, r3, r1
 8000512:	4649      	mov	r1, r9
 8000514:	0010      	movs	r0, r2
 8000516:	40d9      	lsrs	r1, r3
 8000518:	3808      	subs	r0, #8
 800051a:	4084      	lsls	r4, r0
 800051c:	000b      	movs	r3, r1
 800051e:	464d      	mov	r5, r9
 8000520:	4323      	orrs	r3, r4
 8000522:	4698      	mov	r8, r3
 8000524:	4085      	lsls	r5, r0
 8000526:	4823      	ldr	r0, [pc, #140]	; (80005b4 <__aeabi_ddiv+0x394>)
 8000528:	1a83      	subs	r3, r0, r2
 800052a:	469b      	mov	fp, r3
 800052c:	2300      	movs	r3, #0
 800052e:	4699      	mov	r9, r3
 8000530:	9300      	str	r3, [sp, #0]
 8000532:	e69a      	b.n	800026a <__aeabi_ddiv+0x4a>
 8000534:	464b      	mov	r3, r9
 8000536:	4323      	orrs	r3, r4
 8000538:	4698      	mov	r8, r3
 800053a:	d11d      	bne.n	8000578 <__aeabi_ddiv+0x358>
 800053c:	2308      	movs	r3, #8
 800053e:	4699      	mov	r9, r3
 8000540:	3b06      	subs	r3, #6
 8000542:	2500      	movs	r5, #0
 8000544:	4683      	mov	fp, r0
 8000546:	9300      	str	r3, [sp, #0]
 8000548:	e68f      	b.n	800026a <__aeabi_ddiv+0x4a>
 800054a:	4652      	mov	r2, sl
 800054c:	4322      	orrs	r2, r4
 800054e:	d109      	bne.n	8000564 <__aeabi_ddiv+0x344>
 8000550:	2302      	movs	r3, #2
 8000552:	4649      	mov	r1, r9
 8000554:	4319      	orrs	r1, r3
 8000556:	4b18      	ldr	r3, [pc, #96]	; (80005b8 <__aeabi_ddiv+0x398>)
 8000558:	4689      	mov	r9, r1
 800055a:	469c      	mov	ip, r3
 800055c:	2400      	movs	r4, #0
 800055e:	2002      	movs	r0, #2
 8000560:	44e3      	add	fp, ip
 8000562:	e69d      	b.n	80002a0 <__aeabi_ddiv+0x80>
 8000564:	2303      	movs	r3, #3
 8000566:	464a      	mov	r2, r9
 8000568:	431a      	orrs	r2, r3
 800056a:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <__aeabi_ddiv+0x398>)
 800056c:	4691      	mov	r9, r2
 800056e:	469c      	mov	ip, r3
 8000570:	4652      	mov	r2, sl
 8000572:	2003      	movs	r0, #3
 8000574:	44e3      	add	fp, ip
 8000576:	e693      	b.n	80002a0 <__aeabi_ddiv+0x80>
 8000578:	230c      	movs	r3, #12
 800057a:	4699      	mov	r9, r3
 800057c:	3b09      	subs	r3, #9
 800057e:	46a0      	mov	r8, r4
 8000580:	4683      	mov	fp, r0
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	e671      	b.n	800026a <__aeabi_ddiv+0x4a>
 8000586:	2304      	movs	r3, #4
 8000588:	4699      	mov	r9, r3
 800058a:	2300      	movs	r3, #0
 800058c:	469b      	mov	fp, r3
 800058e:	3301      	adds	r3, #1
 8000590:	2500      	movs	r5, #0
 8000592:	9300      	str	r3, [sp, #0]
 8000594:	e669      	b.n	800026a <__aeabi_ddiv+0x4a>
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	000007ff 	.word	0x000007ff
 800059c:	fffffc01 	.word	0xfffffc01
 80005a0:	08002cd4 	.word	0x08002cd4
 80005a4:	000003ff 	.word	0x000003ff
 80005a8:	feffffff 	.word	0xfeffffff
 80005ac:	000007fe 	.word	0x000007fe
 80005b0:	000003f3 	.word	0x000003f3
 80005b4:	fffffc0d 	.word	0xfffffc0d
 80005b8:	fffff801 	.word	0xfffff801
 80005bc:	4649      	mov	r1, r9
 80005be:	2301      	movs	r3, #1
 80005c0:	4319      	orrs	r1, r3
 80005c2:	4689      	mov	r9, r1
 80005c4:	2400      	movs	r4, #0
 80005c6:	2001      	movs	r0, #1
 80005c8:	e66a      	b.n	80002a0 <__aeabi_ddiv+0x80>
 80005ca:	2300      	movs	r3, #0
 80005cc:	2480      	movs	r4, #128	; 0x80
 80005ce:	469a      	mov	sl, r3
 80005d0:	2500      	movs	r5, #0
 80005d2:	4b8a      	ldr	r3, [pc, #552]	; (80007fc <__aeabi_ddiv+0x5dc>)
 80005d4:	0324      	lsls	r4, r4, #12
 80005d6:	e67a      	b.n	80002ce <__aeabi_ddiv+0xae>
 80005d8:	2501      	movs	r5, #1
 80005da:	426d      	negs	r5, r5
 80005dc:	2301      	movs	r3, #1
 80005de:	1a9b      	subs	r3, r3, r2
 80005e0:	2b38      	cmp	r3, #56	; 0x38
 80005e2:	dd00      	ble.n	80005e6 <__aeabi_ddiv+0x3c6>
 80005e4:	e670      	b.n	80002c8 <__aeabi_ddiv+0xa8>
 80005e6:	2b1f      	cmp	r3, #31
 80005e8:	dc00      	bgt.n	80005ec <__aeabi_ddiv+0x3cc>
 80005ea:	e0bf      	b.n	800076c <__aeabi_ddiv+0x54c>
 80005ec:	211f      	movs	r1, #31
 80005ee:	4249      	negs	r1, r1
 80005f0:	1a8a      	subs	r2, r1, r2
 80005f2:	4641      	mov	r1, r8
 80005f4:	40d1      	lsrs	r1, r2
 80005f6:	000a      	movs	r2, r1
 80005f8:	2b20      	cmp	r3, #32
 80005fa:	d004      	beq.n	8000606 <__aeabi_ddiv+0x3e6>
 80005fc:	4641      	mov	r1, r8
 80005fe:	4b80      	ldr	r3, [pc, #512]	; (8000800 <__aeabi_ddiv+0x5e0>)
 8000600:	445b      	add	r3, fp
 8000602:	4099      	lsls	r1, r3
 8000604:	430d      	orrs	r5, r1
 8000606:	1e6b      	subs	r3, r5, #1
 8000608:	419d      	sbcs	r5, r3
 800060a:	2307      	movs	r3, #7
 800060c:	432a      	orrs	r2, r5
 800060e:	001d      	movs	r5, r3
 8000610:	2400      	movs	r4, #0
 8000612:	4015      	ands	r5, r2
 8000614:	4213      	tst	r3, r2
 8000616:	d100      	bne.n	800061a <__aeabi_ddiv+0x3fa>
 8000618:	e0d4      	b.n	80007c4 <__aeabi_ddiv+0x5a4>
 800061a:	210f      	movs	r1, #15
 800061c:	2300      	movs	r3, #0
 800061e:	4011      	ands	r1, r2
 8000620:	2904      	cmp	r1, #4
 8000622:	d100      	bne.n	8000626 <__aeabi_ddiv+0x406>
 8000624:	e0cb      	b.n	80007be <__aeabi_ddiv+0x59e>
 8000626:	1d11      	adds	r1, r2, #4
 8000628:	4291      	cmp	r1, r2
 800062a:	4192      	sbcs	r2, r2
 800062c:	4252      	negs	r2, r2
 800062e:	189b      	adds	r3, r3, r2
 8000630:	000a      	movs	r2, r1
 8000632:	0219      	lsls	r1, r3, #8
 8000634:	d400      	bmi.n	8000638 <__aeabi_ddiv+0x418>
 8000636:	e0c2      	b.n	80007be <__aeabi_ddiv+0x59e>
 8000638:	2301      	movs	r3, #1
 800063a:	2400      	movs	r4, #0
 800063c:	2500      	movs	r5, #0
 800063e:	e646      	b.n	80002ce <__aeabi_ddiv+0xae>
 8000640:	2380      	movs	r3, #128	; 0x80
 8000642:	4641      	mov	r1, r8
 8000644:	031b      	lsls	r3, r3, #12
 8000646:	4219      	tst	r1, r3
 8000648:	d008      	beq.n	800065c <__aeabi_ddiv+0x43c>
 800064a:	421c      	tst	r4, r3
 800064c:	d106      	bne.n	800065c <__aeabi_ddiv+0x43c>
 800064e:	431c      	orrs	r4, r3
 8000650:	0324      	lsls	r4, r4, #12
 8000652:	46ba      	mov	sl, r7
 8000654:	0015      	movs	r5, r2
 8000656:	4b69      	ldr	r3, [pc, #420]	; (80007fc <__aeabi_ddiv+0x5dc>)
 8000658:	0b24      	lsrs	r4, r4, #12
 800065a:	e638      	b.n	80002ce <__aeabi_ddiv+0xae>
 800065c:	2480      	movs	r4, #128	; 0x80
 800065e:	4643      	mov	r3, r8
 8000660:	0324      	lsls	r4, r4, #12
 8000662:	431c      	orrs	r4, r3
 8000664:	0324      	lsls	r4, r4, #12
 8000666:	46b2      	mov	sl, r6
 8000668:	4b64      	ldr	r3, [pc, #400]	; (80007fc <__aeabi_ddiv+0x5dc>)
 800066a:	0b24      	lsrs	r4, r4, #12
 800066c:	e62f      	b.n	80002ce <__aeabi_ddiv+0xae>
 800066e:	2b00      	cmp	r3, #0
 8000670:	d100      	bne.n	8000674 <__aeabi_ddiv+0x454>
 8000672:	e703      	b.n	800047c <__aeabi_ddiv+0x25c>
 8000674:	19a6      	adds	r6, r4, r6
 8000676:	1e68      	subs	r0, r5, #1
 8000678:	42a6      	cmp	r6, r4
 800067a:	d200      	bcs.n	800067e <__aeabi_ddiv+0x45e>
 800067c:	e08d      	b.n	800079a <__aeabi_ddiv+0x57a>
 800067e:	428e      	cmp	r6, r1
 8000680:	d200      	bcs.n	8000684 <__aeabi_ddiv+0x464>
 8000682:	e0a3      	b.n	80007cc <__aeabi_ddiv+0x5ac>
 8000684:	d100      	bne.n	8000688 <__aeabi_ddiv+0x468>
 8000686:	e0b3      	b.n	80007f0 <__aeabi_ddiv+0x5d0>
 8000688:	0005      	movs	r5, r0
 800068a:	e6f5      	b.n	8000478 <__aeabi_ddiv+0x258>
 800068c:	42aa      	cmp	r2, r5
 800068e:	d900      	bls.n	8000692 <__aeabi_ddiv+0x472>
 8000690:	e639      	b.n	8000306 <__aeabi_ddiv+0xe6>
 8000692:	4643      	mov	r3, r8
 8000694:	07de      	lsls	r6, r3, #31
 8000696:	0858      	lsrs	r0, r3, #1
 8000698:	086b      	lsrs	r3, r5, #1
 800069a:	431e      	orrs	r6, r3
 800069c:	07ed      	lsls	r5, r5, #31
 800069e:	e639      	b.n	8000314 <__aeabi_ddiv+0xf4>
 80006a0:	4648      	mov	r0, r9
 80006a2:	f000 f919 	bl	80008d8 <__clzsi2>
 80006a6:	0001      	movs	r1, r0
 80006a8:	0002      	movs	r2, r0
 80006aa:	3115      	adds	r1, #21
 80006ac:	3220      	adds	r2, #32
 80006ae:	291c      	cmp	r1, #28
 80006b0:	dc00      	bgt.n	80006b4 <__aeabi_ddiv+0x494>
 80006b2:	e72c      	b.n	800050e <__aeabi_ddiv+0x2ee>
 80006b4:	464b      	mov	r3, r9
 80006b6:	3808      	subs	r0, #8
 80006b8:	4083      	lsls	r3, r0
 80006ba:	2500      	movs	r5, #0
 80006bc:	4698      	mov	r8, r3
 80006be:	e732      	b.n	8000526 <__aeabi_ddiv+0x306>
 80006c0:	f000 f90a 	bl	80008d8 <__clzsi2>
 80006c4:	0003      	movs	r3, r0
 80006c6:	001a      	movs	r2, r3
 80006c8:	3215      	adds	r2, #21
 80006ca:	3020      	adds	r0, #32
 80006cc:	2a1c      	cmp	r2, #28
 80006ce:	dc00      	bgt.n	80006d2 <__aeabi_ddiv+0x4b2>
 80006d0:	e700      	b.n	80004d4 <__aeabi_ddiv+0x2b4>
 80006d2:	4654      	mov	r4, sl
 80006d4:	3b08      	subs	r3, #8
 80006d6:	2200      	movs	r2, #0
 80006d8:	409c      	lsls	r4, r3
 80006da:	e705      	b.n	80004e8 <__aeabi_ddiv+0x2c8>
 80006dc:	1936      	adds	r6, r6, r4
 80006de:	3b01      	subs	r3, #1
 80006e0:	42b4      	cmp	r4, r6
 80006e2:	d900      	bls.n	80006e6 <__aeabi_ddiv+0x4c6>
 80006e4:	e6a6      	b.n	8000434 <__aeabi_ddiv+0x214>
 80006e6:	42b2      	cmp	r2, r6
 80006e8:	d800      	bhi.n	80006ec <__aeabi_ddiv+0x4cc>
 80006ea:	e6a3      	b.n	8000434 <__aeabi_ddiv+0x214>
 80006ec:	1e83      	subs	r3, r0, #2
 80006ee:	1936      	adds	r6, r6, r4
 80006f0:	e6a0      	b.n	8000434 <__aeabi_ddiv+0x214>
 80006f2:	1909      	adds	r1, r1, r4
 80006f4:	3d01      	subs	r5, #1
 80006f6:	428c      	cmp	r4, r1
 80006f8:	d900      	bls.n	80006fc <__aeabi_ddiv+0x4dc>
 80006fa:	e68d      	b.n	8000418 <__aeabi_ddiv+0x1f8>
 80006fc:	428a      	cmp	r2, r1
 80006fe:	d800      	bhi.n	8000702 <__aeabi_ddiv+0x4e2>
 8000700:	e68a      	b.n	8000418 <__aeabi_ddiv+0x1f8>
 8000702:	1e85      	subs	r5, r0, #2
 8000704:	1909      	adds	r1, r1, r4
 8000706:	e687      	b.n	8000418 <__aeabi_ddiv+0x1f8>
 8000708:	230f      	movs	r3, #15
 800070a:	402b      	ands	r3, r5
 800070c:	2b04      	cmp	r3, #4
 800070e:	d100      	bne.n	8000712 <__aeabi_ddiv+0x4f2>
 8000710:	e6bc      	b.n	800048c <__aeabi_ddiv+0x26c>
 8000712:	2305      	movs	r3, #5
 8000714:	425b      	negs	r3, r3
 8000716:	42ab      	cmp	r3, r5
 8000718:	419b      	sbcs	r3, r3
 800071a:	3504      	adds	r5, #4
 800071c:	425b      	negs	r3, r3
 800071e:	08ed      	lsrs	r5, r5, #3
 8000720:	4498      	add	r8, r3
 8000722:	e6b4      	b.n	800048e <__aeabi_ddiv+0x26e>
 8000724:	42af      	cmp	r7, r5
 8000726:	d900      	bls.n	800072a <__aeabi_ddiv+0x50a>
 8000728:	e660      	b.n	80003ec <__aeabi_ddiv+0x1cc>
 800072a:	4282      	cmp	r2, r0
 800072c:	d804      	bhi.n	8000738 <__aeabi_ddiv+0x518>
 800072e:	d000      	beq.n	8000732 <__aeabi_ddiv+0x512>
 8000730:	e65c      	b.n	80003ec <__aeabi_ddiv+0x1cc>
 8000732:	42ae      	cmp	r6, r5
 8000734:	d800      	bhi.n	8000738 <__aeabi_ddiv+0x518>
 8000736:	e659      	b.n	80003ec <__aeabi_ddiv+0x1cc>
 8000738:	2302      	movs	r3, #2
 800073a:	425b      	negs	r3, r3
 800073c:	469c      	mov	ip, r3
 800073e:	9b00      	ldr	r3, [sp, #0]
 8000740:	44e0      	add	r8, ip
 8000742:	469c      	mov	ip, r3
 8000744:	4465      	add	r5, ip
 8000746:	429d      	cmp	r5, r3
 8000748:	419b      	sbcs	r3, r3
 800074a:	425b      	negs	r3, r3
 800074c:	191b      	adds	r3, r3, r4
 800074e:	18c0      	adds	r0, r0, r3
 8000750:	e64d      	b.n	80003ee <__aeabi_ddiv+0x1ce>
 8000752:	428a      	cmp	r2, r1
 8000754:	d800      	bhi.n	8000758 <__aeabi_ddiv+0x538>
 8000756:	e60e      	b.n	8000376 <__aeabi_ddiv+0x156>
 8000758:	1e83      	subs	r3, r0, #2
 800075a:	1909      	adds	r1, r1, r4
 800075c:	e60b      	b.n	8000376 <__aeabi_ddiv+0x156>
 800075e:	428a      	cmp	r2, r1
 8000760:	d800      	bhi.n	8000764 <__aeabi_ddiv+0x544>
 8000762:	e5f4      	b.n	800034e <__aeabi_ddiv+0x12e>
 8000764:	1e83      	subs	r3, r0, #2
 8000766:	4698      	mov	r8, r3
 8000768:	1909      	adds	r1, r1, r4
 800076a:	e5f0      	b.n	800034e <__aeabi_ddiv+0x12e>
 800076c:	4925      	ldr	r1, [pc, #148]	; (8000804 <__aeabi_ddiv+0x5e4>)
 800076e:	0028      	movs	r0, r5
 8000770:	4459      	add	r1, fp
 8000772:	408d      	lsls	r5, r1
 8000774:	4642      	mov	r2, r8
 8000776:	408a      	lsls	r2, r1
 8000778:	1e69      	subs	r1, r5, #1
 800077a:	418d      	sbcs	r5, r1
 800077c:	4641      	mov	r1, r8
 800077e:	40d8      	lsrs	r0, r3
 8000780:	40d9      	lsrs	r1, r3
 8000782:	4302      	orrs	r2, r0
 8000784:	432a      	orrs	r2, r5
 8000786:	000b      	movs	r3, r1
 8000788:	0751      	lsls	r1, r2, #29
 800078a:	d100      	bne.n	800078e <__aeabi_ddiv+0x56e>
 800078c:	e751      	b.n	8000632 <__aeabi_ddiv+0x412>
 800078e:	210f      	movs	r1, #15
 8000790:	4011      	ands	r1, r2
 8000792:	2904      	cmp	r1, #4
 8000794:	d000      	beq.n	8000798 <__aeabi_ddiv+0x578>
 8000796:	e746      	b.n	8000626 <__aeabi_ddiv+0x406>
 8000798:	e74b      	b.n	8000632 <__aeabi_ddiv+0x412>
 800079a:	0005      	movs	r5, r0
 800079c:	428e      	cmp	r6, r1
 800079e:	d000      	beq.n	80007a2 <__aeabi_ddiv+0x582>
 80007a0:	e66a      	b.n	8000478 <__aeabi_ddiv+0x258>
 80007a2:	9a00      	ldr	r2, [sp, #0]
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d000      	beq.n	80007aa <__aeabi_ddiv+0x58a>
 80007a8:	e666      	b.n	8000478 <__aeabi_ddiv+0x258>
 80007aa:	e667      	b.n	800047c <__aeabi_ddiv+0x25c>
 80007ac:	4a16      	ldr	r2, [pc, #88]	; (8000808 <__aeabi_ddiv+0x5e8>)
 80007ae:	445a      	add	r2, fp
 80007b0:	2a00      	cmp	r2, #0
 80007b2:	dc00      	bgt.n	80007b6 <__aeabi_ddiv+0x596>
 80007b4:	e710      	b.n	80005d8 <__aeabi_ddiv+0x3b8>
 80007b6:	2301      	movs	r3, #1
 80007b8:	2500      	movs	r5, #0
 80007ba:	4498      	add	r8, r3
 80007bc:	e667      	b.n	800048e <__aeabi_ddiv+0x26e>
 80007be:	075d      	lsls	r5, r3, #29
 80007c0:	025b      	lsls	r3, r3, #9
 80007c2:	0b1c      	lsrs	r4, r3, #12
 80007c4:	08d2      	lsrs	r2, r2, #3
 80007c6:	2300      	movs	r3, #0
 80007c8:	4315      	orrs	r5, r2
 80007ca:	e580      	b.n	80002ce <__aeabi_ddiv+0xae>
 80007cc:	9800      	ldr	r0, [sp, #0]
 80007ce:	3d02      	subs	r5, #2
 80007d0:	0042      	lsls	r2, r0, #1
 80007d2:	4282      	cmp	r2, r0
 80007d4:	41bf      	sbcs	r7, r7
 80007d6:	427f      	negs	r7, r7
 80007d8:	193c      	adds	r4, r7, r4
 80007da:	1936      	adds	r6, r6, r4
 80007dc:	9200      	str	r2, [sp, #0]
 80007de:	e7dd      	b.n	800079c <__aeabi_ddiv+0x57c>
 80007e0:	2480      	movs	r4, #128	; 0x80
 80007e2:	4643      	mov	r3, r8
 80007e4:	0324      	lsls	r4, r4, #12
 80007e6:	431c      	orrs	r4, r3
 80007e8:	0324      	lsls	r4, r4, #12
 80007ea:	4b04      	ldr	r3, [pc, #16]	; (80007fc <__aeabi_ddiv+0x5dc>)
 80007ec:	0b24      	lsrs	r4, r4, #12
 80007ee:	e56e      	b.n	80002ce <__aeabi_ddiv+0xae>
 80007f0:	9a00      	ldr	r2, [sp, #0]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d3ea      	bcc.n	80007cc <__aeabi_ddiv+0x5ac>
 80007f6:	0005      	movs	r5, r0
 80007f8:	e7d3      	b.n	80007a2 <__aeabi_ddiv+0x582>
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	000007ff 	.word	0x000007ff
 8000800:	0000043e 	.word	0x0000043e
 8000804:	0000041e 	.word	0x0000041e
 8000808:	000003ff 	.word	0x000003ff

0800080c <__aeabi_d2iz>:
 800080c:	000a      	movs	r2, r1
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	4c13      	ldr	r4, [pc, #76]	; (8000860 <__aeabi_d2iz+0x54>)
 8000812:	0053      	lsls	r3, r2, #1
 8000814:	0309      	lsls	r1, r1, #12
 8000816:	0005      	movs	r5, r0
 8000818:	0b09      	lsrs	r1, r1, #12
 800081a:	2000      	movs	r0, #0
 800081c:	0d5b      	lsrs	r3, r3, #21
 800081e:	0fd2      	lsrs	r2, r2, #31
 8000820:	42a3      	cmp	r3, r4
 8000822:	dd04      	ble.n	800082e <__aeabi_d2iz+0x22>
 8000824:	480f      	ldr	r0, [pc, #60]	; (8000864 <__aeabi_d2iz+0x58>)
 8000826:	4283      	cmp	r3, r0
 8000828:	dd02      	ble.n	8000830 <__aeabi_d2iz+0x24>
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <__aeabi_d2iz+0x5c>)
 800082c:	18d0      	adds	r0, r2, r3
 800082e:	bd30      	pop	{r4, r5, pc}
 8000830:	2080      	movs	r0, #128	; 0x80
 8000832:	0340      	lsls	r0, r0, #13
 8000834:	4301      	orrs	r1, r0
 8000836:	480d      	ldr	r0, [pc, #52]	; (800086c <__aeabi_d2iz+0x60>)
 8000838:	1ac0      	subs	r0, r0, r3
 800083a:	281f      	cmp	r0, #31
 800083c:	dd08      	ble.n	8000850 <__aeabi_d2iz+0x44>
 800083e:	480c      	ldr	r0, [pc, #48]	; (8000870 <__aeabi_d2iz+0x64>)
 8000840:	1ac3      	subs	r3, r0, r3
 8000842:	40d9      	lsrs	r1, r3
 8000844:	000b      	movs	r3, r1
 8000846:	4258      	negs	r0, r3
 8000848:	2a00      	cmp	r2, #0
 800084a:	d1f0      	bne.n	800082e <__aeabi_d2iz+0x22>
 800084c:	0018      	movs	r0, r3
 800084e:	e7ee      	b.n	800082e <__aeabi_d2iz+0x22>
 8000850:	4c08      	ldr	r4, [pc, #32]	; (8000874 <__aeabi_d2iz+0x68>)
 8000852:	40c5      	lsrs	r5, r0
 8000854:	46a4      	mov	ip, r4
 8000856:	4463      	add	r3, ip
 8000858:	4099      	lsls	r1, r3
 800085a:	000b      	movs	r3, r1
 800085c:	432b      	orrs	r3, r5
 800085e:	e7f2      	b.n	8000846 <__aeabi_d2iz+0x3a>
 8000860:	000003fe 	.word	0x000003fe
 8000864:	0000041d 	.word	0x0000041d
 8000868:	7fffffff 	.word	0x7fffffff
 800086c:	00000433 	.word	0x00000433
 8000870:	00000413 	.word	0x00000413
 8000874:	fffffbed 	.word	0xfffffbed

08000878 <__aeabi_i2d>:
 8000878:	b570      	push	{r4, r5, r6, lr}
 800087a:	2800      	cmp	r0, #0
 800087c:	d016      	beq.n	80008ac <__aeabi_i2d+0x34>
 800087e:	17c3      	asrs	r3, r0, #31
 8000880:	18c5      	adds	r5, r0, r3
 8000882:	405d      	eors	r5, r3
 8000884:	0fc4      	lsrs	r4, r0, #31
 8000886:	0028      	movs	r0, r5
 8000888:	f000 f826 	bl	80008d8 <__clzsi2>
 800088c:	4a11      	ldr	r2, [pc, #68]	; (80008d4 <__aeabi_i2d+0x5c>)
 800088e:	1a12      	subs	r2, r2, r0
 8000890:	280a      	cmp	r0, #10
 8000892:	dc16      	bgt.n	80008c2 <__aeabi_i2d+0x4a>
 8000894:	0003      	movs	r3, r0
 8000896:	002e      	movs	r6, r5
 8000898:	3315      	adds	r3, #21
 800089a:	409e      	lsls	r6, r3
 800089c:	230b      	movs	r3, #11
 800089e:	1a18      	subs	r0, r3, r0
 80008a0:	40c5      	lsrs	r5, r0
 80008a2:	0552      	lsls	r2, r2, #21
 80008a4:	032d      	lsls	r5, r5, #12
 80008a6:	0b2d      	lsrs	r5, r5, #12
 80008a8:	0d53      	lsrs	r3, r2, #21
 80008aa:	e003      	b.n	80008b4 <__aeabi_i2d+0x3c>
 80008ac:	2400      	movs	r4, #0
 80008ae:	2300      	movs	r3, #0
 80008b0:	2500      	movs	r5, #0
 80008b2:	2600      	movs	r6, #0
 80008b4:	051b      	lsls	r3, r3, #20
 80008b6:	432b      	orrs	r3, r5
 80008b8:	07e4      	lsls	r4, r4, #31
 80008ba:	4323      	orrs	r3, r4
 80008bc:	0030      	movs	r0, r6
 80008be:	0019      	movs	r1, r3
 80008c0:	bd70      	pop	{r4, r5, r6, pc}
 80008c2:	380b      	subs	r0, #11
 80008c4:	4085      	lsls	r5, r0
 80008c6:	0552      	lsls	r2, r2, #21
 80008c8:	032d      	lsls	r5, r5, #12
 80008ca:	2600      	movs	r6, #0
 80008cc:	0b2d      	lsrs	r5, r5, #12
 80008ce:	0d53      	lsrs	r3, r2, #21
 80008d0:	e7f0      	b.n	80008b4 <__aeabi_i2d+0x3c>
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	0000041e 	.word	0x0000041e

080008d8 <__clzsi2>:
 80008d8:	211c      	movs	r1, #28
 80008da:	2301      	movs	r3, #1
 80008dc:	041b      	lsls	r3, r3, #16
 80008de:	4298      	cmp	r0, r3
 80008e0:	d301      	bcc.n	80008e6 <__clzsi2+0xe>
 80008e2:	0c00      	lsrs	r0, r0, #16
 80008e4:	3910      	subs	r1, #16
 80008e6:	0a1b      	lsrs	r3, r3, #8
 80008e8:	4298      	cmp	r0, r3
 80008ea:	d301      	bcc.n	80008f0 <__clzsi2+0x18>
 80008ec:	0a00      	lsrs	r0, r0, #8
 80008ee:	3908      	subs	r1, #8
 80008f0:	091b      	lsrs	r3, r3, #4
 80008f2:	4298      	cmp	r0, r3
 80008f4:	d301      	bcc.n	80008fa <__clzsi2+0x22>
 80008f6:	0900      	lsrs	r0, r0, #4
 80008f8:	3904      	subs	r1, #4
 80008fa:	a202      	add	r2, pc, #8	; (adr r2, 8000904 <__clzsi2+0x2c>)
 80008fc:	5c10      	ldrb	r0, [r2, r0]
 80008fe:	1840      	adds	r0, r0, r1
 8000900:	4770      	bx	lr
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	02020304 	.word	0x02020304
 8000908:	01010101 	.word	0x01010101
	...

08000914 <MPU6050_Init>:

int Ax, Ay, Az, Gx, Gy, Gz;


void MPU6050_Init (void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 800091a:	482a      	ldr	r0, [pc, #168]	; (80009c4 <MPU6050_Init+0xb0>)
 800091c:	23fa      	movs	r3, #250	; 0xfa
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	9302      	str	r3, [sp, #8]
 8000922:	2301      	movs	r3, #1
 8000924:	9301      	str	r3, [sp, #4]
 8000926:	1dfb      	adds	r3, r7, #7
 8000928:	9300      	str	r3, [sp, #0]
 800092a:	2301      	movs	r3, #1
 800092c:	2275      	movs	r2, #117	; 0x75
 800092e:	21d0      	movs	r1, #208	; 0xd0
 8000930:	f001 f840 	bl	80019b4 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8000934:	1dfb      	adds	r3, r7, #7
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b68      	cmp	r3, #104	; 0x68
 800093a:	d13f      	bne.n	80009bc <MPU6050_Init+0xa8>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 800093c:	1dbb      	adds	r3, r7, #6
 800093e:	2200      	movs	r2, #0
 8000940:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8000942:	4820      	ldr	r0, [pc, #128]	; (80009c4 <MPU6050_Init+0xb0>)
 8000944:	23fa      	movs	r3, #250	; 0xfa
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	9302      	str	r3, [sp, #8]
 800094a:	2301      	movs	r3, #1
 800094c:	9301      	str	r3, [sp, #4]
 800094e:	1dbb      	adds	r3, r7, #6
 8000950:	9300      	str	r3, [sp, #0]
 8000952:	2301      	movs	r3, #1
 8000954:	226b      	movs	r2, #107	; 0x6b
 8000956:	21d0      	movs	r1, #208	; 0xd0
 8000958:	f000 fefe 	bl	8001758 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 800095c:	1dbb      	adds	r3, r7, #6
 800095e:	2207      	movs	r2, #7
 8000960:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000962:	4818      	ldr	r0, [pc, #96]	; (80009c4 <MPU6050_Init+0xb0>)
 8000964:	23fa      	movs	r3, #250	; 0xfa
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	9302      	str	r3, [sp, #8]
 800096a:	2301      	movs	r3, #1
 800096c:	9301      	str	r3, [sp, #4]
 800096e:	1dbb      	adds	r3, r7, #6
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	2301      	movs	r3, #1
 8000974:	2219      	movs	r2, #25
 8000976:	21d0      	movs	r1, #208	; 0xd0
 8000978:	f000 feee 	bl	8001758 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 800097c:	1dbb      	adds	r3, r7, #6
 800097e:	2200      	movs	r2, #0
 8000980:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8000982:	4810      	ldr	r0, [pc, #64]	; (80009c4 <MPU6050_Init+0xb0>)
 8000984:	23fa      	movs	r3, #250	; 0xfa
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	9302      	str	r3, [sp, #8]
 800098a:	2301      	movs	r3, #1
 800098c:	9301      	str	r3, [sp, #4]
 800098e:	1dbb      	adds	r3, r7, #6
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	2301      	movs	r3, #1
 8000994:	221c      	movs	r2, #28
 8000996:	21d0      	movs	r1, #208	; 0xd0
 8000998:	f000 fede 	bl	8001758 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 800099c:	1dbb      	adds	r3, r7, #6
 800099e:	2200      	movs	r2, #0
 80009a0:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80009a2:	4808      	ldr	r0, [pc, #32]	; (80009c4 <MPU6050_Init+0xb0>)
 80009a4:	23fa      	movs	r3, #250	; 0xfa
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	9302      	str	r3, [sp, #8]
 80009aa:	2301      	movs	r3, #1
 80009ac:	9301      	str	r3, [sp, #4]
 80009ae:	1dbb      	adds	r3, r7, #6
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	2301      	movs	r3, #1
 80009b4:	221b      	movs	r2, #27
 80009b6:	21d0      	movs	r1, #208	; 0xd0
 80009b8:	f000 fece 	bl	8001758 <HAL_I2C_Mem_Write>
	}

}
 80009bc:	46c0      	nop			; (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	b002      	add	sp, #8
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000028 	.word	0x20000028

080009c8 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel (void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80009ce:	4835      	ldr	r0, [pc, #212]	; (8000aa4 <MPU6050_Read_Accel+0xdc>)
 80009d0:	23fa      	movs	r3, #250	; 0xfa
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	9302      	str	r3, [sp, #8]
 80009d6:	2306      	movs	r3, #6
 80009d8:	9301      	str	r3, [sp, #4]
 80009da:	003b      	movs	r3, r7
 80009dc:	9300      	str	r3, [sp, #0]
 80009de:	2301      	movs	r3, #1
 80009e0:	223b      	movs	r2, #59	; 0x3b
 80009e2:	21d0      	movs	r1, #208	; 0xd0
 80009e4:	f000 ffe6 	bl	80019b4 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80009e8:	003b      	movs	r3, r7
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	021b      	lsls	r3, r3, #8
 80009ee:	b21a      	sxth	r2, r3
 80009f0:	003b      	movs	r3, r7
 80009f2:	785b      	ldrb	r3, [r3, #1]
 80009f4:	b21b      	sxth	r3, r3
 80009f6:	4313      	orrs	r3, r2
 80009f8:	b21a      	sxth	r2, r3
 80009fa:	4b2b      	ldr	r3, [pc, #172]	; (8000aa8 <MPU6050_Read_Accel+0xe0>)
 80009fc:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80009fe:	003b      	movs	r3, r7
 8000a00:	789b      	ldrb	r3, [r3, #2]
 8000a02:	021b      	lsls	r3, r3, #8
 8000a04:	b21a      	sxth	r2, r3
 8000a06:	003b      	movs	r3, r7
 8000a08:	78db      	ldrb	r3, [r3, #3]
 8000a0a:	b21b      	sxth	r3, r3
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	b21a      	sxth	r2, r3
 8000a10:	4b26      	ldr	r3, [pc, #152]	; (8000aac <MPU6050_Read_Accel+0xe4>)
 8000a12:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000a14:	003b      	movs	r3, r7
 8000a16:	791b      	ldrb	r3, [r3, #4]
 8000a18:	021b      	lsls	r3, r3, #8
 8000a1a:	b21a      	sxth	r2, r3
 8000a1c:	003b      	movs	r3, r7
 8000a1e:	795b      	ldrb	r3, [r3, #5]
 8000a20:	b21b      	sxth	r3, r3
 8000a22:	4313      	orrs	r3, r2
 8000a24:	b21a      	sxth	r2, r3
 8000a26:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <MPU6050_Read_Accel+0xe8>)
 8000a28:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;
 8000a2a:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <MPU6050_Read_Accel+0xe0>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	5e9b      	ldrsh	r3, [r3, r2]
 8000a30:	0018      	movs	r0, r3
 8000a32:	f7ff ff21 	bl	8000878 <__aeabi_i2d>
 8000a36:	2200      	movs	r2, #0
 8000a38:	4b1e      	ldr	r3, [pc, #120]	; (8000ab4 <MPU6050_Read_Accel+0xec>)
 8000a3a:	f7ff fbf1 	bl	8000220 <__aeabi_ddiv>
 8000a3e:	0002      	movs	r2, r0
 8000a40:	000b      	movs	r3, r1
 8000a42:	0010      	movs	r0, r2
 8000a44:	0019      	movs	r1, r3
 8000a46:	f7ff fee1 	bl	800080c <__aeabi_d2iz>
 8000a4a:	0002      	movs	r2, r0
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <MPU6050_Read_Accel+0xf0>)
 8000a4e:	601a      	str	r2, [r3, #0]
	Ay = Accel_Y_RAW/16384.0;
 8000a50:	4b16      	ldr	r3, [pc, #88]	; (8000aac <MPU6050_Read_Accel+0xe4>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	5e9b      	ldrsh	r3, [r3, r2]
 8000a56:	0018      	movs	r0, r3
 8000a58:	f7ff ff0e 	bl	8000878 <__aeabi_i2d>
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <MPU6050_Read_Accel+0xec>)
 8000a60:	f7ff fbde 	bl	8000220 <__aeabi_ddiv>
 8000a64:	0002      	movs	r2, r0
 8000a66:	000b      	movs	r3, r1
 8000a68:	0010      	movs	r0, r2
 8000a6a:	0019      	movs	r1, r3
 8000a6c:	f7ff fece 	bl	800080c <__aeabi_d2iz>
 8000a70:	0002      	movs	r2, r0
 8000a72:	4b12      	ldr	r3, [pc, #72]	; (8000abc <MPU6050_Read_Accel+0xf4>)
 8000a74:	601a      	str	r2, [r3, #0]
	Az = Accel_Z_RAW/16384.0;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MPU6050_Read_Accel+0xe8>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	5e9b      	ldrsh	r3, [r3, r2]
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f7ff fefb 	bl	8000878 <__aeabi_i2d>
 8000a82:	2200      	movs	r2, #0
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <MPU6050_Read_Accel+0xec>)
 8000a86:	f7ff fbcb 	bl	8000220 <__aeabi_ddiv>
 8000a8a:	0002      	movs	r2, r0
 8000a8c:	000b      	movs	r3, r1
 8000a8e:	0010      	movs	r0, r2
 8000a90:	0019      	movs	r1, r3
 8000a92:	f7ff febb 	bl	800080c <__aeabi_d2iz>
 8000a96:	0002      	movs	r2, r0
 8000a98:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <MPU6050_Read_Accel+0xf8>)
 8000a9a:	601a      	str	r2, [r3, #0]
}
 8000a9c:	46c0      	nop			; (mov r8, r8)
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	b002      	add	sp, #8
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000028 	.word	0x20000028
 8000aa8:	200000c0 	.word	0x200000c0
 8000aac:	200000c2 	.word	0x200000c2
 8000ab0:	200000c4 	.word	0x200000c4
 8000ab4:	40d00000 	.word	0x40d00000
 8000ab8:	200000cc 	.word	0x200000cc
 8000abc:	200000d0 	.word	0x200000d0
 8000ac0:	200000d4 	.word	0x200000d4

08000ac4 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro (void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000aca:	4835      	ldr	r0, [pc, #212]	; (8000ba0 <MPU6050_Read_Gyro+0xdc>)
 8000acc:	23fa      	movs	r3, #250	; 0xfa
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	9302      	str	r3, [sp, #8]
 8000ad2:	2306      	movs	r3, #6
 8000ad4:	9301      	str	r3, [sp, #4]
 8000ad6:	003b      	movs	r3, r7
 8000ad8:	9300      	str	r3, [sp, #0]
 8000ada:	2301      	movs	r3, #1
 8000adc:	2243      	movs	r2, #67	; 0x43
 8000ade:	21d0      	movs	r1, #208	; 0xd0
 8000ae0:	f000 ff68 	bl	80019b4 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000ae4:	003b      	movs	r3, r7
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	021b      	lsls	r3, r3, #8
 8000aea:	b21a      	sxth	r2, r3
 8000aec:	003b      	movs	r3, r7
 8000aee:	785b      	ldrb	r3, [r3, #1]
 8000af0:	b21b      	sxth	r3, r3
 8000af2:	4313      	orrs	r3, r2
 8000af4:	b21a      	sxth	r2, r3
 8000af6:	4b2b      	ldr	r3, [pc, #172]	; (8000ba4 <MPU6050_Read_Gyro+0xe0>)
 8000af8:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000afa:	003b      	movs	r3, r7
 8000afc:	789b      	ldrb	r3, [r3, #2]
 8000afe:	021b      	lsls	r3, r3, #8
 8000b00:	b21a      	sxth	r2, r3
 8000b02:	003b      	movs	r3, r7
 8000b04:	78db      	ldrb	r3, [r3, #3]
 8000b06:	b21b      	sxth	r3, r3
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	b21a      	sxth	r2, r3
 8000b0c:	4b26      	ldr	r3, [pc, #152]	; (8000ba8 <MPU6050_Read_Gyro+0xe4>)
 8000b0e:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000b10:	003b      	movs	r3, r7
 8000b12:	791b      	ldrb	r3, [r3, #4]
 8000b14:	021b      	lsls	r3, r3, #8
 8000b16:	b21a      	sxth	r2, r3
 8000b18:	003b      	movs	r3, r7
 8000b1a:	795b      	ldrb	r3, [r3, #5]
 8000b1c:	b21b      	sxth	r3, r3
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	b21a      	sxth	r2, r3
 8000b22:	4b22      	ldr	r3, [pc, #136]	; (8000bac <MPU6050_Read_Gyro+0xe8>)
 8000b24:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (�/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/131.0;
 8000b26:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <MPU6050_Read_Gyro+0xe0>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	5e9b      	ldrsh	r3, [r3, r2]
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f7ff fea3 	bl	8000878 <__aeabi_i2d>
 8000b32:	2200      	movs	r2, #0
 8000b34:	4b1e      	ldr	r3, [pc, #120]	; (8000bb0 <MPU6050_Read_Gyro+0xec>)
 8000b36:	f7ff fb73 	bl	8000220 <__aeabi_ddiv>
 8000b3a:	0002      	movs	r2, r0
 8000b3c:	000b      	movs	r3, r1
 8000b3e:	0010      	movs	r0, r2
 8000b40:	0019      	movs	r1, r3
 8000b42:	f7ff fe63 	bl	800080c <__aeabi_d2iz>
 8000b46:	0002      	movs	r2, r0
 8000b48:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <MPU6050_Read_Gyro+0xf0>)
 8000b4a:	601a      	str	r2, [r3, #0]
	Gy = Gyro_Y_RAW/131.0;
 8000b4c:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <MPU6050_Read_Gyro+0xe4>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	5e9b      	ldrsh	r3, [r3, r2]
 8000b52:	0018      	movs	r0, r3
 8000b54:	f7ff fe90 	bl	8000878 <__aeabi_i2d>
 8000b58:	2200      	movs	r2, #0
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <MPU6050_Read_Gyro+0xec>)
 8000b5c:	f7ff fb60 	bl	8000220 <__aeabi_ddiv>
 8000b60:	0002      	movs	r2, r0
 8000b62:	000b      	movs	r3, r1
 8000b64:	0010      	movs	r0, r2
 8000b66:	0019      	movs	r1, r3
 8000b68:	f7ff fe50 	bl	800080c <__aeabi_d2iz>
 8000b6c:	0002      	movs	r2, r0
 8000b6e:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <MPU6050_Read_Gyro+0xf4>)
 8000b70:	601a      	str	r2, [r3, #0]
	Gz = Gyro_Z_RAW/131.0;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <MPU6050_Read_Gyro+0xe8>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	5e9b      	ldrsh	r3, [r3, r2]
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f7ff fe7d 	bl	8000878 <__aeabi_i2d>
 8000b7e:	2200      	movs	r2, #0
 8000b80:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <MPU6050_Read_Gyro+0xec>)
 8000b82:	f7ff fb4d 	bl	8000220 <__aeabi_ddiv>
 8000b86:	0002      	movs	r2, r0
 8000b88:	000b      	movs	r3, r1
 8000b8a:	0010      	movs	r0, r2
 8000b8c:	0019      	movs	r1, r3
 8000b8e:	f7ff fe3d 	bl	800080c <__aeabi_d2iz>
 8000b92:	0002      	movs	r2, r0
 8000b94:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <MPU6050_Read_Gyro+0xf8>)
 8000b96:	601a      	str	r2, [r3, #0]
}
 8000b98:	46c0      	nop			; (mov r8, r8)
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	b002      	add	sp, #8
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000028 	.word	0x20000028
 8000ba4:	200000c6 	.word	0x200000c6
 8000ba8:	200000c8 	.word	0x200000c8
 8000bac:	200000ca 	.word	0x200000ca
 8000bb0:	40606000 	.word	0x40606000
 8000bb4:	200000d8 	.word	0x200000d8
 8000bb8:	200000dc 	.word	0x200000dc
 8000bbc:	200000e0 	.word	0x200000e0

08000bc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bc4:	f000 fa68 	bl	8001098 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc8:	f000 f815 	bl	8000bf6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bcc:	f000 f8f4 	bl	8000db8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000bd0:	f000 f872 	bl	8000cb8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000bd4:	f000 f8b0 	bl	8000d38 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  MPU6050_Init();
 8000bd8:	f7ff fe9c 	bl	8000914 <MPU6050_Init>


  HAL_Delay (1000);  // wait for 1 sec
 8000bdc:	23fa      	movs	r3, #250	; 0xfa
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	0018      	movs	r0, r3
 8000be2:	f000 fabd 	bl	8001160 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MPU6050_Read_Accel();
 8000be6:	f7ff feef 	bl	80009c8 <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro();
 8000bea:	f7ff ff6b 	bl	8000ac4 <MPU6050_Read_Gyro>



	  	  HAL_Delay (250);  // wait for a while
 8000bee:	20fa      	movs	r0, #250	; 0xfa
 8000bf0:	f000 fab6 	bl	8001160 <HAL_Delay>
	  MPU6050_Read_Accel();
 8000bf4:	e7f7      	b.n	8000be6 <main+0x26>

08000bf6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf6:	b590      	push	{r4, r7, lr}
 8000bf8:	b097      	sub	sp, #92	; 0x5c
 8000bfa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfc:	2428      	movs	r4, #40	; 0x28
 8000bfe:	193b      	adds	r3, r7, r4
 8000c00:	0018      	movs	r0, r3
 8000c02:	2330      	movs	r3, #48	; 0x30
 8000c04:	001a      	movs	r2, r3
 8000c06:	2100      	movs	r1, #0
 8000c08:	f002 f840 	bl	8002c8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c0c:	2318      	movs	r3, #24
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	0018      	movs	r0, r3
 8000c12:	2310      	movs	r3, #16
 8000c14:	001a      	movs	r2, r3
 8000c16:	2100      	movs	r1, #0
 8000c18:	f002 f838 	bl	8002c8c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	0018      	movs	r0, r3
 8000c20:	2314      	movs	r3, #20
 8000c22:	001a      	movs	r2, r3
 8000c24:	2100      	movs	r1, #0
 8000c26:	f002 f831 	bl	8002c8c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c2a:	0021      	movs	r1, r4
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	2202      	movs	r2, #2
 8000c30:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c32:	187b      	adds	r3, r7, r1
 8000c34:	2201      	movs	r2, #1
 8000c36:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c38:	187b      	adds	r3, r7, r1
 8000c3a:	2210      	movs	r2, #16
 8000c3c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	2202      	movs	r2, #2
 8000c42:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	2200      	movs	r2, #0
 8000c48:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000c4a:	187b      	adds	r3, r7, r1
 8000c4c:	22a0      	movs	r2, #160	; 0xa0
 8000c4e:	0392      	lsls	r2, r2, #14
 8000c50:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000c52:	187b      	adds	r3, r7, r1
 8000c54:	2200      	movs	r2, #0
 8000c56:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f001 fac8 	bl	80021f0 <HAL_RCC_OscConfig>
 8000c60:	1e03      	subs	r3, r0, #0
 8000c62:	d001      	beq.n	8000c68 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000c64:	f000 f920 	bl	8000ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c68:	2118      	movs	r1, #24
 8000c6a:	187b      	adds	r3, r7, r1
 8000c6c:	2207      	movs	r2, #7
 8000c6e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c70:	187b      	adds	r3, r7, r1
 8000c72:	2202      	movs	r2, #2
 8000c74:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c76:	187b      	adds	r3, r7, r1
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c7c:	187b      	adds	r3, r7, r1
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c82:	187b      	adds	r3, r7, r1
 8000c84:	2101      	movs	r1, #1
 8000c86:	0018      	movs	r0, r3
 8000c88:	f001 fdcc 	bl	8002824 <HAL_RCC_ClockConfig>
 8000c8c:	1e03      	subs	r3, r0, #0
 8000c8e:	d001      	beq.n	8000c94 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c90:	f000 f90a 	bl	8000ea8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	2220      	movs	r2, #32
 8000c98:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f001 fef0 	bl	8002a88 <HAL_RCCEx_PeriphCLKConfig>
 8000ca8:	1e03      	subs	r3, r0, #0
 8000caa:	d001      	beq.n	8000cb0 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000cac:	f000 f8fc 	bl	8000ea8 <Error_Handler>
  }
}
 8000cb0:	46c0      	nop			; (mov r8, r8)
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	b017      	add	sp, #92	; 0x5c
 8000cb6:	bd90      	pop	{r4, r7, pc}

08000cb8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cbe:	4a1c      	ldr	r2, [pc, #112]	; (8000d30 <MX_I2C1_Init+0x78>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cc4:	4a1b      	ldr	r2, [pc, #108]	; (8000d34 <MX_I2C1_Init+0x7c>)
 8000cc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cc8:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cce:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cd4:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f000 fc99 	bl	800162c <HAL_I2C_Init>
 8000cfa:	1e03      	subs	r3, r0, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cfe:	f000 f8d3 	bl	8000ea8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d02:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000d04:	2100      	movs	r1, #0
 8000d06:	0018      	movs	r0, r3
 8000d08:	f001 f9da 	bl	80020c0 <HAL_I2CEx_ConfigAnalogFilter>
 8000d0c:	1e03      	subs	r3, r0, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d10:	f000 f8ca 	bl	8000ea8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d14:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000d16:	2100      	movs	r1, #0
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f001 fa1d 	bl	8002158 <HAL_I2CEx_ConfigDigitalFilter>
 8000d1e:	1e03      	subs	r3, r0, #0
 8000d20:	d001      	beq.n	8000d26 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d22:	f000 f8c1 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000028 	.word	0x20000028
 8000d30:	40005400 	.word	0x40005400
 8000d34:	2000090e 	.word	0x2000090e

08000d38 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d3c:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <MX_I2C2_Init+0x74>)
 8000d3e:	4a1c      	ldr	r2, [pc, #112]	; (8000db0 <MX_I2C2_Init+0x78>)
 8000d40:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000d42:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <MX_I2C2_Init+0x74>)
 8000d44:	4a1b      	ldr	r2, [pc, #108]	; (8000db4 <MX_I2C2_Init+0x7c>)
 8000d46:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d48:	4b18      	ldr	r3, [pc, #96]	; (8000dac <MX_I2C2_Init+0x74>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d4e:	4b17      	ldr	r3, [pc, #92]	; (8000dac <MX_I2C2_Init+0x74>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d54:	4b15      	ldr	r3, [pc, #84]	; (8000dac <MX_I2C2_Init+0x74>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d5a:	4b14      	ldr	r3, [pc, #80]	; (8000dac <MX_I2C2_Init+0x74>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <MX_I2C2_Init+0x74>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <MX_I2C2_Init+0x74>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <MX_I2C2_Init+0x74>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <MX_I2C2_Init+0x74>)
 8000d74:	0018      	movs	r0, r3
 8000d76:	f000 fc59 	bl	800162c <HAL_I2C_Init>
 8000d7a:	1e03      	subs	r3, r0, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d7e:	f000 f893 	bl	8000ea8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d82:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <MX_I2C2_Init+0x74>)
 8000d84:	2100      	movs	r1, #0
 8000d86:	0018      	movs	r0, r3
 8000d88:	f001 f99a 	bl	80020c0 <HAL_I2CEx_ConfigAnalogFilter>
 8000d8c:	1e03      	subs	r3, r0, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d90:	f000 f88a 	bl	8000ea8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <MX_I2C2_Init+0x74>)
 8000d96:	2100      	movs	r1, #0
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f001 f9dd 	bl	8002158 <HAL_I2CEx_ConfigDigitalFilter>
 8000d9e:	1e03      	subs	r3, r0, #0
 8000da0:	d001      	beq.n	8000da6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000da2:	f000 f881 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000074 	.word	0x20000074
 8000db0:	40005800 	.word	0x40005800
 8000db4:	20303e5d 	.word	0x20303e5d

08000db8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db8:	b590      	push	{r4, r7, lr}
 8000dba:	b08b      	sub	sp, #44	; 0x2c
 8000dbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbe:	2414      	movs	r4, #20
 8000dc0:	193b      	adds	r3, r7, r4
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	2314      	movs	r3, #20
 8000dc6:	001a      	movs	r2, r3
 8000dc8:	2100      	movs	r1, #0
 8000dca:	f001 ff5f 	bl	8002c8c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dce:	4b34      	ldr	r3, [pc, #208]	; (8000ea0 <MX_GPIO_Init+0xe8>)
 8000dd0:	695a      	ldr	r2, [r3, #20]
 8000dd2:	4b33      	ldr	r3, [pc, #204]	; (8000ea0 <MX_GPIO_Init+0xe8>)
 8000dd4:	2180      	movs	r1, #128	; 0x80
 8000dd6:	03c9      	lsls	r1, r1, #15
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	615a      	str	r2, [r3, #20]
 8000ddc:	4b30      	ldr	r3, [pc, #192]	; (8000ea0 <MX_GPIO_Init+0xe8>)
 8000dde:	695a      	ldr	r2, [r3, #20]
 8000de0:	2380      	movs	r3, #128	; 0x80
 8000de2:	03db      	lsls	r3, r3, #15
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dea:	4b2d      	ldr	r3, [pc, #180]	; (8000ea0 <MX_GPIO_Init+0xe8>)
 8000dec:	695a      	ldr	r2, [r3, #20]
 8000dee:	4b2c      	ldr	r3, [pc, #176]	; (8000ea0 <MX_GPIO_Init+0xe8>)
 8000df0:	2180      	movs	r1, #128	; 0x80
 8000df2:	0289      	lsls	r1, r1, #10
 8000df4:	430a      	orrs	r2, r1
 8000df6:	615a      	str	r2, [r3, #20]
 8000df8:	4b29      	ldr	r3, [pc, #164]	; (8000ea0 <MX_GPIO_Init+0xe8>)
 8000dfa:	695a      	ldr	r2, [r3, #20]
 8000dfc:	2380      	movs	r3, #128	; 0x80
 8000dfe:	029b      	lsls	r3, r3, #10
 8000e00:	4013      	ands	r3, r2
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e06:	4b26      	ldr	r3, [pc, #152]	; (8000ea0 <MX_GPIO_Init+0xe8>)
 8000e08:	695a      	ldr	r2, [r3, #20]
 8000e0a:	4b25      	ldr	r3, [pc, #148]	; (8000ea0 <MX_GPIO_Init+0xe8>)
 8000e0c:	2180      	movs	r1, #128	; 0x80
 8000e0e:	02c9      	lsls	r1, r1, #11
 8000e10:	430a      	orrs	r2, r1
 8000e12:	615a      	str	r2, [r3, #20]
 8000e14:	4b22      	ldr	r3, [pc, #136]	; (8000ea0 <MX_GPIO_Init+0xe8>)
 8000e16:	695a      	ldr	r2, [r3, #20]
 8000e18:	2380      	movs	r3, #128	; 0x80
 8000e1a:	02db      	lsls	r3, r3, #11
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e22:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <MX_GPIO_Init+0xe8>)
 8000e24:	695a      	ldr	r2, [r3, #20]
 8000e26:	4b1e      	ldr	r3, [pc, #120]	; (8000ea0 <MX_GPIO_Init+0xe8>)
 8000e28:	2180      	movs	r1, #128	; 0x80
 8000e2a:	0309      	lsls	r1, r1, #12
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	615a      	str	r2, [r3, #20]
 8000e30:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <MX_GPIO_Init+0xe8>)
 8000e32:	695a      	ldr	r2, [r3, #20]
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	031b      	lsls	r3, r3, #12
 8000e38:	4013      	ands	r3, r2
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000e3e:	23c0      	movs	r3, #192	; 0xc0
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	4818      	ldr	r0, [pc, #96]	; (8000ea4 <MX_GPIO_Init+0xec>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	0019      	movs	r1, r3
 8000e48:	f000 fbd2 	bl	80015f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e4c:	193b      	adds	r3, r7, r4
 8000e4e:	2201      	movs	r2, #1
 8000e50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e52:	193b      	adds	r3, r7, r4
 8000e54:	2290      	movs	r2, #144	; 0x90
 8000e56:	0352      	lsls	r2, r2, #13
 8000e58:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	193b      	adds	r3, r7, r4
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e60:	193a      	adds	r2, r7, r4
 8000e62:	2390      	movs	r3, #144	; 0x90
 8000e64:	05db      	lsls	r3, r3, #23
 8000e66:	0011      	movs	r1, r2
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f000 fa51 	bl	8001310 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000e6e:	0021      	movs	r1, r4
 8000e70:	187b      	adds	r3, r7, r1
 8000e72:	22c0      	movs	r2, #192	; 0xc0
 8000e74:	0092      	lsls	r2, r2, #2
 8000e76:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	187b      	adds	r3, r7, r1
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	187b      	adds	r3, r7, r1
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	2200      	movs	r2, #0
 8000e88:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e8a:	187b      	adds	r3, r7, r1
 8000e8c:	4a05      	ldr	r2, [pc, #20]	; (8000ea4 <MX_GPIO_Init+0xec>)
 8000e8e:	0019      	movs	r1, r3
 8000e90:	0010      	movs	r0, r2
 8000e92:	f000 fa3d 	bl	8001310 <HAL_GPIO_Init>

}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	b00b      	add	sp, #44	; 0x2c
 8000e9c:	bd90      	pop	{r4, r7, pc}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	48000800 	.word	0x48000800

08000ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eac:	b672      	cpsid	i
}
 8000eae:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <Error_Handler+0x8>
	...

08000eb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eba:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <HAL_MspInit+0x44>)
 8000ebc:	699a      	ldr	r2, [r3, #24]
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <HAL_MspInit+0x44>)
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	619a      	str	r2, [r3, #24]
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <HAL_MspInit+0x44>)
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	2201      	movs	r2, #1
 8000ecc:	4013      	ands	r3, r2
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <HAL_MspInit+0x44>)
 8000ed4:	69da      	ldr	r2, [r3, #28]
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <HAL_MspInit+0x44>)
 8000ed8:	2180      	movs	r1, #128	; 0x80
 8000eda:	0549      	lsls	r1, r1, #21
 8000edc:	430a      	orrs	r2, r1
 8000ede:	61da      	str	r2, [r3, #28]
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <HAL_MspInit+0x44>)
 8000ee2:	69da      	ldr	r2, [r3, #28]
 8000ee4:	2380      	movs	r3, #128	; 0x80
 8000ee6:	055b      	lsls	r3, r3, #21
 8000ee8:	4013      	ands	r3, r2
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	b002      	add	sp, #8
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	46c0      	nop			; (mov r8, r8)
 8000ef8:	40021000 	.word	0x40021000

08000efc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000efc:	b590      	push	{r4, r7, lr}
 8000efe:	b08d      	sub	sp, #52	; 0x34
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	241c      	movs	r4, #28
 8000f06:	193b      	adds	r3, r7, r4
 8000f08:	0018      	movs	r0, r3
 8000f0a:	2314      	movs	r3, #20
 8000f0c:	001a      	movs	r2, r3
 8000f0e:	2100      	movs	r1, #0
 8000f10:	f001 febc 	bl	8002c8c <memset>
  if(hi2c->Instance==I2C1)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a38      	ldr	r2, [pc, #224]	; (8000ffc <HAL_I2C_MspInit+0x100>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d132      	bne.n	8000f84 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1e:	4b38      	ldr	r3, [pc, #224]	; (8001000 <HAL_I2C_MspInit+0x104>)
 8000f20:	695a      	ldr	r2, [r3, #20]
 8000f22:	4b37      	ldr	r3, [pc, #220]	; (8001000 <HAL_I2C_MspInit+0x104>)
 8000f24:	2180      	movs	r1, #128	; 0x80
 8000f26:	02c9      	lsls	r1, r1, #11
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	615a      	str	r2, [r3, #20]
 8000f2c:	4b34      	ldr	r3, [pc, #208]	; (8001000 <HAL_I2C_MspInit+0x104>)
 8000f2e:	695a      	ldr	r2, [r3, #20]
 8000f30:	2380      	movs	r3, #128	; 0x80
 8000f32:	02db      	lsls	r3, r3, #11
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
 8000f38:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f3a:	0021      	movs	r1, r4
 8000f3c:	187b      	adds	r3, r7, r1
 8000f3e:	22c0      	movs	r2, #192	; 0xc0
 8000f40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f42:	187b      	adds	r3, r7, r1
 8000f44:	2212      	movs	r2, #18
 8000f46:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	187b      	adds	r3, r7, r1
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f4e:	187b      	adds	r3, r7, r1
 8000f50:	2203      	movs	r2, #3
 8000f52:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000f54:	187b      	adds	r3, r7, r1
 8000f56:	2201      	movs	r2, #1
 8000f58:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5a:	187b      	adds	r3, r7, r1
 8000f5c:	4a29      	ldr	r2, [pc, #164]	; (8001004 <HAL_I2C_MspInit+0x108>)
 8000f5e:	0019      	movs	r1, r3
 8000f60:	0010      	movs	r0, r2
 8000f62:	f000 f9d5 	bl	8001310 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f66:	4b26      	ldr	r3, [pc, #152]	; (8001000 <HAL_I2C_MspInit+0x104>)
 8000f68:	69da      	ldr	r2, [r3, #28]
 8000f6a:	4b25      	ldr	r3, [pc, #148]	; (8001000 <HAL_I2C_MspInit+0x104>)
 8000f6c:	2180      	movs	r1, #128	; 0x80
 8000f6e:	0389      	lsls	r1, r1, #14
 8000f70:	430a      	orrs	r2, r1
 8000f72:	61da      	str	r2, [r3, #28]
 8000f74:	4b22      	ldr	r3, [pc, #136]	; (8001000 <HAL_I2C_MspInit+0x104>)
 8000f76:	69da      	ldr	r2, [r3, #28]
 8000f78:	2380      	movs	r3, #128	; 0x80
 8000f7a:	039b      	lsls	r3, r3, #14
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f82:	e037      	b.n	8000ff4 <HAL_I2C_MspInit+0xf8>
  else if(hi2c->Instance==I2C2)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a1f      	ldr	r2, [pc, #124]	; (8001008 <HAL_I2C_MspInit+0x10c>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d132      	bne.n	8000ff4 <HAL_I2C_MspInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8e:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <HAL_I2C_MspInit+0x104>)
 8000f90:	695a      	ldr	r2, [r3, #20]
 8000f92:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <HAL_I2C_MspInit+0x104>)
 8000f94:	2180      	movs	r1, #128	; 0x80
 8000f96:	02c9      	lsls	r1, r1, #11
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	615a      	str	r2, [r3, #20]
 8000f9c:	4b18      	ldr	r3, [pc, #96]	; (8001000 <HAL_I2C_MspInit+0x104>)
 8000f9e:	695a      	ldr	r2, [r3, #20]
 8000fa0:	2380      	movs	r3, #128	; 0x80
 8000fa2:	02db      	lsls	r3, r3, #11
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000faa:	211c      	movs	r1, #28
 8000fac:	187b      	adds	r3, r7, r1
 8000fae:	22c0      	movs	r2, #192	; 0xc0
 8000fb0:	0112      	lsls	r2, r2, #4
 8000fb2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb4:	187b      	adds	r3, r7, r1
 8000fb6:	2212      	movs	r2, #18
 8000fb8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	187b      	adds	r3, r7, r1
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fc0:	187b      	adds	r3, r7, r1
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8000fc6:	187b      	adds	r3, r7, r1
 8000fc8:	2201      	movs	r2, #1
 8000fca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fcc:	187b      	adds	r3, r7, r1
 8000fce:	4a0d      	ldr	r2, [pc, #52]	; (8001004 <HAL_I2C_MspInit+0x108>)
 8000fd0:	0019      	movs	r1, r3
 8000fd2:	0010      	movs	r0, r2
 8000fd4:	f000 f99c 	bl	8001310 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000fd8:	4b09      	ldr	r3, [pc, #36]	; (8001000 <HAL_I2C_MspInit+0x104>)
 8000fda:	69da      	ldr	r2, [r3, #28]
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <HAL_I2C_MspInit+0x104>)
 8000fde:	2180      	movs	r1, #128	; 0x80
 8000fe0:	03c9      	lsls	r1, r1, #15
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	61da      	str	r2, [r3, #28]
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_I2C_MspInit+0x104>)
 8000fe8:	69da      	ldr	r2, [r3, #28]
 8000fea:	2380      	movs	r3, #128	; 0x80
 8000fec:	03db      	lsls	r3, r3, #15
 8000fee:	4013      	ands	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
}
 8000ff4:	46c0      	nop			; (mov r8, r8)
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	b00d      	add	sp, #52	; 0x34
 8000ffa:	bd90      	pop	{r4, r7, pc}
 8000ffc:	40005400 	.word	0x40005400
 8001000:	40021000 	.word	0x40021000
 8001004:	48000400 	.word	0x48000400
 8001008:	40005800 	.word	0x40005800

0800100c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <NMI_Handler+0x4>

08001012 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001016:	e7fe      	b.n	8001016 <HardFault_Handler+0x4>

08001018 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800101c:	46c0      	nop			; (mov r8, r8)
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001030:	f000 f87a 	bl	8001128 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001034:	46c0      	nop			; (mov r8, r8)
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001044:	480d      	ldr	r0, [pc, #52]	; (800107c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001046:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001048:	480d      	ldr	r0, [pc, #52]	; (8001080 <LoopForever+0x6>)
  ldr r1, =_edata
 800104a:	490e      	ldr	r1, [pc, #56]	; (8001084 <LoopForever+0xa>)
  ldr r2, =_sidata
 800104c:	4a0e      	ldr	r2, [pc, #56]	; (8001088 <LoopForever+0xe>)
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001050:	e002      	b.n	8001058 <LoopCopyDataInit>

08001052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001056:	3304      	adds	r3, #4

08001058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800105a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800105c:	d3f9      	bcc.n	8001052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105e:	4a0b      	ldr	r2, [pc, #44]	; (800108c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001060:	4c0b      	ldr	r4, [pc, #44]	; (8001090 <LoopForever+0x16>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001064:	e001      	b.n	800106a <LoopFillZerobss>

08001066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001068:	3204      	adds	r2, #4

0800106a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800106a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800106c:	d3fb      	bcc.n	8001066 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800106e:	f7ff ffe4 	bl	800103a <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001072:	f001 fde7 	bl	8002c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001076:	f7ff fda3 	bl	8000bc0 <main>

0800107a <LoopForever>:

LoopForever:
    b LoopForever
 800107a:	e7fe      	b.n	800107a <LoopForever>
  ldr   r0, =_estack
 800107c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001084:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001088:	08002d2c 	.word	0x08002d2c
  ldr r2, =_sbss
 800108c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001090:	200000e8 	.word	0x200000e8

08001094 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001094:	e7fe      	b.n	8001094 <ADC1_COMP_IRQHandler>
	...

08001098 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800109c:	4b07      	ldr	r3, [pc, #28]	; (80010bc <HAL_Init+0x24>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_Init+0x24>)
 80010a2:	2110      	movs	r1, #16
 80010a4:	430a      	orrs	r2, r1
 80010a6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80010a8:	2000      	movs	r0, #0
 80010aa:	f000 f809 	bl	80010c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ae:	f7ff ff01 	bl	8000eb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	0018      	movs	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	40022000 	.word	0x40022000

080010c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c0:	b590      	push	{r4, r7, lr}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c8:	4b14      	ldr	r3, [pc, #80]	; (800111c <HAL_InitTick+0x5c>)
 80010ca:	681c      	ldr	r4, [r3, #0]
 80010cc:	4b14      	ldr	r3, [pc, #80]	; (8001120 <HAL_InitTick+0x60>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	0019      	movs	r1, r3
 80010d2:	23fa      	movs	r3, #250	; 0xfa
 80010d4:	0098      	lsls	r0, r3, #2
 80010d6:	f7ff f817 	bl	8000108 <__udivsi3>
 80010da:	0003      	movs	r3, r0
 80010dc:	0019      	movs	r1, r3
 80010de:	0020      	movs	r0, r4
 80010e0:	f7ff f812 	bl	8000108 <__udivsi3>
 80010e4:	0003      	movs	r3, r0
 80010e6:	0018      	movs	r0, r3
 80010e8:	f000 f905 	bl	80012f6 <HAL_SYSTICK_Config>
 80010ec:	1e03      	subs	r3, r0, #0
 80010ee:	d001      	beq.n	80010f4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e00f      	b.n	8001114 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b03      	cmp	r3, #3
 80010f8:	d80b      	bhi.n	8001112 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	2301      	movs	r3, #1
 80010fe:	425b      	negs	r3, r3
 8001100:	2200      	movs	r2, #0
 8001102:	0018      	movs	r0, r3
 8001104:	f000 f8e2 	bl	80012cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <HAL_InitTick+0x64>)
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800110e:	2300      	movs	r3, #0
 8001110:	e000      	b.n	8001114 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
}
 8001114:	0018      	movs	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	b003      	add	sp, #12
 800111a:	bd90      	pop	{r4, r7, pc}
 800111c:	20000000 	.word	0x20000000
 8001120:	20000008 	.word	0x20000008
 8001124:	20000004 	.word	0x20000004

08001128 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <HAL_IncTick+0x1c>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	001a      	movs	r2, r3
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <HAL_IncTick+0x20>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	18d2      	adds	r2, r2, r3
 8001138:	4b03      	ldr	r3, [pc, #12]	; (8001148 <HAL_IncTick+0x20>)
 800113a:	601a      	str	r2, [r3, #0]
}
 800113c:	46c0      	nop			; (mov r8, r8)
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	20000008 	.word	0x20000008
 8001148:	200000e4 	.word	0x200000e4

0800114c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  return uwTick;
 8001150:	4b02      	ldr	r3, [pc, #8]	; (800115c <HAL_GetTick+0x10>)
 8001152:	681b      	ldr	r3, [r3, #0]
}
 8001154:	0018      	movs	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	200000e4 	.word	0x200000e4

08001160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001168:	f7ff fff0 	bl	800114c <HAL_GetTick>
 800116c:	0003      	movs	r3, r0
 800116e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	3301      	adds	r3, #1
 8001178:	d005      	beq.n	8001186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <HAL_Delay+0x44>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	001a      	movs	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	189b      	adds	r3, r3, r2
 8001184:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	f7ff ffe0 	bl	800114c <HAL_GetTick>
 800118c:	0002      	movs	r2, r0
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	429a      	cmp	r2, r3
 8001196:	d8f7      	bhi.n	8001188 <HAL_Delay+0x28>
  {
  }
}
 8001198:	46c0      	nop			; (mov r8, r8)
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	46bd      	mov	sp, r7
 800119e:	b004      	add	sp, #16
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	20000008 	.word	0x20000008

080011a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a8:	b590      	push	{r4, r7, lr}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	0002      	movs	r2, r0
 80011b0:	6039      	str	r1, [r7, #0]
 80011b2:	1dfb      	adds	r3, r7, #7
 80011b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011b6:	1dfb      	adds	r3, r7, #7
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b7f      	cmp	r3, #127	; 0x7f
 80011bc:	d828      	bhi.n	8001210 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011be:	4a2f      	ldr	r2, [pc, #188]	; (800127c <__NVIC_SetPriority+0xd4>)
 80011c0:	1dfb      	adds	r3, r7, #7
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	b25b      	sxtb	r3, r3
 80011c6:	089b      	lsrs	r3, r3, #2
 80011c8:	33c0      	adds	r3, #192	; 0xc0
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	589b      	ldr	r3, [r3, r2]
 80011ce:	1dfa      	adds	r2, r7, #7
 80011d0:	7812      	ldrb	r2, [r2, #0]
 80011d2:	0011      	movs	r1, r2
 80011d4:	2203      	movs	r2, #3
 80011d6:	400a      	ands	r2, r1
 80011d8:	00d2      	lsls	r2, r2, #3
 80011da:	21ff      	movs	r1, #255	; 0xff
 80011dc:	4091      	lsls	r1, r2
 80011de:	000a      	movs	r2, r1
 80011e0:	43d2      	mvns	r2, r2
 80011e2:	401a      	ands	r2, r3
 80011e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	019b      	lsls	r3, r3, #6
 80011ea:	22ff      	movs	r2, #255	; 0xff
 80011ec:	401a      	ands	r2, r3
 80011ee:	1dfb      	adds	r3, r7, #7
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	0018      	movs	r0, r3
 80011f4:	2303      	movs	r3, #3
 80011f6:	4003      	ands	r3, r0
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011fc:	481f      	ldr	r0, [pc, #124]	; (800127c <__NVIC_SetPriority+0xd4>)
 80011fe:	1dfb      	adds	r3, r7, #7
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	b25b      	sxtb	r3, r3
 8001204:	089b      	lsrs	r3, r3, #2
 8001206:	430a      	orrs	r2, r1
 8001208:	33c0      	adds	r3, #192	; 0xc0
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800120e:	e031      	b.n	8001274 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001210:	4a1b      	ldr	r2, [pc, #108]	; (8001280 <__NVIC_SetPriority+0xd8>)
 8001212:	1dfb      	adds	r3, r7, #7
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	0019      	movs	r1, r3
 8001218:	230f      	movs	r3, #15
 800121a:	400b      	ands	r3, r1
 800121c:	3b08      	subs	r3, #8
 800121e:	089b      	lsrs	r3, r3, #2
 8001220:	3306      	adds	r3, #6
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	18d3      	adds	r3, r2, r3
 8001226:	3304      	adds	r3, #4
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	1dfa      	adds	r2, r7, #7
 800122c:	7812      	ldrb	r2, [r2, #0]
 800122e:	0011      	movs	r1, r2
 8001230:	2203      	movs	r2, #3
 8001232:	400a      	ands	r2, r1
 8001234:	00d2      	lsls	r2, r2, #3
 8001236:	21ff      	movs	r1, #255	; 0xff
 8001238:	4091      	lsls	r1, r2
 800123a:	000a      	movs	r2, r1
 800123c:	43d2      	mvns	r2, r2
 800123e:	401a      	ands	r2, r3
 8001240:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	019b      	lsls	r3, r3, #6
 8001246:	22ff      	movs	r2, #255	; 0xff
 8001248:	401a      	ands	r2, r3
 800124a:	1dfb      	adds	r3, r7, #7
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	0018      	movs	r0, r3
 8001250:	2303      	movs	r3, #3
 8001252:	4003      	ands	r3, r0
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001258:	4809      	ldr	r0, [pc, #36]	; (8001280 <__NVIC_SetPriority+0xd8>)
 800125a:	1dfb      	adds	r3, r7, #7
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	001c      	movs	r4, r3
 8001260:	230f      	movs	r3, #15
 8001262:	4023      	ands	r3, r4
 8001264:	3b08      	subs	r3, #8
 8001266:	089b      	lsrs	r3, r3, #2
 8001268:	430a      	orrs	r2, r1
 800126a:	3306      	adds	r3, #6
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	18c3      	adds	r3, r0, r3
 8001270:	3304      	adds	r3, #4
 8001272:	601a      	str	r2, [r3, #0]
}
 8001274:	46c0      	nop			; (mov r8, r8)
 8001276:	46bd      	mov	sp, r7
 8001278:	b003      	add	sp, #12
 800127a:	bd90      	pop	{r4, r7, pc}
 800127c:	e000e100 	.word	0xe000e100
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	1e5a      	subs	r2, r3, #1
 8001290:	2380      	movs	r3, #128	; 0x80
 8001292:	045b      	lsls	r3, r3, #17
 8001294:	429a      	cmp	r2, r3
 8001296:	d301      	bcc.n	800129c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001298:	2301      	movs	r3, #1
 800129a:	e010      	b.n	80012be <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800129c:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <SysTick_Config+0x44>)
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	3a01      	subs	r2, #1
 80012a2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012a4:	2301      	movs	r3, #1
 80012a6:	425b      	negs	r3, r3
 80012a8:	2103      	movs	r1, #3
 80012aa:	0018      	movs	r0, r3
 80012ac:	f7ff ff7c 	bl	80011a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b0:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <SysTick_Config+0x44>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b6:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <SysTick_Config+0x44>)
 80012b8:	2207      	movs	r2, #7
 80012ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012bc:	2300      	movs	r3, #0
}
 80012be:	0018      	movs	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	b002      	add	sp, #8
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	e000e010 	.word	0xe000e010

080012cc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
 80012d6:	210f      	movs	r1, #15
 80012d8:	187b      	adds	r3, r7, r1
 80012da:	1c02      	adds	r2, r0, #0
 80012dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	187b      	adds	r3, r7, r1
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	b25b      	sxtb	r3, r3
 80012e6:	0011      	movs	r1, r2
 80012e8:	0018      	movs	r0, r3
 80012ea:	f7ff ff5d 	bl	80011a8 <__NVIC_SetPriority>
}
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	46bd      	mov	sp, r7
 80012f2:	b004      	add	sp, #16
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	0018      	movs	r0, r3
 8001302:	f7ff ffbf 	bl	8001284 <SysTick_Config>
 8001306:	0003      	movs	r3, r0
}
 8001308:	0018      	movs	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	b002      	add	sp, #8
 800130e:	bd80      	pop	{r7, pc}

08001310 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800131e:	e14f      	b.n	80015c0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2101      	movs	r1, #1
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	4091      	lsls	r1, r2
 800132a:	000a      	movs	r2, r1
 800132c:	4013      	ands	r3, r2
 800132e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d100      	bne.n	8001338 <HAL_GPIO_Init+0x28>
 8001336:	e140      	b.n	80015ba <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2203      	movs	r2, #3
 800133e:	4013      	ands	r3, r2
 8001340:	2b01      	cmp	r3, #1
 8001342:	d005      	beq.n	8001350 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	2203      	movs	r2, #3
 800134a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800134c:	2b02      	cmp	r3, #2
 800134e:	d130      	bne.n	80013b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	2203      	movs	r2, #3
 800135c:	409a      	lsls	r2, r3
 800135e:	0013      	movs	r3, r2
 8001360:	43da      	mvns	r2, r3
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	68da      	ldr	r2, [r3, #12]
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	409a      	lsls	r2, r3
 8001372:	0013      	movs	r3, r2
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4313      	orrs	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001386:	2201      	movs	r2, #1
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	409a      	lsls	r2, r3
 800138c:	0013      	movs	r3, r2
 800138e:	43da      	mvns	r2, r3
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	4013      	ands	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	091b      	lsrs	r3, r3, #4
 800139c:	2201      	movs	r2, #1
 800139e:	401a      	ands	r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	409a      	lsls	r2, r3
 80013a4:	0013      	movs	r3, r2
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2203      	movs	r2, #3
 80013b8:	4013      	ands	r3, r2
 80013ba:	2b03      	cmp	r3, #3
 80013bc:	d017      	beq.n	80013ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	2203      	movs	r2, #3
 80013ca:	409a      	lsls	r2, r3
 80013cc:	0013      	movs	r3, r2
 80013ce:	43da      	mvns	r2, r3
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4013      	ands	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	409a      	lsls	r2, r3
 80013e0:	0013      	movs	r3, r2
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2203      	movs	r2, #3
 80013f4:	4013      	ands	r3, r2
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d123      	bne.n	8001442 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	08da      	lsrs	r2, r3, #3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3208      	adds	r2, #8
 8001402:	0092      	lsls	r2, r2, #2
 8001404:	58d3      	ldr	r3, [r2, r3]
 8001406:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	2207      	movs	r2, #7
 800140c:	4013      	ands	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	220f      	movs	r2, #15
 8001412:	409a      	lsls	r2, r3
 8001414:	0013      	movs	r3, r2
 8001416:	43da      	mvns	r2, r3
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	691a      	ldr	r2, [r3, #16]
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	2107      	movs	r1, #7
 8001426:	400b      	ands	r3, r1
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	409a      	lsls	r2, r3
 800142c:	0013      	movs	r3, r2
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	08da      	lsrs	r2, r3, #3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3208      	adds	r2, #8
 800143c:	0092      	lsls	r2, r2, #2
 800143e:	6939      	ldr	r1, [r7, #16]
 8001440:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	2203      	movs	r2, #3
 800144e:	409a      	lsls	r2, r3
 8001450:	0013      	movs	r3, r2
 8001452:	43da      	mvns	r2, r3
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	4013      	ands	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	2203      	movs	r2, #3
 8001460:	401a      	ands	r2, r3
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	409a      	lsls	r2, r3
 8001468:	0013      	movs	r3, r2
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	23c0      	movs	r3, #192	; 0xc0
 800147c:	029b      	lsls	r3, r3, #10
 800147e:	4013      	ands	r3, r2
 8001480:	d100      	bne.n	8001484 <HAL_GPIO_Init+0x174>
 8001482:	e09a      	b.n	80015ba <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001484:	4b54      	ldr	r3, [pc, #336]	; (80015d8 <HAL_GPIO_Init+0x2c8>)
 8001486:	699a      	ldr	r2, [r3, #24]
 8001488:	4b53      	ldr	r3, [pc, #332]	; (80015d8 <HAL_GPIO_Init+0x2c8>)
 800148a:	2101      	movs	r1, #1
 800148c:	430a      	orrs	r2, r1
 800148e:	619a      	str	r2, [r3, #24]
 8001490:	4b51      	ldr	r3, [pc, #324]	; (80015d8 <HAL_GPIO_Init+0x2c8>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	2201      	movs	r2, #1
 8001496:	4013      	ands	r3, r2
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800149c:	4a4f      	ldr	r2, [pc, #316]	; (80015dc <HAL_GPIO_Init+0x2cc>)
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	089b      	lsrs	r3, r3, #2
 80014a2:	3302      	adds	r3, #2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	589b      	ldr	r3, [r3, r2]
 80014a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	2203      	movs	r2, #3
 80014ae:	4013      	ands	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	220f      	movs	r2, #15
 80014b4:	409a      	lsls	r2, r3
 80014b6:	0013      	movs	r3, r2
 80014b8:	43da      	mvns	r2, r3
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	4013      	ands	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	2390      	movs	r3, #144	; 0x90
 80014c4:	05db      	lsls	r3, r3, #23
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d013      	beq.n	80014f2 <HAL_GPIO_Init+0x1e2>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a44      	ldr	r2, [pc, #272]	; (80015e0 <HAL_GPIO_Init+0x2d0>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d00d      	beq.n	80014ee <HAL_GPIO_Init+0x1de>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a43      	ldr	r2, [pc, #268]	; (80015e4 <HAL_GPIO_Init+0x2d4>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d007      	beq.n	80014ea <HAL_GPIO_Init+0x1da>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a42      	ldr	r2, [pc, #264]	; (80015e8 <HAL_GPIO_Init+0x2d8>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d101      	bne.n	80014e6 <HAL_GPIO_Init+0x1d6>
 80014e2:	2303      	movs	r3, #3
 80014e4:	e006      	b.n	80014f4 <HAL_GPIO_Init+0x1e4>
 80014e6:	2305      	movs	r3, #5
 80014e8:	e004      	b.n	80014f4 <HAL_GPIO_Init+0x1e4>
 80014ea:	2302      	movs	r3, #2
 80014ec:	e002      	b.n	80014f4 <HAL_GPIO_Init+0x1e4>
 80014ee:	2301      	movs	r3, #1
 80014f0:	e000      	b.n	80014f4 <HAL_GPIO_Init+0x1e4>
 80014f2:	2300      	movs	r3, #0
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	2103      	movs	r1, #3
 80014f8:	400a      	ands	r2, r1
 80014fa:	0092      	lsls	r2, r2, #2
 80014fc:	4093      	lsls	r3, r2
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4313      	orrs	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001504:	4935      	ldr	r1, [pc, #212]	; (80015dc <HAL_GPIO_Init+0x2cc>)
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	089b      	lsrs	r3, r3, #2
 800150a:	3302      	adds	r3, #2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001512:	4b36      	ldr	r3, [pc, #216]	; (80015ec <HAL_GPIO_Init+0x2dc>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	43da      	mvns	r2, r3
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	4013      	ands	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685a      	ldr	r2, [r3, #4]
 8001526:	2380      	movs	r3, #128	; 0x80
 8001528:	025b      	lsls	r3, r3, #9
 800152a:	4013      	ands	r3, r2
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4313      	orrs	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001536:	4b2d      	ldr	r3, [pc, #180]	; (80015ec <HAL_GPIO_Init+0x2dc>)
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800153c:	4b2b      	ldr	r3, [pc, #172]	; (80015ec <HAL_GPIO_Init+0x2dc>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	43da      	mvns	r2, r3
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	2380      	movs	r3, #128	; 0x80
 8001552:	029b      	lsls	r3, r3, #10
 8001554:	4013      	ands	r3, r2
 8001556:	d003      	beq.n	8001560 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	4313      	orrs	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001560:	4b22      	ldr	r3, [pc, #136]	; (80015ec <HAL_GPIO_Init+0x2dc>)
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001566:	4b21      	ldr	r3, [pc, #132]	; (80015ec <HAL_GPIO_Init+0x2dc>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	43da      	mvns	r2, r3
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	4013      	ands	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	2380      	movs	r3, #128	; 0x80
 800157c:	035b      	lsls	r3, r3, #13
 800157e:	4013      	ands	r3, r2
 8001580:	d003      	beq.n	800158a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4313      	orrs	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800158a:	4b18      	ldr	r3, [pc, #96]	; (80015ec <HAL_GPIO_Init+0x2dc>)
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001590:	4b16      	ldr	r3, [pc, #88]	; (80015ec <HAL_GPIO_Init+0x2dc>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	43da      	mvns	r2, r3
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	4013      	ands	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	039b      	lsls	r3, r3, #14
 80015a8:	4013      	ands	r3, r2
 80015aa:	d003      	beq.n	80015b4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015b4:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <HAL_GPIO_Init+0x2dc>)
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	3301      	adds	r3, #1
 80015be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	40da      	lsrs	r2, r3
 80015c8:	1e13      	subs	r3, r2, #0
 80015ca:	d000      	beq.n	80015ce <HAL_GPIO_Init+0x2be>
 80015cc:	e6a8      	b.n	8001320 <HAL_GPIO_Init+0x10>
  } 
}
 80015ce:	46c0      	nop			; (mov r8, r8)
 80015d0:	46c0      	nop			; (mov r8, r8)
 80015d2:	46bd      	mov	sp, r7
 80015d4:	b006      	add	sp, #24
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40010000 	.word	0x40010000
 80015e0:	48000400 	.word	0x48000400
 80015e4:	48000800 	.word	0x48000800
 80015e8:	48000c00 	.word	0x48000c00
 80015ec:	40010400 	.word	0x40010400

080015f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	0008      	movs	r0, r1
 80015fa:	0011      	movs	r1, r2
 80015fc:	1cbb      	adds	r3, r7, #2
 80015fe:	1c02      	adds	r2, r0, #0
 8001600:	801a      	strh	r2, [r3, #0]
 8001602:	1c7b      	adds	r3, r7, #1
 8001604:	1c0a      	adds	r2, r1, #0
 8001606:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001608:	1c7b      	adds	r3, r7, #1
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d004      	beq.n	800161a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001610:	1cbb      	adds	r3, r7, #2
 8001612:	881a      	ldrh	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001618:	e003      	b.n	8001622 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800161a:	1cbb      	adds	r3, r7, #2
 800161c:	881a      	ldrh	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	46bd      	mov	sp, r7
 8001626:	b002      	add	sp, #8
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e082      	b.n	8001744 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2241      	movs	r2, #65	; 0x41
 8001642:	5c9b      	ldrb	r3, [r3, r2]
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d107      	bne.n	800165a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2240      	movs	r2, #64	; 0x40
 800164e:	2100      	movs	r1, #0
 8001650:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	0018      	movs	r0, r3
 8001656:	f7ff fc51 	bl	8000efc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2241      	movs	r2, #65	; 0x41
 800165e:	2124      	movs	r1, #36	; 0x24
 8001660:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2101      	movs	r1, #1
 800166e:	438a      	bics	r2, r1
 8001670:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4934      	ldr	r1, [pc, #208]	; (800174c <HAL_I2C_Init+0x120>)
 800167c:	400a      	ands	r2, r1
 800167e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	689a      	ldr	r2, [r3, #8]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4931      	ldr	r1, [pc, #196]	; (8001750 <HAL_I2C_Init+0x124>)
 800168c:	400a      	ands	r2, r1
 800168e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d108      	bne.n	80016aa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2180      	movs	r1, #128	; 0x80
 80016a2:	0209      	lsls	r1, r1, #8
 80016a4:	430a      	orrs	r2, r1
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	e007      	b.n	80016ba <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689a      	ldr	r2, [r3, #8]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2184      	movs	r1, #132	; 0x84
 80016b4:	0209      	lsls	r1, r1, #8
 80016b6:	430a      	orrs	r2, r1
 80016b8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d104      	bne.n	80016cc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2280      	movs	r2, #128	; 0x80
 80016c8:	0112      	lsls	r2, r2, #4
 80016ca:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	685a      	ldr	r2, [r3, #4]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	491f      	ldr	r1, [pc, #124]	; (8001754 <HAL_I2C_Init+0x128>)
 80016d8:	430a      	orrs	r2, r1
 80016da:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	68da      	ldr	r2, [r3, #12]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	491a      	ldr	r1, [pc, #104]	; (8001750 <HAL_I2C_Init+0x124>)
 80016e8:	400a      	ands	r2, r1
 80016ea:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	691a      	ldr	r2, [r3, #16]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	695b      	ldr	r3, [r3, #20]
 80016f4:	431a      	orrs	r2, r3
 80016f6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69d9      	ldr	r1, [r3, #28]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a1a      	ldr	r2, [r3, #32]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2101      	movs	r1, #1
 8001722:	430a      	orrs	r2, r1
 8001724:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2241      	movs	r2, #65	; 0x41
 8001730:	2120      	movs	r1, #32
 8001732:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2242      	movs	r2, #66	; 0x42
 800173e:	2100      	movs	r1, #0
 8001740:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001742:	2300      	movs	r3, #0
}
 8001744:	0018      	movs	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	b002      	add	sp, #8
 800174a:	bd80      	pop	{r7, pc}
 800174c:	f0ffffff 	.word	0xf0ffffff
 8001750:	ffff7fff 	.word	0xffff7fff
 8001754:	02008000 	.word	0x02008000

08001758 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001758:	b590      	push	{r4, r7, lr}
 800175a:	b089      	sub	sp, #36	; 0x24
 800175c:	af02      	add	r7, sp, #8
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	000c      	movs	r4, r1
 8001762:	0010      	movs	r0, r2
 8001764:	0019      	movs	r1, r3
 8001766:	230a      	movs	r3, #10
 8001768:	18fb      	adds	r3, r7, r3
 800176a:	1c22      	adds	r2, r4, #0
 800176c:	801a      	strh	r2, [r3, #0]
 800176e:	2308      	movs	r3, #8
 8001770:	18fb      	adds	r3, r7, r3
 8001772:	1c02      	adds	r2, r0, #0
 8001774:	801a      	strh	r2, [r3, #0]
 8001776:	1dbb      	adds	r3, r7, #6
 8001778:	1c0a      	adds	r2, r1, #0
 800177a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2241      	movs	r2, #65	; 0x41
 8001780:	5c9b      	ldrb	r3, [r3, r2]
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b20      	cmp	r3, #32
 8001786:	d000      	beq.n	800178a <HAL_I2C_Mem_Write+0x32>
 8001788:	e10c      	b.n	80019a4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800178a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800178c:	2b00      	cmp	r3, #0
 800178e:	d004      	beq.n	800179a <HAL_I2C_Mem_Write+0x42>
 8001790:	232c      	movs	r3, #44	; 0x2c
 8001792:	18fb      	adds	r3, r7, r3
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d105      	bne.n	80017a6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2280      	movs	r2, #128	; 0x80
 800179e:	0092      	lsls	r2, r2, #2
 80017a0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e0ff      	b.n	80019a6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2240      	movs	r2, #64	; 0x40
 80017aa:	5c9b      	ldrb	r3, [r3, r2]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d101      	bne.n	80017b4 <HAL_I2C_Mem_Write+0x5c>
 80017b0:	2302      	movs	r3, #2
 80017b2:	e0f8      	b.n	80019a6 <HAL_I2C_Mem_Write+0x24e>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2240      	movs	r2, #64	; 0x40
 80017b8:	2101      	movs	r1, #1
 80017ba:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017bc:	f7ff fcc6 	bl	800114c <HAL_GetTick>
 80017c0:	0003      	movs	r3, r0
 80017c2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	0219      	lsls	r1, r3, #8
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	2319      	movs	r3, #25
 80017d0:	2201      	movs	r2, #1
 80017d2:	f000 fb0b 	bl	8001dec <I2C_WaitOnFlagUntilTimeout>
 80017d6:	1e03      	subs	r3, r0, #0
 80017d8:	d001      	beq.n	80017de <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e0e3      	b.n	80019a6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2241      	movs	r2, #65	; 0x41
 80017e2:	2121      	movs	r1, #33	; 0x21
 80017e4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2242      	movs	r2, #66	; 0x42
 80017ea:	2140      	movs	r1, #64	; 0x40
 80017ec:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2200      	movs	r2, #0
 80017f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	222c      	movs	r2, #44	; 0x2c
 80017fe:	18ba      	adds	r2, r7, r2
 8001800:	8812      	ldrh	r2, [r2, #0]
 8001802:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800180a:	1dbb      	adds	r3, r7, #6
 800180c:	881c      	ldrh	r4, [r3, #0]
 800180e:	2308      	movs	r3, #8
 8001810:	18fb      	adds	r3, r7, r3
 8001812:	881a      	ldrh	r2, [r3, #0]
 8001814:	230a      	movs	r3, #10
 8001816:	18fb      	adds	r3, r7, r3
 8001818:	8819      	ldrh	r1, [r3, #0]
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	9301      	str	r3, [sp, #4]
 8001820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	0023      	movs	r3, r4
 8001826:	f000 f9f9 	bl	8001c1c <I2C_RequestMemoryWrite>
 800182a:	1e03      	subs	r3, r0, #0
 800182c:	d005      	beq.n	800183a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2240      	movs	r2, #64	; 0x40
 8001832:	2100      	movs	r1, #0
 8001834:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e0b5      	b.n	80019a6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800183e:	b29b      	uxth	r3, r3
 8001840:	2bff      	cmp	r3, #255	; 0xff
 8001842:	d911      	bls.n	8001868 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	22ff      	movs	r2, #255	; 0xff
 8001848:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800184e:	b2da      	uxtb	r2, r3
 8001850:	2380      	movs	r3, #128	; 0x80
 8001852:	045c      	lsls	r4, r3, #17
 8001854:	230a      	movs	r3, #10
 8001856:	18fb      	adds	r3, r7, r3
 8001858:	8819      	ldrh	r1, [r3, #0]
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	2300      	movs	r3, #0
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	0023      	movs	r3, r4
 8001862:	f000 fbf7 	bl	8002054 <I2C_TransferConfig>
 8001866:	e012      	b.n	800188e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800186c:	b29a      	uxth	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001876:	b2da      	uxtb	r2, r3
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	049c      	lsls	r4, r3, #18
 800187c:	230a      	movs	r3, #10
 800187e:	18fb      	adds	r3, r7, r3
 8001880:	8819      	ldrh	r1, [r3, #0]
 8001882:	68f8      	ldr	r0, [r7, #12]
 8001884:	2300      	movs	r3, #0
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	0023      	movs	r3, r4
 800188a:	f000 fbe3 	bl	8002054 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	0018      	movs	r0, r3
 8001896:	f000 fae8 	bl	8001e6a <I2C_WaitOnTXISFlagUntilTimeout>
 800189a:	1e03      	subs	r3, r0, #0
 800189c:	d001      	beq.n	80018a2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e081      	b.n	80019a6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a6:	781a      	ldrb	r2, [r3, #0]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b2:	1c5a      	adds	r2, r3, #1
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018bc:	b29b      	uxth	r3, r3
 80018be:	3b01      	subs	r3, #1
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ca:	3b01      	subs	r3, #1
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d03a      	beq.n	8001952 <HAL_I2C_Mem_Write+0x1fa>
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d136      	bne.n	8001952 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	0013      	movs	r3, r2
 80018ee:	2200      	movs	r2, #0
 80018f0:	2180      	movs	r1, #128	; 0x80
 80018f2:	f000 fa7b 	bl	8001dec <I2C_WaitOnFlagUntilTimeout>
 80018f6:	1e03      	subs	r3, r0, #0
 80018f8:	d001      	beq.n	80018fe <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e053      	b.n	80019a6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001902:	b29b      	uxth	r3, r3
 8001904:	2bff      	cmp	r3, #255	; 0xff
 8001906:	d911      	bls.n	800192c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	22ff      	movs	r2, #255	; 0xff
 800190c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001912:	b2da      	uxtb	r2, r3
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	045c      	lsls	r4, r3, #17
 8001918:	230a      	movs	r3, #10
 800191a:	18fb      	adds	r3, r7, r3
 800191c:	8819      	ldrh	r1, [r3, #0]
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	2300      	movs	r3, #0
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	0023      	movs	r3, r4
 8001926:	f000 fb95 	bl	8002054 <I2C_TransferConfig>
 800192a:	e012      	b.n	8001952 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001930:	b29a      	uxth	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800193a:	b2da      	uxtb	r2, r3
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	049c      	lsls	r4, r3, #18
 8001940:	230a      	movs	r3, #10
 8001942:	18fb      	adds	r3, r7, r3
 8001944:	8819      	ldrh	r1, [r3, #0]
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	2300      	movs	r3, #0
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	0023      	movs	r3, r4
 800194e:	f000 fb81 	bl	8002054 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001956:	b29b      	uxth	r3, r3
 8001958:	2b00      	cmp	r3, #0
 800195a:	d198      	bne.n	800188e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	0018      	movs	r0, r3
 8001964:	f000 fac0 	bl	8001ee8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001968:	1e03      	subs	r3, r0, #0
 800196a:	d001      	beq.n	8001970 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e01a      	b.n	80019a6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2220      	movs	r2, #32
 8001976:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	490b      	ldr	r1, [pc, #44]	; (80019b0 <HAL_I2C_Mem_Write+0x258>)
 8001984:	400a      	ands	r2, r1
 8001986:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2241      	movs	r2, #65	; 0x41
 800198c:	2120      	movs	r1, #32
 800198e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2242      	movs	r2, #66	; 0x42
 8001994:	2100      	movs	r1, #0
 8001996:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2240      	movs	r2, #64	; 0x40
 800199c:	2100      	movs	r1, #0
 800199e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80019a0:	2300      	movs	r3, #0
 80019a2:	e000      	b.n	80019a6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80019a4:	2302      	movs	r3, #2
  }
}
 80019a6:	0018      	movs	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	b007      	add	sp, #28
 80019ac:	bd90      	pop	{r4, r7, pc}
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	fe00e800 	.word	0xfe00e800

080019b4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019b4:	b590      	push	{r4, r7, lr}
 80019b6:	b089      	sub	sp, #36	; 0x24
 80019b8:	af02      	add	r7, sp, #8
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	000c      	movs	r4, r1
 80019be:	0010      	movs	r0, r2
 80019c0:	0019      	movs	r1, r3
 80019c2:	230a      	movs	r3, #10
 80019c4:	18fb      	adds	r3, r7, r3
 80019c6:	1c22      	adds	r2, r4, #0
 80019c8:	801a      	strh	r2, [r3, #0]
 80019ca:	2308      	movs	r3, #8
 80019cc:	18fb      	adds	r3, r7, r3
 80019ce:	1c02      	adds	r2, r0, #0
 80019d0:	801a      	strh	r2, [r3, #0]
 80019d2:	1dbb      	adds	r3, r7, #6
 80019d4:	1c0a      	adds	r2, r1, #0
 80019d6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2241      	movs	r2, #65	; 0x41
 80019dc:	5c9b      	ldrb	r3, [r3, r2]
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2b20      	cmp	r3, #32
 80019e2:	d000      	beq.n	80019e6 <HAL_I2C_Mem_Read+0x32>
 80019e4:	e110      	b.n	8001c08 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80019e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d004      	beq.n	80019f6 <HAL_I2C_Mem_Read+0x42>
 80019ec:	232c      	movs	r3, #44	; 0x2c
 80019ee:	18fb      	adds	r3, r7, r3
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d105      	bne.n	8001a02 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2280      	movs	r2, #128	; 0x80
 80019fa:	0092      	lsls	r2, r2, #2
 80019fc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e103      	b.n	8001c0a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2240      	movs	r2, #64	; 0x40
 8001a06:	5c9b      	ldrb	r3, [r3, r2]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d101      	bne.n	8001a10 <HAL_I2C_Mem_Read+0x5c>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e0fc      	b.n	8001c0a <HAL_I2C_Mem_Read+0x256>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2240      	movs	r2, #64	; 0x40
 8001a14:	2101      	movs	r1, #1
 8001a16:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a18:	f7ff fb98 	bl	800114c <HAL_GetTick>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a20:	2380      	movs	r3, #128	; 0x80
 8001a22:	0219      	lsls	r1, r3, #8
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	2319      	movs	r3, #25
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f000 f9dd 	bl	8001dec <I2C_WaitOnFlagUntilTimeout>
 8001a32:	1e03      	subs	r3, r0, #0
 8001a34:	d001      	beq.n	8001a3a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e0e7      	b.n	8001c0a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2241      	movs	r2, #65	; 0x41
 8001a3e:	2122      	movs	r1, #34	; 0x22
 8001a40:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2242      	movs	r2, #66	; 0x42
 8001a46:	2140      	movs	r1, #64	; 0x40
 8001a48:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	222c      	movs	r2, #44	; 0x2c
 8001a5a:	18ba      	adds	r2, r7, r2
 8001a5c:	8812      	ldrh	r2, [r2, #0]
 8001a5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2200      	movs	r2, #0
 8001a64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a66:	1dbb      	adds	r3, r7, #6
 8001a68:	881c      	ldrh	r4, [r3, #0]
 8001a6a:	2308      	movs	r3, #8
 8001a6c:	18fb      	adds	r3, r7, r3
 8001a6e:	881a      	ldrh	r2, [r3, #0]
 8001a70:	230a      	movs	r3, #10
 8001a72:	18fb      	adds	r3, r7, r3
 8001a74:	8819      	ldrh	r1, [r3, #0]
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	9301      	str	r3, [sp, #4]
 8001a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	0023      	movs	r3, r4
 8001a82:	f000 f92f 	bl	8001ce4 <I2C_RequestMemoryRead>
 8001a86:	1e03      	subs	r3, r0, #0
 8001a88:	d005      	beq.n	8001a96 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2240      	movs	r2, #64	; 0x40
 8001a8e:	2100      	movs	r1, #0
 8001a90:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e0b9      	b.n	8001c0a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	2bff      	cmp	r3, #255	; 0xff
 8001a9e:	d911      	bls.n	8001ac4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	22ff      	movs	r2, #255	; 0xff
 8001aa4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	045c      	lsls	r4, r3, #17
 8001ab0:	230a      	movs	r3, #10
 8001ab2:	18fb      	adds	r3, r7, r3
 8001ab4:	8819      	ldrh	r1, [r3, #0]
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	4b56      	ldr	r3, [pc, #344]	; (8001c14 <HAL_I2C_Mem_Read+0x260>)
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	0023      	movs	r3, r4
 8001abe:	f000 fac9 	bl	8002054 <I2C_TransferConfig>
 8001ac2:	e012      	b.n	8001aea <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	2380      	movs	r3, #128	; 0x80
 8001ad6:	049c      	lsls	r4, r3, #18
 8001ad8:	230a      	movs	r3, #10
 8001ada:	18fb      	adds	r3, r7, r3
 8001adc:	8819      	ldrh	r1, [r3, #0]
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	4b4c      	ldr	r3, [pc, #304]	; (8001c14 <HAL_I2C_Mem_Read+0x260>)
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	0023      	movs	r3, r4
 8001ae6:	f000 fab5 	bl	8002054 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001aea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	0013      	movs	r3, r2
 8001af4:	2200      	movs	r2, #0
 8001af6:	2104      	movs	r1, #4
 8001af8:	f000 f978 	bl	8001dec <I2C_WaitOnFlagUntilTimeout>
 8001afc:	1e03      	subs	r3, r0, #0
 8001afe:	d001      	beq.n	8001b04 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e082      	b.n	8001c0a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	1c5a      	adds	r2, r3, #1
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b20:	3b01      	subs	r3, #1
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d03a      	beq.n	8001bb6 <HAL_I2C_Mem_Read+0x202>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d136      	bne.n	8001bb6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	0013      	movs	r3, r2
 8001b52:	2200      	movs	r2, #0
 8001b54:	2180      	movs	r1, #128	; 0x80
 8001b56:	f000 f949 	bl	8001dec <I2C_WaitOnFlagUntilTimeout>
 8001b5a:	1e03      	subs	r3, r0, #0
 8001b5c:	d001      	beq.n	8001b62 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e053      	b.n	8001c0a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	2bff      	cmp	r3, #255	; 0xff
 8001b6a:	d911      	bls.n	8001b90 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	22ff      	movs	r2, #255	; 0xff
 8001b70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	045c      	lsls	r4, r3, #17
 8001b7c:	230a      	movs	r3, #10
 8001b7e:	18fb      	adds	r3, r7, r3
 8001b80:	8819      	ldrh	r1, [r3, #0]
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	2300      	movs	r3, #0
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	0023      	movs	r3, r4
 8001b8a:	f000 fa63 	bl	8002054 <I2C_TransferConfig>
 8001b8e:	e012      	b.n	8001bb6 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	049c      	lsls	r4, r3, #18
 8001ba4:	230a      	movs	r3, #10
 8001ba6:	18fb      	adds	r3, r7, r3
 8001ba8:	8819      	ldrh	r1, [r3, #0]
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	2300      	movs	r3, #0
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	0023      	movs	r3, r4
 8001bb2:	f000 fa4f 	bl	8002054 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d194      	bne.n	8001aea <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	f000 f98e 	bl	8001ee8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bcc:	1e03      	subs	r3, r0, #0
 8001bce:	d001      	beq.n	8001bd4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e01a      	b.n	8001c0a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2220      	movs	r2, #32
 8001bda:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	490c      	ldr	r1, [pc, #48]	; (8001c18 <HAL_I2C_Mem_Read+0x264>)
 8001be8:	400a      	ands	r2, r1
 8001bea:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2241      	movs	r2, #65	; 0x41
 8001bf0:	2120      	movs	r1, #32
 8001bf2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2242      	movs	r2, #66	; 0x42
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2240      	movs	r2, #64	; 0x40
 8001c00:	2100      	movs	r1, #0
 8001c02:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	e000      	b.n	8001c0a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001c08:	2302      	movs	r3, #2
  }
}
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	b007      	add	sp, #28
 8001c10:	bd90      	pop	{r4, r7, pc}
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	80002400 	.word	0x80002400
 8001c18:	fe00e800 	.word	0xfe00e800

08001c1c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001c1c:	b5b0      	push	{r4, r5, r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af02      	add	r7, sp, #8
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	000c      	movs	r4, r1
 8001c26:	0010      	movs	r0, r2
 8001c28:	0019      	movs	r1, r3
 8001c2a:	250a      	movs	r5, #10
 8001c2c:	197b      	adds	r3, r7, r5
 8001c2e:	1c22      	adds	r2, r4, #0
 8001c30:	801a      	strh	r2, [r3, #0]
 8001c32:	2308      	movs	r3, #8
 8001c34:	18fb      	adds	r3, r7, r3
 8001c36:	1c02      	adds	r2, r0, #0
 8001c38:	801a      	strh	r2, [r3, #0]
 8001c3a:	1dbb      	adds	r3, r7, #6
 8001c3c:	1c0a      	adds	r2, r1, #0
 8001c3e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001c40:	1dbb      	adds	r3, r7, #6
 8001c42:	881b      	ldrh	r3, [r3, #0]
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	045c      	lsls	r4, r3, #17
 8001c4a:	197b      	adds	r3, r7, r5
 8001c4c:	8819      	ldrh	r1, [r3, #0]
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	4b23      	ldr	r3, [pc, #140]	; (8001ce0 <I2C_RequestMemoryWrite+0xc4>)
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	0023      	movs	r3, r4
 8001c56:	f000 f9fd 	bl	8002054 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c5c:	6a39      	ldr	r1, [r7, #32]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	0018      	movs	r0, r3
 8001c62:	f000 f902 	bl	8001e6a <I2C_WaitOnTXISFlagUntilTimeout>
 8001c66:	1e03      	subs	r3, r0, #0
 8001c68:	d001      	beq.n	8001c6e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e033      	b.n	8001cd6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c6e:	1dbb      	adds	r3, r7, #6
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d107      	bne.n	8001c86 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c76:	2308      	movs	r3, #8
 8001c78:	18fb      	adds	r3, r7, r3
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	629a      	str	r2, [r3, #40]	; 0x28
 8001c84:	e019      	b.n	8001cba <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c86:	2308      	movs	r3, #8
 8001c88:	18fb      	adds	r3, r7, r3
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	0a1b      	lsrs	r3, r3, #8
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c9a:	6a39      	ldr	r1, [r7, #32]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	f000 f8e3 	bl	8001e6a <I2C_WaitOnTXISFlagUntilTimeout>
 8001ca4:	1e03      	subs	r3, r0, #0
 8001ca6:	d001      	beq.n	8001cac <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e014      	b.n	8001cd6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001cac:	2308      	movs	r3, #8
 8001cae:	18fb      	adds	r3, r7, r3
 8001cb0:	881b      	ldrh	r3, [r3, #0]
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001cba:	6a3a      	ldr	r2, [r7, #32]
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	0013      	movs	r3, r2
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2180      	movs	r1, #128	; 0x80
 8001cc8:	f000 f890 	bl	8001dec <I2C_WaitOnFlagUntilTimeout>
 8001ccc:	1e03      	subs	r3, r0, #0
 8001cce:	d001      	beq.n	8001cd4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e000      	b.n	8001cd6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	b004      	add	sp, #16
 8001cdc:	bdb0      	pop	{r4, r5, r7, pc}
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	80002000 	.word	0x80002000

08001ce4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001ce4:	b5b0      	push	{r4, r5, r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af02      	add	r7, sp, #8
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	000c      	movs	r4, r1
 8001cee:	0010      	movs	r0, r2
 8001cf0:	0019      	movs	r1, r3
 8001cf2:	250a      	movs	r5, #10
 8001cf4:	197b      	adds	r3, r7, r5
 8001cf6:	1c22      	adds	r2, r4, #0
 8001cf8:	801a      	strh	r2, [r3, #0]
 8001cfa:	2308      	movs	r3, #8
 8001cfc:	18fb      	adds	r3, r7, r3
 8001cfe:	1c02      	adds	r2, r0, #0
 8001d00:	801a      	strh	r2, [r3, #0]
 8001d02:	1dbb      	adds	r3, r7, #6
 8001d04:	1c0a      	adds	r2, r1, #0
 8001d06:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001d08:	1dbb      	adds	r3, r7, #6
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	197b      	adds	r3, r7, r5
 8001d10:	8819      	ldrh	r1, [r3, #0]
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	4b23      	ldr	r3, [pc, #140]	; (8001da4 <I2C_RequestMemoryRead+0xc0>)
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f000 f99b 	bl	8002054 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d20:	6a39      	ldr	r1, [r7, #32]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	0018      	movs	r0, r3
 8001d26:	f000 f8a0 	bl	8001e6a <I2C_WaitOnTXISFlagUntilTimeout>
 8001d2a:	1e03      	subs	r3, r0, #0
 8001d2c:	d001      	beq.n	8001d32 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e033      	b.n	8001d9a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d32:	1dbb      	adds	r3, r7, #6
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d107      	bne.n	8001d4a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d3a:	2308      	movs	r3, #8
 8001d3c:	18fb      	adds	r3, r7, r3
 8001d3e:	881b      	ldrh	r3, [r3, #0]
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	629a      	str	r2, [r3, #40]	; 0x28
 8001d48:	e019      	b.n	8001d7e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001d4a:	2308      	movs	r3, #8
 8001d4c:	18fb      	adds	r3, r7, r3
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d5e:	6a39      	ldr	r1, [r7, #32]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	0018      	movs	r0, r3
 8001d64:	f000 f881 	bl	8001e6a <I2C_WaitOnTXISFlagUntilTimeout>
 8001d68:	1e03      	subs	r3, r0, #0
 8001d6a:	d001      	beq.n	8001d70 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e014      	b.n	8001d9a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d70:	2308      	movs	r3, #8
 8001d72:	18fb      	adds	r3, r7, r3
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001d7e:	6a3a      	ldr	r2, [r7, #32]
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	0013      	movs	r3, r2
 8001d88:	2200      	movs	r2, #0
 8001d8a:	2140      	movs	r1, #64	; 0x40
 8001d8c:	f000 f82e 	bl	8001dec <I2C_WaitOnFlagUntilTimeout>
 8001d90:	1e03      	subs	r3, r0, #0
 8001d92:	d001      	beq.n	8001d98 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	b004      	add	sp, #16
 8001da0:	bdb0      	pop	{r4, r5, r7, pc}
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	80002000 	.word	0x80002000

08001da8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	2202      	movs	r2, #2
 8001db8:	4013      	ands	r3, r2
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d103      	bne.n	8001dc6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	4013      	ands	r3, r2
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d007      	beq.n	8001de4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	699a      	ldr	r2, [r3, #24]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2101      	movs	r1, #1
 8001de0:	430a      	orrs	r2, r1
 8001de2:	619a      	str	r2, [r3, #24]
  }
}
 8001de4:	46c0      	nop			; (mov r8, r8)
 8001de6:	46bd      	mov	sp, r7
 8001de8:	b002      	add	sp, #8
 8001dea:	bd80      	pop	{r7, pc}

08001dec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	603b      	str	r3, [r7, #0]
 8001df8:	1dfb      	adds	r3, r7, #7
 8001dfa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dfc:	e021      	b.n	8001e42 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	3301      	adds	r3, #1
 8001e02:	d01e      	beq.n	8001e42 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e04:	f7ff f9a2 	bl	800114c <HAL_GetTick>
 8001e08:	0002      	movs	r2, r0
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d302      	bcc.n	8001e1a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d113      	bne.n	8001e42 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	2220      	movs	r2, #32
 8001e20:	431a      	orrs	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2241      	movs	r2, #65	; 0x41
 8001e2a:	2120      	movs	r1, #32
 8001e2c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2242      	movs	r2, #66	; 0x42
 8001e32:	2100      	movs	r1, #0
 8001e34:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2240      	movs	r2, #64	; 0x40
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e00f      	b.n	8001e62 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	68ba      	ldr	r2, [r7, #8]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	68ba      	ldr	r2, [r7, #8]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	425a      	negs	r2, r3
 8001e52:	4153      	adcs	r3, r2
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	001a      	movs	r2, r3
 8001e58:	1dfb      	adds	r3, r7, #7
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d0ce      	beq.n	8001dfe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	0018      	movs	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	b004      	add	sp, #16
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b084      	sub	sp, #16
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e76:	e02b      	b.n	8001ed0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	68b9      	ldr	r1, [r7, #8]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	0018      	movs	r0, r3
 8001e80:	f000 f86e 	bl	8001f60 <I2C_IsAcknowledgeFailed>
 8001e84:	1e03      	subs	r3, r0, #0
 8001e86:	d001      	beq.n	8001e8c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e029      	b.n	8001ee0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	d01e      	beq.n	8001ed0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e92:	f7ff f95b 	bl	800114c <HAL_GetTick>
 8001e96:	0002      	movs	r2, r0
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	68ba      	ldr	r2, [r7, #8]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d302      	bcc.n	8001ea8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d113      	bne.n	8001ed0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eac:	2220      	movs	r2, #32
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2241      	movs	r2, #65	; 0x41
 8001eb8:	2120      	movs	r1, #32
 8001eba:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2242      	movs	r2, #66	; 0x42
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2240      	movs	r2, #64	; 0x40
 8001ec8:	2100      	movs	r1, #0
 8001eca:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e007      	b.n	8001ee0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	4013      	ands	r3, r2
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d1cc      	bne.n	8001e78 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	b004      	add	sp, #16
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ef4:	e028      	b.n	8001f48 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	68b9      	ldr	r1, [r7, #8]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	0018      	movs	r0, r3
 8001efe:	f000 f82f 	bl	8001f60 <I2C_IsAcknowledgeFailed>
 8001f02:	1e03      	subs	r3, r0, #0
 8001f04:	d001      	beq.n	8001f0a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e026      	b.n	8001f58 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f0a:	f7ff f91f 	bl	800114c <HAL_GetTick>
 8001f0e:	0002      	movs	r2, r0
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d302      	bcc.n	8001f20 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d113      	bne.n	8001f48 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f24:	2220      	movs	r2, #32
 8001f26:	431a      	orrs	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2241      	movs	r2, #65	; 0x41
 8001f30:	2120      	movs	r1, #32
 8001f32:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2242      	movs	r2, #66	; 0x42
 8001f38:	2100      	movs	r1, #0
 8001f3a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2240      	movs	r2, #64	; 0x40
 8001f40:	2100      	movs	r1, #0
 8001f42:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e007      	b.n	8001f58 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	2220      	movs	r2, #32
 8001f50:	4013      	ands	r3, r2
 8001f52:	2b20      	cmp	r3, #32
 8001f54:	d1cf      	bne.n	8001ef6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	0018      	movs	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	b004      	add	sp, #16
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	2210      	movs	r2, #16
 8001f74:	4013      	ands	r3, r2
 8001f76:	2b10      	cmp	r3, #16
 8001f78:	d164      	bne.n	8002044 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	049b      	lsls	r3, r3, #18
 8001f84:	401a      	ands	r2, r3
 8001f86:	2380      	movs	r3, #128	; 0x80
 8001f88:	049b      	lsls	r3, r3, #18
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d02b      	beq.n	8001fe6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2180      	movs	r1, #128	; 0x80
 8001f9a:	01c9      	lsls	r1, r1, #7
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fa0:	e021      	b.n	8001fe6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	d01e      	beq.n	8001fe6 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fa8:	f7ff f8d0 	bl	800114c <HAL_GetTick>
 8001fac:	0002      	movs	r2, r0
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d302      	bcc.n	8001fbe <I2C_IsAcknowledgeFailed+0x5e>
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d113      	bne.n	8001fe6 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2241      	movs	r2, #65	; 0x41
 8001fce:	2120      	movs	r1, #32
 8001fd0:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2242      	movs	r2, #66	; 0x42
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2240      	movs	r2, #64	; 0x40
 8001fde:	2100      	movs	r1, #0
 8001fe0:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e02f      	b.n	8002046 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	2220      	movs	r2, #32
 8001fee:	4013      	ands	r3, r2
 8001ff0:	2b20      	cmp	r3, #32
 8001ff2:	d1d6      	bne.n	8001fa2 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2210      	movs	r2, #16
 8001ffa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2220      	movs	r2, #32
 8002002:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	0018      	movs	r0, r3
 8002008:	f7ff fece 	bl	8001da8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	490e      	ldr	r1, [pc, #56]	; (8002050 <I2C_IsAcknowledgeFailed+0xf0>)
 8002018:	400a      	ands	r2, r1
 800201a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002020:	2204      	movs	r2, #4
 8002022:	431a      	orrs	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2241      	movs	r2, #65	; 0x41
 800202c:	2120      	movs	r1, #32
 800202e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2242      	movs	r2, #66	; 0x42
 8002034:	2100      	movs	r1, #0
 8002036:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2240      	movs	r2, #64	; 0x40
 800203c:	2100      	movs	r1, #0
 800203e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e000      	b.n	8002046 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	0018      	movs	r0, r3
 8002048:	46bd      	mov	sp, r7
 800204a:	b004      	add	sp, #16
 800204c:	bd80      	pop	{r7, pc}
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	fe00e800 	.word	0xfe00e800

08002054 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002054:	b590      	push	{r4, r7, lr}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	0008      	movs	r0, r1
 800205e:	0011      	movs	r1, r2
 8002060:	607b      	str	r3, [r7, #4]
 8002062:	240a      	movs	r4, #10
 8002064:	193b      	adds	r3, r7, r4
 8002066:	1c02      	adds	r2, r0, #0
 8002068:	801a      	strh	r2, [r3, #0]
 800206a:	2009      	movs	r0, #9
 800206c:	183b      	adds	r3, r7, r0
 800206e:	1c0a      	adds	r2, r1, #0
 8002070:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	6a3a      	ldr	r2, [r7, #32]
 800207a:	0d51      	lsrs	r1, r2, #21
 800207c:	2280      	movs	r2, #128	; 0x80
 800207e:	00d2      	lsls	r2, r2, #3
 8002080:	400a      	ands	r2, r1
 8002082:	490e      	ldr	r1, [pc, #56]	; (80020bc <I2C_TransferConfig+0x68>)
 8002084:	430a      	orrs	r2, r1
 8002086:	43d2      	mvns	r2, r2
 8002088:	401a      	ands	r2, r3
 800208a:	0011      	movs	r1, r2
 800208c:	193b      	adds	r3, r7, r4
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	059b      	lsls	r3, r3, #22
 8002092:	0d9a      	lsrs	r2, r3, #22
 8002094:	183b      	adds	r3, r7, r0
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	0418      	lsls	r0, r3, #16
 800209a:	23ff      	movs	r3, #255	; 0xff
 800209c:	041b      	lsls	r3, r3, #16
 800209e:	4003      	ands	r3, r0
 80020a0:	431a      	orrs	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	431a      	orrs	r2, r3
 80020a6:	6a3b      	ldr	r3, [r7, #32]
 80020a8:	431a      	orrs	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80020b2:	46c0      	nop			; (mov r8, r8)
 80020b4:	46bd      	mov	sp, r7
 80020b6:	b005      	add	sp, #20
 80020b8:	bd90      	pop	{r4, r7, pc}
 80020ba:	46c0      	nop			; (mov r8, r8)
 80020bc:	03ff63ff 	.word	0x03ff63ff

080020c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2241      	movs	r2, #65	; 0x41
 80020ce:	5c9b      	ldrb	r3, [r3, r2]
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b20      	cmp	r3, #32
 80020d4:	d138      	bne.n	8002148 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2240      	movs	r2, #64	; 0x40
 80020da:	5c9b      	ldrb	r3, [r3, r2]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d101      	bne.n	80020e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020e0:	2302      	movs	r3, #2
 80020e2:	e032      	b.n	800214a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2240      	movs	r2, #64	; 0x40
 80020e8:	2101      	movs	r1, #1
 80020ea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2241      	movs	r2, #65	; 0x41
 80020f0:	2124      	movs	r1, #36	; 0x24
 80020f2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2101      	movs	r1, #1
 8002100:	438a      	bics	r2, r1
 8002102:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4911      	ldr	r1, [pc, #68]	; (8002154 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002110:	400a      	ands	r2, r1
 8002112:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6819      	ldr	r1, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2101      	movs	r1, #1
 8002130:	430a      	orrs	r2, r1
 8002132:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2241      	movs	r2, #65	; 0x41
 8002138:	2120      	movs	r1, #32
 800213a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2240      	movs	r2, #64	; 0x40
 8002140:	2100      	movs	r1, #0
 8002142:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002144:	2300      	movs	r3, #0
 8002146:	e000      	b.n	800214a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002148:	2302      	movs	r3, #2
  }
}
 800214a:	0018      	movs	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	b002      	add	sp, #8
 8002150:	bd80      	pop	{r7, pc}
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	ffffefff 	.word	0xffffefff

08002158 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2241      	movs	r2, #65	; 0x41
 8002166:	5c9b      	ldrb	r3, [r3, r2]
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b20      	cmp	r3, #32
 800216c:	d139      	bne.n	80021e2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2240      	movs	r2, #64	; 0x40
 8002172:	5c9b      	ldrb	r3, [r3, r2]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d101      	bne.n	800217c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002178:	2302      	movs	r3, #2
 800217a:	e033      	b.n	80021e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2240      	movs	r2, #64	; 0x40
 8002180:	2101      	movs	r1, #1
 8002182:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2241      	movs	r2, #65	; 0x41
 8002188:	2124      	movs	r1, #36	; 0x24
 800218a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2101      	movs	r1, #1
 8002198:	438a      	bics	r2, r1
 800219a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4a11      	ldr	r2, [pc, #68]	; (80021ec <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80021a8:	4013      	ands	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	021b      	lsls	r3, r3, #8
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2101      	movs	r1, #1
 80021ca:	430a      	orrs	r2, r1
 80021cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2241      	movs	r2, #65	; 0x41
 80021d2:	2120      	movs	r1, #32
 80021d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2240      	movs	r2, #64	; 0x40
 80021da:	2100      	movs	r1, #0
 80021dc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	e000      	b.n	80021e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021e2:	2302      	movs	r3, #2
  }
}
 80021e4:	0018      	movs	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	b004      	add	sp, #16
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	fffff0ff 	.word	0xfffff0ff

080021f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e301      	b.n	8002806 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2201      	movs	r2, #1
 8002208:	4013      	ands	r3, r2
 800220a:	d100      	bne.n	800220e <HAL_RCC_OscConfig+0x1e>
 800220c:	e08d      	b.n	800232a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800220e:	4bc3      	ldr	r3, [pc, #780]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	220c      	movs	r2, #12
 8002214:	4013      	ands	r3, r2
 8002216:	2b04      	cmp	r3, #4
 8002218:	d00e      	beq.n	8002238 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800221a:	4bc0      	ldr	r3, [pc, #768]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	220c      	movs	r2, #12
 8002220:	4013      	ands	r3, r2
 8002222:	2b08      	cmp	r3, #8
 8002224:	d116      	bne.n	8002254 <HAL_RCC_OscConfig+0x64>
 8002226:	4bbd      	ldr	r3, [pc, #756]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	2380      	movs	r3, #128	; 0x80
 800222c:	025b      	lsls	r3, r3, #9
 800222e:	401a      	ands	r2, r3
 8002230:	2380      	movs	r3, #128	; 0x80
 8002232:	025b      	lsls	r3, r3, #9
 8002234:	429a      	cmp	r2, r3
 8002236:	d10d      	bne.n	8002254 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002238:	4bb8      	ldr	r3, [pc, #736]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	2380      	movs	r3, #128	; 0x80
 800223e:	029b      	lsls	r3, r3, #10
 8002240:	4013      	ands	r3, r2
 8002242:	d100      	bne.n	8002246 <HAL_RCC_OscConfig+0x56>
 8002244:	e070      	b.n	8002328 <HAL_RCC_OscConfig+0x138>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d000      	beq.n	8002250 <HAL_RCC_OscConfig+0x60>
 800224e:	e06b      	b.n	8002328 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e2d8      	b.n	8002806 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d107      	bne.n	800226c <HAL_RCC_OscConfig+0x7c>
 800225c:	4baf      	ldr	r3, [pc, #700]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	4bae      	ldr	r3, [pc, #696]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 8002262:	2180      	movs	r1, #128	; 0x80
 8002264:	0249      	lsls	r1, r1, #9
 8002266:	430a      	orrs	r2, r1
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	e02f      	b.n	80022cc <HAL_RCC_OscConfig+0xdc>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10c      	bne.n	800228e <HAL_RCC_OscConfig+0x9e>
 8002274:	4ba9      	ldr	r3, [pc, #676]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	4ba8      	ldr	r3, [pc, #672]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 800227a:	49a9      	ldr	r1, [pc, #676]	; (8002520 <HAL_RCC_OscConfig+0x330>)
 800227c:	400a      	ands	r2, r1
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	4ba6      	ldr	r3, [pc, #664]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4ba5      	ldr	r3, [pc, #660]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 8002286:	49a7      	ldr	r1, [pc, #668]	; (8002524 <HAL_RCC_OscConfig+0x334>)
 8002288:	400a      	ands	r2, r1
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	e01e      	b.n	80022cc <HAL_RCC_OscConfig+0xdc>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b05      	cmp	r3, #5
 8002294:	d10e      	bne.n	80022b4 <HAL_RCC_OscConfig+0xc4>
 8002296:	4ba1      	ldr	r3, [pc, #644]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	4ba0      	ldr	r3, [pc, #640]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 800229c:	2180      	movs	r1, #128	; 0x80
 800229e:	02c9      	lsls	r1, r1, #11
 80022a0:	430a      	orrs	r2, r1
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	4b9d      	ldr	r3, [pc, #628]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	4b9c      	ldr	r3, [pc, #624]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 80022aa:	2180      	movs	r1, #128	; 0x80
 80022ac:	0249      	lsls	r1, r1, #9
 80022ae:	430a      	orrs	r2, r1
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	e00b      	b.n	80022cc <HAL_RCC_OscConfig+0xdc>
 80022b4:	4b99      	ldr	r3, [pc, #612]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4b98      	ldr	r3, [pc, #608]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 80022ba:	4999      	ldr	r1, [pc, #612]	; (8002520 <HAL_RCC_OscConfig+0x330>)
 80022bc:	400a      	ands	r2, r1
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	4b96      	ldr	r3, [pc, #600]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4b95      	ldr	r3, [pc, #596]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 80022c6:	4997      	ldr	r1, [pc, #604]	; (8002524 <HAL_RCC_OscConfig+0x334>)
 80022c8:	400a      	ands	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d014      	beq.n	80022fe <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7fe ff3a 	bl	800114c <HAL_GetTick>
 80022d8:	0003      	movs	r3, r0
 80022da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022de:	f7fe ff35 	bl	800114c <HAL_GetTick>
 80022e2:	0002      	movs	r2, r0
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b64      	cmp	r3, #100	; 0x64
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e28a      	b.n	8002806 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f0:	4b8a      	ldr	r3, [pc, #552]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	2380      	movs	r3, #128	; 0x80
 80022f6:	029b      	lsls	r3, r3, #10
 80022f8:	4013      	ands	r3, r2
 80022fa:	d0f0      	beq.n	80022de <HAL_RCC_OscConfig+0xee>
 80022fc:	e015      	b.n	800232a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fe:	f7fe ff25 	bl	800114c <HAL_GetTick>
 8002302:	0003      	movs	r3, r0
 8002304:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002308:	f7fe ff20 	bl	800114c <HAL_GetTick>
 800230c:	0002      	movs	r2, r0
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b64      	cmp	r3, #100	; 0x64
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e275      	b.n	8002806 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800231a:	4b80      	ldr	r3, [pc, #512]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	2380      	movs	r3, #128	; 0x80
 8002320:	029b      	lsls	r3, r3, #10
 8002322:	4013      	ands	r3, r2
 8002324:	d1f0      	bne.n	8002308 <HAL_RCC_OscConfig+0x118>
 8002326:	e000      	b.n	800232a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002328:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2202      	movs	r2, #2
 8002330:	4013      	ands	r3, r2
 8002332:	d100      	bne.n	8002336 <HAL_RCC_OscConfig+0x146>
 8002334:	e069      	b.n	800240a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002336:	4b79      	ldr	r3, [pc, #484]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	220c      	movs	r2, #12
 800233c:	4013      	ands	r3, r2
 800233e:	d00b      	beq.n	8002358 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002340:	4b76      	ldr	r3, [pc, #472]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	220c      	movs	r2, #12
 8002346:	4013      	ands	r3, r2
 8002348:	2b08      	cmp	r3, #8
 800234a:	d11c      	bne.n	8002386 <HAL_RCC_OscConfig+0x196>
 800234c:	4b73      	ldr	r3, [pc, #460]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	2380      	movs	r3, #128	; 0x80
 8002352:	025b      	lsls	r3, r3, #9
 8002354:	4013      	ands	r3, r2
 8002356:	d116      	bne.n	8002386 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002358:	4b70      	ldr	r3, [pc, #448]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2202      	movs	r2, #2
 800235e:	4013      	ands	r3, r2
 8002360:	d005      	beq.n	800236e <HAL_RCC_OscConfig+0x17e>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d001      	beq.n	800236e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e24b      	b.n	8002806 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236e:	4b6b      	ldr	r3, [pc, #428]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	22f8      	movs	r2, #248	; 0xf8
 8002374:	4393      	bics	r3, r2
 8002376:	0019      	movs	r1, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	00da      	lsls	r2, r3, #3
 800237e:	4b67      	ldr	r3, [pc, #412]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 8002380:	430a      	orrs	r2, r1
 8002382:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002384:	e041      	b.n	800240a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d024      	beq.n	80023d8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800238e:	4b63      	ldr	r3, [pc, #396]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	4b62      	ldr	r3, [pc, #392]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 8002394:	2101      	movs	r1, #1
 8002396:	430a      	orrs	r2, r1
 8002398:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239a:	f7fe fed7 	bl	800114c <HAL_GetTick>
 800239e:	0003      	movs	r3, r0
 80023a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023a4:	f7fe fed2 	bl	800114c <HAL_GetTick>
 80023a8:	0002      	movs	r2, r0
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e227      	b.n	8002806 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b6:	4b59      	ldr	r3, [pc, #356]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2202      	movs	r2, #2
 80023bc:	4013      	ands	r3, r2
 80023be:	d0f1      	beq.n	80023a4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c0:	4b56      	ldr	r3, [pc, #344]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	22f8      	movs	r2, #248	; 0xf8
 80023c6:	4393      	bics	r3, r2
 80023c8:	0019      	movs	r1, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	00da      	lsls	r2, r3, #3
 80023d0:	4b52      	ldr	r3, [pc, #328]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 80023d2:	430a      	orrs	r2, r1
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	e018      	b.n	800240a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023d8:	4b50      	ldr	r3, [pc, #320]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	4b4f      	ldr	r3, [pc, #316]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 80023de:	2101      	movs	r1, #1
 80023e0:	438a      	bics	r2, r1
 80023e2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e4:	f7fe feb2 	bl	800114c <HAL_GetTick>
 80023e8:	0003      	movs	r3, r0
 80023ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ee:	f7fe fead 	bl	800114c <HAL_GetTick>
 80023f2:	0002      	movs	r2, r0
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e202      	b.n	8002806 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002400:	4b46      	ldr	r3, [pc, #280]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2202      	movs	r2, #2
 8002406:	4013      	ands	r3, r2
 8002408:	d1f1      	bne.n	80023ee <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2208      	movs	r2, #8
 8002410:	4013      	ands	r3, r2
 8002412:	d036      	beq.n	8002482 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d019      	beq.n	8002450 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800241c:	4b3f      	ldr	r3, [pc, #252]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 800241e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002420:	4b3e      	ldr	r3, [pc, #248]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 8002422:	2101      	movs	r1, #1
 8002424:	430a      	orrs	r2, r1
 8002426:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002428:	f7fe fe90 	bl	800114c <HAL_GetTick>
 800242c:	0003      	movs	r3, r0
 800242e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002432:	f7fe fe8b 	bl	800114c <HAL_GetTick>
 8002436:	0002      	movs	r2, r0
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e1e0      	b.n	8002806 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002444:	4b35      	ldr	r3, [pc, #212]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	2202      	movs	r2, #2
 800244a:	4013      	ands	r3, r2
 800244c:	d0f1      	beq.n	8002432 <HAL_RCC_OscConfig+0x242>
 800244e:	e018      	b.n	8002482 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002450:	4b32      	ldr	r3, [pc, #200]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 8002452:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002454:	4b31      	ldr	r3, [pc, #196]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 8002456:	2101      	movs	r1, #1
 8002458:	438a      	bics	r2, r1
 800245a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800245c:	f7fe fe76 	bl	800114c <HAL_GetTick>
 8002460:	0003      	movs	r3, r0
 8002462:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002466:	f7fe fe71 	bl	800114c <HAL_GetTick>
 800246a:	0002      	movs	r2, r0
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e1c6      	b.n	8002806 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002478:	4b28      	ldr	r3, [pc, #160]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	2202      	movs	r2, #2
 800247e:	4013      	ands	r3, r2
 8002480:	d1f1      	bne.n	8002466 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2204      	movs	r2, #4
 8002488:	4013      	ands	r3, r2
 800248a:	d100      	bne.n	800248e <HAL_RCC_OscConfig+0x29e>
 800248c:	e0b4      	b.n	80025f8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800248e:	201f      	movs	r0, #31
 8002490:	183b      	adds	r3, r7, r0
 8002492:	2200      	movs	r2, #0
 8002494:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002496:	4b21      	ldr	r3, [pc, #132]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 8002498:	69da      	ldr	r2, [r3, #28]
 800249a:	2380      	movs	r3, #128	; 0x80
 800249c:	055b      	lsls	r3, r3, #21
 800249e:	4013      	ands	r3, r2
 80024a0:	d110      	bne.n	80024c4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a2:	4b1e      	ldr	r3, [pc, #120]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 80024a4:	69da      	ldr	r2, [r3, #28]
 80024a6:	4b1d      	ldr	r3, [pc, #116]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 80024a8:	2180      	movs	r1, #128	; 0x80
 80024aa:	0549      	lsls	r1, r1, #21
 80024ac:	430a      	orrs	r2, r1
 80024ae:	61da      	str	r2, [r3, #28]
 80024b0:	4b1a      	ldr	r3, [pc, #104]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 80024b2:	69da      	ldr	r2, [r3, #28]
 80024b4:	2380      	movs	r3, #128	; 0x80
 80024b6:	055b      	lsls	r3, r3, #21
 80024b8:	4013      	ands	r3, r2
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80024be:	183b      	adds	r3, r7, r0
 80024c0:	2201      	movs	r2, #1
 80024c2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c4:	4b18      	ldr	r3, [pc, #96]	; (8002528 <HAL_RCC_OscConfig+0x338>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	2380      	movs	r3, #128	; 0x80
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	4013      	ands	r3, r2
 80024ce:	d11a      	bne.n	8002506 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024d0:	4b15      	ldr	r3, [pc, #84]	; (8002528 <HAL_RCC_OscConfig+0x338>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4b14      	ldr	r3, [pc, #80]	; (8002528 <HAL_RCC_OscConfig+0x338>)
 80024d6:	2180      	movs	r1, #128	; 0x80
 80024d8:	0049      	lsls	r1, r1, #1
 80024da:	430a      	orrs	r2, r1
 80024dc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024de:	f7fe fe35 	bl	800114c <HAL_GetTick>
 80024e2:	0003      	movs	r3, r0
 80024e4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e8:	f7fe fe30 	bl	800114c <HAL_GetTick>
 80024ec:	0002      	movs	r2, r0
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b64      	cmp	r3, #100	; 0x64
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e185      	b.n	8002806 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fa:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <HAL_RCC_OscConfig+0x338>)
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	2380      	movs	r3, #128	; 0x80
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	4013      	ands	r3, r2
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d10e      	bne.n	800252c <HAL_RCC_OscConfig+0x33c>
 800250e:	4b03      	ldr	r3, [pc, #12]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 8002510:	6a1a      	ldr	r2, [r3, #32]
 8002512:	4b02      	ldr	r3, [pc, #8]	; (800251c <HAL_RCC_OscConfig+0x32c>)
 8002514:	2101      	movs	r1, #1
 8002516:	430a      	orrs	r2, r1
 8002518:	621a      	str	r2, [r3, #32]
 800251a:	e035      	b.n	8002588 <HAL_RCC_OscConfig+0x398>
 800251c:	40021000 	.word	0x40021000
 8002520:	fffeffff 	.word	0xfffeffff
 8002524:	fffbffff 	.word	0xfffbffff
 8002528:	40007000 	.word	0x40007000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10c      	bne.n	800254e <HAL_RCC_OscConfig+0x35e>
 8002534:	4bb6      	ldr	r3, [pc, #728]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 8002536:	6a1a      	ldr	r2, [r3, #32]
 8002538:	4bb5      	ldr	r3, [pc, #724]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 800253a:	2101      	movs	r1, #1
 800253c:	438a      	bics	r2, r1
 800253e:	621a      	str	r2, [r3, #32]
 8002540:	4bb3      	ldr	r3, [pc, #716]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 8002542:	6a1a      	ldr	r2, [r3, #32]
 8002544:	4bb2      	ldr	r3, [pc, #712]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 8002546:	2104      	movs	r1, #4
 8002548:	438a      	bics	r2, r1
 800254a:	621a      	str	r2, [r3, #32]
 800254c:	e01c      	b.n	8002588 <HAL_RCC_OscConfig+0x398>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	2b05      	cmp	r3, #5
 8002554:	d10c      	bne.n	8002570 <HAL_RCC_OscConfig+0x380>
 8002556:	4bae      	ldr	r3, [pc, #696]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 8002558:	6a1a      	ldr	r2, [r3, #32]
 800255a:	4bad      	ldr	r3, [pc, #692]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 800255c:	2104      	movs	r1, #4
 800255e:	430a      	orrs	r2, r1
 8002560:	621a      	str	r2, [r3, #32]
 8002562:	4bab      	ldr	r3, [pc, #684]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 8002564:	6a1a      	ldr	r2, [r3, #32]
 8002566:	4baa      	ldr	r3, [pc, #680]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 8002568:	2101      	movs	r1, #1
 800256a:	430a      	orrs	r2, r1
 800256c:	621a      	str	r2, [r3, #32]
 800256e:	e00b      	b.n	8002588 <HAL_RCC_OscConfig+0x398>
 8002570:	4ba7      	ldr	r3, [pc, #668]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 8002572:	6a1a      	ldr	r2, [r3, #32]
 8002574:	4ba6      	ldr	r3, [pc, #664]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 8002576:	2101      	movs	r1, #1
 8002578:	438a      	bics	r2, r1
 800257a:	621a      	str	r2, [r3, #32]
 800257c:	4ba4      	ldr	r3, [pc, #656]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 800257e:	6a1a      	ldr	r2, [r3, #32]
 8002580:	4ba3      	ldr	r3, [pc, #652]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 8002582:	2104      	movs	r1, #4
 8002584:	438a      	bics	r2, r1
 8002586:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d014      	beq.n	80025ba <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002590:	f7fe fddc 	bl	800114c <HAL_GetTick>
 8002594:	0003      	movs	r3, r0
 8002596:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002598:	e009      	b.n	80025ae <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800259a:	f7fe fdd7 	bl	800114c <HAL_GetTick>
 800259e:	0002      	movs	r2, r0
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	4a9b      	ldr	r2, [pc, #620]	; (8002814 <HAL_RCC_OscConfig+0x624>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e12b      	b.n	8002806 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ae:	4b98      	ldr	r3, [pc, #608]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	2202      	movs	r2, #2
 80025b4:	4013      	ands	r3, r2
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0x3aa>
 80025b8:	e013      	b.n	80025e2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ba:	f7fe fdc7 	bl	800114c <HAL_GetTick>
 80025be:	0003      	movs	r3, r0
 80025c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c2:	e009      	b.n	80025d8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025c4:	f7fe fdc2 	bl	800114c <HAL_GetTick>
 80025c8:	0002      	movs	r2, r0
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	4a91      	ldr	r2, [pc, #580]	; (8002814 <HAL_RCC_OscConfig+0x624>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e116      	b.n	8002806 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d8:	4b8d      	ldr	r3, [pc, #564]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	2202      	movs	r2, #2
 80025de:	4013      	ands	r3, r2
 80025e0:	d1f0      	bne.n	80025c4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025e2:	231f      	movs	r3, #31
 80025e4:	18fb      	adds	r3, r7, r3
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d105      	bne.n	80025f8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ec:	4b88      	ldr	r3, [pc, #544]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 80025ee:	69da      	ldr	r2, [r3, #28]
 80025f0:	4b87      	ldr	r3, [pc, #540]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 80025f2:	4989      	ldr	r1, [pc, #548]	; (8002818 <HAL_RCC_OscConfig+0x628>)
 80025f4:	400a      	ands	r2, r1
 80025f6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2210      	movs	r2, #16
 80025fe:	4013      	ands	r3, r2
 8002600:	d063      	beq.n	80026ca <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d12a      	bne.n	8002660 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800260a:	4b81      	ldr	r3, [pc, #516]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 800260c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800260e:	4b80      	ldr	r3, [pc, #512]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 8002610:	2104      	movs	r1, #4
 8002612:	430a      	orrs	r2, r1
 8002614:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002616:	4b7e      	ldr	r3, [pc, #504]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 8002618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800261a:	4b7d      	ldr	r3, [pc, #500]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 800261c:	2101      	movs	r1, #1
 800261e:	430a      	orrs	r2, r1
 8002620:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002622:	f7fe fd93 	bl	800114c <HAL_GetTick>
 8002626:	0003      	movs	r3, r0
 8002628:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800262c:	f7fe fd8e 	bl	800114c <HAL_GetTick>
 8002630:	0002      	movs	r2, r0
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e0e3      	b.n	8002806 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800263e:	4b74      	ldr	r3, [pc, #464]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 8002640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002642:	2202      	movs	r2, #2
 8002644:	4013      	ands	r3, r2
 8002646:	d0f1      	beq.n	800262c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002648:	4b71      	ldr	r3, [pc, #452]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 800264a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800264c:	22f8      	movs	r2, #248	; 0xf8
 800264e:	4393      	bics	r3, r2
 8002650:	0019      	movs	r1, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	00da      	lsls	r2, r3, #3
 8002658:	4b6d      	ldr	r3, [pc, #436]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 800265a:	430a      	orrs	r2, r1
 800265c:	635a      	str	r2, [r3, #52]	; 0x34
 800265e:	e034      	b.n	80026ca <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	3305      	adds	r3, #5
 8002666:	d111      	bne.n	800268c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002668:	4b69      	ldr	r3, [pc, #420]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 800266a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800266c:	4b68      	ldr	r3, [pc, #416]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 800266e:	2104      	movs	r1, #4
 8002670:	438a      	bics	r2, r1
 8002672:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002674:	4b66      	ldr	r3, [pc, #408]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 8002676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002678:	22f8      	movs	r2, #248	; 0xf8
 800267a:	4393      	bics	r3, r2
 800267c:	0019      	movs	r1, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	00da      	lsls	r2, r3, #3
 8002684:	4b62      	ldr	r3, [pc, #392]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 8002686:	430a      	orrs	r2, r1
 8002688:	635a      	str	r2, [r3, #52]	; 0x34
 800268a:	e01e      	b.n	80026ca <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800268c:	4b60      	ldr	r3, [pc, #384]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 800268e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002690:	4b5f      	ldr	r3, [pc, #380]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 8002692:	2104      	movs	r1, #4
 8002694:	430a      	orrs	r2, r1
 8002696:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002698:	4b5d      	ldr	r3, [pc, #372]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 800269a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800269c:	4b5c      	ldr	r3, [pc, #368]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 800269e:	2101      	movs	r1, #1
 80026a0:	438a      	bics	r2, r1
 80026a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a4:	f7fe fd52 	bl	800114c <HAL_GetTick>
 80026a8:	0003      	movs	r3, r0
 80026aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80026ae:	f7fe fd4d 	bl	800114c <HAL_GetTick>
 80026b2:	0002      	movs	r2, r0
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e0a2      	b.n	8002806 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80026c0:	4b53      	ldr	r3, [pc, #332]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 80026c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c4:	2202      	movs	r2, #2
 80026c6:	4013      	ands	r3, r2
 80026c8:	d1f1      	bne.n	80026ae <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d100      	bne.n	80026d4 <HAL_RCC_OscConfig+0x4e4>
 80026d2:	e097      	b.n	8002804 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026d4:	4b4e      	ldr	r3, [pc, #312]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	220c      	movs	r2, #12
 80026da:	4013      	ands	r3, r2
 80026dc:	2b08      	cmp	r3, #8
 80026de:	d100      	bne.n	80026e2 <HAL_RCC_OscConfig+0x4f2>
 80026e0:	e06b      	b.n	80027ba <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d14c      	bne.n	8002784 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ea:	4b49      	ldr	r3, [pc, #292]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	4b48      	ldr	r3, [pc, #288]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 80026f0:	494a      	ldr	r1, [pc, #296]	; (800281c <HAL_RCC_OscConfig+0x62c>)
 80026f2:	400a      	ands	r2, r1
 80026f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f6:	f7fe fd29 	bl	800114c <HAL_GetTick>
 80026fa:	0003      	movs	r3, r0
 80026fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002700:	f7fe fd24 	bl	800114c <HAL_GetTick>
 8002704:	0002      	movs	r2, r0
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e079      	b.n	8002806 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002712:	4b3f      	ldr	r3, [pc, #252]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	2380      	movs	r3, #128	; 0x80
 8002718:	049b      	lsls	r3, r3, #18
 800271a:	4013      	ands	r3, r2
 800271c:	d1f0      	bne.n	8002700 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800271e:	4b3c      	ldr	r3, [pc, #240]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 8002720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002722:	220f      	movs	r2, #15
 8002724:	4393      	bics	r3, r2
 8002726:	0019      	movs	r1, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800272c:	4b38      	ldr	r3, [pc, #224]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 800272e:	430a      	orrs	r2, r1
 8002730:	62da      	str	r2, [r3, #44]	; 0x2c
 8002732:	4b37      	ldr	r3, [pc, #220]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	4a3a      	ldr	r2, [pc, #232]	; (8002820 <HAL_RCC_OscConfig+0x630>)
 8002738:	4013      	ands	r3, r2
 800273a:	0019      	movs	r1, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	431a      	orrs	r2, r3
 8002746:	4b32      	ldr	r3, [pc, #200]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 8002748:	430a      	orrs	r2, r1
 800274a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800274c:	4b30      	ldr	r3, [pc, #192]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4b2f      	ldr	r3, [pc, #188]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 8002752:	2180      	movs	r1, #128	; 0x80
 8002754:	0449      	lsls	r1, r1, #17
 8002756:	430a      	orrs	r2, r1
 8002758:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275a:	f7fe fcf7 	bl	800114c <HAL_GetTick>
 800275e:	0003      	movs	r3, r0
 8002760:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002764:	f7fe fcf2 	bl	800114c <HAL_GetTick>
 8002768:	0002      	movs	r2, r0
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e047      	b.n	8002806 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002776:	4b26      	ldr	r3, [pc, #152]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	2380      	movs	r3, #128	; 0x80
 800277c:	049b      	lsls	r3, r3, #18
 800277e:	4013      	ands	r3, r2
 8002780:	d0f0      	beq.n	8002764 <HAL_RCC_OscConfig+0x574>
 8002782:	e03f      	b.n	8002804 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002784:	4b22      	ldr	r3, [pc, #136]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4b21      	ldr	r3, [pc, #132]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 800278a:	4924      	ldr	r1, [pc, #144]	; (800281c <HAL_RCC_OscConfig+0x62c>)
 800278c:	400a      	ands	r2, r1
 800278e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002790:	f7fe fcdc 	bl	800114c <HAL_GetTick>
 8002794:	0003      	movs	r3, r0
 8002796:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800279a:	f7fe fcd7 	bl	800114c <HAL_GetTick>
 800279e:	0002      	movs	r2, r0
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e02c      	b.n	8002806 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ac:	4b18      	ldr	r3, [pc, #96]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	2380      	movs	r3, #128	; 0x80
 80027b2:	049b      	lsls	r3, r3, #18
 80027b4:	4013      	ands	r3, r2
 80027b6:	d1f0      	bne.n	800279a <HAL_RCC_OscConfig+0x5aa>
 80027b8:	e024      	b.n	8002804 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d101      	bne.n	80027c6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e01f      	b.n	8002806 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80027c6:	4b12      	ldr	r3, [pc, #72]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80027cc:	4b10      	ldr	r3, [pc, #64]	; (8002810 <HAL_RCC_OscConfig+0x620>)
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	2380      	movs	r3, #128	; 0x80
 80027d6:	025b      	lsls	r3, r3, #9
 80027d8:	401a      	ands	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	429a      	cmp	r2, r3
 80027e0:	d10e      	bne.n	8002800 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	220f      	movs	r2, #15
 80027e6:	401a      	ands	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d107      	bne.n	8002800 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	23f0      	movs	r3, #240	; 0xf0
 80027f4:	039b      	lsls	r3, r3, #14
 80027f6:	401a      	ands	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e000      	b.n	8002806 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	0018      	movs	r0, r3
 8002808:	46bd      	mov	sp, r7
 800280a:	b008      	add	sp, #32
 800280c:	bd80      	pop	{r7, pc}
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	40021000 	.word	0x40021000
 8002814:	00001388 	.word	0x00001388
 8002818:	efffffff 	.word	0xefffffff
 800281c:	feffffff 	.word	0xfeffffff
 8002820:	ffc2ffff 	.word	0xffc2ffff

08002824 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e0b3      	b.n	80029a0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002838:	4b5b      	ldr	r3, [pc, #364]	; (80029a8 <HAL_RCC_ClockConfig+0x184>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2201      	movs	r2, #1
 800283e:	4013      	ands	r3, r2
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d911      	bls.n	800286a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002846:	4b58      	ldr	r3, [pc, #352]	; (80029a8 <HAL_RCC_ClockConfig+0x184>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2201      	movs	r2, #1
 800284c:	4393      	bics	r3, r2
 800284e:	0019      	movs	r1, r3
 8002850:	4b55      	ldr	r3, [pc, #340]	; (80029a8 <HAL_RCC_ClockConfig+0x184>)
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002858:	4b53      	ldr	r3, [pc, #332]	; (80029a8 <HAL_RCC_ClockConfig+0x184>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2201      	movs	r2, #1
 800285e:	4013      	ands	r3, r2
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d001      	beq.n	800286a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e09a      	b.n	80029a0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2202      	movs	r2, #2
 8002870:	4013      	ands	r3, r2
 8002872:	d015      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2204      	movs	r2, #4
 800287a:	4013      	ands	r3, r2
 800287c:	d006      	beq.n	800288c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800287e:	4b4b      	ldr	r3, [pc, #300]	; (80029ac <HAL_RCC_ClockConfig+0x188>)
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	4b4a      	ldr	r3, [pc, #296]	; (80029ac <HAL_RCC_ClockConfig+0x188>)
 8002884:	21e0      	movs	r1, #224	; 0xe0
 8002886:	00c9      	lsls	r1, r1, #3
 8002888:	430a      	orrs	r2, r1
 800288a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800288c:	4b47      	ldr	r3, [pc, #284]	; (80029ac <HAL_RCC_ClockConfig+0x188>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	22f0      	movs	r2, #240	; 0xf0
 8002892:	4393      	bics	r3, r2
 8002894:	0019      	movs	r1, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	4b44      	ldr	r3, [pc, #272]	; (80029ac <HAL_RCC_ClockConfig+0x188>)
 800289c:	430a      	orrs	r2, r1
 800289e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2201      	movs	r2, #1
 80028a6:	4013      	ands	r3, r2
 80028a8:	d040      	beq.n	800292c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d107      	bne.n	80028c2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b2:	4b3e      	ldr	r3, [pc, #248]	; (80029ac <HAL_RCC_ClockConfig+0x188>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	2380      	movs	r3, #128	; 0x80
 80028b8:	029b      	lsls	r3, r3, #10
 80028ba:	4013      	ands	r3, r2
 80028bc:	d114      	bne.n	80028e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e06e      	b.n	80029a0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d107      	bne.n	80028da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ca:	4b38      	ldr	r3, [pc, #224]	; (80029ac <HAL_RCC_ClockConfig+0x188>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	2380      	movs	r3, #128	; 0x80
 80028d0:	049b      	lsls	r3, r3, #18
 80028d2:	4013      	ands	r3, r2
 80028d4:	d108      	bne.n	80028e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e062      	b.n	80029a0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028da:	4b34      	ldr	r3, [pc, #208]	; (80029ac <HAL_RCC_ClockConfig+0x188>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2202      	movs	r2, #2
 80028e0:	4013      	ands	r3, r2
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e05b      	b.n	80029a0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028e8:	4b30      	ldr	r3, [pc, #192]	; (80029ac <HAL_RCC_ClockConfig+0x188>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2203      	movs	r2, #3
 80028ee:	4393      	bics	r3, r2
 80028f0:	0019      	movs	r1, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	4b2d      	ldr	r3, [pc, #180]	; (80029ac <HAL_RCC_ClockConfig+0x188>)
 80028f8:	430a      	orrs	r2, r1
 80028fa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028fc:	f7fe fc26 	bl	800114c <HAL_GetTick>
 8002900:	0003      	movs	r3, r0
 8002902:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002904:	e009      	b.n	800291a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002906:	f7fe fc21 	bl	800114c <HAL_GetTick>
 800290a:	0002      	movs	r2, r0
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	4a27      	ldr	r2, [pc, #156]	; (80029b0 <HAL_RCC_ClockConfig+0x18c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d901      	bls.n	800291a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e042      	b.n	80029a0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291a:	4b24      	ldr	r3, [pc, #144]	; (80029ac <HAL_RCC_ClockConfig+0x188>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	220c      	movs	r2, #12
 8002920:	401a      	ands	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	429a      	cmp	r2, r3
 800292a:	d1ec      	bne.n	8002906 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800292c:	4b1e      	ldr	r3, [pc, #120]	; (80029a8 <HAL_RCC_ClockConfig+0x184>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2201      	movs	r2, #1
 8002932:	4013      	ands	r3, r2
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	429a      	cmp	r2, r3
 8002938:	d211      	bcs.n	800295e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293a:	4b1b      	ldr	r3, [pc, #108]	; (80029a8 <HAL_RCC_ClockConfig+0x184>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2201      	movs	r2, #1
 8002940:	4393      	bics	r3, r2
 8002942:	0019      	movs	r1, r3
 8002944:	4b18      	ldr	r3, [pc, #96]	; (80029a8 <HAL_RCC_ClockConfig+0x184>)
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800294c:	4b16      	ldr	r3, [pc, #88]	; (80029a8 <HAL_RCC_ClockConfig+0x184>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2201      	movs	r2, #1
 8002952:	4013      	ands	r3, r2
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d001      	beq.n	800295e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e020      	b.n	80029a0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2204      	movs	r2, #4
 8002964:	4013      	ands	r3, r2
 8002966:	d009      	beq.n	800297c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002968:	4b10      	ldr	r3, [pc, #64]	; (80029ac <HAL_RCC_ClockConfig+0x188>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	4a11      	ldr	r2, [pc, #68]	; (80029b4 <HAL_RCC_ClockConfig+0x190>)
 800296e:	4013      	ands	r3, r2
 8002970:	0019      	movs	r1, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	4b0d      	ldr	r3, [pc, #52]	; (80029ac <HAL_RCC_ClockConfig+0x188>)
 8002978:	430a      	orrs	r2, r1
 800297a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800297c:	f000 f820 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 8002980:	0001      	movs	r1, r0
 8002982:	4b0a      	ldr	r3, [pc, #40]	; (80029ac <HAL_RCC_ClockConfig+0x188>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	091b      	lsrs	r3, r3, #4
 8002988:	220f      	movs	r2, #15
 800298a:	4013      	ands	r3, r2
 800298c:	4a0a      	ldr	r2, [pc, #40]	; (80029b8 <HAL_RCC_ClockConfig+0x194>)
 800298e:	5cd3      	ldrb	r3, [r2, r3]
 8002990:	000a      	movs	r2, r1
 8002992:	40da      	lsrs	r2, r3
 8002994:	4b09      	ldr	r3, [pc, #36]	; (80029bc <HAL_RCC_ClockConfig+0x198>)
 8002996:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002998:	2000      	movs	r0, #0
 800299a:	f7fe fb91 	bl	80010c0 <HAL_InitTick>
  
  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	0018      	movs	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	b004      	add	sp, #16
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40022000 	.word	0x40022000
 80029ac:	40021000 	.word	0x40021000
 80029b0:	00001388 	.word	0x00001388
 80029b4:	fffff8ff 	.word	0xfffff8ff
 80029b8:	08002d14 	.word	0x08002d14
 80029bc:	20000000 	.word	0x20000000

080029c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029c0:	b590      	push	{r4, r7, lr}
 80029c2:	b08f      	sub	sp, #60	; 0x3c
 80029c4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80029c6:	2314      	movs	r3, #20
 80029c8:	18fb      	adds	r3, r7, r3
 80029ca:	4a2b      	ldr	r2, [pc, #172]	; (8002a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80029ce:	c313      	stmia	r3!, {r0, r1, r4}
 80029d0:	6812      	ldr	r2, [r2, #0]
 80029d2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80029d4:	1d3b      	adds	r3, r7, #4
 80029d6:	4a29      	ldr	r2, [pc, #164]	; (8002a7c <HAL_RCC_GetSysClockFreq+0xbc>)
 80029d8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80029da:	c313      	stmia	r3!, {r0, r1, r4}
 80029dc:	6812      	ldr	r2, [r2, #0]
 80029de:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029e0:	2300      	movs	r3, #0
 80029e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029e4:	2300      	movs	r3, #0
 80029e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80029e8:	2300      	movs	r3, #0
 80029ea:	637b      	str	r3, [r7, #52]	; 0x34
 80029ec:	2300      	movs	r3, #0
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80029f4:	4b22      	ldr	r3, [pc, #136]	; (8002a80 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fc:	220c      	movs	r2, #12
 80029fe:	4013      	ands	r3, r2
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d002      	beq.n	8002a0a <HAL_RCC_GetSysClockFreq+0x4a>
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d003      	beq.n	8002a10 <HAL_RCC_GetSysClockFreq+0x50>
 8002a08:	e02d      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a0a:	4b1e      	ldr	r3, [pc, #120]	; (8002a84 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a0c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a0e:	e02d      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a12:	0c9b      	lsrs	r3, r3, #18
 8002a14:	220f      	movs	r2, #15
 8002a16:	4013      	ands	r3, r2
 8002a18:	2214      	movs	r2, #20
 8002a1a:	18ba      	adds	r2, r7, r2
 8002a1c:	5cd3      	ldrb	r3, [r2, r3]
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002a20:	4b17      	ldr	r3, [pc, #92]	; (8002a80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a24:	220f      	movs	r2, #15
 8002a26:	4013      	ands	r3, r2
 8002a28:	1d3a      	adds	r2, r7, #4
 8002a2a:	5cd3      	ldrb	r3, [r2, r3]
 8002a2c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002a2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a30:	2380      	movs	r3, #128	; 0x80
 8002a32:	025b      	lsls	r3, r3, #9
 8002a34:	4013      	ands	r3, r2
 8002a36:	d009      	beq.n	8002a4c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a3a:	4812      	ldr	r0, [pc, #72]	; (8002a84 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a3c:	f7fd fb64 	bl	8000108 <__udivsi3>
 8002a40:	0003      	movs	r3, r0
 8002a42:	001a      	movs	r2, r3
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	4353      	muls	r3, r2
 8002a48:	637b      	str	r3, [r7, #52]	; 0x34
 8002a4a:	e009      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002a4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a4e:	000a      	movs	r2, r1
 8002a50:	0152      	lsls	r2, r2, #5
 8002a52:	1a52      	subs	r2, r2, r1
 8002a54:	0193      	lsls	r3, r2, #6
 8002a56:	1a9b      	subs	r3, r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	185b      	adds	r3, r3, r1
 8002a5c:	021b      	lsls	r3, r3, #8
 8002a5e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a62:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a64:	e002      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a66:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a68:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a6a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002a6e:	0018      	movs	r0, r3
 8002a70:	46bd      	mov	sp, r7
 8002a72:	b00f      	add	sp, #60	; 0x3c
 8002a74:	bd90      	pop	{r4, r7, pc}
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	08002cb4 	.word	0x08002cb4
 8002a7c:	08002cc4 	.word	0x08002cc4
 8002a80:	40021000 	.word	0x40021000
 8002a84:	007a1200 	.word	0x007a1200

08002a88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	2380      	movs	r3, #128	; 0x80
 8002a9e:	025b      	lsls	r3, r3, #9
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d100      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002aa4:	e08e      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002aa6:	2017      	movs	r0, #23
 8002aa8:	183b      	adds	r3, r7, r0
 8002aaa:	2200      	movs	r2, #0
 8002aac:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aae:	4b5f      	ldr	r3, [pc, #380]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ab0:	69da      	ldr	r2, [r3, #28]
 8002ab2:	2380      	movs	r3, #128	; 0x80
 8002ab4:	055b      	lsls	r3, r3, #21
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	d110      	bne.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002aba:	4b5c      	ldr	r3, [pc, #368]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002abc:	69da      	ldr	r2, [r3, #28]
 8002abe:	4b5b      	ldr	r3, [pc, #364]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ac0:	2180      	movs	r1, #128	; 0x80
 8002ac2:	0549      	lsls	r1, r1, #21
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	61da      	str	r2, [r3, #28]
 8002ac8:	4b58      	ldr	r3, [pc, #352]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002aca:	69da      	ldr	r2, [r3, #28]
 8002acc:	2380      	movs	r3, #128	; 0x80
 8002ace:	055b      	lsls	r3, r3, #21
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	60bb      	str	r3, [r7, #8]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ad6:	183b      	adds	r3, r7, r0
 8002ad8:	2201      	movs	r2, #1
 8002ada:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002adc:	4b54      	ldr	r3, [pc, #336]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	2380      	movs	r3, #128	; 0x80
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d11a      	bne.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ae8:	4b51      	ldr	r3, [pc, #324]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	4b50      	ldr	r3, [pc, #320]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002aee:	2180      	movs	r1, #128	; 0x80
 8002af0:	0049      	lsls	r1, r1, #1
 8002af2:	430a      	orrs	r2, r1
 8002af4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002af6:	f7fe fb29 	bl	800114c <HAL_GetTick>
 8002afa:	0003      	movs	r3, r0
 8002afc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afe:	e008      	b.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b00:	f7fe fb24 	bl	800114c <HAL_GetTick>
 8002b04:	0002      	movs	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b64      	cmp	r3, #100	; 0x64
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e087      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b12:	4b47      	ldr	r3, [pc, #284]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	2380      	movs	r3, #128	; 0x80
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d0f0      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b1e:	4b43      	ldr	r3, [pc, #268]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b20:	6a1a      	ldr	r2, [r3, #32]
 8002b22:	23c0      	movs	r3, #192	; 0xc0
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4013      	ands	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d034      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	23c0      	movs	r3, #192	; 0xc0
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4013      	ands	r3, r2
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d02c      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b40:	4b3a      	ldr	r3, [pc, #232]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	4a3b      	ldr	r2, [pc, #236]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b4a:	4b38      	ldr	r3, [pc, #224]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b4c:	6a1a      	ldr	r2, [r3, #32]
 8002b4e:	4b37      	ldr	r3, [pc, #220]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b50:	2180      	movs	r1, #128	; 0x80
 8002b52:	0249      	lsls	r1, r1, #9
 8002b54:	430a      	orrs	r2, r1
 8002b56:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b58:	4b34      	ldr	r3, [pc, #208]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b5a:	6a1a      	ldr	r2, [r3, #32]
 8002b5c:	4b33      	ldr	r3, [pc, #204]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b5e:	4936      	ldr	r1, [pc, #216]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b60:	400a      	ands	r2, r1
 8002b62:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b64:	4b31      	ldr	r3, [pc, #196]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d013      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b72:	f7fe faeb 	bl	800114c <HAL_GetTick>
 8002b76:	0003      	movs	r3, r0
 8002b78:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b7a:	e009      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b7c:	f7fe fae6 	bl	800114c <HAL_GetTick>
 8002b80:	0002      	movs	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	4a2d      	ldr	r2, [pc, #180]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e048      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b90:	4b26      	ldr	r3, [pc, #152]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	2202      	movs	r2, #2
 8002b96:	4013      	ands	r3, r2
 8002b98:	d0f0      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b9a:	4b24      	ldr	r3, [pc, #144]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	4a25      	ldr	r2, [pc, #148]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	0019      	movs	r1, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	4b20      	ldr	r3, [pc, #128]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002baa:	430a      	orrs	r2, r1
 8002bac:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bae:	2317      	movs	r3, #23
 8002bb0:	18fb      	adds	r3, r7, r3
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d105      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb8:	4b1c      	ldr	r3, [pc, #112]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002bba:	69da      	ldr	r2, [r3, #28]
 8002bbc:	4b1b      	ldr	r3, [pc, #108]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002bbe:	4920      	ldr	r1, [pc, #128]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002bc0:	400a      	ands	r2, r1
 8002bc2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d009      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bce:	4b17      	ldr	r3, [pc, #92]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	4393      	bics	r3, r2
 8002bd6:	0019      	movs	r1, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	4b13      	ldr	r3, [pc, #76]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002bde:	430a      	orrs	r2, r1
 8002be0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2220      	movs	r2, #32
 8002be8:	4013      	ands	r3, r2
 8002bea:	d009      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bec:	4b0f      	ldr	r3, [pc, #60]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf0:	2210      	movs	r2, #16
 8002bf2:	4393      	bics	r3, r2
 8002bf4:	0019      	movs	r1, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	2380      	movs	r3, #128	; 0x80
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	4013      	ands	r3, r2
 8002c0a:	d009      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c0c:	4b07      	ldr	r3, [pc, #28]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	2240      	movs	r2, #64	; 0x40
 8002c12:	4393      	bics	r3, r2
 8002c14:	0019      	movs	r1, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691a      	ldr	r2, [r3, #16]
 8002c1a:	4b04      	ldr	r3, [pc, #16]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	0018      	movs	r0, r3
 8002c24:	46bd      	mov	sp, r7
 8002c26:	b006      	add	sp, #24
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	40007000 	.word	0x40007000
 8002c34:	fffffcff 	.word	0xfffffcff
 8002c38:	fffeffff 	.word	0xfffeffff
 8002c3c:	00001388 	.word	0x00001388
 8002c40:	efffffff 	.word	0xefffffff

08002c44 <__libc_init_array>:
 8002c44:	b570      	push	{r4, r5, r6, lr}
 8002c46:	2600      	movs	r6, #0
 8002c48:	4d0c      	ldr	r5, [pc, #48]	; (8002c7c <__libc_init_array+0x38>)
 8002c4a:	4c0d      	ldr	r4, [pc, #52]	; (8002c80 <__libc_init_array+0x3c>)
 8002c4c:	1b64      	subs	r4, r4, r5
 8002c4e:	10a4      	asrs	r4, r4, #2
 8002c50:	42a6      	cmp	r6, r4
 8002c52:	d109      	bne.n	8002c68 <__libc_init_array+0x24>
 8002c54:	2600      	movs	r6, #0
 8002c56:	f000 f821 	bl	8002c9c <_init>
 8002c5a:	4d0a      	ldr	r5, [pc, #40]	; (8002c84 <__libc_init_array+0x40>)
 8002c5c:	4c0a      	ldr	r4, [pc, #40]	; (8002c88 <__libc_init_array+0x44>)
 8002c5e:	1b64      	subs	r4, r4, r5
 8002c60:	10a4      	asrs	r4, r4, #2
 8002c62:	42a6      	cmp	r6, r4
 8002c64:	d105      	bne.n	8002c72 <__libc_init_array+0x2e>
 8002c66:	bd70      	pop	{r4, r5, r6, pc}
 8002c68:	00b3      	lsls	r3, r6, #2
 8002c6a:	58eb      	ldr	r3, [r5, r3]
 8002c6c:	4798      	blx	r3
 8002c6e:	3601      	adds	r6, #1
 8002c70:	e7ee      	b.n	8002c50 <__libc_init_array+0xc>
 8002c72:	00b3      	lsls	r3, r6, #2
 8002c74:	58eb      	ldr	r3, [r5, r3]
 8002c76:	4798      	blx	r3
 8002c78:	3601      	adds	r6, #1
 8002c7a:	e7f2      	b.n	8002c62 <__libc_init_array+0x1e>
 8002c7c:	08002d24 	.word	0x08002d24
 8002c80:	08002d24 	.word	0x08002d24
 8002c84:	08002d24 	.word	0x08002d24
 8002c88:	08002d28 	.word	0x08002d28

08002c8c <memset>:
 8002c8c:	0003      	movs	r3, r0
 8002c8e:	1882      	adds	r2, r0, r2
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d100      	bne.n	8002c96 <memset+0xa>
 8002c94:	4770      	bx	lr
 8002c96:	7019      	strb	r1, [r3, #0]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	e7f9      	b.n	8002c90 <memset+0x4>

08002c9c <_init>:
 8002c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ca2:	bc08      	pop	{r3}
 8002ca4:	469e      	mov	lr, r3
 8002ca6:	4770      	bx	lr

08002ca8 <_fini>:
 8002ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cae:	bc08      	pop	{r3}
 8002cb0:	469e      	mov	lr, r3
 8002cb2:	4770      	bx	lr
