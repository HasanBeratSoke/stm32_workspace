
GY-521.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030f8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080031b8  080031b8  000131b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003268  08003268  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003268  08003268  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003268  08003268  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003268  08003268  00013268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800326c  0800326c  0001326c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003270  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  2000000c  0800327c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  0800327c  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000064bb  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001433  00000000  00000000  000264ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000690  00000000  00000000  00027928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005d8  00000000  00000000  00027fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000105e7  00000000  00000000  00028590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008b43  00000000  00000000  00038b77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00061713  00000000  00000000  000416ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a2dcd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001704  00000000  00000000  000a2e20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080031a0 	.word	0x080031a0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080031a0 	.word	0x080031a0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_ddiv>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	4657      	mov	r7, sl
 8000224:	464e      	mov	r6, r9
 8000226:	4645      	mov	r5, r8
 8000228:	46de      	mov	lr, fp
 800022a:	b5e0      	push	{r5, r6, r7, lr}
 800022c:	4681      	mov	r9, r0
 800022e:	0005      	movs	r5, r0
 8000230:	030c      	lsls	r4, r1, #12
 8000232:	0048      	lsls	r0, r1, #1
 8000234:	4692      	mov	sl, r2
 8000236:	001f      	movs	r7, r3
 8000238:	b085      	sub	sp, #20
 800023a:	0b24      	lsrs	r4, r4, #12
 800023c:	0d40      	lsrs	r0, r0, #21
 800023e:	0fce      	lsrs	r6, r1, #31
 8000240:	2800      	cmp	r0, #0
 8000242:	d100      	bne.n	8000246 <__aeabi_ddiv+0x26>
 8000244:	e156      	b.n	80004f4 <__aeabi_ddiv+0x2d4>
 8000246:	4bd4      	ldr	r3, [pc, #848]	; (8000598 <__aeabi_ddiv+0x378>)
 8000248:	4298      	cmp	r0, r3
 800024a:	d100      	bne.n	800024e <__aeabi_ddiv+0x2e>
 800024c:	e172      	b.n	8000534 <__aeabi_ddiv+0x314>
 800024e:	0f6b      	lsrs	r3, r5, #29
 8000250:	00e4      	lsls	r4, r4, #3
 8000252:	431c      	orrs	r4, r3
 8000254:	2380      	movs	r3, #128	; 0x80
 8000256:	041b      	lsls	r3, r3, #16
 8000258:	4323      	orrs	r3, r4
 800025a:	4698      	mov	r8, r3
 800025c:	4bcf      	ldr	r3, [pc, #828]	; (800059c <__aeabi_ddiv+0x37c>)
 800025e:	00ed      	lsls	r5, r5, #3
 8000260:	469b      	mov	fp, r3
 8000262:	2300      	movs	r3, #0
 8000264:	4699      	mov	r9, r3
 8000266:	4483      	add	fp, r0
 8000268:	9300      	str	r3, [sp, #0]
 800026a:	033c      	lsls	r4, r7, #12
 800026c:	007b      	lsls	r3, r7, #1
 800026e:	4650      	mov	r0, sl
 8000270:	0b24      	lsrs	r4, r4, #12
 8000272:	0d5b      	lsrs	r3, r3, #21
 8000274:	0fff      	lsrs	r7, r7, #31
 8000276:	2b00      	cmp	r3, #0
 8000278:	d100      	bne.n	800027c <__aeabi_ddiv+0x5c>
 800027a:	e11f      	b.n	80004bc <__aeabi_ddiv+0x29c>
 800027c:	4ac6      	ldr	r2, [pc, #792]	; (8000598 <__aeabi_ddiv+0x378>)
 800027e:	4293      	cmp	r3, r2
 8000280:	d100      	bne.n	8000284 <__aeabi_ddiv+0x64>
 8000282:	e162      	b.n	800054a <__aeabi_ddiv+0x32a>
 8000284:	49c5      	ldr	r1, [pc, #788]	; (800059c <__aeabi_ddiv+0x37c>)
 8000286:	0f42      	lsrs	r2, r0, #29
 8000288:	468c      	mov	ip, r1
 800028a:	00e4      	lsls	r4, r4, #3
 800028c:	4659      	mov	r1, fp
 800028e:	4314      	orrs	r4, r2
 8000290:	2280      	movs	r2, #128	; 0x80
 8000292:	4463      	add	r3, ip
 8000294:	0412      	lsls	r2, r2, #16
 8000296:	1acb      	subs	r3, r1, r3
 8000298:	4314      	orrs	r4, r2
 800029a:	469b      	mov	fp, r3
 800029c:	00c2      	lsls	r2, r0, #3
 800029e:	2000      	movs	r0, #0
 80002a0:	0033      	movs	r3, r6
 80002a2:	407b      	eors	r3, r7
 80002a4:	469a      	mov	sl, r3
 80002a6:	464b      	mov	r3, r9
 80002a8:	2b0f      	cmp	r3, #15
 80002aa:	d827      	bhi.n	80002fc <__aeabi_ddiv+0xdc>
 80002ac:	49bc      	ldr	r1, [pc, #752]	; (80005a0 <__aeabi_ddiv+0x380>)
 80002ae:	009b      	lsls	r3, r3, #2
 80002b0:	58cb      	ldr	r3, [r1, r3]
 80002b2:	469f      	mov	pc, r3
 80002b4:	46b2      	mov	sl, r6
 80002b6:	9b00      	ldr	r3, [sp, #0]
 80002b8:	2b02      	cmp	r3, #2
 80002ba:	d016      	beq.n	80002ea <__aeabi_ddiv+0xca>
 80002bc:	2b03      	cmp	r3, #3
 80002be:	d100      	bne.n	80002c2 <__aeabi_ddiv+0xa2>
 80002c0:	e28e      	b.n	80007e0 <__aeabi_ddiv+0x5c0>
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	d000      	beq.n	80002c8 <__aeabi_ddiv+0xa8>
 80002c6:	e0d9      	b.n	800047c <__aeabi_ddiv+0x25c>
 80002c8:	2300      	movs	r3, #0
 80002ca:	2400      	movs	r4, #0
 80002cc:	2500      	movs	r5, #0
 80002ce:	4652      	mov	r2, sl
 80002d0:	051b      	lsls	r3, r3, #20
 80002d2:	4323      	orrs	r3, r4
 80002d4:	07d2      	lsls	r2, r2, #31
 80002d6:	4313      	orrs	r3, r2
 80002d8:	0028      	movs	r0, r5
 80002da:	0019      	movs	r1, r3
 80002dc:	b005      	add	sp, #20
 80002de:	bcf0      	pop	{r4, r5, r6, r7}
 80002e0:	46bb      	mov	fp, r7
 80002e2:	46b2      	mov	sl, r6
 80002e4:	46a9      	mov	r9, r5
 80002e6:	46a0      	mov	r8, r4
 80002e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ea:	2400      	movs	r4, #0
 80002ec:	2500      	movs	r5, #0
 80002ee:	4baa      	ldr	r3, [pc, #680]	; (8000598 <__aeabi_ddiv+0x378>)
 80002f0:	e7ed      	b.n	80002ce <__aeabi_ddiv+0xae>
 80002f2:	46ba      	mov	sl, r7
 80002f4:	46a0      	mov	r8, r4
 80002f6:	0015      	movs	r5, r2
 80002f8:	9000      	str	r0, [sp, #0]
 80002fa:	e7dc      	b.n	80002b6 <__aeabi_ddiv+0x96>
 80002fc:	4544      	cmp	r4, r8
 80002fe:	d200      	bcs.n	8000302 <__aeabi_ddiv+0xe2>
 8000300:	e1c7      	b.n	8000692 <__aeabi_ddiv+0x472>
 8000302:	d100      	bne.n	8000306 <__aeabi_ddiv+0xe6>
 8000304:	e1c2      	b.n	800068c <__aeabi_ddiv+0x46c>
 8000306:	2301      	movs	r3, #1
 8000308:	425b      	negs	r3, r3
 800030a:	469c      	mov	ip, r3
 800030c:	002e      	movs	r6, r5
 800030e:	4640      	mov	r0, r8
 8000310:	2500      	movs	r5, #0
 8000312:	44e3      	add	fp, ip
 8000314:	0223      	lsls	r3, r4, #8
 8000316:	0e14      	lsrs	r4, r2, #24
 8000318:	431c      	orrs	r4, r3
 800031a:	0c1b      	lsrs	r3, r3, #16
 800031c:	4699      	mov	r9, r3
 800031e:	0423      	lsls	r3, r4, #16
 8000320:	0c1f      	lsrs	r7, r3, #16
 8000322:	0212      	lsls	r2, r2, #8
 8000324:	4649      	mov	r1, r9
 8000326:	9200      	str	r2, [sp, #0]
 8000328:	9701      	str	r7, [sp, #4]
 800032a:	f7ff ff73 	bl	8000214 <__aeabi_uidivmod>
 800032e:	0002      	movs	r2, r0
 8000330:	437a      	muls	r2, r7
 8000332:	040b      	lsls	r3, r1, #16
 8000334:	0c31      	lsrs	r1, r6, #16
 8000336:	4680      	mov	r8, r0
 8000338:	4319      	orrs	r1, r3
 800033a:	428a      	cmp	r2, r1
 800033c:	d907      	bls.n	800034e <__aeabi_ddiv+0x12e>
 800033e:	2301      	movs	r3, #1
 8000340:	425b      	negs	r3, r3
 8000342:	469c      	mov	ip, r3
 8000344:	1909      	adds	r1, r1, r4
 8000346:	44e0      	add	r8, ip
 8000348:	428c      	cmp	r4, r1
 800034a:	d800      	bhi.n	800034e <__aeabi_ddiv+0x12e>
 800034c:	e207      	b.n	800075e <__aeabi_ddiv+0x53e>
 800034e:	1a88      	subs	r0, r1, r2
 8000350:	4649      	mov	r1, r9
 8000352:	f7ff ff5f 	bl	8000214 <__aeabi_uidivmod>
 8000356:	0409      	lsls	r1, r1, #16
 8000358:	468c      	mov	ip, r1
 800035a:	0431      	lsls	r1, r6, #16
 800035c:	4666      	mov	r6, ip
 800035e:	9a01      	ldr	r2, [sp, #4]
 8000360:	0c09      	lsrs	r1, r1, #16
 8000362:	4342      	muls	r2, r0
 8000364:	0003      	movs	r3, r0
 8000366:	4331      	orrs	r1, r6
 8000368:	428a      	cmp	r2, r1
 800036a:	d904      	bls.n	8000376 <__aeabi_ddiv+0x156>
 800036c:	1909      	adds	r1, r1, r4
 800036e:	3b01      	subs	r3, #1
 8000370:	428c      	cmp	r4, r1
 8000372:	d800      	bhi.n	8000376 <__aeabi_ddiv+0x156>
 8000374:	e1ed      	b.n	8000752 <__aeabi_ddiv+0x532>
 8000376:	1a88      	subs	r0, r1, r2
 8000378:	4642      	mov	r2, r8
 800037a:	0412      	lsls	r2, r2, #16
 800037c:	431a      	orrs	r2, r3
 800037e:	4690      	mov	r8, r2
 8000380:	4641      	mov	r1, r8
 8000382:	9b00      	ldr	r3, [sp, #0]
 8000384:	040e      	lsls	r6, r1, #16
 8000386:	0c1b      	lsrs	r3, r3, #16
 8000388:	001f      	movs	r7, r3
 800038a:	9302      	str	r3, [sp, #8]
 800038c:	9b00      	ldr	r3, [sp, #0]
 800038e:	0c36      	lsrs	r6, r6, #16
 8000390:	041b      	lsls	r3, r3, #16
 8000392:	0c19      	lsrs	r1, r3, #16
 8000394:	000b      	movs	r3, r1
 8000396:	4373      	muls	r3, r6
 8000398:	0c12      	lsrs	r2, r2, #16
 800039a:	437e      	muls	r6, r7
 800039c:	9103      	str	r1, [sp, #12]
 800039e:	4351      	muls	r1, r2
 80003a0:	437a      	muls	r2, r7
 80003a2:	0c1f      	lsrs	r7, r3, #16
 80003a4:	46bc      	mov	ip, r7
 80003a6:	1876      	adds	r6, r6, r1
 80003a8:	4466      	add	r6, ip
 80003aa:	42b1      	cmp	r1, r6
 80003ac:	d903      	bls.n	80003b6 <__aeabi_ddiv+0x196>
 80003ae:	2180      	movs	r1, #128	; 0x80
 80003b0:	0249      	lsls	r1, r1, #9
 80003b2:	468c      	mov	ip, r1
 80003b4:	4462      	add	r2, ip
 80003b6:	0c31      	lsrs	r1, r6, #16
 80003b8:	188a      	adds	r2, r1, r2
 80003ba:	0431      	lsls	r1, r6, #16
 80003bc:	041e      	lsls	r6, r3, #16
 80003be:	0c36      	lsrs	r6, r6, #16
 80003c0:	198e      	adds	r6, r1, r6
 80003c2:	4290      	cmp	r0, r2
 80003c4:	d302      	bcc.n	80003cc <__aeabi_ddiv+0x1ac>
 80003c6:	d112      	bne.n	80003ee <__aeabi_ddiv+0x1ce>
 80003c8:	42b5      	cmp	r5, r6
 80003ca:	d210      	bcs.n	80003ee <__aeabi_ddiv+0x1ce>
 80003cc:	4643      	mov	r3, r8
 80003ce:	1e59      	subs	r1, r3, #1
 80003d0:	9b00      	ldr	r3, [sp, #0]
 80003d2:	469c      	mov	ip, r3
 80003d4:	4465      	add	r5, ip
 80003d6:	001f      	movs	r7, r3
 80003d8:	429d      	cmp	r5, r3
 80003da:	419b      	sbcs	r3, r3
 80003dc:	425b      	negs	r3, r3
 80003de:	191b      	adds	r3, r3, r4
 80003e0:	18c0      	adds	r0, r0, r3
 80003e2:	4284      	cmp	r4, r0
 80003e4:	d200      	bcs.n	80003e8 <__aeabi_ddiv+0x1c8>
 80003e6:	e1a0      	b.n	800072a <__aeabi_ddiv+0x50a>
 80003e8:	d100      	bne.n	80003ec <__aeabi_ddiv+0x1cc>
 80003ea:	e19b      	b.n	8000724 <__aeabi_ddiv+0x504>
 80003ec:	4688      	mov	r8, r1
 80003ee:	1bae      	subs	r6, r5, r6
 80003f0:	42b5      	cmp	r5, r6
 80003f2:	41ad      	sbcs	r5, r5
 80003f4:	1a80      	subs	r0, r0, r2
 80003f6:	426d      	negs	r5, r5
 80003f8:	1b40      	subs	r0, r0, r5
 80003fa:	4284      	cmp	r4, r0
 80003fc:	d100      	bne.n	8000400 <__aeabi_ddiv+0x1e0>
 80003fe:	e1d5      	b.n	80007ac <__aeabi_ddiv+0x58c>
 8000400:	4649      	mov	r1, r9
 8000402:	f7ff ff07 	bl	8000214 <__aeabi_uidivmod>
 8000406:	9a01      	ldr	r2, [sp, #4]
 8000408:	040b      	lsls	r3, r1, #16
 800040a:	4342      	muls	r2, r0
 800040c:	0c31      	lsrs	r1, r6, #16
 800040e:	0005      	movs	r5, r0
 8000410:	4319      	orrs	r1, r3
 8000412:	428a      	cmp	r2, r1
 8000414:	d900      	bls.n	8000418 <__aeabi_ddiv+0x1f8>
 8000416:	e16c      	b.n	80006f2 <__aeabi_ddiv+0x4d2>
 8000418:	1a88      	subs	r0, r1, r2
 800041a:	4649      	mov	r1, r9
 800041c:	f7ff fefa 	bl	8000214 <__aeabi_uidivmod>
 8000420:	9a01      	ldr	r2, [sp, #4]
 8000422:	0436      	lsls	r6, r6, #16
 8000424:	4342      	muls	r2, r0
 8000426:	0409      	lsls	r1, r1, #16
 8000428:	0c36      	lsrs	r6, r6, #16
 800042a:	0003      	movs	r3, r0
 800042c:	430e      	orrs	r6, r1
 800042e:	42b2      	cmp	r2, r6
 8000430:	d900      	bls.n	8000434 <__aeabi_ddiv+0x214>
 8000432:	e153      	b.n	80006dc <__aeabi_ddiv+0x4bc>
 8000434:	9803      	ldr	r0, [sp, #12]
 8000436:	1ab6      	subs	r6, r6, r2
 8000438:	0002      	movs	r2, r0
 800043a:	042d      	lsls	r5, r5, #16
 800043c:	431d      	orrs	r5, r3
 800043e:	9f02      	ldr	r7, [sp, #8]
 8000440:	042b      	lsls	r3, r5, #16
 8000442:	0c1b      	lsrs	r3, r3, #16
 8000444:	435a      	muls	r2, r3
 8000446:	437b      	muls	r3, r7
 8000448:	469c      	mov	ip, r3
 800044a:	0c29      	lsrs	r1, r5, #16
 800044c:	4348      	muls	r0, r1
 800044e:	0c13      	lsrs	r3, r2, #16
 8000450:	4484      	add	ip, r0
 8000452:	4463      	add	r3, ip
 8000454:	4379      	muls	r1, r7
 8000456:	4298      	cmp	r0, r3
 8000458:	d903      	bls.n	8000462 <__aeabi_ddiv+0x242>
 800045a:	2080      	movs	r0, #128	; 0x80
 800045c:	0240      	lsls	r0, r0, #9
 800045e:	4684      	mov	ip, r0
 8000460:	4461      	add	r1, ip
 8000462:	0c18      	lsrs	r0, r3, #16
 8000464:	0412      	lsls	r2, r2, #16
 8000466:	041b      	lsls	r3, r3, #16
 8000468:	0c12      	lsrs	r2, r2, #16
 800046a:	1841      	adds	r1, r0, r1
 800046c:	189b      	adds	r3, r3, r2
 800046e:	428e      	cmp	r6, r1
 8000470:	d200      	bcs.n	8000474 <__aeabi_ddiv+0x254>
 8000472:	e0ff      	b.n	8000674 <__aeabi_ddiv+0x454>
 8000474:	d100      	bne.n	8000478 <__aeabi_ddiv+0x258>
 8000476:	e0fa      	b.n	800066e <__aeabi_ddiv+0x44e>
 8000478:	2301      	movs	r3, #1
 800047a:	431d      	orrs	r5, r3
 800047c:	4a49      	ldr	r2, [pc, #292]	; (80005a4 <__aeabi_ddiv+0x384>)
 800047e:	445a      	add	r2, fp
 8000480:	2a00      	cmp	r2, #0
 8000482:	dc00      	bgt.n	8000486 <__aeabi_ddiv+0x266>
 8000484:	e0aa      	b.n	80005dc <__aeabi_ddiv+0x3bc>
 8000486:	076b      	lsls	r3, r5, #29
 8000488:	d000      	beq.n	800048c <__aeabi_ddiv+0x26c>
 800048a:	e13d      	b.n	8000708 <__aeabi_ddiv+0x4e8>
 800048c:	08ed      	lsrs	r5, r5, #3
 800048e:	4643      	mov	r3, r8
 8000490:	01db      	lsls	r3, r3, #7
 8000492:	d506      	bpl.n	80004a2 <__aeabi_ddiv+0x282>
 8000494:	4642      	mov	r2, r8
 8000496:	4b44      	ldr	r3, [pc, #272]	; (80005a8 <__aeabi_ddiv+0x388>)
 8000498:	401a      	ands	r2, r3
 800049a:	4690      	mov	r8, r2
 800049c:	2280      	movs	r2, #128	; 0x80
 800049e:	00d2      	lsls	r2, r2, #3
 80004a0:	445a      	add	r2, fp
 80004a2:	4b42      	ldr	r3, [pc, #264]	; (80005ac <__aeabi_ddiv+0x38c>)
 80004a4:	429a      	cmp	r2, r3
 80004a6:	dd00      	ble.n	80004aa <__aeabi_ddiv+0x28a>
 80004a8:	e71f      	b.n	80002ea <__aeabi_ddiv+0xca>
 80004aa:	4643      	mov	r3, r8
 80004ac:	075b      	lsls	r3, r3, #29
 80004ae:	431d      	orrs	r5, r3
 80004b0:	4643      	mov	r3, r8
 80004b2:	0552      	lsls	r2, r2, #21
 80004b4:	025c      	lsls	r4, r3, #9
 80004b6:	0b24      	lsrs	r4, r4, #12
 80004b8:	0d53      	lsrs	r3, r2, #21
 80004ba:	e708      	b.n	80002ce <__aeabi_ddiv+0xae>
 80004bc:	4652      	mov	r2, sl
 80004be:	4322      	orrs	r2, r4
 80004c0:	d100      	bne.n	80004c4 <__aeabi_ddiv+0x2a4>
 80004c2:	e07b      	b.n	80005bc <__aeabi_ddiv+0x39c>
 80004c4:	2c00      	cmp	r4, #0
 80004c6:	d100      	bne.n	80004ca <__aeabi_ddiv+0x2aa>
 80004c8:	e0fa      	b.n	80006c0 <__aeabi_ddiv+0x4a0>
 80004ca:	0020      	movs	r0, r4
 80004cc:	f000 fc70 	bl	8000db0 <__clzsi2>
 80004d0:	0002      	movs	r2, r0
 80004d2:	3a0b      	subs	r2, #11
 80004d4:	231d      	movs	r3, #29
 80004d6:	0001      	movs	r1, r0
 80004d8:	1a9b      	subs	r3, r3, r2
 80004da:	4652      	mov	r2, sl
 80004dc:	3908      	subs	r1, #8
 80004de:	40da      	lsrs	r2, r3
 80004e0:	408c      	lsls	r4, r1
 80004e2:	4314      	orrs	r4, r2
 80004e4:	4652      	mov	r2, sl
 80004e6:	408a      	lsls	r2, r1
 80004e8:	4b31      	ldr	r3, [pc, #196]	; (80005b0 <__aeabi_ddiv+0x390>)
 80004ea:	4458      	add	r0, fp
 80004ec:	469b      	mov	fp, r3
 80004ee:	4483      	add	fp, r0
 80004f0:	2000      	movs	r0, #0
 80004f2:	e6d5      	b.n	80002a0 <__aeabi_ddiv+0x80>
 80004f4:	464b      	mov	r3, r9
 80004f6:	4323      	orrs	r3, r4
 80004f8:	4698      	mov	r8, r3
 80004fa:	d044      	beq.n	8000586 <__aeabi_ddiv+0x366>
 80004fc:	2c00      	cmp	r4, #0
 80004fe:	d100      	bne.n	8000502 <__aeabi_ddiv+0x2e2>
 8000500:	e0ce      	b.n	80006a0 <__aeabi_ddiv+0x480>
 8000502:	0020      	movs	r0, r4
 8000504:	f000 fc54 	bl	8000db0 <__clzsi2>
 8000508:	0001      	movs	r1, r0
 800050a:	0002      	movs	r2, r0
 800050c:	390b      	subs	r1, #11
 800050e:	231d      	movs	r3, #29
 8000510:	1a5b      	subs	r3, r3, r1
 8000512:	4649      	mov	r1, r9
 8000514:	0010      	movs	r0, r2
 8000516:	40d9      	lsrs	r1, r3
 8000518:	3808      	subs	r0, #8
 800051a:	4084      	lsls	r4, r0
 800051c:	000b      	movs	r3, r1
 800051e:	464d      	mov	r5, r9
 8000520:	4323      	orrs	r3, r4
 8000522:	4698      	mov	r8, r3
 8000524:	4085      	lsls	r5, r0
 8000526:	4823      	ldr	r0, [pc, #140]	; (80005b4 <__aeabi_ddiv+0x394>)
 8000528:	1a83      	subs	r3, r0, r2
 800052a:	469b      	mov	fp, r3
 800052c:	2300      	movs	r3, #0
 800052e:	4699      	mov	r9, r3
 8000530:	9300      	str	r3, [sp, #0]
 8000532:	e69a      	b.n	800026a <__aeabi_ddiv+0x4a>
 8000534:	464b      	mov	r3, r9
 8000536:	4323      	orrs	r3, r4
 8000538:	4698      	mov	r8, r3
 800053a:	d11d      	bne.n	8000578 <__aeabi_ddiv+0x358>
 800053c:	2308      	movs	r3, #8
 800053e:	4699      	mov	r9, r3
 8000540:	3b06      	subs	r3, #6
 8000542:	2500      	movs	r5, #0
 8000544:	4683      	mov	fp, r0
 8000546:	9300      	str	r3, [sp, #0]
 8000548:	e68f      	b.n	800026a <__aeabi_ddiv+0x4a>
 800054a:	4652      	mov	r2, sl
 800054c:	4322      	orrs	r2, r4
 800054e:	d109      	bne.n	8000564 <__aeabi_ddiv+0x344>
 8000550:	2302      	movs	r3, #2
 8000552:	4649      	mov	r1, r9
 8000554:	4319      	orrs	r1, r3
 8000556:	4b18      	ldr	r3, [pc, #96]	; (80005b8 <__aeabi_ddiv+0x398>)
 8000558:	4689      	mov	r9, r1
 800055a:	469c      	mov	ip, r3
 800055c:	2400      	movs	r4, #0
 800055e:	2002      	movs	r0, #2
 8000560:	44e3      	add	fp, ip
 8000562:	e69d      	b.n	80002a0 <__aeabi_ddiv+0x80>
 8000564:	2303      	movs	r3, #3
 8000566:	464a      	mov	r2, r9
 8000568:	431a      	orrs	r2, r3
 800056a:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <__aeabi_ddiv+0x398>)
 800056c:	4691      	mov	r9, r2
 800056e:	469c      	mov	ip, r3
 8000570:	4652      	mov	r2, sl
 8000572:	2003      	movs	r0, #3
 8000574:	44e3      	add	fp, ip
 8000576:	e693      	b.n	80002a0 <__aeabi_ddiv+0x80>
 8000578:	230c      	movs	r3, #12
 800057a:	4699      	mov	r9, r3
 800057c:	3b09      	subs	r3, #9
 800057e:	46a0      	mov	r8, r4
 8000580:	4683      	mov	fp, r0
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	e671      	b.n	800026a <__aeabi_ddiv+0x4a>
 8000586:	2304      	movs	r3, #4
 8000588:	4699      	mov	r9, r3
 800058a:	2300      	movs	r3, #0
 800058c:	469b      	mov	fp, r3
 800058e:	3301      	adds	r3, #1
 8000590:	2500      	movs	r5, #0
 8000592:	9300      	str	r3, [sp, #0]
 8000594:	e669      	b.n	800026a <__aeabi_ddiv+0x4a>
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	000007ff 	.word	0x000007ff
 800059c:	fffffc01 	.word	0xfffffc01
 80005a0:	080031d8 	.word	0x080031d8
 80005a4:	000003ff 	.word	0x000003ff
 80005a8:	feffffff 	.word	0xfeffffff
 80005ac:	000007fe 	.word	0x000007fe
 80005b0:	000003f3 	.word	0x000003f3
 80005b4:	fffffc0d 	.word	0xfffffc0d
 80005b8:	fffff801 	.word	0xfffff801
 80005bc:	4649      	mov	r1, r9
 80005be:	2301      	movs	r3, #1
 80005c0:	4319      	orrs	r1, r3
 80005c2:	4689      	mov	r9, r1
 80005c4:	2400      	movs	r4, #0
 80005c6:	2001      	movs	r0, #1
 80005c8:	e66a      	b.n	80002a0 <__aeabi_ddiv+0x80>
 80005ca:	2300      	movs	r3, #0
 80005cc:	2480      	movs	r4, #128	; 0x80
 80005ce:	469a      	mov	sl, r3
 80005d0:	2500      	movs	r5, #0
 80005d2:	4b8a      	ldr	r3, [pc, #552]	; (80007fc <__aeabi_ddiv+0x5dc>)
 80005d4:	0324      	lsls	r4, r4, #12
 80005d6:	e67a      	b.n	80002ce <__aeabi_ddiv+0xae>
 80005d8:	2501      	movs	r5, #1
 80005da:	426d      	negs	r5, r5
 80005dc:	2301      	movs	r3, #1
 80005de:	1a9b      	subs	r3, r3, r2
 80005e0:	2b38      	cmp	r3, #56	; 0x38
 80005e2:	dd00      	ble.n	80005e6 <__aeabi_ddiv+0x3c6>
 80005e4:	e670      	b.n	80002c8 <__aeabi_ddiv+0xa8>
 80005e6:	2b1f      	cmp	r3, #31
 80005e8:	dc00      	bgt.n	80005ec <__aeabi_ddiv+0x3cc>
 80005ea:	e0bf      	b.n	800076c <__aeabi_ddiv+0x54c>
 80005ec:	211f      	movs	r1, #31
 80005ee:	4249      	negs	r1, r1
 80005f0:	1a8a      	subs	r2, r1, r2
 80005f2:	4641      	mov	r1, r8
 80005f4:	40d1      	lsrs	r1, r2
 80005f6:	000a      	movs	r2, r1
 80005f8:	2b20      	cmp	r3, #32
 80005fa:	d004      	beq.n	8000606 <__aeabi_ddiv+0x3e6>
 80005fc:	4641      	mov	r1, r8
 80005fe:	4b80      	ldr	r3, [pc, #512]	; (8000800 <__aeabi_ddiv+0x5e0>)
 8000600:	445b      	add	r3, fp
 8000602:	4099      	lsls	r1, r3
 8000604:	430d      	orrs	r5, r1
 8000606:	1e6b      	subs	r3, r5, #1
 8000608:	419d      	sbcs	r5, r3
 800060a:	2307      	movs	r3, #7
 800060c:	432a      	orrs	r2, r5
 800060e:	001d      	movs	r5, r3
 8000610:	2400      	movs	r4, #0
 8000612:	4015      	ands	r5, r2
 8000614:	4213      	tst	r3, r2
 8000616:	d100      	bne.n	800061a <__aeabi_ddiv+0x3fa>
 8000618:	e0d4      	b.n	80007c4 <__aeabi_ddiv+0x5a4>
 800061a:	210f      	movs	r1, #15
 800061c:	2300      	movs	r3, #0
 800061e:	4011      	ands	r1, r2
 8000620:	2904      	cmp	r1, #4
 8000622:	d100      	bne.n	8000626 <__aeabi_ddiv+0x406>
 8000624:	e0cb      	b.n	80007be <__aeabi_ddiv+0x59e>
 8000626:	1d11      	adds	r1, r2, #4
 8000628:	4291      	cmp	r1, r2
 800062a:	4192      	sbcs	r2, r2
 800062c:	4252      	negs	r2, r2
 800062e:	189b      	adds	r3, r3, r2
 8000630:	000a      	movs	r2, r1
 8000632:	0219      	lsls	r1, r3, #8
 8000634:	d400      	bmi.n	8000638 <__aeabi_ddiv+0x418>
 8000636:	e0c2      	b.n	80007be <__aeabi_ddiv+0x59e>
 8000638:	2301      	movs	r3, #1
 800063a:	2400      	movs	r4, #0
 800063c:	2500      	movs	r5, #0
 800063e:	e646      	b.n	80002ce <__aeabi_ddiv+0xae>
 8000640:	2380      	movs	r3, #128	; 0x80
 8000642:	4641      	mov	r1, r8
 8000644:	031b      	lsls	r3, r3, #12
 8000646:	4219      	tst	r1, r3
 8000648:	d008      	beq.n	800065c <__aeabi_ddiv+0x43c>
 800064a:	421c      	tst	r4, r3
 800064c:	d106      	bne.n	800065c <__aeabi_ddiv+0x43c>
 800064e:	431c      	orrs	r4, r3
 8000650:	0324      	lsls	r4, r4, #12
 8000652:	46ba      	mov	sl, r7
 8000654:	0015      	movs	r5, r2
 8000656:	4b69      	ldr	r3, [pc, #420]	; (80007fc <__aeabi_ddiv+0x5dc>)
 8000658:	0b24      	lsrs	r4, r4, #12
 800065a:	e638      	b.n	80002ce <__aeabi_ddiv+0xae>
 800065c:	2480      	movs	r4, #128	; 0x80
 800065e:	4643      	mov	r3, r8
 8000660:	0324      	lsls	r4, r4, #12
 8000662:	431c      	orrs	r4, r3
 8000664:	0324      	lsls	r4, r4, #12
 8000666:	46b2      	mov	sl, r6
 8000668:	4b64      	ldr	r3, [pc, #400]	; (80007fc <__aeabi_ddiv+0x5dc>)
 800066a:	0b24      	lsrs	r4, r4, #12
 800066c:	e62f      	b.n	80002ce <__aeabi_ddiv+0xae>
 800066e:	2b00      	cmp	r3, #0
 8000670:	d100      	bne.n	8000674 <__aeabi_ddiv+0x454>
 8000672:	e703      	b.n	800047c <__aeabi_ddiv+0x25c>
 8000674:	19a6      	adds	r6, r4, r6
 8000676:	1e68      	subs	r0, r5, #1
 8000678:	42a6      	cmp	r6, r4
 800067a:	d200      	bcs.n	800067e <__aeabi_ddiv+0x45e>
 800067c:	e08d      	b.n	800079a <__aeabi_ddiv+0x57a>
 800067e:	428e      	cmp	r6, r1
 8000680:	d200      	bcs.n	8000684 <__aeabi_ddiv+0x464>
 8000682:	e0a3      	b.n	80007cc <__aeabi_ddiv+0x5ac>
 8000684:	d100      	bne.n	8000688 <__aeabi_ddiv+0x468>
 8000686:	e0b3      	b.n	80007f0 <__aeabi_ddiv+0x5d0>
 8000688:	0005      	movs	r5, r0
 800068a:	e6f5      	b.n	8000478 <__aeabi_ddiv+0x258>
 800068c:	42aa      	cmp	r2, r5
 800068e:	d900      	bls.n	8000692 <__aeabi_ddiv+0x472>
 8000690:	e639      	b.n	8000306 <__aeabi_ddiv+0xe6>
 8000692:	4643      	mov	r3, r8
 8000694:	07de      	lsls	r6, r3, #31
 8000696:	0858      	lsrs	r0, r3, #1
 8000698:	086b      	lsrs	r3, r5, #1
 800069a:	431e      	orrs	r6, r3
 800069c:	07ed      	lsls	r5, r5, #31
 800069e:	e639      	b.n	8000314 <__aeabi_ddiv+0xf4>
 80006a0:	4648      	mov	r0, r9
 80006a2:	f000 fb85 	bl	8000db0 <__clzsi2>
 80006a6:	0001      	movs	r1, r0
 80006a8:	0002      	movs	r2, r0
 80006aa:	3115      	adds	r1, #21
 80006ac:	3220      	adds	r2, #32
 80006ae:	291c      	cmp	r1, #28
 80006b0:	dc00      	bgt.n	80006b4 <__aeabi_ddiv+0x494>
 80006b2:	e72c      	b.n	800050e <__aeabi_ddiv+0x2ee>
 80006b4:	464b      	mov	r3, r9
 80006b6:	3808      	subs	r0, #8
 80006b8:	4083      	lsls	r3, r0
 80006ba:	2500      	movs	r5, #0
 80006bc:	4698      	mov	r8, r3
 80006be:	e732      	b.n	8000526 <__aeabi_ddiv+0x306>
 80006c0:	f000 fb76 	bl	8000db0 <__clzsi2>
 80006c4:	0003      	movs	r3, r0
 80006c6:	001a      	movs	r2, r3
 80006c8:	3215      	adds	r2, #21
 80006ca:	3020      	adds	r0, #32
 80006cc:	2a1c      	cmp	r2, #28
 80006ce:	dc00      	bgt.n	80006d2 <__aeabi_ddiv+0x4b2>
 80006d0:	e700      	b.n	80004d4 <__aeabi_ddiv+0x2b4>
 80006d2:	4654      	mov	r4, sl
 80006d4:	3b08      	subs	r3, #8
 80006d6:	2200      	movs	r2, #0
 80006d8:	409c      	lsls	r4, r3
 80006da:	e705      	b.n	80004e8 <__aeabi_ddiv+0x2c8>
 80006dc:	1936      	adds	r6, r6, r4
 80006de:	3b01      	subs	r3, #1
 80006e0:	42b4      	cmp	r4, r6
 80006e2:	d900      	bls.n	80006e6 <__aeabi_ddiv+0x4c6>
 80006e4:	e6a6      	b.n	8000434 <__aeabi_ddiv+0x214>
 80006e6:	42b2      	cmp	r2, r6
 80006e8:	d800      	bhi.n	80006ec <__aeabi_ddiv+0x4cc>
 80006ea:	e6a3      	b.n	8000434 <__aeabi_ddiv+0x214>
 80006ec:	1e83      	subs	r3, r0, #2
 80006ee:	1936      	adds	r6, r6, r4
 80006f0:	e6a0      	b.n	8000434 <__aeabi_ddiv+0x214>
 80006f2:	1909      	adds	r1, r1, r4
 80006f4:	3d01      	subs	r5, #1
 80006f6:	428c      	cmp	r4, r1
 80006f8:	d900      	bls.n	80006fc <__aeabi_ddiv+0x4dc>
 80006fa:	e68d      	b.n	8000418 <__aeabi_ddiv+0x1f8>
 80006fc:	428a      	cmp	r2, r1
 80006fe:	d800      	bhi.n	8000702 <__aeabi_ddiv+0x4e2>
 8000700:	e68a      	b.n	8000418 <__aeabi_ddiv+0x1f8>
 8000702:	1e85      	subs	r5, r0, #2
 8000704:	1909      	adds	r1, r1, r4
 8000706:	e687      	b.n	8000418 <__aeabi_ddiv+0x1f8>
 8000708:	230f      	movs	r3, #15
 800070a:	402b      	ands	r3, r5
 800070c:	2b04      	cmp	r3, #4
 800070e:	d100      	bne.n	8000712 <__aeabi_ddiv+0x4f2>
 8000710:	e6bc      	b.n	800048c <__aeabi_ddiv+0x26c>
 8000712:	2305      	movs	r3, #5
 8000714:	425b      	negs	r3, r3
 8000716:	42ab      	cmp	r3, r5
 8000718:	419b      	sbcs	r3, r3
 800071a:	3504      	adds	r5, #4
 800071c:	425b      	negs	r3, r3
 800071e:	08ed      	lsrs	r5, r5, #3
 8000720:	4498      	add	r8, r3
 8000722:	e6b4      	b.n	800048e <__aeabi_ddiv+0x26e>
 8000724:	42af      	cmp	r7, r5
 8000726:	d900      	bls.n	800072a <__aeabi_ddiv+0x50a>
 8000728:	e660      	b.n	80003ec <__aeabi_ddiv+0x1cc>
 800072a:	4282      	cmp	r2, r0
 800072c:	d804      	bhi.n	8000738 <__aeabi_ddiv+0x518>
 800072e:	d000      	beq.n	8000732 <__aeabi_ddiv+0x512>
 8000730:	e65c      	b.n	80003ec <__aeabi_ddiv+0x1cc>
 8000732:	42ae      	cmp	r6, r5
 8000734:	d800      	bhi.n	8000738 <__aeabi_ddiv+0x518>
 8000736:	e659      	b.n	80003ec <__aeabi_ddiv+0x1cc>
 8000738:	2302      	movs	r3, #2
 800073a:	425b      	negs	r3, r3
 800073c:	469c      	mov	ip, r3
 800073e:	9b00      	ldr	r3, [sp, #0]
 8000740:	44e0      	add	r8, ip
 8000742:	469c      	mov	ip, r3
 8000744:	4465      	add	r5, ip
 8000746:	429d      	cmp	r5, r3
 8000748:	419b      	sbcs	r3, r3
 800074a:	425b      	negs	r3, r3
 800074c:	191b      	adds	r3, r3, r4
 800074e:	18c0      	adds	r0, r0, r3
 8000750:	e64d      	b.n	80003ee <__aeabi_ddiv+0x1ce>
 8000752:	428a      	cmp	r2, r1
 8000754:	d800      	bhi.n	8000758 <__aeabi_ddiv+0x538>
 8000756:	e60e      	b.n	8000376 <__aeabi_ddiv+0x156>
 8000758:	1e83      	subs	r3, r0, #2
 800075a:	1909      	adds	r1, r1, r4
 800075c:	e60b      	b.n	8000376 <__aeabi_ddiv+0x156>
 800075e:	428a      	cmp	r2, r1
 8000760:	d800      	bhi.n	8000764 <__aeabi_ddiv+0x544>
 8000762:	e5f4      	b.n	800034e <__aeabi_ddiv+0x12e>
 8000764:	1e83      	subs	r3, r0, #2
 8000766:	4698      	mov	r8, r3
 8000768:	1909      	adds	r1, r1, r4
 800076a:	e5f0      	b.n	800034e <__aeabi_ddiv+0x12e>
 800076c:	4925      	ldr	r1, [pc, #148]	; (8000804 <__aeabi_ddiv+0x5e4>)
 800076e:	0028      	movs	r0, r5
 8000770:	4459      	add	r1, fp
 8000772:	408d      	lsls	r5, r1
 8000774:	4642      	mov	r2, r8
 8000776:	408a      	lsls	r2, r1
 8000778:	1e69      	subs	r1, r5, #1
 800077a:	418d      	sbcs	r5, r1
 800077c:	4641      	mov	r1, r8
 800077e:	40d8      	lsrs	r0, r3
 8000780:	40d9      	lsrs	r1, r3
 8000782:	4302      	orrs	r2, r0
 8000784:	432a      	orrs	r2, r5
 8000786:	000b      	movs	r3, r1
 8000788:	0751      	lsls	r1, r2, #29
 800078a:	d100      	bne.n	800078e <__aeabi_ddiv+0x56e>
 800078c:	e751      	b.n	8000632 <__aeabi_ddiv+0x412>
 800078e:	210f      	movs	r1, #15
 8000790:	4011      	ands	r1, r2
 8000792:	2904      	cmp	r1, #4
 8000794:	d000      	beq.n	8000798 <__aeabi_ddiv+0x578>
 8000796:	e746      	b.n	8000626 <__aeabi_ddiv+0x406>
 8000798:	e74b      	b.n	8000632 <__aeabi_ddiv+0x412>
 800079a:	0005      	movs	r5, r0
 800079c:	428e      	cmp	r6, r1
 800079e:	d000      	beq.n	80007a2 <__aeabi_ddiv+0x582>
 80007a0:	e66a      	b.n	8000478 <__aeabi_ddiv+0x258>
 80007a2:	9a00      	ldr	r2, [sp, #0]
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d000      	beq.n	80007aa <__aeabi_ddiv+0x58a>
 80007a8:	e666      	b.n	8000478 <__aeabi_ddiv+0x258>
 80007aa:	e667      	b.n	800047c <__aeabi_ddiv+0x25c>
 80007ac:	4a16      	ldr	r2, [pc, #88]	; (8000808 <__aeabi_ddiv+0x5e8>)
 80007ae:	445a      	add	r2, fp
 80007b0:	2a00      	cmp	r2, #0
 80007b2:	dc00      	bgt.n	80007b6 <__aeabi_ddiv+0x596>
 80007b4:	e710      	b.n	80005d8 <__aeabi_ddiv+0x3b8>
 80007b6:	2301      	movs	r3, #1
 80007b8:	2500      	movs	r5, #0
 80007ba:	4498      	add	r8, r3
 80007bc:	e667      	b.n	800048e <__aeabi_ddiv+0x26e>
 80007be:	075d      	lsls	r5, r3, #29
 80007c0:	025b      	lsls	r3, r3, #9
 80007c2:	0b1c      	lsrs	r4, r3, #12
 80007c4:	08d2      	lsrs	r2, r2, #3
 80007c6:	2300      	movs	r3, #0
 80007c8:	4315      	orrs	r5, r2
 80007ca:	e580      	b.n	80002ce <__aeabi_ddiv+0xae>
 80007cc:	9800      	ldr	r0, [sp, #0]
 80007ce:	3d02      	subs	r5, #2
 80007d0:	0042      	lsls	r2, r0, #1
 80007d2:	4282      	cmp	r2, r0
 80007d4:	41bf      	sbcs	r7, r7
 80007d6:	427f      	negs	r7, r7
 80007d8:	193c      	adds	r4, r7, r4
 80007da:	1936      	adds	r6, r6, r4
 80007dc:	9200      	str	r2, [sp, #0]
 80007de:	e7dd      	b.n	800079c <__aeabi_ddiv+0x57c>
 80007e0:	2480      	movs	r4, #128	; 0x80
 80007e2:	4643      	mov	r3, r8
 80007e4:	0324      	lsls	r4, r4, #12
 80007e6:	431c      	orrs	r4, r3
 80007e8:	0324      	lsls	r4, r4, #12
 80007ea:	4b04      	ldr	r3, [pc, #16]	; (80007fc <__aeabi_ddiv+0x5dc>)
 80007ec:	0b24      	lsrs	r4, r4, #12
 80007ee:	e56e      	b.n	80002ce <__aeabi_ddiv+0xae>
 80007f0:	9a00      	ldr	r2, [sp, #0]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d3ea      	bcc.n	80007cc <__aeabi_ddiv+0x5ac>
 80007f6:	0005      	movs	r5, r0
 80007f8:	e7d3      	b.n	80007a2 <__aeabi_ddiv+0x582>
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	000007ff 	.word	0x000007ff
 8000800:	0000043e 	.word	0x0000043e
 8000804:	0000041e 	.word	0x0000041e
 8000808:	000003ff 	.word	0x000003ff

0800080c <__aeabi_dmul>:
 800080c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800080e:	4657      	mov	r7, sl
 8000810:	464e      	mov	r6, r9
 8000812:	4645      	mov	r5, r8
 8000814:	46de      	mov	lr, fp
 8000816:	b5e0      	push	{r5, r6, r7, lr}
 8000818:	4698      	mov	r8, r3
 800081a:	030c      	lsls	r4, r1, #12
 800081c:	004b      	lsls	r3, r1, #1
 800081e:	0006      	movs	r6, r0
 8000820:	4692      	mov	sl, r2
 8000822:	b087      	sub	sp, #28
 8000824:	0b24      	lsrs	r4, r4, #12
 8000826:	0d5b      	lsrs	r3, r3, #21
 8000828:	0fcf      	lsrs	r7, r1, #31
 800082a:	2b00      	cmp	r3, #0
 800082c:	d100      	bne.n	8000830 <__aeabi_dmul+0x24>
 800082e:	e15c      	b.n	8000aea <__aeabi_dmul+0x2de>
 8000830:	4ad9      	ldr	r2, [pc, #868]	; (8000b98 <__aeabi_dmul+0x38c>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d100      	bne.n	8000838 <__aeabi_dmul+0x2c>
 8000836:	e175      	b.n	8000b24 <__aeabi_dmul+0x318>
 8000838:	0f42      	lsrs	r2, r0, #29
 800083a:	00e4      	lsls	r4, r4, #3
 800083c:	4314      	orrs	r4, r2
 800083e:	2280      	movs	r2, #128	; 0x80
 8000840:	0412      	lsls	r2, r2, #16
 8000842:	4314      	orrs	r4, r2
 8000844:	4ad5      	ldr	r2, [pc, #852]	; (8000b9c <__aeabi_dmul+0x390>)
 8000846:	00c5      	lsls	r5, r0, #3
 8000848:	4694      	mov	ip, r2
 800084a:	4463      	add	r3, ip
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	2300      	movs	r3, #0
 8000850:	4699      	mov	r9, r3
 8000852:	469b      	mov	fp, r3
 8000854:	4643      	mov	r3, r8
 8000856:	4642      	mov	r2, r8
 8000858:	031e      	lsls	r6, r3, #12
 800085a:	0fd2      	lsrs	r2, r2, #31
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	4650      	mov	r0, sl
 8000860:	4690      	mov	r8, r2
 8000862:	0b36      	lsrs	r6, r6, #12
 8000864:	0d5b      	lsrs	r3, r3, #21
 8000866:	d100      	bne.n	800086a <__aeabi_dmul+0x5e>
 8000868:	e120      	b.n	8000aac <__aeabi_dmul+0x2a0>
 800086a:	4acb      	ldr	r2, [pc, #812]	; (8000b98 <__aeabi_dmul+0x38c>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d100      	bne.n	8000872 <__aeabi_dmul+0x66>
 8000870:	e162      	b.n	8000b38 <__aeabi_dmul+0x32c>
 8000872:	49ca      	ldr	r1, [pc, #808]	; (8000b9c <__aeabi_dmul+0x390>)
 8000874:	0f42      	lsrs	r2, r0, #29
 8000876:	468c      	mov	ip, r1
 8000878:	9900      	ldr	r1, [sp, #0]
 800087a:	4463      	add	r3, ip
 800087c:	00f6      	lsls	r6, r6, #3
 800087e:	468c      	mov	ip, r1
 8000880:	4316      	orrs	r6, r2
 8000882:	2280      	movs	r2, #128	; 0x80
 8000884:	449c      	add	ip, r3
 8000886:	0412      	lsls	r2, r2, #16
 8000888:	4663      	mov	r3, ip
 800088a:	4316      	orrs	r6, r2
 800088c:	00c2      	lsls	r2, r0, #3
 800088e:	2000      	movs	r0, #0
 8000890:	9300      	str	r3, [sp, #0]
 8000892:	9900      	ldr	r1, [sp, #0]
 8000894:	4643      	mov	r3, r8
 8000896:	3101      	adds	r1, #1
 8000898:	468c      	mov	ip, r1
 800089a:	4649      	mov	r1, r9
 800089c:	407b      	eors	r3, r7
 800089e:	9301      	str	r3, [sp, #4]
 80008a0:	290f      	cmp	r1, #15
 80008a2:	d826      	bhi.n	80008f2 <__aeabi_dmul+0xe6>
 80008a4:	4bbe      	ldr	r3, [pc, #760]	; (8000ba0 <__aeabi_dmul+0x394>)
 80008a6:	0089      	lsls	r1, r1, #2
 80008a8:	5859      	ldr	r1, [r3, r1]
 80008aa:	468f      	mov	pc, r1
 80008ac:	4643      	mov	r3, r8
 80008ae:	9301      	str	r3, [sp, #4]
 80008b0:	0034      	movs	r4, r6
 80008b2:	0015      	movs	r5, r2
 80008b4:	4683      	mov	fp, r0
 80008b6:	465b      	mov	r3, fp
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d016      	beq.n	80008ea <__aeabi_dmul+0xde>
 80008bc:	2b03      	cmp	r3, #3
 80008be:	d100      	bne.n	80008c2 <__aeabi_dmul+0xb6>
 80008c0:	e203      	b.n	8000cca <__aeabi_dmul+0x4be>
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d000      	beq.n	80008c8 <__aeabi_dmul+0xbc>
 80008c6:	e0cd      	b.n	8000a64 <__aeabi_dmul+0x258>
 80008c8:	2200      	movs	r2, #0
 80008ca:	2400      	movs	r4, #0
 80008cc:	2500      	movs	r5, #0
 80008ce:	9b01      	ldr	r3, [sp, #4]
 80008d0:	0512      	lsls	r2, r2, #20
 80008d2:	4322      	orrs	r2, r4
 80008d4:	07db      	lsls	r3, r3, #31
 80008d6:	431a      	orrs	r2, r3
 80008d8:	0028      	movs	r0, r5
 80008da:	0011      	movs	r1, r2
 80008dc:	b007      	add	sp, #28
 80008de:	bcf0      	pop	{r4, r5, r6, r7}
 80008e0:	46bb      	mov	fp, r7
 80008e2:	46b2      	mov	sl, r6
 80008e4:	46a9      	mov	r9, r5
 80008e6:	46a0      	mov	r8, r4
 80008e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008ea:	2400      	movs	r4, #0
 80008ec:	2500      	movs	r5, #0
 80008ee:	4aaa      	ldr	r2, [pc, #680]	; (8000b98 <__aeabi_dmul+0x38c>)
 80008f0:	e7ed      	b.n	80008ce <__aeabi_dmul+0xc2>
 80008f2:	0c28      	lsrs	r0, r5, #16
 80008f4:	042d      	lsls	r5, r5, #16
 80008f6:	0c2d      	lsrs	r5, r5, #16
 80008f8:	002b      	movs	r3, r5
 80008fa:	0c11      	lsrs	r1, r2, #16
 80008fc:	0412      	lsls	r2, r2, #16
 80008fe:	0c12      	lsrs	r2, r2, #16
 8000900:	4353      	muls	r3, r2
 8000902:	4698      	mov	r8, r3
 8000904:	0013      	movs	r3, r2
 8000906:	002f      	movs	r7, r5
 8000908:	4343      	muls	r3, r0
 800090a:	4699      	mov	r9, r3
 800090c:	434f      	muls	r7, r1
 800090e:	444f      	add	r7, r9
 8000910:	46bb      	mov	fp, r7
 8000912:	4647      	mov	r7, r8
 8000914:	000b      	movs	r3, r1
 8000916:	0c3f      	lsrs	r7, r7, #16
 8000918:	46ba      	mov	sl, r7
 800091a:	4343      	muls	r3, r0
 800091c:	44da      	add	sl, fp
 800091e:	9302      	str	r3, [sp, #8]
 8000920:	45d1      	cmp	r9, sl
 8000922:	d904      	bls.n	800092e <__aeabi_dmul+0x122>
 8000924:	2780      	movs	r7, #128	; 0x80
 8000926:	027f      	lsls	r7, r7, #9
 8000928:	46b9      	mov	r9, r7
 800092a:	444b      	add	r3, r9
 800092c:	9302      	str	r3, [sp, #8]
 800092e:	4653      	mov	r3, sl
 8000930:	0c1b      	lsrs	r3, r3, #16
 8000932:	469b      	mov	fp, r3
 8000934:	4653      	mov	r3, sl
 8000936:	041f      	lsls	r7, r3, #16
 8000938:	4643      	mov	r3, r8
 800093a:	041b      	lsls	r3, r3, #16
 800093c:	0c1b      	lsrs	r3, r3, #16
 800093e:	4698      	mov	r8, r3
 8000940:	003b      	movs	r3, r7
 8000942:	4443      	add	r3, r8
 8000944:	9304      	str	r3, [sp, #16]
 8000946:	0c33      	lsrs	r3, r6, #16
 8000948:	0436      	lsls	r6, r6, #16
 800094a:	0c36      	lsrs	r6, r6, #16
 800094c:	4698      	mov	r8, r3
 800094e:	0033      	movs	r3, r6
 8000950:	4343      	muls	r3, r0
 8000952:	4699      	mov	r9, r3
 8000954:	4643      	mov	r3, r8
 8000956:	4343      	muls	r3, r0
 8000958:	002f      	movs	r7, r5
 800095a:	469a      	mov	sl, r3
 800095c:	4643      	mov	r3, r8
 800095e:	4377      	muls	r7, r6
 8000960:	435d      	muls	r5, r3
 8000962:	0c38      	lsrs	r0, r7, #16
 8000964:	444d      	add	r5, r9
 8000966:	1945      	adds	r5, r0, r5
 8000968:	45a9      	cmp	r9, r5
 800096a:	d903      	bls.n	8000974 <__aeabi_dmul+0x168>
 800096c:	2380      	movs	r3, #128	; 0x80
 800096e:	025b      	lsls	r3, r3, #9
 8000970:	4699      	mov	r9, r3
 8000972:	44ca      	add	sl, r9
 8000974:	043f      	lsls	r7, r7, #16
 8000976:	0c28      	lsrs	r0, r5, #16
 8000978:	0c3f      	lsrs	r7, r7, #16
 800097a:	042d      	lsls	r5, r5, #16
 800097c:	19ed      	adds	r5, r5, r7
 800097e:	0c27      	lsrs	r7, r4, #16
 8000980:	0424      	lsls	r4, r4, #16
 8000982:	0c24      	lsrs	r4, r4, #16
 8000984:	0003      	movs	r3, r0
 8000986:	0020      	movs	r0, r4
 8000988:	4350      	muls	r0, r2
 800098a:	437a      	muls	r2, r7
 800098c:	4691      	mov	r9, r2
 800098e:	003a      	movs	r2, r7
 8000990:	4453      	add	r3, sl
 8000992:	9305      	str	r3, [sp, #20]
 8000994:	0c03      	lsrs	r3, r0, #16
 8000996:	469a      	mov	sl, r3
 8000998:	434a      	muls	r2, r1
 800099a:	4361      	muls	r1, r4
 800099c:	4449      	add	r1, r9
 800099e:	4451      	add	r1, sl
 80009a0:	44ab      	add	fp, r5
 80009a2:	4589      	cmp	r9, r1
 80009a4:	d903      	bls.n	80009ae <__aeabi_dmul+0x1a2>
 80009a6:	2380      	movs	r3, #128	; 0x80
 80009a8:	025b      	lsls	r3, r3, #9
 80009aa:	4699      	mov	r9, r3
 80009ac:	444a      	add	r2, r9
 80009ae:	0400      	lsls	r0, r0, #16
 80009b0:	0c0b      	lsrs	r3, r1, #16
 80009b2:	0c00      	lsrs	r0, r0, #16
 80009b4:	0409      	lsls	r1, r1, #16
 80009b6:	1809      	adds	r1, r1, r0
 80009b8:	0020      	movs	r0, r4
 80009ba:	4699      	mov	r9, r3
 80009bc:	4643      	mov	r3, r8
 80009be:	4370      	muls	r0, r6
 80009c0:	435c      	muls	r4, r3
 80009c2:	437e      	muls	r6, r7
 80009c4:	435f      	muls	r7, r3
 80009c6:	0c03      	lsrs	r3, r0, #16
 80009c8:	4698      	mov	r8, r3
 80009ca:	19a4      	adds	r4, r4, r6
 80009cc:	4444      	add	r4, r8
 80009ce:	444a      	add	r2, r9
 80009d0:	9703      	str	r7, [sp, #12]
 80009d2:	42a6      	cmp	r6, r4
 80009d4:	d904      	bls.n	80009e0 <__aeabi_dmul+0x1d4>
 80009d6:	2380      	movs	r3, #128	; 0x80
 80009d8:	025b      	lsls	r3, r3, #9
 80009da:	4698      	mov	r8, r3
 80009dc:	4447      	add	r7, r8
 80009de:	9703      	str	r7, [sp, #12]
 80009e0:	0423      	lsls	r3, r4, #16
 80009e2:	9e02      	ldr	r6, [sp, #8]
 80009e4:	469a      	mov	sl, r3
 80009e6:	9b05      	ldr	r3, [sp, #20]
 80009e8:	445e      	add	r6, fp
 80009ea:	4698      	mov	r8, r3
 80009ec:	42ae      	cmp	r6, r5
 80009ee:	41ad      	sbcs	r5, r5
 80009f0:	1876      	adds	r6, r6, r1
 80009f2:	428e      	cmp	r6, r1
 80009f4:	4189      	sbcs	r1, r1
 80009f6:	0400      	lsls	r0, r0, #16
 80009f8:	0c00      	lsrs	r0, r0, #16
 80009fa:	4450      	add	r0, sl
 80009fc:	4440      	add	r0, r8
 80009fe:	426d      	negs	r5, r5
 8000a00:	1947      	adds	r7, r0, r5
 8000a02:	46b8      	mov	r8, r7
 8000a04:	4693      	mov	fp, r2
 8000a06:	4249      	negs	r1, r1
 8000a08:	4689      	mov	r9, r1
 8000a0a:	44c3      	add	fp, r8
 8000a0c:	44d9      	add	r9, fp
 8000a0e:	4298      	cmp	r0, r3
 8000a10:	4180      	sbcs	r0, r0
 8000a12:	45a8      	cmp	r8, r5
 8000a14:	41ad      	sbcs	r5, r5
 8000a16:	4593      	cmp	fp, r2
 8000a18:	4192      	sbcs	r2, r2
 8000a1a:	4589      	cmp	r9, r1
 8000a1c:	4189      	sbcs	r1, r1
 8000a1e:	426d      	negs	r5, r5
 8000a20:	4240      	negs	r0, r0
 8000a22:	4328      	orrs	r0, r5
 8000a24:	0c24      	lsrs	r4, r4, #16
 8000a26:	4252      	negs	r2, r2
 8000a28:	4249      	negs	r1, r1
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	9b03      	ldr	r3, [sp, #12]
 8000a2e:	1900      	adds	r0, r0, r4
 8000a30:	1880      	adds	r0, r0, r2
 8000a32:	18c7      	adds	r7, r0, r3
 8000a34:	464b      	mov	r3, r9
 8000a36:	0ddc      	lsrs	r4, r3, #23
 8000a38:	9b04      	ldr	r3, [sp, #16]
 8000a3a:	0275      	lsls	r5, r6, #9
 8000a3c:	431d      	orrs	r5, r3
 8000a3e:	1e6a      	subs	r2, r5, #1
 8000a40:	4195      	sbcs	r5, r2
 8000a42:	464b      	mov	r3, r9
 8000a44:	0df6      	lsrs	r6, r6, #23
 8000a46:	027f      	lsls	r7, r7, #9
 8000a48:	4335      	orrs	r5, r6
 8000a4a:	025a      	lsls	r2, r3, #9
 8000a4c:	433c      	orrs	r4, r7
 8000a4e:	4315      	orrs	r5, r2
 8000a50:	01fb      	lsls	r3, r7, #7
 8000a52:	d400      	bmi.n	8000a56 <__aeabi_dmul+0x24a>
 8000a54:	e11c      	b.n	8000c90 <__aeabi_dmul+0x484>
 8000a56:	2101      	movs	r1, #1
 8000a58:	086a      	lsrs	r2, r5, #1
 8000a5a:	400d      	ands	r5, r1
 8000a5c:	4315      	orrs	r5, r2
 8000a5e:	07e2      	lsls	r2, r4, #31
 8000a60:	4315      	orrs	r5, r2
 8000a62:	0864      	lsrs	r4, r4, #1
 8000a64:	494f      	ldr	r1, [pc, #316]	; (8000ba4 <__aeabi_dmul+0x398>)
 8000a66:	4461      	add	r1, ip
 8000a68:	2900      	cmp	r1, #0
 8000a6a:	dc00      	bgt.n	8000a6e <__aeabi_dmul+0x262>
 8000a6c:	e0b0      	b.n	8000bd0 <__aeabi_dmul+0x3c4>
 8000a6e:	076b      	lsls	r3, r5, #29
 8000a70:	d009      	beq.n	8000a86 <__aeabi_dmul+0x27a>
 8000a72:	220f      	movs	r2, #15
 8000a74:	402a      	ands	r2, r5
 8000a76:	2a04      	cmp	r2, #4
 8000a78:	d005      	beq.n	8000a86 <__aeabi_dmul+0x27a>
 8000a7a:	1d2a      	adds	r2, r5, #4
 8000a7c:	42aa      	cmp	r2, r5
 8000a7e:	41ad      	sbcs	r5, r5
 8000a80:	426d      	negs	r5, r5
 8000a82:	1964      	adds	r4, r4, r5
 8000a84:	0015      	movs	r5, r2
 8000a86:	01e3      	lsls	r3, r4, #7
 8000a88:	d504      	bpl.n	8000a94 <__aeabi_dmul+0x288>
 8000a8a:	2180      	movs	r1, #128	; 0x80
 8000a8c:	4a46      	ldr	r2, [pc, #280]	; (8000ba8 <__aeabi_dmul+0x39c>)
 8000a8e:	00c9      	lsls	r1, r1, #3
 8000a90:	4014      	ands	r4, r2
 8000a92:	4461      	add	r1, ip
 8000a94:	4a45      	ldr	r2, [pc, #276]	; (8000bac <__aeabi_dmul+0x3a0>)
 8000a96:	4291      	cmp	r1, r2
 8000a98:	dd00      	ble.n	8000a9c <__aeabi_dmul+0x290>
 8000a9a:	e726      	b.n	80008ea <__aeabi_dmul+0xde>
 8000a9c:	0762      	lsls	r2, r4, #29
 8000a9e:	08ed      	lsrs	r5, r5, #3
 8000aa0:	0264      	lsls	r4, r4, #9
 8000aa2:	0549      	lsls	r1, r1, #21
 8000aa4:	4315      	orrs	r5, r2
 8000aa6:	0b24      	lsrs	r4, r4, #12
 8000aa8:	0d4a      	lsrs	r2, r1, #21
 8000aaa:	e710      	b.n	80008ce <__aeabi_dmul+0xc2>
 8000aac:	4652      	mov	r2, sl
 8000aae:	4332      	orrs	r2, r6
 8000ab0:	d100      	bne.n	8000ab4 <__aeabi_dmul+0x2a8>
 8000ab2:	e07f      	b.n	8000bb4 <__aeabi_dmul+0x3a8>
 8000ab4:	2e00      	cmp	r6, #0
 8000ab6:	d100      	bne.n	8000aba <__aeabi_dmul+0x2ae>
 8000ab8:	e0dc      	b.n	8000c74 <__aeabi_dmul+0x468>
 8000aba:	0030      	movs	r0, r6
 8000abc:	f000 f978 	bl	8000db0 <__clzsi2>
 8000ac0:	0002      	movs	r2, r0
 8000ac2:	3a0b      	subs	r2, #11
 8000ac4:	231d      	movs	r3, #29
 8000ac6:	0001      	movs	r1, r0
 8000ac8:	1a9b      	subs	r3, r3, r2
 8000aca:	4652      	mov	r2, sl
 8000acc:	3908      	subs	r1, #8
 8000ace:	40da      	lsrs	r2, r3
 8000ad0:	408e      	lsls	r6, r1
 8000ad2:	4316      	orrs	r6, r2
 8000ad4:	4652      	mov	r2, sl
 8000ad6:	408a      	lsls	r2, r1
 8000ad8:	9b00      	ldr	r3, [sp, #0]
 8000ada:	4935      	ldr	r1, [pc, #212]	; (8000bb0 <__aeabi_dmul+0x3a4>)
 8000adc:	1a18      	subs	r0, r3, r0
 8000ade:	0003      	movs	r3, r0
 8000ae0:	468c      	mov	ip, r1
 8000ae2:	4463      	add	r3, ip
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	9300      	str	r3, [sp, #0]
 8000ae8:	e6d3      	b.n	8000892 <__aeabi_dmul+0x86>
 8000aea:	0025      	movs	r5, r4
 8000aec:	4305      	orrs	r5, r0
 8000aee:	d04a      	beq.n	8000b86 <__aeabi_dmul+0x37a>
 8000af0:	2c00      	cmp	r4, #0
 8000af2:	d100      	bne.n	8000af6 <__aeabi_dmul+0x2ea>
 8000af4:	e0b0      	b.n	8000c58 <__aeabi_dmul+0x44c>
 8000af6:	0020      	movs	r0, r4
 8000af8:	f000 f95a 	bl	8000db0 <__clzsi2>
 8000afc:	0001      	movs	r1, r0
 8000afe:	0002      	movs	r2, r0
 8000b00:	390b      	subs	r1, #11
 8000b02:	231d      	movs	r3, #29
 8000b04:	0010      	movs	r0, r2
 8000b06:	1a5b      	subs	r3, r3, r1
 8000b08:	0031      	movs	r1, r6
 8000b0a:	0035      	movs	r5, r6
 8000b0c:	3808      	subs	r0, #8
 8000b0e:	4084      	lsls	r4, r0
 8000b10:	40d9      	lsrs	r1, r3
 8000b12:	4085      	lsls	r5, r0
 8000b14:	430c      	orrs	r4, r1
 8000b16:	4826      	ldr	r0, [pc, #152]	; (8000bb0 <__aeabi_dmul+0x3a4>)
 8000b18:	1a83      	subs	r3, r0, r2
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	4699      	mov	r9, r3
 8000b20:	469b      	mov	fp, r3
 8000b22:	e697      	b.n	8000854 <__aeabi_dmul+0x48>
 8000b24:	0005      	movs	r5, r0
 8000b26:	4325      	orrs	r5, r4
 8000b28:	d126      	bne.n	8000b78 <__aeabi_dmul+0x36c>
 8000b2a:	2208      	movs	r2, #8
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	2302      	movs	r3, #2
 8000b30:	2400      	movs	r4, #0
 8000b32:	4691      	mov	r9, r2
 8000b34:	469b      	mov	fp, r3
 8000b36:	e68d      	b.n	8000854 <__aeabi_dmul+0x48>
 8000b38:	4652      	mov	r2, sl
 8000b3a:	9b00      	ldr	r3, [sp, #0]
 8000b3c:	4332      	orrs	r2, r6
 8000b3e:	d110      	bne.n	8000b62 <__aeabi_dmul+0x356>
 8000b40:	4915      	ldr	r1, [pc, #84]	; (8000b98 <__aeabi_dmul+0x38c>)
 8000b42:	2600      	movs	r6, #0
 8000b44:	468c      	mov	ip, r1
 8000b46:	4463      	add	r3, ip
 8000b48:	4649      	mov	r1, r9
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	4319      	orrs	r1, r3
 8000b50:	4689      	mov	r9, r1
 8000b52:	2002      	movs	r0, #2
 8000b54:	e69d      	b.n	8000892 <__aeabi_dmul+0x86>
 8000b56:	465b      	mov	r3, fp
 8000b58:	9701      	str	r7, [sp, #4]
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	d000      	beq.n	8000b60 <__aeabi_dmul+0x354>
 8000b5e:	e6ad      	b.n	80008bc <__aeabi_dmul+0xb0>
 8000b60:	e6c3      	b.n	80008ea <__aeabi_dmul+0xde>
 8000b62:	4a0d      	ldr	r2, [pc, #52]	; (8000b98 <__aeabi_dmul+0x38c>)
 8000b64:	2003      	movs	r0, #3
 8000b66:	4694      	mov	ip, r2
 8000b68:	4463      	add	r3, ip
 8000b6a:	464a      	mov	r2, r9
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	2303      	movs	r3, #3
 8000b70:	431a      	orrs	r2, r3
 8000b72:	4691      	mov	r9, r2
 8000b74:	4652      	mov	r2, sl
 8000b76:	e68c      	b.n	8000892 <__aeabi_dmul+0x86>
 8000b78:	220c      	movs	r2, #12
 8000b7a:	9300      	str	r3, [sp, #0]
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	0005      	movs	r5, r0
 8000b80:	4691      	mov	r9, r2
 8000b82:	469b      	mov	fp, r3
 8000b84:	e666      	b.n	8000854 <__aeabi_dmul+0x48>
 8000b86:	2304      	movs	r3, #4
 8000b88:	4699      	mov	r9, r3
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	2400      	movs	r4, #0
 8000b92:	469b      	mov	fp, r3
 8000b94:	e65e      	b.n	8000854 <__aeabi_dmul+0x48>
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	000007ff 	.word	0x000007ff
 8000b9c:	fffffc01 	.word	0xfffffc01
 8000ba0:	08003218 	.word	0x08003218
 8000ba4:	000003ff 	.word	0x000003ff
 8000ba8:	feffffff 	.word	0xfeffffff
 8000bac:	000007fe 	.word	0x000007fe
 8000bb0:	fffffc0d 	.word	0xfffffc0d
 8000bb4:	4649      	mov	r1, r9
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	4319      	orrs	r1, r3
 8000bba:	4689      	mov	r9, r1
 8000bbc:	2600      	movs	r6, #0
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	e667      	b.n	8000892 <__aeabi_dmul+0x86>
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	2480      	movs	r4, #128	; 0x80
 8000bc6:	2500      	movs	r5, #0
 8000bc8:	4a43      	ldr	r2, [pc, #268]	; (8000cd8 <__aeabi_dmul+0x4cc>)
 8000bca:	9301      	str	r3, [sp, #4]
 8000bcc:	0324      	lsls	r4, r4, #12
 8000bce:	e67e      	b.n	80008ce <__aeabi_dmul+0xc2>
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	1a40      	subs	r0, r0, r1
 8000bd4:	2838      	cmp	r0, #56	; 0x38
 8000bd6:	dd00      	ble.n	8000bda <__aeabi_dmul+0x3ce>
 8000bd8:	e676      	b.n	80008c8 <__aeabi_dmul+0xbc>
 8000bda:	281f      	cmp	r0, #31
 8000bdc:	dd5b      	ble.n	8000c96 <__aeabi_dmul+0x48a>
 8000bde:	221f      	movs	r2, #31
 8000be0:	0023      	movs	r3, r4
 8000be2:	4252      	negs	r2, r2
 8000be4:	1a51      	subs	r1, r2, r1
 8000be6:	40cb      	lsrs	r3, r1
 8000be8:	0019      	movs	r1, r3
 8000bea:	2820      	cmp	r0, #32
 8000bec:	d003      	beq.n	8000bf6 <__aeabi_dmul+0x3ea>
 8000bee:	4a3b      	ldr	r2, [pc, #236]	; (8000cdc <__aeabi_dmul+0x4d0>)
 8000bf0:	4462      	add	r2, ip
 8000bf2:	4094      	lsls	r4, r2
 8000bf4:	4325      	orrs	r5, r4
 8000bf6:	1e6a      	subs	r2, r5, #1
 8000bf8:	4195      	sbcs	r5, r2
 8000bfa:	002a      	movs	r2, r5
 8000bfc:	430a      	orrs	r2, r1
 8000bfe:	2107      	movs	r1, #7
 8000c00:	000d      	movs	r5, r1
 8000c02:	2400      	movs	r4, #0
 8000c04:	4015      	ands	r5, r2
 8000c06:	4211      	tst	r1, r2
 8000c08:	d05b      	beq.n	8000cc2 <__aeabi_dmul+0x4b6>
 8000c0a:	210f      	movs	r1, #15
 8000c0c:	2400      	movs	r4, #0
 8000c0e:	4011      	ands	r1, r2
 8000c10:	2904      	cmp	r1, #4
 8000c12:	d053      	beq.n	8000cbc <__aeabi_dmul+0x4b0>
 8000c14:	1d11      	adds	r1, r2, #4
 8000c16:	4291      	cmp	r1, r2
 8000c18:	4192      	sbcs	r2, r2
 8000c1a:	4252      	negs	r2, r2
 8000c1c:	18a4      	adds	r4, r4, r2
 8000c1e:	000a      	movs	r2, r1
 8000c20:	0223      	lsls	r3, r4, #8
 8000c22:	d54b      	bpl.n	8000cbc <__aeabi_dmul+0x4b0>
 8000c24:	2201      	movs	r2, #1
 8000c26:	2400      	movs	r4, #0
 8000c28:	2500      	movs	r5, #0
 8000c2a:	e650      	b.n	80008ce <__aeabi_dmul+0xc2>
 8000c2c:	2380      	movs	r3, #128	; 0x80
 8000c2e:	031b      	lsls	r3, r3, #12
 8000c30:	421c      	tst	r4, r3
 8000c32:	d009      	beq.n	8000c48 <__aeabi_dmul+0x43c>
 8000c34:	421e      	tst	r6, r3
 8000c36:	d107      	bne.n	8000c48 <__aeabi_dmul+0x43c>
 8000c38:	4333      	orrs	r3, r6
 8000c3a:	031c      	lsls	r4, r3, #12
 8000c3c:	4643      	mov	r3, r8
 8000c3e:	0015      	movs	r5, r2
 8000c40:	0b24      	lsrs	r4, r4, #12
 8000c42:	4a25      	ldr	r2, [pc, #148]	; (8000cd8 <__aeabi_dmul+0x4cc>)
 8000c44:	9301      	str	r3, [sp, #4]
 8000c46:	e642      	b.n	80008ce <__aeabi_dmul+0xc2>
 8000c48:	2280      	movs	r2, #128	; 0x80
 8000c4a:	0312      	lsls	r2, r2, #12
 8000c4c:	4314      	orrs	r4, r2
 8000c4e:	0324      	lsls	r4, r4, #12
 8000c50:	4a21      	ldr	r2, [pc, #132]	; (8000cd8 <__aeabi_dmul+0x4cc>)
 8000c52:	0b24      	lsrs	r4, r4, #12
 8000c54:	9701      	str	r7, [sp, #4]
 8000c56:	e63a      	b.n	80008ce <__aeabi_dmul+0xc2>
 8000c58:	f000 f8aa 	bl	8000db0 <__clzsi2>
 8000c5c:	0001      	movs	r1, r0
 8000c5e:	0002      	movs	r2, r0
 8000c60:	3115      	adds	r1, #21
 8000c62:	3220      	adds	r2, #32
 8000c64:	291c      	cmp	r1, #28
 8000c66:	dc00      	bgt.n	8000c6a <__aeabi_dmul+0x45e>
 8000c68:	e74b      	b.n	8000b02 <__aeabi_dmul+0x2f6>
 8000c6a:	0034      	movs	r4, r6
 8000c6c:	3808      	subs	r0, #8
 8000c6e:	2500      	movs	r5, #0
 8000c70:	4084      	lsls	r4, r0
 8000c72:	e750      	b.n	8000b16 <__aeabi_dmul+0x30a>
 8000c74:	f000 f89c 	bl	8000db0 <__clzsi2>
 8000c78:	0003      	movs	r3, r0
 8000c7a:	001a      	movs	r2, r3
 8000c7c:	3215      	adds	r2, #21
 8000c7e:	3020      	adds	r0, #32
 8000c80:	2a1c      	cmp	r2, #28
 8000c82:	dc00      	bgt.n	8000c86 <__aeabi_dmul+0x47a>
 8000c84:	e71e      	b.n	8000ac4 <__aeabi_dmul+0x2b8>
 8000c86:	4656      	mov	r6, sl
 8000c88:	3b08      	subs	r3, #8
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	409e      	lsls	r6, r3
 8000c8e:	e723      	b.n	8000ad8 <__aeabi_dmul+0x2cc>
 8000c90:	9b00      	ldr	r3, [sp, #0]
 8000c92:	469c      	mov	ip, r3
 8000c94:	e6e6      	b.n	8000a64 <__aeabi_dmul+0x258>
 8000c96:	4912      	ldr	r1, [pc, #72]	; (8000ce0 <__aeabi_dmul+0x4d4>)
 8000c98:	0022      	movs	r2, r4
 8000c9a:	4461      	add	r1, ip
 8000c9c:	002e      	movs	r6, r5
 8000c9e:	408d      	lsls	r5, r1
 8000ca0:	408a      	lsls	r2, r1
 8000ca2:	40c6      	lsrs	r6, r0
 8000ca4:	1e69      	subs	r1, r5, #1
 8000ca6:	418d      	sbcs	r5, r1
 8000ca8:	4332      	orrs	r2, r6
 8000caa:	432a      	orrs	r2, r5
 8000cac:	40c4      	lsrs	r4, r0
 8000cae:	0753      	lsls	r3, r2, #29
 8000cb0:	d0b6      	beq.n	8000c20 <__aeabi_dmul+0x414>
 8000cb2:	210f      	movs	r1, #15
 8000cb4:	4011      	ands	r1, r2
 8000cb6:	2904      	cmp	r1, #4
 8000cb8:	d1ac      	bne.n	8000c14 <__aeabi_dmul+0x408>
 8000cba:	e7b1      	b.n	8000c20 <__aeabi_dmul+0x414>
 8000cbc:	0765      	lsls	r5, r4, #29
 8000cbe:	0264      	lsls	r4, r4, #9
 8000cc0:	0b24      	lsrs	r4, r4, #12
 8000cc2:	08d2      	lsrs	r2, r2, #3
 8000cc4:	4315      	orrs	r5, r2
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	e601      	b.n	80008ce <__aeabi_dmul+0xc2>
 8000cca:	2280      	movs	r2, #128	; 0x80
 8000ccc:	0312      	lsls	r2, r2, #12
 8000cce:	4314      	orrs	r4, r2
 8000cd0:	0324      	lsls	r4, r4, #12
 8000cd2:	4a01      	ldr	r2, [pc, #4]	; (8000cd8 <__aeabi_dmul+0x4cc>)
 8000cd4:	0b24      	lsrs	r4, r4, #12
 8000cd6:	e5fa      	b.n	80008ce <__aeabi_dmul+0xc2>
 8000cd8:	000007ff 	.word	0x000007ff
 8000cdc:	0000043e 	.word	0x0000043e
 8000ce0:	0000041e 	.word	0x0000041e

08000ce4 <__aeabi_d2iz>:
 8000ce4:	000a      	movs	r2, r1
 8000ce6:	b530      	push	{r4, r5, lr}
 8000ce8:	4c13      	ldr	r4, [pc, #76]	; (8000d38 <__aeabi_d2iz+0x54>)
 8000cea:	0053      	lsls	r3, r2, #1
 8000cec:	0309      	lsls	r1, r1, #12
 8000cee:	0005      	movs	r5, r0
 8000cf0:	0b09      	lsrs	r1, r1, #12
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	0d5b      	lsrs	r3, r3, #21
 8000cf6:	0fd2      	lsrs	r2, r2, #31
 8000cf8:	42a3      	cmp	r3, r4
 8000cfa:	dd04      	ble.n	8000d06 <__aeabi_d2iz+0x22>
 8000cfc:	480f      	ldr	r0, [pc, #60]	; (8000d3c <__aeabi_d2iz+0x58>)
 8000cfe:	4283      	cmp	r3, r0
 8000d00:	dd02      	ble.n	8000d08 <__aeabi_d2iz+0x24>
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <__aeabi_d2iz+0x5c>)
 8000d04:	18d0      	adds	r0, r2, r3
 8000d06:	bd30      	pop	{r4, r5, pc}
 8000d08:	2080      	movs	r0, #128	; 0x80
 8000d0a:	0340      	lsls	r0, r0, #13
 8000d0c:	4301      	orrs	r1, r0
 8000d0e:	480d      	ldr	r0, [pc, #52]	; (8000d44 <__aeabi_d2iz+0x60>)
 8000d10:	1ac0      	subs	r0, r0, r3
 8000d12:	281f      	cmp	r0, #31
 8000d14:	dd08      	ble.n	8000d28 <__aeabi_d2iz+0x44>
 8000d16:	480c      	ldr	r0, [pc, #48]	; (8000d48 <__aeabi_d2iz+0x64>)
 8000d18:	1ac3      	subs	r3, r0, r3
 8000d1a:	40d9      	lsrs	r1, r3
 8000d1c:	000b      	movs	r3, r1
 8000d1e:	4258      	negs	r0, r3
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d1f0      	bne.n	8000d06 <__aeabi_d2iz+0x22>
 8000d24:	0018      	movs	r0, r3
 8000d26:	e7ee      	b.n	8000d06 <__aeabi_d2iz+0x22>
 8000d28:	4c08      	ldr	r4, [pc, #32]	; (8000d4c <__aeabi_d2iz+0x68>)
 8000d2a:	40c5      	lsrs	r5, r0
 8000d2c:	46a4      	mov	ip, r4
 8000d2e:	4463      	add	r3, ip
 8000d30:	4099      	lsls	r1, r3
 8000d32:	000b      	movs	r3, r1
 8000d34:	432b      	orrs	r3, r5
 8000d36:	e7f2      	b.n	8000d1e <__aeabi_d2iz+0x3a>
 8000d38:	000003fe 	.word	0x000003fe
 8000d3c:	0000041d 	.word	0x0000041d
 8000d40:	7fffffff 	.word	0x7fffffff
 8000d44:	00000433 	.word	0x00000433
 8000d48:	00000413 	.word	0x00000413
 8000d4c:	fffffbed 	.word	0xfffffbed

08000d50 <__aeabi_i2d>:
 8000d50:	b570      	push	{r4, r5, r6, lr}
 8000d52:	2800      	cmp	r0, #0
 8000d54:	d016      	beq.n	8000d84 <__aeabi_i2d+0x34>
 8000d56:	17c3      	asrs	r3, r0, #31
 8000d58:	18c5      	adds	r5, r0, r3
 8000d5a:	405d      	eors	r5, r3
 8000d5c:	0fc4      	lsrs	r4, r0, #31
 8000d5e:	0028      	movs	r0, r5
 8000d60:	f000 f826 	bl	8000db0 <__clzsi2>
 8000d64:	4a11      	ldr	r2, [pc, #68]	; (8000dac <__aeabi_i2d+0x5c>)
 8000d66:	1a12      	subs	r2, r2, r0
 8000d68:	280a      	cmp	r0, #10
 8000d6a:	dc16      	bgt.n	8000d9a <__aeabi_i2d+0x4a>
 8000d6c:	0003      	movs	r3, r0
 8000d6e:	002e      	movs	r6, r5
 8000d70:	3315      	adds	r3, #21
 8000d72:	409e      	lsls	r6, r3
 8000d74:	230b      	movs	r3, #11
 8000d76:	1a18      	subs	r0, r3, r0
 8000d78:	40c5      	lsrs	r5, r0
 8000d7a:	0552      	lsls	r2, r2, #21
 8000d7c:	032d      	lsls	r5, r5, #12
 8000d7e:	0b2d      	lsrs	r5, r5, #12
 8000d80:	0d53      	lsrs	r3, r2, #21
 8000d82:	e003      	b.n	8000d8c <__aeabi_i2d+0x3c>
 8000d84:	2400      	movs	r4, #0
 8000d86:	2300      	movs	r3, #0
 8000d88:	2500      	movs	r5, #0
 8000d8a:	2600      	movs	r6, #0
 8000d8c:	051b      	lsls	r3, r3, #20
 8000d8e:	432b      	orrs	r3, r5
 8000d90:	07e4      	lsls	r4, r4, #31
 8000d92:	4323      	orrs	r3, r4
 8000d94:	0030      	movs	r0, r6
 8000d96:	0019      	movs	r1, r3
 8000d98:	bd70      	pop	{r4, r5, r6, pc}
 8000d9a:	380b      	subs	r0, #11
 8000d9c:	4085      	lsls	r5, r0
 8000d9e:	0552      	lsls	r2, r2, #21
 8000da0:	032d      	lsls	r5, r5, #12
 8000da2:	2600      	movs	r6, #0
 8000da4:	0b2d      	lsrs	r5, r5, #12
 8000da6:	0d53      	lsrs	r3, r2, #21
 8000da8:	e7f0      	b.n	8000d8c <__aeabi_i2d+0x3c>
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	0000041e 	.word	0x0000041e

08000db0 <__clzsi2>:
 8000db0:	211c      	movs	r1, #28
 8000db2:	2301      	movs	r3, #1
 8000db4:	041b      	lsls	r3, r3, #16
 8000db6:	4298      	cmp	r0, r3
 8000db8:	d301      	bcc.n	8000dbe <__clzsi2+0xe>
 8000dba:	0c00      	lsrs	r0, r0, #16
 8000dbc:	3910      	subs	r1, #16
 8000dbe:	0a1b      	lsrs	r3, r3, #8
 8000dc0:	4298      	cmp	r0, r3
 8000dc2:	d301      	bcc.n	8000dc8 <__clzsi2+0x18>
 8000dc4:	0a00      	lsrs	r0, r0, #8
 8000dc6:	3908      	subs	r1, #8
 8000dc8:	091b      	lsrs	r3, r3, #4
 8000dca:	4298      	cmp	r0, r3
 8000dcc:	d301      	bcc.n	8000dd2 <__clzsi2+0x22>
 8000dce:	0900      	lsrs	r0, r0, #4
 8000dd0:	3904      	subs	r1, #4
 8000dd2:	a202      	add	r2, pc, #8	; (adr r2, 8000ddc <__clzsi2+0x2c>)
 8000dd4:	5c10      	ldrb	r0, [r2, r0]
 8000dd6:	1840      	adds	r0, r0, r1
 8000dd8:	4770      	bx	lr
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	02020304 	.word	0x02020304
 8000de0:	01010101 	.word	0x01010101
	...

08000dec <MPU6050_Init>:

int Ax, Ay, Az, Gx, Gy, Gz;


void MPU6050_Init (void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000df2:	482a      	ldr	r0, [pc, #168]	; (8000e9c <MPU6050_Init+0xb0>)
 8000df4:	23fa      	movs	r3, #250	; 0xfa
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	9302      	str	r3, [sp, #8]
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	9301      	str	r3, [sp, #4]
 8000dfe:	1dfb      	adds	r3, r7, #7
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	2301      	movs	r3, #1
 8000e04:	2275      	movs	r2, #117	; 0x75
 8000e06:	21d0      	movs	r1, #208	; 0xd0
 8000e08:	f001 f856 	bl	8001eb8 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8000e0c:	1dfb      	adds	r3, r7, #7
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b68      	cmp	r3, #104	; 0x68
 8000e12:	d13f      	bne.n	8000e94 <MPU6050_Init+0xa8>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8000e14:	1dbb      	adds	r3, r7, #6
 8000e16:	2200      	movs	r2, #0
 8000e18:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8000e1a:	4820      	ldr	r0, [pc, #128]	; (8000e9c <MPU6050_Init+0xb0>)
 8000e1c:	23fa      	movs	r3, #250	; 0xfa
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	9302      	str	r3, [sp, #8]
 8000e22:	2301      	movs	r3, #1
 8000e24:	9301      	str	r3, [sp, #4]
 8000e26:	1dbb      	adds	r3, r7, #6
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	226b      	movs	r2, #107	; 0x6b
 8000e2e:	21d0      	movs	r1, #208	; 0xd0
 8000e30:	f000 ff14 	bl	8001c5c <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8000e34:	1dbb      	adds	r3, r7, #6
 8000e36:	2207      	movs	r2, #7
 8000e38:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000e3a:	4818      	ldr	r0, [pc, #96]	; (8000e9c <MPU6050_Init+0xb0>)
 8000e3c:	23fa      	movs	r3, #250	; 0xfa
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	9302      	str	r3, [sp, #8]
 8000e42:	2301      	movs	r3, #1
 8000e44:	9301      	str	r3, [sp, #4]
 8000e46:	1dbb      	adds	r3, r7, #6
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	2219      	movs	r2, #25
 8000e4e:	21d0      	movs	r1, #208	; 0xd0
 8000e50:	f000 ff04 	bl	8001c5c <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 8000e54:	1dbb      	adds	r3, r7, #6
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8000e5a:	4810      	ldr	r0, [pc, #64]	; (8000e9c <MPU6050_Init+0xb0>)
 8000e5c:	23fa      	movs	r3, #250	; 0xfa
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	9302      	str	r3, [sp, #8]
 8000e62:	2301      	movs	r3, #1
 8000e64:	9301      	str	r3, [sp, #4]
 8000e66:	1dbb      	adds	r3, r7, #6
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	221c      	movs	r2, #28
 8000e6e:	21d0      	movs	r1, #208	; 0xd0
 8000e70:	f000 fef4 	bl	8001c5c <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 8000e74:	1dbb      	adds	r3, r7, #6
 8000e76:	2200      	movs	r2, #0
 8000e78:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8000e7a:	4808      	ldr	r0, [pc, #32]	; (8000e9c <MPU6050_Init+0xb0>)
 8000e7c:	23fa      	movs	r3, #250	; 0xfa
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	9302      	str	r3, [sp, #8]
 8000e82:	2301      	movs	r3, #1
 8000e84:	9301      	str	r3, [sp, #4]
 8000e86:	1dbb      	adds	r3, r7, #6
 8000e88:	9300      	str	r3, [sp, #0]
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	221b      	movs	r2, #27
 8000e8e:	21d0      	movs	r1, #208	; 0xd0
 8000e90:	f000 fee4 	bl	8001c5c <HAL_I2C_Mem_Write>
	}

}
 8000e94:	46c0      	nop			; (mov r8, r8)
 8000e96:	46bd      	mov	sp, r7
 8000e98:	b002      	add	sp, #8
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000028 	.word	0x20000028

08000ea0 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel (void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000ea6:	4841      	ldr	r0, [pc, #260]	; (8000fac <MPU6050_Read_Accel+0x10c>)
 8000ea8:	23fa      	movs	r3, #250	; 0xfa
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	9302      	str	r3, [sp, #8]
 8000eae:	2306      	movs	r3, #6
 8000eb0:	9301      	str	r3, [sp, #4]
 8000eb2:	003b      	movs	r3, r7
 8000eb4:	9300      	str	r3, [sp, #0]
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	223b      	movs	r2, #59	; 0x3b
 8000eba:	21d0      	movs	r1, #208	; 0xd0
 8000ebc:	f000 fffc 	bl	8001eb8 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000ec0:	003b      	movs	r3, r7
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	021b      	lsls	r3, r3, #8
 8000ec6:	b21a      	sxth	r2, r3
 8000ec8:	003b      	movs	r3, r7
 8000eca:	785b      	ldrb	r3, [r3, #1]
 8000ecc:	b21b      	sxth	r3, r3
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	b21a      	sxth	r2, r3
 8000ed2:	4b37      	ldr	r3, [pc, #220]	; (8000fb0 <MPU6050_Read_Accel+0x110>)
 8000ed4:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000ed6:	003b      	movs	r3, r7
 8000ed8:	789b      	ldrb	r3, [r3, #2]
 8000eda:	021b      	lsls	r3, r3, #8
 8000edc:	b21a      	sxth	r2, r3
 8000ede:	003b      	movs	r3, r7
 8000ee0:	78db      	ldrb	r3, [r3, #3]
 8000ee2:	b21b      	sxth	r3, r3
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	b21a      	sxth	r2, r3
 8000ee8:	4b32      	ldr	r3, [pc, #200]	; (8000fb4 <MPU6050_Read_Accel+0x114>)
 8000eea:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000eec:	003b      	movs	r3, r7
 8000eee:	791b      	ldrb	r3, [r3, #4]
 8000ef0:	021b      	lsls	r3, r3, #8
 8000ef2:	b21a      	sxth	r2, r3
 8000ef4:	003b      	movs	r3, r7
 8000ef6:	795b      	ldrb	r3, [r3, #5]
 8000ef8:	b21b      	sxth	r3, r3
 8000efa:	4313      	orrs	r3, r2
 8000efc:	b21a      	sxth	r2, r3
 8000efe:	4b2e      	ldr	r3, [pc, #184]	; (8000fb8 <MPU6050_Read_Accel+0x118>)
 8000f00:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0*100;
 8000f02:	4b2b      	ldr	r3, [pc, #172]	; (8000fb0 <MPU6050_Read_Accel+0x110>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	5e9b      	ldrsh	r3, [r3, r2]
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f7ff ff21 	bl	8000d50 <__aeabi_i2d>
 8000f0e:	2200      	movs	r2, #0
 8000f10:	4b2a      	ldr	r3, [pc, #168]	; (8000fbc <MPU6050_Read_Accel+0x11c>)
 8000f12:	f7ff f985 	bl	8000220 <__aeabi_ddiv>
 8000f16:	0002      	movs	r2, r0
 8000f18:	000b      	movs	r3, r1
 8000f1a:	0010      	movs	r0, r2
 8000f1c:	0019      	movs	r1, r3
 8000f1e:	2200      	movs	r2, #0
 8000f20:	4b27      	ldr	r3, [pc, #156]	; (8000fc0 <MPU6050_Read_Accel+0x120>)
 8000f22:	f7ff fc73 	bl	800080c <__aeabi_dmul>
 8000f26:	0002      	movs	r2, r0
 8000f28:	000b      	movs	r3, r1
 8000f2a:	0010      	movs	r0, r2
 8000f2c:	0019      	movs	r1, r3
 8000f2e:	f7ff fed9 	bl	8000ce4 <__aeabi_d2iz>
 8000f32:	0002      	movs	r2, r0
 8000f34:	4b23      	ldr	r3, [pc, #140]	; (8000fc4 <MPU6050_Read_Accel+0x124>)
 8000f36:	601a      	str	r2, [r3, #0]
	Ay = Accel_Y_RAW/16384.0*100;
 8000f38:	4b1e      	ldr	r3, [pc, #120]	; (8000fb4 <MPU6050_Read_Accel+0x114>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	5e9b      	ldrsh	r3, [r3, r2]
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f7ff ff06 	bl	8000d50 <__aeabi_i2d>
 8000f44:	2200      	movs	r2, #0
 8000f46:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <MPU6050_Read_Accel+0x11c>)
 8000f48:	f7ff f96a 	bl	8000220 <__aeabi_ddiv>
 8000f4c:	0002      	movs	r2, r0
 8000f4e:	000b      	movs	r3, r1
 8000f50:	0010      	movs	r0, r2
 8000f52:	0019      	movs	r1, r3
 8000f54:	2200      	movs	r2, #0
 8000f56:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <MPU6050_Read_Accel+0x120>)
 8000f58:	f7ff fc58 	bl	800080c <__aeabi_dmul>
 8000f5c:	0002      	movs	r2, r0
 8000f5e:	000b      	movs	r3, r1
 8000f60:	0010      	movs	r0, r2
 8000f62:	0019      	movs	r1, r3
 8000f64:	f7ff febe 	bl	8000ce4 <__aeabi_d2iz>
 8000f68:	0002      	movs	r2, r0
 8000f6a:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <MPU6050_Read_Accel+0x128>)
 8000f6c:	601a      	str	r2, [r3, #0]
	Az = Accel_Z_RAW/16384.0*100;
 8000f6e:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <MPU6050_Read_Accel+0x118>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	5e9b      	ldrsh	r3, [r3, r2]
 8000f74:	0018      	movs	r0, r3
 8000f76:	f7ff feeb 	bl	8000d50 <__aeabi_i2d>
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <MPU6050_Read_Accel+0x11c>)
 8000f7e:	f7ff f94f 	bl	8000220 <__aeabi_ddiv>
 8000f82:	0002      	movs	r2, r0
 8000f84:	000b      	movs	r3, r1
 8000f86:	0010      	movs	r0, r2
 8000f88:	0019      	movs	r1, r3
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <MPU6050_Read_Accel+0x120>)
 8000f8e:	f7ff fc3d 	bl	800080c <__aeabi_dmul>
 8000f92:	0002      	movs	r2, r0
 8000f94:	000b      	movs	r3, r1
 8000f96:	0010      	movs	r0, r2
 8000f98:	0019      	movs	r1, r3
 8000f9a:	f7ff fea3 	bl	8000ce4 <__aeabi_d2iz>
 8000f9e:	0002      	movs	r2, r0
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <MPU6050_Read_Accel+0x12c>)
 8000fa2:	601a      	str	r2, [r3, #0]
}
 8000fa4:	46c0      	nop			; (mov r8, r8)
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b002      	add	sp, #8
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000028 	.word	0x20000028
 8000fb0:	200000c0 	.word	0x200000c0
 8000fb4:	200000c2 	.word	0x200000c2
 8000fb8:	200000c4 	.word	0x200000c4
 8000fbc:	40d00000 	.word	0x40d00000
 8000fc0:	40590000 	.word	0x40590000
 8000fc4:	200000cc 	.word	0x200000cc
 8000fc8:	200000d0 	.word	0x200000d0
 8000fcc:	200000d4 	.word	0x200000d4

08000fd0 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro (void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000fd6:	4835      	ldr	r0, [pc, #212]	; (80010ac <MPU6050_Read_Gyro+0xdc>)
 8000fd8:	23fa      	movs	r3, #250	; 0xfa
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	2306      	movs	r3, #6
 8000fe0:	9301      	str	r3, [sp, #4]
 8000fe2:	003b      	movs	r3, r7
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	2243      	movs	r2, #67	; 0x43
 8000fea:	21d0      	movs	r1, #208	; 0xd0
 8000fec:	f000 ff64 	bl	8001eb8 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000ff0:	003b      	movs	r3, r7
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	021b      	lsls	r3, r3, #8
 8000ff6:	b21a      	sxth	r2, r3
 8000ff8:	003b      	movs	r3, r7
 8000ffa:	785b      	ldrb	r3, [r3, #1]
 8000ffc:	b21b      	sxth	r3, r3
 8000ffe:	4313      	orrs	r3, r2
 8001000:	b21a      	sxth	r2, r3
 8001002:	4b2b      	ldr	r3, [pc, #172]	; (80010b0 <MPU6050_Read_Gyro+0xe0>)
 8001004:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8001006:	003b      	movs	r3, r7
 8001008:	789b      	ldrb	r3, [r3, #2]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	b21a      	sxth	r2, r3
 800100e:	003b      	movs	r3, r7
 8001010:	78db      	ldrb	r3, [r3, #3]
 8001012:	b21b      	sxth	r3, r3
 8001014:	4313      	orrs	r3, r2
 8001016:	b21a      	sxth	r2, r3
 8001018:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <MPU6050_Read_Gyro+0xe4>)
 800101a:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800101c:	003b      	movs	r3, r7
 800101e:	791b      	ldrb	r3, [r3, #4]
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	b21a      	sxth	r2, r3
 8001024:	003b      	movs	r3, r7
 8001026:	795b      	ldrb	r3, [r3, #5]
 8001028:	b21b      	sxth	r3, r3
 800102a:	4313      	orrs	r3, r2
 800102c:	b21a      	sxth	r2, r3
 800102e:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <MPU6050_Read_Gyro+0xe8>)
 8001030:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (�/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/131.0;
 8001032:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <MPU6050_Read_Gyro+0xe0>)
 8001034:	2200      	movs	r2, #0
 8001036:	5e9b      	ldrsh	r3, [r3, r2]
 8001038:	0018      	movs	r0, r3
 800103a:	f7ff fe89 	bl	8000d50 <__aeabi_i2d>
 800103e:	2200      	movs	r2, #0
 8001040:	4b1e      	ldr	r3, [pc, #120]	; (80010bc <MPU6050_Read_Gyro+0xec>)
 8001042:	f7ff f8ed 	bl	8000220 <__aeabi_ddiv>
 8001046:	0002      	movs	r2, r0
 8001048:	000b      	movs	r3, r1
 800104a:	0010      	movs	r0, r2
 800104c:	0019      	movs	r1, r3
 800104e:	f7ff fe49 	bl	8000ce4 <__aeabi_d2iz>
 8001052:	0002      	movs	r2, r0
 8001054:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <MPU6050_Read_Gyro+0xf0>)
 8001056:	601a      	str	r2, [r3, #0]
	Gy = Gyro_Y_RAW/131.0;
 8001058:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <MPU6050_Read_Gyro+0xe4>)
 800105a:	2200      	movs	r2, #0
 800105c:	5e9b      	ldrsh	r3, [r3, r2]
 800105e:	0018      	movs	r0, r3
 8001060:	f7ff fe76 	bl	8000d50 <__aeabi_i2d>
 8001064:	2200      	movs	r2, #0
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <MPU6050_Read_Gyro+0xec>)
 8001068:	f7ff f8da 	bl	8000220 <__aeabi_ddiv>
 800106c:	0002      	movs	r2, r0
 800106e:	000b      	movs	r3, r1
 8001070:	0010      	movs	r0, r2
 8001072:	0019      	movs	r1, r3
 8001074:	f7ff fe36 	bl	8000ce4 <__aeabi_d2iz>
 8001078:	0002      	movs	r2, r0
 800107a:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <MPU6050_Read_Gyro+0xf4>)
 800107c:	601a      	str	r2, [r3, #0]
	Gz = Gyro_Z_RAW/131.0;
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <MPU6050_Read_Gyro+0xe8>)
 8001080:	2200      	movs	r2, #0
 8001082:	5e9b      	ldrsh	r3, [r3, r2]
 8001084:	0018      	movs	r0, r3
 8001086:	f7ff fe63 	bl	8000d50 <__aeabi_i2d>
 800108a:	2200      	movs	r2, #0
 800108c:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <MPU6050_Read_Gyro+0xec>)
 800108e:	f7ff f8c7 	bl	8000220 <__aeabi_ddiv>
 8001092:	0002      	movs	r2, r0
 8001094:	000b      	movs	r3, r1
 8001096:	0010      	movs	r0, r2
 8001098:	0019      	movs	r1, r3
 800109a:	f7ff fe23 	bl	8000ce4 <__aeabi_d2iz>
 800109e:	0002      	movs	r2, r0
 80010a0:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <MPU6050_Read_Gyro+0xf8>)
 80010a2:	601a      	str	r2, [r3, #0]
}
 80010a4:	46c0      	nop			; (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b002      	add	sp, #8
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000028 	.word	0x20000028
 80010b0:	200000c6 	.word	0x200000c6
 80010b4:	200000c8 	.word	0x200000c8
 80010b8:	200000ca 	.word	0x200000ca
 80010bc:	40606000 	.word	0x40606000
 80010c0:	200000d8 	.word	0x200000d8
 80010c4:	200000dc 	.word	0x200000dc
 80010c8:	200000e0 	.word	0x200000e0

080010cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80010d0:	f000 fa64 	bl	800159c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d4:	f000 f810 	bl	80010f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d8:	f000 f8f0 	bl	80012bc <MX_GPIO_Init>
  MX_I2C1_Init();
 80010dc:	f000 f86e 	bl	80011bc <MX_I2C1_Init>
  MX_I2C2_Init();
 80010e0:	f000 f8ac 	bl	800123c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  MPU6050_Init();
 80010e4:	f7ff fe82 	bl	8000dec <MPU6050_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MPU6050_Read_Accel();
 80010e8:	f7ff feda 	bl	8000ea0 <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro();
 80010ec:	f7ff ff70 	bl	8000fd0 <MPU6050_Read_Gyro>



	  	  HAL_Delay (250);  // wait for a while
 80010f0:	20fa      	movs	r0, #250	; 0xfa
 80010f2:	f000 fab7 	bl	8001664 <HAL_Delay>
	  MPU6050_Read_Accel();
 80010f6:	e7f7      	b.n	80010e8 <main+0x1c>

080010f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f8:	b590      	push	{r4, r7, lr}
 80010fa:	b097      	sub	sp, #92	; 0x5c
 80010fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fe:	2428      	movs	r4, #40	; 0x28
 8001100:	193b      	adds	r3, r7, r4
 8001102:	0018      	movs	r0, r3
 8001104:	2330      	movs	r3, #48	; 0x30
 8001106:	001a      	movs	r2, r3
 8001108:	2100      	movs	r1, #0
 800110a:	f002 f841 	bl	8003190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800110e:	2318      	movs	r3, #24
 8001110:	18fb      	adds	r3, r7, r3
 8001112:	0018      	movs	r0, r3
 8001114:	2310      	movs	r3, #16
 8001116:	001a      	movs	r2, r3
 8001118:	2100      	movs	r1, #0
 800111a:	f002 f839 	bl	8003190 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	0018      	movs	r0, r3
 8001122:	2314      	movs	r3, #20
 8001124:	001a      	movs	r2, r3
 8001126:	2100      	movs	r1, #0
 8001128:	f002 f832 	bl	8003190 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800112c:	0021      	movs	r1, r4
 800112e:	187b      	adds	r3, r7, r1
 8001130:	2202      	movs	r2, #2
 8001132:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001134:	187b      	adds	r3, r7, r1
 8001136:	2201      	movs	r2, #1
 8001138:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800113a:	187b      	adds	r3, r7, r1
 800113c:	2210      	movs	r2, #16
 800113e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001140:	187b      	adds	r3, r7, r1
 8001142:	2202      	movs	r2, #2
 8001144:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001146:	187b      	adds	r3, r7, r1
 8001148:	2200      	movs	r2, #0
 800114a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800114c:	187b      	adds	r3, r7, r1
 800114e:	22a0      	movs	r2, #160	; 0xa0
 8001150:	0392      	lsls	r2, r2, #14
 8001152:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001154:	187b      	adds	r3, r7, r1
 8001156:	2200      	movs	r2, #0
 8001158:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115a:	187b      	adds	r3, r7, r1
 800115c:	0018      	movs	r0, r3
 800115e:	f001 fac9 	bl	80026f4 <HAL_RCC_OscConfig>
 8001162:	1e03      	subs	r3, r0, #0
 8001164:	d001      	beq.n	800116a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001166:	f000 f921 	bl	80013ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116a:	2118      	movs	r1, #24
 800116c:	187b      	adds	r3, r7, r1
 800116e:	2207      	movs	r2, #7
 8001170:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001172:	187b      	adds	r3, r7, r1
 8001174:	2202      	movs	r2, #2
 8001176:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001178:	187b      	adds	r3, r7, r1
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800117e:	187b      	adds	r3, r7, r1
 8001180:	2200      	movs	r2, #0
 8001182:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001184:	187b      	adds	r3, r7, r1
 8001186:	2101      	movs	r1, #1
 8001188:	0018      	movs	r0, r3
 800118a:	f001 fdcd 	bl	8002d28 <HAL_RCC_ClockConfig>
 800118e:	1e03      	subs	r3, r0, #0
 8001190:	d001      	beq.n	8001196 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001192:	f000 f90b 	bl	80013ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	2220      	movs	r2, #32
 800119a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	0018      	movs	r0, r3
 80011a6:	f001 fef1 	bl	8002f8c <HAL_RCCEx_PeriphCLKConfig>
 80011aa:	1e03      	subs	r3, r0, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80011ae:	f000 f8fd 	bl	80013ac <Error_Handler>
  }
}
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	46bd      	mov	sp, r7
 80011b6:	b017      	add	sp, #92	; 0x5c
 80011b8:	bd90      	pop	{r4, r7, pc}
	...

080011bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011c0:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <MX_I2C1_Init+0x74>)
 80011c2:	4a1c      	ldr	r2, [pc, #112]	; (8001234 <MX_I2C1_Init+0x78>)
 80011c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <MX_I2C1_Init+0x74>)
 80011c8:	4a1b      	ldr	r2, [pc, #108]	; (8001238 <MX_I2C1_Init+0x7c>)
 80011ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011cc:	4b18      	ldr	r3, [pc, #96]	; (8001230 <MX_I2C1_Init+0x74>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011d2:	4b17      	ldr	r3, [pc, #92]	; (8001230 <MX_I2C1_Init+0x74>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <MX_I2C1_Init+0x74>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011de:	4b14      	ldr	r3, [pc, #80]	; (8001230 <MX_I2C1_Init+0x74>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <MX_I2C1_Init+0x74>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_I2C1_Init+0x74>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_I2C1_Init+0x74>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <MX_I2C1_Init+0x74>)
 80011f8:	0018      	movs	r0, r3
 80011fa:	f000 fc99 	bl	8001b30 <HAL_I2C_Init>
 80011fe:	1e03      	subs	r3, r0, #0
 8001200:	d001      	beq.n	8001206 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001202:	f000 f8d3 	bl	80013ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001206:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <MX_I2C1_Init+0x74>)
 8001208:	2100      	movs	r1, #0
 800120a:	0018      	movs	r0, r3
 800120c:	f001 f9da 	bl	80025c4 <HAL_I2CEx_ConfigAnalogFilter>
 8001210:	1e03      	subs	r3, r0, #0
 8001212:	d001      	beq.n	8001218 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001214:	f000 f8ca 	bl	80013ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <MX_I2C1_Init+0x74>)
 800121a:	2100      	movs	r1, #0
 800121c:	0018      	movs	r0, r3
 800121e:	f001 fa1d 	bl	800265c <HAL_I2CEx_ConfigDigitalFilter>
 8001222:	1e03      	subs	r3, r0, #0
 8001224:	d001      	beq.n	800122a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001226:	f000 f8c1 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000028 	.word	0x20000028
 8001234:	40005400 	.word	0x40005400
 8001238:	2000090e 	.word	0x2000090e

0800123c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001240:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <MX_I2C2_Init+0x74>)
 8001242:	4a1c      	ldr	r2, [pc, #112]	; (80012b4 <MX_I2C2_Init+0x78>)
 8001244:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001246:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <MX_I2C2_Init+0x74>)
 8001248:	4a1b      	ldr	r2, [pc, #108]	; (80012b8 <MX_I2C2_Init+0x7c>)
 800124a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800124c:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <MX_I2C2_Init+0x74>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001252:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <MX_I2C2_Init+0x74>)
 8001254:	2201      	movs	r2, #1
 8001256:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001258:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <MX_I2C2_Init+0x74>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800125e:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <MX_I2C2_Init+0x74>)
 8001260:	2200      	movs	r2, #0
 8001262:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <MX_I2C2_Init+0x74>)
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <MX_I2C2_Init+0x74>)
 800126c:	2200      	movs	r2, #0
 800126e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001270:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <MX_I2C2_Init+0x74>)
 8001272:	2200      	movs	r2, #0
 8001274:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <MX_I2C2_Init+0x74>)
 8001278:	0018      	movs	r0, r3
 800127a:	f000 fc59 	bl	8001b30 <HAL_I2C_Init>
 800127e:	1e03      	subs	r3, r0, #0
 8001280:	d001      	beq.n	8001286 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001282:	f000 f893 	bl	80013ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001286:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <MX_I2C2_Init+0x74>)
 8001288:	2100      	movs	r1, #0
 800128a:	0018      	movs	r0, r3
 800128c:	f001 f99a 	bl	80025c4 <HAL_I2CEx_ConfigAnalogFilter>
 8001290:	1e03      	subs	r3, r0, #0
 8001292:	d001      	beq.n	8001298 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001294:	f000 f88a 	bl	80013ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <MX_I2C2_Init+0x74>)
 800129a:	2100      	movs	r1, #0
 800129c:	0018      	movs	r0, r3
 800129e:	f001 f9dd 	bl	800265c <HAL_I2CEx_ConfigDigitalFilter>
 80012a2:	1e03      	subs	r3, r0, #0
 80012a4:	d001      	beq.n	80012aa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80012a6:	f000 f881 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000074 	.word	0x20000074
 80012b4:	40005800 	.word	0x40005800
 80012b8:	20303e5d 	.word	0x20303e5d

080012bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b08b      	sub	sp, #44	; 0x2c
 80012c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c2:	2414      	movs	r4, #20
 80012c4:	193b      	adds	r3, r7, r4
 80012c6:	0018      	movs	r0, r3
 80012c8:	2314      	movs	r3, #20
 80012ca:	001a      	movs	r2, r3
 80012cc:	2100      	movs	r1, #0
 80012ce:	f001 ff5f 	bl	8003190 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012d2:	4b34      	ldr	r3, [pc, #208]	; (80013a4 <MX_GPIO_Init+0xe8>)
 80012d4:	695a      	ldr	r2, [r3, #20]
 80012d6:	4b33      	ldr	r3, [pc, #204]	; (80013a4 <MX_GPIO_Init+0xe8>)
 80012d8:	2180      	movs	r1, #128	; 0x80
 80012da:	03c9      	lsls	r1, r1, #15
 80012dc:	430a      	orrs	r2, r1
 80012de:	615a      	str	r2, [r3, #20]
 80012e0:	4b30      	ldr	r3, [pc, #192]	; (80013a4 <MX_GPIO_Init+0xe8>)
 80012e2:	695a      	ldr	r2, [r3, #20]
 80012e4:	2380      	movs	r3, #128	; 0x80
 80012e6:	03db      	lsls	r3, r3, #15
 80012e8:	4013      	ands	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	4b2d      	ldr	r3, [pc, #180]	; (80013a4 <MX_GPIO_Init+0xe8>)
 80012f0:	695a      	ldr	r2, [r3, #20]
 80012f2:	4b2c      	ldr	r3, [pc, #176]	; (80013a4 <MX_GPIO_Init+0xe8>)
 80012f4:	2180      	movs	r1, #128	; 0x80
 80012f6:	0289      	lsls	r1, r1, #10
 80012f8:	430a      	orrs	r2, r1
 80012fa:	615a      	str	r2, [r3, #20]
 80012fc:	4b29      	ldr	r3, [pc, #164]	; (80013a4 <MX_GPIO_Init+0xe8>)
 80012fe:	695a      	ldr	r2, [r3, #20]
 8001300:	2380      	movs	r3, #128	; 0x80
 8001302:	029b      	lsls	r3, r3, #10
 8001304:	4013      	ands	r3, r2
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130a:	4b26      	ldr	r3, [pc, #152]	; (80013a4 <MX_GPIO_Init+0xe8>)
 800130c:	695a      	ldr	r2, [r3, #20]
 800130e:	4b25      	ldr	r3, [pc, #148]	; (80013a4 <MX_GPIO_Init+0xe8>)
 8001310:	2180      	movs	r1, #128	; 0x80
 8001312:	02c9      	lsls	r1, r1, #11
 8001314:	430a      	orrs	r2, r1
 8001316:	615a      	str	r2, [r3, #20]
 8001318:	4b22      	ldr	r3, [pc, #136]	; (80013a4 <MX_GPIO_Init+0xe8>)
 800131a:	695a      	ldr	r2, [r3, #20]
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	02db      	lsls	r3, r3, #11
 8001320:	4013      	ands	r3, r2
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001326:	4b1f      	ldr	r3, [pc, #124]	; (80013a4 <MX_GPIO_Init+0xe8>)
 8001328:	695a      	ldr	r2, [r3, #20]
 800132a:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <MX_GPIO_Init+0xe8>)
 800132c:	2180      	movs	r1, #128	; 0x80
 800132e:	0309      	lsls	r1, r1, #12
 8001330:	430a      	orrs	r2, r1
 8001332:	615a      	str	r2, [r3, #20]
 8001334:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <MX_GPIO_Init+0xe8>)
 8001336:	695a      	ldr	r2, [r3, #20]
 8001338:	2380      	movs	r3, #128	; 0x80
 800133a:	031b      	lsls	r3, r3, #12
 800133c:	4013      	ands	r3, r2
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001342:	23c0      	movs	r3, #192	; 0xc0
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4818      	ldr	r0, [pc, #96]	; (80013a8 <MX_GPIO_Init+0xec>)
 8001348:	2200      	movs	r2, #0
 800134a:	0019      	movs	r1, r3
 800134c:	f000 fbd2 	bl	8001af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001350:	193b      	adds	r3, r7, r4
 8001352:	2201      	movs	r2, #1
 8001354:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001356:	193b      	adds	r3, r7, r4
 8001358:	2290      	movs	r2, #144	; 0x90
 800135a:	0352      	lsls	r2, r2, #13
 800135c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	193b      	adds	r3, r7, r4
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001364:	193a      	adds	r2, r7, r4
 8001366:	2390      	movs	r3, #144	; 0x90
 8001368:	05db      	lsls	r3, r3, #23
 800136a:	0011      	movs	r1, r2
 800136c:	0018      	movs	r0, r3
 800136e:	f000 fa51 	bl	8001814 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8001372:	0021      	movs	r1, r4
 8001374:	187b      	adds	r3, r7, r1
 8001376:	22c0      	movs	r2, #192	; 0xc0
 8001378:	0092      	lsls	r2, r2, #2
 800137a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137c:	187b      	adds	r3, r7, r1
 800137e:	2201      	movs	r2, #1
 8001380:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	187b      	adds	r3, r7, r1
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	187b      	adds	r3, r7, r1
 800138a:	2200      	movs	r2, #0
 800138c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138e:	187b      	adds	r3, r7, r1
 8001390:	4a05      	ldr	r2, [pc, #20]	; (80013a8 <MX_GPIO_Init+0xec>)
 8001392:	0019      	movs	r1, r3
 8001394:	0010      	movs	r0, r2
 8001396:	f000 fa3d 	bl	8001814 <HAL_GPIO_Init>

}
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	46bd      	mov	sp, r7
 800139e:	b00b      	add	sp, #44	; 0x2c
 80013a0:	bd90      	pop	{r4, r7, pc}
 80013a2:	46c0      	nop			; (mov r8, r8)
 80013a4:	40021000 	.word	0x40021000
 80013a8:	48000800 	.word	0x48000800

080013ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b0:	b672      	cpsid	i
}
 80013b2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <Error_Handler+0x8>
	...

080013b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013be:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <HAL_MspInit+0x44>)
 80013c0:	699a      	ldr	r2, [r3, #24]
 80013c2:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <HAL_MspInit+0x44>)
 80013c4:	2101      	movs	r1, #1
 80013c6:	430a      	orrs	r2, r1
 80013c8:	619a      	str	r2, [r3, #24]
 80013ca:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <HAL_MspInit+0x44>)
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	2201      	movs	r2, #1
 80013d0:	4013      	ands	r3, r2
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d6:	4b09      	ldr	r3, [pc, #36]	; (80013fc <HAL_MspInit+0x44>)
 80013d8:	69da      	ldr	r2, [r3, #28]
 80013da:	4b08      	ldr	r3, [pc, #32]	; (80013fc <HAL_MspInit+0x44>)
 80013dc:	2180      	movs	r1, #128	; 0x80
 80013de:	0549      	lsls	r1, r1, #21
 80013e0:	430a      	orrs	r2, r1
 80013e2:	61da      	str	r2, [r3, #28]
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <HAL_MspInit+0x44>)
 80013e6:	69da      	ldr	r2, [r3, #28]
 80013e8:	2380      	movs	r3, #128	; 0x80
 80013ea:	055b      	lsls	r3, r3, #21
 80013ec:	4013      	ands	r3, r2
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	46bd      	mov	sp, r7
 80013f6:	b002      	add	sp, #8
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	40021000 	.word	0x40021000

08001400 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001400:	b590      	push	{r4, r7, lr}
 8001402:	b08d      	sub	sp, #52	; 0x34
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	241c      	movs	r4, #28
 800140a:	193b      	adds	r3, r7, r4
 800140c:	0018      	movs	r0, r3
 800140e:	2314      	movs	r3, #20
 8001410:	001a      	movs	r2, r3
 8001412:	2100      	movs	r1, #0
 8001414:	f001 febc 	bl	8003190 <memset>
  if(hi2c->Instance==I2C1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a38      	ldr	r2, [pc, #224]	; (8001500 <HAL_I2C_MspInit+0x100>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d132      	bne.n	8001488 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001422:	4b38      	ldr	r3, [pc, #224]	; (8001504 <HAL_I2C_MspInit+0x104>)
 8001424:	695a      	ldr	r2, [r3, #20]
 8001426:	4b37      	ldr	r3, [pc, #220]	; (8001504 <HAL_I2C_MspInit+0x104>)
 8001428:	2180      	movs	r1, #128	; 0x80
 800142a:	02c9      	lsls	r1, r1, #11
 800142c:	430a      	orrs	r2, r1
 800142e:	615a      	str	r2, [r3, #20]
 8001430:	4b34      	ldr	r3, [pc, #208]	; (8001504 <HAL_I2C_MspInit+0x104>)
 8001432:	695a      	ldr	r2, [r3, #20]
 8001434:	2380      	movs	r3, #128	; 0x80
 8001436:	02db      	lsls	r3, r3, #11
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
 800143c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800143e:	0021      	movs	r1, r4
 8001440:	187b      	adds	r3, r7, r1
 8001442:	22c0      	movs	r2, #192	; 0xc0
 8001444:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001446:	187b      	adds	r3, r7, r1
 8001448:	2212      	movs	r2, #18
 800144a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	187b      	adds	r3, r7, r1
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001452:	187b      	adds	r3, r7, r1
 8001454:	2203      	movs	r2, #3
 8001456:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001458:	187b      	adds	r3, r7, r1
 800145a:	2201      	movs	r2, #1
 800145c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145e:	187b      	adds	r3, r7, r1
 8001460:	4a29      	ldr	r2, [pc, #164]	; (8001508 <HAL_I2C_MspInit+0x108>)
 8001462:	0019      	movs	r1, r3
 8001464:	0010      	movs	r0, r2
 8001466:	f000 f9d5 	bl	8001814 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800146a:	4b26      	ldr	r3, [pc, #152]	; (8001504 <HAL_I2C_MspInit+0x104>)
 800146c:	69da      	ldr	r2, [r3, #28]
 800146e:	4b25      	ldr	r3, [pc, #148]	; (8001504 <HAL_I2C_MspInit+0x104>)
 8001470:	2180      	movs	r1, #128	; 0x80
 8001472:	0389      	lsls	r1, r1, #14
 8001474:	430a      	orrs	r2, r1
 8001476:	61da      	str	r2, [r3, #28]
 8001478:	4b22      	ldr	r3, [pc, #136]	; (8001504 <HAL_I2C_MspInit+0x104>)
 800147a:	69da      	ldr	r2, [r3, #28]
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	039b      	lsls	r3, r3, #14
 8001480:	4013      	ands	r3, r2
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001486:	e037      	b.n	80014f8 <HAL_I2C_MspInit+0xf8>
  else if(hi2c->Instance==I2C2)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a1f      	ldr	r2, [pc, #124]	; (800150c <HAL_I2C_MspInit+0x10c>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d132      	bne.n	80014f8 <HAL_I2C_MspInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <HAL_I2C_MspInit+0x104>)
 8001494:	695a      	ldr	r2, [r3, #20]
 8001496:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <HAL_I2C_MspInit+0x104>)
 8001498:	2180      	movs	r1, #128	; 0x80
 800149a:	02c9      	lsls	r1, r1, #11
 800149c:	430a      	orrs	r2, r1
 800149e:	615a      	str	r2, [r3, #20]
 80014a0:	4b18      	ldr	r3, [pc, #96]	; (8001504 <HAL_I2C_MspInit+0x104>)
 80014a2:	695a      	ldr	r2, [r3, #20]
 80014a4:	2380      	movs	r3, #128	; 0x80
 80014a6:	02db      	lsls	r3, r3, #11
 80014a8:	4013      	ands	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014ae:	211c      	movs	r1, #28
 80014b0:	187b      	adds	r3, r7, r1
 80014b2:	22c0      	movs	r2, #192	; 0xc0
 80014b4:	0112      	lsls	r2, r2, #4
 80014b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014b8:	187b      	adds	r3, r7, r1
 80014ba:	2212      	movs	r2, #18
 80014bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	187b      	adds	r3, r7, r1
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014c4:	187b      	adds	r3, r7, r1
 80014c6:	2203      	movs	r2, #3
 80014c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 80014ca:	187b      	adds	r3, r7, r1
 80014cc:	2201      	movs	r2, #1
 80014ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d0:	187b      	adds	r3, r7, r1
 80014d2:	4a0d      	ldr	r2, [pc, #52]	; (8001508 <HAL_I2C_MspInit+0x108>)
 80014d4:	0019      	movs	r1, r3
 80014d6:	0010      	movs	r0, r2
 80014d8:	f000 f99c 	bl	8001814 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <HAL_I2C_MspInit+0x104>)
 80014de:	69da      	ldr	r2, [r3, #28]
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <HAL_I2C_MspInit+0x104>)
 80014e2:	2180      	movs	r1, #128	; 0x80
 80014e4:	03c9      	lsls	r1, r1, #15
 80014e6:	430a      	orrs	r2, r1
 80014e8:	61da      	str	r2, [r3, #28]
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_I2C_MspInit+0x104>)
 80014ec:	69da      	ldr	r2, [r3, #28]
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	03db      	lsls	r3, r3, #15
 80014f2:	4013      	ands	r3, r2
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]
}
 80014f8:	46c0      	nop			; (mov r8, r8)
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b00d      	add	sp, #52	; 0x34
 80014fe:	bd90      	pop	{r4, r7, pc}
 8001500:	40005400 	.word	0x40005400
 8001504:	40021000 	.word	0x40021000
 8001508:	48000400 	.word	0x48000400
 800150c:	40005800 	.word	0x40005800

08001510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <NMI_Handler+0x4>

08001516 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800151a:	e7fe      	b.n	800151a <HardFault_Handler+0x4>

0800151c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001520:	46c0      	nop			; (mov r8, r8)
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001534:	f000 f87a 	bl	800162c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001538:	46c0      	nop			; (mov r8, r8)
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001548:	480d      	ldr	r0, [pc, #52]	; (8001580 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800154a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800154c:	480d      	ldr	r0, [pc, #52]	; (8001584 <LoopForever+0x6>)
  ldr r1, =_edata
 800154e:	490e      	ldr	r1, [pc, #56]	; (8001588 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001550:	4a0e      	ldr	r2, [pc, #56]	; (800158c <LoopForever+0xe>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001554:	e002      	b.n	800155c <LoopCopyDataInit>

08001556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800155a:	3304      	adds	r3, #4

0800155c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800155c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001560:	d3f9      	bcc.n	8001556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001562:	4a0b      	ldr	r2, [pc, #44]	; (8001590 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001564:	4c0b      	ldr	r4, [pc, #44]	; (8001594 <LoopForever+0x16>)
  movs r3, #0
 8001566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001568:	e001      	b.n	800156e <LoopFillZerobss>

0800156a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800156a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800156c:	3204      	adds	r2, #4

0800156e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800156e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001570:	d3fb      	bcc.n	800156a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001572:	f7ff ffe4 	bl	800153e <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001576:	f001 fde7 	bl	8003148 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800157a:	f7ff fda7 	bl	80010cc <main>

0800157e <LoopForever>:

LoopForever:
    b LoopForever
 800157e:	e7fe      	b.n	800157e <LoopForever>
  ldr   r0, =_estack
 8001580:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001588:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800158c:	08003270 	.word	0x08003270
  ldr r2, =_sbss
 8001590:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001594:	200000e8 	.word	0x200000e8

08001598 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001598:	e7fe      	b.n	8001598 <ADC1_COMP_IRQHandler>
	...

0800159c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015a0:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <HAL_Init+0x24>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <HAL_Init+0x24>)
 80015a6:	2110      	movs	r1, #16
 80015a8:	430a      	orrs	r2, r1
 80015aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80015ac:	2000      	movs	r0, #0
 80015ae:	f000 f809 	bl	80015c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015b2:	f7ff ff01 	bl	80013b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	0018      	movs	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	46c0      	nop			; (mov r8, r8)
 80015c0:	40022000 	.word	0x40022000

080015c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c4:	b590      	push	{r4, r7, lr}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015cc:	4b14      	ldr	r3, [pc, #80]	; (8001620 <HAL_InitTick+0x5c>)
 80015ce:	681c      	ldr	r4, [r3, #0]
 80015d0:	4b14      	ldr	r3, [pc, #80]	; (8001624 <HAL_InitTick+0x60>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	0019      	movs	r1, r3
 80015d6:	23fa      	movs	r3, #250	; 0xfa
 80015d8:	0098      	lsls	r0, r3, #2
 80015da:	f7fe fd95 	bl	8000108 <__udivsi3>
 80015de:	0003      	movs	r3, r0
 80015e0:	0019      	movs	r1, r3
 80015e2:	0020      	movs	r0, r4
 80015e4:	f7fe fd90 	bl	8000108 <__udivsi3>
 80015e8:	0003      	movs	r3, r0
 80015ea:	0018      	movs	r0, r3
 80015ec:	f000 f905 	bl	80017fa <HAL_SYSTICK_Config>
 80015f0:	1e03      	subs	r3, r0, #0
 80015f2:	d001      	beq.n	80015f8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e00f      	b.n	8001618 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b03      	cmp	r3, #3
 80015fc:	d80b      	bhi.n	8001616 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	2301      	movs	r3, #1
 8001602:	425b      	negs	r3, r3
 8001604:	2200      	movs	r2, #0
 8001606:	0018      	movs	r0, r3
 8001608:	f000 f8e2 	bl	80017d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_InitTick+0x64>)
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	e000      	b.n	8001618 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
}
 8001618:	0018      	movs	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	b003      	add	sp, #12
 800161e:	bd90      	pop	{r4, r7, pc}
 8001620:	20000000 	.word	0x20000000
 8001624:	20000008 	.word	0x20000008
 8001628:	20000004 	.word	0x20000004

0800162c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001630:	4b05      	ldr	r3, [pc, #20]	; (8001648 <HAL_IncTick+0x1c>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	001a      	movs	r2, r3
 8001636:	4b05      	ldr	r3, [pc, #20]	; (800164c <HAL_IncTick+0x20>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	18d2      	adds	r2, r2, r3
 800163c:	4b03      	ldr	r3, [pc, #12]	; (800164c <HAL_IncTick+0x20>)
 800163e:	601a      	str	r2, [r3, #0]
}
 8001640:	46c0      	nop			; (mov r8, r8)
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	20000008 	.word	0x20000008
 800164c:	200000e4 	.word	0x200000e4

08001650 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  return uwTick;
 8001654:	4b02      	ldr	r3, [pc, #8]	; (8001660 <HAL_GetTick+0x10>)
 8001656:	681b      	ldr	r3, [r3, #0]
}
 8001658:	0018      	movs	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	200000e4 	.word	0x200000e4

08001664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800166c:	f7ff fff0 	bl	8001650 <HAL_GetTick>
 8001670:	0003      	movs	r3, r0
 8001672:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	3301      	adds	r3, #1
 800167c:	d005      	beq.n	800168a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800167e:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <HAL_Delay+0x44>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	001a      	movs	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	189b      	adds	r3, r3, r2
 8001688:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	f7ff ffe0 	bl	8001650 <HAL_GetTick>
 8001690:	0002      	movs	r2, r0
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	429a      	cmp	r2, r3
 800169a:	d8f7      	bhi.n	800168c <HAL_Delay+0x28>
  {
  }
}
 800169c:	46c0      	nop			; (mov r8, r8)
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	46bd      	mov	sp, r7
 80016a2:	b004      	add	sp, #16
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	20000008 	.word	0x20000008

080016ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016ac:	b590      	push	{r4, r7, lr}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	0002      	movs	r2, r0
 80016b4:	6039      	str	r1, [r7, #0]
 80016b6:	1dfb      	adds	r3, r7, #7
 80016b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016ba:	1dfb      	adds	r3, r7, #7
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b7f      	cmp	r3, #127	; 0x7f
 80016c0:	d828      	bhi.n	8001714 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016c2:	4a2f      	ldr	r2, [pc, #188]	; (8001780 <__NVIC_SetPriority+0xd4>)
 80016c4:	1dfb      	adds	r3, r7, #7
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	b25b      	sxtb	r3, r3
 80016ca:	089b      	lsrs	r3, r3, #2
 80016cc:	33c0      	adds	r3, #192	; 0xc0
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	589b      	ldr	r3, [r3, r2]
 80016d2:	1dfa      	adds	r2, r7, #7
 80016d4:	7812      	ldrb	r2, [r2, #0]
 80016d6:	0011      	movs	r1, r2
 80016d8:	2203      	movs	r2, #3
 80016da:	400a      	ands	r2, r1
 80016dc:	00d2      	lsls	r2, r2, #3
 80016de:	21ff      	movs	r1, #255	; 0xff
 80016e0:	4091      	lsls	r1, r2
 80016e2:	000a      	movs	r2, r1
 80016e4:	43d2      	mvns	r2, r2
 80016e6:	401a      	ands	r2, r3
 80016e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	019b      	lsls	r3, r3, #6
 80016ee:	22ff      	movs	r2, #255	; 0xff
 80016f0:	401a      	ands	r2, r3
 80016f2:	1dfb      	adds	r3, r7, #7
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	0018      	movs	r0, r3
 80016f8:	2303      	movs	r3, #3
 80016fa:	4003      	ands	r3, r0
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001700:	481f      	ldr	r0, [pc, #124]	; (8001780 <__NVIC_SetPriority+0xd4>)
 8001702:	1dfb      	adds	r3, r7, #7
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	b25b      	sxtb	r3, r3
 8001708:	089b      	lsrs	r3, r3, #2
 800170a:	430a      	orrs	r2, r1
 800170c:	33c0      	adds	r3, #192	; 0xc0
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001712:	e031      	b.n	8001778 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001714:	4a1b      	ldr	r2, [pc, #108]	; (8001784 <__NVIC_SetPriority+0xd8>)
 8001716:	1dfb      	adds	r3, r7, #7
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	0019      	movs	r1, r3
 800171c:	230f      	movs	r3, #15
 800171e:	400b      	ands	r3, r1
 8001720:	3b08      	subs	r3, #8
 8001722:	089b      	lsrs	r3, r3, #2
 8001724:	3306      	adds	r3, #6
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	18d3      	adds	r3, r2, r3
 800172a:	3304      	adds	r3, #4
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	1dfa      	adds	r2, r7, #7
 8001730:	7812      	ldrb	r2, [r2, #0]
 8001732:	0011      	movs	r1, r2
 8001734:	2203      	movs	r2, #3
 8001736:	400a      	ands	r2, r1
 8001738:	00d2      	lsls	r2, r2, #3
 800173a:	21ff      	movs	r1, #255	; 0xff
 800173c:	4091      	lsls	r1, r2
 800173e:	000a      	movs	r2, r1
 8001740:	43d2      	mvns	r2, r2
 8001742:	401a      	ands	r2, r3
 8001744:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	019b      	lsls	r3, r3, #6
 800174a:	22ff      	movs	r2, #255	; 0xff
 800174c:	401a      	ands	r2, r3
 800174e:	1dfb      	adds	r3, r7, #7
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	0018      	movs	r0, r3
 8001754:	2303      	movs	r3, #3
 8001756:	4003      	ands	r3, r0
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800175c:	4809      	ldr	r0, [pc, #36]	; (8001784 <__NVIC_SetPriority+0xd8>)
 800175e:	1dfb      	adds	r3, r7, #7
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	001c      	movs	r4, r3
 8001764:	230f      	movs	r3, #15
 8001766:	4023      	ands	r3, r4
 8001768:	3b08      	subs	r3, #8
 800176a:	089b      	lsrs	r3, r3, #2
 800176c:	430a      	orrs	r2, r1
 800176e:	3306      	adds	r3, #6
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	18c3      	adds	r3, r0, r3
 8001774:	3304      	adds	r3, #4
 8001776:	601a      	str	r2, [r3, #0]
}
 8001778:	46c0      	nop			; (mov r8, r8)
 800177a:	46bd      	mov	sp, r7
 800177c:	b003      	add	sp, #12
 800177e:	bd90      	pop	{r4, r7, pc}
 8001780:	e000e100 	.word	0xe000e100
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	1e5a      	subs	r2, r3, #1
 8001794:	2380      	movs	r3, #128	; 0x80
 8001796:	045b      	lsls	r3, r3, #17
 8001798:	429a      	cmp	r2, r3
 800179a:	d301      	bcc.n	80017a0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800179c:	2301      	movs	r3, #1
 800179e:	e010      	b.n	80017c2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a0:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <SysTick_Config+0x44>)
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	3a01      	subs	r2, #1
 80017a6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017a8:	2301      	movs	r3, #1
 80017aa:	425b      	negs	r3, r3
 80017ac:	2103      	movs	r1, #3
 80017ae:	0018      	movs	r0, r3
 80017b0:	f7ff ff7c 	bl	80016ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <SysTick_Config+0x44>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ba:	4b04      	ldr	r3, [pc, #16]	; (80017cc <SysTick_Config+0x44>)
 80017bc:	2207      	movs	r2, #7
 80017be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	0018      	movs	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	b002      	add	sp, #8
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	46c0      	nop			; (mov r8, r8)
 80017cc:	e000e010 	.word	0xe000e010

080017d0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	607a      	str	r2, [r7, #4]
 80017da:	210f      	movs	r1, #15
 80017dc:	187b      	adds	r3, r7, r1
 80017de:	1c02      	adds	r2, r0, #0
 80017e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	187b      	adds	r3, r7, r1
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	b25b      	sxtb	r3, r3
 80017ea:	0011      	movs	r1, r2
 80017ec:	0018      	movs	r0, r3
 80017ee:	f7ff ff5d 	bl	80016ac <__NVIC_SetPriority>
}
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	46bd      	mov	sp, r7
 80017f6:	b004      	add	sp, #16
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	0018      	movs	r0, r3
 8001806:	f7ff ffbf 	bl	8001788 <SysTick_Config>
 800180a:	0003      	movs	r3, r0
}
 800180c:	0018      	movs	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	b002      	add	sp, #8
 8001812:	bd80      	pop	{r7, pc}

08001814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001822:	e14f      	b.n	8001ac4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2101      	movs	r1, #1
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	4091      	lsls	r1, r2
 800182e:	000a      	movs	r2, r1
 8001830:	4013      	ands	r3, r2
 8001832:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d100      	bne.n	800183c <HAL_GPIO_Init+0x28>
 800183a:	e140      	b.n	8001abe <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2203      	movs	r2, #3
 8001842:	4013      	ands	r3, r2
 8001844:	2b01      	cmp	r3, #1
 8001846:	d005      	beq.n	8001854 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2203      	movs	r2, #3
 800184e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001850:	2b02      	cmp	r3, #2
 8001852:	d130      	bne.n	80018b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	2203      	movs	r2, #3
 8001860:	409a      	lsls	r2, r3
 8001862:	0013      	movs	r3, r2
 8001864:	43da      	mvns	r2, r3
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	4013      	ands	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	68da      	ldr	r2, [r3, #12]
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	409a      	lsls	r2, r3
 8001876:	0013      	movs	r3, r2
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4313      	orrs	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800188a:	2201      	movs	r2, #1
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	409a      	lsls	r2, r3
 8001890:	0013      	movs	r3, r2
 8001892:	43da      	mvns	r2, r3
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	4013      	ands	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	091b      	lsrs	r3, r3, #4
 80018a0:	2201      	movs	r2, #1
 80018a2:	401a      	ands	r2, r3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	409a      	lsls	r2, r3
 80018a8:	0013      	movs	r3, r2
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2203      	movs	r2, #3
 80018bc:	4013      	ands	r3, r2
 80018be:	2b03      	cmp	r3, #3
 80018c0:	d017      	beq.n	80018f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	2203      	movs	r2, #3
 80018ce:	409a      	lsls	r2, r3
 80018d0:	0013      	movs	r3, r2
 80018d2:	43da      	mvns	r2, r3
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	4013      	ands	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	409a      	lsls	r2, r3
 80018e4:	0013      	movs	r3, r2
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2203      	movs	r2, #3
 80018f8:	4013      	ands	r3, r2
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d123      	bne.n	8001946 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	08da      	lsrs	r2, r3, #3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3208      	adds	r2, #8
 8001906:	0092      	lsls	r2, r2, #2
 8001908:	58d3      	ldr	r3, [r2, r3]
 800190a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	2207      	movs	r2, #7
 8001910:	4013      	ands	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	220f      	movs	r2, #15
 8001916:	409a      	lsls	r2, r3
 8001918:	0013      	movs	r3, r2
 800191a:	43da      	mvns	r2, r3
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	691a      	ldr	r2, [r3, #16]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	2107      	movs	r1, #7
 800192a:	400b      	ands	r3, r1
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	409a      	lsls	r2, r3
 8001930:	0013      	movs	r3, r2
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4313      	orrs	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	08da      	lsrs	r2, r3, #3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3208      	adds	r2, #8
 8001940:	0092      	lsls	r2, r2, #2
 8001942:	6939      	ldr	r1, [r7, #16]
 8001944:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	2203      	movs	r2, #3
 8001952:	409a      	lsls	r2, r3
 8001954:	0013      	movs	r3, r2
 8001956:	43da      	mvns	r2, r3
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	4013      	ands	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2203      	movs	r2, #3
 8001964:	401a      	ands	r2, r3
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	409a      	lsls	r2, r3
 800196c:	0013      	movs	r3, r2
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	23c0      	movs	r3, #192	; 0xc0
 8001980:	029b      	lsls	r3, r3, #10
 8001982:	4013      	ands	r3, r2
 8001984:	d100      	bne.n	8001988 <HAL_GPIO_Init+0x174>
 8001986:	e09a      	b.n	8001abe <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001988:	4b54      	ldr	r3, [pc, #336]	; (8001adc <HAL_GPIO_Init+0x2c8>)
 800198a:	699a      	ldr	r2, [r3, #24]
 800198c:	4b53      	ldr	r3, [pc, #332]	; (8001adc <HAL_GPIO_Init+0x2c8>)
 800198e:	2101      	movs	r1, #1
 8001990:	430a      	orrs	r2, r1
 8001992:	619a      	str	r2, [r3, #24]
 8001994:	4b51      	ldr	r3, [pc, #324]	; (8001adc <HAL_GPIO_Init+0x2c8>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	2201      	movs	r2, #1
 800199a:	4013      	ands	r3, r2
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019a0:	4a4f      	ldr	r2, [pc, #316]	; (8001ae0 <HAL_GPIO_Init+0x2cc>)
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	089b      	lsrs	r3, r3, #2
 80019a6:	3302      	adds	r3, #2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	589b      	ldr	r3, [r3, r2]
 80019ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	2203      	movs	r2, #3
 80019b2:	4013      	ands	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	220f      	movs	r2, #15
 80019b8:	409a      	lsls	r2, r3
 80019ba:	0013      	movs	r3, r2
 80019bc:	43da      	mvns	r2, r3
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	2390      	movs	r3, #144	; 0x90
 80019c8:	05db      	lsls	r3, r3, #23
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d013      	beq.n	80019f6 <HAL_GPIO_Init+0x1e2>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a44      	ldr	r2, [pc, #272]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d00d      	beq.n	80019f2 <HAL_GPIO_Init+0x1de>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a43      	ldr	r2, [pc, #268]	; (8001ae8 <HAL_GPIO_Init+0x2d4>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d007      	beq.n	80019ee <HAL_GPIO_Init+0x1da>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a42      	ldr	r2, [pc, #264]	; (8001aec <HAL_GPIO_Init+0x2d8>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d101      	bne.n	80019ea <HAL_GPIO_Init+0x1d6>
 80019e6:	2303      	movs	r3, #3
 80019e8:	e006      	b.n	80019f8 <HAL_GPIO_Init+0x1e4>
 80019ea:	2305      	movs	r3, #5
 80019ec:	e004      	b.n	80019f8 <HAL_GPIO_Init+0x1e4>
 80019ee:	2302      	movs	r3, #2
 80019f0:	e002      	b.n	80019f8 <HAL_GPIO_Init+0x1e4>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <HAL_GPIO_Init+0x1e4>
 80019f6:	2300      	movs	r3, #0
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	2103      	movs	r1, #3
 80019fc:	400a      	ands	r2, r1
 80019fe:	0092      	lsls	r2, r2, #2
 8001a00:	4093      	lsls	r3, r2
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a08:	4935      	ldr	r1, [pc, #212]	; (8001ae0 <HAL_GPIO_Init+0x2cc>)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	089b      	lsrs	r3, r3, #2
 8001a0e:	3302      	adds	r3, #2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a16:	4b36      	ldr	r3, [pc, #216]	; (8001af0 <HAL_GPIO_Init+0x2dc>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	43da      	mvns	r2, r3
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	4013      	ands	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	2380      	movs	r3, #128	; 0x80
 8001a2c:	025b      	lsls	r3, r3, #9
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a3a:	4b2d      	ldr	r3, [pc, #180]	; (8001af0 <HAL_GPIO_Init+0x2dc>)
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001a40:	4b2b      	ldr	r3, [pc, #172]	; (8001af0 <HAL_GPIO_Init+0x2dc>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	43da      	mvns	r2, r3
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	2380      	movs	r3, #128	; 0x80
 8001a56:	029b      	lsls	r3, r3, #10
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a64:	4b22      	ldr	r3, [pc, #136]	; (8001af0 <HAL_GPIO_Init+0x2dc>)
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a6a:	4b21      	ldr	r3, [pc, #132]	; (8001af0 <HAL_GPIO_Init+0x2dc>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	43da      	mvns	r2, r3
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	4013      	ands	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685a      	ldr	r2, [r3, #4]
 8001a7e:	2380      	movs	r3, #128	; 0x80
 8001a80:	035b      	lsls	r3, r3, #13
 8001a82:	4013      	ands	r3, r2
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a8e:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <HAL_GPIO_Init+0x2dc>)
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001a94:	4b16      	ldr	r3, [pc, #88]	; (8001af0 <HAL_GPIO_Init+0x2dc>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	43da      	mvns	r2, r3
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	2380      	movs	r3, #128	; 0x80
 8001aaa:	039b      	lsls	r3, r3, #14
 8001aac:	4013      	ands	r3, r2
 8001aae:	d003      	beq.n	8001ab8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ab8:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <HAL_GPIO_Init+0x2dc>)
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	40da      	lsrs	r2, r3
 8001acc:	1e13      	subs	r3, r2, #0
 8001ace:	d000      	beq.n	8001ad2 <HAL_GPIO_Init+0x2be>
 8001ad0:	e6a8      	b.n	8001824 <HAL_GPIO_Init+0x10>
  } 
}
 8001ad2:	46c0      	nop			; (mov r8, r8)
 8001ad4:	46c0      	nop			; (mov r8, r8)
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	b006      	add	sp, #24
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40010000 	.word	0x40010000
 8001ae4:	48000400 	.word	0x48000400
 8001ae8:	48000800 	.word	0x48000800
 8001aec:	48000c00 	.word	0x48000c00
 8001af0:	40010400 	.word	0x40010400

08001af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	0008      	movs	r0, r1
 8001afe:	0011      	movs	r1, r2
 8001b00:	1cbb      	adds	r3, r7, #2
 8001b02:	1c02      	adds	r2, r0, #0
 8001b04:	801a      	strh	r2, [r3, #0]
 8001b06:	1c7b      	adds	r3, r7, #1
 8001b08:	1c0a      	adds	r2, r1, #0
 8001b0a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b0c:	1c7b      	adds	r3, r7, #1
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d004      	beq.n	8001b1e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b14:	1cbb      	adds	r3, r7, #2
 8001b16:	881a      	ldrh	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b1c:	e003      	b.n	8001b26 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b1e:	1cbb      	adds	r3, r7, #2
 8001b20:	881a      	ldrh	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	b002      	add	sp, #8
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e082      	b.n	8001c48 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2241      	movs	r2, #65	; 0x41
 8001b46:	5c9b      	ldrb	r3, [r3, r2]
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d107      	bne.n	8001b5e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2240      	movs	r2, #64	; 0x40
 8001b52:	2100      	movs	r1, #0
 8001b54:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f7ff fc51 	bl	8001400 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2241      	movs	r2, #65	; 0x41
 8001b62:	2124      	movs	r1, #36	; 0x24
 8001b64:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2101      	movs	r1, #1
 8001b72:	438a      	bics	r2, r1
 8001b74:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4934      	ldr	r1, [pc, #208]	; (8001c50 <HAL_I2C_Init+0x120>)
 8001b80:	400a      	ands	r2, r1
 8001b82:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689a      	ldr	r2, [r3, #8]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4931      	ldr	r1, [pc, #196]	; (8001c54 <HAL_I2C_Init+0x124>)
 8001b90:	400a      	ands	r2, r1
 8001b92:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d108      	bne.n	8001bae <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2180      	movs	r1, #128	; 0x80
 8001ba6:	0209      	lsls	r1, r1, #8
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	e007      	b.n	8001bbe <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689a      	ldr	r2, [r3, #8]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2184      	movs	r1, #132	; 0x84
 8001bb8:	0209      	lsls	r1, r1, #8
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d104      	bne.n	8001bd0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2280      	movs	r2, #128	; 0x80
 8001bcc:	0112      	lsls	r2, r2, #4
 8001bce:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	491f      	ldr	r1, [pc, #124]	; (8001c58 <HAL_I2C_Init+0x128>)
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68da      	ldr	r2, [r3, #12]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	491a      	ldr	r1, [pc, #104]	; (8001c54 <HAL_I2C_Init+0x124>)
 8001bec:	400a      	ands	r2, r1
 8001bee:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691a      	ldr	r2, [r3, #16]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69d9      	ldr	r1, [r3, #28]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a1a      	ldr	r2, [r3, #32]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2101      	movs	r1, #1
 8001c26:	430a      	orrs	r2, r1
 8001c28:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2241      	movs	r2, #65	; 0x41
 8001c34:	2120      	movs	r1, #32
 8001c36:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2242      	movs	r2, #66	; 0x42
 8001c42:	2100      	movs	r1, #0
 8001c44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	0018      	movs	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	b002      	add	sp, #8
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	f0ffffff 	.word	0xf0ffffff
 8001c54:	ffff7fff 	.word	0xffff7fff
 8001c58:	02008000 	.word	0x02008000

08001c5c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c5c:	b590      	push	{r4, r7, lr}
 8001c5e:	b089      	sub	sp, #36	; 0x24
 8001c60:	af02      	add	r7, sp, #8
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	000c      	movs	r4, r1
 8001c66:	0010      	movs	r0, r2
 8001c68:	0019      	movs	r1, r3
 8001c6a:	230a      	movs	r3, #10
 8001c6c:	18fb      	adds	r3, r7, r3
 8001c6e:	1c22      	adds	r2, r4, #0
 8001c70:	801a      	strh	r2, [r3, #0]
 8001c72:	2308      	movs	r3, #8
 8001c74:	18fb      	adds	r3, r7, r3
 8001c76:	1c02      	adds	r2, r0, #0
 8001c78:	801a      	strh	r2, [r3, #0]
 8001c7a:	1dbb      	adds	r3, r7, #6
 8001c7c:	1c0a      	adds	r2, r1, #0
 8001c7e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2241      	movs	r2, #65	; 0x41
 8001c84:	5c9b      	ldrb	r3, [r3, r2]
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b20      	cmp	r3, #32
 8001c8a:	d000      	beq.n	8001c8e <HAL_I2C_Mem_Write+0x32>
 8001c8c:	e10c      	b.n	8001ea8 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d004      	beq.n	8001c9e <HAL_I2C_Mem_Write+0x42>
 8001c94:	232c      	movs	r3, #44	; 0x2c
 8001c96:	18fb      	adds	r3, r7, r3
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d105      	bne.n	8001caa <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2280      	movs	r2, #128	; 0x80
 8001ca2:	0092      	lsls	r2, r2, #2
 8001ca4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e0ff      	b.n	8001eaa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2240      	movs	r2, #64	; 0x40
 8001cae:	5c9b      	ldrb	r3, [r3, r2]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d101      	bne.n	8001cb8 <HAL_I2C_Mem_Write+0x5c>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	e0f8      	b.n	8001eaa <HAL_I2C_Mem_Write+0x24e>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2240      	movs	r2, #64	; 0x40
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001cc0:	f7ff fcc6 	bl	8001650 <HAL_GetTick>
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cc8:	2380      	movs	r3, #128	; 0x80
 8001cca:	0219      	lsls	r1, r3, #8
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	2319      	movs	r3, #25
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f000 fb0b 	bl	80022f0 <I2C_WaitOnFlagUntilTimeout>
 8001cda:	1e03      	subs	r3, r0, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e0e3      	b.n	8001eaa <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2241      	movs	r2, #65	; 0x41
 8001ce6:	2121      	movs	r1, #33	; 0x21
 8001ce8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2242      	movs	r2, #66	; 0x42
 8001cee:	2140      	movs	r1, #64	; 0x40
 8001cf0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	222c      	movs	r2, #44	; 0x2c
 8001d02:	18ba      	adds	r2, r7, r2
 8001d04:	8812      	ldrh	r2, [r2, #0]
 8001d06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d0e:	1dbb      	adds	r3, r7, #6
 8001d10:	881c      	ldrh	r4, [r3, #0]
 8001d12:	2308      	movs	r3, #8
 8001d14:	18fb      	adds	r3, r7, r3
 8001d16:	881a      	ldrh	r2, [r3, #0]
 8001d18:	230a      	movs	r3, #10
 8001d1a:	18fb      	adds	r3, r7, r3
 8001d1c:	8819      	ldrh	r1, [r3, #0]
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	9301      	str	r3, [sp, #4]
 8001d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	0023      	movs	r3, r4
 8001d2a:	f000 f9f9 	bl	8002120 <I2C_RequestMemoryWrite>
 8001d2e:	1e03      	subs	r3, r0, #0
 8001d30:	d005      	beq.n	8001d3e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2240      	movs	r2, #64	; 0x40
 8001d36:	2100      	movs	r1, #0
 8001d38:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e0b5      	b.n	8001eaa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	2bff      	cmp	r3, #255	; 0xff
 8001d46:	d911      	bls.n	8001d6c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	22ff      	movs	r2, #255	; 0xff
 8001d4c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	045c      	lsls	r4, r3, #17
 8001d58:	230a      	movs	r3, #10
 8001d5a:	18fb      	adds	r3, r7, r3
 8001d5c:	8819      	ldrh	r1, [r3, #0]
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	2300      	movs	r3, #0
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	0023      	movs	r3, r4
 8001d66:	f000 fbf7 	bl	8002558 <I2C_TransferConfig>
 8001d6a:	e012      	b.n	8001d92 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	049c      	lsls	r4, r3, #18
 8001d80:	230a      	movs	r3, #10
 8001d82:	18fb      	adds	r3, r7, r3
 8001d84:	8819      	ldrh	r1, [r3, #0]
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	2300      	movs	r3, #0
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	0023      	movs	r3, r4
 8001d8e:	f000 fbe3 	bl	8002558 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	0018      	movs	r0, r3
 8001d9a:	f000 fae8 	bl	800236e <I2C_WaitOnTXISFlagUntilTimeout>
 8001d9e:	1e03      	subs	r3, r0, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e081      	b.n	8001eaa <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	781a      	ldrb	r2, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d03a      	beq.n	8001e56 <HAL_I2C_Mem_Write+0x1fa>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d136      	bne.n	8001e56 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	0013      	movs	r3, r2
 8001df2:	2200      	movs	r2, #0
 8001df4:	2180      	movs	r1, #128	; 0x80
 8001df6:	f000 fa7b 	bl	80022f0 <I2C_WaitOnFlagUntilTimeout>
 8001dfa:	1e03      	subs	r3, r0, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e053      	b.n	8001eaa <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	2bff      	cmp	r3, #255	; 0xff
 8001e0a:	d911      	bls.n	8001e30 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	22ff      	movs	r2, #255	; 0xff
 8001e10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	2380      	movs	r3, #128	; 0x80
 8001e1a:	045c      	lsls	r4, r3, #17
 8001e1c:	230a      	movs	r3, #10
 8001e1e:	18fb      	adds	r3, r7, r3
 8001e20:	8819      	ldrh	r1, [r3, #0]
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	2300      	movs	r3, #0
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	0023      	movs	r3, r4
 8001e2a:	f000 fb95 	bl	8002558 <I2C_TransferConfig>
 8001e2e:	e012      	b.n	8001e56 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	2380      	movs	r3, #128	; 0x80
 8001e42:	049c      	lsls	r4, r3, #18
 8001e44:	230a      	movs	r3, #10
 8001e46:	18fb      	adds	r3, r7, r3
 8001e48:	8819      	ldrh	r1, [r3, #0]
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	0023      	movs	r3, r4
 8001e52:	f000 fb81 	bl	8002558 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d198      	bne.n	8001d92 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	0018      	movs	r0, r3
 8001e68:	f000 fac0 	bl	80023ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e6c:	1e03      	subs	r3, r0, #0
 8001e6e:	d001      	beq.n	8001e74 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e01a      	b.n	8001eaa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2220      	movs	r2, #32
 8001e7a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	490b      	ldr	r1, [pc, #44]	; (8001eb4 <HAL_I2C_Mem_Write+0x258>)
 8001e88:	400a      	ands	r2, r1
 8001e8a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2241      	movs	r2, #65	; 0x41
 8001e90:	2120      	movs	r1, #32
 8001e92:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2242      	movs	r2, #66	; 0x42
 8001e98:	2100      	movs	r1, #0
 8001e9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2240      	movs	r2, #64	; 0x40
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	e000      	b.n	8001eaa <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001ea8:	2302      	movs	r3, #2
  }
}
 8001eaa:	0018      	movs	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	b007      	add	sp, #28
 8001eb0:	bd90      	pop	{r4, r7, pc}
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	fe00e800 	.word	0xfe00e800

08001eb8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eb8:	b590      	push	{r4, r7, lr}
 8001eba:	b089      	sub	sp, #36	; 0x24
 8001ebc:	af02      	add	r7, sp, #8
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	000c      	movs	r4, r1
 8001ec2:	0010      	movs	r0, r2
 8001ec4:	0019      	movs	r1, r3
 8001ec6:	230a      	movs	r3, #10
 8001ec8:	18fb      	adds	r3, r7, r3
 8001eca:	1c22      	adds	r2, r4, #0
 8001ecc:	801a      	strh	r2, [r3, #0]
 8001ece:	2308      	movs	r3, #8
 8001ed0:	18fb      	adds	r3, r7, r3
 8001ed2:	1c02      	adds	r2, r0, #0
 8001ed4:	801a      	strh	r2, [r3, #0]
 8001ed6:	1dbb      	adds	r3, r7, #6
 8001ed8:	1c0a      	adds	r2, r1, #0
 8001eda:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2241      	movs	r2, #65	; 0x41
 8001ee0:	5c9b      	ldrb	r3, [r3, r2]
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b20      	cmp	r3, #32
 8001ee6:	d000      	beq.n	8001eea <HAL_I2C_Mem_Read+0x32>
 8001ee8:	e110      	b.n	800210c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d004      	beq.n	8001efa <HAL_I2C_Mem_Read+0x42>
 8001ef0:	232c      	movs	r3, #44	; 0x2c
 8001ef2:	18fb      	adds	r3, r7, r3
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d105      	bne.n	8001f06 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2280      	movs	r2, #128	; 0x80
 8001efe:	0092      	lsls	r2, r2, #2
 8001f00:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e103      	b.n	800210e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2240      	movs	r2, #64	; 0x40
 8001f0a:	5c9b      	ldrb	r3, [r3, r2]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d101      	bne.n	8001f14 <HAL_I2C_Mem_Read+0x5c>
 8001f10:	2302      	movs	r3, #2
 8001f12:	e0fc      	b.n	800210e <HAL_I2C_Mem_Read+0x256>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2240      	movs	r2, #64	; 0x40
 8001f18:	2101      	movs	r1, #1
 8001f1a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f1c:	f7ff fb98 	bl	8001650 <HAL_GetTick>
 8001f20:	0003      	movs	r3, r0
 8001f22:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	0219      	lsls	r1, r3, #8
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	2319      	movs	r3, #25
 8001f30:	2201      	movs	r2, #1
 8001f32:	f000 f9dd 	bl	80022f0 <I2C_WaitOnFlagUntilTimeout>
 8001f36:	1e03      	subs	r3, r0, #0
 8001f38:	d001      	beq.n	8001f3e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e0e7      	b.n	800210e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2241      	movs	r2, #65	; 0x41
 8001f42:	2122      	movs	r1, #34	; 0x22
 8001f44:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2242      	movs	r2, #66	; 0x42
 8001f4a:	2140      	movs	r1, #64	; 0x40
 8001f4c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	222c      	movs	r2, #44	; 0x2c
 8001f5e:	18ba      	adds	r2, r7, r2
 8001f60:	8812      	ldrh	r2, [r2, #0]
 8001f62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f6a:	1dbb      	adds	r3, r7, #6
 8001f6c:	881c      	ldrh	r4, [r3, #0]
 8001f6e:	2308      	movs	r3, #8
 8001f70:	18fb      	adds	r3, r7, r3
 8001f72:	881a      	ldrh	r2, [r3, #0]
 8001f74:	230a      	movs	r3, #10
 8001f76:	18fb      	adds	r3, r7, r3
 8001f78:	8819      	ldrh	r1, [r3, #0]
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	9301      	str	r3, [sp, #4]
 8001f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	0023      	movs	r3, r4
 8001f86:	f000 f92f 	bl	80021e8 <I2C_RequestMemoryRead>
 8001f8a:	1e03      	subs	r3, r0, #0
 8001f8c:	d005      	beq.n	8001f9a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2240      	movs	r2, #64	; 0x40
 8001f92:	2100      	movs	r1, #0
 8001f94:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e0b9      	b.n	800210e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	2bff      	cmp	r3, #255	; 0xff
 8001fa2:	d911      	bls.n	8001fc8 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	22ff      	movs	r2, #255	; 0xff
 8001fa8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	2380      	movs	r3, #128	; 0x80
 8001fb2:	045c      	lsls	r4, r3, #17
 8001fb4:	230a      	movs	r3, #10
 8001fb6:	18fb      	adds	r3, r7, r3
 8001fb8:	8819      	ldrh	r1, [r3, #0]
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	4b56      	ldr	r3, [pc, #344]	; (8002118 <HAL_I2C_Mem_Read+0x260>)
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	0023      	movs	r3, r4
 8001fc2:	f000 fac9 	bl	8002558 <I2C_TransferConfig>
 8001fc6:	e012      	b.n	8001fee <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	2380      	movs	r3, #128	; 0x80
 8001fda:	049c      	lsls	r4, r3, #18
 8001fdc:	230a      	movs	r3, #10
 8001fde:	18fb      	adds	r3, r7, r3
 8001fe0:	8819      	ldrh	r1, [r3, #0]
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	4b4c      	ldr	r3, [pc, #304]	; (8002118 <HAL_I2C_Mem_Read+0x260>)
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	0023      	movs	r3, r4
 8001fea:	f000 fab5 	bl	8002558 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001fee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	0013      	movs	r3, r2
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2104      	movs	r1, #4
 8001ffc:	f000 f978 	bl	80022f0 <I2C_WaitOnFlagUntilTimeout>
 8002000:	1e03      	subs	r3, r0, #0
 8002002:	d001      	beq.n	8002008 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e082      	b.n	800210e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201a:	1c5a      	adds	r2, r3, #1
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002024:	3b01      	subs	r3, #1
 8002026:	b29a      	uxth	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002030:	b29b      	uxth	r3, r3
 8002032:	3b01      	subs	r3, #1
 8002034:	b29a      	uxth	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203e:	b29b      	uxth	r3, r3
 8002040:	2b00      	cmp	r3, #0
 8002042:	d03a      	beq.n	80020ba <HAL_I2C_Mem_Read+0x202>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002048:	2b00      	cmp	r3, #0
 800204a:	d136      	bne.n	80020ba <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800204c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	0013      	movs	r3, r2
 8002056:	2200      	movs	r2, #0
 8002058:	2180      	movs	r1, #128	; 0x80
 800205a:	f000 f949 	bl	80022f0 <I2C_WaitOnFlagUntilTimeout>
 800205e:	1e03      	subs	r3, r0, #0
 8002060:	d001      	beq.n	8002066 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e053      	b.n	800210e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800206a:	b29b      	uxth	r3, r3
 800206c:	2bff      	cmp	r3, #255	; 0xff
 800206e:	d911      	bls.n	8002094 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	22ff      	movs	r2, #255	; 0xff
 8002074:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800207a:	b2da      	uxtb	r2, r3
 800207c:	2380      	movs	r3, #128	; 0x80
 800207e:	045c      	lsls	r4, r3, #17
 8002080:	230a      	movs	r3, #10
 8002082:	18fb      	adds	r3, r7, r3
 8002084:	8819      	ldrh	r1, [r3, #0]
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	2300      	movs	r3, #0
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	0023      	movs	r3, r4
 800208e:	f000 fa63 	bl	8002558 <I2C_TransferConfig>
 8002092:	e012      	b.n	80020ba <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002098:	b29a      	uxth	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	2380      	movs	r3, #128	; 0x80
 80020a6:	049c      	lsls	r4, r3, #18
 80020a8:	230a      	movs	r3, #10
 80020aa:	18fb      	adds	r3, r7, r3
 80020ac:	8819      	ldrh	r1, [r3, #0]
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	2300      	movs	r3, #0
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	0023      	movs	r3, r4
 80020b6:	f000 fa4f 	bl	8002558 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020be:	b29b      	uxth	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d194      	bne.n	8001fee <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	0018      	movs	r0, r3
 80020cc:	f000 f98e 	bl	80023ec <I2C_WaitOnSTOPFlagUntilTimeout>
 80020d0:	1e03      	subs	r3, r0, #0
 80020d2:	d001      	beq.n	80020d8 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e01a      	b.n	800210e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2220      	movs	r2, #32
 80020de:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	490c      	ldr	r1, [pc, #48]	; (800211c <HAL_I2C_Mem_Read+0x264>)
 80020ec:	400a      	ands	r2, r1
 80020ee:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2241      	movs	r2, #65	; 0x41
 80020f4:	2120      	movs	r1, #32
 80020f6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2242      	movs	r2, #66	; 0x42
 80020fc:	2100      	movs	r1, #0
 80020fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2240      	movs	r2, #64	; 0x40
 8002104:	2100      	movs	r1, #0
 8002106:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	e000      	b.n	800210e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800210c:	2302      	movs	r3, #2
  }
}
 800210e:	0018      	movs	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	b007      	add	sp, #28
 8002114:	bd90      	pop	{r4, r7, pc}
 8002116:	46c0      	nop			; (mov r8, r8)
 8002118:	80002400 	.word	0x80002400
 800211c:	fe00e800 	.word	0xfe00e800

08002120 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002120:	b5b0      	push	{r4, r5, r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af02      	add	r7, sp, #8
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	000c      	movs	r4, r1
 800212a:	0010      	movs	r0, r2
 800212c:	0019      	movs	r1, r3
 800212e:	250a      	movs	r5, #10
 8002130:	197b      	adds	r3, r7, r5
 8002132:	1c22      	adds	r2, r4, #0
 8002134:	801a      	strh	r2, [r3, #0]
 8002136:	2308      	movs	r3, #8
 8002138:	18fb      	adds	r3, r7, r3
 800213a:	1c02      	adds	r2, r0, #0
 800213c:	801a      	strh	r2, [r3, #0]
 800213e:	1dbb      	adds	r3, r7, #6
 8002140:	1c0a      	adds	r2, r1, #0
 8002142:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002144:	1dbb      	adds	r3, r7, #6
 8002146:	881b      	ldrh	r3, [r3, #0]
 8002148:	b2da      	uxtb	r2, r3
 800214a:	2380      	movs	r3, #128	; 0x80
 800214c:	045c      	lsls	r4, r3, #17
 800214e:	197b      	adds	r3, r7, r5
 8002150:	8819      	ldrh	r1, [r3, #0]
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	4b23      	ldr	r3, [pc, #140]	; (80021e4 <I2C_RequestMemoryWrite+0xc4>)
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	0023      	movs	r3, r4
 800215a:	f000 f9fd 	bl	8002558 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800215e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002160:	6a39      	ldr	r1, [r7, #32]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	0018      	movs	r0, r3
 8002166:	f000 f902 	bl	800236e <I2C_WaitOnTXISFlagUntilTimeout>
 800216a:	1e03      	subs	r3, r0, #0
 800216c:	d001      	beq.n	8002172 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e033      	b.n	80021da <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002172:	1dbb      	adds	r3, r7, #6
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d107      	bne.n	800218a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800217a:	2308      	movs	r3, #8
 800217c:	18fb      	adds	r3, r7, r3
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	b2da      	uxtb	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	629a      	str	r2, [r3, #40]	; 0x28
 8002188:	e019      	b.n	80021be <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800218a:	2308      	movs	r3, #8
 800218c:	18fb      	adds	r3, r7, r3
 800218e:	881b      	ldrh	r3, [r3, #0]
 8002190:	0a1b      	lsrs	r3, r3, #8
 8002192:	b29b      	uxth	r3, r3
 8002194:	b2da      	uxtb	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800219c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800219e:	6a39      	ldr	r1, [r7, #32]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	0018      	movs	r0, r3
 80021a4:	f000 f8e3 	bl	800236e <I2C_WaitOnTXISFlagUntilTimeout>
 80021a8:	1e03      	subs	r3, r0, #0
 80021aa:	d001      	beq.n	80021b0 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e014      	b.n	80021da <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021b0:	2308      	movs	r3, #8
 80021b2:	18fb      	adds	r3, r7, r3
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80021be:	6a3a      	ldr	r2, [r7, #32]
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	0013      	movs	r3, r2
 80021c8:	2200      	movs	r2, #0
 80021ca:	2180      	movs	r1, #128	; 0x80
 80021cc:	f000 f890 	bl	80022f0 <I2C_WaitOnFlagUntilTimeout>
 80021d0:	1e03      	subs	r3, r0, #0
 80021d2:	d001      	beq.n	80021d8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e000      	b.n	80021da <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	0018      	movs	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	b004      	add	sp, #16
 80021e0:	bdb0      	pop	{r4, r5, r7, pc}
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	80002000 	.word	0x80002000

080021e8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80021e8:	b5b0      	push	{r4, r5, r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af02      	add	r7, sp, #8
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	000c      	movs	r4, r1
 80021f2:	0010      	movs	r0, r2
 80021f4:	0019      	movs	r1, r3
 80021f6:	250a      	movs	r5, #10
 80021f8:	197b      	adds	r3, r7, r5
 80021fa:	1c22      	adds	r2, r4, #0
 80021fc:	801a      	strh	r2, [r3, #0]
 80021fe:	2308      	movs	r3, #8
 8002200:	18fb      	adds	r3, r7, r3
 8002202:	1c02      	adds	r2, r0, #0
 8002204:	801a      	strh	r2, [r3, #0]
 8002206:	1dbb      	adds	r3, r7, #6
 8002208:	1c0a      	adds	r2, r1, #0
 800220a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800220c:	1dbb      	adds	r3, r7, #6
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	b2da      	uxtb	r2, r3
 8002212:	197b      	adds	r3, r7, r5
 8002214:	8819      	ldrh	r1, [r3, #0]
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	4b23      	ldr	r3, [pc, #140]	; (80022a8 <I2C_RequestMemoryRead+0xc0>)
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	2300      	movs	r3, #0
 800221e:	f000 f99b 	bl	8002558 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002224:	6a39      	ldr	r1, [r7, #32]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	0018      	movs	r0, r3
 800222a:	f000 f8a0 	bl	800236e <I2C_WaitOnTXISFlagUntilTimeout>
 800222e:	1e03      	subs	r3, r0, #0
 8002230:	d001      	beq.n	8002236 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e033      	b.n	800229e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002236:	1dbb      	adds	r3, r7, #6
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d107      	bne.n	800224e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800223e:	2308      	movs	r3, #8
 8002240:	18fb      	adds	r3, r7, r3
 8002242:	881b      	ldrh	r3, [r3, #0]
 8002244:	b2da      	uxtb	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	629a      	str	r2, [r3, #40]	; 0x28
 800224c:	e019      	b.n	8002282 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800224e:	2308      	movs	r3, #8
 8002250:	18fb      	adds	r3, r7, r3
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	0a1b      	lsrs	r3, r3, #8
 8002256:	b29b      	uxth	r3, r3
 8002258:	b2da      	uxtb	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002262:	6a39      	ldr	r1, [r7, #32]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	0018      	movs	r0, r3
 8002268:	f000 f881 	bl	800236e <I2C_WaitOnTXISFlagUntilTimeout>
 800226c:	1e03      	subs	r3, r0, #0
 800226e:	d001      	beq.n	8002274 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e014      	b.n	800229e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002274:	2308      	movs	r3, #8
 8002276:	18fb      	adds	r3, r7, r3
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	b2da      	uxtb	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002282:	6a3a      	ldr	r2, [r7, #32]
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	0013      	movs	r3, r2
 800228c:	2200      	movs	r2, #0
 800228e:	2140      	movs	r1, #64	; 0x40
 8002290:	f000 f82e 	bl	80022f0 <I2C_WaitOnFlagUntilTimeout>
 8002294:	1e03      	subs	r3, r0, #0
 8002296:	d001      	beq.n	800229c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e000      	b.n	800229e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	0018      	movs	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	b004      	add	sp, #16
 80022a4:	bdb0      	pop	{r4, r5, r7, pc}
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	80002000 	.word	0x80002000

080022ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	2202      	movs	r2, #2
 80022bc:	4013      	ands	r3, r2
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d103      	bne.n	80022ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2200      	movs	r2, #0
 80022c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	2201      	movs	r2, #1
 80022d2:	4013      	ands	r3, r2
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d007      	beq.n	80022e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	699a      	ldr	r2, [r3, #24]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2101      	movs	r1, #1
 80022e4:	430a      	orrs	r2, r1
 80022e6:	619a      	str	r2, [r3, #24]
  }
}
 80022e8:	46c0      	nop			; (mov r8, r8)
 80022ea:	46bd      	mov	sp, r7
 80022ec:	b002      	add	sp, #8
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	603b      	str	r3, [r7, #0]
 80022fc:	1dfb      	adds	r3, r7, #7
 80022fe:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002300:	e021      	b.n	8002346 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	3301      	adds	r3, #1
 8002306:	d01e      	beq.n	8002346 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002308:	f7ff f9a2 	bl	8001650 <HAL_GetTick>
 800230c:	0002      	movs	r2, r0
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	429a      	cmp	r2, r3
 8002316:	d302      	bcc.n	800231e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d113      	bne.n	8002346 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002322:	2220      	movs	r2, #32
 8002324:	431a      	orrs	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2241      	movs	r2, #65	; 0x41
 800232e:	2120      	movs	r1, #32
 8002330:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2242      	movs	r2, #66	; 0x42
 8002336:	2100      	movs	r1, #0
 8002338:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2240      	movs	r2, #64	; 0x40
 800233e:	2100      	movs	r1, #0
 8002340:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e00f      	b.n	8002366 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	4013      	ands	r3, r2
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	425a      	negs	r2, r3
 8002356:	4153      	adcs	r3, r2
 8002358:	b2db      	uxtb	r3, r3
 800235a:	001a      	movs	r2, r3
 800235c:	1dfb      	adds	r3, r7, #7
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	429a      	cmp	r2, r3
 8002362:	d0ce      	beq.n	8002302 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	0018      	movs	r0, r3
 8002368:	46bd      	mov	sp, r7
 800236a:	b004      	add	sp, #16
 800236c:	bd80      	pop	{r7, pc}

0800236e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b084      	sub	sp, #16
 8002372:	af00      	add	r7, sp, #0
 8002374:	60f8      	str	r0, [r7, #12]
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800237a:	e02b      	b.n	80023d4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	68b9      	ldr	r1, [r7, #8]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	0018      	movs	r0, r3
 8002384:	f000 f86e 	bl	8002464 <I2C_IsAcknowledgeFailed>
 8002388:	1e03      	subs	r3, r0, #0
 800238a:	d001      	beq.n	8002390 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e029      	b.n	80023e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	3301      	adds	r3, #1
 8002394:	d01e      	beq.n	80023d4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002396:	f7ff f95b 	bl	8001650 <HAL_GetTick>
 800239a:	0002      	movs	r2, r0
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d302      	bcc.n	80023ac <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d113      	bne.n	80023d4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b0:	2220      	movs	r2, #32
 80023b2:	431a      	orrs	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2241      	movs	r2, #65	; 0x41
 80023bc:	2120      	movs	r1, #32
 80023be:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2242      	movs	r2, #66	; 0x42
 80023c4:	2100      	movs	r1, #0
 80023c6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2240      	movs	r2, #64	; 0x40
 80023cc:	2100      	movs	r1, #0
 80023ce:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e007      	b.n	80023e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	2202      	movs	r2, #2
 80023dc:	4013      	ands	r3, r2
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d1cc      	bne.n	800237c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	0018      	movs	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	b004      	add	sp, #16
 80023ea:	bd80      	pop	{r7, pc}

080023ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023f8:	e028      	b.n	800244c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	68b9      	ldr	r1, [r7, #8]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	0018      	movs	r0, r3
 8002402:	f000 f82f 	bl	8002464 <I2C_IsAcknowledgeFailed>
 8002406:	1e03      	subs	r3, r0, #0
 8002408:	d001      	beq.n	800240e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e026      	b.n	800245c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800240e:	f7ff f91f 	bl	8001650 <HAL_GetTick>
 8002412:	0002      	movs	r2, r0
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	68ba      	ldr	r2, [r7, #8]
 800241a:	429a      	cmp	r2, r3
 800241c:	d302      	bcc.n	8002424 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d113      	bne.n	800244c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002428:	2220      	movs	r2, #32
 800242a:	431a      	orrs	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2241      	movs	r2, #65	; 0x41
 8002434:	2120      	movs	r1, #32
 8002436:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2242      	movs	r2, #66	; 0x42
 800243c:	2100      	movs	r1, #0
 800243e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2240      	movs	r2, #64	; 0x40
 8002444:	2100      	movs	r1, #0
 8002446:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e007      	b.n	800245c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	2220      	movs	r2, #32
 8002454:	4013      	ands	r3, r2
 8002456:	2b20      	cmp	r3, #32
 8002458:	d1cf      	bne.n	80023fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	0018      	movs	r0, r3
 800245e:	46bd      	mov	sp, r7
 8002460:	b004      	add	sp, #16
 8002462:	bd80      	pop	{r7, pc}

08002464 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	2210      	movs	r2, #16
 8002478:	4013      	ands	r3, r2
 800247a:	2b10      	cmp	r3, #16
 800247c:	d164      	bne.n	8002548 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	2380      	movs	r3, #128	; 0x80
 8002486:	049b      	lsls	r3, r3, #18
 8002488:	401a      	ands	r2, r3
 800248a:	2380      	movs	r3, #128	; 0x80
 800248c:	049b      	lsls	r3, r3, #18
 800248e:	429a      	cmp	r2, r3
 8002490:	d02b      	beq.n	80024ea <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2180      	movs	r1, #128	; 0x80
 800249e:	01c9      	lsls	r1, r1, #7
 80024a0:	430a      	orrs	r2, r1
 80024a2:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024a4:	e021      	b.n	80024ea <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	3301      	adds	r3, #1
 80024aa:	d01e      	beq.n	80024ea <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ac:	f7ff f8d0 	bl	8001650 <HAL_GetTick>
 80024b0:	0002      	movs	r2, r0
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d302      	bcc.n	80024c2 <I2C_IsAcknowledgeFailed+0x5e>
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d113      	bne.n	80024ea <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	2220      	movs	r2, #32
 80024c8:	431a      	orrs	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2241      	movs	r2, #65	; 0x41
 80024d2:	2120      	movs	r1, #32
 80024d4:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2242      	movs	r2, #66	; 0x42
 80024da:	2100      	movs	r1, #0
 80024dc:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2240      	movs	r2, #64	; 0x40
 80024e2:	2100      	movs	r1, #0
 80024e4:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e02f      	b.n	800254a <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	2220      	movs	r2, #32
 80024f2:	4013      	ands	r3, r2
 80024f4:	2b20      	cmp	r3, #32
 80024f6:	d1d6      	bne.n	80024a6 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2210      	movs	r2, #16
 80024fe:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2220      	movs	r2, #32
 8002506:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	0018      	movs	r0, r3
 800250c:	f7ff fece 	bl	80022ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	490e      	ldr	r1, [pc, #56]	; (8002554 <I2C_IsAcknowledgeFailed+0xf0>)
 800251c:	400a      	ands	r2, r1
 800251e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002524:	2204      	movs	r2, #4
 8002526:	431a      	orrs	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2241      	movs	r2, #65	; 0x41
 8002530:	2120      	movs	r1, #32
 8002532:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2242      	movs	r2, #66	; 0x42
 8002538:	2100      	movs	r1, #0
 800253a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2240      	movs	r2, #64	; 0x40
 8002540:	2100      	movs	r1, #0
 8002542:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e000      	b.n	800254a <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	0018      	movs	r0, r3
 800254c:	46bd      	mov	sp, r7
 800254e:	b004      	add	sp, #16
 8002550:	bd80      	pop	{r7, pc}
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	fe00e800 	.word	0xfe00e800

08002558 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002558:	b590      	push	{r4, r7, lr}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	0008      	movs	r0, r1
 8002562:	0011      	movs	r1, r2
 8002564:	607b      	str	r3, [r7, #4]
 8002566:	240a      	movs	r4, #10
 8002568:	193b      	adds	r3, r7, r4
 800256a:	1c02      	adds	r2, r0, #0
 800256c:	801a      	strh	r2, [r3, #0]
 800256e:	2009      	movs	r0, #9
 8002570:	183b      	adds	r3, r7, r0
 8002572:	1c0a      	adds	r2, r1, #0
 8002574:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	6a3a      	ldr	r2, [r7, #32]
 800257e:	0d51      	lsrs	r1, r2, #21
 8002580:	2280      	movs	r2, #128	; 0x80
 8002582:	00d2      	lsls	r2, r2, #3
 8002584:	400a      	ands	r2, r1
 8002586:	490e      	ldr	r1, [pc, #56]	; (80025c0 <I2C_TransferConfig+0x68>)
 8002588:	430a      	orrs	r2, r1
 800258a:	43d2      	mvns	r2, r2
 800258c:	401a      	ands	r2, r3
 800258e:	0011      	movs	r1, r2
 8002590:	193b      	adds	r3, r7, r4
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	059b      	lsls	r3, r3, #22
 8002596:	0d9a      	lsrs	r2, r3, #22
 8002598:	183b      	adds	r3, r7, r0
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	0418      	lsls	r0, r3, #16
 800259e:	23ff      	movs	r3, #255	; 0xff
 80025a0:	041b      	lsls	r3, r3, #16
 80025a2:	4003      	ands	r3, r0
 80025a4:	431a      	orrs	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	431a      	orrs	r2, r3
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	431a      	orrs	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80025b6:	46c0      	nop			; (mov r8, r8)
 80025b8:	46bd      	mov	sp, r7
 80025ba:	b005      	add	sp, #20
 80025bc:	bd90      	pop	{r4, r7, pc}
 80025be:	46c0      	nop			; (mov r8, r8)
 80025c0:	03ff63ff 	.word	0x03ff63ff

080025c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2241      	movs	r2, #65	; 0x41
 80025d2:	5c9b      	ldrb	r3, [r3, r2]
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b20      	cmp	r3, #32
 80025d8:	d138      	bne.n	800264c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2240      	movs	r2, #64	; 0x40
 80025de:	5c9b      	ldrb	r3, [r3, r2]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d101      	bne.n	80025e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e032      	b.n	800264e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2240      	movs	r2, #64	; 0x40
 80025ec:	2101      	movs	r1, #1
 80025ee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2241      	movs	r2, #65	; 0x41
 80025f4:	2124      	movs	r1, #36	; 0x24
 80025f6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2101      	movs	r1, #1
 8002604:	438a      	bics	r2, r1
 8002606:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4911      	ldr	r1, [pc, #68]	; (8002658 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002614:	400a      	ands	r2, r1
 8002616:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6819      	ldr	r1, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	430a      	orrs	r2, r1
 8002626:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2101      	movs	r1, #1
 8002634:	430a      	orrs	r2, r1
 8002636:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2241      	movs	r2, #65	; 0x41
 800263c:	2120      	movs	r1, #32
 800263e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2240      	movs	r2, #64	; 0x40
 8002644:	2100      	movs	r1, #0
 8002646:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002648:	2300      	movs	r3, #0
 800264a:	e000      	b.n	800264e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800264c:	2302      	movs	r3, #2
  }
}
 800264e:	0018      	movs	r0, r3
 8002650:	46bd      	mov	sp, r7
 8002652:	b002      	add	sp, #8
 8002654:	bd80      	pop	{r7, pc}
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	ffffefff 	.word	0xffffefff

0800265c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2241      	movs	r2, #65	; 0x41
 800266a:	5c9b      	ldrb	r3, [r3, r2]
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b20      	cmp	r3, #32
 8002670:	d139      	bne.n	80026e6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2240      	movs	r2, #64	; 0x40
 8002676:	5c9b      	ldrb	r3, [r3, r2]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800267c:	2302      	movs	r3, #2
 800267e:	e033      	b.n	80026e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2240      	movs	r2, #64	; 0x40
 8002684:	2101      	movs	r1, #1
 8002686:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2241      	movs	r2, #65	; 0x41
 800268c:	2124      	movs	r1, #36	; 0x24
 800268e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2101      	movs	r1, #1
 800269c:	438a      	bics	r2, r1
 800269e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	4a11      	ldr	r2, [pc, #68]	; (80026f0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80026ac:	4013      	ands	r3, r2
 80026ae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	021b      	lsls	r3, r3, #8
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2101      	movs	r1, #1
 80026ce:	430a      	orrs	r2, r1
 80026d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2241      	movs	r2, #65	; 0x41
 80026d6:	2120      	movs	r1, #32
 80026d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2240      	movs	r2, #64	; 0x40
 80026de:	2100      	movs	r1, #0
 80026e0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	e000      	b.n	80026e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80026e6:	2302      	movs	r3, #2
  }
}
 80026e8:	0018      	movs	r0, r3
 80026ea:	46bd      	mov	sp, r7
 80026ec:	b004      	add	sp, #16
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	fffff0ff 	.word	0xfffff0ff

080026f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b088      	sub	sp, #32
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e301      	b.n	8002d0a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2201      	movs	r2, #1
 800270c:	4013      	ands	r3, r2
 800270e:	d100      	bne.n	8002712 <HAL_RCC_OscConfig+0x1e>
 8002710:	e08d      	b.n	800282e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002712:	4bc3      	ldr	r3, [pc, #780]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	220c      	movs	r2, #12
 8002718:	4013      	ands	r3, r2
 800271a:	2b04      	cmp	r3, #4
 800271c:	d00e      	beq.n	800273c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800271e:	4bc0      	ldr	r3, [pc, #768]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	220c      	movs	r2, #12
 8002724:	4013      	ands	r3, r2
 8002726:	2b08      	cmp	r3, #8
 8002728:	d116      	bne.n	8002758 <HAL_RCC_OscConfig+0x64>
 800272a:	4bbd      	ldr	r3, [pc, #756]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	2380      	movs	r3, #128	; 0x80
 8002730:	025b      	lsls	r3, r3, #9
 8002732:	401a      	ands	r2, r3
 8002734:	2380      	movs	r3, #128	; 0x80
 8002736:	025b      	lsls	r3, r3, #9
 8002738:	429a      	cmp	r2, r3
 800273a:	d10d      	bne.n	8002758 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800273c:	4bb8      	ldr	r3, [pc, #736]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	2380      	movs	r3, #128	; 0x80
 8002742:	029b      	lsls	r3, r3, #10
 8002744:	4013      	ands	r3, r2
 8002746:	d100      	bne.n	800274a <HAL_RCC_OscConfig+0x56>
 8002748:	e070      	b.n	800282c <HAL_RCC_OscConfig+0x138>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d000      	beq.n	8002754 <HAL_RCC_OscConfig+0x60>
 8002752:	e06b      	b.n	800282c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e2d8      	b.n	8002d0a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d107      	bne.n	8002770 <HAL_RCC_OscConfig+0x7c>
 8002760:	4baf      	ldr	r3, [pc, #700]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4bae      	ldr	r3, [pc, #696]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 8002766:	2180      	movs	r1, #128	; 0x80
 8002768:	0249      	lsls	r1, r1, #9
 800276a:	430a      	orrs	r2, r1
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	e02f      	b.n	80027d0 <HAL_RCC_OscConfig+0xdc>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10c      	bne.n	8002792 <HAL_RCC_OscConfig+0x9e>
 8002778:	4ba9      	ldr	r3, [pc, #676]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4ba8      	ldr	r3, [pc, #672]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 800277e:	49a9      	ldr	r1, [pc, #676]	; (8002a24 <HAL_RCC_OscConfig+0x330>)
 8002780:	400a      	ands	r2, r1
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	4ba6      	ldr	r3, [pc, #664]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4ba5      	ldr	r3, [pc, #660]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 800278a:	49a7      	ldr	r1, [pc, #668]	; (8002a28 <HAL_RCC_OscConfig+0x334>)
 800278c:	400a      	ands	r2, r1
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	e01e      	b.n	80027d0 <HAL_RCC_OscConfig+0xdc>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b05      	cmp	r3, #5
 8002798:	d10e      	bne.n	80027b8 <HAL_RCC_OscConfig+0xc4>
 800279a:	4ba1      	ldr	r3, [pc, #644]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	4ba0      	ldr	r3, [pc, #640]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 80027a0:	2180      	movs	r1, #128	; 0x80
 80027a2:	02c9      	lsls	r1, r1, #11
 80027a4:	430a      	orrs	r2, r1
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	4b9d      	ldr	r3, [pc, #628]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	4b9c      	ldr	r3, [pc, #624]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 80027ae:	2180      	movs	r1, #128	; 0x80
 80027b0:	0249      	lsls	r1, r1, #9
 80027b2:	430a      	orrs	r2, r1
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	e00b      	b.n	80027d0 <HAL_RCC_OscConfig+0xdc>
 80027b8:	4b99      	ldr	r3, [pc, #612]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	4b98      	ldr	r3, [pc, #608]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 80027be:	4999      	ldr	r1, [pc, #612]	; (8002a24 <HAL_RCC_OscConfig+0x330>)
 80027c0:	400a      	ands	r2, r1
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	4b96      	ldr	r3, [pc, #600]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	4b95      	ldr	r3, [pc, #596]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 80027ca:	4997      	ldr	r1, [pc, #604]	; (8002a28 <HAL_RCC_OscConfig+0x334>)
 80027cc:	400a      	ands	r2, r1
 80027ce:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d014      	beq.n	8002802 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d8:	f7fe ff3a 	bl	8001650 <HAL_GetTick>
 80027dc:	0003      	movs	r3, r0
 80027de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027e2:	f7fe ff35 	bl	8001650 <HAL_GetTick>
 80027e6:	0002      	movs	r2, r0
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b64      	cmp	r3, #100	; 0x64
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e28a      	b.n	8002d0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f4:	4b8a      	ldr	r3, [pc, #552]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	2380      	movs	r3, #128	; 0x80
 80027fa:	029b      	lsls	r3, r3, #10
 80027fc:	4013      	ands	r3, r2
 80027fe:	d0f0      	beq.n	80027e2 <HAL_RCC_OscConfig+0xee>
 8002800:	e015      	b.n	800282e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002802:	f7fe ff25 	bl	8001650 <HAL_GetTick>
 8002806:	0003      	movs	r3, r0
 8002808:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800280c:	f7fe ff20 	bl	8001650 <HAL_GetTick>
 8002810:	0002      	movs	r2, r0
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b64      	cmp	r3, #100	; 0x64
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e275      	b.n	8002d0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800281e:	4b80      	ldr	r3, [pc, #512]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	2380      	movs	r3, #128	; 0x80
 8002824:	029b      	lsls	r3, r3, #10
 8002826:	4013      	ands	r3, r2
 8002828:	d1f0      	bne.n	800280c <HAL_RCC_OscConfig+0x118>
 800282a:	e000      	b.n	800282e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800282c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2202      	movs	r2, #2
 8002834:	4013      	ands	r3, r2
 8002836:	d100      	bne.n	800283a <HAL_RCC_OscConfig+0x146>
 8002838:	e069      	b.n	800290e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800283a:	4b79      	ldr	r3, [pc, #484]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	220c      	movs	r2, #12
 8002840:	4013      	ands	r3, r2
 8002842:	d00b      	beq.n	800285c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002844:	4b76      	ldr	r3, [pc, #472]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	220c      	movs	r2, #12
 800284a:	4013      	ands	r3, r2
 800284c:	2b08      	cmp	r3, #8
 800284e:	d11c      	bne.n	800288a <HAL_RCC_OscConfig+0x196>
 8002850:	4b73      	ldr	r3, [pc, #460]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	2380      	movs	r3, #128	; 0x80
 8002856:	025b      	lsls	r3, r3, #9
 8002858:	4013      	ands	r3, r2
 800285a:	d116      	bne.n	800288a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800285c:	4b70      	ldr	r3, [pc, #448]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2202      	movs	r2, #2
 8002862:	4013      	ands	r3, r2
 8002864:	d005      	beq.n	8002872 <HAL_RCC_OscConfig+0x17e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d001      	beq.n	8002872 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e24b      	b.n	8002d0a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002872:	4b6b      	ldr	r3, [pc, #428]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	22f8      	movs	r2, #248	; 0xf8
 8002878:	4393      	bics	r3, r2
 800287a:	0019      	movs	r1, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	00da      	lsls	r2, r3, #3
 8002882:	4b67      	ldr	r3, [pc, #412]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 8002884:	430a      	orrs	r2, r1
 8002886:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002888:	e041      	b.n	800290e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d024      	beq.n	80028dc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002892:	4b63      	ldr	r3, [pc, #396]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	4b62      	ldr	r3, [pc, #392]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 8002898:	2101      	movs	r1, #1
 800289a:	430a      	orrs	r2, r1
 800289c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289e:	f7fe fed7 	bl	8001650 <HAL_GetTick>
 80028a2:	0003      	movs	r3, r0
 80028a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028a8:	f7fe fed2 	bl	8001650 <HAL_GetTick>
 80028ac:	0002      	movs	r2, r0
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e227      	b.n	8002d0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ba:	4b59      	ldr	r3, [pc, #356]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2202      	movs	r2, #2
 80028c0:	4013      	ands	r3, r2
 80028c2:	d0f1      	beq.n	80028a8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c4:	4b56      	ldr	r3, [pc, #344]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	22f8      	movs	r2, #248	; 0xf8
 80028ca:	4393      	bics	r3, r2
 80028cc:	0019      	movs	r1, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	00da      	lsls	r2, r3, #3
 80028d4:	4b52      	ldr	r3, [pc, #328]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 80028d6:	430a      	orrs	r2, r1
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	e018      	b.n	800290e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028dc:	4b50      	ldr	r3, [pc, #320]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	4b4f      	ldr	r3, [pc, #316]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 80028e2:	2101      	movs	r1, #1
 80028e4:	438a      	bics	r2, r1
 80028e6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e8:	f7fe feb2 	bl	8001650 <HAL_GetTick>
 80028ec:	0003      	movs	r3, r0
 80028ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028f2:	f7fe fead 	bl	8001650 <HAL_GetTick>
 80028f6:	0002      	movs	r2, r0
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e202      	b.n	8002d0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002904:	4b46      	ldr	r3, [pc, #280]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2202      	movs	r2, #2
 800290a:	4013      	ands	r3, r2
 800290c:	d1f1      	bne.n	80028f2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2208      	movs	r2, #8
 8002914:	4013      	ands	r3, r2
 8002916:	d036      	beq.n	8002986 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d019      	beq.n	8002954 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002920:	4b3f      	ldr	r3, [pc, #252]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 8002922:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002924:	4b3e      	ldr	r3, [pc, #248]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 8002926:	2101      	movs	r1, #1
 8002928:	430a      	orrs	r2, r1
 800292a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800292c:	f7fe fe90 	bl	8001650 <HAL_GetTick>
 8002930:	0003      	movs	r3, r0
 8002932:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002936:	f7fe fe8b 	bl	8001650 <HAL_GetTick>
 800293a:	0002      	movs	r2, r0
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e1e0      	b.n	8002d0a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002948:	4b35      	ldr	r3, [pc, #212]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	2202      	movs	r2, #2
 800294e:	4013      	ands	r3, r2
 8002950:	d0f1      	beq.n	8002936 <HAL_RCC_OscConfig+0x242>
 8002952:	e018      	b.n	8002986 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002954:	4b32      	ldr	r3, [pc, #200]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 8002956:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002958:	4b31      	ldr	r3, [pc, #196]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 800295a:	2101      	movs	r1, #1
 800295c:	438a      	bics	r2, r1
 800295e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002960:	f7fe fe76 	bl	8001650 <HAL_GetTick>
 8002964:	0003      	movs	r3, r0
 8002966:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800296a:	f7fe fe71 	bl	8001650 <HAL_GetTick>
 800296e:	0002      	movs	r2, r0
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e1c6      	b.n	8002d0a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800297c:	4b28      	ldr	r3, [pc, #160]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	2202      	movs	r2, #2
 8002982:	4013      	ands	r3, r2
 8002984:	d1f1      	bne.n	800296a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2204      	movs	r2, #4
 800298c:	4013      	ands	r3, r2
 800298e:	d100      	bne.n	8002992 <HAL_RCC_OscConfig+0x29e>
 8002990:	e0b4      	b.n	8002afc <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002992:	201f      	movs	r0, #31
 8002994:	183b      	adds	r3, r7, r0
 8002996:	2200      	movs	r2, #0
 8002998:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800299a:	4b21      	ldr	r3, [pc, #132]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 800299c:	69da      	ldr	r2, [r3, #28]
 800299e:	2380      	movs	r3, #128	; 0x80
 80029a0:	055b      	lsls	r3, r3, #21
 80029a2:	4013      	ands	r3, r2
 80029a4:	d110      	bne.n	80029c8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029a6:	4b1e      	ldr	r3, [pc, #120]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 80029a8:	69da      	ldr	r2, [r3, #28]
 80029aa:	4b1d      	ldr	r3, [pc, #116]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 80029ac:	2180      	movs	r1, #128	; 0x80
 80029ae:	0549      	lsls	r1, r1, #21
 80029b0:	430a      	orrs	r2, r1
 80029b2:	61da      	str	r2, [r3, #28]
 80029b4:	4b1a      	ldr	r3, [pc, #104]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 80029b6:	69da      	ldr	r2, [r3, #28]
 80029b8:	2380      	movs	r3, #128	; 0x80
 80029ba:	055b      	lsls	r3, r3, #21
 80029bc:	4013      	ands	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80029c2:	183b      	adds	r3, r7, r0
 80029c4:	2201      	movs	r2, #1
 80029c6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c8:	4b18      	ldr	r3, [pc, #96]	; (8002a2c <HAL_RCC_OscConfig+0x338>)
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	2380      	movs	r3, #128	; 0x80
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	4013      	ands	r3, r2
 80029d2:	d11a      	bne.n	8002a0a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029d4:	4b15      	ldr	r3, [pc, #84]	; (8002a2c <HAL_RCC_OscConfig+0x338>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	4b14      	ldr	r3, [pc, #80]	; (8002a2c <HAL_RCC_OscConfig+0x338>)
 80029da:	2180      	movs	r1, #128	; 0x80
 80029dc:	0049      	lsls	r1, r1, #1
 80029de:	430a      	orrs	r2, r1
 80029e0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029e2:	f7fe fe35 	bl	8001650 <HAL_GetTick>
 80029e6:	0003      	movs	r3, r0
 80029e8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ec:	f7fe fe30 	bl	8001650 <HAL_GetTick>
 80029f0:	0002      	movs	r2, r0
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b64      	cmp	r3, #100	; 0x64
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e185      	b.n	8002d0a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fe:	4b0b      	ldr	r3, [pc, #44]	; (8002a2c <HAL_RCC_OscConfig+0x338>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	2380      	movs	r3, #128	; 0x80
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	4013      	ands	r3, r2
 8002a08:	d0f0      	beq.n	80029ec <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d10e      	bne.n	8002a30 <HAL_RCC_OscConfig+0x33c>
 8002a12:	4b03      	ldr	r3, [pc, #12]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 8002a14:	6a1a      	ldr	r2, [r3, #32]
 8002a16:	4b02      	ldr	r3, [pc, #8]	; (8002a20 <HAL_RCC_OscConfig+0x32c>)
 8002a18:	2101      	movs	r1, #1
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	621a      	str	r2, [r3, #32]
 8002a1e:	e035      	b.n	8002a8c <HAL_RCC_OscConfig+0x398>
 8002a20:	40021000 	.word	0x40021000
 8002a24:	fffeffff 	.word	0xfffeffff
 8002a28:	fffbffff 	.word	0xfffbffff
 8002a2c:	40007000 	.word	0x40007000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10c      	bne.n	8002a52 <HAL_RCC_OscConfig+0x35e>
 8002a38:	4bb6      	ldr	r3, [pc, #728]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002a3a:	6a1a      	ldr	r2, [r3, #32]
 8002a3c:	4bb5      	ldr	r3, [pc, #724]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002a3e:	2101      	movs	r1, #1
 8002a40:	438a      	bics	r2, r1
 8002a42:	621a      	str	r2, [r3, #32]
 8002a44:	4bb3      	ldr	r3, [pc, #716]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002a46:	6a1a      	ldr	r2, [r3, #32]
 8002a48:	4bb2      	ldr	r3, [pc, #712]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002a4a:	2104      	movs	r1, #4
 8002a4c:	438a      	bics	r2, r1
 8002a4e:	621a      	str	r2, [r3, #32]
 8002a50:	e01c      	b.n	8002a8c <HAL_RCC_OscConfig+0x398>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2b05      	cmp	r3, #5
 8002a58:	d10c      	bne.n	8002a74 <HAL_RCC_OscConfig+0x380>
 8002a5a:	4bae      	ldr	r3, [pc, #696]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002a5c:	6a1a      	ldr	r2, [r3, #32]
 8002a5e:	4bad      	ldr	r3, [pc, #692]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002a60:	2104      	movs	r1, #4
 8002a62:	430a      	orrs	r2, r1
 8002a64:	621a      	str	r2, [r3, #32]
 8002a66:	4bab      	ldr	r3, [pc, #684]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002a68:	6a1a      	ldr	r2, [r3, #32]
 8002a6a:	4baa      	ldr	r3, [pc, #680]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	621a      	str	r2, [r3, #32]
 8002a72:	e00b      	b.n	8002a8c <HAL_RCC_OscConfig+0x398>
 8002a74:	4ba7      	ldr	r3, [pc, #668]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002a76:	6a1a      	ldr	r2, [r3, #32]
 8002a78:	4ba6      	ldr	r3, [pc, #664]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	438a      	bics	r2, r1
 8002a7e:	621a      	str	r2, [r3, #32]
 8002a80:	4ba4      	ldr	r3, [pc, #656]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002a82:	6a1a      	ldr	r2, [r3, #32]
 8002a84:	4ba3      	ldr	r3, [pc, #652]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002a86:	2104      	movs	r1, #4
 8002a88:	438a      	bics	r2, r1
 8002a8a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d014      	beq.n	8002abe <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a94:	f7fe fddc 	bl	8001650 <HAL_GetTick>
 8002a98:	0003      	movs	r3, r0
 8002a9a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a9c:	e009      	b.n	8002ab2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a9e:	f7fe fdd7 	bl	8001650 <HAL_GetTick>
 8002aa2:	0002      	movs	r2, r0
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	4a9b      	ldr	r2, [pc, #620]	; (8002d18 <HAL_RCC_OscConfig+0x624>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e12b      	b.n	8002d0a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab2:	4b98      	ldr	r3, [pc, #608]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	4013      	ands	r3, r2
 8002aba:	d0f0      	beq.n	8002a9e <HAL_RCC_OscConfig+0x3aa>
 8002abc:	e013      	b.n	8002ae6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002abe:	f7fe fdc7 	bl	8001650 <HAL_GetTick>
 8002ac2:	0003      	movs	r3, r0
 8002ac4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac6:	e009      	b.n	8002adc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ac8:	f7fe fdc2 	bl	8001650 <HAL_GetTick>
 8002acc:	0002      	movs	r2, r0
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	4a91      	ldr	r2, [pc, #580]	; (8002d18 <HAL_RCC_OscConfig+0x624>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e116      	b.n	8002d0a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002adc:	4b8d      	ldr	r3, [pc, #564]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d1f0      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ae6:	231f      	movs	r3, #31
 8002ae8:	18fb      	adds	r3, r7, r3
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d105      	bne.n	8002afc <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af0:	4b88      	ldr	r3, [pc, #544]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002af2:	69da      	ldr	r2, [r3, #28]
 8002af4:	4b87      	ldr	r3, [pc, #540]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002af6:	4989      	ldr	r1, [pc, #548]	; (8002d1c <HAL_RCC_OscConfig+0x628>)
 8002af8:	400a      	ands	r2, r1
 8002afa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2210      	movs	r2, #16
 8002b02:	4013      	ands	r3, r2
 8002b04:	d063      	beq.n	8002bce <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d12a      	bne.n	8002b64 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002b0e:	4b81      	ldr	r3, [pc, #516]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002b10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b12:	4b80      	ldr	r3, [pc, #512]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002b14:	2104      	movs	r1, #4
 8002b16:	430a      	orrs	r2, r1
 8002b18:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002b1a:	4b7e      	ldr	r3, [pc, #504]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002b1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b1e:	4b7d      	ldr	r3, [pc, #500]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002b20:	2101      	movs	r1, #1
 8002b22:	430a      	orrs	r2, r1
 8002b24:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b26:	f7fe fd93 	bl	8001650 <HAL_GetTick>
 8002b2a:	0003      	movs	r3, r0
 8002b2c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002b30:	f7fe fd8e 	bl	8001650 <HAL_GetTick>
 8002b34:	0002      	movs	r2, r0
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e0e3      	b.n	8002d0a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002b42:	4b74      	ldr	r3, [pc, #464]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b46:	2202      	movs	r2, #2
 8002b48:	4013      	ands	r3, r2
 8002b4a:	d0f1      	beq.n	8002b30 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002b4c:	4b71      	ldr	r3, [pc, #452]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b50:	22f8      	movs	r2, #248	; 0xf8
 8002b52:	4393      	bics	r3, r2
 8002b54:	0019      	movs	r1, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	00da      	lsls	r2, r3, #3
 8002b5c:	4b6d      	ldr	r3, [pc, #436]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	635a      	str	r2, [r3, #52]	; 0x34
 8002b62:	e034      	b.n	8002bce <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	3305      	adds	r3, #5
 8002b6a:	d111      	bne.n	8002b90 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002b6c:	4b69      	ldr	r3, [pc, #420]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002b6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b70:	4b68      	ldr	r3, [pc, #416]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002b72:	2104      	movs	r1, #4
 8002b74:	438a      	bics	r2, r1
 8002b76:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002b78:	4b66      	ldr	r3, [pc, #408]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7c:	22f8      	movs	r2, #248	; 0xf8
 8002b7e:	4393      	bics	r3, r2
 8002b80:	0019      	movs	r1, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	00da      	lsls	r2, r3, #3
 8002b88:	4b62      	ldr	r3, [pc, #392]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	635a      	str	r2, [r3, #52]	; 0x34
 8002b8e:	e01e      	b.n	8002bce <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002b90:	4b60      	ldr	r3, [pc, #384]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002b92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b94:	4b5f      	ldr	r3, [pc, #380]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002b96:	2104      	movs	r1, #4
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002b9c:	4b5d      	ldr	r3, [pc, #372]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002b9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ba0:	4b5c      	ldr	r3, [pc, #368]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	438a      	bics	r2, r1
 8002ba6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba8:	f7fe fd52 	bl	8001650 <HAL_GetTick>
 8002bac:	0003      	movs	r3, r0
 8002bae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002bb2:	f7fe fd4d 	bl	8001650 <HAL_GetTick>
 8002bb6:	0002      	movs	r2, r0
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e0a2      	b.n	8002d0a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002bc4:	4b53      	ldr	r3, [pc, #332]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc8:	2202      	movs	r2, #2
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d1f1      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d100      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x4e4>
 8002bd6:	e097      	b.n	8002d08 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bd8:	4b4e      	ldr	r3, [pc, #312]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	220c      	movs	r2, #12
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d100      	bne.n	8002be6 <HAL_RCC_OscConfig+0x4f2>
 8002be4:	e06b      	b.n	8002cbe <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d14c      	bne.n	8002c88 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bee:	4b49      	ldr	r3, [pc, #292]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	4b48      	ldr	r3, [pc, #288]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002bf4:	494a      	ldr	r1, [pc, #296]	; (8002d20 <HAL_RCC_OscConfig+0x62c>)
 8002bf6:	400a      	ands	r2, r1
 8002bf8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfa:	f7fe fd29 	bl	8001650 <HAL_GetTick>
 8002bfe:	0003      	movs	r3, r0
 8002c00:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c04:	f7fe fd24 	bl	8001650 <HAL_GetTick>
 8002c08:	0002      	movs	r2, r0
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e079      	b.n	8002d0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c16:	4b3f      	ldr	r3, [pc, #252]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	2380      	movs	r3, #128	; 0x80
 8002c1c:	049b      	lsls	r3, r3, #18
 8002c1e:	4013      	ands	r3, r2
 8002c20:	d1f0      	bne.n	8002c04 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c22:	4b3c      	ldr	r3, [pc, #240]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c26:	220f      	movs	r2, #15
 8002c28:	4393      	bics	r3, r2
 8002c2a:	0019      	movs	r1, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c30:	4b38      	ldr	r3, [pc, #224]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002c32:	430a      	orrs	r2, r1
 8002c34:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c36:	4b37      	ldr	r3, [pc, #220]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	4a3a      	ldr	r2, [pc, #232]	; (8002d24 <HAL_RCC_OscConfig+0x630>)
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	0019      	movs	r1, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	4b32      	ldr	r3, [pc, #200]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c50:	4b30      	ldr	r3, [pc, #192]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	4b2f      	ldr	r3, [pc, #188]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002c56:	2180      	movs	r1, #128	; 0x80
 8002c58:	0449      	lsls	r1, r1, #17
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5e:	f7fe fcf7 	bl	8001650 <HAL_GetTick>
 8002c62:	0003      	movs	r3, r0
 8002c64:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c68:	f7fe fcf2 	bl	8001650 <HAL_GetTick>
 8002c6c:	0002      	movs	r2, r0
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e047      	b.n	8002d0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c7a:	4b26      	ldr	r3, [pc, #152]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	2380      	movs	r3, #128	; 0x80
 8002c80:	049b      	lsls	r3, r3, #18
 8002c82:	4013      	ands	r3, r2
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0x574>
 8002c86:	e03f      	b.n	8002d08 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c88:	4b22      	ldr	r3, [pc, #136]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	4b21      	ldr	r3, [pc, #132]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002c8e:	4924      	ldr	r1, [pc, #144]	; (8002d20 <HAL_RCC_OscConfig+0x62c>)
 8002c90:	400a      	ands	r2, r1
 8002c92:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c94:	f7fe fcdc 	bl	8001650 <HAL_GetTick>
 8002c98:	0003      	movs	r3, r0
 8002c9a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c9e:	f7fe fcd7 	bl	8001650 <HAL_GetTick>
 8002ca2:	0002      	movs	r2, r0
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e02c      	b.n	8002d0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cb0:	4b18      	ldr	r3, [pc, #96]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	2380      	movs	r3, #128	; 0x80
 8002cb6:	049b      	lsls	r3, r3, #18
 8002cb8:	4013      	ands	r3, r2
 8002cba:	d1f0      	bne.n	8002c9e <HAL_RCC_OscConfig+0x5aa>
 8002cbc:	e024      	b.n	8002d08 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d101      	bne.n	8002cca <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e01f      	b.n	8002d0a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002cca:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002cd0:	4b10      	ldr	r3, [pc, #64]	; (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	2380      	movs	r3, #128	; 0x80
 8002cda:	025b      	lsls	r3, r3, #9
 8002cdc:	401a      	ands	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d10e      	bne.n	8002d04 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	220f      	movs	r2, #15
 8002cea:	401a      	ands	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d107      	bne.n	8002d04 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	23f0      	movs	r3, #240	; 0xf0
 8002cf8:	039b      	lsls	r3, r3, #14
 8002cfa:	401a      	ands	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d001      	beq.n	8002d08 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e000      	b.n	8002d0a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	b008      	add	sp, #32
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	40021000 	.word	0x40021000
 8002d18:	00001388 	.word	0x00001388
 8002d1c:	efffffff 	.word	0xefffffff
 8002d20:	feffffff 	.word	0xfeffffff
 8002d24:	ffc2ffff 	.word	0xffc2ffff

08002d28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e0b3      	b.n	8002ea4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d3c:	4b5b      	ldr	r3, [pc, #364]	; (8002eac <HAL_RCC_ClockConfig+0x184>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2201      	movs	r2, #1
 8002d42:	4013      	ands	r3, r2
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d911      	bls.n	8002d6e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4a:	4b58      	ldr	r3, [pc, #352]	; (8002eac <HAL_RCC_ClockConfig+0x184>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	4393      	bics	r3, r2
 8002d52:	0019      	movs	r1, r3
 8002d54:	4b55      	ldr	r3, [pc, #340]	; (8002eac <HAL_RCC_ClockConfig+0x184>)
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5c:	4b53      	ldr	r3, [pc, #332]	; (8002eac <HAL_RCC_ClockConfig+0x184>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2201      	movs	r2, #1
 8002d62:	4013      	ands	r3, r2
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d001      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e09a      	b.n	8002ea4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2202      	movs	r2, #2
 8002d74:	4013      	ands	r3, r2
 8002d76:	d015      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2204      	movs	r2, #4
 8002d7e:	4013      	ands	r3, r2
 8002d80:	d006      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002d82:	4b4b      	ldr	r3, [pc, #300]	; (8002eb0 <HAL_RCC_ClockConfig+0x188>)
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	4b4a      	ldr	r3, [pc, #296]	; (8002eb0 <HAL_RCC_ClockConfig+0x188>)
 8002d88:	21e0      	movs	r1, #224	; 0xe0
 8002d8a:	00c9      	lsls	r1, r1, #3
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d90:	4b47      	ldr	r3, [pc, #284]	; (8002eb0 <HAL_RCC_ClockConfig+0x188>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	22f0      	movs	r2, #240	; 0xf0
 8002d96:	4393      	bics	r3, r2
 8002d98:	0019      	movs	r1, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	4b44      	ldr	r3, [pc, #272]	; (8002eb0 <HAL_RCC_ClockConfig+0x188>)
 8002da0:	430a      	orrs	r2, r1
 8002da2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2201      	movs	r2, #1
 8002daa:	4013      	ands	r3, r2
 8002dac:	d040      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d107      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db6:	4b3e      	ldr	r3, [pc, #248]	; (8002eb0 <HAL_RCC_ClockConfig+0x188>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	2380      	movs	r3, #128	; 0x80
 8002dbc:	029b      	lsls	r3, r3, #10
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	d114      	bne.n	8002dec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e06e      	b.n	8002ea4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d107      	bne.n	8002dde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dce:	4b38      	ldr	r3, [pc, #224]	; (8002eb0 <HAL_RCC_ClockConfig+0x188>)
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	2380      	movs	r3, #128	; 0x80
 8002dd4:	049b      	lsls	r3, r3, #18
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	d108      	bne.n	8002dec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e062      	b.n	8002ea4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dde:	4b34      	ldr	r3, [pc, #208]	; (8002eb0 <HAL_RCC_ClockConfig+0x188>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2202      	movs	r2, #2
 8002de4:	4013      	ands	r3, r2
 8002de6:	d101      	bne.n	8002dec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e05b      	b.n	8002ea4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dec:	4b30      	ldr	r3, [pc, #192]	; (8002eb0 <HAL_RCC_ClockConfig+0x188>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2203      	movs	r2, #3
 8002df2:	4393      	bics	r3, r2
 8002df4:	0019      	movs	r1, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	4b2d      	ldr	r3, [pc, #180]	; (8002eb0 <HAL_RCC_ClockConfig+0x188>)
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e00:	f7fe fc26 	bl	8001650 <HAL_GetTick>
 8002e04:	0003      	movs	r3, r0
 8002e06:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e08:	e009      	b.n	8002e1e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e0a:	f7fe fc21 	bl	8001650 <HAL_GetTick>
 8002e0e:	0002      	movs	r2, r0
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	4a27      	ldr	r2, [pc, #156]	; (8002eb4 <HAL_RCC_ClockConfig+0x18c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e042      	b.n	8002ea4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1e:	4b24      	ldr	r3, [pc, #144]	; (8002eb0 <HAL_RCC_ClockConfig+0x188>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	220c      	movs	r2, #12
 8002e24:	401a      	ands	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d1ec      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e30:	4b1e      	ldr	r3, [pc, #120]	; (8002eac <HAL_RCC_ClockConfig+0x184>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2201      	movs	r2, #1
 8002e36:	4013      	ands	r3, r2
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d211      	bcs.n	8002e62 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3e:	4b1b      	ldr	r3, [pc, #108]	; (8002eac <HAL_RCC_ClockConfig+0x184>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2201      	movs	r2, #1
 8002e44:	4393      	bics	r3, r2
 8002e46:	0019      	movs	r1, r3
 8002e48:	4b18      	ldr	r3, [pc, #96]	; (8002eac <HAL_RCC_ClockConfig+0x184>)
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e50:	4b16      	ldr	r3, [pc, #88]	; (8002eac <HAL_RCC_ClockConfig+0x184>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2201      	movs	r2, #1
 8002e56:	4013      	ands	r3, r2
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d001      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e020      	b.n	8002ea4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2204      	movs	r2, #4
 8002e68:	4013      	ands	r3, r2
 8002e6a:	d009      	beq.n	8002e80 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002e6c:	4b10      	ldr	r3, [pc, #64]	; (8002eb0 <HAL_RCC_ClockConfig+0x188>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	4a11      	ldr	r2, [pc, #68]	; (8002eb8 <HAL_RCC_ClockConfig+0x190>)
 8002e72:	4013      	ands	r3, r2
 8002e74:	0019      	movs	r1, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	4b0d      	ldr	r3, [pc, #52]	; (8002eb0 <HAL_RCC_ClockConfig+0x188>)
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e80:	f000 f820 	bl	8002ec4 <HAL_RCC_GetSysClockFreq>
 8002e84:	0001      	movs	r1, r0
 8002e86:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <HAL_RCC_ClockConfig+0x188>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	091b      	lsrs	r3, r3, #4
 8002e8c:	220f      	movs	r2, #15
 8002e8e:	4013      	ands	r3, r2
 8002e90:	4a0a      	ldr	r2, [pc, #40]	; (8002ebc <HAL_RCC_ClockConfig+0x194>)
 8002e92:	5cd3      	ldrb	r3, [r2, r3]
 8002e94:	000a      	movs	r2, r1
 8002e96:	40da      	lsrs	r2, r3
 8002e98:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <HAL_RCC_ClockConfig+0x198>)
 8002e9a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002e9c:	2000      	movs	r0, #0
 8002e9e:	f7fe fb91 	bl	80015c4 <HAL_InitTick>
  
  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b004      	add	sp, #16
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40022000 	.word	0x40022000
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	00001388 	.word	0x00001388
 8002eb8:	fffff8ff 	.word	0xfffff8ff
 8002ebc:	08003258 	.word	0x08003258
 8002ec0:	20000000 	.word	0x20000000

08002ec4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec4:	b590      	push	{r4, r7, lr}
 8002ec6:	b08f      	sub	sp, #60	; 0x3c
 8002ec8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002eca:	2314      	movs	r3, #20
 8002ecc:	18fb      	adds	r3, r7, r3
 8002ece:	4a2b      	ldr	r2, [pc, #172]	; (8002f7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ed0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ed2:	c313      	stmia	r3!, {r0, r1, r4}
 8002ed4:	6812      	ldr	r2, [r2, #0]
 8002ed6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002ed8:	1d3b      	adds	r3, r7, #4
 8002eda:	4a29      	ldr	r2, [pc, #164]	; (8002f80 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002edc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ede:	c313      	stmia	r3!, {r0, r1, r4}
 8002ee0:	6812      	ldr	r2, [r2, #0]
 8002ee2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ee8:	2300      	movs	r3, #0
 8002eea:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eec:	2300      	movs	r3, #0
 8002eee:	637b      	str	r3, [r7, #52]	; 0x34
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002ef8:	4b22      	ldr	r3, [pc, #136]	; (8002f84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f00:	220c      	movs	r2, #12
 8002f02:	4013      	ands	r3, r2
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d002      	beq.n	8002f0e <HAL_RCC_GetSysClockFreq+0x4a>
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	d003      	beq.n	8002f14 <HAL_RCC_GetSysClockFreq+0x50>
 8002f0c:	e02d      	b.n	8002f6a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f0e:	4b1e      	ldr	r3, [pc, #120]	; (8002f88 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f10:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f12:	e02d      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f16:	0c9b      	lsrs	r3, r3, #18
 8002f18:	220f      	movs	r2, #15
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	2214      	movs	r2, #20
 8002f1e:	18ba      	adds	r2, r7, r2
 8002f20:	5cd3      	ldrb	r3, [r2, r3]
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002f24:	4b17      	ldr	r3, [pc, #92]	; (8002f84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f28:	220f      	movs	r2, #15
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	1d3a      	adds	r2, r7, #4
 8002f2e:	5cd3      	ldrb	r3, [r2, r3]
 8002f30:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002f32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f34:	2380      	movs	r3, #128	; 0x80
 8002f36:	025b      	lsls	r3, r3, #9
 8002f38:	4013      	ands	r3, r2
 8002f3a:	d009      	beq.n	8002f50 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f3e:	4812      	ldr	r0, [pc, #72]	; (8002f88 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f40:	f7fd f8e2 	bl	8000108 <__udivsi3>
 8002f44:	0003      	movs	r3, r0
 8002f46:	001a      	movs	r2, r3
 8002f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4a:	4353      	muls	r3, r2
 8002f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f4e:	e009      	b.n	8002f64 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002f50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f52:	000a      	movs	r2, r1
 8002f54:	0152      	lsls	r2, r2, #5
 8002f56:	1a52      	subs	r2, r2, r1
 8002f58:	0193      	lsls	r3, r2, #6
 8002f5a:	1a9b      	subs	r3, r3, r2
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	185b      	adds	r3, r3, r1
 8002f60:	021b      	lsls	r3, r3, #8
 8002f62:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f66:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f68:	e002      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f6a:	4b07      	ldr	r3, [pc, #28]	; (8002f88 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f6c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f6e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002f72:	0018      	movs	r0, r3
 8002f74:	46bd      	mov	sp, r7
 8002f76:	b00f      	add	sp, #60	; 0x3c
 8002f78:	bd90      	pop	{r4, r7, pc}
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	080031b8 	.word	0x080031b8
 8002f80:	080031c8 	.word	0x080031c8
 8002f84:	40021000 	.word	0x40021000
 8002f88:	007a1200 	.word	0x007a1200

08002f8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f94:	2300      	movs	r3, #0
 8002f96:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	2380      	movs	r3, #128	; 0x80
 8002fa2:	025b      	lsls	r3, r3, #9
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d100      	bne.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002fa8:	e08e      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002faa:	2017      	movs	r0, #23
 8002fac:	183b      	adds	r3, r7, r0
 8002fae:	2200      	movs	r2, #0
 8002fb0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fb2:	4b5f      	ldr	r3, [pc, #380]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002fb4:	69da      	ldr	r2, [r3, #28]
 8002fb6:	2380      	movs	r3, #128	; 0x80
 8002fb8:	055b      	lsls	r3, r3, #21
 8002fba:	4013      	ands	r3, r2
 8002fbc:	d110      	bne.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fbe:	4b5c      	ldr	r3, [pc, #368]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002fc0:	69da      	ldr	r2, [r3, #28]
 8002fc2:	4b5b      	ldr	r3, [pc, #364]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002fc4:	2180      	movs	r1, #128	; 0x80
 8002fc6:	0549      	lsls	r1, r1, #21
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	61da      	str	r2, [r3, #28]
 8002fcc:	4b58      	ldr	r3, [pc, #352]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002fce:	69da      	ldr	r2, [r3, #28]
 8002fd0:	2380      	movs	r3, #128	; 0x80
 8002fd2:	055b      	lsls	r3, r3, #21
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	60bb      	str	r3, [r7, #8]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fda:	183b      	adds	r3, r7, r0
 8002fdc:	2201      	movs	r2, #1
 8002fde:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe0:	4b54      	ldr	r3, [pc, #336]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	2380      	movs	r3, #128	; 0x80
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	4013      	ands	r3, r2
 8002fea:	d11a      	bne.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fec:	4b51      	ldr	r3, [pc, #324]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	4b50      	ldr	r3, [pc, #320]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002ff2:	2180      	movs	r1, #128	; 0x80
 8002ff4:	0049      	lsls	r1, r1, #1
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ffa:	f7fe fb29 	bl	8001650 <HAL_GetTick>
 8002ffe:	0003      	movs	r3, r0
 8003000:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003002:	e008      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003004:	f7fe fb24 	bl	8001650 <HAL_GetTick>
 8003008:	0002      	movs	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b64      	cmp	r3, #100	; 0x64
 8003010:	d901      	bls.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e087      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003016:	4b47      	ldr	r3, [pc, #284]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	2380      	movs	r3, #128	; 0x80
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	4013      	ands	r3, r2
 8003020:	d0f0      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003022:	4b43      	ldr	r3, [pc, #268]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003024:	6a1a      	ldr	r2, [r3, #32]
 8003026:	23c0      	movs	r3, #192	; 0xc0
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4013      	ands	r3, r2
 800302c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d034      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	23c0      	movs	r3, #192	; 0xc0
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4013      	ands	r3, r2
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	429a      	cmp	r2, r3
 8003042:	d02c      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003044:	4b3a      	ldr	r3, [pc, #232]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	4a3b      	ldr	r2, [pc, #236]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800304a:	4013      	ands	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800304e:	4b38      	ldr	r3, [pc, #224]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003050:	6a1a      	ldr	r2, [r3, #32]
 8003052:	4b37      	ldr	r3, [pc, #220]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003054:	2180      	movs	r1, #128	; 0x80
 8003056:	0249      	lsls	r1, r1, #9
 8003058:	430a      	orrs	r2, r1
 800305a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800305c:	4b34      	ldr	r3, [pc, #208]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800305e:	6a1a      	ldr	r2, [r3, #32]
 8003060:	4b33      	ldr	r3, [pc, #204]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003062:	4936      	ldr	r1, [pc, #216]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003064:	400a      	ands	r2, r1
 8003066:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003068:	4b31      	ldr	r3, [pc, #196]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2201      	movs	r2, #1
 8003072:	4013      	ands	r3, r2
 8003074:	d013      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003076:	f7fe faeb 	bl	8001650 <HAL_GetTick>
 800307a:	0003      	movs	r3, r0
 800307c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800307e:	e009      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003080:	f7fe fae6 	bl	8001650 <HAL_GetTick>
 8003084:	0002      	movs	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	4a2d      	ldr	r2, [pc, #180]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d901      	bls.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e048      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003094:	4b26      	ldr	r3, [pc, #152]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	2202      	movs	r2, #2
 800309a:	4013      	ands	r3, r2
 800309c:	d0f0      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800309e:	4b24      	ldr	r3, [pc, #144]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	4a25      	ldr	r2, [pc, #148]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	0019      	movs	r1, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	4b20      	ldr	r3, [pc, #128]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80030ae:	430a      	orrs	r2, r1
 80030b0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030b2:	2317      	movs	r3, #23
 80030b4:	18fb      	adds	r3, r7, r3
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d105      	bne.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030bc:	4b1c      	ldr	r3, [pc, #112]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80030be:	69da      	ldr	r2, [r3, #28]
 80030c0:	4b1b      	ldr	r3, [pc, #108]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80030c2:	4920      	ldr	r1, [pc, #128]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030c4:	400a      	ands	r2, r1
 80030c6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2201      	movs	r2, #1
 80030ce:	4013      	ands	r3, r2
 80030d0:	d009      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030d2:	4b17      	ldr	r3, [pc, #92]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	2203      	movs	r2, #3
 80030d8:	4393      	bics	r3, r2
 80030da:	0019      	movs	r1, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	4b13      	ldr	r3, [pc, #76]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80030e2:	430a      	orrs	r2, r1
 80030e4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2220      	movs	r2, #32
 80030ec:	4013      	ands	r3, r2
 80030ee:	d009      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030f0:	4b0f      	ldr	r3, [pc, #60]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80030f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f4:	2210      	movs	r2, #16
 80030f6:	4393      	bics	r3, r2
 80030f8:	0019      	movs	r1, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003100:	430a      	orrs	r2, r1
 8003102:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	2380      	movs	r3, #128	; 0x80
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	4013      	ands	r3, r2
 800310e:	d009      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003110:	4b07      	ldr	r3, [pc, #28]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003114:	2240      	movs	r2, #64	; 0x40
 8003116:	4393      	bics	r3, r2
 8003118:	0019      	movs	r1, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691a      	ldr	r2, [r3, #16]
 800311e:	4b04      	ldr	r3, [pc, #16]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003120:	430a      	orrs	r2, r1
 8003122:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	0018      	movs	r0, r3
 8003128:	46bd      	mov	sp, r7
 800312a:	b006      	add	sp, #24
 800312c:	bd80      	pop	{r7, pc}
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	40021000 	.word	0x40021000
 8003134:	40007000 	.word	0x40007000
 8003138:	fffffcff 	.word	0xfffffcff
 800313c:	fffeffff 	.word	0xfffeffff
 8003140:	00001388 	.word	0x00001388
 8003144:	efffffff 	.word	0xefffffff

08003148 <__libc_init_array>:
 8003148:	b570      	push	{r4, r5, r6, lr}
 800314a:	2600      	movs	r6, #0
 800314c:	4d0c      	ldr	r5, [pc, #48]	; (8003180 <__libc_init_array+0x38>)
 800314e:	4c0d      	ldr	r4, [pc, #52]	; (8003184 <__libc_init_array+0x3c>)
 8003150:	1b64      	subs	r4, r4, r5
 8003152:	10a4      	asrs	r4, r4, #2
 8003154:	42a6      	cmp	r6, r4
 8003156:	d109      	bne.n	800316c <__libc_init_array+0x24>
 8003158:	2600      	movs	r6, #0
 800315a:	f000 f821 	bl	80031a0 <_init>
 800315e:	4d0a      	ldr	r5, [pc, #40]	; (8003188 <__libc_init_array+0x40>)
 8003160:	4c0a      	ldr	r4, [pc, #40]	; (800318c <__libc_init_array+0x44>)
 8003162:	1b64      	subs	r4, r4, r5
 8003164:	10a4      	asrs	r4, r4, #2
 8003166:	42a6      	cmp	r6, r4
 8003168:	d105      	bne.n	8003176 <__libc_init_array+0x2e>
 800316a:	bd70      	pop	{r4, r5, r6, pc}
 800316c:	00b3      	lsls	r3, r6, #2
 800316e:	58eb      	ldr	r3, [r5, r3]
 8003170:	4798      	blx	r3
 8003172:	3601      	adds	r6, #1
 8003174:	e7ee      	b.n	8003154 <__libc_init_array+0xc>
 8003176:	00b3      	lsls	r3, r6, #2
 8003178:	58eb      	ldr	r3, [r5, r3]
 800317a:	4798      	blx	r3
 800317c:	3601      	adds	r6, #1
 800317e:	e7f2      	b.n	8003166 <__libc_init_array+0x1e>
 8003180:	08003268 	.word	0x08003268
 8003184:	08003268 	.word	0x08003268
 8003188:	08003268 	.word	0x08003268
 800318c:	0800326c 	.word	0x0800326c

08003190 <memset>:
 8003190:	0003      	movs	r3, r0
 8003192:	1882      	adds	r2, r0, r2
 8003194:	4293      	cmp	r3, r2
 8003196:	d100      	bne.n	800319a <memset+0xa>
 8003198:	4770      	bx	lr
 800319a:	7019      	strb	r1, [r3, #0]
 800319c:	3301      	adds	r3, #1
 800319e:	e7f9      	b.n	8003194 <memset+0x4>

080031a0 <_init>:
 80031a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031a2:	46c0      	nop			; (mov r8, r8)
 80031a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031a6:	bc08      	pop	{r3}
 80031a8:	469e      	mov	lr, r3
 80031aa:	4770      	bx	lr

080031ac <_fini>:
 80031ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031b2:	bc08      	pop	{r3}
 80031b4:	469e      	mov	lr, r3
 80031b6:	4770      	bx	lr
