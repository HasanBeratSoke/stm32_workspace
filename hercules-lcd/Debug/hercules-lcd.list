
hercules-lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000359c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800365c  0800365c  0001365c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003694  08003694  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003694  08003694  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003694  08003694  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003694  08003694  00013694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003698  08003698  00013698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800369c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  080036a8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  080036a8  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca01  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f22  00000000  00000000  0002ca35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  0002e958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002f358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011b53  00000000  00000000  0002fc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d9c4  00000000  00000000  000417e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068dba  00000000  00000000  0004f1a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b7f61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022bc  00000000  00000000  000b7fb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003644 	.word	0x08003644

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003644 	.word	0x08003644

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b087      	sub	sp, #28
 8000224:	af02      	add	r7, sp, #8
 8000226:	0002      	movs	r2, r0
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	701a      	strb	r2, [r3, #0]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800022c:	200f      	movs	r0, #15
 800022e:	183b      	adds	r3, r7, r0
 8000230:	1dfa      	adds	r2, r7, #7
 8000232:	7812      	ldrb	r2, [r2, #0]
 8000234:	210f      	movs	r1, #15
 8000236:	438a      	bics	r2, r1
 8000238:	701a      	strb	r2, [r3, #0]
	data_l = ((cmd<<4)&0xf0);
 800023a:	1dfb      	adds	r3, r7, #7
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	011a      	lsls	r2, r3, #4
 8000240:	240e      	movs	r4, #14
 8000242:	193b      	adds	r3, r7, r4
 8000244:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000246:	183b      	adds	r3, r7, r0
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	220c      	movs	r2, #12
 800024c:	4313      	orrs	r3, r2
 800024e:	b2da      	uxtb	r2, r3
 8000250:	2108      	movs	r1, #8
 8000252:	187b      	adds	r3, r7, r1
 8000254:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000256:	183b      	adds	r3, r7, r0
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	2208      	movs	r2, #8
 800025c:	4313      	orrs	r3, r2
 800025e:	b2da      	uxtb	r2, r3
 8000260:	187b      	adds	r3, r7, r1
 8000262:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000264:	193b      	adds	r3, r7, r4
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	220c      	movs	r2, #12
 800026a:	4313      	orrs	r3, r2
 800026c:	b2da      	uxtb	r2, r3
 800026e:	187b      	adds	r3, r7, r1
 8000270:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000272:	193b      	adds	r3, r7, r4
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	2208      	movs	r2, #8
 8000278:	4313      	orrs	r3, r2
 800027a:	b2da      	uxtb	r2, r3
 800027c:	187b      	adds	r3, r7, r1
 800027e:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000280:	187a      	adds	r2, r7, r1
 8000282:	4805      	ldr	r0, [pc, #20]	; (8000298 <lcd_send_cmd+0x78>)
 8000284:	2364      	movs	r3, #100	; 0x64
 8000286:	9300      	str	r3, [sp, #0]
 8000288:	2304      	movs	r3, #4
 800028a:	214e      	movs	r1, #78	; 0x4e
 800028c:	f000 ffde 	bl	800124c <HAL_I2C_Master_Transmit>
}
 8000290:	46c0      	nop			; (mov r8, r8)
 8000292:	46bd      	mov	sp, r7
 8000294:	b005      	add	sp, #20
 8000296:	bd90      	pop	{r4, r7, pc}
 8000298:	20000028 	.word	0x20000028

0800029c <lcd_send_data>:

void lcd_send_data (char data)
{
 800029c:	b590      	push	{r4, r7, lr}
 800029e:	b087      	sub	sp, #28
 80002a0:	af02      	add	r7, sp, #8
 80002a2:	0002      	movs	r2, r0
 80002a4:	1dfb      	adds	r3, r7, #7
 80002a6:	701a      	strb	r2, [r3, #0]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80002a8:	200f      	movs	r0, #15
 80002aa:	183b      	adds	r3, r7, r0
 80002ac:	1dfa      	adds	r2, r7, #7
 80002ae:	7812      	ldrb	r2, [r2, #0]
 80002b0:	210f      	movs	r1, #15
 80002b2:	438a      	bics	r2, r1
 80002b4:	701a      	strb	r2, [r3, #0]
	data_l = ((data<<4)&0xf0);
 80002b6:	1dfb      	adds	r3, r7, #7
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	011a      	lsls	r2, r3, #4
 80002bc:	240e      	movs	r4, #14
 80002be:	193b      	adds	r3, r7, r4
 80002c0:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80002c2:	183b      	adds	r3, r7, r0
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	220d      	movs	r2, #13
 80002c8:	4313      	orrs	r3, r2
 80002ca:	b2da      	uxtb	r2, r3
 80002cc:	2108      	movs	r1, #8
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80002d2:	183b      	adds	r3, r7, r0
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	2209      	movs	r2, #9
 80002d8:	4313      	orrs	r3, r2
 80002da:	b2da      	uxtb	r2, r3
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80002e0:	193b      	adds	r3, r7, r4
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	220d      	movs	r2, #13
 80002e6:	4313      	orrs	r3, r2
 80002e8:	b2da      	uxtb	r2, r3
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80002ee:	193b      	adds	r3, r7, r4
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	2209      	movs	r2, #9
 80002f4:	4313      	orrs	r3, r2
 80002f6:	b2da      	uxtb	r2, r3
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80002fc:	187a      	adds	r2, r7, r1
 80002fe:	4805      	ldr	r0, [pc, #20]	; (8000314 <lcd_send_data+0x78>)
 8000300:	2364      	movs	r3, #100	; 0x64
 8000302:	9300      	str	r3, [sp, #0]
 8000304:	2304      	movs	r3, #4
 8000306:	214e      	movs	r1, #78	; 0x4e
 8000308:	f000 ffa0 	bl	800124c <HAL_I2C_Master_Transmit>
}
 800030c:	46c0      	nop			; (mov r8, r8)
 800030e:	46bd      	mov	sp, r7
 8000310:	b005      	add	sp, #20
 8000312:	bd90      	pop	{r4, r7, pc}
 8000314:	20000028 	.word	0x20000028

08000318 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	6039      	str	r1, [r7, #0]
    switch (row)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d003      	beq.n	8000330 <lcd_put_cur+0x18>
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	2b01      	cmp	r3, #1
 800032c:	d005      	beq.n	800033a <lcd_put_cur+0x22>
 800032e:	e009      	b.n	8000344 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	2280      	movs	r2, #128	; 0x80
 8000334:	4313      	orrs	r3, r2
 8000336:	603b      	str	r3, [r7, #0]
            break;
 8000338:	e004      	b.n	8000344 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	22c0      	movs	r2, #192	; 0xc0
 800033e:	4313      	orrs	r3, r2
 8000340:	603b      	str	r3, [r7, #0]
            break;
 8000342:	46c0      	nop			; (mov r8, r8)
    }

    lcd_send_cmd (col);
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	b2db      	uxtb	r3, r3
 8000348:	0018      	movs	r0, r3
 800034a:	f7ff ff69 	bl	8000220 <lcd_send_cmd>
}
 800034e:	46c0      	nop			; (mov r8, r8)
 8000350:	46bd      	mov	sp, r7
 8000352:	b002      	add	sp, #8
 8000354:	bd80      	pop	{r7, pc}

08000356 <lcd_init>:


void lcd_init (void)
{
 8000356:	b580      	push	{r7, lr}
 8000358:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800035a:	2032      	movs	r0, #50	; 0x32
 800035c:	f000 fbd2 	bl	8000b04 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000360:	2030      	movs	r0, #48	; 0x30
 8000362:	f7ff ff5d 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000366:	2005      	movs	r0, #5
 8000368:	f000 fbcc 	bl	8000b04 <HAL_Delay>
	lcd_send_cmd (0x30);
 800036c:	2030      	movs	r0, #48	; 0x30
 800036e:	f7ff ff57 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000372:	2001      	movs	r0, #1
 8000374:	f000 fbc6 	bl	8000b04 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000378:	2030      	movs	r0, #48	; 0x30
 800037a:	f7ff ff51 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(10);
 800037e:	200a      	movs	r0, #10
 8000380:	f000 fbc0 	bl	8000b04 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000384:	2020      	movs	r0, #32
 8000386:	f7ff ff4b 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(10);
 800038a:	200a      	movs	r0, #10
 800038c:	f000 fbba 	bl	8000b04 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000390:	2028      	movs	r0, #40	; 0x28
 8000392:	f7ff ff45 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(1);
 8000396:	2001      	movs	r0, #1
 8000398:	f000 fbb4 	bl	8000b04 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800039c:	2008      	movs	r0, #8
 800039e:	f7ff ff3f 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(1);
 80003a2:	2001      	movs	r0, #1
 80003a4:	f000 fbae 	bl	8000b04 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80003a8:	2001      	movs	r0, #1
 80003aa:	f7ff ff39 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(1);
 80003ae:	2001      	movs	r0, #1
 80003b0:	f000 fba8 	bl	8000b04 <HAL_Delay>
	HAL_Delay(1);
 80003b4:	2001      	movs	r0, #1
 80003b6:	f000 fba5 	bl	8000b04 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80003ba:	2006      	movs	r0, #6
 80003bc:	f7ff ff30 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(1);
 80003c0:	2001      	movs	r0, #1
 80003c2:	f000 fb9f 	bl	8000b04 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80003c6:	200c      	movs	r0, #12
 80003c8:	f7ff ff2a 	bl	8000220 <lcd_send_cmd>
}
 80003cc:	46c0      	nop			; (mov r8, r8)
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}

080003d2 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80003d2:	b580      	push	{r7, lr}
 80003d4:	b082      	sub	sp, #8
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80003da:	e006      	b.n	80003ea <lcd_send_string+0x18>
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	1c5a      	adds	r2, r3, #1
 80003e0:	607a      	str	r2, [r7, #4]
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	0018      	movs	r0, r3
 80003e6:	f7ff ff59 	bl	800029c <lcd_send_data>
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d1f4      	bne.n	80003dc <lcd_send_string+0xa>
}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	46c0      	nop			; (mov r8, r8)
 80003f6:	46bd      	mov	sp, r7
 80003f8:	b002      	add	sp, #8
 80003fa:	bd80      	pop	{r7, pc}

080003fc <HAL_UART_RxCpltCallback>:
//char main_buff[BUFFSIZE];
uint8_t acc[] = "accept \r\n";

uint8_t flag=0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_IT(&huart1, Rx_data, sizeof(Rx_data));//herculus konsolundan giridi alınması
 8000404:	4906      	ldr	r1, [pc, #24]	; (8000420 <HAL_UART_RxCpltCallback+0x24>)
 8000406:	4b07      	ldr	r3, [pc, #28]	; (8000424 <HAL_UART_RxCpltCallback+0x28>)
 8000408:	2210      	movs	r2, #16
 800040a:	0018      	movs	r0, r3
 800040c:	f001 ffe8 	bl	80023e0 <HAL_UART_Receive_IT>

    flag=1;
 8000410:	4b05      	ldr	r3, [pc, #20]	; (8000428 <HAL_UART_RxCpltCallback+0x2c>)
 8000412:	2201      	movs	r2, #1
 8000414:	701a      	strb	r2, [r3, #0]
}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	46bd      	mov	sp, r7
 800041a:	b002      	add	sp, #8
 800041c:	bd80      	pop	{r7, pc}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	200000f8 	.word	0x200000f8
 8000424:	20000074 	.word	0x20000074
 8000428:	2000010c 	.word	0x2000010c

0800042c <write_lcd>:


void write_lcd()
{
 800042c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042e:	46c6      	mov	lr, r8
 8000430:	b500      	push	{lr}
 8000432:	b088      	sub	sp, #32
 8000434:	af00      	add	r7, sp, #0
	a = 0;
 8000436:	4e37      	ldr	r6, [pc, #220]	; (8000514 <write_lcd+0xe8>)
 8000438:	2300      	movs	r3, #0
 800043a:	469c      	mov	ip, r3
 800043c:	4663      	mov	r3, ip
 800043e:	6033      	str	r3, [r6, #0]
	for(int i=0; i<16; i++){
 8000440:	2600      	movs	r6, #0
 8000442:	61be      	str	r6, [r7, #24]
 8000444:	e010      	b.n	8000468 <write_lcd+0x3c>
		if(Rx_data[i] != 0)
 8000446:	4b34      	ldr	r3, [pc, #208]	; (8000518 <write_lcd+0xec>)
 8000448:	469c      	mov	ip, r3
 800044a:	69be      	ldr	r6, [r7, #24]
 800044c:	4466      	add	r6, ip
 800044e:	7836      	ldrb	r6, [r6, #0]
 8000450:	2e00      	cmp	r6, #0
 8000452:	d006      	beq.n	8000462 <write_lcd+0x36>
		{
			a++;
 8000454:	4e2f      	ldr	r6, [pc, #188]	; (8000514 <write_lcd+0xe8>)
 8000456:	6836      	ldr	r6, [r6, #0]
 8000458:	1c73      	adds	r3, r6, #1
 800045a:	469c      	mov	ip, r3
 800045c:	4e2d      	ldr	r6, [pc, #180]	; (8000514 <write_lcd+0xe8>)
 800045e:	4663      	mov	r3, ip
 8000460:	6033      	str	r3, [r6, #0]
	for(int i=0; i<16; i++){
 8000462:	69be      	ldr	r6, [r7, #24]
 8000464:	3601      	adds	r6, #1
 8000466:	61be      	str	r6, [r7, #24]
 8000468:	69be      	ldr	r6, [r7, #24]
 800046a:	2e0f      	cmp	r6, #15
 800046c:	ddeb      	ble.n	8000446 <write_lcd+0x1a>
		}
	}
	uint8_t w_data[a];
 800046e:	4e29      	ldr	r6, [pc, #164]	; (8000514 <write_lcd+0xe8>)
 8000470:	6836      	ldr	r6, [r6, #0]
 8000472:	46ec      	mov	ip, sp
 8000474:	46e0      	mov	r8, ip
 8000476:	1e73      	subs	r3, r6, #1
 8000478:	469c      	mov	ip, r3
 800047a:	4663      	mov	r3, ip
 800047c:	617b      	str	r3, [r7, #20]
 800047e:	0033      	movs	r3, r6
 8000480:	60bb      	str	r3, [r7, #8]
 8000482:	2300      	movs	r3, #0
 8000484:	60fb      	str	r3, [r7, #12]
 8000486:	68bb      	ldr	r3, [r7, #8]
 8000488:	0f5b      	lsrs	r3, r3, #29
 800048a:	469c      	mov	ip, r3
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	00d9      	lsls	r1, r3, #3
 8000490:	4663      	mov	r3, ip
 8000492:	4319      	orrs	r1, r3
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	00d8      	lsls	r0, r3, #3
 8000498:	0031      	movs	r1, r6
 800049a:	000c      	movs	r4, r1
 800049c:	2100      	movs	r1, #0
 800049e:	000d      	movs	r5, r1
 80004a0:	0f61      	lsrs	r1, r4, #29
 80004a2:	00eb      	lsls	r3, r5, #3
 80004a4:	607b      	str	r3, [r7, #4]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	430b      	orrs	r3, r1
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	00e3      	lsls	r3, r4, #3
 80004ae:	603b      	str	r3, [r7, #0]
 80004b0:	0033      	movs	r3, r6
 80004b2:	3307      	adds	r3, #7
 80004b4:	08db      	lsrs	r3, r3, #3
 80004b6:	00db      	lsls	r3, r3, #3
 80004b8:	466a      	mov	r2, sp
 80004ba:	1ad3      	subs	r3, r2, r3
 80004bc:	469d      	mov	sp, r3
 80004be:	466b      	mov	r3, sp
 80004c0:	3300      	adds	r3, #0
 80004c2:	613b      	str	r3, [r7, #16]
	for(int i = 0; i<a; i++){
 80004c4:	2300      	movs	r3, #0
 80004c6:	61fb      	str	r3, [r7, #28]
 80004c8:	e00b      	b.n	80004e2 <write_lcd+0xb6>
		w_data[i] = Rx_data[i];
 80004ca:	4a13      	ldr	r2, [pc, #76]	; (8000518 <write_lcd+0xec>)
 80004cc:	69fb      	ldr	r3, [r7, #28]
 80004ce:	18d3      	adds	r3, r2, r3
 80004d0:	7819      	ldrb	r1, [r3, #0]
 80004d2:	693a      	ldr	r2, [r7, #16]
 80004d4:	69fb      	ldr	r3, [r7, #28]
 80004d6:	18d3      	adds	r3, r2, r3
 80004d8:	1c0a      	adds	r2, r1, #0
 80004da:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<a; i++){
 80004dc:	69fb      	ldr	r3, [r7, #28]
 80004de:	3301      	adds	r3, #1
 80004e0:	61fb      	str	r3, [r7, #28]
 80004e2:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <write_lcd+0xe8>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	69fa      	ldr	r2, [r7, #28]
 80004e8:	429a      	cmp	r2, r3
 80004ea:	dbee      	blt.n	80004ca <write_lcd+0x9e>
	}
		lcd_put_cur(0, 0);
 80004ec:	2100      	movs	r1, #0
 80004ee:	2000      	movs	r0, #0
 80004f0:	f7ff ff12 	bl	8000318 <lcd_put_cur>
		lcd_send_string(w_data);
 80004f4:	693b      	ldr	r3, [r7, #16]
 80004f6:	0018      	movs	r0, r3
 80004f8:	f7ff ff6b 	bl	80003d2 <lcd_send_string>
		HAL_Delay(500);
 80004fc:	23fa      	movs	r3, #250	; 0xfa
 80004fe:	005b      	lsls	r3, r3, #1
 8000500:	0018      	movs	r0, r3
 8000502:	f000 faff 	bl	8000b04 <HAL_Delay>
 8000506:	46c5      	mov	sp, r8


}
 8000508:	46c0      	nop			; (mov r8, r8)
 800050a:	46bd      	mov	sp, r7
 800050c:	b008      	add	sp, #32
 800050e:	bc80      	pop	{r7}
 8000510:	46b8      	mov	r8, r7
 8000512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000514:	20000108 	.word	0x20000108
 8000518:	200000f8 	.word	0x200000f8

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fa8c 	bl	8000a3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f818 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f8ee 	bl	8000708 <MX_GPIO_Init>
  MX_I2C1_Init();
 800052c:	f000 f87c 	bl	8000628 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000530:	f000 f8ba 	bl	80006a8 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lcd_init();
 8000534:	f7ff ff0f 	bl	8000356 <lcd_init>
	    HAL_UART_Receive_IT(&huart1, Rx_data, sizeof(Rx_data));
 8000538:	4905      	ldr	r1, [pc, #20]	; (8000550 <main+0x34>)
 800053a:	4b06      	ldr	r3, [pc, #24]	; (8000554 <main+0x38>)
 800053c:	2210      	movs	r2, #16
 800053e:	0018      	movs	r0, r3
 8000540:	f001 ff4e 	bl	80023e0 <HAL_UART_Receive_IT>
	    HAL_Delay(250);
 8000544:	20fa      	movs	r0, #250	; 0xfa
 8000546:	f000 fadd 	bl	8000b04 <HAL_Delay>
	    write_lcd();
 800054a:	f7ff ff6f 	bl	800042c <write_lcd>
	  lcd_init();
 800054e:	e7f1      	b.n	8000534 <main+0x18>
 8000550:	200000f8 	.word	0x200000f8
 8000554:	20000074 	.word	0x20000074

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b590      	push	{r4, r7, lr}
 800055a:	b097      	sub	sp, #92	; 0x5c
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	2428      	movs	r4, #40	; 0x28
 8000560:	193b      	adds	r3, r7, r4
 8000562:	0018      	movs	r0, r3
 8000564:	2330      	movs	r3, #48	; 0x30
 8000566:	001a      	movs	r2, r3
 8000568:	2100      	movs	r1, #0
 800056a:	f003 f863 	bl	8003634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056e:	2318      	movs	r3, #24
 8000570:	18fb      	adds	r3, r7, r3
 8000572:	0018      	movs	r0, r3
 8000574:	2310      	movs	r3, #16
 8000576:	001a      	movs	r2, r3
 8000578:	2100      	movs	r1, #0
 800057a:	f003 f85b 	bl	8003634 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	0018      	movs	r0, r3
 8000582:	2314      	movs	r3, #20
 8000584:	001a      	movs	r2, r3
 8000586:	2100      	movs	r1, #0
 8000588:	f003 f854 	bl	8003634 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800058c:	0021      	movs	r1, r4
 800058e:	187b      	adds	r3, r7, r1
 8000590:	2203      	movs	r2, #3
 8000592:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2201      	movs	r2, #1
 8000598:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059a:	187b      	adds	r3, r7, r1
 800059c:	2201      	movs	r2, #1
 800059e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	2210      	movs	r2, #16
 80005a4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	2202      	movs	r2, #2
 80005aa:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ac:	187b      	adds	r3, r7, r1
 80005ae:	2280      	movs	r2, #128	; 0x80
 80005b0:	0252      	lsls	r2, r2, #9
 80005b2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	2280      	movs	r2, #128	; 0x80
 80005b8:	0352      	lsls	r2, r2, #13
 80005ba:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	2200      	movs	r2, #0
 80005c0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	0018      	movs	r0, r3
 80005c6:	f001 f96d 	bl	80018a4 <HAL_RCC_OscConfig>
 80005ca:	1e03      	subs	r3, r0, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80005ce:	f000 f913 	bl	80007f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d2:	2118      	movs	r1, #24
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	2207      	movs	r2, #7
 80005d8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	2202      	movs	r2, #2
 80005de:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2200      	movs	r2, #0
 80005ea:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2101      	movs	r1, #1
 80005f0:	0018      	movs	r0, r3
 80005f2:	f001 fc71 	bl	8001ed8 <HAL_RCC_ClockConfig>
 80005f6:	1e03      	subs	r3, r0, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005fa:	f000 f8fd 	bl	80007f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2221      	movs	r2, #33	; 0x21
 8000602:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2200      	movs	r2, #0
 800060e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	0018      	movs	r0, r3
 8000614:	f001 fdb2 	bl	800217c <HAL_RCCEx_PeriphCLKConfig>
 8000618:	1e03      	subs	r3, r0, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800061c:	f000 f8ec 	bl	80007f8 <Error_Handler>
  }
}
 8000620:	46c0      	nop			; (mov r8, r8)
 8000622:	46bd      	mov	sp, r7
 8000624:	b017      	add	sp, #92	; 0x5c
 8000626:	bd90      	pop	{r4, r7, pc}

08000628 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800062c:	4b1b      	ldr	r3, [pc, #108]	; (800069c <MX_I2C1_Init+0x74>)
 800062e:	4a1c      	ldr	r2, [pc, #112]	; (80006a0 <MX_I2C1_Init+0x78>)
 8000630:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000632:	4b1a      	ldr	r3, [pc, #104]	; (800069c <MX_I2C1_Init+0x74>)
 8000634:	4a1b      	ldr	r2, [pc, #108]	; (80006a4 <MX_I2C1_Init+0x7c>)
 8000636:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000638:	4b18      	ldr	r3, [pc, #96]	; (800069c <MX_I2C1_Init+0x74>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800063e:	4b17      	ldr	r3, [pc, #92]	; (800069c <MX_I2C1_Init+0x74>)
 8000640:	2201      	movs	r2, #1
 8000642:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000644:	4b15      	ldr	r3, [pc, #84]	; (800069c <MX_I2C1_Init+0x74>)
 8000646:	2200      	movs	r2, #0
 8000648:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800064a:	4b14      	ldr	r3, [pc, #80]	; (800069c <MX_I2C1_Init+0x74>)
 800064c:	2200      	movs	r2, #0
 800064e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <MX_I2C1_Init+0x74>)
 8000652:	2200      	movs	r2, #0
 8000654:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000656:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_I2C1_Init+0x74>)
 8000658:	2200      	movs	r2, #0
 800065a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_I2C1_Init+0x74>)
 800065e:	2200      	movs	r2, #0
 8000660:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_I2C1_Init+0x74>)
 8000664:	0018      	movs	r0, r3
 8000666:	f000 fd5b 	bl	8001120 <HAL_I2C_Init>
 800066a:	1e03      	subs	r3, r0, #0
 800066c:	d001      	beq.n	8000672 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800066e:	f000 f8c3 	bl	80007f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000672:	4b0a      	ldr	r3, [pc, #40]	; (800069c <MX_I2C1_Init+0x74>)
 8000674:	2100      	movs	r1, #0
 8000676:	0018      	movs	r0, r3
 8000678:	f001 f87c 	bl	8001774 <HAL_I2CEx_ConfigAnalogFilter>
 800067c:	1e03      	subs	r3, r0, #0
 800067e:	d001      	beq.n	8000684 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000680:	f000 f8ba 	bl	80007f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000684:	4b05      	ldr	r3, [pc, #20]	; (800069c <MX_I2C1_Init+0x74>)
 8000686:	2100      	movs	r1, #0
 8000688:	0018      	movs	r0, r3
 800068a:	f001 f8bf 	bl	800180c <HAL_I2CEx_ConfigDigitalFilter>
 800068e:	1e03      	subs	r3, r0, #0
 8000690:	d001      	beq.n	8000696 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000692:	f000 f8b1 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000028 	.word	0x20000028
 80006a0:	40005400 	.word	0x40005400
 80006a4:	0000020b 	.word	0x0000020b

080006a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006ac:	4b14      	ldr	r3, [pc, #80]	; (8000700 <MX_USART1_UART_Init+0x58>)
 80006ae:	4a15      	ldr	r2, [pc, #84]	; (8000704 <MX_USART1_UART_Init+0x5c>)
 80006b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80006b2:	4b13      	ldr	r3, [pc, #76]	; (8000700 <MX_USART1_UART_Init+0x58>)
 80006b4:	2296      	movs	r2, #150	; 0x96
 80006b6:	0212      	lsls	r2, r2, #8
 80006b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_USART1_UART_Init+0x58>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_USART1_UART_Init+0x58>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_USART1_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_USART1_UART_Init+0x58>)
 80006ce:	220c      	movs	r2, #12
 80006d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <MX_USART1_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_USART1_UART_Init+0x58>)
 80006da:	2200      	movs	r2, #0
 80006dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <MX_USART1_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_USART1_UART_Init+0x58>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006ea:	4b05      	ldr	r3, [pc, #20]	; (8000700 <MX_USART1_UART_Init+0x58>)
 80006ec:	0018      	movs	r0, r3
 80006ee:	f001 fe23 	bl	8002338 <HAL_UART_Init>
 80006f2:	1e03      	subs	r3, r0, #0
 80006f4:	d001      	beq.n	80006fa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006f6:	f000 f87f 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000074 	.word	0x20000074
 8000704:	40013800 	.word	0x40013800

08000708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000708:	b590      	push	{r4, r7, lr}
 800070a:	b08b      	sub	sp, #44	; 0x2c
 800070c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	2414      	movs	r4, #20
 8000710:	193b      	adds	r3, r7, r4
 8000712:	0018      	movs	r0, r3
 8000714:	2314      	movs	r3, #20
 8000716:	001a      	movs	r2, r3
 8000718:	2100      	movs	r1, #0
 800071a:	f002 ff8b 	bl	8003634 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800071e:	4b34      	ldr	r3, [pc, #208]	; (80007f0 <MX_GPIO_Init+0xe8>)
 8000720:	695a      	ldr	r2, [r3, #20]
 8000722:	4b33      	ldr	r3, [pc, #204]	; (80007f0 <MX_GPIO_Init+0xe8>)
 8000724:	2180      	movs	r1, #128	; 0x80
 8000726:	03c9      	lsls	r1, r1, #15
 8000728:	430a      	orrs	r2, r1
 800072a:	615a      	str	r2, [r3, #20]
 800072c:	4b30      	ldr	r3, [pc, #192]	; (80007f0 <MX_GPIO_Init+0xe8>)
 800072e:	695a      	ldr	r2, [r3, #20]
 8000730:	2380      	movs	r3, #128	; 0x80
 8000732:	03db      	lsls	r3, r3, #15
 8000734:	4013      	ands	r3, r2
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	4b2d      	ldr	r3, [pc, #180]	; (80007f0 <MX_GPIO_Init+0xe8>)
 800073c:	695a      	ldr	r2, [r3, #20]
 800073e:	4b2c      	ldr	r3, [pc, #176]	; (80007f0 <MX_GPIO_Init+0xe8>)
 8000740:	2180      	movs	r1, #128	; 0x80
 8000742:	0289      	lsls	r1, r1, #10
 8000744:	430a      	orrs	r2, r1
 8000746:	615a      	str	r2, [r3, #20]
 8000748:	4b29      	ldr	r3, [pc, #164]	; (80007f0 <MX_GPIO_Init+0xe8>)
 800074a:	695a      	ldr	r2, [r3, #20]
 800074c:	2380      	movs	r3, #128	; 0x80
 800074e:	029b      	lsls	r3, r3, #10
 8000750:	4013      	ands	r3, r2
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	4b26      	ldr	r3, [pc, #152]	; (80007f0 <MX_GPIO_Init+0xe8>)
 8000758:	695a      	ldr	r2, [r3, #20]
 800075a:	4b25      	ldr	r3, [pc, #148]	; (80007f0 <MX_GPIO_Init+0xe8>)
 800075c:	2180      	movs	r1, #128	; 0x80
 800075e:	0309      	lsls	r1, r1, #12
 8000760:	430a      	orrs	r2, r1
 8000762:	615a      	str	r2, [r3, #20]
 8000764:	4b22      	ldr	r3, [pc, #136]	; (80007f0 <MX_GPIO_Init+0xe8>)
 8000766:	695a      	ldr	r2, [r3, #20]
 8000768:	2380      	movs	r3, #128	; 0x80
 800076a:	031b      	lsls	r3, r3, #12
 800076c:	4013      	ands	r3, r2
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000772:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <MX_GPIO_Init+0xe8>)
 8000774:	695a      	ldr	r2, [r3, #20]
 8000776:	4b1e      	ldr	r3, [pc, #120]	; (80007f0 <MX_GPIO_Init+0xe8>)
 8000778:	2180      	movs	r1, #128	; 0x80
 800077a:	02c9      	lsls	r1, r1, #11
 800077c:	430a      	orrs	r2, r1
 800077e:	615a      	str	r2, [r3, #20]
 8000780:	4b1b      	ldr	r3, [pc, #108]	; (80007f0 <MX_GPIO_Init+0xe8>)
 8000782:	695a      	ldr	r2, [r3, #20]
 8000784:	2380      	movs	r3, #128	; 0x80
 8000786:	02db      	lsls	r3, r3, #11
 8000788:	4013      	ands	r3, r2
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 800078e:	23c0      	movs	r3, #192	; 0xc0
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	4818      	ldr	r0, [pc, #96]	; (80007f4 <MX_GPIO_Init+0xec>)
 8000794:	2200      	movs	r2, #0
 8000796:	0019      	movs	r1, r3
 8000798:	f000 fca4 	bl	80010e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800079c:	193b      	adds	r3, r7, r4
 800079e:	2201      	movs	r2, #1
 80007a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	2290      	movs	r2, #144	; 0x90
 80007a6:	0352      	lsls	r2, r2, #13
 80007a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	193b      	adds	r3, r7, r4
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007b0:	193a      	adds	r2, r7, r4
 80007b2:	2390      	movs	r3, #144	; 0x90
 80007b4:	05db      	lsls	r3, r3, #23
 80007b6:	0011      	movs	r1, r2
 80007b8:	0018      	movs	r0, r3
 80007ba:	f000 fb23 	bl	8000e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80007be:	0021      	movs	r1, r4
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	22c0      	movs	r2, #192	; 0xc0
 80007c4:	0092      	lsls	r2, r2, #2
 80007c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2201      	movs	r2, #1
 80007cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	4a05      	ldr	r2, [pc, #20]	; (80007f4 <MX_GPIO_Init+0xec>)
 80007de:	0019      	movs	r1, r3
 80007e0:	0010      	movs	r0, r2
 80007e2:	f000 fb0f 	bl	8000e04 <HAL_GPIO_Init>

}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	46bd      	mov	sp, r7
 80007ea:	b00b      	add	sp, #44	; 0x2c
 80007ec:	bd90      	pop	{r4, r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	40021000 	.word	0x40021000
 80007f4:	48000800 	.word	0x48000800

080007f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007fc:	b672      	cpsid	i
}
 80007fe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000800:	e7fe      	b.n	8000800 <Error_Handler+0x8>
	...

08000804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <HAL_MspInit+0x44>)
 800080c:	699a      	ldr	r2, [r3, #24]
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <HAL_MspInit+0x44>)
 8000810:	2101      	movs	r1, #1
 8000812:	430a      	orrs	r2, r1
 8000814:	619a      	str	r2, [r3, #24]
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <HAL_MspInit+0x44>)
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	2201      	movs	r2, #1
 800081c:	4013      	ands	r3, r2
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <HAL_MspInit+0x44>)
 8000824:	69da      	ldr	r2, [r3, #28]
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <HAL_MspInit+0x44>)
 8000828:	2180      	movs	r1, #128	; 0x80
 800082a:	0549      	lsls	r1, r1, #21
 800082c:	430a      	orrs	r2, r1
 800082e:	61da      	str	r2, [r3, #28]
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <HAL_MspInit+0x44>)
 8000832:	69da      	ldr	r2, [r3, #28]
 8000834:	2380      	movs	r3, #128	; 0x80
 8000836:	055b      	lsls	r3, r3, #21
 8000838:	4013      	ands	r3, r2
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	46bd      	mov	sp, r7
 8000842:	b002      	add	sp, #8
 8000844:	bd80      	pop	{r7, pc}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	40021000 	.word	0x40021000

0800084c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800084c:	b590      	push	{r4, r7, lr}
 800084e:	b08b      	sub	sp, #44	; 0x2c
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000854:	2414      	movs	r4, #20
 8000856:	193b      	adds	r3, r7, r4
 8000858:	0018      	movs	r0, r3
 800085a:	2314      	movs	r3, #20
 800085c:	001a      	movs	r2, r3
 800085e:	2100      	movs	r1, #0
 8000860:	f002 fee8 	bl	8003634 <memset>
  if(hi2c->Instance==I2C1)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a1c      	ldr	r2, [pc, #112]	; (80008dc <HAL_I2C_MspInit+0x90>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d131      	bne.n	80008d2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <HAL_I2C_MspInit+0x94>)
 8000870:	695a      	ldr	r2, [r3, #20]
 8000872:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <HAL_I2C_MspInit+0x94>)
 8000874:	2180      	movs	r1, #128	; 0x80
 8000876:	02c9      	lsls	r1, r1, #11
 8000878:	430a      	orrs	r2, r1
 800087a:	615a      	str	r2, [r3, #20]
 800087c:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <HAL_I2C_MspInit+0x94>)
 800087e:	695a      	ldr	r2, [r3, #20]
 8000880:	2380      	movs	r3, #128	; 0x80
 8000882:	02db      	lsls	r3, r3, #11
 8000884:	4013      	ands	r3, r2
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800088a:	0021      	movs	r1, r4
 800088c:	187b      	adds	r3, r7, r1
 800088e:	22c0      	movs	r2, #192	; 0xc0
 8000890:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000892:	187b      	adds	r3, r7, r1
 8000894:	2212      	movs	r2, #18
 8000896:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2201      	movs	r2, #1
 800089c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	2203      	movs	r2, #3
 80008a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2201      	movs	r2, #1
 80008a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <HAL_I2C_MspInit+0x98>)
 80008ae:	0019      	movs	r1, r3
 80008b0:	0010      	movs	r0, r2
 80008b2:	f000 faa7 	bl	8000e04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008b6:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <HAL_I2C_MspInit+0x94>)
 80008b8:	69da      	ldr	r2, [r3, #28]
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <HAL_I2C_MspInit+0x94>)
 80008bc:	2180      	movs	r1, #128	; 0x80
 80008be:	0389      	lsls	r1, r1, #14
 80008c0:	430a      	orrs	r2, r1
 80008c2:	61da      	str	r2, [r3, #28]
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <HAL_I2C_MspInit+0x94>)
 80008c6:	69da      	ldr	r2, [r3, #28]
 80008c8:	2380      	movs	r3, #128	; 0x80
 80008ca:	039b      	lsls	r3, r3, #14
 80008cc:	4013      	ands	r3, r2
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	46bd      	mov	sp, r7
 80008d6:	b00b      	add	sp, #44	; 0x2c
 80008d8:	bd90      	pop	{r4, r7, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	40005400 	.word	0x40005400
 80008e0:	40021000 	.word	0x40021000
 80008e4:	48000400 	.word	0x48000400

080008e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e8:	b590      	push	{r4, r7, lr}
 80008ea:	b08b      	sub	sp, #44	; 0x2c
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	2414      	movs	r4, #20
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	0018      	movs	r0, r3
 80008f6:	2314      	movs	r3, #20
 80008f8:	001a      	movs	r2, r3
 80008fa:	2100      	movs	r1, #0
 80008fc:	f002 fe9a 	bl	8003634 <memset>
  if(huart->Instance==USART1)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a21      	ldr	r2, [pc, #132]	; (800098c <HAL_UART_MspInit+0xa4>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d13b      	bne.n	8000982 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800090a:	4b21      	ldr	r3, [pc, #132]	; (8000990 <HAL_UART_MspInit+0xa8>)
 800090c:	699a      	ldr	r2, [r3, #24]
 800090e:	4b20      	ldr	r3, [pc, #128]	; (8000990 <HAL_UART_MspInit+0xa8>)
 8000910:	2180      	movs	r1, #128	; 0x80
 8000912:	01c9      	lsls	r1, r1, #7
 8000914:	430a      	orrs	r2, r1
 8000916:	619a      	str	r2, [r3, #24]
 8000918:	4b1d      	ldr	r3, [pc, #116]	; (8000990 <HAL_UART_MspInit+0xa8>)
 800091a:	699a      	ldr	r2, [r3, #24]
 800091c:	2380      	movs	r3, #128	; 0x80
 800091e:	01db      	lsls	r3, r3, #7
 8000920:	4013      	ands	r3, r2
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <HAL_UART_MspInit+0xa8>)
 8000928:	695a      	ldr	r2, [r3, #20]
 800092a:	4b19      	ldr	r3, [pc, #100]	; (8000990 <HAL_UART_MspInit+0xa8>)
 800092c:	2180      	movs	r1, #128	; 0x80
 800092e:	0289      	lsls	r1, r1, #10
 8000930:	430a      	orrs	r2, r1
 8000932:	615a      	str	r2, [r3, #20]
 8000934:	4b16      	ldr	r3, [pc, #88]	; (8000990 <HAL_UART_MspInit+0xa8>)
 8000936:	695a      	ldr	r2, [r3, #20]
 8000938:	2380      	movs	r3, #128	; 0x80
 800093a:	029b      	lsls	r3, r3, #10
 800093c:	4013      	ands	r3, r2
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000942:	193b      	adds	r3, r7, r4
 8000944:	22c0      	movs	r2, #192	; 0xc0
 8000946:	00d2      	lsls	r2, r2, #3
 8000948:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	0021      	movs	r1, r4
 800094c:	187b      	adds	r3, r7, r1
 800094e:	2202      	movs	r2, #2
 8000950:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2203      	movs	r2, #3
 800095c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2201      	movs	r2, #1
 8000962:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000964:	187a      	adds	r2, r7, r1
 8000966:	2390      	movs	r3, #144	; 0x90
 8000968:	05db      	lsls	r3, r3, #23
 800096a:	0011      	movs	r1, r2
 800096c:	0018      	movs	r0, r3
 800096e:	f000 fa49 	bl	8000e04 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2100      	movs	r1, #0
 8000976:	201b      	movs	r0, #27
 8000978:	f000 f994 	bl	8000ca4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800097c:	201b      	movs	r0, #27
 800097e:	f000 f9a6 	bl	8000cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	46bd      	mov	sp, r7
 8000986:	b00b      	add	sp, #44	; 0x2c
 8000988:	bd90      	pop	{r4, r7, pc}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	40013800 	.word	0x40013800
 8000990:	40021000 	.word	0x40021000

08000994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <NMI_Handler+0x4>

0800099a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099e:	e7fe      	b.n	800099e <HardFault_Handler+0x4>

080009a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009a4:	46c0      	nop			; (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b8:	f000 f888 	bl	8000acc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009bc:	46c0      	nop			; (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009c8:	4b03      	ldr	r3, [pc, #12]	; (80009d8 <USART1_IRQHandler+0x14>)
 80009ca:	0018      	movs	r0, r3
 80009cc:	f001 fd6a 	bl	80024a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009d0:	46c0      	nop			; (mov r8, r8)
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	20000074 	.word	0x20000074

080009dc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009e8:	480d      	ldr	r0, [pc, #52]	; (8000a20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009ea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009ec:	480d      	ldr	r0, [pc, #52]	; (8000a24 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ee:	490e      	ldr	r1, [pc, #56]	; (8000a28 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009f0:	4a0e      	ldr	r2, [pc, #56]	; (8000a2c <LoopForever+0xe>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f4:	e002      	b.n	80009fc <LoopCopyDataInit>

080009f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fa:	3304      	adds	r3, #4

080009fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a00:	d3f9      	bcc.n	80009f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a02:	4a0b      	ldr	r2, [pc, #44]	; (8000a30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a04:	4c0b      	ldr	r4, [pc, #44]	; (8000a34 <LoopForever+0x16>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a08:	e001      	b.n	8000a0e <LoopFillZerobss>

08000a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a0c:	3204      	adds	r2, #4

08000a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a10:	d3fb      	bcc.n	8000a0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a12:	f7ff ffe3 	bl	80009dc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a16:	f002 fde9 	bl	80035ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a1a:	f7ff fd7f 	bl	800051c <main>

08000a1e <LoopForever>:

LoopForever:
    b LoopForever
 8000a1e:	e7fe      	b.n	8000a1e <LoopForever>
  ldr   r0, =_estack
 8000a20:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a28:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a2c:	0800369c 	.word	0x0800369c
  ldr r2, =_sbss
 8000a30:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a34:	20000114 	.word	0x20000114

08000a38 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a38:	e7fe      	b.n	8000a38 <ADC1_COMP_IRQHandler>
	...

08000a3c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a40:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <HAL_Init+0x24>)
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <HAL_Init+0x24>)
 8000a46:	2110      	movs	r1, #16
 8000a48:	430a      	orrs	r2, r1
 8000a4a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f000 f809 	bl	8000a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a52:	f7ff fed7 	bl	8000804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a56:	2300      	movs	r3, #0
}
 8000a58:	0018      	movs	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	40022000 	.word	0x40022000

08000a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a64:	b590      	push	{r4, r7, lr}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <HAL_InitTick+0x5c>)
 8000a6e:	681c      	ldr	r4, [r3, #0]
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <HAL_InitTick+0x60>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	0019      	movs	r1, r3
 8000a76:	23fa      	movs	r3, #250	; 0xfa
 8000a78:	0098      	lsls	r0, r3, #2
 8000a7a:	f7ff fb45 	bl	8000108 <__udivsi3>
 8000a7e:	0003      	movs	r3, r0
 8000a80:	0019      	movs	r1, r3
 8000a82:	0020      	movs	r0, r4
 8000a84:	f7ff fb40 	bl	8000108 <__udivsi3>
 8000a88:	0003      	movs	r3, r0
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f000 f92f 	bl	8000cee <HAL_SYSTICK_Config>
 8000a90:	1e03      	subs	r3, r0, #0
 8000a92:	d001      	beq.n	8000a98 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a94:	2301      	movs	r3, #1
 8000a96:	e00f      	b.n	8000ab8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	d80b      	bhi.n	8000ab6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a9e:	6879      	ldr	r1, [r7, #4]
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	425b      	negs	r3, r3
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f000 f8fc 	bl	8000ca4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <HAL_InitTick+0x64>)
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	e000      	b.n	8000ab8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
}
 8000ab8:	0018      	movs	r0, r3
 8000aba:	46bd      	mov	sp, r7
 8000abc:	b003      	add	sp, #12
 8000abe:	bd90      	pop	{r4, r7, pc}
 8000ac0:	20000000 	.word	0x20000000
 8000ac4:	20000008 	.word	0x20000008
 8000ac8:	20000004 	.word	0x20000004

08000acc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad0:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <HAL_IncTick+0x1c>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	001a      	movs	r2, r3
 8000ad6:	4b05      	ldr	r3, [pc, #20]	; (8000aec <HAL_IncTick+0x20>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	18d2      	adds	r2, r2, r3
 8000adc:	4b03      	ldr	r3, [pc, #12]	; (8000aec <HAL_IncTick+0x20>)
 8000ade:	601a      	str	r2, [r3, #0]
}
 8000ae0:	46c0      	nop			; (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	20000008 	.word	0x20000008
 8000aec:	20000110 	.word	0x20000110

08000af0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  return uwTick;
 8000af4:	4b02      	ldr	r3, [pc, #8]	; (8000b00 <HAL_GetTick+0x10>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	0018      	movs	r0, r3
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	20000110 	.word	0x20000110

08000b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b0c:	f7ff fff0 	bl	8000af0 <HAL_GetTick>
 8000b10:	0003      	movs	r3, r0
 8000b12:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	d005      	beq.n	8000b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <HAL_Delay+0x44>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	001a      	movs	r2, r3
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	189b      	adds	r3, r3, r2
 8000b28:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	f7ff ffe0 	bl	8000af0 <HAL_GetTick>
 8000b30:	0002      	movs	r2, r0
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d8f7      	bhi.n	8000b2c <HAL_Delay+0x28>
  {
  }
}
 8000b3c:	46c0      	nop			; (mov r8, r8)
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b004      	add	sp, #16
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	20000008 	.word	0x20000008

08000b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	0002      	movs	r2, r0
 8000b54:	1dfb      	adds	r3, r7, #7
 8000b56:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b58:	1dfb      	adds	r3, r7, #7
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b7f      	cmp	r3, #127	; 0x7f
 8000b5e:	d809      	bhi.n	8000b74 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b60:	1dfb      	adds	r3, r7, #7
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	001a      	movs	r2, r3
 8000b66:	231f      	movs	r3, #31
 8000b68:	401a      	ands	r2, r3
 8000b6a:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <__NVIC_EnableIRQ+0x30>)
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	4091      	lsls	r1, r2
 8000b70:	000a      	movs	r2, r1
 8000b72:	601a      	str	r2, [r3, #0]
  }
}
 8000b74:	46c0      	nop			; (mov r8, r8)
 8000b76:	46bd      	mov	sp, r7
 8000b78:	b002      	add	sp, #8
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	e000e100 	.word	0xe000e100

08000b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b80:	b590      	push	{r4, r7, lr}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	0002      	movs	r2, r0
 8000b88:	6039      	str	r1, [r7, #0]
 8000b8a:	1dfb      	adds	r3, r7, #7
 8000b8c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b8e:	1dfb      	adds	r3, r7, #7
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b7f      	cmp	r3, #127	; 0x7f
 8000b94:	d828      	bhi.n	8000be8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b96:	4a2f      	ldr	r2, [pc, #188]	; (8000c54 <__NVIC_SetPriority+0xd4>)
 8000b98:	1dfb      	adds	r3, r7, #7
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	b25b      	sxtb	r3, r3
 8000b9e:	089b      	lsrs	r3, r3, #2
 8000ba0:	33c0      	adds	r3, #192	; 0xc0
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	589b      	ldr	r3, [r3, r2]
 8000ba6:	1dfa      	adds	r2, r7, #7
 8000ba8:	7812      	ldrb	r2, [r2, #0]
 8000baa:	0011      	movs	r1, r2
 8000bac:	2203      	movs	r2, #3
 8000bae:	400a      	ands	r2, r1
 8000bb0:	00d2      	lsls	r2, r2, #3
 8000bb2:	21ff      	movs	r1, #255	; 0xff
 8000bb4:	4091      	lsls	r1, r2
 8000bb6:	000a      	movs	r2, r1
 8000bb8:	43d2      	mvns	r2, r2
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	019b      	lsls	r3, r3, #6
 8000bc2:	22ff      	movs	r2, #255	; 0xff
 8000bc4:	401a      	ands	r2, r3
 8000bc6:	1dfb      	adds	r3, r7, #7
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	0018      	movs	r0, r3
 8000bcc:	2303      	movs	r3, #3
 8000bce:	4003      	ands	r3, r0
 8000bd0:	00db      	lsls	r3, r3, #3
 8000bd2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd4:	481f      	ldr	r0, [pc, #124]	; (8000c54 <__NVIC_SetPriority+0xd4>)
 8000bd6:	1dfb      	adds	r3, r7, #7
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	b25b      	sxtb	r3, r3
 8000bdc:	089b      	lsrs	r3, r3, #2
 8000bde:	430a      	orrs	r2, r1
 8000be0:	33c0      	adds	r3, #192	; 0xc0
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000be6:	e031      	b.n	8000c4c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000be8:	4a1b      	ldr	r2, [pc, #108]	; (8000c58 <__NVIC_SetPriority+0xd8>)
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	0019      	movs	r1, r3
 8000bf0:	230f      	movs	r3, #15
 8000bf2:	400b      	ands	r3, r1
 8000bf4:	3b08      	subs	r3, #8
 8000bf6:	089b      	lsrs	r3, r3, #2
 8000bf8:	3306      	adds	r3, #6
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	18d3      	adds	r3, r2, r3
 8000bfe:	3304      	adds	r3, #4
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	1dfa      	adds	r2, r7, #7
 8000c04:	7812      	ldrb	r2, [r2, #0]
 8000c06:	0011      	movs	r1, r2
 8000c08:	2203      	movs	r2, #3
 8000c0a:	400a      	ands	r2, r1
 8000c0c:	00d2      	lsls	r2, r2, #3
 8000c0e:	21ff      	movs	r1, #255	; 0xff
 8000c10:	4091      	lsls	r1, r2
 8000c12:	000a      	movs	r2, r1
 8000c14:	43d2      	mvns	r2, r2
 8000c16:	401a      	ands	r2, r3
 8000c18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	019b      	lsls	r3, r3, #6
 8000c1e:	22ff      	movs	r2, #255	; 0xff
 8000c20:	401a      	ands	r2, r3
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	0018      	movs	r0, r3
 8000c28:	2303      	movs	r3, #3
 8000c2a:	4003      	ands	r3, r0
 8000c2c:	00db      	lsls	r3, r3, #3
 8000c2e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c30:	4809      	ldr	r0, [pc, #36]	; (8000c58 <__NVIC_SetPriority+0xd8>)
 8000c32:	1dfb      	adds	r3, r7, #7
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	001c      	movs	r4, r3
 8000c38:	230f      	movs	r3, #15
 8000c3a:	4023      	ands	r3, r4
 8000c3c:	3b08      	subs	r3, #8
 8000c3e:	089b      	lsrs	r3, r3, #2
 8000c40:	430a      	orrs	r2, r1
 8000c42:	3306      	adds	r3, #6
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	18c3      	adds	r3, r0, r3
 8000c48:	3304      	adds	r3, #4
 8000c4a:	601a      	str	r2, [r3, #0]
}
 8000c4c:	46c0      	nop			; (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	b003      	add	sp, #12
 8000c52:	bd90      	pop	{r4, r7, pc}
 8000c54:	e000e100 	.word	0xe000e100
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	1e5a      	subs	r2, r3, #1
 8000c68:	2380      	movs	r3, #128	; 0x80
 8000c6a:	045b      	lsls	r3, r3, #17
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d301      	bcc.n	8000c74 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c70:	2301      	movs	r3, #1
 8000c72:	e010      	b.n	8000c96 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c74:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <SysTick_Config+0x44>)
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	3a01      	subs	r2, #1
 8000c7a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	425b      	negs	r3, r3
 8000c80:	2103      	movs	r1, #3
 8000c82:	0018      	movs	r0, r3
 8000c84:	f7ff ff7c 	bl	8000b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <SysTick_Config+0x44>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c8e:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <SysTick_Config+0x44>)
 8000c90:	2207      	movs	r2, #7
 8000c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	0018      	movs	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	b002      	add	sp, #8
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	e000e010 	.word	0xe000e010

08000ca4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	607a      	str	r2, [r7, #4]
 8000cae:	210f      	movs	r1, #15
 8000cb0:	187b      	adds	r3, r7, r1
 8000cb2:	1c02      	adds	r2, r0, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	187b      	adds	r3, r7, r1
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	b25b      	sxtb	r3, r3
 8000cbe:	0011      	movs	r1, r2
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f7ff ff5d 	bl	8000b80 <__NVIC_SetPriority>
}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b004      	add	sp, #16
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	0002      	movs	r2, r0
 8000cd6:	1dfb      	adds	r3, r7, #7
 8000cd8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cda:	1dfb      	adds	r3, r7, #7
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	b25b      	sxtb	r3, r3
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f7ff ff33 	bl	8000b4c <__NVIC_EnableIRQ>
}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b002      	add	sp, #8
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f7ff ffaf 	bl	8000c5c <SysTick_Config>
 8000cfe:	0003      	movs	r3, r0
}
 8000d00:	0018      	movs	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	b002      	add	sp, #8
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2221      	movs	r2, #33	; 0x21
 8000d14:	5c9b      	ldrb	r3, [r3, r2]
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d008      	beq.n	8000d2e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2204      	movs	r2, #4
 8000d20:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2220      	movs	r2, #32
 8000d26:	2100      	movs	r1, #0
 8000d28:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e020      	b.n	8000d70 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	210e      	movs	r1, #14
 8000d3a:	438a      	bics	r2, r1
 8000d3c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2101      	movs	r1, #1
 8000d4a:	438a      	bics	r2, r1
 8000d4c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d56:	2101      	movs	r1, #1
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	000a      	movs	r2, r1
 8000d5c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2221      	movs	r2, #33	; 0x21
 8000d62:	2101      	movs	r1, #1
 8000d64:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2220      	movs	r2, #32
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000d6e:	2300      	movs	r3, #0
}
 8000d70:	0018      	movs	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	b002      	add	sp, #8
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d80:	210f      	movs	r1, #15
 8000d82:	187b      	adds	r3, r7, r1
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2221      	movs	r2, #33	; 0x21
 8000d8c:	5c9b      	ldrb	r3, [r3, r2]
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d006      	beq.n	8000da2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2204      	movs	r2, #4
 8000d98:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d9a:	187b      	adds	r3, r7, r1
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	701a      	strb	r2, [r3, #0]
 8000da0:	e028      	b.n	8000df4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	210e      	movs	r1, #14
 8000dae:	438a      	bics	r2, r1
 8000db0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	438a      	bics	r2, r1
 8000dc0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dca:	2101      	movs	r1, #1
 8000dcc:	4091      	lsls	r1, r2
 8000dce:	000a      	movs	r2, r1
 8000dd0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2221      	movs	r2, #33	; 0x21
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2220      	movs	r2, #32
 8000dde:	2100      	movs	r1, #0
 8000de0:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d004      	beq.n	8000df4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	0010      	movs	r0, r2
 8000df2:	4798      	blx	r3
    } 
  }
  return status;
 8000df4:	230f      	movs	r3, #15
 8000df6:	18fb      	adds	r3, r7, r3
 8000df8:	781b      	ldrb	r3, [r3, #0]
}
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	b004      	add	sp, #16
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e12:	e14f      	b.n	80010b4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2101      	movs	r1, #1
 8000e1a:	697a      	ldr	r2, [r7, #20]
 8000e1c:	4091      	lsls	r1, r2
 8000e1e:	000a      	movs	r2, r1
 8000e20:	4013      	ands	r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d100      	bne.n	8000e2c <HAL_GPIO_Init+0x28>
 8000e2a:	e140      	b.n	80010ae <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	2203      	movs	r2, #3
 8000e32:	4013      	ands	r3, r2
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d005      	beq.n	8000e44 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d130      	bne.n	8000ea6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	2203      	movs	r2, #3
 8000e50:	409a      	lsls	r2, r3
 8000e52:	0013      	movs	r3, r2
 8000e54:	43da      	mvns	r2, r3
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	68da      	ldr	r2, [r3, #12]
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	409a      	lsls	r2, r3
 8000e66:	0013      	movs	r3, r2
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	409a      	lsls	r2, r3
 8000e80:	0013      	movs	r3, r2
 8000e82:	43da      	mvns	r2, r3
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	091b      	lsrs	r3, r3, #4
 8000e90:	2201      	movs	r2, #1
 8000e92:	401a      	ands	r2, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	409a      	lsls	r2, r3
 8000e98:	0013      	movs	r3, r2
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	2203      	movs	r2, #3
 8000eac:	4013      	ands	r3, r2
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	d017      	beq.n	8000ee2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	409a      	lsls	r2, r3
 8000ec0:	0013      	movs	r3, r2
 8000ec2:	43da      	mvns	r2, r3
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	689a      	ldr	r2, [r3, #8]
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	409a      	lsls	r2, r3
 8000ed4:	0013      	movs	r3, r2
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	4013      	ands	r3, r2
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d123      	bne.n	8000f36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	08da      	lsrs	r2, r3, #3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3208      	adds	r2, #8
 8000ef6:	0092      	lsls	r2, r2, #2
 8000ef8:	58d3      	ldr	r3, [r2, r3]
 8000efa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	2207      	movs	r2, #7
 8000f00:	4013      	ands	r3, r2
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	220f      	movs	r2, #15
 8000f06:	409a      	lsls	r2, r3
 8000f08:	0013      	movs	r3, r2
 8000f0a:	43da      	mvns	r2, r3
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	691a      	ldr	r2, [r3, #16]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	2107      	movs	r1, #7
 8000f1a:	400b      	ands	r3, r1
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	409a      	lsls	r2, r3
 8000f20:	0013      	movs	r3, r2
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	08da      	lsrs	r2, r3, #3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3208      	adds	r2, #8
 8000f30:	0092      	lsls	r2, r2, #2
 8000f32:	6939      	ldr	r1, [r7, #16]
 8000f34:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	2203      	movs	r2, #3
 8000f42:	409a      	lsls	r2, r3
 8000f44:	0013      	movs	r3, r2
 8000f46:	43da      	mvns	r2, r3
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	2203      	movs	r2, #3
 8000f54:	401a      	ands	r2, r3
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	409a      	lsls	r2, r3
 8000f5c:	0013      	movs	r3, r2
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685a      	ldr	r2, [r3, #4]
 8000f6e:	23c0      	movs	r3, #192	; 0xc0
 8000f70:	029b      	lsls	r3, r3, #10
 8000f72:	4013      	ands	r3, r2
 8000f74:	d100      	bne.n	8000f78 <HAL_GPIO_Init+0x174>
 8000f76:	e09a      	b.n	80010ae <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f78:	4b54      	ldr	r3, [pc, #336]	; (80010cc <HAL_GPIO_Init+0x2c8>)
 8000f7a:	699a      	ldr	r2, [r3, #24]
 8000f7c:	4b53      	ldr	r3, [pc, #332]	; (80010cc <HAL_GPIO_Init+0x2c8>)
 8000f7e:	2101      	movs	r1, #1
 8000f80:	430a      	orrs	r2, r1
 8000f82:	619a      	str	r2, [r3, #24]
 8000f84:	4b51      	ldr	r3, [pc, #324]	; (80010cc <HAL_GPIO_Init+0x2c8>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	2201      	movs	r2, #1
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f90:	4a4f      	ldr	r2, [pc, #316]	; (80010d0 <HAL_GPIO_Init+0x2cc>)
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	089b      	lsrs	r3, r3, #2
 8000f96:	3302      	adds	r3, #2
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	589b      	ldr	r3, [r3, r2]
 8000f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	220f      	movs	r2, #15
 8000fa8:	409a      	lsls	r2, r3
 8000faa:	0013      	movs	r3, r2
 8000fac:	43da      	mvns	r2, r3
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	2390      	movs	r3, #144	; 0x90
 8000fb8:	05db      	lsls	r3, r3, #23
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d013      	beq.n	8000fe6 <HAL_GPIO_Init+0x1e2>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a44      	ldr	r2, [pc, #272]	; (80010d4 <HAL_GPIO_Init+0x2d0>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d00d      	beq.n	8000fe2 <HAL_GPIO_Init+0x1de>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a43      	ldr	r2, [pc, #268]	; (80010d8 <HAL_GPIO_Init+0x2d4>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d007      	beq.n	8000fde <HAL_GPIO_Init+0x1da>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a42      	ldr	r2, [pc, #264]	; (80010dc <HAL_GPIO_Init+0x2d8>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d101      	bne.n	8000fda <HAL_GPIO_Init+0x1d6>
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e006      	b.n	8000fe8 <HAL_GPIO_Init+0x1e4>
 8000fda:	2305      	movs	r3, #5
 8000fdc:	e004      	b.n	8000fe8 <HAL_GPIO_Init+0x1e4>
 8000fde:	2302      	movs	r3, #2
 8000fe0:	e002      	b.n	8000fe8 <HAL_GPIO_Init+0x1e4>
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e000      	b.n	8000fe8 <HAL_GPIO_Init+0x1e4>
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	697a      	ldr	r2, [r7, #20]
 8000fea:	2103      	movs	r1, #3
 8000fec:	400a      	ands	r2, r1
 8000fee:	0092      	lsls	r2, r2, #2
 8000ff0:	4093      	lsls	r3, r2
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ff8:	4935      	ldr	r1, [pc, #212]	; (80010d0 <HAL_GPIO_Init+0x2cc>)
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	089b      	lsrs	r3, r3, #2
 8000ffe:	3302      	adds	r3, #2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001006:	4b36      	ldr	r3, [pc, #216]	; (80010e0 <HAL_GPIO_Init+0x2dc>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	43da      	mvns	r2, r3
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685a      	ldr	r2, [r3, #4]
 800101a:	2380      	movs	r3, #128	; 0x80
 800101c:	025b      	lsls	r3, r3, #9
 800101e:	4013      	ands	r3, r2
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800102a:	4b2d      	ldr	r3, [pc, #180]	; (80010e0 <HAL_GPIO_Init+0x2dc>)
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001030:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <HAL_GPIO_Init+0x2dc>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	43da      	mvns	r2, r3
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685a      	ldr	r2, [r3, #4]
 8001044:	2380      	movs	r3, #128	; 0x80
 8001046:	029b      	lsls	r3, r3, #10
 8001048:	4013      	ands	r3, r2
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001054:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <HAL_GPIO_Init+0x2dc>)
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800105a:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <HAL_GPIO_Init+0x2dc>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	43da      	mvns	r2, r3
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	035b      	lsls	r3, r3, #13
 8001072:	4013      	ands	r3, r2
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800107e:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <HAL_GPIO_Init+0x2dc>)
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001084:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <HAL_GPIO_Init+0x2dc>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	43da      	mvns	r2, r3
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	2380      	movs	r3, #128	; 0x80
 800109a:	039b      	lsls	r3, r3, #14
 800109c:	4013      	ands	r3, r2
 800109e:	d003      	beq.n	80010a8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010a8:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <HAL_GPIO_Init+0x2dc>)
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	3301      	adds	r3, #1
 80010b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	40da      	lsrs	r2, r3
 80010bc:	1e13      	subs	r3, r2, #0
 80010be:	d000      	beq.n	80010c2 <HAL_GPIO_Init+0x2be>
 80010c0:	e6a8      	b.n	8000e14 <HAL_GPIO_Init+0x10>
  } 
}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	46c0      	nop			; (mov r8, r8)
 80010c6:	46bd      	mov	sp, r7
 80010c8:	b006      	add	sp, #24
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40010000 	.word	0x40010000
 80010d4:	48000400 	.word	0x48000400
 80010d8:	48000800 	.word	0x48000800
 80010dc:	48000c00 	.word	0x48000c00
 80010e0:	40010400 	.word	0x40010400

080010e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	0008      	movs	r0, r1
 80010ee:	0011      	movs	r1, r2
 80010f0:	1cbb      	adds	r3, r7, #2
 80010f2:	1c02      	adds	r2, r0, #0
 80010f4:	801a      	strh	r2, [r3, #0]
 80010f6:	1c7b      	adds	r3, r7, #1
 80010f8:	1c0a      	adds	r2, r1, #0
 80010fa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010fc:	1c7b      	adds	r3, r7, #1
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d004      	beq.n	800110e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001104:	1cbb      	adds	r3, r7, #2
 8001106:	881a      	ldrh	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800110c:	e003      	b.n	8001116 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800110e:	1cbb      	adds	r3, r7, #2
 8001110:	881a      	ldrh	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	46bd      	mov	sp, r7
 800111a:	b002      	add	sp, #8
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e082      	b.n	8001238 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2241      	movs	r2, #65	; 0x41
 8001136:	5c9b      	ldrb	r3, [r3, r2]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	d107      	bne.n	800114e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2240      	movs	r2, #64	; 0x40
 8001142:	2100      	movs	r1, #0
 8001144:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	0018      	movs	r0, r3
 800114a:	f7ff fb7f 	bl	800084c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2241      	movs	r2, #65	; 0x41
 8001152:	2124      	movs	r1, #36	; 0x24
 8001154:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2101      	movs	r1, #1
 8001162:	438a      	bics	r2, r1
 8001164:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685a      	ldr	r2, [r3, #4]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4934      	ldr	r1, [pc, #208]	; (8001240 <HAL_I2C_Init+0x120>)
 8001170:	400a      	ands	r2, r1
 8001172:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	689a      	ldr	r2, [r3, #8]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4931      	ldr	r1, [pc, #196]	; (8001244 <HAL_I2C_Init+0x124>)
 8001180:	400a      	ands	r2, r1
 8001182:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d108      	bne.n	800119e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689a      	ldr	r2, [r3, #8]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2180      	movs	r1, #128	; 0x80
 8001196:	0209      	lsls	r1, r1, #8
 8001198:	430a      	orrs	r2, r1
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	e007      	b.n	80011ae <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2184      	movs	r1, #132	; 0x84
 80011a8:	0209      	lsls	r1, r1, #8
 80011aa:	430a      	orrs	r2, r1
 80011ac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d104      	bne.n	80011c0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2280      	movs	r2, #128	; 0x80
 80011bc:	0112      	lsls	r2, r2, #4
 80011be:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	491f      	ldr	r1, [pc, #124]	; (8001248 <HAL_I2C_Init+0x128>)
 80011cc:	430a      	orrs	r2, r1
 80011ce:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	68da      	ldr	r2, [r3, #12]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	491a      	ldr	r1, [pc, #104]	; (8001244 <HAL_I2C_Init+0x124>)
 80011dc:	400a      	ands	r2, r1
 80011de:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	691a      	ldr	r2, [r3, #16]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	431a      	orrs	r2, r3
 80011ea:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	430a      	orrs	r2, r1
 80011f8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69d9      	ldr	r1, [r3, #28]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a1a      	ldr	r2, [r3, #32]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	430a      	orrs	r2, r1
 8001208:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2101      	movs	r1, #1
 8001216:	430a      	orrs	r2, r1
 8001218:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2241      	movs	r2, #65	; 0x41
 8001224:	2120      	movs	r1, #32
 8001226:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2242      	movs	r2, #66	; 0x42
 8001232:	2100      	movs	r1, #0
 8001234:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001236:	2300      	movs	r3, #0
}
 8001238:	0018      	movs	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	b002      	add	sp, #8
 800123e:	bd80      	pop	{r7, pc}
 8001240:	f0ffffff 	.word	0xf0ffffff
 8001244:	ffff7fff 	.word	0xffff7fff
 8001248:	02008000 	.word	0x02008000

0800124c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800124c:	b590      	push	{r4, r7, lr}
 800124e:	b089      	sub	sp, #36	; 0x24
 8001250:	af02      	add	r7, sp, #8
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	0008      	movs	r0, r1
 8001256:	607a      	str	r2, [r7, #4]
 8001258:	0019      	movs	r1, r3
 800125a:	230a      	movs	r3, #10
 800125c:	18fb      	adds	r3, r7, r3
 800125e:	1c02      	adds	r2, r0, #0
 8001260:	801a      	strh	r2, [r3, #0]
 8001262:	2308      	movs	r3, #8
 8001264:	18fb      	adds	r3, r7, r3
 8001266:	1c0a      	adds	r2, r1, #0
 8001268:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2241      	movs	r2, #65	; 0x41
 800126e:	5c9b      	ldrb	r3, [r3, r2]
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b20      	cmp	r3, #32
 8001274:	d000      	beq.n	8001278 <HAL_I2C_Master_Transmit+0x2c>
 8001276:	e0e7      	b.n	8001448 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2240      	movs	r2, #64	; 0x40
 800127c:	5c9b      	ldrb	r3, [r3, r2]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d101      	bne.n	8001286 <HAL_I2C_Master_Transmit+0x3a>
 8001282:	2302      	movs	r3, #2
 8001284:	e0e1      	b.n	800144a <HAL_I2C_Master_Transmit+0x1fe>
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2240      	movs	r2, #64	; 0x40
 800128a:	2101      	movs	r1, #1
 800128c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800128e:	f7ff fc2f 	bl	8000af0 <HAL_GetTick>
 8001292:	0003      	movs	r3, r0
 8001294:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001296:	2380      	movs	r3, #128	; 0x80
 8001298:	0219      	lsls	r1, r3, #8
 800129a:	68f8      	ldr	r0, [r7, #12]
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	2319      	movs	r3, #25
 80012a2:	2201      	movs	r2, #1
 80012a4:	f000 f8fc 	bl	80014a0 <I2C_WaitOnFlagUntilTimeout>
 80012a8:	1e03      	subs	r3, r0, #0
 80012aa:	d001      	beq.n	80012b0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e0cc      	b.n	800144a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2241      	movs	r2, #65	; 0x41
 80012b4:	2121      	movs	r1, #33	; 0x21
 80012b6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2242      	movs	r2, #66	; 0x42
 80012bc:	2110      	movs	r1, #16
 80012be:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2200      	movs	r2, #0
 80012c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2208      	movs	r2, #8
 80012d0:	18ba      	adds	r2, r7, r2
 80012d2:	8812      	ldrh	r2, [r2, #0]
 80012d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2200      	movs	r2, #0
 80012da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	2bff      	cmp	r3, #255	; 0xff
 80012e4:	d911      	bls.n	800130a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	22ff      	movs	r2, #255	; 0xff
 80012ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	2380      	movs	r3, #128	; 0x80
 80012f4:	045c      	lsls	r4, r3, #17
 80012f6:	230a      	movs	r3, #10
 80012f8:	18fb      	adds	r3, r7, r3
 80012fa:	8819      	ldrh	r1, [r3, #0]
 80012fc:	68f8      	ldr	r0, [r7, #12]
 80012fe:	4b55      	ldr	r3, [pc, #340]	; (8001454 <HAL_I2C_Master_Transmit+0x208>)
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	0023      	movs	r3, r4
 8001304:	f000 fa00 	bl	8001708 <I2C_TransferConfig>
 8001308:	e075      	b.n	80013f6 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800130e:	b29a      	uxth	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001318:	b2da      	uxtb	r2, r3
 800131a:	2380      	movs	r3, #128	; 0x80
 800131c:	049c      	lsls	r4, r3, #18
 800131e:	230a      	movs	r3, #10
 8001320:	18fb      	adds	r3, r7, r3
 8001322:	8819      	ldrh	r1, [r3, #0]
 8001324:	68f8      	ldr	r0, [r7, #12]
 8001326:	4b4b      	ldr	r3, [pc, #300]	; (8001454 <HAL_I2C_Master_Transmit+0x208>)
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	0023      	movs	r3, r4
 800132c:	f000 f9ec 	bl	8001708 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001330:	e061      	b.n	80013f6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	0018      	movs	r0, r3
 800133a:	f000 f8f0 	bl	800151e <I2C_WaitOnTXISFlagUntilTimeout>
 800133e:	1e03      	subs	r3, r0, #0
 8001340:	d001      	beq.n	8001346 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e081      	b.n	800144a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134a:	781a      	ldrb	r2, [r3, #0]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001356:	1c5a      	adds	r2, r3, #1
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001360:	b29b      	uxth	r3, r3
 8001362:	3b01      	subs	r3, #1
 8001364:	b29a      	uxth	r2, r3
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800136e:	3b01      	subs	r3, #1
 8001370:	b29a      	uxth	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800137a:	b29b      	uxth	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d03a      	beq.n	80013f6 <HAL_I2C_Master_Transmit+0x1aa>
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001384:	2b00      	cmp	r3, #0
 8001386:	d136      	bne.n	80013f6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001388:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800138a:	68f8      	ldr	r0, [r7, #12]
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	0013      	movs	r3, r2
 8001392:	2200      	movs	r2, #0
 8001394:	2180      	movs	r1, #128	; 0x80
 8001396:	f000 f883 	bl	80014a0 <I2C_WaitOnFlagUntilTimeout>
 800139a:	1e03      	subs	r3, r0, #0
 800139c:	d001      	beq.n	80013a2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e053      	b.n	800144a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	2bff      	cmp	r3, #255	; 0xff
 80013aa:	d911      	bls.n	80013d0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	22ff      	movs	r2, #255	; 0xff
 80013b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	2380      	movs	r3, #128	; 0x80
 80013ba:	045c      	lsls	r4, r3, #17
 80013bc:	230a      	movs	r3, #10
 80013be:	18fb      	adds	r3, r7, r3
 80013c0:	8819      	ldrh	r1, [r3, #0]
 80013c2:	68f8      	ldr	r0, [r7, #12]
 80013c4:	2300      	movs	r3, #0
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	0023      	movs	r3, r4
 80013ca:	f000 f99d 	bl	8001708 <I2C_TransferConfig>
 80013ce:	e012      	b.n	80013f6 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	2380      	movs	r3, #128	; 0x80
 80013e2:	049c      	lsls	r4, r3, #18
 80013e4:	230a      	movs	r3, #10
 80013e6:	18fb      	adds	r3, r7, r3
 80013e8:	8819      	ldrh	r1, [r3, #0]
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	2300      	movs	r3, #0
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	0023      	movs	r3, r4
 80013f2:	f000 f989 	bl	8001708 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d198      	bne.n	8001332 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	0018      	movs	r0, r3
 8001408:	f000 f8c8 	bl	800159c <I2C_WaitOnSTOPFlagUntilTimeout>
 800140c:	1e03      	subs	r3, r0, #0
 800140e:	d001      	beq.n	8001414 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e01a      	b.n	800144a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2220      	movs	r2, #32
 800141a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	490c      	ldr	r1, [pc, #48]	; (8001458 <HAL_I2C_Master_Transmit+0x20c>)
 8001428:	400a      	ands	r2, r1
 800142a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2241      	movs	r2, #65	; 0x41
 8001430:	2120      	movs	r1, #32
 8001432:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2242      	movs	r2, #66	; 0x42
 8001438:	2100      	movs	r1, #0
 800143a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2240      	movs	r2, #64	; 0x40
 8001440:	2100      	movs	r1, #0
 8001442:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001444:	2300      	movs	r3, #0
 8001446:	e000      	b.n	800144a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001448:	2302      	movs	r3, #2
  }
}
 800144a:	0018      	movs	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	b007      	add	sp, #28
 8001450:	bd90      	pop	{r4, r7, pc}
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	80002000 	.word	0x80002000
 8001458:	fe00e800 	.word	0xfe00e800

0800145c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	2202      	movs	r2, #2
 800146c:	4013      	ands	r3, r2
 800146e:	2b02      	cmp	r3, #2
 8001470:	d103      	bne.n	800147a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2200      	movs	r2, #0
 8001478:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	2201      	movs	r2, #1
 8001482:	4013      	ands	r3, r2
 8001484:	2b01      	cmp	r3, #1
 8001486:	d007      	beq.n	8001498 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	699a      	ldr	r2, [r3, #24]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2101      	movs	r1, #1
 8001494:	430a      	orrs	r2, r1
 8001496:	619a      	str	r2, [r3, #24]
  }
}
 8001498:	46c0      	nop			; (mov r8, r8)
 800149a:	46bd      	mov	sp, r7
 800149c:	b002      	add	sp, #8
 800149e:	bd80      	pop	{r7, pc}

080014a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	1dfb      	adds	r3, r7, #7
 80014ae:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014b0:	e021      	b.n	80014f6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	3301      	adds	r3, #1
 80014b6:	d01e      	beq.n	80014f6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014b8:	f7ff fb1a 	bl	8000af0 <HAL_GetTick>
 80014bc:	0002      	movs	r2, r0
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d302      	bcc.n	80014ce <I2C_WaitOnFlagUntilTimeout+0x2e>
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d113      	bne.n	80014f6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	2220      	movs	r2, #32
 80014d4:	431a      	orrs	r2, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2241      	movs	r2, #65	; 0x41
 80014de:	2120      	movs	r1, #32
 80014e0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2242      	movs	r2, #66	; 0x42
 80014e6:	2100      	movs	r1, #0
 80014e8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2240      	movs	r2, #64	; 0x40
 80014ee:	2100      	movs	r1, #0
 80014f0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e00f      	b.n	8001516 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	68ba      	ldr	r2, [r7, #8]
 80014fe:	4013      	ands	r3, r2
 8001500:	68ba      	ldr	r2, [r7, #8]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	425a      	negs	r2, r3
 8001506:	4153      	adcs	r3, r2
 8001508:	b2db      	uxtb	r3, r3
 800150a:	001a      	movs	r2, r3
 800150c:	1dfb      	adds	r3, r7, #7
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	429a      	cmp	r2, r3
 8001512:	d0ce      	beq.n	80014b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	0018      	movs	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	b004      	add	sp, #16
 800151c:	bd80      	pop	{r7, pc}

0800151e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b084      	sub	sp, #16
 8001522:	af00      	add	r7, sp, #0
 8001524:	60f8      	str	r0, [r7, #12]
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800152a:	e02b      	b.n	8001584 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	68b9      	ldr	r1, [r7, #8]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	0018      	movs	r0, r3
 8001534:	f000 f86e 	bl	8001614 <I2C_IsAcknowledgeFailed>
 8001538:	1e03      	subs	r3, r0, #0
 800153a:	d001      	beq.n	8001540 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e029      	b.n	8001594 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	3301      	adds	r3, #1
 8001544:	d01e      	beq.n	8001584 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001546:	f7ff fad3 	bl	8000af0 <HAL_GetTick>
 800154a:	0002      	movs	r2, r0
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	68ba      	ldr	r2, [r7, #8]
 8001552:	429a      	cmp	r2, r3
 8001554:	d302      	bcc.n	800155c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d113      	bne.n	8001584 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001560:	2220      	movs	r2, #32
 8001562:	431a      	orrs	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2241      	movs	r2, #65	; 0x41
 800156c:	2120      	movs	r1, #32
 800156e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2242      	movs	r2, #66	; 0x42
 8001574:	2100      	movs	r1, #0
 8001576:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2240      	movs	r2, #64	; 0x40
 800157c:	2100      	movs	r1, #0
 800157e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e007      	b.n	8001594 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	2202      	movs	r2, #2
 800158c:	4013      	ands	r3, r2
 800158e:	2b02      	cmp	r3, #2
 8001590:	d1cc      	bne.n	800152c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001592:	2300      	movs	r3, #0
}
 8001594:	0018      	movs	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	b004      	add	sp, #16
 800159a:	bd80      	pop	{r7, pc}

0800159c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015a8:	e028      	b.n	80015fc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	68b9      	ldr	r1, [r7, #8]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	0018      	movs	r0, r3
 80015b2:	f000 f82f 	bl	8001614 <I2C_IsAcknowledgeFailed>
 80015b6:	1e03      	subs	r3, r0, #0
 80015b8:	d001      	beq.n	80015be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e026      	b.n	800160c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015be:	f7ff fa97 	bl	8000af0 <HAL_GetTick>
 80015c2:	0002      	movs	r2, r0
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	68ba      	ldr	r2, [r7, #8]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d302      	bcc.n	80015d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d113      	bne.n	80015fc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d8:	2220      	movs	r2, #32
 80015da:	431a      	orrs	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2241      	movs	r2, #65	; 0x41
 80015e4:	2120      	movs	r1, #32
 80015e6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2242      	movs	r2, #66	; 0x42
 80015ec:	2100      	movs	r1, #0
 80015ee:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2240      	movs	r2, #64	; 0x40
 80015f4:	2100      	movs	r1, #0
 80015f6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e007      	b.n	800160c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	2220      	movs	r2, #32
 8001604:	4013      	ands	r3, r2
 8001606:	2b20      	cmp	r3, #32
 8001608:	d1cf      	bne.n	80015aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	0018      	movs	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	b004      	add	sp, #16
 8001612:	bd80      	pop	{r7, pc}

08001614 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	2210      	movs	r2, #16
 8001628:	4013      	ands	r3, r2
 800162a:	2b10      	cmp	r3, #16
 800162c:	d164      	bne.n	80016f8 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	2380      	movs	r3, #128	; 0x80
 8001636:	049b      	lsls	r3, r3, #18
 8001638:	401a      	ands	r2, r3
 800163a:	2380      	movs	r3, #128	; 0x80
 800163c:	049b      	lsls	r3, r3, #18
 800163e:	429a      	cmp	r2, r3
 8001640:	d02b      	beq.n	800169a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2180      	movs	r1, #128	; 0x80
 800164e:	01c9      	lsls	r1, r1, #7
 8001650:	430a      	orrs	r2, r1
 8001652:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001654:	e021      	b.n	800169a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	3301      	adds	r3, #1
 800165a:	d01e      	beq.n	800169a <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800165c:	f7ff fa48 	bl	8000af0 <HAL_GetTick>
 8001660:	0002      	movs	r2, r0
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	429a      	cmp	r2, r3
 800166a:	d302      	bcc.n	8001672 <I2C_IsAcknowledgeFailed+0x5e>
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d113      	bne.n	800169a <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	2220      	movs	r2, #32
 8001678:	431a      	orrs	r2, r3
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2241      	movs	r2, #65	; 0x41
 8001682:	2120      	movs	r1, #32
 8001684:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2242      	movs	r2, #66	; 0x42
 800168a:	2100      	movs	r1, #0
 800168c:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2240      	movs	r2, #64	; 0x40
 8001692:	2100      	movs	r1, #0
 8001694:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e02f      	b.n	80016fa <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	2220      	movs	r2, #32
 80016a2:	4013      	ands	r3, r2
 80016a4:	2b20      	cmp	r3, #32
 80016a6:	d1d6      	bne.n	8001656 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2210      	movs	r2, #16
 80016ae:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2220      	movs	r2, #32
 80016b6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	0018      	movs	r0, r3
 80016bc:	f7ff fece 	bl	800145c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	490e      	ldr	r1, [pc, #56]	; (8001704 <I2C_IsAcknowledgeFailed+0xf0>)
 80016cc:	400a      	ands	r2, r1
 80016ce:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d4:	2204      	movs	r2, #4
 80016d6:	431a      	orrs	r2, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2241      	movs	r2, #65	; 0x41
 80016e0:	2120      	movs	r1, #32
 80016e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2242      	movs	r2, #66	; 0x42
 80016e8:	2100      	movs	r1, #0
 80016ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2240      	movs	r2, #64	; 0x40
 80016f0:	2100      	movs	r1, #0
 80016f2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e000      	b.n	80016fa <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	0018      	movs	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	b004      	add	sp, #16
 8001700:	bd80      	pop	{r7, pc}
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	fe00e800 	.word	0xfe00e800

08001708 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	0008      	movs	r0, r1
 8001712:	0011      	movs	r1, r2
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	240a      	movs	r4, #10
 8001718:	193b      	adds	r3, r7, r4
 800171a:	1c02      	adds	r2, r0, #0
 800171c:	801a      	strh	r2, [r3, #0]
 800171e:	2009      	movs	r0, #9
 8001720:	183b      	adds	r3, r7, r0
 8001722:	1c0a      	adds	r2, r1, #0
 8001724:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	6a3a      	ldr	r2, [r7, #32]
 800172e:	0d51      	lsrs	r1, r2, #21
 8001730:	2280      	movs	r2, #128	; 0x80
 8001732:	00d2      	lsls	r2, r2, #3
 8001734:	400a      	ands	r2, r1
 8001736:	490e      	ldr	r1, [pc, #56]	; (8001770 <I2C_TransferConfig+0x68>)
 8001738:	430a      	orrs	r2, r1
 800173a:	43d2      	mvns	r2, r2
 800173c:	401a      	ands	r2, r3
 800173e:	0011      	movs	r1, r2
 8001740:	193b      	adds	r3, r7, r4
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	059b      	lsls	r3, r3, #22
 8001746:	0d9a      	lsrs	r2, r3, #22
 8001748:	183b      	adds	r3, r7, r0
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	0418      	lsls	r0, r3, #16
 800174e:	23ff      	movs	r3, #255	; 0xff
 8001750:	041b      	lsls	r3, r3, #16
 8001752:	4003      	ands	r3, r0
 8001754:	431a      	orrs	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	431a      	orrs	r2, r3
 800175a:	6a3b      	ldr	r3, [r7, #32]
 800175c:	431a      	orrs	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	430a      	orrs	r2, r1
 8001764:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8001766:	46c0      	nop			; (mov r8, r8)
 8001768:	46bd      	mov	sp, r7
 800176a:	b005      	add	sp, #20
 800176c:	bd90      	pop	{r4, r7, pc}
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	03ff63ff 	.word	0x03ff63ff

08001774 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2241      	movs	r2, #65	; 0x41
 8001782:	5c9b      	ldrb	r3, [r3, r2]
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b20      	cmp	r3, #32
 8001788:	d138      	bne.n	80017fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2240      	movs	r2, #64	; 0x40
 800178e:	5c9b      	ldrb	r3, [r3, r2]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d101      	bne.n	8001798 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001794:	2302      	movs	r3, #2
 8001796:	e032      	b.n	80017fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2240      	movs	r2, #64	; 0x40
 800179c:	2101      	movs	r1, #1
 800179e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2241      	movs	r2, #65	; 0x41
 80017a4:	2124      	movs	r1, #36	; 0x24
 80017a6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2101      	movs	r1, #1
 80017b4:	438a      	bics	r2, r1
 80017b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4911      	ldr	r1, [pc, #68]	; (8001808 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80017c4:	400a      	ands	r2, r1
 80017c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6819      	ldr	r1, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2101      	movs	r1, #1
 80017e4:	430a      	orrs	r2, r1
 80017e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2241      	movs	r2, #65	; 0x41
 80017ec:	2120      	movs	r1, #32
 80017ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2240      	movs	r2, #64	; 0x40
 80017f4:	2100      	movs	r1, #0
 80017f6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80017f8:	2300      	movs	r3, #0
 80017fa:	e000      	b.n	80017fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80017fc:	2302      	movs	r3, #2
  }
}
 80017fe:	0018      	movs	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	b002      	add	sp, #8
 8001804:	bd80      	pop	{r7, pc}
 8001806:	46c0      	nop			; (mov r8, r8)
 8001808:	ffffefff 	.word	0xffffefff

0800180c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2241      	movs	r2, #65	; 0x41
 800181a:	5c9b      	ldrb	r3, [r3, r2]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b20      	cmp	r3, #32
 8001820:	d139      	bne.n	8001896 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2240      	movs	r2, #64	; 0x40
 8001826:	5c9b      	ldrb	r3, [r3, r2]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d101      	bne.n	8001830 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800182c:	2302      	movs	r3, #2
 800182e:	e033      	b.n	8001898 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2240      	movs	r2, #64	; 0x40
 8001834:	2101      	movs	r1, #1
 8001836:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2241      	movs	r2, #65	; 0x41
 800183c:	2124      	movs	r1, #36	; 0x24
 800183e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2101      	movs	r1, #1
 800184c:	438a      	bics	r2, r1
 800184e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4a11      	ldr	r2, [pc, #68]	; (80018a0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800185c:	4013      	ands	r3, r2
 800185e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	021b      	lsls	r3, r3, #8
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	4313      	orrs	r3, r2
 8001868:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2101      	movs	r1, #1
 800187e:	430a      	orrs	r2, r1
 8001880:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2241      	movs	r2, #65	; 0x41
 8001886:	2120      	movs	r1, #32
 8001888:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2240      	movs	r2, #64	; 0x40
 800188e:	2100      	movs	r1, #0
 8001890:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001892:	2300      	movs	r3, #0
 8001894:	e000      	b.n	8001898 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001896:	2302      	movs	r3, #2
  }
}
 8001898:	0018      	movs	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	b004      	add	sp, #16
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	fffff0ff 	.word	0xfffff0ff

080018a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e301      	b.n	8001eba <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2201      	movs	r2, #1
 80018bc:	4013      	ands	r3, r2
 80018be:	d100      	bne.n	80018c2 <HAL_RCC_OscConfig+0x1e>
 80018c0:	e08d      	b.n	80019de <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018c2:	4bc3      	ldr	r3, [pc, #780]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	220c      	movs	r2, #12
 80018c8:	4013      	ands	r3, r2
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	d00e      	beq.n	80018ec <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018ce:	4bc0      	ldr	r3, [pc, #768]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	220c      	movs	r2, #12
 80018d4:	4013      	ands	r3, r2
 80018d6:	2b08      	cmp	r3, #8
 80018d8:	d116      	bne.n	8001908 <HAL_RCC_OscConfig+0x64>
 80018da:	4bbd      	ldr	r3, [pc, #756]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	2380      	movs	r3, #128	; 0x80
 80018e0:	025b      	lsls	r3, r3, #9
 80018e2:	401a      	ands	r2, r3
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	025b      	lsls	r3, r3, #9
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d10d      	bne.n	8001908 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ec:	4bb8      	ldr	r3, [pc, #736]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	029b      	lsls	r3, r3, #10
 80018f4:	4013      	ands	r3, r2
 80018f6:	d100      	bne.n	80018fa <HAL_RCC_OscConfig+0x56>
 80018f8:	e070      	b.n	80019dc <HAL_RCC_OscConfig+0x138>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d000      	beq.n	8001904 <HAL_RCC_OscConfig+0x60>
 8001902:	e06b      	b.n	80019dc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e2d8      	b.n	8001eba <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d107      	bne.n	8001920 <HAL_RCC_OscConfig+0x7c>
 8001910:	4baf      	ldr	r3, [pc, #700]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4bae      	ldr	r3, [pc, #696]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 8001916:	2180      	movs	r1, #128	; 0x80
 8001918:	0249      	lsls	r1, r1, #9
 800191a:	430a      	orrs	r2, r1
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	e02f      	b.n	8001980 <HAL_RCC_OscConfig+0xdc>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d10c      	bne.n	8001942 <HAL_RCC_OscConfig+0x9e>
 8001928:	4ba9      	ldr	r3, [pc, #676]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4ba8      	ldr	r3, [pc, #672]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 800192e:	49a9      	ldr	r1, [pc, #676]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 8001930:	400a      	ands	r2, r1
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	4ba6      	ldr	r3, [pc, #664]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4ba5      	ldr	r3, [pc, #660]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 800193a:	49a7      	ldr	r1, [pc, #668]	; (8001bd8 <HAL_RCC_OscConfig+0x334>)
 800193c:	400a      	ands	r2, r1
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	e01e      	b.n	8001980 <HAL_RCC_OscConfig+0xdc>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b05      	cmp	r3, #5
 8001948:	d10e      	bne.n	8001968 <HAL_RCC_OscConfig+0xc4>
 800194a:	4ba1      	ldr	r3, [pc, #644]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	4ba0      	ldr	r3, [pc, #640]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 8001950:	2180      	movs	r1, #128	; 0x80
 8001952:	02c9      	lsls	r1, r1, #11
 8001954:	430a      	orrs	r2, r1
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	4b9d      	ldr	r3, [pc, #628]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4b9c      	ldr	r3, [pc, #624]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 800195e:	2180      	movs	r1, #128	; 0x80
 8001960:	0249      	lsls	r1, r1, #9
 8001962:	430a      	orrs	r2, r1
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	e00b      	b.n	8001980 <HAL_RCC_OscConfig+0xdc>
 8001968:	4b99      	ldr	r3, [pc, #612]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4b98      	ldr	r3, [pc, #608]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 800196e:	4999      	ldr	r1, [pc, #612]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 8001970:	400a      	ands	r2, r1
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	4b96      	ldr	r3, [pc, #600]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4b95      	ldr	r3, [pc, #596]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 800197a:	4997      	ldr	r1, [pc, #604]	; (8001bd8 <HAL_RCC_OscConfig+0x334>)
 800197c:	400a      	ands	r2, r1
 800197e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d014      	beq.n	80019b2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001988:	f7ff f8b2 	bl	8000af0 <HAL_GetTick>
 800198c:	0003      	movs	r3, r0
 800198e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001992:	f7ff f8ad 	bl	8000af0 <HAL_GetTick>
 8001996:	0002      	movs	r2, r0
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b64      	cmp	r3, #100	; 0x64
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e28a      	b.n	8001eba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a4:	4b8a      	ldr	r3, [pc, #552]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	029b      	lsls	r3, r3, #10
 80019ac:	4013      	ands	r3, r2
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCC_OscConfig+0xee>
 80019b0:	e015      	b.n	80019de <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b2:	f7ff f89d 	bl	8000af0 <HAL_GetTick>
 80019b6:	0003      	movs	r3, r0
 80019b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019bc:	f7ff f898 	bl	8000af0 <HAL_GetTick>
 80019c0:	0002      	movs	r2, r0
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b64      	cmp	r3, #100	; 0x64
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e275      	b.n	8001eba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ce:	4b80      	ldr	r3, [pc, #512]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	2380      	movs	r3, #128	; 0x80
 80019d4:	029b      	lsls	r3, r3, #10
 80019d6:	4013      	ands	r3, r2
 80019d8:	d1f0      	bne.n	80019bc <HAL_RCC_OscConfig+0x118>
 80019da:	e000      	b.n	80019de <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019dc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2202      	movs	r2, #2
 80019e4:	4013      	ands	r3, r2
 80019e6:	d100      	bne.n	80019ea <HAL_RCC_OscConfig+0x146>
 80019e8:	e069      	b.n	8001abe <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019ea:	4b79      	ldr	r3, [pc, #484]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	220c      	movs	r2, #12
 80019f0:	4013      	ands	r3, r2
 80019f2:	d00b      	beq.n	8001a0c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019f4:	4b76      	ldr	r3, [pc, #472]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	220c      	movs	r2, #12
 80019fa:	4013      	ands	r3, r2
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	d11c      	bne.n	8001a3a <HAL_RCC_OscConfig+0x196>
 8001a00:	4b73      	ldr	r3, [pc, #460]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	025b      	lsls	r3, r3, #9
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d116      	bne.n	8001a3a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a0c:	4b70      	ldr	r3, [pc, #448]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2202      	movs	r2, #2
 8001a12:	4013      	ands	r3, r2
 8001a14:	d005      	beq.n	8001a22 <HAL_RCC_OscConfig+0x17e>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d001      	beq.n	8001a22 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e24b      	b.n	8001eba <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a22:	4b6b      	ldr	r3, [pc, #428]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	22f8      	movs	r2, #248	; 0xf8
 8001a28:	4393      	bics	r3, r2
 8001a2a:	0019      	movs	r1, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	00da      	lsls	r2, r3, #3
 8001a32:	4b67      	ldr	r3, [pc, #412]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 8001a34:	430a      	orrs	r2, r1
 8001a36:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a38:	e041      	b.n	8001abe <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d024      	beq.n	8001a8c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a42:	4b63      	ldr	r3, [pc, #396]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	4b62      	ldr	r3, [pc, #392]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 8001a48:	2101      	movs	r1, #1
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4e:	f7ff f84f 	bl	8000af0 <HAL_GetTick>
 8001a52:	0003      	movs	r3, r0
 8001a54:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a58:	f7ff f84a 	bl	8000af0 <HAL_GetTick>
 8001a5c:	0002      	movs	r2, r0
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e227      	b.n	8001eba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6a:	4b59      	ldr	r3, [pc, #356]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2202      	movs	r2, #2
 8001a70:	4013      	ands	r3, r2
 8001a72:	d0f1      	beq.n	8001a58 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a74:	4b56      	ldr	r3, [pc, #344]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	22f8      	movs	r2, #248	; 0xf8
 8001a7a:	4393      	bics	r3, r2
 8001a7c:	0019      	movs	r1, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	00da      	lsls	r2, r3, #3
 8001a84:	4b52      	ldr	r3, [pc, #328]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 8001a86:	430a      	orrs	r2, r1
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	e018      	b.n	8001abe <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a8c:	4b50      	ldr	r3, [pc, #320]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b4f      	ldr	r3, [pc, #316]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 8001a92:	2101      	movs	r1, #1
 8001a94:	438a      	bics	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a98:	f7ff f82a 	bl	8000af0 <HAL_GetTick>
 8001a9c:	0003      	movs	r3, r0
 8001a9e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aa2:	f7ff f825 	bl	8000af0 <HAL_GetTick>
 8001aa6:	0002      	movs	r2, r0
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e202      	b.n	8001eba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab4:	4b46      	ldr	r3, [pc, #280]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2202      	movs	r2, #2
 8001aba:	4013      	ands	r3, r2
 8001abc:	d1f1      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2208      	movs	r2, #8
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d036      	beq.n	8001b36 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69db      	ldr	r3, [r3, #28]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d019      	beq.n	8001b04 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ad0:	4b3f      	ldr	r3, [pc, #252]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 8001ad2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ad4:	4b3e      	ldr	r3, [pc, #248]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001adc:	f7ff f808 	bl	8000af0 <HAL_GetTick>
 8001ae0:	0003      	movs	r3, r0
 8001ae2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae6:	f7ff f803 	bl	8000af0 <HAL_GetTick>
 8001aea:	0002      	movs	r2, r0
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e1e0      	b.n	8001eba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af8:	4b35      	ldr	r3, [pc, #212]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	2202      	movs	r2, #2
 8001afe:	4013      	ands	r3, r2
 8001b00:	d0f1      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x242>
 8001b02:	e018      	b.n	8001b36 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b04:	4b32      	ldr	r3, [pc, #200]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 8001b06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b08:	4b31      	ldr	r3, [pc, #196]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	438a      	bics	r2, r1
 8001b0e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b10:	f7fe ffee 	bl	8000af0 <HAL_GetTick>
 8001b14:	0003      	movs	r3, r0
 8001b16:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b1a:	f7fe ffe9 	bl	8000af0 <HAL_GetTick>
 8001b1e:	0002      	movs	r2, r0
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e1c6      	b.n	8001eba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b2c:	4b28      	ldr	r3, [pc, #160]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	2202      	movs	r2, #2
 8001b32:	4013      	ands	r3, r2
 8001b34:	d1f1      	bne.n	8001b1a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2204      	movs	r2, #4
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d100      	bne.n	8001b42 <HAL_RCC_OscConfig+0x29e>
 8001b40:	e0b4      	b.n	8001cac <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b42:	201f      	movs	r0, #31
 8001b44:	183b      	adds	r3, r7, r0
 8001b46:	2200      	movs	r2, #0
 8001b48:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b4a:	4b21      	ldr	r3, [pc, #132]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 8001b4c:	69da      	ldr	r2, [r3, #28]
 8001b4e:	2380      	movs	r3, #128	; 0x80
 8001b50:	055b      	lsls	r3, r3, #21
 8001b52:	4013      	ands	r3, r2
 8001b54:	d110      	bne.n	8001b78 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b56:	4b1e      	ldr	r3, [pc, #120]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 8001b58:	69da      	ldr	r2, [r3, #28]
 8001b5a:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 8001b5c:	2180      	movs	r1, #128	; 0x80
 8001b5e:	0549      	lsls	r1, r1, #21
 8001b60:	430a      	orrs	r2, r1
 8001b62:	61da      	str	r2, [r3, #28]
 8001b64:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 8001b66:	69da      	ldr	r2, [r3, #28]
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	055b      	lsls	r3, r3, #21
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b72:	183b      	adds	r3, r7, r0
 8001b74:	2201      	movs	r2, #1
 8001b76:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b78:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <HAL_RCC_OscConfig+0x338>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	2380      	movs	r3, #128	; 0x80
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	4013      	ands	r3, r2
 8001b82:	d11a      	bne.n	8001bba <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b84:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <HAL_RCC_OscConfig+0x338>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <HAL_RCC_OscConfig+0x338>)
 8001b8a:	2180      	movs	r1, #128	; 0x80
 8001b8c:	0049      	lsls	r1, r1, #1
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b92:	f7fe ffad 	bl	8000af0 <HAL_GetTick>
 8001b96:	0003      	movs	r3, r0
 8001b98:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b9c:	f7fe ffa8 	bl	8000af0 <HAL_GetTick>
 8001ba0:	0002      	movs	r2, r0
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b64      	cmp	r3, #100	; 0x64
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e185      	b.n	8001eba <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bae:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <HAL_RCC_OscConfig+0x338>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	2380      	movs	r3, #128	; 0x80
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d0f0      	beq.n	8001b9c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d10e      	bne.n	8001be0 <HAL_RCC_OscConfig+0x33c>
 8001bc2:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 8001bc4:	6a1a      	ldr	r2, [r3, #32]
 8001bc6:	4b02      	ldr	r3, [pc, #8]	; (8001bd0 <HAL_RCC_OscConfig+0x32c>)
 8001bc8:	2101      	movs	r1, #1
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	621a      	str	r2, [r3, #32]
 8001bce:	e035      	b.n	8001c3c <HAL_RCC_OscConfig+0x398>
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	fffeffff 	.word	0xfffeffff
 8001bd8:	fffbffff 	.word	0xfffbffff
 8001bdc:	40007000 	.word	0x40007000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d10c      	bne.n	8001c02 <HAL_RCC_OscConfig+0x35e>
 8001be8:	4bb6      	ldr	r3, [pc, #728]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001bea:	6a1a      	ldr	r2, [r3, #32]
 8001bec:	4bb5      	ldr	r3, [pc, #724]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001bee:	2101      	movs	r1, #1
 8001bf0:	438a      	bics	r2, r1
 8001bf2:	621a      	str	r2, [r3, #32]
 8001bf4:	4bb3      	ldr	r3, [pc, #716]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001bf6:	6a1a      	ldr	r2, [r3, #32]
 8001bf8:	4bb2      	ldr	r3, [pc, #712]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001bfa:	2104      	movs	r1, #4
 8001bfc:	438a      	bics	r2, r1
 8001bfe:	621a      	str	r2, [r3, #32]
 8001c00:	e01c      	b.n	8001c3c <HAL_RCC_OscConfig+0x398>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	2b05      	cmp	r3, #5
 8001c08:	d10c      	bne.n	8001c24 <HAL_RCC_OscConfig+0x380>
 8001c0a:	4bae      	ldr	r3, [pc, #696]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001c0c:	6a1a      	ldr	r2, [r3, #32]
 8001c0e:	4bad      	ldr	r3, [pc, #692]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001c10:	2104      	movs	r1, #4
 8001c12:	430a      	orrs	r2, r1
 8001c14:	621a      	str	r2, [r3, #32]
 8001c16:	4bab      	ldr	r3, [pc, #684]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001c18:	6a1a      	ldr	r2, [r3, #32]
 8001c1a:	4baa      	ldr	r3, [pc, #680]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	621a      	str	r2, [r3, #32]
 8001c22:	e00b      	b.n	8001c3c <HAL_RCC_OscConfig+0x398>
 8001c24:	4ba7      	ldr	r3, [pc, #668]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001c26:	6a1a      	ldr	r2, [r3, #32]
 8001c28:	4ba6      	ldr	r3, [pc, #664]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	438a      	bics	r2, r1
 8001c2e:	621a      	str	r2, [r3, #32]
 8001c30:	4ba4      	ldr	r3, [pc, #656]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001c32:	6a1a      	ldr	r2, [r3, #32]
 8001c34:	4ba3      	ldr	r3, [pc, #652]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001c36:	2104      	movs	r1, #4
 8001c38:	438a      	bics	r2, r1
 8001c3a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d014      	beq.n	8001c6e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c44:	f7fe ff54 	bl	8000af0 <HAL_GetTick>
 8001c48:	0003      	movs	r3, r0
 8001c4a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c4c:	e009      	b.n	8001c62 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c4e:	f7fe ff4f 	bl	8000af0 <HAL_GetTick>
 8001c52:	0002      	movs	r2, r0
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	4a9b      	ldr	r2, [pc, #620]	; (8001ec8 <HAL_RCC_OscConfig+0x624>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e12b      	b.n	8001eba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c62:	4b98      	ldr	r3, [pc, #608]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	2202      	movs	r2, #2
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d0f0      	beq.n	8001c4e <HAL_RCC_OscConfig+0x3aa>
 8001c6c:	e013      	b.n	8001c96 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c6e:	f7fe ff3f 	bl	8000af0 <HAL_GetTick>
 8001c72:	0003      	movs	r3, r0
 8001c74:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c76:	e009      	b.n	8001c8c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c78:	f7fe ff3a 	bl	8000af0 <HAL_GetTick>
 8001c7c:	0002      	movs	r2, r0
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	4a91      	ldr	r2, [pc, #580]	; (8001ec8 <HAL_RCC_OscConfig+0x624>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e116      	b.n	8001eba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c8c:	4b8d      	ldr	r3, [pc, #564]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	2202      	movs	r2, #2
 8001c92:	4013      	ands	r3, r2
 8001c94:	d1f0      	bne.n	8001c78 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c96:	231f      	movs	r3, #31
 8001c98:	18fb      	adds	r3, r7, r3
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d105      	bne.n	8001cac <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ca0:	4b88      	ldr	r3, [pc, #544]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001ca2:	69da      	ldr	r2, [r3, #28]
 8001ca4:	4b87      	ldr	r3, [pc, #540]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001ca6:	4989      	ldr	r1, [pc, #548]	; (8001ecc <HAL_RCC_OscConfig+0x628>)
 8001ca8:	400a      	ands	r2, r1
 8001caa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2210      	movs	r2, #16
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d063      	beq.n	8001d7e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d12a      	bne.n	8001d14 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001cbe:	4b81      	ldr	r3, [pc, #516]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001cc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cc2:	4b80      	ldr	r3, [pc, #512]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001cc4:	2104      	movs	r1, #4
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001cca:	4b7e      	ldr	r3, [pc, #504]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cce:	4b7d      	ldr	r3, [pc, #500]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd6:	f7fe ff0b 	bl	8000af0 <HAL_GetTick>
 8001cda:	0003      	movs	r3, r0
 8001cdc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ce0:	f7fe ff06 	bl	8000af0 <HAL_GetTick>
 8001ce4:	0002      	movs	r2, r0
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e0e3      	b.n	8001eba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001cf2:	4b74      	ldr	r3, [pc, #464]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d0f1      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001cfc:	4b71      	ldr	r3, [pc, #452]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d00:	22f8      	movs	r2, #248	; 0xf8
 8001d02:	4393      	bics	r3, r2
 8001d04:	0019      	movs	r1, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	00da      	lsls	r2, r3, #3
 8001d0c:	4b6d      	ldr	r3, [pc, #436]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	635a      	str	r2, [r3, #52]	; 0x34
 8001d12:	e034      	b.n	8001d7e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	3305      	adds	r3, #5
 8001d1a:	d111      	bne.n	8001d40 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001d1c:	4b69      	ldr	r3, [pc, #420]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001d1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d20:	4b68      	ldr	r3, [pc, #416]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001d22:	2104      	movs	r1, #4
 8001d24:	438a      	bics	r2, r1
 8001d26:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001d28:	4b66      	ldr	r3, [pc, #408]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d2c:	22f8      	movs	r2, #248	; 0xf8
 8001d2e:	4393      	bics	r3, r2
 8001d30:	0019      	movs	r1, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	00da      	lsls	r2, r3, #3
 8001d38:	4b62      	ldr	r3, [pc, #392]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	635a      	str	r2, [r3, #52]	; 0x34
 8001d3e:	e01e      	b.n	8001d7e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d40:	4b60      	ldr	r3, [pc, #384]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001d42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d44:	4b5f      	ldr	r3, [pc, #380]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001d46:	2104      	movs	r1, #4
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001d4c:	4b5d      	ldr	r3, [pc, #372]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001d4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d50:	4b5c      	ldr	r3, [pc, #368]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001d52:	2101      	movs	r1, #1
 8001d54:	438a      	bics	r2, r1
 8001d56:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d58:	f7fe feca 	bl	8000af0 <HAL_GetTick>
 8001d5c:	0003      	movs	r3, r0
 8001d5e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d62:	f7fe fec5 	bl	8000af0 <HAL_GetTick>
 8001d66:	0002      	movs	r2, r0
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e0a2      	b.n	8001eba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d74:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d78:	2202      	movs	r2, #2
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	d1f1      	bne.n	8001d62 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d100      	bne.n	8001d88 <HAL_RCC_OscConfig+0x4e4>
 8001d86:	e097      	b.n	8001eb8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d88:	4b4e      	ldr	r3, [pc, #312]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	220c      	movs	r2, #12
 8001d8e:	4013      	ands	r3, r2
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d100      	bne.n	8001d96 <HAL_RCC_OscConfig+0x4f2>
 8001d94:	e06b      	b.n	8001e6e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d14c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9e:	4b49      	ldr	r3, [pc, #292]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	4b48      	ldr	r3, [pc, #288]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001da4:	494a      	ldr	r1, [pc, #296]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001da6:	400a      	ands	r2, r1
 8001da8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001daa:	f7fe fea1 	bl	8000af0 <HAL_GetTick>
 8001dae:	0003      	movs	r3, r0
 8001db0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001db4:	f7fe fe9c 	bl	8000af0 <HAL_GetTick>
 8001db8:	0002      	movs	r2, r0
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e079      	b.n	8001eba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc6:	4b3f      	ldr	r3, [pc, #252]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	2380      	movs	r3, #128	; 0x80
 8001dcc:	049b      	lsls	r3, r3, #18
 8001dce:	4013      	ands	r3, r2
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dd2:	4b3c      	ldr	r3, [pc, #240]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd6:	220f      	movs	r2, #15
 8001dd8:	4393      	bics	r3, r2
 8001dda:	0019      	movs	r1, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de0:	4b38      	ldr	r3, [pc, #224]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001de2:	430a      	orrs	r2, r1
 8001de4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001de6:	4b37      	ldr	r3, [pc, #220]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	4a3a      	ldr	r2, [pc, #232]	; (8001ed4 <HAL_RCC_OscConfig+0x630>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	0019      	movs	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	4b32      	ldr	r3, [pc, #200]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e00:	4b30      	ldr	r3, [pc, #192]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001e06:	2180      	movs	r1, #128	; 0x80
 8001e08:	0449      	lsls	r1, r1, #17
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0e:	f7fe fe6f 	bl	8000af0 <HAL_GetTick>
 8001e12:	0003      	movs	r3, r0
 8001e14:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e18:	f7fe fe6a 	bl	8000af0 <HAL_GetTick>
 8001e1c:	0002      	movs	r2, r0
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e047      	b.n	8001eba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e2a:	4b26      	ldr	r3, [pc, #152]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	2380      	movs	r3, #128	; 0x80
 8001e30:	049b      	lsls	r3, r3, #18
 8001e32:	4013      	ands	r3, r2
 8001e34:	d0f0      	beq.n	8001e18 <HAL_RCC_OscConfig+0x574>
 8001e36:	e03f      	b.n	8001eb8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e38:	4b22      	ldr	r3, [pc, #136]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4b21      	ldr	r3, [pc, #132]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001e3e:	4924      	ldr	r1, [pc, #144]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001e40:	400a      	ands	r2, r1
 8001e42:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e44:	f7fe fe54 	bl	8000af0 <HAL_GetTick>
 8001e48:	0003      	movs	r3, r0
 8001e4a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e4e:	f7fe fe4f 	bl	8000af0 <HAL_GetTick>
 8001e52:	0002      	movs	r2, r0
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e02c      	b.n	8001eba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	2380      	movs	r3, #128	; 0x80
 8001e66:	049b      	lsls	r3, r3, #18
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d1f0      	bne.n	8001e4e <HAL_RCC_OscConfig+0x5aa>
 8001e6c:	e024      	b.n	8001eb8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d101      	bne.n	8001e7a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e01f      	b.n	8001eba <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001e7a:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001e80:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <HAL_RCC_OscConfig+0x620>)
 8001e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e84:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	2380      	movs	r3, #128	; 0x80
 8001e8a:	025b      	lsls	r3, r3, #9
 8001e8c:	401a      	ands	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d10e      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	220f      	movs	r2, #15
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d107      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	23f0      	movs	r3, #240	; 0xf0
 8001ea8:	039b      	lsls	r3, r3, #14
 8001eaa:	401a      	ands	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d001      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e000      	b.n	8001eba <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	0018      	movs	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	b008      	add	sp, #32
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	00001388 	.word	0x00001388
 8001ecc:	efffffff 	.word	0xefffffff
 8001ed0:	feffffff 	.word	0xfeffffff
 8001ed4:	ffc2ffff 	.word	0xffc2ffff

08001ed8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e0b3      	b.n	8002054 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eec:	4b5b      	ldr	r3, [pc, #364]	; (800205c <HAL_RCC_ClockConfig+0x184>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d911      	bls.n	8001f1e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efa:	4b58      	ldr	r3, [pc, #352]	; (800205c <HAL_RCC_ClockConfig+0x184>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2201      	movs	r2, #1
 8001f00:	4393      	bics	r3, r2
 8001f02:	0019      	movs	r1, r3
 8001f04:	4b55      	ldr	r3, [pc, #340]	; (800205c <HAL_RCC_ClockConfig+0x184>)
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0c:	4b53      	ldr	r3, [pc, #332]	; (800205c <HAL_RCC_ClockConfig+0x184>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2201      	movs	r2, #1
 8001f12:	4013      	ands	r3, r2
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d001      	beq.n	8001f1e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e09a      	b.n	8002054 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2202      	movs	r2, #2
 8001f24:	4013      	ands	r3, r2
 8001f26:	d015      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2204      	movs	r2, #4
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d006      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f32:	4b4b      	ldr	r3, [pc, #300]	; (8002060 <HAL_RCC_ClockConfig+0x188>)
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	4b4a      	ldr	r3, [pc, #296]	; (8002060 <HAL_RCC_ClockConfig+0x188>)
 8001f38:	21e0      	movs	r1, #224	; 0xe0
 8001f3a:	00c9      	lsls	r1, r1, #3
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f40:	4b47      	ldr	r3, [pc, #284]	; (8002060 <HAL_RCC_ClockConfig+0x188>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	22f0      	movs	r2, #240	; 0xf0
 8001f46:	4393      	bics	r3, r2
 8001f48:	0019      	movs	r1, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	4b44      	ldr	r3, [pc, #272]	; (8002060 <HAL_RCC_ClockConfig+0x188>)
 8001f50:	430a      	orrs	r2, r1
 8001f52:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	d040      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d107      	bne.n	8001f76 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f66:	4b3e      	ldr	r3, [pc, #248]	; (8002060 <HAL_RCC_ClockConfig+0x188>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	2380      	movs	r3, #128	; 0x80
 8001f6c:	029b      	lsls	r3, r3, #10
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d114      	bne.n	8001f9c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e06e      	b.n	8002054 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d107      	bne.n	8001f8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f7e:	4b38      	ldr	r3, [pc, #224]	; (8002060 <HAL_RCC_ClockConfig+0x188>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	2380      	movs	r3, #128	; 0x80
 8001f84:	049b      	lsls	r3, r3, #18
 8001f86:	4013      	ands	r3, r2
 8001f88:	d108      	bne.n	8001f9c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e062      	b.n	8002054 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8e:	4b34      	ldr	r3, [pc, #208]	; (8002060 <HAL_RCC_ClockConfig+0x188>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2202      	movs	r2, #2
 8001f94:	4013      	ands	r3, r2
 8001f96:	d101      	bne.n	8001f9c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e05b      	b.n	8002054 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f9c:	4b30      	ldr	r3, [pc, #192]	; (8002060 <HAL_RCC_ClockConfig+0x188>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	4393      	bics	r3, r2
 8001fa4:	0019      	movs	r1, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	4b2d      	ldr	r3, [pc, #180]	; (8002060 <HAL_RCC_ClockConfig+0x188>)
 8001fac:	430a      	orrs	r2, r1
 8001fae:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fb0:	f7fe fd9e 	bl	8000af0 <HAL_GetTick>
 8001fb4:	0003      	movs	r3, r0
 8001fb6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb8:	e009      	b.n	8001fce <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fba:	f7fe fd99 	bl	8000af0 <HAL_GetTick>
 8001fbe:	0002      	movs	r2, r0
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	4a27      	ldr	r2, [pc, #156]	; (8002064 <HAL_RCC_ClockConfig+0x18c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e042      	b.n	8002054 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fce:	4b24      	ldr	r3, [pc, #144]	; (8002060 <HAL_RCC_ClockConfig+0x188>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	220c      	movs	r2, #12
 8001fd4:	401a      	ands	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d1ec      	bne.n	8001fba <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fe0:	4b1e      	ldr	r3, [pc, #120]	; (800205c <HAL_RCC_ClockConfig+0x184>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d211      	bcs.n	8002012 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fee:	4b1b      	ldr	r3, [pc, #108]	; (800205c <HAL_RCC_ClockConfig+0x184>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	4393      	bics	r3, r2
 8001ff6:	0019      	movs	r1, r3
 8001ff8:	4b18      	ldr	r3, [pc, #96]	; (800205c <HAL_RCC_ClockConfig+0x184>)
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002000:	4b16      	ldr	r3, [pc, #88]	; (800205c <HAL_RCC_ClockConfig+0x184>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2201      	movs	r2, #1
 8002006:	4013      	ands	r3, r2
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	429a      	cmp	r2, r3
 800200c:	d001      	beq.n	8002012 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e020      	b.n	8002054 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2204      	movs	r2, #4
 8002018:	4013      	ands	r3, r2
 800201a:	d009      	beq.n	8002030 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800201c:	4b10      	ldr	r3, [pc, #64]	; (8002060 <HAL_RCC_ClockConfig+0x188>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	4a11      	ldr	r2, [pc, #68]	; (8002068 <HAL_RCC_ClockConfig+0x190>)
 8002022:	4013      	ands	r3, r2
 8002024:	0019      	movs	r1, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68da      	ldr	r2, [r3, #12]
 800202a:	4b0d      	ldr	r3, [pc, #52]	; (8002060 <HAL_RCC_ClockConfig+0x188>)
 800202c:	430a      	orrs	r2, r1
 800202e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002030:	f000 f820 	bl	8002074 <HAL_RCC_GetSysClockFreq>
 8002034:	0001      	movs	r1, r0
 8002036:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <HAL_RCC_ClockConfig+0x188>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	091b      	lsrs	r3, r3, #4
 800203c:	220f      	movs	r2, #15
 800203e:	4013      	ands	r3, r2
 8002040:	4a0a      	ldr	r2, [pc, #40]	; (800206c <HAL_RCC_ClockConfig+0x194>)
 8002042:	5cd3      	ldrb	r3, [r2, r3]
 8002044:	000a      	movs	r2, r1
 8002046:	40da      	lsrs	r2, r3
 8002048:	4b09      	ldr	r3, [pc, #36]	; (8002070 <HAL_RCC_ClockConfig+0x198>)
 800204a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800204c:	2000      	movs	r0, #0
 800204e:	f7fe fd09 	bl	8000a64 <HAL_InitTick>
  
  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	0018      	movs	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	b004      	add	sp, #16
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40022000 	.word	0x40022000
 8002060:	40021000 	.word	0x40021000
 8002064:	00001388 	.word	0x00001388
 8002068:	fffff8ff 	.word	0xfffff8ff
 800206c:	0800367c 	.word	0x0800367c
 8002070:	20000000 	.word	0x20000000

08002074 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002074:	b590      	push	{r4, r7, lr}
 8002076:	b08f      	sub	sp, #60	; 0x3c
 8002078:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800207a:	2314      	movs	r3, #20
 800207c:	18fb      	adds	r3, r7, r3
 800207e:	4a2b      	ldr	r2, [pc, #172]	; (800212c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002080:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002082:	c313      	stmia	r3!, {r0, r1, r4}
 8002084:	6812      	ldr	r2, [r2, #0]
 8002086:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002088:	1d3b      	adds	r3, r7, #4
 800208a:	4a29      	ldr	r2, [pc, #164]	; (8002130 <HAL_RCC_GetSysClockFreq+0xbc>)
 800208c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800208e:	c313      	stmia	r3!, {r0, r1, r4}
 8002090:	6812      	ldr	r2, [r2, #0]
 8002092:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002094:	2300      	movs	r3, #0
 8002096:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002098:	2300      	movs	r3, #0
 800209a:	62bb      	str	r3, [r7, #40]	; 0x28
 800209c:	2300      	movs	r3, #0
 800209e:	637b      	str	r3, [r7, #52]	; 0x34
 80020a0:	2300      	movs	r3, #0
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80020a8:	4b22      	ldr	r3, [pc, #136]	; (8002134 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b0:	220c      	movs	r2, #12
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b04      	cmp	r3, #4
 80020b6:	d002      	beq.n	80020be <HAL_RCC_GetSysClockFreq+0x4a>
 80020b8:	2b08      	cmp	r3, #8
 80020ba:	d003      	beq.n	80020c4 <HAL_RCC_GetSysClockFreq+0x50>
 80020bc:	e02d      	b.n	800211a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020be:	4b1e      	ldr	r3, [pc, #120]	; (8002138 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020c0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020c2:	e02d      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80020c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c6:	0c9b      	lsrs	r3, r3, #18
 80020c8:	220f      	movs	r2, #15
 80020ca:	4013      	ands	r3, r2
 80020cc:	2214      	movs	r2, #20
 80020ce:	18ba      	adds	r2, r7, r2
 80020d0:	5cd3      	ldrb	r3, [r2, r3]
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80020d4:	4b17      	ldr	r3, [pc, #92]	; (8002134 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d8:	220f      	movs	r2, #15
 80020da:	4013      	ands	r3, r2
 80020dc:	1d3a      	adds	r2, r7, #4
 80020de:	5cd3      	ldrb	r3, [r2, r3]
 80020e0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80020e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020e4:	2380      	movs	r3, #128	; 0x80
 80020e6:	025b      	lsls	r3, r3, #9
 80020e8:	4013      	ands	r3, r2
 80020ea:	d009      	beq.n	8002100 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020ee:	4812      	ldr	r0, [pc, #72]	; (8002138 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020f0:	f7fe f80a 	bl	8000108 <__udivsi3>
 80020f4:	0003      	movs	r3, r0
 80020f6:	001a      	movs	r2, r3
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	4353      	muls	r3, r2
 80020fc:	637b      	str	r3, [r7, #52]	; 0x34
 80020fe:	e009      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002100:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002102:	000a      	movs	r2, r1
 8002104:	0152      	lsls	r2, r2, #5
 8002106:	1a52      	subs	r2, r2, r1
 8002108:	0193      	lsls	r3, r2, #6
 800210a:	1a9b      	subs	r3, r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	185b      	adds	r3, r3, r1
 8002110:	021b      	lsls	r3, r3, #8
 8002112:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002116:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002118:	e002      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800211a:	4b07      	ldr	r3, [pc, #28]	; (8002138 <HAL_RCC_GetSysClockFreq+0xc4>)
 800211c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800211e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002122:	0018      	movs	r0, r3
 8002124:	46bd      	mov	sp, r7
 8002126:	b00f      	add	sp, #60	; 0x3c
 8002128:	bd90      	pop	{r4, r7, pc}
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	0800365c 	.word	0x0800365c
 8002130:	0800366c 	.word	0x0800366c
 8002134:	40021000 	.word	0x40021000
 8002138:	007a1200 	.word	0x007a1200

0800213c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002140:	4b02      	ldr	r3, [pc, #8]	; (800214c <HAL_RCC_GetHCLKFreq+0x10>)
 8002142:	681b      	ldr	r3, [r3, #0]
}
 8002144:	0018      	movs	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	46c0      	nop			; (mov r8, r8)
 800214c:	20000000 	.word	0x20000000

08002150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002154:	f7ff fff2 	bl	800213c <HAL_RCC_GetHCLKFreq>
 8002158:	0001      	movs	r1, r0
 800215a:	4b06      	ldr	r3, [pc, #24]	; (8002174 <HAL_RCC_GetPCLK1Freq+0x24>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	0a1b      	lsrs	r3, r3, #8
 8002160:	2207      	movs	r2, #7
 8002162:	4013      	ands	r3, r2
 8002164:	4a04      	ldr	r2, [pc, #16]	; (8002178 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002166:	5cd3      	ldrb	r3, [r2, r3]
 8002168:	40d9      	lsrs	r1, r3
 800216a:	000b      	movs	r3, r1
}    
 800216c:	0018      	movs	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	40021000 	.word	0x40021000
 8002178:	0800368c 	.word	0x0800368c

0800217c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	2380      	movs	r3, #128	; 0x80
 8002192:	025b      	lsls	r3, r3, #9
 8002194:	4013      	ands	r3, r2
 8002196:	d100      	bne.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002198:	e08e      	b.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800219a:	2017      	movs	r0, #23
 800219c:	183b      	adds	r3, r7, r0
 800219e:	2200      	movs	r2, #0
 80021a0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021a2:	4b5f      	ldr	r3, [pc, #380]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021a4:	69da      	ldr	r2, [r3, #28]
 80021a6:	2380      	movs	r3, #128	; 0x80
 80021a8:	055b      	lsls	r3, r3, #21
 80021aa:	4013      	ands	r3, r2
 80021ac:	d110      	bne.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021ae:	4b5c      	ldr	r3, [pc, #368]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021b0:	69da      	ldr	r2, [r3, #28]
 80021b2:	4b5b      	ldr	r3, [pc, #364]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021b4:	2180      	movs	r1, #128	; 0x80
 80021b6:	0549      	lsls	r1, r1, #21
 80021b8:	430a      	orrs	r2, r1
 80021ba:	61da      	str	r2, [r3, #28]
 80021bc:	4b58      	ldr	r3, [pc, #352]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021be:	69da      	ldr	r2, [r3, #28]
 80021c0:	2380      	movs	r3, #128	; 0x80
 80021c2:	055b      	lsls	r3, r3, #21
 80021c4:	4013      	ands	r3, r2
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ca:	183b      	adds	r3, r7, r0
 80021cc:	2201      	movs	r2, #1
 80021ce:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d0:	4b54      	ldr	r3, [pc, #336]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	2380      	movs	r3, #128	; 0x80
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	4013      	ands	r3, r2
 80021da:	d11a      	bne.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021dc:	4b51      	ldr	r3, [pc, #324]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4b50      	ldr	r3, [pc, #320]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80021e2:	2180      	movs	r1, #128	; 0x80
 80021e4:	0049      	lsls	r1, r1, #1
 80021e6:	430a      	orrs	r2, r1
 80021e8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ea:	f7fe fc81 	bl	8000af0 <HAL_GetTick>
 80021ee:	0003      	movs	r3, r0
 80021f0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f2:	e008      	b.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f4:	f7fe fc7c 	bl	8000af0 <HAL_GetTick>
 80021f8:	0002      	movs	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b64      	cmp	r3, #100	; 0x64
 8002200:	d901      	bls.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e087      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002206:	4b47      	ldr	r3, [pc, #284]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	2380      	movs	r3, #128	; 0x80
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	4013      	ands	r3, r2
 8002210:	d0f0      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002212:	4b43      	ldr	r3, [pc, #268]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002214:	6a1a      	ldr	r2, [r3, #32]
 8002216:	23c0      	movs	r3, #192	; 0xc0
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4013      	ands	r3, r2
 800221c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d034      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	23c0      	movs	r3, #192	; 0xc0
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4013      	ands	r3, r2
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	429a      	cmp	r2, r3
 8002232:	d02c      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002234:	4b3a      	ldr	r3, [pc, #232]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	4a3b      	ldr	r2, [pc, #236]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800223a:	4013      	ands	r3, r2
 800223c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800223e:	4b38      	ldr	r3, [pc, #224]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002240:	6a1a      	ldr	r2, [r3, #32]
 8002242:	4b37      	ldr	r3, [pc, #220]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002244:	2180      	movs	r1, #128	; 0x80
 8002246:	0249      	lsls	r1, r1, #9
 8002248:	430a      	orrs	r2, r1
 800224a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800224c:	4b34      	ldr	r3, [pc, #208]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800224e:	6a1a      	ldr	r2, [r3, #32]
 8002250:	4b33      	ldr	r3, [pc, #204]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002252:	4936      	ldr	r1, [pc, #216]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002254:	400a      	ands	r2, r1
 8002256:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002258:	4b31      	ldr	r3, [pc, #196]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2201      	movs	r2, #1
 8002262:	4013      	ands	r3, r2
 8002264:	d013      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002266:	f7fe fc43 	bl	8000af0 <HAL_GetTick>
 800226a:	0003      	movs	r3, r0
 800226c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800226e:	e009      	b.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002270:	f7fe fc3e 	bl	8000af0 <HAL_GetTick>
 8002274:	0002      	movs	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	4a2d      	ldr	r2, [pc, #180]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d901      	bls.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e048      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002284:	4b26      	ldr	r3, [pc, #152]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	2202      	movs	r2, #2
 800228a:	4013      	ands	r3, r2
 800228c:	d0f0      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800228e:	4b24      	ldr	r3, [pc, #144]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	4a25      	ldr	r2, [pc, #148]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002294:	4013      	ands	r3, r2
 8002296:	0019      	movs	r1, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	4b20      	ldr	r3, [pc, #128]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800229e:	430a      	orrs	r2, r1
 80022a0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022a2:	2317      	movs	r3, #23
 80022a4:	18fb      	adds	r3, r7, r3
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d105      	bne.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ac:	4b1c      	ldr	r3, [pc, #112]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80022ae:	69da      	ldr	r2, [r3, #28]
 80022b0:	4b1b      	ldr	r3, [pc, #108]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80022b2:	4920      	ldr	r1, [pc, #128]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80022b4:	400a      	ands	r2, r1
 80022b6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2201      	movs	r2, #1
 80022be:	4013      	ands	r3, r2
 80022c0:	d009      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022c2:	4b17      	ldr	r3, [pc, #92]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	2203      	movs	r2, #3
 80022c8:	4393      	bics	r3, r2
 80022ca:	0019      	movs	r1, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	4b13      	ldr	r3, [pc, #76]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80022d2:	430a      	orrs	r2, r1
 80022d4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2220      	movs	r2, #32
 80022dc:	4013      	ands	r3, r2
 80022de:	d009      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022e0:	4b0f      	ldr	r3, [pc, #60]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80022e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e4:	2210      	movs	r2, #16
 80022e6:	4393      	bics	r3, r2
 80022e8:	0019      	movs	r1, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80022f0:	430a      	orrs	r2, r1
 80022f2:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	2380      	movs	r3, #128	; 0x80
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4013      	ands	r3, r2
 80022fe:	d009      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002300:	4b07      	ldr	r3, [pc, #28]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002304:	2240      	movs	r2, #64	; 0x40
 8002306:	4393      	bics	r3, r2
 8002308:	0019      	movs	r1, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691a      	ldr	r2, [r3, #16]
 800230e:	4b04      	ldr	r3, [pc, #16]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002310:	430a      	orrs	r2, r1
 8002312:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	0018      	movs	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	b006      	add	sp, #24
 800231c:	bd80      	pop	{r7, pc}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	40021000 	.word	0x40021000
 8002324:	40007000 	.word	0x40007000
 8002328:	fffffcff 	.word	0xfffffcff
 800232c:	fffeffff 	.word	0xfffeffff
 8002330:	00001388 	.word	0x00001388
 8002334:	efffffff 	.word	0xefffffff

08002338 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e044      	b.n	80023d4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800234e:	2b00      	cmp	r3, #0
 8002350:	d107      	bne.n	8002362 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2274      	movs	r2, #116	; 0x74
 8002356:	2100      	movs	r1, #0
 8002358:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	0018      	movs	r0, r3
 800235e:	f7fe fac3 	bl	80008e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2224      	movs	r2, #36	; 0x24
 8002366:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2101      	movs	r1, #1
 8002374:	438a      	bics	r2, r1
 8002376:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	0018      	movs	r0, r3
 800237c:	f000 fb86 	bl	8002a8c <UART_SetConfig>
 8002380:	0003      	movs	r3, r0
 8002382:	2b01      	cmp	r3, #1
 8002384:	d101      	bne.n	800238a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e024      	b.n	80023d4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	0018      	movs	r0, r3
 8002396:	f000 fcb9 	bl	8002d0c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	490d      	ldr	r1, [pc, #52]	; (80023dc <HAL_UART_Init+0xa4>)
 80023a6:	400a      	ands	r2, r1
 80023a8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	212a      	movs	r1, #42	; 0x2a
 80023b6:	438a      	bics	r2, r1
 80023b8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2101      	movs	r1, #1
 80023c6:	430a      	orrs	r2, r1
 80023c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	0018      	movs	r0, r3
 80023ce:	f000 fd51 	bl	8002e74 <UART_CheckIdleState>
 80023d2:	0003      	movs	r3, r0
}
 80023d4:	0018      	movs	r0, r3
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b002      	add	sp, #8
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	ffffb7ff 	.word	0xffffb7ff

080023e0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	1dbb      	adds	r3, r7, #6
 80023ec:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023f2:	2b20      	cmp	r3, #32
 80023f4:	d150      	bne.n	8002498 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <HAL_UART_Receive_IT+0x24>
 80023fc:	1dbb      	adds	r3, r7, #6
 80023fe:	881b      	ldrh	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e048      	b.n	800249a <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	2380      	movs	r3, #128	; 0x80
 800240e:	015b      	lsls	r3, r3, #5
 8002410:	429a      	cmp	r2, r3
 8002412:	d109      	bne.n	8002428 <HAL_UART_Receive_IT+0x48>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d105      	bne.n	8002428 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2201      	movs	r2, #1
 8002420:	4013      	ands	r3, r2
 8002422:	d001      	beq.n	8002428 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e038      	b.n	800249a <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2274      	movs	r2, #116	; 0x74
 800242c:	5c9b      	ldrb	r3, [r3, r2]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d101      	bne.n	8002436 <HAL_UART_Receive_IT+0x56>
 8002432:	2302      	movs	r3, #2
 8002434:	e031      	b.n	800249a <HAL_UART_Receive_IT+0xba>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2274      	movs	r2, #116	; 0x74
 800243a:	2101      	movs	r1, #1
 800243c:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	2380      	movs	r3, #128	; 0x80
 800244c:	041b      	lsls	r3, r3, #16
 800244e:	4013      	ands	r3, r2
 8002450:	d019      	beq.n	8002486 <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002452:	f3ef 8310 	mrs	r3, PRIMASK
 8002456:	613b      	str	r3, [r7, #16]
  return(result);
 8002458:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800245a:	61fb      	str	r3, [r7, #28]
 800245c:	2301      	movs	r3, #1
 800245e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	f383 8810 	msr	PRIMASK, r3
}
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2180      	movs	r1, #128	; 0x80
 8002474:	04c9      	lsls	r1, r1, #19
 8002476:	430a      	orrs	r2, r1
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	f383 8810 	msr	PRIMASK, r3
}
 8002484:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002486:	1dbb      	adds	r3, r7, #6
 8002488:	881a      	ldrh	r2, [r3, #0]
 800248a:	68b9      	ldr	r1, [r7, #8]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	0018      	movs	r0, r3
 8002490:	f000 fdfc 	bl	800308c <UART_Start_Receive_IT>
 8002494:	0003      	movs	r3, r0
 8002496:	e000      	b.n	800249a <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8002498:	2302      	movs	r3, #2
  }
}
 800249a:	0018      	movs	r0, r3
 800249c:	46bd      	mov	sp, r7
 800249e:	b008      	add	sp, #32
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024a4:	b590      	push	{r4, r7, lr}
 80024a6:	b0ab      	sub	sp, #172	; 0xac
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	22a4      	movs	r2, #164	; 0xa4
 80024b4:	18b9      	adds	r1, r7, r2
 80024b6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	20a0      	movs	r0, #160	; 0xa0
 80024c0:	1839      	adds	r1, r7, r0
 80024c2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	219c      	movs	r1, #156	; 0x9c
 80024cc:	1879      	adds	r1, r7, r1
 80024ce:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80024d0:	0011      	movs	r1, r2
 80024d2:	18bb      	adds	r3, r7, r2
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a99      	ldr	r2, [pc, #612]	; (800273c <HAL_UART_IRQHandler+0x298>)
 80024d8:	4013      	ands	r3, r2
 80024da:	2298      	movs	r2, #152	; 0x98
 80024dc:	18bc      	adds	r4, r7, r2
 80024de:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80024e0:	18bb      	adds	r3, r7, r2
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d114      	bne.n	8002512 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80024e8:	187b      	adds	r3, r7, r1
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2220      	movs	r2, #32
 80024ee:	4013      	ands	r3, r2
 80024f0:	d00f      	beq.n	8002512 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80024f2:	183b      	adds	r3, r7, r0
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2220      	movs	r2, #32
 80024f8:	4013      	ands	r3, r2
 80024fa:	d00a      	beq.n	8002512 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002500:	2b00      	cmp	r3, #0
 8002502:	d100      	bne.n	8002506 <HAL_UART_IRQHandler+0x62>
 8002504:	e296      	b.n	8002a34 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	0010      	movs	r0, r2
 800250e:	4798      	blx	r3
      }
      return;
 8002510:	e290      	b.n	8002a34 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002512:	2398      	movs	r3, #152	; 0x98
 8002514:	18fb      	adds	r3, r7, r3
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d100      	bne.n	800251e <HAL_UART_IRQHandler+0x7a>
 800251c:	e114      	b.n	8002748 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800251e:	239c      	movs	r3, #156	; 0x9c
 8002520:	18fb      	adds	r3, r7, r3
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2201      	movs	r2, #1
 8002526:	4013      	ands	r3, r2
 8002528:	d106      	bne.n	8002538 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800252a:	23a0      	movs	r3, #160	; 0xa0
 800252c:	18fb      	adds	r3, r7, r3
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a83      	ldr	r2, [pc, #524]	; (8002740 <HAL_UART_IRQHandler+0x29c>)
 8002532:	4013      	ands	r3, r2
 8002534:	d100      	bne.n	8002538 <HAL_UART_IRQHandler+0x94>
 8002536:	e107      	b.n	8002748 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002538:	23a4      	movs	r3, #164	; 0xa4
 800253a:	18fb      	adds	r3, r7, r3
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2201      	movs	r2, #1
 8002540:	4013      	ands	r3, r2
 8002542:	d012      	beq.n	800256a <HAL_UART_IRQHandler+0xc6>
 8002544:	23a0      	movs	r3, #160	; 0xa0
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	2380      	movs	r3, #128	; 0x80
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	4013      	ands	r3, r2
 8002550:	d00b      	beq.n	800256a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2201      	movs	r2, #1
 8002558:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2280      	movs	r2, #128	; 0x80
 800255e:	589b      	ldr	r3, [r3, r2]
 8002560:	2201      	movs	r2, #1
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2180      	movs	r1, #128	; 0x80
 8002568:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800256a:	23a4      	movs	r3, #164	; 0xa4
 800256c:	18fb      	adds	r3, r7, r3
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2202      	movs	r2, #2
 8002572:	4013      	ands	r3, r2
 8002574:	d011      	beq.n	800259a <HAL_UART_IRQHandler+0xf6>
 8002576:	239c      	movs	r3, #156	; 0x9c
 8002578:	18fb      	adds	r3, r7, r3
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2201      	movs	r2, #1
 800257e:	4013      	ands	r3, r2
 8002580:	d00b      	beq.n	800259a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2202      	movs	r2, #2
 8002588:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2280      	movs	r2, #128	; 0x80
 800258e:	589b      	ldr	r3, [r3, r2]
 8002590:	2204      	movs	r2, #4
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2180      	movs	r1, #128	; 0x80
 8002598:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800259a:	23a4      	movs	r3, #164	; 0xa4
 800259c:	18fb      	adds	r3, r7, r3
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2204      	movs	r2, #4
 80025a2:	4013      	ands	r3, r2
 80025a4:	d011      	beq.n	80025ca <HAL_UART_IRQHandler+0x126>
 80025a6:	239c      	movs	r3, #156	; 0x9c
 80025a8:	18fb      	adds	r3, r7, r3
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2201      	movs	r2, #1
 80025ae:	4013      	ands	r3, r2
 80025b0:	d00b      	beq.n	80025ca <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2204      	movs	r2, #4
 80025b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2280      	movs	r2, #128	; 0x80
 80025be:	589b      	ldr	r3, [r3, r2]
 80025c0:	2202      	movs	r2, #2
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2180      	movs	r1, #128	; 0x80
 80025c8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80025ca:	23a4      	movs	r3, #164	; 0xa4
 80025cc:	18fb      	adds	r3, r7, r3
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2208      	movs	r2, #8
 80025d2:	4013      	ands	r3, r2
 80025d4:	d017      	beq.n	8002606 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80025d6:	23a0      	movs	r3, #160	; 0xa0
 80025d8:	18fb      	adds	r3, r7, r3
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2220      	movs	r2, #32
 80025de:	4013      	ands	r3, r2
 80025e0:	d105      	bne.n	80025ee <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80025e2:	239c      	movs	r3, #156	; 0x9c
 80025e4:	18fb      	adds	r3, r7, r3
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2201      	movs	r2, #1
 80025ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80025ec:	d00b      	beq.n	8002606 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2208      	movs	r2, #8
 80025f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2280      	movs	r2, #128	; 0x80
 80025fa:	589b      	ldr	r3, [r3, r2]
 80025fc:	2208      	movs	r2, #8
 80025fe:	431a      	orrs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2180      	movs	r1, #128	; 0x80
 8002604:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002606:	23a4      	movs	r3, #164	; 0xa4
 8002608:	18fb      	adds	r3, r7, r3
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	2380      	movs	r3, #128	; 0x80
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	4013      	ands	r3, r2
 8002612:	d013      	beq.n	800263c <HAL_UART_IRQHandler+0x198>
 8002614:	23a0      	movs	r3, #160	; 0xa0
 8002616:	18fb      	adds	r3, r7, r3
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	2380      	movs	r3, #128	; 0x80
 800261c:	04db      	lsls	r3, r3, #19
 800261e:	4013      	ands	r3, r2
 8002620:	d00c      	beq.n	800263c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2280      	movs	r2, #128	; 0x80
 8002628:	0112      	lsls	r2, r2, #4
 800262a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2280      	movs	r2, #128	; 0x80
 8002630:	589b      	ldr	r3, [r3, r2]
 8002632:	2220      	movs	r2, #32
 8002634:	431a      	orrs	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2180      	movs	r1, #128	; 0x80
 800263a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2280      	movs	r2, #128	; 0x80
 8002640:	589b      	ldr	r3, [r3, r2]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d100      	bne.n	8002648 <HAL_UART_IRQHandler+0x1a4>
 8002646:	e1f7      	b.n	8002a38 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002648:	23a4      	movs	r3, #164	; 0xa4
 800264a:	18fb      	adds	r3, r7, r3
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2220      	movs	r2, #32
 8002650:	4013      	ands	r3, r2
 8002652:	d00e      	beq.n	8002672 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002654:	23a0      	movs	r3, #160	; 0xa0
 8002656:	18fb      	adds	r3, r7, r3
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2220      	movs	r2, #32
 800265c:	4013      	ands	r3, r2
 800265e:	d008      	beq.n	8002672 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002664:	2b00      	cmp	r3, #0
 8002666:	d004      	beq.n	8002672 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	0010      	movs	r0, r2
 8002670:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2280      	movs	r2, #128	; 0x80
 8002676:	589b      	ldr	r3, [r3, r2]
 8002678:	2194      	movs	r1, #148	; 0x94
 800267a:	187a      	adds	r2, r7, r1
 800267c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	2240      	movs	r2, #64	; 0x40
 8002686:	4013      	ands	r3, r2
 8002688:	2b40      	cmp	r3, #64	; 0x40
 800268a:	d004      	beq.n	8002696 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800268c:	187b      	adds	r3, r7, r1
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2228      	movs	r2, #40	; 0x28
 8002692:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002694:	d047      	beq.n	8002726 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	0018      	movs	r0, r3
 800269a:	f000 fd93 	bl	80031c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2240      	movs	r2, #64	; 0x40
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b40      	cmp	r3, #64	; 0x40
 80026aa:	d137      	bne.n	800271c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026ac:	f3ef 8310 	mrs	r3, PRIMASK
 80026b0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80026b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026b4:	2090      	movs	r0, #144	; 0x90
 80026b6:	183a      	adds	r2, r7, r0
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	2301      	movs	r3, #1
 80026bc:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026c0:	f383 8810 	msr	PRIMASK, r3
}
 80026c4:	46c0      	nop			; (mov r8, r8)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2140      	movs	r1, #64	; 0x40
 80026d2:	438a      	bics	r2, r1
 80026d4:	609a      	str	r2, [r3, #8]
 80026d6:	183b      	adds	r3, r7, r0
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026de:	f383 8810 	msr	PRIMASK, r3
}
 80026e2:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d012      	beq.n	8002712 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f0:	4a14      	ldr	r2, [pc, #80]	; (8002744 <HAL_UART_IRQHandler+0x2a0>)
 80026f2:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f8:	0018      	movs	r0, r3
 80026fa:	f7fe fb3d 	bl	8000d78 <HAL_DMA_Abort_IT>
 80026fe:	1e03      	subs	r3, r0, #0
 8002700:	d01a      	beq.n	8002738 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002706:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270c:	0018      	movs	r0, r3
 800270e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002710:	e012      	b.n	8002738 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	0018      	movs	r0, r3
 8002716:	f000 f9a5 	bl	8002a64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800271a:	e00d      	b.n	8002738 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	0018      	movs	r0, r3
 8002720:	f000 f9a0 	bl	8002a64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002724:	e008      	b.n	8002738 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	0018      	movs	r0, r3
 800272a:	f000 f99b 	bl	8002a64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2280      	movs	r2, #128	; 0x80
 8002732:	2100      	movs	r1, #0
 8002734:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002736:	e17f      	b.n	8002a38 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002738:	46c0      	nop			; (mov r8, r8)
    return;
 800273a:	e17d      	b.n	8002a38 <HAL_UART_IRQHandler+0x594>
 800273c:	0000080f 	.word	0x0000080f
 8002740:	04000120 	.word	0x04000120
 8002744:	08003289 	.word	0x08003289

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800274c:	2b01      	cmp	r3, #1
 800274e:	d000      	beq.n	8002752 <HAL_UART_IRQHandler+0x2ae>
 8002750:	e131      	b.n	80029b6 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002752:	23a4      	movs	r3, #164	; 0xa4
 8002754:	18fb      	adds	r3, r7, r3
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2210      	movs	r2, #16
 800275a:	4013      	ands	r3, r2
 800275c:	d100      	bne.n	8002760 <HAL_UART_IRQHandler+0x2bc>
 800275e:	e12a      	b.n	80029b6 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002760:	23a0      	movs	r3, #160	; 0xa0
 8002762:	18fb      	adds	r3, r7, r3
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2210      	movs	r2, #16
 8002768:	4013      	ands	r3, r2
 800276a:	d100      	bne.n	800276e <HAL_UART_IRQHandler+0x2ca>
 800276c:	e123      	b.n	80029b6 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2210      	movs	r2, #16
 8002774:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2240      	movs	r2, #64	; 0x40
 800277e:	4013      	ands	r3, r2
 8002780:	2b40      	cmp	r3, #64	; 0x40
 8002782:	d000      	beq.n	8002786 <HAL_UART_IRQHandler+0x2e2>
 8002784:	e09b      	b.n	80028be <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	217e      	movs	r1, #126	; 0x7e
 8002790:	187b      	adds	r3, r7, r1
 8002792:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002794:	187b      	adds	r3, r7, r1
 8002796:	881b      	ldrh	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d100      	bne.n	800279e <HAL_UART_IRQHandler+0x2fa>
 800279c:	e14e      	b.n	8002a3c <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2258      	movs	r2, #88	; 0x58
 80027a2:	5a9b      	ldrh	r3, [r3, r2]
 80027a4:	187a      	adds	r2, r7, r1
 80027a6:	8812      	ldrh	r2, [r2, #0]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d300      	bcc.n	80027ae <HAL_UART_IRQHandler+0x30a>
 80027ac:	e146      	b.n	8002a3c <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	187a      	adds	r2, r7, r1
 80027b2:	215a      	movs	r1, #90	; 0x5a
 80027b4:	8812      	ldrh	r2, [r2, #0]
 80027b6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	2b20      	cmp	r3, #32
 80027c0:	d06e      	beq.n	80028a0 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027c2:	f3ef 8310 	mrs	r3, PRIMASK
 80027c6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80027c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027ca:	67bb      	str	r3, [r7, #120]	; 0x78
 80027cc:	2301      	movs	r3, #1
 80027ce:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d2:	f383 8810 	msr	PRIMASK, r3
}
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	499a      	ldr	r1, [pc, #616]	; (8002a4c <HAL_UART_IRQHandler+0x5a8>)
 80027e4:	400a      	ands	r2, r1
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027ea:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ee:	f383 8810 	msr	PRIMASK, r3
}
 80027f2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027f4:	f3ef 8310 	mrs	r3, PRIMASK
 80027f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80027fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027fc:	677b      	str	r3, [r7, #116]	; 0x74
 80027fe:	2301      	movs	r3, #1
 8002800:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002804:	f383 8810 	msr	PRIMASK, r3
}
 8002808:	46c0      	nop			; (mov r8, r8)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2101      	movs	r1, #1
 8002816:	438a      	bics	r2, r1
 8002818:	609a      	str	r2, [r3, #8]
 800281a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800281c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800281e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002820:	f383 8810 	msr	PRIMASK, r3
}
 8002824:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002826:	f3ef 8310 	mrs	r3, PRIMASK
 800282a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800282c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800282e:	673b      	str	r3, [r7, #112]	; 0x70
 8002830:	2301      	movs	r3, #1
 8002832:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002836:	f383 8810 	msr	PRIMASK, r3
}
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2140      	movs	r1, #64	; 0x40
 8002848:	438a      	bics	r2, r1
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800284e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002852:	f383 8810 	msr	PRIMASK, r3
}
 8002856:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2220      	movs	r2, #32
 800285c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002864:	f3ef 8310 	mrs	r3, PRIMASK
 8002868:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800286a:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800286c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800286e:	2301      	movs	r3, #1
 8002870:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002872:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002874:	f383 8810 	msr	PRIMASK, r3
}
 8002878:	46c0      	nop			; (mov r8, r8)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2110      	movs	r1, #16
 8002886:	438a      	bics	r2, r1
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800288c:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800288e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002890:	f383 8810 	msr	PRIMASK, r3
}
 8002894:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289a:	0018      	movs	r0, r3
 800289c:	f7fe fa34 	bl	8000d08 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2258      	movs	r2, #88	; 0x58
 80028a4:	5a9a      	ldrh	r2, [r3, r2]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	215a      	movs	r1, #90	; 0x5a
 80028aa:	5a5b      	ldrh	r3, [r3, r1]
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	0011      	movs	r1, r2
 80028b6:	0018      	movs	r0, r3
 80028b8:	f000 f8dc 	bl	8002a74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80028bc:	e0be      	b.n	8002a3c <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2258      	movs	r2, #88	; 0x58
 80028c2:	5a99      	ldrh	r1, [r3, r2]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	225a      	movs	r2, #90	; 0x5a
 80028c8:	5a9b      	ldrh	r3, [r3, r2]
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	208e      	movs	r0, #142	; 0x8e
 80028ce:	183b      	adds	r3, r7, r0
 80028d0:	1a8a      	subs	r2, r1, r2
 80028d2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	225a      	movs	r2, #90	; 0x5a
 80028d8:	5a9b      	ldrh	r3, [r3, r2]
 80028da:	b29b      	uxth	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d100      	bne.n	80028e2 <HAL_UART_IRQHandler+0x43e>
 80028e0:	e0ae      	b.n	8002a40 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80028e2:	183b      	adds	r3, r7, r0
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d100      	bne.n	80028ec <HAL_UART_IRQHandler+0x448>
 80028ea:	e0a9      	b.n	8002a40 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028ec:	f3ef 8310 	mrs	r3, PRIMASK
 80028f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80028f2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028f4:	2488      	movs	r4, #136	; 0x88
 80028f6:	193a      	adds	r2, r7, r4
 80028f8:	6013      	str	r3, [r2, #0]
 80028fa:	2301      	movs	r3, #1
 80028fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	f383 8810 	msr	PRIMASK, r3
}
 8002904:	46c0      	nop			; (mov r8, r8)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	494f      	ldr	r1, [pc, #316]	; (8002a50 <HAL_UART_IRQHandler+0x5ac>)
 8002912:	400a      	ands	r2, r1
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	193b      	adds	r3, r7, r4
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	f383 8810 	msr	PRIMASK, r3
}
 8002922:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002924:	f3ef 8310 	mrs	r3, PRIMASK
 8002928:	61bb      	str	r3, [r7, #24]
  return(result);
 800292a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800292c:	2484      	movs	r4, #132	; 0x84
 800292e:	193a      	adds	r2, r7, r4
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	2301      	movs	r3, #1
 8002934:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	f383 8810 	msr	PRIMASK, r3
}
 800293c:	46c0      	nop			; (mov r8, r8)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2101      	movs	r1, #1
 800294a:	438a      	bics	r2, r1
 800294c:	609a      	str	r2, [r3, #8]
 800294e:	193b      	adds	r3, r7, r4
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002954:	6a3b      	ldr	r3, [r7, #32]
 8002956:	f383 8810 	msr	PRIMASK, r3
}
 800295a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2220      	movs	r2, #32
 8002960:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800296e:	f3ef 8310 	mrs	r3, PRIMASK
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002976:	2480      	movs	r4, #128	; 0x80
 8002978:	193a      	adds	r2, r7, r4
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	2301      	movs	r3, #1
 800297e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002982:	f383 8810 	msr	PRIMASK, r3
}
 8002986:	46c0      	nop			; (mov r8, r8)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2110      	movs	r1, #16
 8002994:	438a      	bics	r2, r1
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	193b      	adds	r3, r7, r4
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800299e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a0:	f383 8810 	msr	PRIMASK, r3
}
 80029a4:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80029a6:	183b      	adds	r3, r7, r0
 80029a8:	881a      	ldrh	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	0011      	movs	r1, r2
 80029ae:	0018      	movs	r0, r3
 80029b0:	f000 f860 	bl	8002a74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80029b4:	e044      	b.n	8002a40 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80029b6:	23a4      	movs	r3, #164	; 0xa4
 80029b8:	18fb      	adds	r3, r7, r3
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	2380      	movs	r3, #128	; 0x80
 80029be:	035b      	lsls	r3, r3, #13
 80029c0:	4013      	ands	r3, r2
 80029c2:	d010      	beq.n	80029e6 <HAL_UART_IRQHandler+0x542>
 80029c4:	239c      	movs	r3, #156	; 0x9c
 80029c6:	18fb      	adds	r3, r7, r3
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	2380      	movs	r3, #128	; 0x80
 80029cc:	03db      	lsls	r3, r3, #15
 80029ce:	4013      	ands	r3, r2
 80029d0:	d009      	beq.n	80029e6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2280      	movs	r2, #128	; 0x80
 80029d8:	0352      	lsls	r2, r2, #13
 80029da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	0018      	movs	r0, r3
 80029e0:	f000 fdfc 	bl	80035dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80029e4:	e02f      	b.n	8002a46 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80029e6:	23a4      	movs	r3, #164	; 0xa4
 80029e8:	18fb      	adds	r3, r7, r3
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2280      	movs	r2, #128	; 0x80
 80029ee:	4013      	ands	r3, r2
 80029f0:	d00f      	beq.n	8002a12 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80029f2:	23a0      	movs	r3, #160	; 0xa0
 80029f4:	18fb      	adds	r3, r7, r3
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2280      	movs	r2, #128	; 0x80
 80029fa:	4013      	ands	r3, r2
 80029fc:	d009      	beq.n	8002a12 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d01e      	beq.n	8002a44 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	0010      	movs	r0, r2
 8002a0e:	4798      	blx	r3
    }
    return;
 8002a10:	e018      	b.n	8002a44 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002a12:	23a4      	movs	r3, #164	; 0xa4
 8002a14:	18fb      	adds	r3, r7, r3
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2240      	movs	r2, #64	; 0x40
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d013      	beq.n	8002a46 <HAL_UART_IRQHandler+0x5a2>
 8002a1e:	23a0      	movs	r3, #160	; 0xa0
 8002a20:	18fb      	adds	r3, r7, r3
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2240      	movs	r2, #64	; 0x40
 8002a26:	4013      	ands	r3, r2
 8002a28:	d00d      	beq.n	8002a46 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f000 fc42 	bl	80032b6 <UART_EndTransmit_IT>
    return;
 8002a32:	e008      	b.n	8002a46 <HAL_UART_IRQHandler+0x5a2>
      return;
 8002a34:	46c0      	nop			; (mov r8, r8)
 8002a36:	e006      	b.n	8002a46 <HAL_UART_IRQHandler+0x5a2>
    return;
 8002a38:	46c0      	nop			; (mov r8, r8)
 8002a3a:	e004      	b.n	8002a46 <HAL_UART_IRQHandler+0x5a2>
      return;
 8002a3c:	46c0      	nop			; (mov r8, r8)
 8002a3e:	e002      	b.n	8002a46 <HAL_UART_IRQHandler+0x5a2>
      return;
 8002a40:	46c0      	nop			; (mov r8, r8)
 8002a42:	e000      	b.n	8002a46 <HAL_UART_IRQHandler+0x5a2>
    return;
 8002a44:	46c0      	nop			; (mov r8, r8)
  }

}
 8002a46:	46bd      	mov	sp, r7
 8002a48:	b02b      	add	sp, #172	; 0xac
 8002a4a:	bd90      	pop	{r4, r7, pc}
 8002a4c:	fffffeff 	.word	0xfffffeff
 8002a50:	fffffedf 	.word	0xfffffedf

08002a54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002a5c:	46c0      	nop			; (mov r8, r8)
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	b002      	add	sp, #8
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002a6c:	46c0      	nop			; (mov r8, r8)
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	b002      	add	sp, #8
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	000a      	movs	r2, r1
 8002a7e:	1cbb      	adds	r3, r7, #2
 8002a80:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	46bd      	mov	sp, r7
 8002a86:	b002      	add	sp, #8
 8002a88:	bd80      	pop	{r7, pc}
	...

08002a8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a94:	231e      	movs	r3, #30
 8002a96:	18fb      	adds	r3, r7, r3
 8002a98:	2200      	movs	r2, #0
 8002a9a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a8d      	ldr	r2, [pc, #564]	; (8002cf0 <UART_SetConfig+0x264>)
 8002abc:	4013      	ands	r3, r2
 8002abe:	0019      	movs	r1, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	4a88      	ldr	r2, [pc, #544]	; (8002cf4 <UART_SetConfig+0x268>)
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	0019      	movs	r1, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	4a7f      	ldr	r2, [pc, #508]	; (8002cf8 <UART_SetConfig+0x26c>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	0019      	movs	r1, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a7b      	ldr	r2, [pc, #492]	; (8002cfc <UART_SetConfig+0x270>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d127      	bne.n	8002b62 <UART_SetConfig+0xd6>
 8002b12:	4b7b      	ldr	r3, [pc, #492]	; (8002d00 <UART_SetConfig+0x274>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	2203      	movs	r2, #3
 8002b18:	4013      	ands	r3, r2
 8002b1a:	2b03      	cmp	r3, #3
 8002b1c:	d00d      	beq.n	8002b3a <UART_SetConfig+0xae>
 8002b1e:	d81b      	bhi.n	8002b58 <UART_SetConfig+0xcc>
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d014      	beq.n	8002b4e <UART_SetConfig+0xc2>
 8002b24:	d818      	bhi.n	8002b58 <UART_SetConfig+0xcc>
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d002      	beq.n	8002b30 <UART_SetConfig+0xa4>
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d00a      	beq.n	8002b44 <UART_SetConfig+0xb8>
 8002b2e:	e013      	b.n	8002b58 <UART_SetConfig+0xcc>
 8002b30:	231f      	movs	r3, #31
 8002b32:	18fb      	adds	r3, r7, r3
 8002b34:	2200      	movs	r2, #0
 8002b36:	701a      	strb	r2, [r3, #0]
 8002b38:	e021      	b.n	8002b7e <UART_SetConfig+0xf2>
 8002b3a:	231f      	movs	r3, #31
 8002b3c:	18fb      	adds	r3, r7, r3
 8002b3e:	2202      	movs	r2, #2
 8002b40:	701a      	strb	r2, [r3, #0]
 8002b42:	e01c      	b.n	8002b7e <UART_SetConfig+0xf2>
 8002b44:	231f      	movs	r3, #31
 8002b46:	18fb      	adds	r3, r7, r3
 8002b48:	2204      	movs	r2, #4
 8002b4a:	701a      	strb	r2, [r3, #0]
 8002b4c:	e017      	b.n	8002b7e <UART_SetConfig+0xf2>
 8002b4e:	231f      	movs	r3, #31
 8002b50:	18fb      	adds	r3, r7, r3
 8002b52:	2208      	movs	r2, #8
 8002b54:	701a      	strb	r2, [r3, #0]
 8002b56:	e012      	b.n	8002b7e <UART_SetConfig+0xf2>
 8002b58:	231f      	movs	r3, #31
 8002b5a:	18fb      	adds	r3, r7, r3
 8002b5c:	2210      	movs	r2, #16
 8002b5e:	701a      	strb	r2, [r3, #0]
 8002b60:	e00d      	b.n	8002b7e <UART_SetConfig+0xf2>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a67      	ldr	r2, [pc, #412]	; (8002d04 <UART_SetConfig+0x278>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d104      	bne.n	8002b76 <UART_SetConfig+0xea>
 8002b6c:	231f      	movs	r3, #31
 8002b6e:	18fb      	adds	r3, r7, r3
 8002b70:	2200      	movs	r2, #0
 8002b72:	701a      	strb	r2, [r3, #0]
 8002b74:	e003      	b.n	8002b7e <UART_SetConfig+0xf2>
 8002b76:	231f      	movs	r3, #31
 8002b78:	18fb      	adds	r3, r7, r3
 8002b7a:	2210      	movs	r2, #16
 8002b7c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69da      	ldr	r2, [r3, #28]
 8002b82:	2380      	movs	r3, #128	; 0x80
 8002b84:	021b      	lsls	r3, r3, #8
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d15d      	bne.n	8002c46 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8002b8a:	231f      	movs	r3, #31
 8002b8c:	18fb      	adds	r3, r7, r3
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d015      	beq.n	8002bc0 <UART_SetConfig+0x134>
 8002b94:	dc18      	bgt.n	8002bc8 <UART_SetConfig+0x13c>
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d00d      	beq.n	8002bb6 <UART_SetConfig+0x12a>
 8002b9a:	dc15      	bgt.n	8002bc8 <UART_SetConfig+0x13c>
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d002      	beq.n	8002ba6 <UART_SetConfig+0x11a>
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d005      	beq.n	8002bb0 <UART_SetConfig+0x124>
 8002ba4:	e010      	b.n	8002bc8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ba6:	f7ff fad3 	bl	8002150 <HAL_RCC_GetPCLK1Freq>
 8002baa:	0003      	movs	r3, r0
 8002bac:	61bb      	str	r3, [r7, #24]
        break;
 8002bae:	e012      	b.n	8002bd6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bb0:	4b55      	ldr	r3, [pc, #340]	; (8002d08 <UART_SetConfig+0x27c>)
 8002bb2:	61bb      	str	r3, [r7, #24]
        break;
 8002bb4:	e00f      	b.n	8002bd6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bb6:	f7ff fa5d 	bl	8002074 <HAL_RCC_GetSysClockFreq>
 8002bba:	0003      	movs	r3, r0
 8002bbc:	61bb      	str	r3, [r7, #24]
        break;
 8002bbe:	e00a      	b.n	8002bd6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bc0:	2380      	movs	r3, #128	; 0x80
 8002bc2:	021b      	lsls	r3, r3, #8
 8002bc4:	61bb      	str	r3, [r7, #24]
        break;
 8002bc6:	e006      	b.n	8002bd6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002bcc:	231e      	movs	r3, #30
 8002bce:	18fb      	adds	r3, r7, r3
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	701a      	strb	r2, [r3, #0]
        break;
 8002bd4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d100      	bne.n	8002bde <UART_SetConfig+0x152>
 8002bdc:	e07b      	b.n	8002cd6 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	005a      	lsls	r2, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	085b      	lsrs	r3, r3, #1
 8002be8:	18d2      	adds	r2, r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	0019      	movs	r1, r3
 8002bf0:	0010      	movs	r0, r2
 8002bf2:	f7fd fa89 	bl	8000108 <__udivsi3>
 8002bf6:	0003      	movs	r3, r0
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	2b0f      	cmp	r3, #15
 8002c00:	d91c      	bls.n	8002c3c <UART_SetConfig+0x1b0>
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	2380      	movs	r3, #128	; 0x80
 8002c06:	025b      	lsls	r3, r3, #9
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d217      	bcs.n	8002c3c <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	200e      	movs	r0, #14
 8002c12:	183b      	adds	r3, r7, r0
 8002c14:	210f      	movs	r1, #15
 8002c16:	438a      	bics	r2, r1
 8002c18:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	085b      	lsrs	r3, r3, #1
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	2207      	movs	r2, #7
 8002c22:	4013      	ands	r3, r2
 8002c24:	b299      	uxth	r1, r3
 8002c26:	183b      	adds	r3, r7, r0
 8002c28:	183a      	adds	r2, r7, r0
 8002c2a:	8812      	ldrh	r2, [r2, #0]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	183a      	adds	r2, r7, r0
 8002c36:	8812      	ldrh	r2, [r2, #0]
 8002c38:	60da      	str	r2, [r3, #12]
 8002c3a:	e04c      	b.n	8002cd6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002c3c:	231e      	movs	r3, #30
 8002c3e:	18fb      	adds	r3, r7, r3
 8002c40:	2201      	movs	r2, #1
 8002c42:	701a      	strb	r2, [r3, #0]
 8002c44:	e047      	b.n	8002cd6 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c46:	231f      	movs	r3, #31
 8002c48:	18fb      	adds	r3, r7, r3
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d015      	beq.n	8002c7c <UART_SetConfig+0x1f0>
 8002c50:	dc18      	bgt.n	8002c84 <UART_SetConfig+0x1f8>
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d00d      	beq.n	8002c72 <UART_SetConfig+0x1e6>
 8002c56:	dc15      	bgt.n	8002c84 <UART_SetConfig+0x1f8>
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d002      	beq.n	8002c62 <UART_SetConfig+0x1d6>
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d005      	beq.n	8002c6c <UART_SetConfig+0x1e0>
 8002c60:	e010      	b.n	8002c84 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c62:	f7ff fa75 	bl	8002150 <HAL_RCC_GetPCLK1Freq>
 8002c66:	0003      	movs	r3, r0
 8002c68:	61bb      	str	r3, [r7, #24]
        break;
 8002c6a:	e012      	b.n	8002c92 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c6c:	4b26      	ldr	r3, [pc, #152]	; (8002d08 <UART_SetConfig+0x27c>)
 8002c6e:	61bb      	str	r3, [r7, #24]
        break;
 8002c70:	e00f      	b.n	8002c92 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c72:	f7ff f9ff 	bl	8002074 <HAL_RCC_GetSysClockFreq>
 8002c76:	0003      	movs	r3, r0
 8002c78:	61bb      	str	r3, [r7, #24]
        break;
 8002c7a:	e00a      	b.n	8002c92 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c7c:	2380      	movs	r3, #128	; 0x80
 8002c7e:	021b      	lsls	r3, r3, #8
 8002c80:	61bb      	str	r3, [r7, #24]
        break;
 8002c82:	e006      	b.n	8002c92 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c88:	231e      	movs	r3, #30
 8002c8a:	18fb      	adds	r3, r7, r3
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	701a      	strb	r2, [r3, #0]
        break;
 8002c90:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d01e      	beq.n	8002cd6 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	085a      	lsrs	r2, r3, #1
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	18d2      	adds	r2, r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	0019      	movs	r1, r3
 8002ca8:	0010      	movs	r0, r2
 8002caa:	f7fd fa2d 	bl	8000108 <__udivsi3>
 8002cae:	0003      	movs	r3, r0
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	2b0f      	cmp	r3, #15
 8002cb8:	d909      	bls.n	8002cce <UART_SetConfig+0x242>
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	2380      	movs	r3, #128	; 0x80
 8002cbe:	025b      	lsls	r3, r3, #9
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d204      	bcs.n	8002cce <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	60da      	str	r2, [r3, #12]
 8002ccc:	e003      	b.n	8002cd6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002cce:	231e      	movs	r3, #30
 8002cd0:	18fb      	adds	r3, r7, r3
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002ce2:	231e      	movs	r3, #30
 8002ce4:	18fb      	adds	r3, r7, r3
 8002ce6:	781b      	ldrb	r3, [r3, #0]
}
 8002ce8:	0018      	movs	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	b008      	add	sp, #32
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	ffff69f3 	.word	0xffff69f3
 8002cf4:	ffffcfff 	.word	0xffffcfff
 8002cf8:	fffff4ff 	.word	0xfffff4ff
 8002cfc:	40013800 	.word	0x40013800
 8002d00:	40021000 	.word	0x40021000
 8002d04:	40004400 	.word	0x40004400
 8002d08:	007a1200 	.word	0x007a1200

08002d0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	2201      	movs	r2, #1
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d00b      	beq.n	8002d36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	4a4a      	ldr	r2, [pc, #296]	; (8002e50 <UART_AdvFeatureConfig+0x144>)
 8002d26:	4013      	ands	r3, r2
 8002d28:	0019      	movs	r1, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d00b      	beq.n	8002d58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	4a43      	ldr	r2, [pc, #268]	; (8002e54 <UART_AdvFeatureConfig+0x148>)
 8002d48:	4013      	ands	r3, r2
 8002d4a:	0019      	movs	r1, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	2204      	movs	r2, #4
 8002d5e:	4013      	ands	r3, r2
 8002d60:	d00b      	beq.n	8002d7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	4a3b      	ldr	r2, [pc, #236]	; (8002e58 <UART_AdvFeatureConfig+0x14c>)
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	0019      	movs	r1, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	2208      	movs	r2, #8
 8002d80:	4013      	ands	r3, r2
 8002d82:	d00b      	beq.n	8002d9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	4a34      	ldr	r2, [pc, #208]	; (8002e5c <UART_AdvFeatureConfig+0x150>)
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	0019      	movs	r1, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	2210      	movs	r2, #16
 8002da2:	4013      	ands	r3, r2
 8002da4:	d00b      	beq.n	8002dbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	4a2c      	ldr	r2, [pc, #176]	; (8002e60 <UART_AdvFeatureConfig+0x154>)
 8002dae:	4013      	ands	r3, r2
 8002db0:	0019      	movs	r1, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	d00b      	beq.n	8002de0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	4a25      	ldr	r2, [pc, #148]	; (8002e64 <UART_AdvFeatureConfig+0x158>)
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	0019      	movs	r1, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	2240      	movs	r2, #64	; 0x40
 8002de6:	4013      	ands	r3, r2
 8002de8:	d01d      	beq.n	8002e26 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	4a1d      	ldr	r2, [pc, #116]	; (8002e68 <UART_AdvFeatureConfig+0x15c>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	0019      	movs	r1, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e06:	2380      	movs	r3, #128	; 0x80
 8002e08:	035b      	lsls	r3, r3, #13
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d10b      	bne.n	8002e26 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	4a15      	ldr	r2, [pc, #84]	; (8002e6c <UART_AdvFeatureConfig+0x160>)
 8002e16:	4013      	ands	r3, r2
 8002e18:	0019      	movs	r1, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	2280      	movs	r2, #128	; 0x80
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	d00b      	beq.n	8002e48 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	4a0e      	ldr	r2, [pc, #56]	; (8002e70 <UART_AdvFeatureConfig+0x164>)
 8002e38:	4013      	ands	r3, r2
 8002e3a:	0019      	movs	r1, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	605a      	str	r2, [r3, #4]
  }
}
 8002e48:	46c0      	nop			; (mov r8, r8)
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	b002      	add	sp, #8
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	fffdffff 	.word	0xfffdffff
 8002e54:	fffeffff 	.word	0xfffeffff
 8002e58:	fffbffff 	.word	0xfffbffff
 8002e5c:	ffff7fff 	.word	0xffff7fff
 8002e60:	ffffefff 	.word	0xffffefff
 8002e64:	ffffdfff 	.word	0xffffdfff
 8002e68:	ffefffff 	.word	0xffefffff
 8002e6c:	ff9fffff 	.word	0xff9fffff
 8002e70:	fff7ffff 	.word	0xfff7ffff

08002e74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af02      	add	r7, sp, #8
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2280      	movs	r2, #128	; 0x80
 8002e80:	2100      	movs	r1, #0
 8002e82:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e84:	f7fd fe34 	bl	8000af0 <HAL_GetTick>
 8002e88:	0003      	movs	r3, r0
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2208      	movs	r2, #8
 8002e94:	4013      	ands	r3, r2
 8002e96:	2b08      	cmp	r3, #8
 8002e98:	d10c      	bne.n	8002eb4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2280      	movs	r2, #128	; 0x80
 8002e9e:	0391      	lsls	r1, r2, #14
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	4a17      	ldr	r2, [pc, #92]	; (8002f00 <UART_CheckIdleState+0x8c>)
 8002ea4:	9200      	str	r2, [sp, #0]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f000 f82c 	bl	8002f04 <UART_WaitOnFlagUntilTimeout>
 8002eac:	1e03      	subs	r3, r0, #0
 8002eae:	d001      	beq.n	8002eb4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e021      	b.n	8002ef8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2204      	movs	r2, #4
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	d10c      	bne.n	8002edc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2280      	movs	r2, #128	; 0x80
 8002ec6:	03d1      	lsls	r1, r2, #15
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	4a0d      	ldr	r2, [pc, #52]	; (8002f00 <UART_CheckIdleState+0x8c>)
 8002ecc:	9200      	str	r2, [sp, #0]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f000 f818 	bl	8002f04 <UART_WaitOnFlagUntilTimeout>
 8002ed4:	1e03      	subs	r3, r0, #0
 8002ed6:	d001      	beq.n	8002edc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e00d      	b.n	8002ef8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2274      	movs	r2, #116	; 0x74
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	0018      	movs	r0, r3
 8002efa:	46bd      	mov	sp, r7
 8002efc:	b004      	add	sp, #16
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	01ffffff 	.word	0x01ffffff

08002f04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b094      	sub	sp, #80	; 0x50
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	603b      	str	r3, [r7, #0]
 8002f10:	1dfb      	adds	r3, r7, #7
 8002f12:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f14:	e0a3      	b.n	800305e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f18:	3301      	adds	r3, #1
 8002f1a:	d100      	bne.n	8002f1e <UART_WaitOnFlagUntilTimeout+0x1a>
 8002f1c:	e09f      	b.n	800305e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f1e:	f7fd fde7 	bl	8000af0 <HAL_GetTick>
 8002f22:	0002      	movs	r2, r0
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d302      	bcc.n	8002f34 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d13d      	bne.n	8002fb0 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f34:	f3ef 8310 	mrs	r3, PRIMASK
 8002f38:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f3c:	647b      	str	r3, [r7, #68]	; 0x44
 8002f3e:	2301      	movs	r3, #1
 8002f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f44:	f383 8810 	msr	PRIMASK, r3
}
 8002f48:	46c0      	nop			; (mov r8, r8)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	494c      	ldr	r1, [pc, #304]	; (8003088 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002f56:	400a      	ands	r2, r1
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f5c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f60:	f383 8810 	msr	PRIMASK, r3
}
 8002f64:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f66:	f3ef 8310 	mrs	r3, PRIMASK
 8002f6a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f6e:	643b      	str	r3, [r7, #64]	; 0x40
 8002f70:	2301      	movs	r3, #1
 8002f72:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f76:	f383 8810 	msr	PRIMASK, r3
}
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2101      	movs	r1, #1
 8002f88:	438a      	bics	r2, r1
 8002f8a:	609a      	str	r2, [r3, #8]
 8002f8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f92:	f383 8810 	msr	PRIMASK, r3
}
 8002f96:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2274      	movs	r2, #116	; 0x74
 8002fa8:	2100      	movs	r1, #0
 8002faa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e067      	b.n	8003080 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2204      	movs	r2, #4
 8002fb8:	4013      	ands	r3, r2
 8002fba:	d050      	beq.n	800305e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	69da      	ldr	r2, [r3, #28]
 8002fc2:	2380      	movs	r3, #128	; 0x80
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	401a      	ands	r2, r3
 8002fc8:	2380      	movs	r3, #128	; 0x80
 8002fca:	011b      	lsls	r3, r3, #4
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d146      	bne.n	800305e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2280      	movs	r2, #128	; 0x80
 8002fd6:	0112      	lsls	r2, r2, #4
 8002fd8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fda:	f3ef 8310 	mrs	r3, PRIMASK
 8002fde:	613b      	str	r3, [r7, #16]
  return(result);
 8002fe0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f383 8810 	msr	PRIMASK, r3
}
 8002fee:	46c0      	nop			; (mov r8, r8)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4923      	ldr	r1, [pc, #140]	; (8003088 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002ffc:	400a      	ands	r2, r1
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003002:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	f383 8810 	msr	PRIMASK, r3
}
 800300a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800300c:	f3ef 8310 	mrs	r3, PRIMASK
 8003010:	61fb      	str	r3, [r7, #28]
  return(result);
 8003012:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003014:	64bb      	str	r3, [r7, #72]	; 0x48
 8003016:	2301      	movs	r3, #1
 8003018:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800301a:	6a3b      	ldr	r3, [r7, #32]
 800301c:	f383 8810 	msr	PRIMASK, r3
}
 8003020:	46c0      	nop			; (mov r8, r8)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2101      	movs	r1, #1
 800302e:	438a      	bics	r2, r1
 8003030:	609a      	str	r2, [r3, #8]
 8003032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	f383 8810 	msr	PRIMASK, r3
}
 800303c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2220      	movs	r2, #32
 8003042:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2220      	movs	r2, #32
 8003048:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2280      	movs	r2, #128	; 0x80
 800304e:	2120      	movs	r1, #32
 8003050:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2274      	movs	r2, #116	; 0x74
 8003056:	2100      	movs	r1, #0
 8003058:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e010      	b.n	8003080 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	69db      	ldr	r3, [r3, #28]
 8003064:	68ba      	ldr	r2, [r7, #8]
 8003066:	4013      	ands	r3, r2
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	425a      	negs	r2, r3
 800306e:	4153      	adcs	r3, r2
 8003070:	b2db      	uxtb	r3, r3
 8003072:	001a      	movs	r2, r3
 8003074:	1dfb      	adds	r3, r7, #7
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	d100      	bne.n	800307e <UART_WaitOnFlagUntilTimeout+0x17a>
 800307c:	e74b      	b.n	8002f16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	0018      	movs	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	b014      	add	sp, #80	; 0x50
 8003086:	bd80      	pop	{r7, pc}
 8003088:	fffffe5f 	.word	0xfffffe5f

0800308c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b08c      	sub	sp, #48	; 0x30
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	1dbb      	adds	r3, r7, #6
 8003098:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	1dba      	adds	r2, r7, #6
 80030a4:	2158      	movs	r1, #88	; 0x58
 80030a6:	8812      	ldrh	r2, [r2, #0]
 80030a8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	1dba      	adds	r2, r7, #6
 80030ae:	215a      	movs	r1, #90	; 0x5a
 80030b0:	8812      	ldrh	r2, [r2, #0]
 80030b2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	2380      	movs	r3, #128	; 0x80
 80030c0:	015b      	lsls	r3, r3, #5
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d10d      	bne.n	80030e2 <UART_Start_Receive_IT+0x56>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d104      	bne.n	80030d8 <UART_Start_Receive_IT+0x4c>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	225c      	movs	r2, #92	; 0x5c
 80030d2:	4939      	ldr	r1, [pc, #228]	; (80031b8 <UART_Start_Receive_IT+0x12c>)
 80030d4:	5299      	strh	r1, [r3, r2]
 80030d6:	e01a      	b.n	800310e <UART_Start_Receive_IT+0x82>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	225c      	movs	r2, #92	; 0x5c
 80030dc:	21ff      	movs	r1, #255	; 0xff
 80030de:	5299      	strh	r1, [r3, r2]
 80030e0:	e015      	b.n	800310e <UART_Start_Receive_IT+0x82>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10d      	bne.n	8003106 <UART_Start_Receive_IT+0x7a>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d104      	bne.n	80030fc <UART_Start_Receive_IT+0x70>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	225c      	movs	r2, #92	; 0x5c
 80030f6:	21ff      	movs	r1, #255	; 0xff
 80030f8:	5299      	strh	r1, [r3, r2]
 80030fa:	e008      	b.n	800310e <UART_Start_Receive_IT+0x82>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	225c      	movs	r2, #92	; 0x5c
 8003100:	217f      	movs	r1, #127	; 0x7f
 8003102:	5299      	strh	r1, [r3, r2]
 8003104:	e003      	b.n	800310e <UART_Start_Receive_IT+0x82>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	225c      	movs	r2, #92	; 0x5c
 800310a:	2100      	movs	r1, #0
 800310c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2280      	movs	r2, #128	; 0x80
 8003112:	2100      	movs	r1, #0
 8003114:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2222      	movs	r2, #34	; 0x22
 800311a:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800311c:	f3ef 8310 	mrs	r3, PRIMASK
 8003120:	61fb      	str	r3, [r7, #28]
  return(result);
 8003122:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003124:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003126:	2301      	movs	r3, #1
 8003128:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800312a:	6a3b      	ldr	r3, [r7, #32]
 800312c:	f383 8810 	msr	PRIMASK, r3
}
 8003130:	46c0      	nop			; (mov r8, r8)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2101      	movs	r1, #1
 800313e:	430a      	orrs	r2, r1
 8003140:	609a      	str	r2, [r3, #8]
 8003142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	f383 8810 	msr	PRIMASK, r3
}
 800314c:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	2380      	movs	r3, #128	; 0x80
 8003154:	015b      	lsls	r3, r3, #5
 8003156:	429a      	cmp	r2, r3
 8003158:	d107      	bne.n	800316a <UART_Start_Receive_IT+0xde>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d103      	bne.n	800316a <UART_Start_Receive_IT+0xde>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	4a15      	ldr	r2, [pc, #84]	; (80031bc <UART_Start_Receive_IT+0x130>)
 8003166:	665a      	str	r2, [r3, #100]	; 0x64
 8003168:	e002      	b.n	8003170 <UART_Start_Receive_IT+0xe4>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4a14      	ldr	r2, [pc, #80]	; (80031c0 <UART_Start_Receive_IT+0x134>)
 800316e:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2274      	movs	r2, #116	; 0x74
 8003174:	2100      	movs	r1, #0
 8003176:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003178:	f3ef 8310 	mrs	r3, PRIMASK
 800317c:	613b      	str	r3, [r7, #16]
  return(result);
 800317e:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003180:	62bb      	str	r3, [r7, #40]	; 0x28
 8003182:	2301      	movs	r3, #1
 8003184:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f383 8810 	msr	PRIMASK, r3
}
 800318c:	46c0      	nop			; (mov r8, r8)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2190      	movs	r1, #144	; 0x90
 800319a:	0049      	lsls	r1, r1, #1
 800319c:	430a      	orrs	r2, r1
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	f383 8810 	msr	PRIMASK, r3
}
 80031aa:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	0018      	movs	r0, r3
 80031b0:	46bd      	mov	sp, r7
 80031b2:	b00c      	add	sp, #48	; 0x30
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	000001ff 	.word	0x000001ff
 80031bc:	08003475 	.word	0x08003475
 80031c0:	0800330d 	.word	0x0800330d

080031c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b08e      	sub	sp, #56	; 0x38
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031cc:	f3ef 8310 	mrs	r3, PRIMASK
 80031d0:	617b      	str	r3, [r7, #20]
  return(result);
 80031d2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031d4:	637b      	str	r3, [r7, #52]	; 0x34
 80031d6:	2301      	movs	r3, #1
 80031d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	f383 8810 	msr	PRIMASK, r3
}
 80031e0:	46c0      	nop			; (mov r8, r8)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4925      	ldr	r1, [pc, #148]	; (8003284 <UART_EndRxTransfer+0xc0>)
 80031ee:	400a      	ands	r2, r1
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	f383 8810 	msr	PRIMASK, r3
}
 80031fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003202:	623b      	str	r3, [r7, #32]
  return(result);
 8003204:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003206:	633b      	str	r3, [r7, #48]	; 0x30
 8003208:	2301      	movs	r3, #1
 800320a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	f383 8810 	msr	PRIMASK, r3
}
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2101      	movs	r1, #1
 8003220:	438a      	bics	r2, r1
 8003222:	609a      	str	r2, [r3, #8]
 8003224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003226:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322a:	f383 8810 	msr	PRIMASK, r3
}
 800322e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003234:	2b01      	cmp	r3, #1
 8003236:	d118      	bne.n	800326a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003238:	f3ef 8310 	mrs	r3, PRIMASK
 800323c:	60bb      	str	r3, [r7, #8]
  return(result);
 800323e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003240:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003242:	2301      	movs	r3, #1
 8003244:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f383 8810 	msr	PRIMASK, r3
}
 800324c:	46c0      	nop			; (mov r8, r8)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2110      	movs	r1, #16
 800325a:	438a      	bics	r2, r1
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003260:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	f383 8810 	msr	PRIMASK, r3
}
 8003268:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2220      	movs	r2, #32
 800326e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800327c:	46c0      	nop			; (mov r8, r8)
 800327e:	46bd      	mov	sp, r7
 8003280:	b00e      	add	sp, #56	; 0x38
 8003282:	bd80      	pop	{r7, pc}
 8003284:	fffffedf 	.word	0xfffffedf

08003288 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	225a      	movs	r2, #90	; 0x5a
 800329a:	2100      	movs	r1, #0
 800329c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2252      	movs	r2, #82	; 0x52
 80032a2:	2100      	movs	r1, #0
 80032a4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	0018      	movs	r0, r3
 80032aa:	f7ff fbdb 	bl	8002a64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032ae:	46c0      	nop			; (mov r8, r8)
 80032b0:	46bd      	mov	sp, r7
 80032b2:	b004      	add	sp, #16
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b086      	sub	sp, #24
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032be:	f3ef 8310 	mrs	r3, PRIMASK
 80032c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80032c4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	2301      	movs	r3, #1
 80032ca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f383 8810 	msr	PRIMASK, r3
}
 80032d2:	46c0      	nop			; (mov r8, r8)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2140      	movs	r1, #64	; 0x40
 80032e0:	438a      	bics	r2, r1
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	f383 8810 	msr	PRIMASK, r3
}
 80032ee:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2220      	movs	r2, #32
 80032f4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	0018      	movs	r0, r3
 8003300:	f7ff fba8 	bl	8002a54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003304:	46c0      	nop			; (mov r8, r8)
 8003306:	46bd      	mov	sp, r7
 8003308:	b006      	add	sp, #24
 800330a:	bd80      	pop	{r7, pc}

0800330c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b090      	sub	sp, #64	; 0x40
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003314:	203e      	movs	r0, #62	; 0x3e
 8003316:	183b      	adds	r3, r7, r0
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	215c      	movs	r1, #92	; 0x5c
 800331c:	5a52      	ldrh	r2, [r2, r1]
 800331e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003324:	2b22      	cmp	r3, #34	; 0x22
 8003326:	d000      	beq.n	800332a <UART_RxISR_8BIT+0x1e>
 8003328:	e095      	b.n	8003456 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	213c      	movs	r1, #60	; 0x3c
 8003330:	187b      	adds	r3, r7, r1
 8003332:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003334:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003336:	187b      	adds	r3, r7, r1
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	b2da      	uxtb	r2, r3
 800333c:	183b      	adds	r3, r7, r0
 800333e:	881b      	ldrh	r3, [r3, #0]
 8003340:	b2d9      	uxtb	r1, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003346:	400a      	ands	r2, r1
 8003348:	b2d2      	uxtb	r2, r2
 800334a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003350:	1c5a      	adds	r2, r3, #1
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	225a      	movs	r2, #90	; 0x5a
 800335a:	5a9b      	ldrh	r3, [r3, r2]
 800335c:	b29b      	uxth	r3, r3
 800335e:	3b01      	subs	r3, #1
 8003360:	b299      	uxth	r1, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	225a      	movs	r2, #90	; 0x5a
 8003366:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	225a      	movs	r2, #90	; 0x5a
 800336c:	5a9b      	ldrh	r3, [r3, r2]
 800336e:	b29b      	uxth	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d178      	bne.n	8003466 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003374:	f3ef 8310 	mrs	r3, PRIMASK
 8003378:	61bb      	str	r3, [r7, #24]
  return(result);
 800337a:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800337c:	63bb      	str	r3, [r7, #56]	; 0x38
 800337e:	2301      	movs	r3, #1
 8003380:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	f383 8810 	msr	PRIMASK, r3
}
 8003388:	46c0      	nop			; (mov r8, r8)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4936      	ldr	r1, [pc, #216]	; (8003470 <UART_RxISR_8BIT+0x164>)
 8003396:	400a      	ands	r2, r1
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	f383 8810 	msr	PRIMASK, r3
}
 80033a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033a6:	f3ef 8310 	mrs	r3, PRIMASK
 80033aa:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ae:	637b      	str	r3, [r7, #52]	; 0x34
 80033b0:	2301      	movs	r3, #1
 80033b2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b6:	f383 8810 	msr	PRIMASK, r3
}
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2101      	movs	r1, #1
 80033c8:	438a      	bics	r2, r1
 80033ca:	609a      	str	r2, [r3, #8]
 80033cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d2:	f383 8810 	msr	PRIMASK, r3
}
 80033d6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2220      	movs	r2, #32
 80033dc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d12f      	bne.n	800344c <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033f2:	f3ef 8310 	mrs	r3, PRIMASK
 80033f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80033f8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033fa:	633b      	str	r3, [r7, #48]	; 0x30
 80033fc:	2301      	movs	r3, #1
 80033fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	f383 8810 	msr	PRIMASK, r3
}
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2110      	movs	r1, #16
 8003414:	438a      	bics	r2, r1
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f383 8810 	msr	PRIMASK, r3
}
 8003422:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	2210      	movs	r2, #16
 800342c:	4013      	ands	r3, r2
 800342e:	2b10      	cmp	r3, #16
 8003430:	d103      	bne.n	800343a <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2210      	movs	r2, #16
 8003438:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2258      	movs	r2, #88	; 0x58
 800343e:	5a9a      	ldrh	r2, [r3, r2]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	0011      	movs	r1, r2
 8003444:	0018      	movs	r0, r3
 8003446:	f7ff fb15 	bl	8002a74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800344a:	e00c      	b.n	8003466 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	0018      	movs	r0, r3
 8003450:	f7fc ffd4 	bl	80003fc <HAL_UART_RxCpltCallback>
}
 8003454:	e007      	b.n	8003466 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	699a      	ldr	r2, [r3, #24]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2108      	movs	r1, #8
 8003462:	430a      	orrs	r2, r1
 8003464:	619a      	str	r2, [r3, #24]
}
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	46bd      	mov	sp, r7
 800346a:	b010      	add	sp, #64	; 0x40
 800346c:	bd80      	pop	{r7, pc}
 800346e:	46c0      	nop			; (mov r8, r8)
 8003470:	fffffedf 	.word	0xfffffedf

08003474 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b090      	sub	sp, #64	; 0x40
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800347c:	203e      	movs	r0, #62	; 0x3e
 800347e:	183b      	adds	r3, r7, r0
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	215c      	movs	r1, #92	; 0x5c
 8003484:	5a52      	ldrh	r2, [r2, r1]
 8003486:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800348c:	2b22      	cmp	r3, #34	; 0x22
 800348e:	d000      	beq.n	8003492 <UART_RxISR_16BIT+0x1e>
 8003490:	e095      	b.n	80035be <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	213c      	movs	r1, #60	; 0x3c
 8003498:	187b      	adds	r3, r7, r1
 800349a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800349c:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a2:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80034a4:	187b      	adds	r3, r7, r1
 80034a6:	183a      	adds	r2, r7, r0
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	8812      	ldrh	r2, [r2, #0]
 80034ac:	4013      	ands	r3, r2
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b8:	1c9a      	adds	r2, r3, #2
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	225a      	movs	r2, #90	; 0x5a
 80034c2:	5a9b      	ldrh	r3, [r3, r2]
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b299      	uxth	r1, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	225a      	movs	r2, #90	; 0x5a
 80034ce:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	225a      	movs	r2, #90	; 0x5a
 80034d4:	5a9b      	ldrh	r3, [r3, r2]
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d178      	bne.n	80035ce <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034dc:	f3ef 8310 	mrs	r3, PRIMASK
 80034e0:	617b      	str	r3, [r7, #20]
  return(result);
 80034e2:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034e4:	637b      	str	r3, [r7, #52]	; 0x34
 80034e6:	2301      	movs	r3, #1
 80034e8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	f383 8810 	msr	PRIMASK, r3
}
 80034f0:	46c0      	nop			; (mov r8, r8)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4936      	ldr	r1, [pc, #216]	; (80035d8 <UART_RxISR_16BIT+0x164>)
 80034fe:	400a      	ands	r2, r1
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003504:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	f383 8810 	msr	PRIMASK, r3
}
 800350c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800350e:	f3ef 8310 	mrs	r3, PRIMASK
 8003512:	623b      	str	r3, [r7, #32]
  return(result);
 8003514:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003516:	633b      	str	r3, [r7, #48]	; 0x30
 8003518:	2301      	movs	r3, #1
 800351a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	f383 8810 	msr	PRIMASK, r3
}
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689a      	ldr	r2, [r3, #8]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2101      	movs	r1, #1
 8003530:	438a      	bics	r2, r1
 8003532:	609a      	str	r2, [r3, #8]
 8003534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003536:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353a:	f383 8810 	msr	PRIMASK, r3
}
 800353e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2220      	movs	r2, #32
 8003544:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003550:	2b01      	cmp	r3, #1
 8003552:	d12f      	bne.n	80035b4 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800355a:	f3ef 8310 	mrs	r3, PRIMASK
 800355e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003560:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003562:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003564:	2301      	movs	r3, #1
 8003566:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f383 8810 	msr	PRIMASK, r3
}
 800356e:	46c0      	nop			; (mov r8, r8)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2110      	movs	r1, #16
 800357c:	438a      	bics	r2, r1
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003582:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	f383 8810 	msr	PRIMASK, r3
}
 800358a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	2210      	movs	r2, #16
 8003594:	4013      	ands	r3, r2
 8003596:	2b10      	cmp	r3, #16
 8003598:	d103      	bne.n	80035a2 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2210      	movs	r2, #16
 80035a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2258      	movs	r2, #88	; 0x58
 80035a6:	5a9a      	ldrh	r2, [r3, r2]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	0011      	movs	r1, r2
 80035ac:	0018      	movs	r0, r3
 80035ae:	f7ff fa61 	bl	8002a74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80035b2:	e00c      	b.n	80035ce <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	0018      	movs	r0, r3
 80035b8:	f7fc ff20 	bl	80003fc <HAL_UART_RxCpltCallback>
}
 80035bc:	e007      	b.n	80035ce <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	699a      	ldr	r2, [r3, #24]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2108      	movs	r1, #8
 80035ca:	430a      	orrs	r2, r1
 80035cc:	619a      	str	r2, [r3, #24]
}
 80035ce:	46c0      	nop			; (mov r8, r8)
 80035d0:	46bd      	mov	sp, r7
 80035d2:	b010      	add	sp, #64	; 0x40
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	fffffedf 	.word	0xfffffedf

080035dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80035e4:	46c0      	nop			; (mov r8, r8)
 80035e6:	46bd      	mov	sp, r7
 80035e8:	b002      	add	sp, #8
 80035ea:	bd80      	pop	{r7, pc}

080035ec <__libc_init_array>:
 80035ec:	b570      	push	{r4, r5, r6, lr}
 80035ee:	2600      	movs	r6, #0
 80035f0:	4d0c      	ldr	r5, [pc, #48]	; (8003624 <__libc_init_array+0x38>)
 80035f2:	4c0d      	ldr	r4, [pc, #52]	; (8003628 <__libc_init_array+0x3c>)
 80035f4:	1b64      	subs	r4, r4, r5
 80035f6:	10a4      	asrs	r4, r4, #2
 80035f8:	42a6      	cmp	r6, r4
 80035fa:	d109      	bne.n	8003610 <__libc_init_array+0x24>
 80035fc:	2600      	movs	r6, #0
 80035fe:	f000 f821 	bl	8003644 <_init>
 8003602:	4d0a      	ldr	r5, [pc, #40]	; (800362c <__libc_init_array+0x40>)
 8003604:	4c0a      	ldr	r4, [pc, #40]	; (8003630 <__libc_init_array+0x44>)
 8003606:	1b64      	subs	r4, r4, r5
 8003608:	10a4      	asrs	r4, r4, #2
 800360a:	42a6      	cmp	r6, r4
 800360c:	d105      	bne.n	800361a <__libc_init_array+0x2e>
 800360e:	bd70      	pop	{r4, r5, r6, pc}
 8003610:	00b3      	lsls	r3, r6, #2
 8003612:	58eb      	ldr	r3, [r5, r3]
 8003614:	4798      	blx	r3
 8003616:	3601      	adds	r6, #1
 8003618:	e7ee      	b.n	80035f8 <__libc_init_array+0xc>
 800361a:	00b3      	lsls	r3, r6, #2
 800361c:	58eb      	ldr	r3, [r5, r3]
 800361e:	4798      	blx	r3
 8003620:	3601      	adds	r6, #1
 8003622:	e7f2      	b.n	800360a <__libc_init_array+0x1e>
 8003624:	08003694 	.word	0x08003694
 8003628:	08003694 	.word	0x08003694
 800362c:	08003694 	.word	0x08003694
 8003630:	08003698 	.word	0x08003698

08003634 <memset>:
 8003634:	0003      	movs	r3, r0
 8003636:	1882      	adds	r2, r0, r2
 8003638:	4293      	cmp	r3, r2
 800363a:	d100      	bne.n	800363e <memset+0xa>
 800363c:	4770      	bx	lr
 800363e:	7019      	strb	r1, [r3, #0]
 8003640:	3301      	adds	r3, #1
 8003642:	e7f9      	b.n	8003638 <memset+0x4>

08003644 <_init>:
 8003644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003646:	46c0      	nop			; (mov r8, r8)
 8003648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800364a:	bc08      	pop	{r3}
 800364c:	469e      	mov	lr, r3
 800364e:	4770      	bx	lr

08003650 <_fini>:
 8003650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003652:	46c0      	nop			; (mov r8, r8)
 8003654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003656:	bc08      	pop	{r3}
 8003658:	469e      	mov	lr, r3
 800365a:	4770      	bx	lr
