
pot_read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005da0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08005e60  08005e60  00015e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fd0  08005fd0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005fd0  08005fd0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005fd0  08005fd0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fd0  08005fd0  00015fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fd4  08005fd4  00015fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  08005fe4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08005fe4  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009dfe  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001973  00000000  00000000  00029e32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  0002b7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  0002c210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000115ae  00000000  00000000  0002cbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b8c9  00000000  00000000  0003e15e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006b80c  00000000  00000000  00049a27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b5233  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002824  00000000  00000000  000b5284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005e48 	.word	0x08005e48

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08005e48 	.word	0x08005e48

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_f2uiz>:
 8000220:	219e      	movs	r1, #158	; 0x9e
 8000222:	b510      	push	{r4, lr}
 8000224:	05c9      	lsls	r1, r1, #23
 8000226:	1c04      	adds	r4, r0, #0
 8000228:	f002 f96e 	bl	8002508 <__aeabi_fcmpge>
 800022c:	2800      	cmp	r0, #0
 800022e:	d103      	bne.n	8000238 <__aeabi_f2uiz+0x18>
 8000230:	1c20      	adds	r0, r4, #0
 8000232:	f000 fbf9 	bl	8000a28 <__aeabi_f2iz>
 8000236:	bd10      	pop	{r4, pc}
 8000238:	219e      	movs	r1, #158	; 0x9e
 800023a:	1c20      	adds	r0, r4, #0
 800023c:	05c9      	lsls	r1, r1, #23
 800023e:	f000 fa45 	bl	80006cc <__aeabi_fsub>
 8000242:	f000 fbf1 	bl	8000a28 <__aeabi_f2iz>
 8000246:	2380      	movs	r3, #128	; 0x80
 8000248:	061b      	lsls	r3, r3, #24
 800024a:	469c      	mov	ip, r3
 800024c:	4460      	add	r0, ip
 800024e:	e7f2      	b.n	8000236 <__aeabi_f2uiz+0x16>

08000250 <__aeabi_fdiv>:
 8000250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000252:	464f      	mov	r7, r9
 8000254:	4646      	mov	r6, r8
 8000256:	46d6      	mov	lr, sl
 8000258:	0245      	lsls	r5, r0, #9
 800025a:	b5c0      	push	{r6, r7, lr}
 800025c:	0047      	lsls	r7, r0, #1
 800025e:	1c0c      	adds	r4, r1, #0
 8000260:	0a6d      	lsrs	r5, r5, #9
 8000262:	0e3f      	lsrs	r7, r7, #24
 8000264:	0fc6      	lsrs	r6, r0, #31
 8000266:	2f00      	cmp	r7, #0
 8000268:	d100      	bne.n	800026c <__aeabi_fdiv+0x1c>
 800026a:	e070      	b.n	800034e <__aeabi_fdiv+0xfe>
 800026c:	2fff      	cmp	r7, #255	; 0xff
 800026e:	d100      	bne.n	8000272 <__aeabi_fdiv+0x22>
 8000270:	e075      	b.n	800035e <__aeabi_fdiv+0x10e>
 8000272:	00eb      	lsls	r3, r5, #3
 8000274:	2580      	movs	r5, #128	; 0x80
 8000276:	04ed      	lsls	r5, r5, #19
 8000278:	431d      	orrs	r5, r3
 800027a:	2300      	movs	r3, #0
 800027c:	4699      	mov	r9, r3
 800027e:	469a      	mov	sl, r3
 8000280:	3f7f      	subs	r7, #127	; 0x7f
 8000282:	0260      	lsls	r0, r4, #9
 8000284:	0a43      	lsrs	r3, r0, #9
 8000286:	4698      	mov	r8, r3
 8000288:	0063      	lsls	r3, r4, #1
 800028a:	0e1b      	lsrs	r3, r3, #24
 800028c:	0fe4      	lsrs	r4, r4, #31
 800028e:	2b00      	cmp	r3, #0
 8000290:	d04e      	beq.n	8000330 <__aeabi_fdiv+0xe0>
 8000292:	2bff      	cmp	r3, #255	; 0xff
 8000294:	d046      	beq.n	8000324 <__aeabi_fdiv+0xd4>
 8000296:	4642      	mov	r2, r8
 8000298:	00d0      	lsls	r0, r2, #3
 800029a:	2280      	movs	r2, #128	; 0x80
 800029c:	04d2      	lsls	r2, r2, #19
 800029e:	4302      	orrs	r2, r0
 80002a0:	4690      	mov	r8, r2
 80002a2:	2200      	movs	r2, #0
 80002a4:	3b7f      	subs	r3, #127	; 0x7f
 80002a6:	0031      	movs	r1, r6
 80002a8:	1aff      	subs	r7, r7, r3
 80002aa:	464b      	mov	r3, r9
 80002ac:	4061      	eors	r1, r4
 80002ae:	b2c9      	uxtb	r1, r1
 80002b0:	4313      	orrs	r3, r2
 80002b2:	2b0f      	cmp	r3, #15
 80002b4:	d900      	bls.n	80002b8 <__aeabi_fdiv+0x68>
 80002b6:	e0b5      	b.n	8000424 <__aeabi_fdiv+0x1d4>
 80002b8:	486e      	ldr	r0, [pc, #440]	; (8000474 <__aeabi_fdiv+0x224>)
 80002ba:	009b      	lsls	r3, r3, #2
 80002bc:	58c3      	ldr	r3, [r0, r3]
 80002be:	469f      	mov	pc, r3
 80002c0:	2300      	movs	r3, #0
 80002c2:	4698      	mov	r8, r3
 80002c4:	0026      	movs	r6, r4
 80002c6:	4645      	mov	r5, r8
 80002c8:	4692      	mov	sl, r2
 80002ca:	4653      	mov	r3, sl
 80002cc:	2b02      	cmp	r3, #2
 80002ce:	d100      	bne.n	80002d2 <__aeabi_fdiv+0x82>
 80002d0:	e089      	b.n	80003e6 <__aeabi_fdiv+0x196>
 80002d2:	2b03      	cmp	r3, #3
 80002d4:	d100      	bne.n	80002d8 <__aeabi_fdiv+0x88>
 80002d6:	e09e      	b.n	8000416 <__aeabi_fdiv+0x1c6>
 80002d8:	2b01      	cmp	r3, #1
 80002da:	d018      	beq.n	800030e <__aeabi_fdiv+0xbe>
 80002dc:	003b      	movs	r3, r7
 80002de:	337f      	adds	r3, #127	; 0x7f
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	dd69      	ble.n	80003b8 <__aeabi_fdiv+0x168>
 80002e4:	076a      	lsls	r2, r5, #29
 80002e6:	d004      	beq.n	80002f2 <__aeabi_fdiv+0xa2>
 80002e8:	220f      	movs	r2, #15
 80002ea:	402a      	ands	r2, r5
 80002ec:	2a04      	cmp	r2, #4
 80002ee:	d000      	beq.n	80002f2 <__aeabi_fdiv+0xa2>
 80002f0:	3504      	adds	r5, #4
 80002f2:	012a      	lsls	r2, r5, #4
 80002f4:	d503      	bpl.n	80002fe <__aeabi_fdiv+0xae>
 80002f6:	4b60      	ldr	r3, [pc, #384]	; (8000478 <__aeabi_fdiv+0x228>)
 80002f8:	401d      	ands	r5, r3
 80002fa:	003b      	movs	r3, r7
 80002fc:	3380      	adds	r3, #128	; 0x80
 80002fe:	2bfe      	cmp	r3, #254	; 0xfe
 8000300:	dd00      	ble.n	8000304 <__aeabi_fdiv+0xb4>
 8000302:	e070      	b.n	80003e6 <__aeabi_fdiv+0x196>
 8000304:	01ad      	lsls	r5, r5, #6
 8000306:	0a6d      	lsrs	r5, r5, #9
 8000308:	b2d8      	uxtb	r0, r3
 800030a:	e002      	b.n	8000312 <__aeabi_fdiv+0xc2>
 800030c:	000e      	movs	r6, r1
 800030e:	2000      	movs	r0, #0
 8000310:	2500      	movs	r5, #0
 8000312:	05c0      	lsls	r0, r0, #23
 8000314:	4328      	orrs	r0, r5
 8000316:	07f6      	lsls	r6, r6, #31
 8000318:	4330      	orrs	r0, r6
 800031a:	bce0      	pop	{r5, r6, r7}
 800031c:	46ba      	mov	sl, r7
 800031e:	46b1      	mov	r9, r6
 8000320:	46a8      	mov	r8, r5
 8000322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000324:	4643      	mov	r3, r8
 8000326:	2b00      	cmp	r3, #0
 8000328:	d13f      	bne.n	80003aa <__aeabi_fdiv+0x15a>
 800032a:	2202      	movs	r2, #2
 800032c:	3fff      	subs	r7, #255	; 0xff
 800032e:	e003      	b.n	8000338 <__aeabi_fdiv+0xe8>
 8000330:	4643      	mov	r3, r8
 8000332:	2b00      	cmp	r3, #0
 8000334:	d12d      	bne.n	8000392 <__aeabi_fdiv+0x142>
 8000336:	2201      	movs	r2, #1
 8000338:	0031      	movs	r1, r6
 800033a:	464b      	mov	r3, r9
 800033c:	4061      	eors	r1, r4
 800033e:	b2c9      	uxtb	r1, r1
 8000340:	4313      	orrs	r3, r2
 8000342:	2b0f      	cmp	r3, #15
 8000344:	d834      	bhi.n	80003b0 <__aeabi_fdiv+0x160>
 8000346:	484d      	ldr	r0, [pc, #308]	; (800047c <__aeabi_fdiv+0x22c>)
 8000348:	009b      	lsls	r3, r3, #2
 800034a:	58c3      	ldr	r3, [r0, r3]
 800034c:	469f      	mov	pc, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d113      	bne.n	800037a <__aeabi_fdiv+0x12a>
 8000352:	2304      	movs	r3, #4
 8000354:	4699      	mov	r9, r3
 8000356:	3b03      	subs	r3, #3
 8000358:	2700      	movs	r7, #0
 800035a:	469a      	mov	sl, r3
 800035c:	e791      	b.n	8000282 <__aeabi_fdiv+0x32>
 800035e:	2d00      	cmp	r5, #0
 8000360:	d105      	bne.n	800036e <__aeabi_fdiv+0x11e>
 8000362:	2308      	movs	r3, #8
 8000364:	4699      	mov	r9, r3
 8000366:	3b06      	subs	r3, #6
 8000368:	27ff      	movs	r7, #255	; 0xff
 800036a:	469a      	mov	sl, r3
 800036c:	e789      	b.n	8000282 <__aeabi_fdiv+0x32>
 800036e:	230c      	movs	r3, #12
 8000370:	4699      	mov	r9, r3
 8000372:	3b09      	subs	r3, #9
 8000374:	27ff      	movs	r7, #255	; 0xff
 8000376:	469a      	mov	sl, r3
 8000378:	e783      	b.n	8000282 <__aeabi_fdiv+0x32>
 800037a:	0028      	movs	r0, r5
 800037c:	f002 f8ce 	bl	800251c <__clzsi2>
 8000380:	2776      	movs	r7, #118	; 0x76
 8000382:	1f43      	subs	r3, r0, #5
 8000384:	409d      	lsls	r5, r3
 8000386:	2300      	movs	r3, #0
 8000388:	427f      	negs	r7, r7
 800038a:	4699      	mov	r9, r3
 800038c:	469a      	mov	sl, r3
 800038e:	1a3f      	subs	r7, r7, r0
 8000390:	e777      	b.n	8000282 <__aeabi_fdiv+0x32>
 8000392:	4640      	mov	r0, r8
 8000394:	f002 f8c2 	bl	800251c <__clzsi2>
 8000398:	4642      	mov	r2, r8
 800039a:	1f43      	subs	r3, r0, #5
 800039c:	409a      	lsls	r2, r3
 800039e:	2376      	movs	r3, #118	; 0x76
 80003a0:	425b      	negs	r3, r3
 80003a2:	4690      	mov	r8, r2
 80003a4:	1a1b      	subs	r3, r3, r0
 80003a6:	2200      	movs	r2, #0
 80003a8:	e77d      	b.n	80002a6 <__aeabi_fdiv+0x56>
 80003aa:	23ff      	movs	r3, #255	; 0xff
 80003ac:	2203      	movs	r2, #3
 80003ae:	e77a      	b.n	80002a6 <__aeabi_fdiv+0x56>
 80003b0:	000e      	movs	r6, r1
 80003b2:	20ff      	movs	r0, #255	; 0xff
 80003b4:	2500      	movs	r5, #0
 80003b6:	e7ac      	b.n	8000312 <__aeabi_fdiv+0xc2>
 80003b8:	2001      	movs	r0, #1
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	281b      	cmp	r0, #27
 80003be:	dca6      	bgt.n	800030e <__aeabi_fdiv+0xbe>
 80003c0:	379e      	adds	r7, #158	; 0x9e
 80003c2:	002a      	movs	r2, r5
 80003c4:	40bd      	lsls	r5, r7
 80003c6:	40c2      	lsrs	r2, r0
 80003c8:	1e6b      	subs	r3, r5, #1
 80003ca:	419d      	sbcs	r5, r3
 80003cc:	4315      	orrs	r5, r2
 80003ce:	076b      	lsls	r3, r5, #29
 80003d0:	d004      	beq.n	80003dc <__aeabi_fdiv+0x18c>
 80003d2:	230f      	movs	r3, #15
 80003d4:	402b      	ands	r3, r5
 80003d6:	2b04      	cmp	r3, #4
 80003d8:	d000      	beq.n	80003dc <__aeabi_fdiv+0x18c>
 80003da:	3504      	adds	r5, #4
 80003dc:	016b      	lsls	r3, r5, #5
 80003de:	d544      	bpl.n	800046a <__aeabi_fdiv+0x21a>
 80003e0:	2001      	movs	r0, #1
 80003e2:	2500      	movs	r5, #0
 80003e4:	e795      	b.n	8000312 <__aeabi_fdiv+0xc2>
 80003e6:	20ff      	movs	r0, #255	; 0xff
 80003e8:	2500      	movs	r5, #0
 80003ea:	e792      	b.n	8000312 <__aeabi_fdiv+0xc2>
 80003ec:	2580      	movs	r5, #128	; 0x80
 80003ee:	2600      	movs	r6, #0
 80003f0:	20ff      	movs	r0, #255	; 0xff
 80003f2:	03ed      	lsls	r5, r5, #15
 80003f4:	e78d      	b.n	8000312 <__aeabi_fdiv+0xc2>
 80003f6:	2300      	movs	r3, #0
 80003f8:	4698      	mov	r8, r3
 80003fa:	2080      	movs	r0, #128	; 0x80
 80003fc:	03c0      	lsls	r0, r0, #15
 80003fe:	4205      	tst	r5, r0
 8000400:	d009      	beq.n	8000416 <__aeabi_fdiv+0x1c6>
 8000402:	4643      	mov	r3, r8
 8000404:	4203      	tst	r3, r0
 8000406:	d106      	bne.n	8000416 <__aeabi_fdiv+0x1c6>
 8000408:	4645      	mov	r5, r8
 800040a:	4305      	orrs	r5, r0
 800040c:	026d      	lsls	r5, r5, #9
 800040e:	0026      	movs	r6, r4
 8000410:	20ff      	movs	r0, #255	; 0xff
 8000412:	0a6d      	lsrs	r5, r5, #9
 8000414:	e77d      	b.n	8000312 <__aeabi_fdiv+0xc2>
 8000416:	2080      	movs	r0, #128	; 0x80
 8000418:	03c0      	lsls	r0, r0, #15
 800041a:	4305      	orrs	r5, r0
 800041c:	026d      	lsls	r5, r5, #9
 800041e:	20ff      	movs	r0, #255	; 0xff
 8000420:	0a6d      	lsrs	r5, r5, #9
 8000422:	e776      	b.n	8000312 <__aeabi_fdiv+0xc2>
 8000424:	4642      	mov	r2, r8
 8000426:	016b      	lsls	r3, r5, #5
 8000428:	0150      	lsls	r0, r2, #5
 800042a:	4283      	cmp	r3, r0
 800042c:	d219      	bcs.n	8000462 <__aeabi_fdiv+0x212>
 800042e:	221b      	movs	r2, #27
 8000430:	2500      	movs	r5, #0
 8000432:	3f01      	subs	r7, #1
 8000434:	2601      	movs	r6, #1
 8000436:	001c      	movs	r4, r3
 8000438:	006d      	lsls	r5, r5, #1
 800043a:	005b      	lsls	r3, r3, #1
 800043c:	2c00      	cmp	r4, #0
 800043e:	db01      	blt.n	8000444 <__aeabi_fdiv+0x1f4>
 8000440:	4298      	cmp	r0, r3
 8000442:	d801      	bhi.n	8000448 <__aeabi_fdiv+0x1f8>
 8000444:	1a1b      	subs	r3, r3, r0
 8000446:	4335      	orrs	r5, r6
 8000448:	3a01      	subs	r2, #1
 800044a:	2a00      	cmp	r2, #0
 800044c:	d1f3      	bne.n	8000436 <__aeabi_fdiv+0x1e6>
 800044e:	1e5a      	subs	r2, r3, #1
 8000450:	4193      	sbcs	r3, r2
 8000452:	431d      	orrs	r5, r3
 8000454:	003b      	movs	r3, r7
 8000456:	337f      	adds	r3, #127	; 0x7f
 8000458:	000e      	movs	r6, r1
 800045a:	2b00      	cmp	r3, #0
 800045c:	dd00      	ble.n	8000460 <__aeabi_fdiv+0x210>
 800045e:	e741      	b.n	80002e4 <__aeabi_fdiv+0x94>
 8000460:	e7aa      	b.n	80003b8 <__aeabi_fdiv+0x168>
 8000462:	221a      	movs	r2, #26
 8000464:	2501      	movs	r5, #1
 8000466:	1a1b      	subs	r3, r3, r0
 8000468:	e7e4      	b.n	8000434 <__aeabi_fdiv+0x1e4>
 800046a:	01ad      	lsls	r5, r5, #6
 800046c:	2000      	movs	r0, #0
 800046e:	0a6d      	lsrs	r5, r5, #9
 8000470:	e74f      	b.n	8000312 <__aeabi_fdiv+0xc2>
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	08005e80 	.word	0x08005e80
 8000478:	f7ffffff 	.word	0xf7ffffff
 800047c:	08005ec0 	.word	0x08005ec0

08000480 <__aeabi_fmul>:
 8000480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000482:	464f      	mov	r7, r9
 8000484:	4646      	mov	r6, r8
 8000486:	46d6      	mov	lr, sl
 8000488:	0244      	lsls	r4, r0, #9
 800048a:	0045      	lsls	r5, r0, #1
 800048c:	b5c0      	push	{r6, r7, lr}
 800048e:	0a64      	lsrs	r4, r4, #9
 8000490:	1c0f      	adds	r7, r1, #0
 8000492:	0e2d      	lsrs	r5, r5, #24
 8000494:	0fc6      	lsrs	r6, r0, #31
 8000496:	2d00      	cmp	r5, #0
 8000498:	d100      	bne.n	800049c <__aeabi_fmul+0x1c>
 800049a:	e08d      	b.n	80005b8 <__aeabi_fmul+0x138>
 800049c:	2dff      	cmp	r5, #255	; 0xff
 800049e:	d100      	bne.n	80004a2 <__aeabi_fmul+0x22>
 80004a0:	e092      	b.n	80005c8 <__aeabi_fmul+0x148>
 80004a2:	2300      	movs	r3, #0
 80004a4:	2080      	movs	r0, #128	; 0x80
 80004a6:	4699      	mov	r9, r3
 80004a8:	469a      	mov	sl, r3
 80004aa:	00e4      	lsls	r4, r4, #3
 80004ac:	04c0      	lsls	r0, r0, #19
 80004ae:	4304      	orrs	r4, r0
 80004b0:	3d7f      	subs	r5, #127	; 0x7f
 80004b2:	0278      	lsls	r0, r7, #9
 80004b4:	0a43      	lsrs	r3, r0, #9
 80004b6:	4698      	mov	r8, r3
 80004b8:	007b      	lsls	r3, r7, #1
 80004ba:	0e1b      	lsrs	r3, r3, #24
 80004bc:	0fff      	lsrs	r7, r7, #31
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d100      	bne.n	80004c4 <__aeabi_fmul+0x44>
 80004c2:	e070      	b.n	80005a6 <__aeabi_fmul+0x126>
 80004c4:	2bff      	cmp	r3, #255	; 0xff
 80004c6:	d100      	bne.n	80004ca <__aeabi_fmul+0x4a>
 80004c8:	e086      	b.n	80005d8 <__aeabi_fmul+0x158>
 80004ca:	4642      	mov	r2, r8
 80004cc:	00d0      	lsls	r0, r2, #3
 80004ce:	2280      	movs	r2, #128	; 0x80
 80004d0:	3b7f      	subs	r3, #127	; 0x7f
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	2300      	movs	r3, #0
 80004d6:	04d2      	lsls	r2, r2, #19
 80004d8:	4302      	orrs	r2, r0
 80004da:	4690      	mov	r8, r2
 80004dc:	469c      	mov	ip, r3
 80004de:	0031      	movs	r1, r6
 80004e0:	464b      	mov	r3, r9
 80004e2:	4079      	eors	r1, r7
 80004e4:	1c68      	adds	r0, r5, #1
 80004e6:	2b0f      	cmp	r3, #15
 80004e8:	d81c      	bhi.n	8000524 <__aeabi_fmul+0xa4>
 80004ea:	4a76      	ldr	r2, [pc, #472]	; (80006c4 <__aeabi_fmul+0x244>)
 80004ec:	009b      	lsls	r3, r3, #2
 80004ee:	58d3      	ldr	r3, [r2, r3]
 80004f0:	469f      	mov	pc, r3
 80004f2:	0039      	movs	r1, r7
 80004f4:	4644      	mov	r4, r8
 80004f6:	46e2      	mov	sl, ip
 80004f8:	4653      	mov	r3, sl
 80004fa:	2b02      	cmp	r3, #2
 80004fc:	d00f      	beq.n	800051e <__aeabi_fmul+0x9e>
 80004fe:	2b03      	cmp	r3, #3
 8000500:	d100      	bne.n	8000504 <__aeabi_fmul+0x84>
 8000502:	e0d7      	b.n	80006b4 <__aeabi_fmul+0x234>
 8000504:	2b01      	cmp	r3, #1
 8000506:	d137      	bne.n	8000578 <__aeabi_fmul+0xf8>
 8000508:	2000      	movs	r0, #0
 800050a:	2400      	movs	r4, #0
 800050c:	05c0      	lsls	r0, r0, #23
 800050e:	4320      	orrs	r0, r4
 8000510:	07c9      	lsls	r1, r1, #31
 8000512:	4308      	orrs	r0, r1
 8000514:	bce0      	pop	{r5, r6, r7}
 8000516:	46ba      	mov	sl, r7
 8000518:	46b1      	mov	r9, r6
 800051a:	46a8      	mov	r8, r5
 800051c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800051e:	20ff      	movs	r0, #255	; 0xff
 8000520:	2400      	movs	r4, #0
 8000522:	e7f3      	b.n	800050c <__aeabi_fmul+0x8c>
 8000524:	0c26      	lsrs	r6, r4, #16
 8000526:	0424      	lsls	r4, r4, #16
 8000528:	0c22      	lsrs	r2, r4, #16
 800052a:	4644      	mov	r4, r8
 800052c:	0424      	lsls	r4, r4, #16
 800052e:	0c24      	lsrs	r4, r4, #16
 8000530:	4643      	mov	r3, r8
 8000532:	0027      	movs	r7, r4
 8000534:	0c1b      	lsrs	r3, r3, #16
 8000536:	4357      	muls	r7, r2
 8000538:	4374      	muls	r4, r6
 800053a:	435a      	muls	r2, r3
 800053c:	435e      	muls	r6, r3
 800053e:	1912      	adds	r2, r2, r4
 8000540:	0c3b      	lsrs	r3, r7, #16
 8000542:	189b      	adds	r3, r3, r2
 8000544:	429c      	cmp	r4, r3
 8000546:	d903      	bls.n	8000550 <__aeabi_fmul+0xd0>
 8000548:	2280      	movs	r2, #128	; 0x80
 800054a:	0252      	lsls	r2, r2, #9
 800054c:	4694      	mov	ip, r2
 800054e:	4466      	add	r6, ip
 8000550:	043f      	lsls	r7, r7, #16
 8000552:	041a      	lsls	r2, r3, #16
 8000554:	0c3f      	lsrs	r7, r7, #16
 8000556:	19d2      	adds	r2, r2, r7
 8000558:	0194      	lsls	r4, r2, #6
 800055a:	1e67      	subs	r7, r4, #1
 800055c:	41bc      	sbcs	r4, r7
 800055e:	0c1b      	lsrs	r3, r3, #16
 8000560:	0e92      	lsrs	r2, r2, #26
 8000562:	199b      	adds	r3, r3, r6
 8000564:	4314      	orrs	r4, r2
 8000566:	019b      	lsls	r3, r3, #6
 8000568:	431c      	orrs	r4, r3
 800056a:	011b      	lsls	r3, r3, #4
 800056c:	d400      	bmi.n	8000570 <__aeabi_fmul+0xf0>
 800056e:	e09b      	b.n	80006a8 <__aeabi_fmul+0x228>
 8000570:	2301      	movs	r3, #1
 8000572:	0862      	lsrs	r2, r4, #1
 8000574:	401c      	ands	r4, r3
 8000576:	4314      	orrs	r4, r2
 8000578:	0002      	movs	r2, r0
 800057a:	327f      	adds	r2, #127	; 0x7f
 800057c:	2a00      	cmp	r2, #0
 800057e:	dd64      	ble.n	800064a <__aeabi_fmul+0x1ca>
 8000580:	0763      	lsls	r3, r4, #29
 8000582:	d004      	beq.n	800058e <__aeabi_fmul+0x10e>
 8000584:	230f      	movs	r3, #15
 8000586:	4023      	ands	r3, r4
 8000588:	2b04      	cmp	r3, #4
 800058a:	d000      	beq.n	800058e <__aeabi_fmul+0x10e>
 800058c:	3404      	adds	r4, #4
 800058e:	0123      	lsls	r3, r4, #4
 8000590:	d503      	bpl.n	800059a <__aeabi_fmul+0x11a>
 8000592:	0002      	movs	r2, r0
 8000594:	4b4c      	ldr	r3, [pc, #304]	; (80006c8 <__aeabi_fmul+0x248>)
 8000596:	3280      	adds	r2, #128	; 0x80
 8000598:	401c      	ands	r4, r3
 800059a:	2afe      	cmp	r2, #254	; 0xfe
 800059c:	dcbf      	bgt.n	800051e <__aeabi_fmul+0x9e>
 800059e:	01a4      	lsls	r4, r4, #6
 80005a0:	0a64      	lsrs	r4, r4, #9
 80005a2:	b2d0      	uxtb	r0, r2
 80005a4:	e7b2      	b.n	800050c <__aeabi_fmul+0x8c>
 80005a6:	4643      	mov	r3, r8
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d13d      	bne.n	8000628 <__aeabi_fmul+0x1a8>
 80005ac:	464a      	mov	r2, r9
 80005ae:	3301      	adds	r3, #1
 80005b0:	431a      	orrs	r2, r3
 80005b2:	4691      	mov	r9, r2
 80005b4:	469c      	mov	ip, r3
 80005b6:	e792      	b.n	80004de <__aeabi_fmul+0x5e>
 80005b8:	2c00      	cmp	r4, #0
 80005ba:	d129      	bne.n	8000610 <__aeabi_fmul+0x190>
 80005bc:	2304      	movs	r3, #4
 80005be:	4699      	mov	r9, r3
 80005c0:	3b03      	subs	r3, #3
 80005c2:	2500      	movs	r5, #0
 80005c4:	469a      	mov	sl, r3
 80005c6:	e774      	b.n	80004b2 <__aeabi_fmul+0x32>
 80005c8:	2c00      	cmp	r4, #0
 80005ca:	d11b      	bne.n	8000604 <__aeabi_fmul+0x184>
 80005cc:	2308      	movs	r3, #8
 80005ce:	4699      	mov	r9, r3
 80005d0:	3b06      	subs	r3, #6
 80005d2:	25ff      	movs	r5, #255	; 0xff
 80005d4:	469a      	mov	sl, r3
 80005d6:	e76c      	b.n	80004b2 <__aeabi_fmul+0x32>
 80005d8:	4643      	mov	r3, r8
 80005da:	35ff      	adds	r5, #255	; 0xff
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d10b      	bne.n	80005f8 <__aeabi_fmul+0x178>
 80005e0:	2302      	movs	r3, #2
 80005e2:	464a      	mov	r2, r9
 80005e4:	431a      	orrs	r2, r3
 80005e6:	4691      	mov	r9, r2
 80005e8:	469c      	mov	ip, r3
 80005ea:	e778      	b.n	80004de <__aeabi_fmul+0x5e>
 80005ec:	4653      	mov	r3, sl
 80005ee:	0031      	movs	r1, r6
 80005f0:	2b02      	cmp	r3, #2
 80005f2:	d000      	beq.n	80005f6 <__aeabi_fmul+0x176>
 80005f4:	e783      	b.n	80004fe <__aeabi_fmul+0x7e>
 80005f6:	e792      	b.n	800051e <__aeabi_fmul+0x9e>
 80005f8:	2303      	movs	r3, #3
 80005fa:	464a      	mov	r2, r9
 80005fc:	431a      	orrs	r2, r3
 80005fe:	4691      	mov	r9, r2
 8000600:	469c      	mov	ip, r3
 8000602:	e76c      	b.n	80004de <__aeabi_fmul+0x5e>
 8000604:	230c      	movs	r3, #12
 8000606:	4699      	mov	r9, r3
 8000608:	3b09      	subs	r3, #9
 800060a:	25ff      	movs	r5, #255	; 0xff
 800060c:	469a      	mov	sl, r3
 800060e:	e750      	b.n	80004b2 <__aeabi_fmul+0x32>
 8000610:	0020      	movs	r0, r4
 8000612:	f001 ff83 	bl	800251c <__clzsi2>
 8000616:	2576      	movs	r5, #118	; 0x76
 8000618:	1f43      	subs	r3, r0, #5
 800061a:	409c      	lsls	r4, r3
 800061c:	2300      	movs	r3, #0
 800061e:	426d      	negs	r5, r5
 8000620:	4699      	mov	r9, r3
 8000622:	469a      	mov	sl, r3
 8000624:	1a2d      	subs	r5, r5, r0
 8000626:	e744      	b.n	80004b2 <__aeabi_fmul+0x32>
 8000628:	4640      	mov	r0, r8
 800062a:	f001 ff77 	bl	800251c <__clzsi2>
 800062e:	4642      	mov	r2, r8
 8000630:	1f43      	subs	r3, r0, #5
 8000632:	409a      	lsls	r2, r3
 8000634:	2300      	movs	r3, #0
 8000636:	1a2d      	subs	r5, r5, r0
 8000638:	4690      	mov	r8, r2
 800063a:	469c      	mov	ip, r3
 800063c:	3d76      	subs	r5, #118	; 0x76
 800063e:	e74e      	b.n	80004de <__aeabi_fmul+0x5e>
 8000640:	2480      	movs	r4, #128	; 0x80
 8000642:	2100      	movs	r1, #0
 8000644:	20ff      	movs	r0, #255	; 0xff
 8000646:	03e4      	lsls	r4, r4, #15
 8000648:	e760      	b.n	800050c <__aeabi_fmul+0x8c>
 800064a:	2301      	movs	r3, #1
 800064c:	1a9b      	subs	r3, r3, r2
 800064e:	2b1b      	cmp	r3, #27
 8000650:	dd00      	ble.n	8000654 <__aeabi_fmul+0x1d4>
 8000652:	e759      	b.n	8000508 <__aeabi_fmul+0x88>
 8000654:	0022      	movs	r2, r4
 8000656:	309e      	adds	r0, #158	; 0x9e
 8000658:	40da      	lsrs	r2, r3
 800065a:	4084      	lsls	r4, r0
 800065c:	0013      	movs	r3, r2
 800065e:	1e62      	subs	r2, r4, #1
 8000660:	4194      	sbcs	r4, r2
 8000662:	431c      	orrs	r4, r3
 8000664:	0763      	lsls	r3, r4, #29
 8000666:	d004      	beq.n	8000672 <__aeabi_fmul+0x1f2>
 8000668:	230f      	movs	r3, #15
 800066a:	4023      	ands	r3, r4
 800066c:	2b04      	cmp	r3, #4
 800066e:	d000      	beq.n	8000672 <__aeabi_fmul+0x1f2>
 8000670:	3404      	adds	r4, #4
 8000672:	0163      	lsls	r3, r4, #5
 8000674:	d51a      	bpl.n	80006ac <__aeabi_fmul+0x22c>
 8000676:	2001      	movs	r0, #1
 8000678:	2400      	movs	r4, #0
 800067a:	e747      	b.n	800050c <__aeabi_fmul+0x8c>
 800067c:	2080      	movs	r0, #128	; 0x80
 800067e:	03c0      	lsls	r0, r0, #15
 8000680:	4204      	tst	r4, r0
 8000682:	d009      	beq.n	8000698 <__aeabi_fmul+0x218>
 8000684:	4643      	mov	r3, r8
 8000686:	4203      	tst	r3, r0
 8000688:	d106      	bne.n	8000698 <__aeabi_fmul+0x218>
 800068a:	4644      	mov	r4, r8
 800068c:	4304      	orrs	r4, r0
 800068e:	0264      	lsls	r4, r4, #9
 8000690:	0039      	movs	r1, r7
 8000692:	20ff      	movs	r0, #255	; 0xff
 8000694:	0a64      	lsrs	r4, r4, #9
 8000696:	e739      	b.n	800050c <__aeabi_fmul+0x8c>
 8000698:	2080      	movs	r0, #128	; 0x80
 800069a:	03c0      	lsls	r0, r0, #15
 800069c:	4304      	orrs	r4, r0
 800069e:	0264      	lsls	r4, r4, #9
 80006a0:	0031      	movs	r1, r6
 80006a2:	20ff      	movs	r0, #255	; 0xff
 80006a4:	0a64      	lsrs	r4, r4, #9
 80006a6:	e731      	b.n	800050c <__aeabi_fmul+0x8c>
 80006a8:	0028      	movs	r0, r5
 80006aa:	e765      	b.n	8000578 <__aeabi_fmul+0xf8>
 80006ac:	01a4      	lsls	r4, r4, #6
 80006ae:	2000      	movs	r0, #0
 80006b0:	0a64      	lsrs	r4, r4, #9
 80006b2:	e72b      	b.n	800050c <__aeabi_fmul+0x8c>
 80006b4:	2080      	movs	r0, #128	; 0x80
 80006b6:	03c0      	lsls	r0, r0, #15
 80006b8:	4304      	orrs	r4, r0
 80006ba:	0264      	lsls	r4, r4, #9
 80006bc:	20ff      	movs	r0, #255	; 0xff
 80006be:	0a64      	lsrs	r4, r4, #9
 80006c0:	e724      	b.n	800050c <__aeabi_fmul+0x8c>
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	08005f00 	.word	0x08005f00
 80006c8:	f7ffffff 	.word	0xf7ffffff

080006cc <__aeabi_fsub>:
 80006cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ce:	46ce      	mov	lr, r9
 80006d0:	4647      	mov	r7, r8
 80006d2:	0243      	lsls	r3, r0, #9
 80006d4:	0a5b      	lsrs	r3, r3, #9
 80006d6:	024e      	lsls	r6, r1, #9
 80006d8:	00da      	lsls	r2, r3, #3
 80006da:	4694      	mov	ip, r2
 80006dc:	0a72      	lsrs	r2, r6, #9
 80006de:	4691      	mov	r9, r2
 80006e0:	0045      	lsls	r5, r0, #1
 80006e2:	004a      	lsls	r2, r1, #1
 80006e4:	b580      	push	{r7, lr}
 80006e6:	0e2d      	lsrs	r5, r5, #24
 80006e8:	001f      	movs	r7, r3
 80006ea:	0fc4      	lsrs	r4, r0, #31
 80006ec:	0e12      	lsrs	r2, r2, #24
 80006ee:	0fc9      	lsrs	r1, r1, #31
 80006f0:	09b6      	lsrs	r6, r6, #6
 80006f2:	2aff      	cmp	r2, #255	; 0xff
 80006f4:	d05b      	beq.n	80007ae <__aeabi_fsub+0xe2>
 80006f6:	2001      	movs	r0, #1
 80006f8:	4041      	eors	r1, r0
 80006fa:	428c      	cmp	r4, r1
 80006fc:	d039      	beq.n	8000772 <__aeabi_fsub+0xa6>
 80006fe:	1aa8      	subs	r0, r5, r2
 8000700:	2800      	cmp	r0, #0
 8000702:	dd5a      	ble.n	80007ba <__aeabi_fsub+0xee>
 8000704:	2a00      	cmp	r2, #0
 8000706:	d06a      	beq.n	80007de <__aeabi_fsub+0x112>
 8000708:	2dff      	cmp	r5, #255	; 0xff
 800070a:	d100      	bne.n	800070e <__aeabi_fsub+0x42>
 800070c:	e0d9      	b.n	80008c2 <__aeabi_fsub+0x1f6>
 800070e:	2280      	movs	r2, #128	; 0x80
 8000710:	04d2      	lsls	r2, r2, #19
 8000712:	4316      	orrs	r6, r2
 8000714:	281b      	cmp	r0, #27
 8000716:	dc00      	bgt.n	800071a <__aeabi_fsub+0x4e>
 8000718:	e0e9      	b.n	80008ee <__aeabi_fsub+0x222>
 800071a:	2001      	movs	r0, #1
 800071c:	4663      	mov	r3, ip
 800071e:	1a18      	subs	r0, r3, r0
 8000720:	0143      	lsls	r3, r0, #5
 8000722:	d400      	bmi.n	8000726 <__aeabi_fsub+0x5a>
 8000724:	e0b4      	b.n	8000890 <__aeabi_fsub+0x1c4>
 8000726:	0180      	lsls	r0, r0, #6
 8000728:	0987      	lsrs	r7, r0, #6
 800072a:	0038      	movs	r0, r7
 800072c:	f001 fef6 	bl	800251c <__clzsi2>
 8000730:	3805      	subs	r0, #5
 8000732:	4087      	lsls	r7, r0
 8000734:	4285      	cmp	r5, r0
 8000736:	dc00      	bgt.n	800073a <__aeabi_fsub+0x6e>
 8000738:	e0cc      	b.n	80008d4 <__aeabi_fsub+0x208>
 800073a:	1a2d      	subs	r5, r5, r0
 800073c:	48b5      	ldr	r0, [pc, #724]	; (8000a14 <__aeabi_fsub+0x348>)
 800073e:	4038      	ands	r0, r7
 8000740:	0743      	lsls	r3, r0, #29
 8000742:	d004      	beq.n	800074e <__aeabi_fsub+0x82>
 8000744:	230f      	movs	r3, #15
 8000746:	4003      	ands	r3, r0
 8000748:	2b04      	cmp	r3, #4
 800074a:	d000      	beq.n	800074e <__aeabi_fsub+0x82>
 800074c:	3004      	adds	r0, #4
 800074e:	0143      	lsls	r3, r0, #5
 8000750:	d400      	bmi.n	8000754 <__aeabi_fsub+0x88>
 8000752:	e0a0      	b.n	8000896 <__aeabi_fsub+0x1ca>
 8000754:	1c6a      	adds	r2, r5, #1
 8000756:	2dfe      	cmp	r5, #254	; 0xfe
 8000758:	d100      	bne.n	800075c <__aeabi_fsub+0x90>
 800075a:	e08d      	b.n	8000878 <__aeabi_fsub+0x1ac>
 800075c:	0180      	lsls	r0, r0, #6
 800075e:	0a47      	lsrs	r7, r0, #9
 8000760:	b2d2      	uxtb	r2, r2
 8000762:	05d0      	lsls	r0, r2, #23
 8000764:	4338      	orrs	r0, r7
 8000766:	07e4      	lsls	r4, r4, #31
 8000768:	4320      	orrs	r0, r4
 800076a:	bcc0      	pop	{r6, r7}
 800076c:	46b9      	mov	r9, r7
 800076e:	46b0      	mov	r8, r6
 8000770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000772:	1aa8      	subs	r0, r5, r2
 8000774:	4680      	mov	r8, r0
 8000776:	2800      	cmp	r0, #0
 8000778:	dd45      	ble.n	8000806 <__aeabi_fsub+0x13a>
 800077a:	2a00      	cmp	r2, #0
 800077c:	d070      	beq.n	8000860 <__aeabi_fsub+0x194>
 800077e:	2dff      	cmp	r5, #255	; 0xff
 8000780:	d100      	bne.n	8000784 <__aeabi_fsub+0xb8>
 8000782:	e09e      	b.n	80008c2 <__aeabi_fsub+0x1f6>
 8000784:	2380      	movs	r3, #128	; 0x80
 8000786:	04db      	lsls	r3, r3, #19
 8000788:	431e      	orrs	r6, r3
 800078a:	4643      	mov	r3, r8
 800078c:	2b1b      	cmp	r3, #27
 800078e:	dc00      	bgt.n	8000792 <__aeabi_fsub+0xc6>
 8000790:	e0d2      	b.n	8000938 <__aeabi_fsub+0x26c>
 8000792:	2001      	movs	r0, #1
 8000794:	4460      	add	r0, ip
 8000796:	0143      	lsls	r3, r0, #5
 8000798:	d57a      	bpl.n	8000890 <__aeabi_fsub+0x1c4>
 800079a:	3501      	adds	r5, #1
 800079c:	2dff      	cmp	r5, #255	; 0xff
 800079e:	d06b      	beq.n	8000878 <__aeabi_fsub+0x1ac>
 80007a0:	2301      	movs	r3, #1
 80007a2:	4a9d      	ldr	r2, [pc, #628]	; (8000a18 <__aeabi_fsub+0x34c>)
 80007a4:	4003      	ands	r3, r0
 80007a6:	0840      	lsrs	r0, r0, #1
 80007a8:	4010      	ands	r0, r2
 80007aa:	4318      	orrs	r0, r3
 80007ac:	e7c8      	b.n	8000740 <__aeabi_fsub+0x74>
 80007ae:	2e00      	cmp	r6, #0
 80007b0:	d020      	beq.n	80007f4 <__aeabi_fsub+0x128>
 80007b2:	428c      	cmp	r4, r1
 80007b4:	d023      	beq.n	80007fe <__aeabi_fsub+0x132>
 80007b6:	0028      	movs	r0, r5
 80007b8:	38ff      	subs	r0, #255	; 0xff
 80007ba:	2800      	cmp	r0, #0
 80007bc:	d039      	beq.n	8000832 <__aeabi_fsub+0x166>
 80007be:	1b57      	subs	r7, r2, r5
 80007c0:	2d00      	cmp	r5, #0
 80007c2:	d000      	beq.n	80007c6 <__aeabi_fsub+0xfa>
 80007c4:	e09d      	b.n	8000902 <__aeabi_fsub+0x236>
 80007c6:	4663      	mov	r3, ip
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d100      	bne.n	80007ce <__aeabi_fsub+0x102>
 80007cc:	e0db      	b.n	8000986 <__aeabi_fsub+0x2ba>
 80007ce:	1e7b      	subs	r3, r7, #1
 80007d0:	2f01      	cmp	r7, #1
 80007d2:	d100      	bne.n	80007d6 <__aeabi_fsub+0x10a>
 80007d4:	e10d      	b.n	80009f2 <__aeabi_fsub+0x326>
 80007d6:	2fff      	cmp	r7, #255	; 0xff
 80007d8:	d071      	beq.n	80008be <__aeabi_fsub+0x1f2>
 80007da:	001f      	movs	r7, r3
 80007dc:	e098      	b.n	8000910 <__aeabi_fsub+0x244>
 80007de:	2e00      	cmp	r6, #0
 80007e0:	d100      	bne.n	80007e4 <__aeabi_fsub+0x118>
 80007e2:	e0a7      	b.n	8000934 <__aeabi_fsub+0x268>
 80007e4:	1e42      	subs	r2, r0, #1
 80007e6:	2801      	cmp	r0, #1
 80007e8:	d100      	bne.n	80007ec <__aeabi_fsub+0x120>
 80007ea:	e0e6      	b.n	80009ba <__aeabi_fsub+0x2ee>
 80007ec:	28ff      	cmp	r0, #255	; 0xff
 80007ee:	d068      	beq.n	80008c2 <__aeabi_fsub+0x1f6>
 80007f0:	0010      	movs	r0, r2
 80007f2:	e78f      	b.n	8000714 <__aeabi_fsub+0x48>
 80007f4:	2001      	movs	r0, #1
 80007f6:	4041      	eors	r1, r0
 80007f8:	42a1      	cmp	r1, r4
 80007fa:	d000      	beq.n	80007fe <__aeabi_fsub+0x132>
 80007fc:	e77f      	b.n	80006fe <__aeabi_fsub+0x32>
 80007fe:	20ff      	movs	r0, #255	; 0xff
 8000800:	4240      	negs	r0, r0
 8000802:	4680      	mov	r8, r0
 8000804:	44a8      	add	r8, r5
 8000806:	4640      	mov	r0, r8
 8000808:	2800      	cmp	r0, #0
 800080a:	d038      	beq.n	800087e <__aeabi_fsub+0x1b2>
 800080c:	1b51      	subs	r1, r2, r5
 800080e:	2d00      	cmp	r5, #0
 8000810:	d100      	bne.n	8000814 <__aeabi_fsub+0x148>
 8000812:	e0ae      	b.n	8000972 <__aeabi_fsub+0x2a6>
 8000814:	2aff      	cmp	r2, #255	; 0xff
 8000816:	d100      	bne.n	800081a <__aeabi_fsub+0x14e>
 8000818:	e0df      	b.n	80009da <__aeabi_fsub+0x30e>
 800081a:	2380      	movs	r3, #128	; 0x80
 800081c:	4660      	mov	r0, ip
 800081e:	04db      	lsls	r3, r3, #19
 8000820:	4318      	orrs	r0, r3
 8000822:	4684      	mov	ip, r0
 8000824:	291b      	cmp	r1, #27
 8000826:	dc00      	bgt.n	800082a <__aeabi_fsub+0x15e>
 8000828:	e0d9      	b.n	80009de <__aeabi_fsub+0x312>
 800082a:	2001      	movs	r0, #1
 800082c:	0015      	movs	r5, r2
 800082e:	1980      	adds	r0, r0, r6
 8000830:	e7b1      	b.n	8000796 <__aeabi_fsub+0xca>
 8000832:	20fe      	movs	r0, #254	; 0xfe
 8000834:	1c6a      	adds	r2, r5, #1
 8000836:	4210      	tst	r0, r2
 8000838:	d171      	bne.n	800091e <__aeabi_fsub+0x252>
 800083a:	2d00      	cmp	r5, #0
 800083c:	d000      	beq.n	8000840 <__aeabi_fsub+0x174>
 800083e:	e0a6      	b.n	800098e <__aeabi_fsub+0x2c2>
 8000840:	4663      	mov	r3, ip
 8000842:	2b00      	cmp	r3, #0
 8000844:	d100      	bne.n	8000848 <__aeabi_fsub+0x17c>
 8000846:	e0d9      	b.n	80009fc <__aeabi_fsub+0x330>
 8000848:	2200      	movs	r2, #0
 800084a:	2e00      	cmp	r6, #0
 800084c:	d100      	bne.n	8000850 <__aeabi_fsub+0x184>
 800084e:	e788      	b.n	8000762 <__aeabi_fsub+0x96>
 8000850:	1b98      	subs	r0, r3, r6
 8000852:	0143      	lsls	r3, r0, #5
 8000854:	d400      	bmi.n	8000858 <__aeabi_fsub+0x18c>
 8000856:	e0e1      	b.n	8000a1c <__aeabi_fsub+0x350>
 8000858:	4663      	mov	r3, ip
 800085a:	000c      	movs	r4, r1
 800085c:	1af0      	subs	r0, r6, r3
 800085e:	e76f      	b.n	8000740 <__aeabi_fsub+0x74>
 8000860:	2e00      	cmp	r6, #0
 8000862:	d100      	bne.n	8000866 <__aeabi_fsub+0x19a>
 8000864:	e0b7      	b.n	80009d6 <__aeabi_fsub+0x30a>
 8000866:	0002      	movs	r2, r0
 8000868:	3a01      	subs	r2, #1
 800086a:	2801      	cmp	r0, #1
 800086c:	d100      	bne.n	8000870 <__aeabi_fsub+0x1a4>
 800086e:	e09c      	b.n	80009aa <__aeabi_fsub+0x2de>
 8000870:	28ff      	cmp	r0, #255	; 0xff
 8000872:	d026      	beq.n	80008c2 <__aeabi_fsub+0x1f6>
 8000874:	4690      	mov	r8, r2
 8000876:	e788      	b.n	800078a <__aeabi_fsub+0xbe>
 8000878:	22ff      	movs	r2, #255	; 0xff
 800087a:	2700      	movs	r7, #0
 800087c:	e771      	b.n	8000762 <__aeabi_fsub+0x96>
 800087e:	20fe      	movs	r0, #254	; 0xfe
 8000880:	1c6a      	adds	r2, r5, #1
 8000882:	4210      	tst	r0, r2
 8000884:	d064      	beq.n	8000950 <__aeabi_fsub+0x284>
 8000886:	2aff      	cmp	r2, #255	; 0xff
 8000888:	d0f6      	beq.n	8000878 <__aeabi_fsub+0x1ac>
 800088a:	0015      	movs	r5, r2
 800088c:	4466      	add	r6, ip
 800088e:	0870      	lsrs	r0, r6, #1
 8000890:	0743      	lsls	r3, r0, #29
 8000892:	d000      	beq.n	8000896 <__aeabi_fsub+0x1ca>
 8000894:	e756      	b.n	8000744 <__aeabi_fsub+0x78>
 8000896:	08c3      	lsrs	r3, r0, #3
 8000898:	2dff      	cmp	r5, #255	; 0xff
 800089a:	d012      	beq.n	80008c2 <__aeabi_fsub+0x1f6>
 800089c:	025b      	lsls	r3, r3, #9
 800089e:	0a5f      	lsrs	r7, r3, #9
 80008a0:	b2ea      	uxtb	r2, r5
 80008a2:	e75e      	b.n	8000762 <__aeabi_fsub+0x96>
 80008a4:	4662      	mov	r2, ip
 80008a6:	2a00      	cmp	r2, #0
 80008a8:	d100      	bne.n	80008ac <__aeabi_fsub+0x1e0>
 80008aa:	e096      	b.n	80009da <__aeabi_fsub+0x30e>
 80008ac:	2e00      	cmp	r6, #0
 80008ae:	d008      	beq.n	80008c2 <__aeabi_fsub+0x1f6>
 80008b0:	2280      	movs	r2, #128	; 0x80
 80008b2:	03d2      	lsls	r2, r2, #15
 80008b4:	4213      	tst	r3, r2
 80008b6:	d004      	beq.n	80008c2 <__aeabi_fsub+0x1f6>
 80008b8:	4648      	mov	r0, r9
 80008ba:	4210      	tst	r0, r2
 80008bc:	d101      	bne.n	80008c2 <__aeabi_fsub+0x1f6>
 80008be:	000c      	movs	r4, r1
 80008c0:	464b      	mov	r3, r9
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d0d8      	beq.n	8000878 <__aeabi_fsub+0x1ac>
 80008c6:	2780      	movs	r7, #128	; 0x80
 80008c8:	03ff      	lsls	r7, r7, #15
 80008ca:	431f      	orrs	r7, r3
 80008cc:	027f      	lsls	r7, r7, #9
 80008ce:	22ff      	movs	r2, #255	; 0xff
 80008d0:	0a7f      	lsrs	r7, r7, #9
 80008d2:	e746      	b.n	8000762 <__aeabi_fsub+0x96>
 80008d4:	2320      	movs	r3, #32
 80008d6:	003a      	movs	r2, r7
 80008d8:	1b45      	subs	r5, r0, r5
 80008da:	0038      	movs	r0, r7
 80008dc:	3501      	adds	r5, #1
 80008de:	40ea      	lsrs	r2, r5
 80008e0:	1b5d      	subs	r5, r3, r5
 80008e2:	40a8      	lsls	r0, r5
 80008e4:	1e43      	subs	r3, r0, #1
 80008e6:	4198      	sbcs	r0, r3
 80008e8:	2500      	movs	r5, #0
 80008ea:	4310      	orrs	r0, r2
 80008ec:	e728      	b.n	8000740 <__aeabi_fsub+0x74>
 80008ee:	2320      	movs	r3, #32
 80008f0:	1a1b      	subs	r3, r3, r0
 80008f2:	0032      	movs	r2, r6
 80008f4:	409e      	lsls	r6, r3
 80008f6:	40c2      	lsrs	r2, r0
 80008f8:	0030      	movs	r0, r6
 80008fa:	1e43      	subs	r3, r0, #1
 80008fc:	4198      	sbcs	r0, r3
 80008fe:	4310      	orrs	r0, r2
 8000900:	e70c      	b.n	800071c <__aeabi_fsub+0x50>
 8000902:	2aff      	cmp	r2, #255	; 0xff
 8000904:	d0db      	beq.n	80008be <__aeabi_fsub+0x1f2>
 8000906:	2380      	movs	r3, #128	; 0x80
 8000908:	4660      	mov	r0, ip
 800090a:	04db      	lsls	r3, r3, #19
 800090c:	4318      	orrs	r0, r3
 800090e:	4684      	mov	ip, r0
 8000910:	2f1b      	cmp	r7, #27
 8000912:	dd56      	ble.n	80009c2 <__aeabi_fsub+0x2f6>
 8000914:	2001      	movs	r0, #1
 8000916:	000c      	movs	r4, r1
 8000918:	0015      	movs	r5, r2
 800091a:	1a30      	subs	r0, r6, r0
 800091c:	e700      	b.n	8000720 <__aeabi_fsub+0x54>
 800091e:	4663      	mov	r3, ip
 8000920:	1b9f      	subs	r7, r3, r6
 8000922:	017b      	lsls	r3, r7, #5
 8000924:	d43d      	bmi.n	80009a2 <__aeabi_fsub+0x2d6>
 8000926:	2f00      	cmp	r7, #0
 8000928:	d000      	beq.n	800092c <__aeabi_fsub+0x260>
 800092a:	e6fe      	b.n	800072a <__aeabi_fsub+0x5e>
 800092c:	2400      	movs	r4, #0
 800092e:	2200      	movs	r2, #0
 8000930:	2700      	movs	r7, #0
 8000932:	e716      	b.n	8000762 <__aeabi_fsub+0x96>
 8000934:	0005      	movs	r5, r0
 8000936:	e7af      	b.n	8000898 <__aeabi_fsub+0x1cc>
 8000938:	0032      	movs	r2, r6
 800093a:	4643      	mov	r3, r8
 800093c:	4641      	mov	r1, r8
 800093e:	40da      	lsrs	r2, r3
 8000940:	2320      	movs	r3, #32
 8000942:	1a5b      	subs	r3, r3, r1
 8000944:	409e      	lsls	r6, r3
 8000946:	0030      	movs	r0, r6
 8000948:	1e43      	subs	r3, r0, #1
 800094a:	4198      	sbcs	r0, r3
 800094c:	4310      	orrs	r0, r2
 800094e:	e721      	b.n	8000794 <__aeabi_fsub+0xc8>
 8000950:	2d00      	cmp	r5, #0
 8000952:	d1a7      	bne.n	80008a4 <__aeabi_fsub+0x1d8>
 8000954:	4663      	mov	r3, ip
 8000956:	2b00      	cmp	r3, #0
 8000958:	d059      	beq.n	8000a0e <__aeabi_fsub+0x342>
 800095a:	2200      	movs	r2, #0
 800095c:	2e00      	cmp	r6, #0
 800095e:	d100      	bne.n	8000962 <__aeabi_fsub+0x296>
 8000960:	e6ff      	b.n	8000762 <__aeabi_fsub+0x96>
 8000962:	0030      	movs	r0, r6
 8000964:	4460      	add	r0, ip
 8000966:	0143      	lsls	r3, r0, #5
 8000968:	d592      	bpl.n	8000890 <__aeabi_fsub+0x1c4>
 800096a:	4b2a      	ldr	r3, [pc, #168]	; (8000a14 <__aeabi_fsub+0x348>)
 800096c:	3501      	adds	r5, #1
 800096e:	4018      	ands	r0, r3
 8000970:	e78e      	b.n	8000890 <__aeabi_fsub+0x1c4>
 8000972:	4663      	mov	r3, ip
 8000974:	2b00      	cmp	r3, #0
 8000976:	d047      	beq.n	8000a08 <__aeabi_fsub+0x33c>
 8000978:	1e4b      	subs	r3, r1, #1
 800097a:	2901      	cmp	r1, #1
 800097c:	d015      	beq.n	80009aa <__aeabi_fsub+0x2de>
 800097e:	29ff      	cmp	r1, #255	; 0xff
 8000980:	d02b      	beq.n	80009da <__aeabi_fsub+0x30e>
 8000982:	0019      	movs	r1, r3
 8000984:	e74e      	b.n	8000824 <__aeabi_fsub+0x158>
 8000986:	000c      	movs	r4, r1
 8000988:	464b      	mov	r3, r9
 800098a:	003d      	movs	r5, r7
 800098c:	e784      	b.n	8000898 <__aeabi_fsub+0x1cc>
 800098e:	4662      	mov	r2, ip
 8000990:	2a00      	cmp	r2, #0
 8000992:	d18b      	bne.n	80008ac <__aeabi_fsub+0x1e0>
 8000994:	2e00      	cmp	r6, #0
 8000996:	d192      	bne.n	80008be <__aeabi_fsub+0x1f2>
 8000998:	2780      	movs	r7, #128	; 0x80
 800099a:	2400      	movs	r4, #0
 800099c:	22ff      	movs	r2, #255	; 0xff
 800099e:	03ff      	lsls	r7, r7, #15
 80009a0:	e6df      	b.n	8000762 <__aeabi_fsub+0x96>
 80009a2:	4663      	mov	r3, ip
 80009a4:	000c      	movs	r4, r1
 80009a6:	1af7      	subs	r7, r6, r3
 80009a8:	e6bf      	b.n	800072a <__aeabi_fsub+0x5e>
 80009aa:	0030      	movs	r0, r6
 80009ac:	4460      	add	r0, ip
 80009ae:	2501      	movs	r5, #1
 80009b0:	0143      	lsls	r3, r0, #5
 80009b2:	d400      	bmi.n	80009b6 <__aeabi_fsub+0x2ea>
 80009b4:	e76c      	b.n	8000890 <__aeabi_fsub+0x1c4>
 80009b6:	2502      	movs	r5, #2
 80009b8:	e6f2      	b.n	80007a0 <__aeabi_fsub+0xd4>
 80009ba:	4663      	mov	r3, ip
 80009bc:	2501      	movs	r5, #1
 80009be:	1b98      	subs	r0, r3, r6
 80009c0:	e6ae      	b.n	8000720 <__aeabi_fsub+0x54>
 80009c2:	2320      	movs	r3, #32
 80009c4:	4664      	mov	r4, ip
 80009c6:	4660      	mov	r0, ip
 80009c8:	40fc      	lsrs	r4, r7
 80009ca:	1bdf      	subs	r7, r3, r7
 80009cc:	40b8      	lsls	r0, r7
 80009ce:	1e43      	subs	r3, r0, #1
 80009d0:	4198      	sbcs	r0, r3
 80009d2:	4320      	orrs	r0, r4
 80009d4:	e79f      	b.n	8000916 <__aeabi_fsub+0x24a>
 80009d6:	0005      	movs	r5, r0
 80009d8:	e75e      	b.n	8000898 <__aeabi_fsub+0x1cc>
 80009da:	464b      	mov	r3, r9
 80009dc:	e771      	b.n	80008c2 <__aeabi_fsub+0x1f6>
 80009de:	2320      	movs	r3, #32
 80009e0:	4665      	mov	r5, ip
 80009e2:	4660      	mov	r0, ip
 80009e4:	40cd      	lsrs	r5, r1
 80009e6:	1a59      	subs	r1, r3, r1
 80009e8:	4088      	lsls	r0, r1
 80009ea:	1e43      	subs	r3, r0, #1
 80009ec:	4198      	sbcs	r0, r3
 80009ee:	4328      	orrs	r0, r5
 80009f0:	e71c      	b.n	800082c <__aeabi_fsub+0x160>
 80009f2:	4663      	mov	r3, ip
 80009f4:	000c      	movs	r4, r1
 80009f6:	2501      	movs	r5, #1
 80009f8:	1af0      	subs	r0, r6, r3
 80009fa:	e691      	b.n	8000720 <__aeabi_fsub+0x54>
 80009fc:	2e00      	cmp	r6, #0
 80009fe:	d095      	beq.n	800092c <__aeabi_fsub+0x260>
 8000a00:	000c      	movs	r4, r1
 8000a02:	464f      	mov	r7, r9
 8000a04:	2200      	movs	r2, #0
 8000a06:	e6ac      	b.n	8000762 <__aeabi_fsub+0x96>
 8000a08:	464b      	mov	r3, r9
 8000a0a:	000d      	movs	r5, r1
 8000a0c:	e744      	b.n	8000898 <__aeabi_fsub+0x1cc>
 8000a0e:	464f      	mov	r7, r9
 8000a10:	2200      	movs	r2, #0
 8000a12:	e6a6      	b.n	8000762 <__aeabi_fsub+0x96>
 8000a14:	fbffffff 	.word	0xfbffffff
 8000a18:	7dffffff 	.word	0x7dffffff
 8000a1c:	2800      	cmp	r0, #0
 8000a1e:	d000      	beq.n	8000a22 <__aeabi_fsub+0x356>
 8000a20:	e736      	b.n	8000890 <__aeabi_fsub+0x1c4>
 8000a22:	2400      	movs	r4, #0
 8000a24:	2700      	movs	r7, #0
 8000a26:	e69c      	b.n	8000762 <__aeabi_fsub+0x96>

08000a28 <__aeabi_f2iz>:
 8000a28:	0241      	lsls	r1, r0, #9
 8000a2a:	0042      	lsls	r2, r0, #1
 8000a2c:	0fc3      	lsrs	r3, r0, #31
 8000a2e:	0a49      	lsrs	r1, r1, #9
 8000a30:	2000      	movs	r0, #0
 8000a32:	0e12      	lsrs	r2, r2, #24
 8000a34:	2a7e      	cmp	r2, #126	; 0x7e
 8000a36:	dd03      	ble.n	8000a40 <__aeabi_f2iz+0x18>
 8000a38:	2a9d      	cmp	r2, #157	; 0x9d
 8000a3a:	dd02      	ble.n	8000a42 <__aeabi_f2iz+0x1a>
 8000a3c:	4a09      	ldr	r2, [pc, #36]	; (8000a64 <__aeabi_f2iz+0x3c>)
 8000a3e:	1898      	adds	r0, r3, r2
 8000a40:	4770      	bx	lr
 8000a42:	2080      	movs	r0, #128	; 0x80
 8000a44:	0400      	lsls	r0, r0, #16
 8000a46:	4301      	orrs	r1, r0
 8000a48:	2a95      	cmp	r2, #149	; 0x95
 8000a4a:	dc07      	bgt.n	8000a5c <__aeabi_f2iz+0x34>
 8000a4c:	2096      	movs	r0, #150	; 0x96
 8000a4e:	1a82      	subs	r2, r0, r2
 8000a50:	40d1      	lsrs	r1, r2
 8000a52:	4248      	negs	r0, r1
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d1f3      	bne.n	8000a40 <__aeabi_f2iz+0x18>
 8000a58:	0008      	movs	r0, r1
 8000a5a:	e7f1      	b.n	8000a40 <__aeabi_f2iz+0x18>
 8000a5c:	3a96      	subs	r2, #150	; 0x96
 8000a5e:	4091      	lsls	r1, r2
 8000a60:	e7f7      	b.n	8000a52 <__aeabi_f2iz+0x2a>
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	7fffffff 	.word	0x7fffffff

08000a68 <__aeabi_ui2f>:
 8000a68:	b570      	push	{r4, r5, r6, lr}
 8000a6a:	1e05      	subs	r5, r0, #0
 8000a6c:	d00e      	beq.n	8000a8c <__aeabi_ui2f+0x24>
 8000a6e:	f001 fd55 	bl	800251c <__clzsi2>
 8000a72:	239e      	movs	r3, #158	; 0x9e
 8000a74:	0004      	movs	r4, r0
 8000a76:	1a1b      	subs	r3, r3, r0
 8000a78:	2b96      	cmp	r3, #150	; 0x96
 8000a7a:	dc0c      	bgt.n	8000a96 <__aeabi_ui2f+0x2e>
 8000a7c:	2808      	cmp	r0, #8
 8000a7e:	dd01      	ble.n	8000a84 <__aeabi_ui2f+0x1c>
 8000a80:	3c08      	subs	r4, #8
 8000a82:	40a5      	lsls	r5, r4
 8000a84:	026d      	lsls	r5, r5, #9
 8000a86:	0a6d      	lsrs	r5, r5, #9
 8000a88:	b2d8      	uxtb	r0, r3
 8000a8a:	e001      	b.n	8000a90 <__aeabi_ui2f+0x28>
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	2500      	movs	r5, #0
 8000a90:	05c0      	lsls	r0, r0, #23
 8000a92:	4328      	orrs	r0, r5
 8000a94:	bd70      	pop	{r4, r5, r6, pc}
 8000a96:	2b99      	cmp	r3, #153	; 0x99
 8000a98:	dd09      	ble.n	8000aae <__aeabi_ui2f+0x46>
 8000a9a:	0002      	movs	r2, r0
 8000a9c:	0029      	movs	r1, r5
 8000a9e:	321b      	adds	r2, #27
 8000aa0:	4091      	lsls	r1, r2
 8000aa2:	1e4a      	subs	r2, r1, #1
 8000aa4:	4191      	sbcs	r1, r2
 8000aa6:	2205      	movs	r2, #5
 8000aa8:	1a12      	subs	r2, r2, r0
 8000aaa:	40d5      	lsrs	r5, r2
 8000aac:	430d      	orrs	r5, r1
 8000aae:	2c05      	cmp	r4, #5
 8000ab0:	dc12      	bgt.n	8000ad8 <__aeabi_ui2f+0x70>
 8000ab2:	0029      	movs	r1, r5
 8000ab4:	4e0c      	ldr	r6, [pc, #48]	; (8000ae8 <__aeabi_ui2f+0x80>)
 8000ab6:	4031      	ands	r1, r6
 8000ab8:	076a      	lsls	r2, r5, #29
 8000aba:	d009      	beq.n	8000ad0 <__aeabi_ui2f+0x68>
 8000abc:	200f      	movs	r0, #15
 8000abe:	4028      	ands	r0, r5
 8000ac0:	2804      	cmp	r0, #4
 8000ac2:	d005      	beq.n	8000ad0 <__aeabi_ui2f+0x68>
 8000ac4:	3104      	adds	r1, #4
 8000ac6:	014a      	lsls	r2, r1, #5
 8000ac8:	d502      	bpl.n	8000ad0 <__aeabi_ui2f+0x68>
 8000aca:	239f      	movs	r3, #159	; 0x9f
 8000acc:	4031      	ands	r1, r6
 8000ace:	1b1b      	subs	r3, r3, r4
 8000ad0:	0189      	lsls	r1, r1, #6
 8000ad2:	0a4d      	lsrs	r5, r1, #9
 8000ad4:	b2d8      	uxtb	r0, r3
 8000ad6:	e7db      	b.n	8000a90 <__aeabi_ui2f+0x28>
 8000ad8:	1f62      	subs	r2, r4, #5
 8000ada:	4095      	lsls	r5, r2
 8000adc:	0029      	movs	r1, r5
 8000ade:	4e02      	ldr	r6, [pc, #8]	; (8000ae8 <__aeabi_ui2f+0x80>)
 8000ae0:	4031      	ands	r1, r6
 8000ae2:	076a      	lsls	r2, r5, #29
 8000ae4:	d0f4      	beq.n	8000ad0 <__aeabi_ui2f+0x68>
 8000ae6:	e7e9      	b.n	8000abc <__aeabi_ui2f+0x54>
 8000ae8:	fbffffff 	.word	0xfbffffff

08000aec <__aeabi_dadd>:
 8000aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aee:	464f      	mov	r7, r9
 8000af0:	4646      	mov	r6, r8
 8000af2:	46d6      	mov	lr, sl
 8000af4:	000d      	movs	r5, r1
 8000af6:	0004      	movs	r4, r0
 8000af8:	b5c0      	push	{r6, r7, lr}
 8000afa:	001f      	movs	r7, r3
 8000afc:	0011      	movs	r1, r2
 8000afe:	0328      	lsls	r0, r5, #12
 8000b00:	0f62      	lsrs	r2, r4, #29
 8000b02:	0a40      	lsrs	r0, r0, #9
 8000b04:	4310      	orrs	r0, r2
 8000b06:	007a      	lsls	r2, r7, #1
 8000b08:	0d52      	lsrs	r2, r2, #21
 8000b0a:	00e3      	lsls	r3, r4, #3
 8000b0c:	033c      	lsls	r4, r7, #12
 8000b0e:	4691      	mov	r9, r2
 8000b10:	0a64      	lsrs	r4, r4, #9
 8000b12:	0ffa      	lsrs	r2, r7, #31
 8000b14:	0f4f      	lsrs	r7, r1, #29
 8000b16:	006e      	lsls	r6, r5, #1
 8000b18:	4327      	orrs	r7, r4
 8000b1a:	4692      	mov	sl, r2
 8000b1c:	46b8      	mov	r8, r7
 8000b1e:	0d76      	lsrs	r6, r6, #21
 8000b20:	0fed      	lsrs	r5, r5, #31
 8000b22:	00c9      	lsls	r1, r1, #3
 8000b24:	4295      	cmp	r5, r2
 8000b26:	d100      	bne.n	8000b2a <__aeabi_dadd+0x3e>
 8000b28:	e099      	b.n	8000c5e <__aeabi_dadd+0x172>
 8000b2a:	464c      	mov	r4, r9
 8000b2c:	1b34      	subs	r4, r6, r4
 8000b2e:	46a4      	mov	ip, r4
 8000b30:	2c00      	cmp	r4, #0
 8000b32:	dc00      	bgt.n	8000b36 <__aeabi_dadd+0x4a>
 8000b34:	e07c      	b.n	8000c30 <__aeabi_dadd+0x144>
 8000b36:	464a      	mov	r2, r9
 8000b38:	2a00      	cmp	r2, #0
 8000b3a:	d100      	bne.n	8000b3e <__aeabi_dadd+0x52>
 8000b3c:	e0b8      	b.n	8000cb0 <__aeabi_dadd+0x1c4>
 8000b3e:	4ac5      	ldr	r2, [pc, #788]	; (8000e54 <__aeabi_dadd+0x368>)
 8000b40:	4296      	cmp	r6, r2
 8000b42:	d100      	bne.n	8000b46 <__aeabi_dadd+0x5a>
 8000b44:	e11c      	b.n	8000d80 <__aeabi_dadd+0x294>
 8000b46:	2280      	movs	r2, #128	; 0x80
 8000b48:	003c      	movs	r4, r7
 8000b4a:	0412      	lsls	r2, r2, #16
 8000b4c:	4314      	orrs	r4, r2
 8000b4e:	46a0      	mov	r8, r4
 8000b50:	4662      	mov	r2, ip
 8000b52:	2a38      	cmp	r2, #56	; 0x38
 8000b54:	dd00      	ble.n	8000b58 <__aeabi_dadd+0x6c>
 8000b56:	e161      	b.n	8000e1c <__aeabi_dadd+0x330>
 8000b58:	2a1f      	cmp	r2, #31
 8000b5a:	dd00      	ble.n	8000b5e <__aeabi_dadd+0x72>
 8000b5c:	e1cc      	b.n	8000ef8 <__aeabi_dadd+0x40c>
 8000b5e:	4664      	mov	r4, ip
 8000b60:	2220      	movs	r2, #32
 8000b62:	1b12      	subs	r2, r2, r4
 8000b64:	4644      	mov	r4, r8
 8000b66:	4094      	lsls	r4, r2
 8000b68:	000f      	movs	r7, r1
 8000b6a:	46a1      	mov	r9, r4
 8000b6c:	4664      	mov	r4, ip
 8000b6e:	4091      	lsls	r1, r2
 8000b70:	40e7      	lsrs	r7, r4
 8000b72:	464c      	mov	r4, r9
 8000b74:	1e4a      	subs	r2, r1, #1
 8000b76:	4191      	sbcs	r1, r2
 8000b78:	433c      	orrs	r4, r7
 8000b7a:	4642      	mov	r2, r8
 8000b7c:	4321      	orrs	r1, r4
 8000b7e:	4664      	mov	r4, ip
 8000b80:	40e2      	lsrs	r2, r4
 8000b82:	1a80      	subs	r0, r0, r2
 8000b84:	1a5c      	subs	r4, r3, r1
 8000b86:	42a3      	cmp	r3, r4
 8000b88:	419b      	sbcs	r3, r3
 8000b8a:	425f      	negs	r7, r3
 8000b8c:	1bc7      	subs	r7, r0, r7
 8000b8e:	023b      	lsls	r3, r7, #8
 8000b90:	d400      	bmi.n	8000b94 <__aeabi_dadd+0xa8>
 8000b92:	e0d0      	b.n	8000d36 <__aeabi_dadd+0x24a>
 8000b94:	027f      	lsls	r7, r7, #9
 8000b96:	0a7f      	lsrs	r7, r7, #9
 8000b98:	2f00      	cmp	r7, #0
 8000b9a:	d100      	bne.n	8000b9e <__aeabi_dadd+0xb2>
 8000b9c:	e0ff      	b.n	8000d9e <__aeabi_dadd+0x2b2>
 8000b9e:	0038      	movs	r0, r7
 8000ba0:	f001 fcbc 	bl	800251c <__clzsi2>
 8000ba4:	0001      	movs	r1, r0
 8000ba6:	3908      	subs	r1, #8
 8000ba8:	2320      	movs	r3, #32
 8000baa:	0022      	movs	r2, r4
 8000bac:	1a5b      	subs	r3, r3, r1
 8000bae:	408f      	lsls	r7, r1
 8000bb0:	40da      	lsrs	r2, r3
 8000bb2:	408c      	lsls	r4, r1
 8000bb4:	4317      	orrs	r7, r2
 8000bb6:	42b1      	cmp	r1, r6
 8000bb8:	da00      	bge.n	8000bbc <__aeabi_dadd+0xd0>
 8000bba:	e0ff      	b.n	8000dbc <__aeabi_dadd+0x2d0>
 8000bbc:	1b89      	subs	r1, r1, r6
 8000bbe:	1c4b      	adds	r3, r1, #1
 8000bc0:	2b1f      	cmp	r3, #31
 8000bc2:	dd00      	ble.n	8000bc6 <__aeabi_dadd+0xda>
 8000bc4:	e0a8      	b.n	8000d18 <__aeabi_dadd+0x22c>
 8000bc6:	2220      	movs	r2, #32
 8000bc8:	0039      	movs	r1, r7
 8000bca:	1ad2      	subs	r2, r2, r3
 8000bcc:	0020      	movs	r0, r4
 8000bce:	4094      	lsls	r4, r2
 8000bd0:	4091      	lsls	r1, r2
 8000bd2:	40d8      	lsrs	r0, r3
 8000bd4:	1e62      	subs	r2, r4, #1
 8000bd6:	4194      	sbcs	r4, r2
 8000bd8:	40df      	lsrs	r7, r3
 8000bda:	2600      	movs	r6, #0
 8000bdc:	4301      	orrs	r1, r0
 8000bde:	430c      	orrs	r4, r1
 8000be0:	0763      	lsls	r3, r4, #29
 8000be2:	d009      	beq.n	8000bf8 <__aeabi_dadd+0x10c>
 8000be4:	230f      	movs	r3, #15
 8000be6:	4023      	ands	r3, r4
 8000be8:	2b04      	cmp	r3, #4
 8000bea:	d005      	beq.n	8000bf8 <__aeabi_dadd+0x10c>
 8000bec:	1d23      	adds	r3, r4, #4
 8000bee:	42a3      	cmp	r3, r4
 8000bf0:	41a4      	sbcs	r4, r4
 8000bf2:	4264      	negs	r4, r4
 8000bf4:	193f      	adds	r7, r7, r4
 8000bf6:	001c      	movs	r4, r3
 8000bf8:	023b      	lsls	r3, r7, #8
 8000bfa:	d400      	bmi.n	8000bfe <__aeabi_dadd+0x112>
 8000bfc:	e09e      	b.n	8000d3c <__aeabi_dadd+0x250>
 8000bfe:	4b95      	ldr	r3, [pc, #596]	; (8000e54 <__aeabi_dadd+0x368>)
 8000c00:	3601      	adds	r6, #1
 8000c02:	429e      	cmp	r6, r3
 8000c04:	d100      	bne.n	8000c08 <__aeabi_dadd+0x11c>
 8000c06:	e0b7      	b.n	8000d78 <__aeabi_dadd+0x28c>
 8000c08:	4a93      	ldr	r2, [pc, #588]	; (8000e58 <__aeabi_dadd+0x36c>)
 8000c0a:	08e4      	lsrs	r4, r4, #3
 8000c0c:	4017      	ands	r7, r2
 8000c0e:	077b      	lsls	r3, r7, #29
 8000c10:	0571      	lsls	r1, r6, #21
 8000c12:	027f      	lsls	r7, r7, #9
 8000c14:	4323      	orrs	r3, r4
 8000c16:	0b3f      	lsrs	r7, r7, #12
 8000c18:	0d4a      	lsrs	r2, r1, #21
 8000c1a:	0512      	lsls	r2, r2, #20
 8000c1c:	433a      	orrs	r2, r7
 8000c1e:	07ed      	lsls	r5, r5, #31
 8000c20:	432a      	orrs	r2, r5
 8000c22:	0018      	movs	r0, r3
 8000c24:	0011      	movs	r1, r2
 8000c26:	bce0      	pop	{r5, r6, r7}
 8000c28:	46ba      	mov	sl, r7
 8000c2a:	46b1      	mov	r9, r6
 8000c2c:	46a8      	mov	r8, r5
 8000c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c30:	2c00      	cmp	r4, #0
 8000c32:	d04b      	beq.n	8000ccc <__aeabi_dadd+0x1e0>
 8000c34:	464c      	mov	r4, r9
 8000c36:	1ba4      	subs	r4, r4, r6
 8000c38:	46a4      	mov	ip, r4
 8000c3a:	2e00      	cmp	r6, #0
 8000c3c:	d000      	beq.n	8000c40 <__aeabi_dadd+0x154>
 8000c3e:	e123      	b.n	8000e88 <__aeabi_dadd+0x39c>
 8000c40:	0004      	movs	r4, r0
 8000c42:	431c      	orrs	r4, r3
 8000c44:	d100      	bne.n	8000c48 <__aeabi_dadd+0x15c>
 8000c46:	e1af      	b.n	8000fa8 <__aeabi_dadd+0x4bc>
 8000c48:	4662      	mov	r2, ip
 8000c4a:	1e54      	subs	r4, r2, #1
 8000c4c:	2a01      	cmp	r2, #1
 8000c4e:	d100      	bne.n	8000c52 <__aeabi_dadd+0x166>
 8000c50:	e215      	b.n	800107e <__aeabi_dadd+0x592>
 8000c52:	4d80      	ldr	r5, [pc, #512]	; (8000e54 <__aeabi_dadd+0x368>)
 8000c54:	45ac      	cmp	ip, r5
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x16e>
 8000c58:	e1c8      	b.n	8000fec <__aeabi_dadd+0x500>
 8000c5a:	46a4      	mov	ip, r4
 8000c5c:	e11b      	b.n	8000e96 <__aeabi_dadd+0x3aa>
 8000c5e:	464a      	mov	r2, r9
 8000c60:	1ab2      	subs	r2, r6, r2
 8000c62:	4694      	mov	ip, r2
 8000c64:	2a00      	cmp	r2, #0
 8000c66:	dc00      	bgt.n	8000c6a <__aeabi_dadd+0x17e>
 8000c68:	e0ac      	b.n	8000dc4 <__aeabi_dadd+0x2d8>
 8000c6a:	464a      	mov	r2, r9
 8000c6c:	2a00      	cmp	r2, #0
 8000c6e:	d043      	beq.n	8000cf8 <__aeabi_dadd+0x20c>
 8000c70:	4a78      	ldr	r2, [pc, #480]	; (8000e54 <__aeabi_dadd+0x368>)
 8000c72:	4296      	cmp	r6, r2
 8000c74:	d100      	bne.n	8000c78 <__aeabi_dadd+0x18c>
 8000c76:	e1af      	b.n	8000fd8 <__aeabi_dadd+0x4ec>
 8000c78:	2280      	movs	r2, #128	; 0x80
 8000c7a:	003c      	movs	r4, r7
 8000c7c:	0412      	lsls	r2, r2, #16
 8000c7e:	4314      	orrs	r4, r2
 8000c80:	46a0      	mov	r8, r4
 8000c82:	4662      	mov	r2, ip
 8000c84:	2a38      	cmp	r2, #56	; 0x38
 8000c86:	dc67      	bgt.n	8000d58 <__aeabi_dadd+0x26c>
 8000c88:	2a1f      	cmp	r2, #31
 8000c8a:	dc00      	bgt.n	8000c8e <__aeabi_dadd+0x1a2>
 8000c8c:	e15f      	b.n	8000f4e <__aeabi_dadd+0x462>
 8000c8e:	4647      	mov	r7, r8
 8000c90:	3a20      	subs	r2, #32
 8000c92:	40d7      	lsrs	r7, r2
 8000c94:	4662      	mov	r2, ip
 8000c96:	2a20      	cmp	r2, #32
 8000c98:	d005      	beq.n	8000ca6 <__aeabi_dadd+0x1ba>
 8000c9a:	4664      	mov	r4, ip
 8000c9c:	2240      	movs	r2, #64	; 0x40
 8000c9e:	1b12      	subs	r2, r2, r4
 8000ca0:	4644      	mov	r4, r8
 8000ca2:	4094      	lsls	r4, r2
 8000ca4:	4321      	orrs	r1, r4
 8000ca6:	1e4a      	subs	r2, r1, #1
 8000ca8:	4191      	sbcs	r1, r2
 8000caa:	000c      	movs	r4, r1
 8000cac:	433c      	orrs	r4, r7
 8000cae:	e057      	b.n	8000d60 <__aeabi_dadd+0x274>
 8000cb0:	003a      	movs	r2, r7
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	d100      	bne.n	8000cb8 <__aeabi_dadd+0x1cc>
 8000cb6:	e105      	b.n	8000ec4 <__aeabi_dadd+0x3d8>
 8000cb8:	0022      	movs	r2, r4
 8000cba:	3a01      	subs	r2, #1
 8000cbc:	2c01      	cmp	r4, #1
 8000cbe:	d100      	bne.n	8000cc2 <__aeabi_dadd+0x1d6>
 8000cc0:	e182      	b.n	8000fc8 <__aeabi_dadd+0x4dc>
 8000cc2:	4c64      	ldr	r4, [pc, #400]	; (8000e54 <__aeabi_dadd+0x368>)
 8000cc4:	45a4      	cmp	ip, r4
 8000cc6:	d05b      	beq.n	8000d80 <__aeabi_dadd+0x294>
 8000cc8:	4694      	mov	ip, r2
 8000cca:	e741      	b.n	8000b50 <__aeabi_dadd+0x64>
 8000ccc:	4c63      	ldr	r4, [pc, #396]	; (8000e5c <__aeabi_dadd+0x370>)
 8000cce:	1c77      	adds	r7, r6, #1
 8000cd0:	4227      	tst	r7, r4
 8000cd2:	d000      	beq.n	8000cd6 <__aeabi_dadd+0x1ea>
 8000cd4:	e0c4      	b.n	8000e60 <__aeabi_dadd+0x374>
 8000cd6:	0004      	movs	r4, r0
 8000cd8:	431c      	orrs	r4, r3
 8000cda:	2e00      	cmp	r6, #0
 8000cdc:	d000      	beq.n	8000ce0 <__aeabi_dadd+0x1f4>
 8000cde:	e169      	b.n	8000fb4 <__aeabi_dadd+0x4c8>
 8000ce0:	2c00      	cmp	r4, #0
 8000ce2:	d100      	bne.n	8000ce6 <__aeabi_dadd+0x1fa>
 8000ce4:	e1bf      	b.n	8001066 <__aeabi_dadd+0x57a>
 8000ce6:	4644      	mov	r4, r8
 8000ce8:	430c      	orrs	r4, r1
 8000cea:	d000      	beq.n	8000cee <__aeabi_dadd+0x202>
 8000cec:	e1d0      	b.n	8001090 <__aeabi_dadd+0x5a4>
 8000cee:	0742      	lsls	r2, r0, #29
 8000cf0:	08db      	lsrs	r3, r3, #3
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	08c0      	lsrs	r0, r0, #3
 8000cf6:	e029      	b.n	8000d4c <__aeabi_dadd+0x260>
 8000cf8:	003a      	movs	r2, r7
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	d100      	bne.n	8000d00 <__aeabi_dadd+0x214>
 8000cfe:	e170      	b.n	8000fe2 <__aeabi_dadd+0x4f6>
 8000d00:	4662      	mov	r2, ip
 8000d02:	4664      	mov	r4, ip
 8000d04:	3a01      	subs	r2, #1
 8000d06:	2c01      	cmp	r4, #1
 8000d08:	d100      	bne.n	8000d0c <__aeabi_dadd+0x220>
 8000d0a:	e0e0      	b.n	8000ece <__aeabi_dadd+0x3e2>
 8000d0c:	4c51      	ldr	r4, [pc, #324]	; (8000e54 <__aeabi_dadd+0x368>)
 8000d0e:	45a4      	cmp	ip, r4
 8000d10:	d100      	bne.n	8000d14 <__aeabi_dadd+0x228>
 8000d12:	e161      	b.n	8000fd8 <__aeabi_dadd+0x4ec>
 8000d14:	4694      	mov	ip, r2
 8000d16:	e7b4      	b.n	8000c82 <__aeabi_dadd+0x196>
 8000d18:	003a      	movs	r2, r7
 8000d1a:	391f      	subs	r1, #31
 8000d1c:	40ca      	lsrs	r2, r1
 8000d1e:	0011      	movs	r1, r2
 8000d20:	2b20      	cmp	r3, #32
 8000d22:	d003      	beq.n	8000d2c <__aeabi_dadd+0x240>
 8000d24:	2240      	movs	r2, #64	; 0x40
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	409f      	lsls	r7, r3
 8000d2a:	433c      	orrs	r4, r7
 8000d2c:	1e63      	subs	r3, r4, #1
 8000d2e:	419c      	sbcs	r4, r3
 8000d30:	2700      	movs	r7, #0
 8000d32:	2600      	movs	r6, #0
 8000d34:	430c      	orrs	r4, r1
 8000d36:	0763      	lsls	r3, r4, #29
 8000d38:	d000      	beq.n	8000d3c <__aeabi_dadd+0x250>
 8000d3a:	e753      	b.n	8000be4 <__aeabi_dadd+0xf8>
 8000d3c:	46b4      	mov	ip, r6
 8000d3e:	08e4      	lsrs	r4, r4, #3
 8000d40:	077b      	lsls	r3, r7, #29
 8000d42:	4323      	orrs	r3, r4
 8000d44:	08f8      	lsrs	r0, r7, #3
 8000d46:	4a43      	ldr	r2, [pc, #268]	; (8000e54 <__aeabi_dadd+0x368>)
 8000d48:	4594      	cmp	ip, r2
 8000d4a:	d01d      	beq.n	8000d88 <__aeabi_dadd+0x29c>
 8000d4c:	4662      	mov	r2, ip
 8000d4e:	0307      	lsls	r7, r0, #12
 8000d50:	0552      	lsls	r2, r2, #21
 8000d52:	0b3f      	lsrs	r7, r7, #12
 8000d54:	0d52      	lsrs	r2, r2, #21
 8000d56:	e760      	b.n	8000c1a <__aeabi_dadd+0x12e>
 8000d58:	4644      	mov	r4, r8
 8000d5a:	430c      	orrs	r4, r1
 8000d5c:	1e62      	subs	r2, r4, #1
 8000d5e:	4194      	sbcs	r4, r2
 8000d60:	18e4      	adds	r4, r4, r3
 8000d62:	429c      	cmp	r4, r3
 8000d64:	419b      	sbcs	r3, r3
 8000d66:	425f      	negs	r7, r3
 8000d68:	183f      	adds	r7, r7, r0
 8000d6a:	023b      	lsls	r3, r7, #8
 8000d6c:	d5e3      	bpl.n	8000d36 <__aeabi_dadd+0x24a>
 8000d6e:	4b39      	ldr	r3, [pc, #228]	; (8000e54 <__aeabi_dadd+0x368>)
 8000d70:	3601      	adds	r6, #1
 8000d72:	429e      	cmp	r6, r3
 8000d74:	d000      	beq.n	8000d78 <__aeabi_dadd+0x28c>
 8000d76:	e0b5      	b.n	8000ee4 <__aeabi_dadd+0x3f8>
 8000d78:	0032      	movs	r2, r6
 8000d7a:	2700      	movs	r7, #0
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	e74c      	b.n	8000c1a <__aeabi_dadd+0x12e>
 8000d80:	0742      	lsls	r2, r0, #29
 8000d82:	08db      	lsrs	r3, r3, #3
 8000d84:	4313      	orrs	r3, r2
 8000d86:	08c0      	lsrs	r0, r0, #3
 8000d88:	001a      	movs	r2, r3
 8000d8a:	4302      	orrs	r2, r0
 8000d8c:	d100      	bne.n	8000d90 <__aeabi_dadd+0x2a4>
 8000d8e:	e1e1      	b.n	8001154 <__aeabi_dadd+0x668>
 8000d90:	2780      	movs	r7, #128	; 0x80
 8000d92:	033f      	lsls	r7, r7, #12
 8000d94:	4307      	orrs	r7, r0
 8000d96:	033f      	lsls	r7, r7, #12
 8000d98:	4a2e      	ldr	r2, [pc, #184]	; (8000e54 <__aeabi_dadd+0x368>)
 8000d9a:	0b3f      	lsrs	r7, r7, #12
 8000d9c:	e73d      	b.n	8000c1a <__aeabi_dadd+0x12e>
 8000d9e:	0020      	movs	r0, r4
 8000da0:	f001 fbbc 	bl	800251c <__clzsi2>
 8000da4:	0001      	movs	r1, r0
 8000da6:	3118      	adds	r1, #24
 8000da8:	291f      	cmp	r1, #31
 8000daa:	dc00      	bgt.n	8000dae <__aeabi_dadd+0x2c2>
 8000dac:	e6fc      	b.n	8000ba8 <__aeabi_dadd+0xbc>
 8000dae:	3808      	subs	r0, #8
 8000db0:	4084      	lsls	r4, r0
 8000db2:	0027      	movs	r7, r4
 8000db4:	2400      	movs	r4, #0
 8000db6:	42b1      	cmp	r1, r6
 8000db8:	db00      	blt.n	8000dbc <__aeabi_dadd+0x2d0>
 8000dba:	e6ff      	b.n	8000bbc <__aeabi_dadd+0xd0>
 8000dbc:	4a26      	ldr	r2, [pc, #152]	; (8000e58 <__aeabi_dadd+0x36c>)
 8000dbe:	1a76      	subs	r6, r6, r1
 8000dc0:	4017      	ands	r7, r2
 8000dc2:	e70d      	b.n	8000be0 <__aeabi_dadd+0xf4>
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	d02f      	beq.n	8000e28 <__aeabi_dadd+0x33c>
 8000dc8:	464a      	mov	r2, r9
 8000dca:	1b92      	subs	r2, r2, r6
 8000dcc:	4694      	mov	ip, r2
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_dadd+0x2e8>
 8000dd2:	e0ad      	b.n	8000f30 <__aeabi_dadd+0x444>
 8000dd4:	4a1f      	ldr	r2, [pc, #124]	; (8000e54 <__aeabi_dadd+0x368>)
 8000dd6:	4591      	cmp	r9, r2
 8000dd8:	d100      	bne.n	8000ddc <__aeabi_dadd+0x2f0>
 8000dda:	e10f      	b.n	8000ffc <__aeabi_dadd+0x510>
 8000ddc:	2280      	movs	r2, #128	; 0x80
 8000dde:	0412      	lsls	r2, r2, #16
 8000de0:	4310      	orrs	r0, r2
 8000de2:	4662      	mov	r2, ip
 8000de4:	2a38      	cmp	r2, #56	; 0x38
 8000de6:	dd00      	ble.n	8000dea <__aeabi_dadd+0x2fe>
 8000de8:	e10f      	b.n	800100a <__aeabi_dadd+0x51e>
 8000dea:	2a1f      	cmp	r2, #31
 8000dec:	dd00      	ble.n	8000df0 <__aeabi_dadd+0x304>
 8000dee:	e180      	b.n	80010f2 <__aeabi_dadd+0x606>
 8000df0:	4664      	mov	r4, ip
 8000df2:	2220      	movs	r2, #32
 8000df4:	001e      	movs	r6, r3
 8000df6:	1b12      	subs	r2, r2, r4
 8000df8:	4667      	mov	r7, ip
 8000dfa:	0004      	movs	r4, r0
 8000dfc:	4093      	lsls	r3, r2
 8000dfe:	4094      	lsls	r4, r2
 8000e00:	40fe      	lsrs	r6, r7
 8000e02:	1e5a      	subs	r2, r3, #1
 8000e04:	4193      	sbcs	r3, r2
 8000e06:	40f8      	lsrs	r0, r7
 8000e08:	4334      	orrs	r4, r6
 8000e0a:	431c      	orrs	r4, r3
 8000e0c:	4480      	add	r8, r0
 8000e0e:	1864      	adds	r4, r4, r1
 8000e10:	428c      	cmp	r4, r1
 8000e12:	41bf      	sbcs	r7, r7
 8000e14:	427f      	negs	r7, r7
 8000e16:	464e      	mov	r6, r9
 8000e18:	4447      	add	r7, r8
 8000e1a:	e7a6      	b.n	8000d6a <__aeabi_dadd+0x27e>
 8000e1c:	4642      	mov	r2, r8
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	0011      	movs	r1, r2
 8000e22:	1e4a      	subs	r2, r1, #1
 8000e24:	4191      	sbcs	r1, r2
 8000e26:	e6ad      	b.n	8000b84 <__aeabi_dadd+0x98>
 8000e28:	4c0c      	ldr	r4, [pc, #48]	; (8000e5c <__aeabi_dadd+0x370>)
 8000e2a:	1c72      	adds	r2, r6, #1
 8000e2c:	4222      	tst	r2, r4
 8000e2e:	d000      	beq.n	8000e32 <__aeabi_dadd+0x346>
 8000e30:	e0a1      	b.n	8000f76 <__aeabi_dadd+0x48a>
 8000e32:	0002      	movs	r2, r0
 8000e34:	431a      	orrs	r2, r3
 8000e36:	2e00      	cmp	r6, #0
 8000e38:	d000      	beq.n	8000e3c <__aeabi_dadd+0x350>
 8000e3a:	e0fa      	b.n	8001032 <__aeabi_dadd+0x546>
 8000e3c:	2a00      	cmp	r2, #0
 8000e3e:	d100      	bne.n	8000e42 <__aeabi_dadd+0x356>
 8000e40:	e145      	b.n	80010ce <__aeabi_dadd+0x5e2>
 8000e42:	003a      	movs	r2, r7
 8000e44:	430a      	orrs	r2, r1
 8000e46:	d000      	beq.n	8000e4a <__aeabi_dadd+0x35e>
 8000e48:	e146      	b.n	80010d8 <__aeabi_dadd+0x5ec>
 8000e4a:	0742      	lsls	r2, r0, #29
 8000e4c:	08db      	lsrs	r3, r3, #3
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	08c0      	lsrs	r0, r0, #3
 8000e52:	e77b      	b.n	8000d4c <__aeabi_dadd+0x260>
 8000e54:	000007ff 	.word	0x000007ff
 8000e58:	ff7fffff 	.word	0xff7fffff
 8000e5c:	000007fe 	.word	0x000007fe
 8000e60:	4647      	mov	r7, r8
 8000e62:	1a5c      	subs	r4, r3, r1
 8000e64:	1bc2      	subs	r2, r0, r7
 8000e66:	42a3      	cmp	r3, r4
 8000e68:	41bf      	sbcs	r7, r7
 8000e6a:	427f      	negs	r7, r7
 8000e6c:	46b9      	mov	r9, r7
 8000e6e:	0017      	movs	r7, r2
 8000e70:	464a      	mov	r2, r9
 8000e72:	1abf      	subs	r7, r7, r2
 8000e74:	023a      	lsls	r2, r7, #8
 8000e76:	d500      	bpl.n	8000e7a <__aeabi_dadd+0x38e>
 8000e78:	e08d      	b.n	8000f96 <__aeabi_dadd+0x4aa>
 8000e7a:	0023      	movs	r3, r4
 8000e7c:	433b      	orrs	r3, r7
 8000e7e:	d000      	beq.n	8000e82 <__aeabi_dadd+0x396>
 8000e80:	e68a      	b.n	8000b98 <__aeabi_dadd+0xac>
 8000e82:	2000      	movs	r0, #0
 8000e84:	2500      	movs	r5, #0
 8000e86:	e761      	b.n	8000d4c <__aeabi_dadd+0x260>
 8000e88:	4cb4      	ldr	r4, [pc, #720]	; (800115c <__aeabi_dadd+0x670>)
 8000e8a:	45a1      	cmp	r9, r4
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_dadd+0x3a4>
 8000e8e:	e0ad      	b.n	8000fec <__aeabi_dadd+0x500>
 8000e90:	2480      	movs	r4, #128	; 0x80
 8000e92:	0424      	lsls	r4, r4, #16
 8000e94:	4320      	orrs	r0, r4
 8000e96:	4664      	mov	r4, ip
 8000e98:	2c38      	cmp	r4, #56	; 0x38
 8000e9a:	dc3d      	bgt.n	8000f18 <__aeabi_dadd+0x42c>
 8000e9c:	4662      	mov	r2, ip
 8000e9e:	2c1f      	cmp	r4, #31
 8000ea0:	dd00      	ble.n	8000ea4 <__aeabi_dadd+0x3b8>
 8000ea2:	e0b7      	b.n	8001014 <__aeabi_dadd+0x528>
 8000ea4:	2520      	movs	r5, #32
 8000ea6:	001e      	movs	r6, r3
 8000ea8:	1b2d      	subs	r5, r5, r4
 8000eaa:	0004      	movs	r4, r0
 8000eac:	40ab      	lsls	r3, r5
 8000eae:	40ac      	lsls	r4, r5
 8000eb0:	40d6      	lsrs	r6, r2
 8000eb2:	40d0      	lsrs	r0, r2
 8000eb4:	4642      	mov	r2, r8
 8000eb6:	1e5d      	subs	r5, r3, #1
 8000eb8:	41ab      	sbcs	r3, r5
 8000eba:	4334      	orrs	r4, r6
 8000ebc:	1a12      	subs	r2, r2, r0
 8000ebe:	4690      	mov	r8, r2
 8000ec0:	4323      	orrs	r3, r4
 8000ec2:	e02c      	b.n	8000f1e <__aeabi_dadd+0x432>
 8000ec4:	0742      	lsls	r2, r0, #29
 8000ec6:	08db      	lsrs	r3, r3, #3
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	08c0      	lsrs	r0, r0, #3
 8000ecc:	e73b      	b.n	8000d46 <__aeabi_dadd+0x25a>
 8000ece:	185c      	adds	r4, r3, r1
 8000ed0:	429c      	cmp	r4, r3
 8000ed2:	419b      	sbcs	r3, r3
 8000ed4:	4440      	add	r0, r8
 8000ed6:	425b      	negs	r3, r3
 8000ed8:	18c7      	adds	r7, r0, r3
 8000eda:	2601      	movs	r6, #1
 8000edc:	023b      	lsls	r3, r7, #8
 8000ede:	d400      	bmi.n	8000ee2 <__aeabi_dadd+0x3f6>
 8000ee0:	e729      	b.n	8000d36 <__aeabi_dadd+0x24a>
 8000ee2:	2602      	movs	r6, #2
 8000ee4:	4a9e      	ldr	r2, [pc, #632]	; (8001160 <__aeabi_dadd+0x674>)
 8000ee6:	0863      	lsrs	r3, r4, #1
 8000ee8:	4017      	ands	r7, r2
 8000eea:	2201      	movs	r2, #1
 8000eec:	4014      	ands	r4, r2
 8000eee:	431c      	orrs	r4, r3
 8000ef0:	07fb      	lsls	r3, r7, #31
 8000ef2:	431c      	orrs	r4, r3
 8000ef4:	087f      	lsrs	r7, r7, #1
 8000ef6:	e673      	b.n	8000be0 <__aeabi_dadd+0xf4>
 8000ef8:	4644      	mov	r4, r8
 8000efa:	3a20      	subs	r2, #32
 8000efc:	40d4      	lsrs	r4, r2
 8000efe:	4662      	mov	r2, ip
 8000f00:	2a20      	cmp	r2, #32
 8000f02:	d005      	beq.n	8000f10 <__aeabi_dadd+0x424>
 8000f04:	4667      	mov	r7, ip
 8000f06:	2240      	movs	r2, #64	; 0x40
 8000f08:	1bd2      	subs	r2, r2, r7
 8000f0a:	4647      	mov	r7, r8
 8000f0c:	4097      	lsls	r7, r2
 8000f0e:	4339      	orrs	r1, r7
 8000f10:	1e4a      	subs	r2, r1, #1
 8000f12:	4191      	sbcs	r1, r2
 8000f14:	4321      	orrs	r1, r4
 8000f16:	e635      	b.n	8000b84 <__aeabi_dadd+0x98>
 8000f18:	4303      	orrs	r3, r0
 8000f1a:	1e58      	subs	r0, r3, #1
 8000f1c:	4183      	sbcs	r3, r0
 8000f1e:	1acc      	subs	r4, r1, r3
 8000f20:	42a1      	cmp	r1, r4
 8000f22:	41bf      	sbcs	r7, r7
 8000f24:	4643      	mov	r3, r8
 8000f26:	427f      	negs	r7, r7
 8000f28:	4655      	mov	r5, sl
 8000f2a:	464e      	mov	r6, r9
 8000f2c:	1bdf      	subs	r7, r3, r7
 8000f2e:	e62e      	b.n	8000b8e <__aeabi_dadd+0xa2>
 8000f30:	0002      	movs	r2, r0
 8000f32:	431a      	orrs	r2, r3
 8000f34:	d100      	bne.n	8000f38 <__aeabi_dadd+0x44c>
 8000f36:	e0bd      	b.n	80010b4 <__aeabi_dadd+0x5c8>
 8000f38:	4662      	mov	r2, ip
 8000f3a:	4664      	mov	r4, ip
 8000f3c:	3a01      	subs	r2, #1
 8000f3e:	2c01      	cmp	r4, #1
 8000f40:	d100      	bne.n	8000f44 <__aeabi_dadd+0x458>
 8000f42:	e0e5      	b.n	8001110 <__aeabi_dadd+0x624>
 8000f44:	4c85      	ldr	r4, [pc, #532]	; (800115c <__aeabi_dadd+0x670>)
 8000f46:	45a4      	cmp	ip, r4
 8000f48:	d058      	beq.n	8000ffc <__aeabi_dadd+0x510>
 8000f4a:	4694      	mov	ip, r2
 8000f4c:	e749      	b.n	8000de2 <__aeabi_dadd+0x2f6>
 8000f4e:	4664      	mov	r4, ip
 8000f50:	2220      	movs	r2, #32
 8000f52:	1b12      	subs	r2, r2, r4
 8000f54:	4644      	mov	r4, r8
 8000f56:	4094      	lsls	r4, r2
 8000f58:	000f      	movs	r7, r1
 8000f5a:	46a1      	mov	r9, r4
 8000f5c:	4664      	mov	r4, ip
 8000f5e:	4091      	lsls	r1, r2
 8000f60:	40e7      	lsrs	r7, r4
 8000f62:	464c      	mov	r4, r9
 8000f64:	1e4a      	subs	r2, r1, #1
 8000f66:	4191      	sbcs	r1, r2
 8000f68:	433c      	orrs	r4, r7
 8000f6a:	4642      	mov	r2, r8
 8000f6c:	430c      	orrs	r4, r1
 8000f6e:	4661      	mov	r1, ip
 8000f70:	40ca      	lsrs	r2, r1
 8000f72:	1880      	adds	r0, r0, r2
 8000f74:	e6f4      	b.n	8000d60 <__aeabi_dadd+0x274>
 8000f76:	4c79      	ldr	r4, [pc, #484]	; (800115c <__aeabi_dadd+0x670>)
 8000f78:	42a2      	cmp	r2, r4
 8000f7a:	d100      	bne.n	8000f7e <__aeabi_dadd+0x492>
 8000f7c:	e6fd      	b.n	8000d7a <__aeabi_dadd+0x28e>
 8000f7e:	1859      	adds	r1, r3, r1
 8000f80:	4299      	cmp	r1, r3
 8000f82:	419b      	sbcs	r3, r3
 8000f84:	4440      	add	r0, r8
 8000f86:	425f      	negs	r7, r3
 8000f88:	19c7      	adds	r7, r0, r7
 8000f8a:	07fc      	lsls	r4, r7, #31
 8000f8c:	0849      	lsrs	r1, r1, #1
 8000f8e:	0016      	movs	r6, r2
 8000f90:	430c      	orrs	r4, r1
 8000f92:	087f      	lsrs	r7, r7, #1
 8000f94:	e6cf      	b.n	8000d36 <__aeabi_dadd+0x24a>
 8000f96:	1acc      	subs	r4, r1, r3
 8000f98:	42a1      	cmp	r1, r4
 8000f9a:	41bf      	sbcs	r7, r7
 8000f9c:	4643      	mov	r3, r8
 8000f9e:	427f      	negs	r7, r7
 8000fa0:	1a18      	subs	r0, r3, r0
 8000fa2:	4655      	mov	r5, sl
 8000fa4:	1bc7      	subs	r7, r0, r7
 8000fa6:	e5f7      	b.n	8000b98 <__aeabi_dadd+0xac>
 8000fa8:	08c9      	lsrs	r1, r1, #3
 8000faa:	077b      	lsls	r3, r7, #29
 8000fac:	4655      	mov	r5, sl
 8000fae:	430b      	orrs	r3, r1
 8000fb0:	08f8      	lsrs	r0, r7, #3
 8000fb2:	e6c8      	b.n	8000d46 <__aeabi_dadd+0x25a>
 8000fb4:	2c00      	cmp	r4, #0
 8000fb6:	d000      	beq.n	8000fba <__aeabi_dadd+0x4ce>
 8000fb8:	e081      	b.n	80010be <__aeabi_dadd+0x5d2>
 8000fba:	4643      	mov	r3, r8
 8000fbc:	430b      	orrs	r3, r1
 8000fbe:	d115      	bne.n	8000fec <__aeabi_dadd+0x500>
 8000fc0:	2080      	movs	r0, #128	; 0x80
 8000fc2:	2500      	movs	r5, #0
 8000fc4:	0300      	lsls	r0, r0, #12
 8000fc6:	e6e3      	b.n	8000d90 <__aeabi_dadd+0x2a4>
 8000fc8:	1a5c      	subs	r4, r3, r1
 8000fca:	42a3      	cmp	r3, r4
 8000fcc:	419b      	sbcs	r3, r3
 8000fce:	1bc7      	subs	r7, r0, r7
 8000fd0:	425b      	negs	r3, r3
 8000fd2:	2601      	movs	r6, #1
 8000fd4:	1aff      	subs	r7, r7, r3
 8000fd6:	e5da      	b.n	8000b8e <__aeabi_dadd+0xa2>
 8000fd8:	0742      	lsls	r2, r0, #29
 8000fda:	08db      	lsrs	r3, r3, #3
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	08c0      	lsrs	r0, r0, #3
 8000fe0:	e6d2      	b.n	8000d88 <__aeabi_dadd+0x29c>
 8000fe2:	0742      	lsls	r2, r0, #29
 8000fe4:	08db      	lsrs	r3, r3, #3
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	08c0      	lsrs	r0, r0, #3
 8000fea:	e6ac      	b.n	8000d46 <__aeabi_dadd+0x25a>
 8000fec:	4643      	mov	r3, r8
 8000fee:	4642      	mov	r2, r8
 8000ff0:	08c9      	lsrs	r1, r1, #3
 8000ff2:	075b      	lsls	r3, r3, #29
 8000ff4:	4655      	mov	r5, sl
 8000ff6:	430b      	orrs	r3, r1
 8000ff8:	08d0      	lsrs	r0, r2, #3
 8000ffa:	e6c5      	b.n	8000d88 <__aeabi_dadd+0x29c>
 8000ffc:	4643      	mov	r3, r8
 8000ffe:	4642      	mov	r2, r8
 8001000:	075b      	lsls	r3, r3, #29
 8001002:	08c9      	lsrs	r1, r1, #3
 8001004:	430b      	orrs	r3, r1
 8001006:	08d0      	lsrs	r0, r2, #3
 8001008:	e6be      	b.n	8000d88 <__aeabi_dadd+0x29c>
 800100a:	4303      	orrs	r3, r0
 800100c:	001c      	movs	r4, r3
 800100e:	1e63      	subs	r3, r4, #1
 8001010:	419c      	sbcs	r4, r3
 8001012:	e6fc      	b.n	8000e0e <__aeabi_dadd+0x322>
 8001014:	0002      	movs	r2, r0
 8001016:	3c20      	subs	r4, #32
 8001018:	40e2      	lsrs	r2, r4
 800101a:	0014      	movs	r4, r2
 800101c:	4662      	mov	r2, ip
 800101e:	2a20      	cmp	r2, #32
 8001020:	d003      	beq.n	800102a <__aeabi_dadd+0x53e>
 8001022:	2540      	movs	r5, #64	; 0x40
 8001024:	1aad      	subs	r5, r5, r2
 8001026:	40a8      	lsls	r0, r5
 8001028:	4303      	orrs	r3, r0
 800102a:	1e58      	subs	r0, r3, #1
 800102c:	4183      	sbcs	r3, r0
 800102e:	4323      	orrs	r3, r4
 8001030:	e775      	b.n	8000f1e <__aeabi_dadd+0x432>
 8001032:	2a00      	cmp	r2, #0
 8001034:	d0e2      	beq.n	8000ffc <__aeabi_dadd+0x510>
 8001036:	003a      	movs	r2, r7
 8001038:	430a      	orrs	r2, r1
 800103a:	d0cd      	beq.n	8000fd8 <__aeabi_dadd+0x4ec>
 800103c:	0742      	lsls	r2, r0, #29
 800103e:	08db      	lsrs	r3, r3, #3
 8001040:	4313      	orrs	r3, r2
 8001042:	2280      	movs	r2, #128	; 0x80
 8001044:	08c0      	lsrs	r0, r0, #3
 8001046:	0312      	lsls	r2, r2, #12
 8001048:	4210      	tst	r0, r2
 800104a:	d006      	beq.n	800105a <__aeabi_dadd+0x56e>
 800104c:	08fc      	lsrs	r4, r7, #3
 800104e:	4214      	tst	r4, r2
 8001050:	d103      	bne.n	800105a <__aeabi_dadd+0x56e>
 8001052:	0020      	movs	r0, r4
 8001054:	08cb      	lsrs	r3, r1, #3
 8001056:	077a      	lsls	r2, r7, #29
 8001058:	4313      	orrs	r3, r2
 800105a:	0f5a      	lsrs	r2, r3, #29
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	0752      	lsls	r2, r2, #29
 8001060:	08db      	lsrs	r3, r3, #3
 8001062:	4313      	orrs	r3, r2
 8001064:	e690      	b.n	8000d88 <__aeabi_dadd+0x29c>
 8001066:	4643      	mov	r3, r8
 8001068:	430b      	orrs	r3, r1
 800106a:	d100      	bne.n	800106e <__aeabi_dadd+0x582>
 800106c:	e709      	b.n	8000e82 <__aeabi_dadd+0x396>
 800106e:	4643      	mov	r3, r8
 8001070:	4642      	mov	r2, r8
 8001072:	08c9      	lsrs	r1, r1, #3
 8001074:	075b      	lsls	r3, r3, #29
 8001076:	4655      	mov	r5, sl
 8001078:	430b      	orrs	r3, r1
 800107a:	08d0      	lsrs	r0, r2, #3
 800107c:	e666      	b.n	8000d4c <__aeabi_dadd+0x260>
 800107e:	1acc      	subs	r4, r1, r3
 8001080:	42a1      	cmp	r1, r4
 8001082:	4189      	sbcs	r1, r1
 8001084:	1a3f      	subs	r7, r7, r0
 8001086:	4249      	negs	r1, r1
 8001088:	4655      	mov	r5, sl
 800108a:	2601      	movs	r6, #1
 800108c:	1a7f      	subs	r7, r7, r1
 800108e:	e57e      	b.n	8000b8e <__aeabi_dadd+0xa2>
 8001090:	4642      	mov	r2, r8
 8001092:	1a5c      	subs	r4, r3, r1
 8001094:	1a87      	subs	r7, r0, r2
 8001096:	42a3      	cmp	r3, r4
 8001098:	4192      	sbcs	r2, r2
 800109a:	4252      	negs	r2, r2
 800109c:	1abf      	subs	r7, r7, r2
 800109e:	023a      	lsls	r2, r7, #8
 80010a0:	d53d      	bpl.n	800111e <__aeabi_dadd+0x632>
 80010a2:	1acc      	subs	r4, r1, r3
 80010a4:	42a1      	cmp	r1, r4
 80010a6:	4189      	sbcs	r1, r1
 80010a8:	4643      	mov	r3, r8
 80010aa:	4249      	negs	r1, r1
 80010ac:	1a1f      	subs	r7, r3, r0
 80010ae:	4655      	mov	r5, sl
 80010b0:	1a7f      	subs	r7, r7, r1
 80010b2:	e595      	b.n	8000be0 <__aeabi_dadd+0xf4>
 80010b4:	077b      	lsls	r3, r7, #29
 80010b6:	08c9      	lsrs	r1, r1, #3
 80010b8:	430b      	orrs	r3, r1
 80010ba:	08f8      	lsrs	r0, r7, #3
 80010bc:	e643      	b.n	8000d46 <__aeabi_dadd+0x25a>
 80010be:	4644      	mov	r4, r8
 80010c0:	08db      	lsrs	r3, r3, #3
 80010c2:	430c      	orrs	r4, r1
 80010c4:	d130      	bne.n	8001128 <__aeabi_dadd+0x63c>
 80010c6:	0742      	lsls	r2, r0, #29
 80010c8:	4313      	orrs	r3, r2
 80010ca:	08c0      	lsrs	r0, r0, #3
 80010cc:	e65c      	b.n	8000d88 <__aeabi_dadd+0x29c>
 80010ce:	077b      	lsls	r3, r7, #29
 80010d0:	08c9      	lsrs	r1, r1, #3
 80010d2:	430b      	orrs	r3, r1
 80010d4:	08f8      	lsrs	r0, r7, #3
 80010d6:	e639      	b.n	8000d4c <__aeabi_dadd+0x260>
 80010d8:	185c      	adds	r4, r3, r1
 80010da:	429c      	cmp	r4, r3
 80010dc:	419b      	sbcs	r3, r3
 80010de:	4440      	add	r0, r8
 80010e0:	425b      	negs	r3, r3
 80010e2:	18c7      	adds	r7, r0, r3
 80010e4:	023b      	lsls	r3, r7, #8
 80010e6:	d400      	bmi.n	80010ea <__aeabi_dadd+0x5fe>
 80010e8:	e625      	b.n	8000d36 <__aeabi_dadd+0x24a>
 80010ea:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <__aeabi_dadd+0x674>)
 80010ec:	2601      	movs	r6, #1
 80010ee:	401f      	ands	r7, r3
 80010f0:	e621      	b.n	8000d36 <__aeabi_dadd+0x24a>
 80010f2:	0004      	movs	r4, r0
 80010f4:	3a20      	subs	r2, #32
 80010f6:	40d4      	lsrs	r4, r2
 80010f8:	4662      	mov	r2, ip
 80010fa:	2a20      	cmp	r2, #32
 80010fc:	d004      	beq.n	8001108 <__aeabi_dadd+0x61c>
 80010fe:	2240      	movs	r2, #64	; 0x40
 8001100:	4666      	mov	r6, ip
 8001102:	1b92      	subs	r2, r2, r6
 8001104:	4090      	lsls	r0, r2
 8001106:	4303      	orrs	r3, r0
 8001108:	1e5a      	subs	r2, r3, #1
 800110a:	4193      	sbcs	r3, r2
 800110c:	431c      	orrs	r4, r3
 800110e:	e67e      	b.n	8000e0e <__aeabi_dadd+0x322>
 8001110:	185c      	adds	r4, r3, r1
 8001112:	428c      	cmp	r4, r1
 8001114:	4189      	sbcs	r1, r1
 8001116:	4440      	add	r0, r8
 8001118:	4249      	negs	r1, r1
 800111a:	1847      	adds	r7, r0, r1
 800111c:	e6dd      	b.n	8000eda <__aeabi_dadd+0x3ee>
 800111e:	0023      	movs	r3, r4
 8001120:	433b      	orrs	r3, r7
 8001122:	d100      	bne.n	8001126 <__aeabi_dadd+0x63a>
 8001124:	e6ad      	b.n	8000e82 <__aeabi_dadd+0x396>
 8001126:	e606      	b.n	8000d36 <__aeabi_dadd+0x24a>
 8001128:	0744      	lsls	r4, r0, #29
 800112a:	4323      	orrs	r3, r4
 800112c:	2480      	movs	r4, #128	; 0x80
 800112e:	08c0      	lsrs	r0, r0, #3
 8001130:	0324      	lsls	r4, r4, #12
 8001132:	4220      	tst	r0, r4
 8001134:	d008      	beq.n	8001148 <__aeabi_dadd+0x65c>
 8001136:	4642      	mov	r2, r8
 8001138:	08d6      	lsrs	r6, r2, #3
 800113a:	4226      	tst	r6, r4
 800113c:	d104      	bne.n	8001148 <__aeabi_dadd+0x65c>
 800113e:	4655      	mov	r5, sl
 8001140:	0030      	movs	r0, r6
 8001142:	08cb      	lsrs	r3, r1, #3
 8001144:	0751      	lsls	r1, r2, #29
 8001146:	430b      	orrs	r3, r1
 8001148:	0f5a      	lsrs	r2, r3, #29
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	08db      	lsrs	r3, r3, #3
 800114e:	0752      	lsls	r2, r2, #29
 8001150:	4313      	orrs	r3, r2
 8001152:	e619      	b.n	8000d88 <__aeabi_dadd+0x29c>
 8001154:	2300      	movs	r3, #0
 8001156:	4a01      	ldr	r2, [pc, #4]	; (800115c <__aeabi_dadd+0x670>)
 8001158:	001f      	movs	r7, r3
 800115a:	e55e      	b.n	8000c1a <__aeabi_dadd+0x12e>
 800115c:	000007ff 	.word	0x000007ff
 8001160:	ff7fffff 	.word	0xff7fffff

08001164 <__aeabi_ddiv>:
 8001164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001166:	4657      	mov	r7, sl
 8001168:	464e      	mov	r6, r9
 800116a:	4645      	mov	r5, r8
 800116c:	46de      	mov	lr, fp
 800116e:	b5e0      	push	{r5, r6, r7, lr}
 8001170:	4681      	mov	r9, r0
 8001172:	0005      	movs	r5, r0
 8001174:	030c      	lsls	r4, r1, #12
 8001176:	0048      	lsls	r0, r1, #1
 8001178:	4692      	mov	sl, r2
 800117a:	001f      	movs	r7, r3
 800117c:	b085      	sub	sp, #20
 800117e:	0b24      	lsrs	r4, r4, #12
 8001180:	0d40      	lsrs	r0, r0, #21
 8001182:	0fce      	lsrs	r6, r1, #31
 8001184:	2800      	cmp	r0, #0
 8001186:	d100      	bne.n	800118a <__aeabi_ddiv+0x26>
 8001188:	e156      	b.n	8001438 <__aeabi_ddiv+0x2d4>
 800118a:	4bd4      	ldr	r3, [pc, #848]	; (80014dc <__aeabi_ddiv+0x378>)
 800118c:	4298      	cmp	r0, r3
 800118e:	d100      	bne.n	8001192 <__aeabi_ddiv+0x2e>
 8001190:	e172      	b.n	8001478 <__aeabi_ddiv+0x314>
 8001192:	0f6b      	lsrs	r3, r5, #29
 8001194:	00e4      	lsls	r4, r4, #3
 8001196:	431c      	orrs	r4, r3
 8001198:	2380      	movs	r3, #128	; 0x80
 800119a:	041b      	lsls	r3, r3, #16
 800119c:	4323      	orrs	r3, r4
 800119e:	4698      	mov	r8, r3
 80011a0:	4bcf      	ldr	r3, [pc, #828]	; (80014e0 <__aeabi_ddiv+0x37c>)
 80011a2:	00ed      	lsls	r5, r5, #3
 80011a4:	469b      	mov	fp, r3
 80011a6:	2300      	movs	r3, #0
 80011a8:	4699      	mov	r9, r3
 80011aa:	4483      	add	fp, r0
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	033c      	lsls	r4, r7, #12
 80011b0:	007b      	lsls	r3, r7, #1
 80011b2:	4650      	mov	r0, sl
 80011b4:	0b24      	lsrs	r4, r4, #12
 80011b6:	0d5b      	lsrs	r3, r3, #21
 80011b8:	0fff      	lsrs	r7, r7, #31
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d100      	bne.n	80011c0 <__aeabi_ddiv+0x5c>
 80011be:	e11f      	b.n	8001400 <__aeabi_ddiv+0x29c>
 80011c0:	4ac6      	ldr	r2, [pc, #792]	; (80014dc <__aeabi_ddiv+0x378>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d100      	bne.n	80011c8 <__aeabi_ddiv+0x64>
 80011c6:	e162      	b.n	800148e <__aeabi_ddiv+0x32a>
 80011c8:	49c5      	ldr	r1, [pc, #788]	; (80014e0 <__aeabi_ddiv+0x37c>)
 80011ca:	0f42      	lsrs	r2, r0, #29
 80011cc:	468c      	mov	ip, r1
 80011ce:	00e4      	lsls	r4, r4, #3
 80011d0:	4659      	mov	r1, fp
 80011d2:	4314      	orrs	r4, r2
 80011d4:	2280      	movs	r2, #128	; 0x80
 80011d6:	4463      	add	r3, ip
 80011d8:	0412      	lsls	r2, r2, #16
 80011da:	1acb      	subs	r3, r1, r3
 80011dc:	4314      	orrs	r4, r2
 80011de:	469b      	mov	fp, r3
 80011e0:	00c2      	lsls	r2, r0, #3
 80011e2:	2000      	movs	r0, #0
 80011e4:	0033      	movs	r3, r6
 80011e6:	407b      	eors	r3, r7
 80011e8:	469a      	mov	sl, r3
 80011ea:	464b      	mov	r3, r9
 80011ec:	2b0f      	cmp	r3, #15
 80011ee:	d827      	bhi.n	8001240 <__aeabi_ddiv+0xdc>
 80011f0:	49bc      	ldr	r1, [pc, #752]	; (80014e4 <__aeabi_ddiv+0x380>)
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	58cb      	ldr	r3, [r1, r3]
 80011f6:	469f      	mov	pc, r3
 80011f8:	46b2      	mov	sl, r6
 80011fa:	9b00      	ldr	r3, [sp, #0]
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d016      	beq.n	800122e <__aeabi_ddiv+0xca>
 8001200:	2b03      	cmp	r3, #3
 8001202:	d100      	bne.n	8001206 <__aeabi_ddiv+0xa2>
 8001204:	e28e      	b.n	8001724 <__aeabi_ddiv+0x5c0>
 8001206:	2b01      	cmp	r3, #1
 8001208:	d000      	beq.n	800120c <__aeabi_ddiv+0xa8>
 800120a:	e0d9      	b.n	80013c0 <__aeabi_ddiv+0x25c>
 800120c:	2300      	movs	r3, #0
 800120e:	2400      	movs	r4, #0
 8001210:	2500      	movs	r5, #0
 8001212:	4652      	mov	r2, sl
 8001214:	051b      	lsls	r3, r3, #20
 8001216:	4323      	orrs	r3, r4
 8001218:	07d2      	lsls	r2, r2, #31
 800121a:	4313      	orrs	r3, r2
 800121c:	0028      	movs	r0, r5
 800121e:	0019      	movs	r1, r3
 8001220:	b005      	add	sp, #20
 8001222:	bcf0      	pop	{r4, r5, r6, r7}
 8001224:	46bb      	mov	fp, r7
 8001226:	46b2      	mov	sl, r6
 8001228:	46a9      	mov	r9, r5
 800122a:	46a0      	mov	r8, r4
 800122c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122e:	2400      	movs	r4, #0
 8001230:	2500      	movs	r5, #0
 8001232:	4baa      	ldr	r3, [pc, #680]	; (80014dc <__aeabi_ddiv+0x378>)
 8001234:	e7ed      	b.n	8001212 <__aeabi_ddiv+0xae>
 8001236:	46ba      	mov	sl, r7
 8001238:	46a0      	mov	r8, r4
 800123a:	0015      	movs	r5, r2
 800123c:	9000      	str	r0, [sp, #0]
 800123e:	e7dc      	b.n	80011fa <__aeabi_ddiv+0x96>
 8001240:	4544      	cmp	r4, r8
 8001242:	d200      	bcs.n	8001246 <__aeabi_ddiv+0xe2>
 8001244:	e1c7      	b.n	80015d6 <__aeabi_ddiv+0x472>
 8001246:	d100      	bne.n	800124a <__aeabi_ddiv+0xe6>
 8001248:	e1c2      	b.n	80015d0 <__aeabi_ddiv+0x46c>
 800124a:	2301      	movs	r3, #1
 800124c:	425b      	negs	r3, r3
 800124e:	469c      	mov	ip, r3
 8001250:	002e      	movs	r6, r5
 8001252:	4640      	mov	r0, r8
 8001254:	2500      	movs	r5, #0
 8001256:	44e3      	add	fp, ip
 8001258:	0223      	lsls	r3, r4, #8
 800125a:	0e14      	lsrs	r4, r2, #24
 800125c:	431c      	orrs	r4, r3
 800125e:	0c1b      	lsrs	r3, r3, #16
 8001260:	4699      	mov	r9, r3
 8001262:	0423      	lsls	r3, r4, #16
 8001264:	0c1f      	lsrs	r7, r3, #16
 8001266:	0212      	lsls	r2, r2, #8
 8001268:	4649      	mov	r1, r9
 800126a:	9200      	str	r2, [sp, #0]
 800126c:	9701      	str	r7, [sp, #4]
 800126e:	f7fe ffd1 	bl	8000214 <__aeabi_uidivmod>
 8001272:	0002      	movs	r2, r0
 8001274:	437a      	muls	r2, r7
 8001276:	040b      	lsls	r3, r1, #16
 8001278:	0c31      	lsrs	r1, r6, #16
 800127a:	4680      	mov	r8, r0
 800127c:	4319      	orrs	r1, r3
 800127e:	428a      	cmp	r2, r1
 8001280:	d907      	bls.n	8001292 <__aeabi_ddiv+0x12e>
 8001282:	2301      	movs	r3, #1
 8001284:	425b      	negs	r3, r3
 8001286:	469c      	mov	ip, r3
 8001288:	1909      	adds	r1, r1, r4
 800128a:	44e0      	add	r8, ip
 800128c:	428c      	cmp	r4, r1
 800128e:	d800      	bhi.n	8001292 <__aeabi_ddiv+0x12e>
 8001290:	e207      	b.n	80016a2 <__aeabi_ddiv+0x53e>
 8001292:	1a88      	subs	r0, r1, r2
 8001294:	4649      	mov	r1, r9
 8001296:	f7fe ffbd 	bl	8000214 <__aeabi_uidivmod>
 800129a:	0409      	lsls	r1, r1, #16
 800129c:	468c      	mov	ip, r1
 800129e:	0431      	lsls	r1, r6, #16
 80012a0:	4666      	mov	r6, ip
 80012a2:	9a01      	ldr	r2, [sp, #4]
 80012a4:	0c09      	lsrs	r1, r1, #16
 80012a6:	4342      	muls	r2, r0
 80012a8:	0003      	movs	r3, r0
 80012aa:	4331      	orrs	r1, r6
 80012ac:	428a      	cmp	r2, r1
 80012ae:	d904      	bls.n	80012ba <__aeabi_ddiv+0x156>
 80012b0:	1909      	adds	r1, r1, r4
 80012b2:	3b01      	subs	r3, #1
 80012b4:	428c      	cmp	r4, r1
 80012b6:	d800      	bhi.n	80012ba <__aeabi_ddiv+0x156>
 80012b8:	e1ed      	b.n	8001696 <__aeabi_ddiv+0x532>
 80012ba:	1a88      	subs	r0, r1, r2
 80012bc:	4642      	mov	r2, r8
 80012be:	0412      	lsls	r2, r2, #16
 80012c0:	431a      	orrs	r2, r3
 80012c2:	4690      	mov	r8, r2
 80012c4:	4641      	mov	r1, r8
 80012c6:	9b00      	ldr	r3, [sp, #0]
 80012c8:	040e      	lsls	r6, r1, #16
 80012ca:	0c1b      	lsrs	r3, r3, #16
 80012cc:	001f      	movs	r7, r3
 80012ce:	9302      	str	r3, [sp, #8]
 80012d0:	9b00      	ldr	r3, [sp, #0]
 80012d2:	0c36      	lsrs	r6, r6, #16
 80012d4:	041b      	lsls	r3, r3, #16
 80012d6:	0c19      	lsrs	r1, r3, #16
 80012d8:	000b      	movs	r3, r1
 80012da:	4373      	muls	r3, r6
 80012dc:	0c12      	lsrs	r2, r2, #16
 80012de:	437e      	muls	r6, r7
 80012e0:	9103      	str	r1, [sp, #12]
 80012e2:	4351      	muls	r1, r2
 80012e4:	437a      	muls	r2, r7
 80012e6:	0c1f      	lsrs	r7, r3, #16
 80012e8:	46bc      	mov	ip, r7
 80012ea:	1876      	adds	r6, r6, r1
 80012ec:	4466      	add	r6, ip
 80012ee:	42b1      	cmp	r1, r6
 80012f0:	d903      	bls.n	80012fa <__aeabi_ddiv+0x196>
 80012f2:	2180      	movs	r1, #128	; 0x80
 80012f4:	0249      	lsls	r1, r1, #9
 80012f6:	468c      	mov	ip, r1
 80012f8:	4462      	add	r2, ip
 80012fa:	0c31      	lsrs	r1, r6, #16
 80012fc:	188a      	adds	r2, r1, r2
 80012fe:	0431      	lsls	r1, r6, #16
 8001300:	041e      	lsls	r6, r3, #16
 8001302:	0c36      	lsrs	r6, r6, #16
 8001304:	198e      	adds	r6, r1, r6
 8001306:	4290      	cmp	r0, r2
 8001308:	d302      	bcc.n	8001310 <__aeabi_ddiv+0x1ac>
 800130a:	d112      	bne.n	8001332 <__aeabi_ddiv+0x1ce>
 800130c:	42b5      	cmp	r5, r6
 800130e:	d210      	bcs.n	8001332 <__aeabi_ddiv+0x1ce>
 8001310:	4643      	mov	r3, r8
 8001312:	1e59      	subs	r1, r3, #1
 8001314:	9b00      	ldr	r3, [sp, #0]
 8001316:	469c      	mov	ip, r3
 8001318:	4465      	add	r5, ip
 800131a:	001f      	movs	r7, r3
 800131c:	429d      	cmp	r5, r3
 800131e:	419b      	sbcs	r3, r3
 8001320:	425b      	negs	r3, r3
 8001322:	191b      	adds	r3, r3, r4
 8001324:	18c0      	adds	r0, r0, r3
 8001326:	4284      	cmp	r4, r0
 8001328:	d200      	bcs.n	800132c <__aeabi_ddiv+0x1c8>
 800132a:	e1a0      	b.n	800166e <__aeabi_ddiv+0x50a>
 800132c:	d100      	bne.n	8001330 <__aeabi_ddiv+0x1cc>
 800132e:	e19b      	b.n	8001668 <__aeabi_ddiv+0x504>
 8001330:	4688      	mov	r8, r1
 8001332:	1bae      	subs	r6, r5, r6
 8001334:	42b5      	cmp	r5, r6
 8001336:	41ad      	sbcs	r5, r5
 8001338:	1a80      	subs	r0, r0, r2
 800133a:	426d      	negs	r5, r5
 800133c:	1b40      	subs	r0, r0, r5
 800133e:	4284      	cmp	r4, r0
 8001340:	d100      	bne.n	8001344 <__aeabi_ddiv+0x1e0>
 8001342:	e1d5      	b.n	80016f0 <__aeabi_ddiv+0x58c>
 8001344:	4649      	mov	r1, r9
 8001346:	f7fe ff65 	bl	8000214 <__aeabi_uidivmod>
 800134a:	9a01      	ldr	r2, [sp, #4]
 800134c:	040b      	lsls	r3, r1, #16
 800134e:	4342      	muls	r2, r0
 8001350:	0c31      	lsrs	r1, r6, #16
 8001352:	0005      	movs	r5, r0
 8001354:	4319      	orrs	r1, r3
 8001356:	428a      	cmp	r2, r1
 8001358:	d900      	bls.n	800135c <__aeabi_ddiv+0x1f8>
 800135a:	e16c      	b.n	8001636 <__aeabi_ddiv+0x4d2>
 800135c:	1a88      	subs	r0, r1, r2
 800135e:	4649      	mov	r1, r9
 8001360:	f7fe ff58 	bl	8000214 <__aeabi_uidivmod>
 8001364:	9a01      	ldr	r2, [sp, #4]
 8001366:	0436      	lsls	r6, r6, #16
 8001368:	4342      	muls	r2, r0
 800136a:	0409      	lsls	r1, r1, #16
 800136c:	0c36      	lsrs	r6, r6, #16
 800136e:	0003      	movs	r3, r0
 8001370:	430e      	orrs	r6, r1
 8001372:	42b2      	cmp	r2, r6
 8001374:	d900      	bls.n	8001378 <__aeabi_ddiv+0x214>
 8001376:	e153      	b.n	8001620 <__aeabi_ddiv+0x4bc>
 8001378:	9803      	ldr	r0, [sp, #12]
 800137a:	1ab6      	subs	r6, r6, r2
 800137c:	0002      	movs	r2, r0
 800137e:	042d      	lsls	r5, r5, #16
 8001380:	431d      	orrs	r5, r3
 8001382:	9f02      	ldr	r7, [sp, #8]
 8001384:	042b      	lsls	r3, r5, #16
 8001386:	0c1b      	lsrs	r3, r3, #16
 8001388:	435a      	muls	r2, r3
 800138a:	437b      	muls	r3, r7
 800138c:	469c      	mov	ip, r3
 800138e:	0c29      	lsrs	r1, r5, #16
 8001390:	4348      	muls	r0, r1
 8001392:	0c13      	lsrs	r3, r2, #16
 8001394:	4484      	add	ip, r0
 8001396:	4463      	add	r3, ip
 8001398:	4379      	muls	r1, r7
 800139a:	4298      	cmp	r0, r3
 800139c:	d903      	bls.n	80013a6 <__aeabi_ddiv+0x242>
 800139e:	2080      	movs	r0, #128	; 0x80
 80013a0:	0240      	lsls	r0, r0, #9
 80013a2:	4684      	mov	ip, r0
 80013a4:	4461      	add	r1, ip
 80013a6:	0c18      	lsrs	r0, r3, #16
 80013a8:	0412      	lsls	r2, r2, #16
 80013aa:	041b      	lsls	r3, r3, #16
 80013ac:	0c12      	lsrs	r2, r2, #16
 80013ae:	1841      	adds	r1, r0, r1
 80013b0:	189b      	adds	r3, r3, r2
 80013b2:	428e      	cmp	r6, r1
 80013b4:	d200      	bcs.n	80013b8 <__aeabi_ddiv+0x254>
 80013b6:	e0ff      	b.n	80015b8 <__aeabi_ddiv+0x454>
 80013b8:	d100      	bne.n	80013bc <__aeabi_ddiv+0x258>
 80013ba:	e0fa      	b.n	80015b2 <__aeabi_ddiv+0x44e>
 80013bc:	2301      	movs	r3, #1
 80013be:	431d      	orrs	r5, r3
 80013c0:	4a49      	ldr	r2, [pc, #292]	; (80014e8 <__aeabi_ddiv+0x384>)
 80013c2:	445a      	add	r2, fp
 80013c4:	2a00      	cmp	r2, #0
 80013c6:	dc00      	bgt.n	80013ca <__aeabi_ddiv+0x266>
 80013c8:	e0aa      	b.n	8001520 <__aeabi_ddiv+0x3bc>
 80013ca:	076b      	lsls	r3, r5, #29
 80013cc:	d000      	beq.n	80013d0 <__aeabi_ddiv+0x26c>
 80013ce:	e13d      	b.n	800164c <__aeabi_ddiv+0x4e8>
 80013d0:	08ed      	lsrs	r5, r5, #3
 80013d2:	4643      	mov	r3, r8
 80013d4:	01db      	lsls	r3, r3, #7
 80013d6:	d506      	bpl.n	80013e6 <__aeabi_ddiv+0x282>
 80013d8:	4642      	mov	r2, r8
 80013da:	4b44      	ldr	r3, [pc, #272]	; (80014ec <__aeabi_ddiv+0x388>)
 80013dc:	401a      	ands	r2, r3
 80013de:	4690      	mov	r8, r2
 80013e0:	2280      	movs	r2, #128	; 0x80
 80013e2:	00d2      	lsls	r2, r2, #3
 80013e4:	445a      	add	r2, fp
 80013e6:	4b42      	ldr	r3, [pc, #264]	; (80014f0 <__aeabi_ddiv+0x38c>)
 80013e8:	429a      	cmp	r2, r3
 80013ea:	dd00      	ble.n	80013ee <__aeabi_ddiv+0x28a>
 80013ec:	e71f      	b.n	800122e <__aeabi_ddiv+0xca>
 80013ee:	4643      	mov	r3, r8
 80013f0:	075b      	lsls	r3, r3, #29
 80013f2:	431d      	orrs	r5, r3
 80013f4:	4643      	mov	r3, r8
 80013f6:	0552      	lsls	r2, r2, #21
 80013f8:	025c      	lsls	r4, r3, #9
 80013fa:	0b24      	lsrs	r4, r4, #12
 80013fc:	0d53      	lsrs	r3, r2, #21
 80013fe:	e708      	b.n	8001212 <__aeabi_ddiv+0xae>
 8001400:	4652      	mov	r2, sl
 8001402:	4322      	orrs	r2, r4
 8001404:	d100      	bne.n	8001408 <__aeabi_ddiv+0x2a4>
 8001406:	e07b      	b.n	8001500 <__aeabi_ddiv+0x39c>
 8001408:	2c00      	cmp	r4, #0
 800140a:	d100      	bne.n	800140e <__aeabi_ddiv+0x2aa>
 800140c:	e0fa      	b.n	8001604 <__aeabi_ddiv+0x4a0>
 800140e:	0020      	movs	r0, r4
 8001410:	f001 f884 	bl	800251c <__clzsi2>
 8001414:	0002      	movs	r2, r0
 8001416:	3a0b      	subs	r2, #11
 8001418:	231d      	movs	r3, #29
 800141a:	0001      	movs	r1, r0
 800141c:	1a9b      	subs	r3, r3, r2
 800141e:	4652      	mov	r2, sl
 8001420:	3908      	subs	r1, #8
 8001422:	40da      	lsrs	r2, r3
 8001424:	408c      	lsls	r4, r1
 8001426:	4314      	orrs	r4, r2
 8001428:	4652      	mov	r2, sl
 800142a:	408a      	lsls	r2, r1
 800142c:	4b31      	ldr	r3, [pc, #196]	; (80014f4 <__aeabi_ddiv+0x390>)
 800142e:	4458      	add	r0, fp
 8001430:	469b      	mov	fp, r3
 8001432:	4483      	add	fp, r0
 8001434:	2000      	movs	r0, #0
 8001436:	e6d5      	b.n	80011e4 <__aeabi_ddiv+0x80>
 8001438:	464b      	mov	r3, r9
 800143a:	4323      	orrs	r3, r4
 800143c:	4698      	mov	r8, r3
 800143e:	d044      	beq.n	80014ca <__aeabi_ddiv+0x366>
 8001440:	2c00      	cmp	r4, #0
 8001442:	d100      	bne.n	8001446 <__aeabi_ddiv+0x2e2>
 8001444:	e0ce      	b.n	80015e4 <__aeabi_ddiv+0x480>
 8001446:	0020      	movs	r0, r4
 8001448:	f001 f868 	bl	800251c <__clzsi2>
 800144c:	0001      	movs	r1, r0
 800144e:	0002      	movs	r2, r0
 8001450:	390b      	subs	r1, #11
 8001452:	231d      	movs	r3, #29
 8001454:	1a5b      	subs	r3, r3, r1
 8001456:	4649      	mov	r1, r9
 8001458:	0010      	movs	r0, r2
 800145a:	40d9      	lsrs	r1, r3
 800145c:	3808      	subs	r0, #8
 800145e:	4084      	lsls	r4, r0
 8001460:	000b      	movs	r3, r1
 8001462:	464d      	mov	r5, r9
 8001464:	4323      	orrs	r3, r4
 8001466:	4698      	mov	r8, r3
 8001468:	4085      	lsls	r5, r0
 800146a:	4823      	ldr	r0, [pc, #140]	; (80014f8 <__aeabi_ddiv+0x394>)
 800146c:	1a83      	subs	r3, r0, r2
 800146e:	469b      	mov	fp, r3
 8001470:	2300      	movs	r3, #0
 8001472:	4699      	mov	r9, r3
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	e69a      	b.n	80011ae <__aeabi_ddiv+0x4a>
 8001478:	464b      	mov	r3, r9
 800147a:	4323      	orrs	r3, r4
 800147c:	4698      	mov	r8, r3
 800147e:	d11d      	bne.n	80014bc <__aeabi_ddiv+0x358>
 8001480:	2308      	movs	r3, #8
 8001482:	4699      	mov	r9, r3
 8001484:	3b06      	subs	r3, #6
 8001486:	2500      	movs	r5, #0
 8001488:	4683      	mov	fp, r0
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	e68f      	b.n	80011ae <__aeabi_ddiv+0x4a>
 800148e:	4652      	mov	r2, sl
 8001490:	4322      	orrs	r2, r4
 8001492:	d109      	bne.n	80014a8 <__aeabi_ddiv+0x344>
 8001494:	2302      	movs	r3, #2
 8001496:	4649      	mov	r1, r9
 8001498:	4319      	orrs	r1, r3
 800149a:	4b18      	ldr	r3, [pc, #96]	; (80014fc <__aeabi_ddiv+0x398>)
 800149c:	4689      	mov	r9, r1
 800149e:	469c      	mov	ip, r3
 80014a0:	2400      	movs	r4, #0
 80014a2:	2002      	movs	r0, #2
 80014a4:	44e3      	add	fp, ip
 80014a6:	e69d      	b.n	80011e4 <__aeabi_ddiv+0x80>
 80014a8:	2303      	movs	r3, #3
 80014aa:	464a      	mov	r2, r9
 80014ac:	431a      	orrs	r2, r3
 80014ae:	4b13      	ldr	r3, [pc, #76]	; (80014fc <__aeabi_ddiv+0x398>)
 80014b0:	4691      	mov	r9, r2
 80014b2:	469c      	mov	ip, r3
 80014b4:	4652      	mov	r2, sl
 80014b6:	2003      	movs	r0, #3
 80014b8:	44e3      	add	fp, ip
 80014ba:	e693      	b.n	80011e4 <__aeabi_ddiv+0x80>
 80014bc:	230c      	movs	r3, #12
 80014be:	4699      	mov	r9, r3
 80014c0:	3b09      	subs	r3, #9
 80014c2:	46a0      	mov	r8, r4
 80014c4:	4683      	mov	fp, r0
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	e671      	b.n	80011ae <__aeabi_ddiv+0x4a>
 80014ca:	2304      	movs	r3, #4
 80014cc:	4699      	mov	r9, r3
 80014ce:	2300      	movs	r3, #0
 80014d0:	469b      	mov	fp, r3
 80014d2:	3301      	adds	r3, #1
 80014d4:	2500      	movs	r5, #0
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	e669      	b.n	80011ae <__aeabi_ddiv+0x4a>
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	000007ff 	.word	0x000007ff
 80014e0:	fffffc01 	.word	0xfffffc01
 80014e4:	08005f40 	.word	0x08005f40
 80014e8:	000003ff 	.word	0x000003ff
 80014ec:	feffffff 	.word	0xfeffffff
 80014f0:	000007fe 	.word	0x000007fe
 80014f4:	000003f3 	.word	0x000003f3
 80014f8:	fffffc0d 	.word	0xfffffc0d
 80014fc:	fffff801 	.word	0xfffff801
 8001500:	4649      	mov	r1, r9
 8001502:	2301      	movs	r3, #1
 8001504:	4319      	orrs	r1, r3
 8001506:	4689      	mov	r9, r1
 8001508:	2400      	movs	r4, #0
 800150a:	2001      	movs	r0, #1
 800150c:	e66a      	b.n	80011e4 <__aeabi_ddiv+0x80>
 800150e:	2300      	movs	r3, #0
 8001510:	2480      	movs	r4, #128	; 0x80
 8001512:	469a      	mov	sl, r3
 8001514:	2500      	movs	r5, #0
 8001516:	4b8a      	ldr	r3, [pc, #552]	; (8001740 <__aeabi_ddiv+0x5dc>)
 8001518:	0324      	lsls	r4, r4, #12
 800151a:	e67a      	b.n	8001212 <__aeabi_ddiv+0xae>
 800151c:	2501      	movs	r5, #1
 800151e:	426d      	negs	r5, r5
 8001520:	2301      	movs	r3, #1
 8001522:	1a9b      	subs	r3, r3, r2
 8001524:	2b38      	cmp	r3, #56	; 0x38
 8001526:	dd00      	ble.n	800152a <__aeabi_ddiv+0x3c6>
 8001528:	e670      	b.n	800120c <__aeabi_ddiv+0xa8>
 800152a:	2b1f      	cmp	r3, #31
 800152c:	dc00      	bgt.n	8001530 <__aeabi_ddiv+0x3cc>
 800152e:	e0bf      	b.n	80016b0 <__aeabi_ddiv+0x54c>
 8001530:	211f      	movs	r1, #31
 8001532:	4249      	negs	r1, r1
 8001534:	1a8a      	subs	r2, r1, r2
 8001536:	4641      	mov	r1, r8
 8001538:	40d1      	lsrs	r1, r2
 800153a:	000a      	movs	r2, r1
 800153c:	2b20      	cmp	r3, #32
 800153e:	d004      	beq.n	800154a <__aeabi_ddiv+0x3e6>
 8001540:	4641      	mov	r1, r8
 8001542:	4b80      	ldr	r3, [pc, #512]	; (8001744 <__aeabi_ddiv+0x5e0>)
 8001544:	445b      	add	r3, fp
 8001546:	4099      	lsls	r1, r3
 8001548:	430d      	orrs	r5, r1
 800154a:	1e6b      	subs	r3, r5, #1
 800154c:	419d      	sbcs	r5, r3
 800154e:	2307      	movs	r3, #7
 8001550:	432a      	orrs	r2, r5
 8001552:	001d      	movs	r5, r3
 8001554:	2400      	movs	r4, #0
 8001556:	4015      	ands	r5, r2
 8001558:	4213      	tst	r3, r2
 800155a:	d100      	bne.n	800155e <__aeabi_ddiv+0x3fa>
 800155c:	e0d4      	b.n	8001708 <__aeabi_ddiv+0x5a4>
 800155e:	210f      	movs	r1, #15
 8001560:	2300      	movs	r3, #0
 8001562:	4011      	ands	r1, r2
 8001564:	2904      	cmp	r1, #4
 8001566:	d100      	bne.n	800156a <__aeabi_ddiv+0x406>
 8001568:	e0cb      	b.n	8001702 <__aeabi_ddiv+0x59e>
 800156a:	1d11      	adds	r1, r2, #4
 800156c:	4291      	cmp	r1, r2
 800156e:	4192      	sbcs	r2, r2
 8001570:	4252      	negs	r2, r2
 8001572:	189b      	adds	r3, r3, r2
 8001574:	000a      	movs	r2, r1
 8001576:	0219      	lsls	r1, r3, #8
 8001578:	d400      	bmi.n	800157c <__aeabi_ddiv+0x418>
 800157a:	e0c2      	b.n	8001702 <__aeabi_ddiv+0x59e>
 800157c:	2301      	movs	r3, #1
 800157e:	2400      	movs	r4, #0
 8001580:	2500      	movs	r5, #0
 8001582:	e646      	b.n	8001212 <__aeabi_ddiv+0xae>
 8001584:	2380      	movs	r3, #128	; 0x80
 8001586:	4641      	mov	r1, r8
 8001588:	031b      	lsls	r3, r3, #12
 800158a:	4219      	tst	r1, r3
 800158c:	d008      	beq.n	80015a0 <__aeabi_ddiv+0x43c>
 800158e:	421c      	tst	r4, r3
 8001590:	d106      	bne.n	80015a0 <__aeabi_ddiv+0x43c>
 8001592:	431c      	orrs	r4, r3
 8001594:	0324      	lsls	r4, r4, #12
 8001596:	46ba      	mov	sl, r7
 8001598:	0015      	movs	r5, r2
 800159a:	4b69      	ldr	r3, [pc, #420]	; (8001740 <__aeabi_ddiv+0x5dc>)
 800159c:	0b24      	lsrs	r4, r4, #12
 800159e:	e638      	b.n	8001212 <__aeabi_ddiv+0xae>
 80015a0:	2480      	movs	r4, #128	; 0x80
 80015a2:	4643      	mov	r3, r8
 80015a4:	0324      	lsls	r4, r4, #12
 80015a6:	431c      	orrs	r4, r3
 80015a8:	0324      	lsls	r4, r4, #12
 80015aa:	46b2      	mov	sl, r6
 80015ac:	4b64      	ldr	r3, [pc, #400]	; (8001740 <__aeabi_ddiv+0x5dc>)
 80015ae:	0b24      	lsrs	r4, r4, #12
 80015b0:	e62f      	b.n	8001212 <__aeabi_ddiv+0xae>
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d100      	bne.n	80015b8 <__aeabi_ddiv+0x454>
 80015b6:	e703      	b.n	80013c0 <__aeabi_ddiv+0x25c>
 80015b8:	19a6      	adds	r6, r4, r6
 80015ba:	1e68      	subs	r0, r5, #1
 80015bc:	42a6      	cmp	r6, r4
 80015be:	d200      	bcs.n	80015c2 <__aeabi_ddiv+0x45e>
 80015c0:	e08d      	b.n	80016de <__aeabi_ddiv+0x57a>
 80015c2:	428e      	cmp	r6, r1
 80015c4:	d200      	bcs.n	80015c8 <__aeabi_ddiv+0x464>
 80015c6:	e0a3      	b.n	8001710 <__aeabi_ddiv+0x5ac>
 80015c8:	d100      	bne.n	80015cc <__aeabi_ddiv+0x468>
 80015ca:	e0b3      	b.n	8001734 <__aeabi_ddiv+0x5d0>
 80015cc:	0005      	movs	r5, r0
 80015ce:	e6f5      	b.n	80013bc <__aeabi_ddiv+0x258>
 80015d0:	42aa      	cmp	r2, r5
 80015d2:	d900      	bls.n	80015d6 <__aeabi_ddiv+0x472>
 80015d4:	e639      	b.n	800124a <__aeabi_ddiv+0xe6>
 80015d6:	4643      	mov	r3, r8
 80015d8:	07de      	lsls	r6, r3, #31
 80015da:	0858      	lsrs	r0, r3, #1
 80015dc:	086b      	lsrs	r3, r5, #1
 80015de:	431e      	orrs	r6, r3
 80015e0:	07ed      	lsls	r5, r5, #31
 80015e2:	e639      	b.n	8001258 <__aeabi_ddiv+0xf4>
 80015e4:	4648      	mov	r0, r9
 80015e6:	f000 ff99 	bl	800251c <__clzsi2>
 80015ea:	0001      	movs	r1, r0
 80015ec:	0002      	movs	r2, r0
 80015ee:	3115      	adds	r1, #21
 80015f0:	3220      	adds	r2, #32
 80015f2:	291c      	cmp	r1, #28
 80015f4:	dc00      	bgt.n	80015f8 <__aeabi_ddiv+0x494>
 80015f6:	e72c      	b.n	8001452 <__aeabi_ddiv+0x2ee>
 80015f8:	464b      	mov	r3, r9
 80015fa:	3808      	subs	r0, #8
 80015fc:	4083      	lsls	r3, r0
 80015fe:	2500      	movs	r5, #0
 8001600:	4698      	mov	r8, r3
 8001602:	e732      	b.n	800146a <__aeabi_ddiv+0x306>
 8001604:	f000 ff8a 	bl	800251c <__clzsi2>
 8001608:	0003      	movs	r3, r0
 800160a:	001a      	movs	r2, r3
 800160c:	3215      	adds	r2, #21
 800160e:	3020      	adds	r0, #32
 8001610:	2a1c      	cmp	r2, #28
 8001612:	dc00      	bgt.n	8001616 <__aeabi_ddiv+0x4b2>
 8001614:	e700      	b.n	8001418 <__aeabi_ddiv+0x2b4>
 8001616:	4654      	mov	r4, sl
 8001618:	3b08      	subs	r3, #8
 800161a:	2200      	movs	r2, #0
 800161c:	409c      	lsls	r4, r3
 800161e:	e705      	b.n	800142c <__aeabi_ddiv+0x2c8>
 8001620:	1936      	adds	r6, r6, r4
 8001622:	3b01      	subs	r3, #1
 8001624:	42b4      	cmp	r4, r6
 8001626:	d900      	bls.n	800162a <__aeabi_ddiv+0x4c6>
 8001628:	e6a6      	b.n	8001378 <__aeabi_ddiv+0x214>
 800162a:	42b2      	cmp	r2, r6
 800162c:	d800      	bhi.n	8001630 <__aeabi_ddiv+0x4cc>
 800162e:	e6a3      	b.n	8001378 <__aeabi_ddiv+0x214>
 8001630:	1e83      	subs	r3, r0, #2
 8001632:	1936      	adds	r6, r6, r4
 8001634:	e6a0      	b.n	8001378 <__aeabi_ddiv+0x214>
 8001636:	1909      	adds	r1, r1, r4
 8001638:	3d01      	subs	r5, #1
 800163a:	428c      	cmp	r4, r1
 800163c:	d900      	bls.n	8001640 <__aeabi_ddiv+0x4dc>
 800163e:	e68d      	b.n	800135c <__aeabi_ddiv+0x1f8>
 8001640:	428a      	cmp	r2, r1
 8001642:	d800      	bhi.n	8001646 <__aeabi_ddiv+0x4e2>
 8001644:	e68a      	b.n	800135c <__aeabi_ddiv+0x1f8>
 8001646:	1e85      	subs	r5, r0, #2
 8001648:	1909      	adds	r1, r1, r4
 800164a:	e687      	b.n	800135c <__aeabi_ddiv+0x1f8>
 800164c:	230f      	movs	r3, #15
 800164e:	402b      	ands	r3, r5
 8001650:	2b04      	cmp	r3, #4
 8001652:	d100      	bne.n	8001656 <__aeabi_ddiv+0x4f2>
 8001654:	e6bc      	b.n	80013d0 <__aeabi_ddiv+0x26c>
 8001656:	2305      	movs	r3, #5
 8001658:	425b      	negs	r3, r3
 800165a:	42ab      	cmp	r3, r5
 800165c:	419b      	sbcs	r3, r3
 800165e:	3504      	adds	r5, #4
 8001660:	425b      	negs	r3, r3
 8001662:	08ed      	lsrs	r5, r5, #3
 8001664:	4498      	add	r8, r3
 8001666:	e6b4      	b.n	80013d2 <__aeabi_ddiv+0x26e>
 8001668:	42af      	cmp	r7, r5
 800166a:	d900      	bls.n	800166e <__aeabi_ddiv+0x50a>
 800166c:	e660      	b.n	8001330 <__aeabi_ddiv+0x1cc>
 800166e:	4282      	cmp	r2, r0
 8001670:	d804      	bhi.n	800167c <__aeabi_ddiv+0x518>
 8001672:	d000      	beq.n	8001676 <__aeabi_ddiv+0x512>
 8001674:	e65c      	b.n	8001330 <__aeabi_ddiv+0x1cc>
 8001676:	42ae      	cmp	r6, r5
 8001678:	d800      	bhi.n	800167c <__aeabi_ddiv+0x518>
 800167a:	e659      	b.n	8001330 <__aeabi_ddiv+0x1cc>
 800167c:	2302      	movs	r3, #2
 800167e:	425b      	negs	r3, r3
 8001680:	469c      	mov	ip, r3
 8001682:	9b00      	ldr	r3, [sp, #0]
 8001684:	44e0      	add	r8, ip
 8001686:	469c      	mov	ip, r3
 8001688:	4465      	add	r5, ip
 800168a:	429d      	cmp	r5, r3
 800168c:	419b      	sbcs	r3, r3
 800168e:	425b      	negs	r3, r3
 8001690:	191b      	adds	r3, r3, r4
 8001692:	18c0      	adds	r0, r0, r3
 8001694:	e64d      	b.n	8001332 <__aeabi_ddiv+0x1ce>
 8001696:	428a      	cmp	r2, r1
 8001698:	d800      	bhi.n	800169c <__aeabi_ddiv+0x538>
 800169a:	e60e      	b.n	80012ba <__aeabi_ddiv+0x156>
 800169c:	1e83      	subs	r3, r0, #2
 800169e:	1909      	adds	r1, r1, r4
 80016a0:	e60b      	b.n	80012ba <__aeabi_ddiv+0x156>
 80016a2:	428a      	cmp	r2, r1
 80016a4:	d800      	bhi.n	80016a8 <__aeabi_ddiv+0x544>
 80016a6:	e5f4      	b.n	8001292 <__aeabi_ddiv+0x12e>
 80016a8:	1e83      	subs	r3, r0, #2
 80016aa:	4698      	mov	r8, r3
 80016ac:	1909      	adds	r1, r1, r4
 80016ae:	e5f0      	b.n	8001292 <__aeabi_ddiv+0x12e>
 80016b0:	4925      	ldr	r1, [pc, #148]	; (8001748 <__aeabi_ddiv+0x5e4>)
 80016b2:	0028      	movs	r0, r5
 80016b4:	4459      	add	r1, fp
 80016b6:	408d      	lsls	r5, r1
 80016b8:	4642      	mov	r2, r8
 80016ba:	408a      	lsls	r2, r1
 80016bc:	1e69      	subs	r1, r5, #1
 80016be:	418d      	sbcs	r5, r1
 80016c0:	4641      	mov	r1, r8
 80016c2:	40d8      	lsrs	r0, r3
 80016c4:	40d9      	lsrs	r1, r3
 80016c6:	4302      	orrs	r2, r0
 80016c8:	432a      	orrs	r2, r5
 80016ca:	000b      	movs	r3, r1
 80016cc:	0751      	lsls	r1, r2, #29
 80016ce:	d100      	bne.n	80016d2 <__aeabi_ddiv+0x56e>
 80016d0:	e751      	b.n	8001576 <__aeabi_ddiv+0x412>
 80016d2:	210f      	movs	r1, #15
 80016d4:	4011      	ands	r1, r2
 80016d6:	2904      	cmp	r1, #4
 80016d8:	d000      	beq.n	80016dc <__aeabi_ddiv+0x578>
 80016da:	e746      	b.n	800156a <__aeabi_ddiv+0x406>
 80016dc:	e74b      	b.n	8001576 <__aeabi_ddiv+0x412>
 80016de:	0005      	movs	r5, r0
 80016e0:	428e      	cmp	r6, r1
 80016e2:	d000      	beq.n	80016e6 <__aeabi_ddiv+0x582>
 80016e4:	e66a      	b.n	80013bc <__aeabi_ddiv+0x258>
 80016e6:	9a00      	ldr	r2, [sp, #0]
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d000      	beq.n	80016ee <__aeabi_ddiv+0x58a>
 80016ec:	e666      	b.n	80013bc <__aeabi_ddiv+0x258>
 80016ee:	e667      	b.n	80013c0 <__aeabi_ddiv+0x25c>
 80016f0:	4a16      	ldr	r2, [pc, #88]	; (800174c <__aeabi_ddiv+0x5e8>)
 80016f2:	445a      	add	r2, fp
 80016f4:	2a00      	cmp	r2, #0
 80016f6:	dc00      	bgt.n	80016fa <__aeabi_ddiv+0x596>
 80016f8:	e710      	b.n	800151c <__aeabi_ddiv+0x3b8>
 80016fa:	2301      	movs	r3, #1
 80016fc:	2500      	movs	r5, #0
 80016fe:	4498      	add	r8, r3
 8001700:	e667      	b.n	80013d2 <__aeabi_ddiv+0x26e>
 8001702:	075d      	lsls	r5, r3, #29
 8001704:	025b      	lsls	r3, r3, #9
 8001706:	0b1c      	lsrs	r4, r3, #12
 8001708:	08d2      	lsrs	r2, r2, #3
 800170a:	2300      	movs	r3, #0
 800170c:	4315      	orrs	r5, r2
 800170e:	e580      	b.n	8001212 <__aeabi_ddiv+0xae>
 8001710:	9800      	ldr	r0, [sp, #0]
 8001712:	3d02      	subs	r5, #2
 8001714:	0042      	lsls	r2, r0, #1
 8001716:	4282      	cmp	r2, r0
 8001718:	41bf      	sbcs	r7, r7
 800171a:	427f      	negs	r7, r7
 800171c:	193c      	adds	r4, r7, r4
 800171e:	1936      	adds	r6, r6, r4
 8001720:	9200      	str	r2, [sp, #0]
 8001722:	e7dd      	b.n	80016e0 <__aeabi_ddiv+0x57c>
 8001724:	2480      	movs	r4, #128	; 0x80
 8001726:	4643      	mov	r3, r8
 8001728:	0324      	lsls	r4, r4, #12
 800172a:	431c      	orrs	r4, r3
 800172c:	0324      	lsls	r4, r4, #12
 800172e:	4b04      	ldr	r3, [pc, #16]	; (8001740 <__aeabi_ddiv+0x5dc>)
 8001730:	0b24      	lsrs	r4, r4, #12
 8001732:	e56e      	b.n	8001212 <__aeabi_ddiv+0xae>
 8001734:	9a00      	ldr	r2, [sp, #0]
 8001736:	429a      	cmp	r2, r3
 8001738:	d3ea      	bcc.n	8001710 <__aeabi_ddiv+0x5ac>
 800173a:	0005      	movs	r5, r0
 800173c:	e7d3      	b.n	80016e6 <__aeabi_ddiv+0x582>
 800173e:	46c0      	nop			; (mov r8, r8)
 8001740:	000007ff 	.word	0x000007ff
 8001744:	0000043e 	.word	0x0000043e
 8001748:	0000041e 	.word	0x0000041e
 800174c:	000003ff 	.word	0x000003ff

08001750 <__aeabi_dmul>:
 8001750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001752:	4657      	mov	r7, sl
 8001754:	464e      	mov	r6, r9
 8001756:	4645      	mov	r5, r8
 8001758:	46de      	mov	lr, fp
 800175a:	b5e0      	push	{r5, r6, r7, lr}
 800175c:	4698      	mov	r8, r3
 800175e:	030c      	lsls	r4, r1, #12
 8001760:	004b      	lsls	r3, r1, #1
 8001762:	0006      	movs	r6, r0
 8001764:	4692      	mov	sl, r2
 8001766:	b087      	sub	sp, #28
 8001768:	0b24      	lsrs	r4, r4, #12
 800176a:	0d5b      	lsrs	r3, r3, #21
 800176c:	0fcf      	lsrs	r7, r1, #31
 800176e:	2b00      	cmp	r3, #0
 8001770:	d100      	bne.n	8001774 <__aeabi_dmul+0x24>
 8001772:	e15c      	b.n	8001a2e <__aeabi_dmul+0x2de>
 8001774:	4ad9      	ldr	r2, [pc, #868]	; (8001adc <__aeabi_dmul+0x38c>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d100      	bne.n	800177c <__aeabi_dmul+0x2c>
 800177a:	e175      	b.n	8001a68 <__aeabi_dmul+0x318>
 800177c:	0f42      	lsrs	r2, r0, #29
 800177e:	00e4      	lsls	r4, r4, #3
 8001780:	4314      	orrs	r4, r2
 8001782:	2280      	movs	r2, #128	; 0x80
 8001784:	0412      	lsls	r2, r2, #16
 8001786:	4314      	orrs	r4, r2
 8001788:	4ad5      	ldr	r2, [pc, #852]	; (8001ae0 <__aeabi_dmul+0x390>)
 800178a:	00c5      	lsls	r5, r0, #3
 800178c:	4694      	mov	ip, r2
 800178e:	4463      	add	r3, ip
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	2300      	movs	r3, #0
 8001794:	4699      	mov	r9, r3
 8001796:	469b      	mov	fp, r3
 8001798:	4643      	mov	r3, r8
 800179a:	4642      	mov	r2, r8
 800179c:	031e      	lsls	r6, r3, #12
 800179e:	0fd2      	lsrs	r2, r2, #31
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	4650      	mov	r0, sl
 80017a4:	4690      	mov	r8, r2
 80017a6:	0b36      	lsrs	r6, r6, #12
 80017a8:	0d5b      	lsrs	r3, r3, #21
 80017aa:	d100      	bne.n	80017ae <__aeabi_dmul+0x5e>
 80017ac:	e120      	b.n	80019f0 <__aeabi_dmul+0x2a0>
 80017ae:	4acb      	ldr	r2, [pc, #812]	; (8001adc <__aeabi_dmul+0x38c>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d100      	bne.n	80017b6 <__aeabi_dmul+0x66>
 80017b4:	e162      	b.n	8001a7c <__aeabi_dmul+0x32c>
 80017b6:	49ca      	ldr	r1, [pc, #808]	; (8001ae0 <__aeabi_dmul+0x390>)
 80017b8:	0f42      	lsrs	r2, r0, #29
 80017ba:	468c      	mov	ip, r1
 80017bc:	9900      	ldr	r1, [sp, #0]
 80017be:	4463      	add	r3, ip
 80017c0:	00f6      	lsls	r6, r6, #3
 80017c2:	468c      	mov	ip, r1
 80017c4:	4316      	orrs	r6, r2
 80017c6:	2280      	movs	r2, #128	; 0x80
 80017c8:	449c      	add	ip, r3
 80017ca:	0412      	lsls	r2, r2, #16
 80017cc:	4663      	mov	r3, ip
 80017ce:	4316      	orrs	r6, r2
 80017d0:	00c2      	lsls	r2, r0, #3
 80017d2:	2000      	movs	r0, #0
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	9900      	ldr	r1, [sp, #0]
 80017d8:	4643      	mov	r3, r8
 80017da:	3101      	adds	r1, #1
 80017dc:	468c      	mov	ip, r1
 80017de:	4649      	mov	r1, r9
 80017e0:	407b      	eors	r3, r7
 80017e2:	9301      	str	r3, [sp, #4]
 80017e4:	290f      	cmp	r1, #15
 80017e6:	d826      	bhi.n	8001836 <__aeabi_dmul+0xe6>
 80017e8:	4bbe      	ldr	r3, [pc, #760]	; (8001ae4 <__aeabi_dmul+0x394>)
 80017ea:	0089      	lsls	r1, r1, #2
 80017ec:	5859      	ldr	r1, [r3, r1]
 80017ee:	468f      	mov	pc, r1
 80017f0:	4643      	mov	r3, r8
 80017f2:	9301      	str	r3, [sp, #4]
 80017f4:	0034      	movs	r4, r6
 80017f6:	0015      	movs	r5, r2
 80017f8:	4683      	mov	fp, r0
 80017fa:	465b      	mov	r3, fp
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d016      	beq.n	800182e <__aeabi_dmul+0xde>
 8001800:	2b03      	cmp	r3, #3
 8001802:	d100      	bne.n	8001806 <__aeabi_dmul+0xb6>
 8001804:	e203      	b.n	8001c0e <__aeabi_dmul+0x4be>
 8001806:	2b01      	cmp	r3, #1
 8001808:	d000      	beq.n	800180c <__aeabi_dmul+0xbc>
 800180a:	e0cd      	b.n	80019a8 <__aeabi_dmul+0x258>
 800180c:	2200      	movs	r2, #0
 800180e:	2400      	movs	r4, #0
 8001810:	2500      	movs	r5, #0
 8001812:	9b01      	ldr	r3, [sp, #4]
 8001814:	0512      	lsls	r2, r2, #20
 8001816:	4322      	orrs	r2, r4
 8001818:	07db      	lsls	r3, r3, #31
 800181a:	431a      	orrs	r2, r3
 800181c:	0028      	movs	r0, r5
 800181e:	0011      	movs	r1, r2
 8001820:	b007      	add	sp, #28
 8001822:	bcf0      	pop	{r4, r5, r6, r7}
 8001824:	46bb      	mov	fp, r7
 8001826:	46b2      	mov	sl, r6
 8001828:	46a9      	mov	r9, r5
 800182a:	46a0      	mov	r8, r4
 800182c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800182e:	2400      	movs	r4, #0
 8001830:	2500      	movs	r5, #0
 8001832:	4aaa      	ldr	r2, [pc, #680]	; (8001adc <__aeabi_dmul+0x38c>)
 8001834:	e7ed      	b.n	8001812 <__aeabi_dmul+0xc2>
 8001836:	0c28      	lsrs	r0, r5, #16
 8001838:	042d      	lsls	r5, r5, #16
 800183a:	0c2d      	lsrs	r5, r5, #16
 800183c:	002b      	movs	r3, r5
 800183e:	0c11      	lsrs	r1, r2, #16
 8001840:	0412      	lsls	r2, r2, #16
 8001842:	0c12      	lsrs	r2, r2, #16
 8001844:	4353      	muls	r3, r2
 8001846:	4698      	mov	r8, r3
 8001848:	0013      	movs	r3, r2
 800184a:	002f      	movs	r7, r5
 800184c:	4343      	muls	r3, r0
 800184e:	4699      	mov	r9, r3
 8001850:	434f      	muls	r7, r1
 8001852:	444f      	add	r7, r9
 8001854:	46bb      	mov	fp, r7
 8001856:	4647      	mov	r7, r8
 8001858:	000b      	movs	r3, r1
 800185a:	0c3f      	lsrs	r7, r7, #16
 800185c:	46ba      	mov	sl, r7
 800185e:	4343      	muls	r3, r0
 8001860:	44da      	add	sl, fp
 8001862:	9302      	str	r3, [sp, #8]
 8001864:	45d1      	cmp	r9, sl
 8001866:	d904      	bls.n	8001872 <__aeabi_dmul+0x122>
 8001868:	2780      	movs	r7, #128	; 0x80
 800186a:	027f      	lsls	r7, r7, #9
 800186c:	46b9      	mov	r9, r7
 800186e:	444b      	add	r3, r9
 8001870:	9302      	str	r3, [sp, #8]
 8001872:	4653      	mov	r3, sl
 8001874:	0c1b      	lsrs	r3, r3, #16
 8001876:	469b      	mov	fp, r3
 8001878:	4653      	mov	r3, sl
 800187a:	041f      	lsls	r7, r3, #16
 800187c:	4643      	mov	r3, r8
 800187e:	041b      	lsls	r3, r3, #16
 8001880:	0c1b      	lsrs	r3, r3, #16
 8001882:	4698      	mov	r8, r3
 8001884:	003b      	movs	r3, r7
 8001886:	4443      	add	r3, r8
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	0c33      	lsrs	r3, r6, #16
 800188c:	0436      	lsls	r6, r6, #16
 800188e:	0c36      	lsrs	r6, r6, #16
 8001890:	4698      	mov	r8, r3
 8001892:	0033      	movs	r3, r6
 8001894:	4343      	muls	r3, r0
 8001896:	4699      	mov	r9, r3
 8001898:	4643      	mov	r3, r8
 800189a:	4343      	muls	r3, r0
 800189c:	002f      	movs	r7, r5
 800189e:	469a      	mov	sl, r3
 80018a0:	4643      	mov	r3, r8
 80018a2:	4377      	muls	r7, r6
 80018a4:	435d      	muls	r5, r3
 80018a6:	0c38      	lsrs	r0, r7, #16
 80018a8:	444d      	add	r5, r9
 80018aa:	1945      	adds	r5, r0, r5
 80018ac:	45a9      	cmp	r9, r5
 80018ae:	d903      	bls.n	80018b8 <__aeabi_dmul+0x168>
 80018b0:	2380      	movs	r3, #128	; 0x80
 80018b2:	025b      	lsls	r3, r3, #9
 80018b4:	4699      	mov	r9, r3
 80018b6:	44ca      	add	sl, r9
 80018b8:	043f      	lsls	r7, r7, #16
 80018ba:	0c28      	lsrs	r0, r5, #16
 80018bc:	0c3f      	lsrs	r7, r7, #16
 80018be:	042d      	lsls	r5, r5, #16
 80018c0:	19ed      	adds	r5, r5, r7
 80018c2:	0c27      	lsrs	r7, r4, #16
 80018c4:	0424      	lsls	r4, r4, #16
 80018c6:	0c24      	lsrs	r4, r4, #16
 80018c8:	0003      	movs	r3, r0
 80018ca:	0020      	movs	r0, r4
 80018cc:	4350      	muls	r0, r2
 80018ce:	437a      	muls	r2, r7
 80018d0:	4691      	mov	r9, r2
 80018d2:	003a      	movs	r2, r7
 80018d4:	4453      	add	r3, sl
 80018d6:	9305      	str	r3, [sp, #20]
 80018d8:	0c03      	lsrs	r3, r0, #16
 80018da:	469a      	mov	sl, r3
 80018dc:	434a      	muls	r2, r1
 80018de:	4361      	muls	r1, r4
 80018e0:	4449      	add	r1, r9
 80018e2:	4451      	add	r1, sl
 80018e4:	44ab      	add	fp, r5
 80018e6:	4589      	cmp	r9, r1
 80018e8:	d903      	bls.n	80018f2 <__aeabi_dmul+0x1a2>
 80018ea:	2380      	movs	r3, #128	; 0x80
 80018ec:	025b      	lsls	r3, r3, #9
 80018ee:	4699      	mov	r9, r3
 80018f0:	444a      	add	r2, r9
 80018f2:	0400      	lsls	r0, r0, #16
 80018f4:	0c0b      	lsrs	r3, r1, #16
 80018f6:	0c00      	lsrs	r0, r0, #16
 80018f8:	0409      	lsls	r1, r1, #16
 80018fa:	1809      	adds	r1, r1, r0
 80018fc:	0020      	movs	r0, r4
 80018fe:	4699      	mov	r9, r3
 8001900:	4643      	mov	r3, r8
 8001902:	4370      	muls	r0, r6
 8001904:	435c      	muls	r4, r3
 8001906:	437e      	muls	r6, r7
 8001908:	435f      	muls	r7, r3
 800190a:	0c03      	lsrs	r3, r0, #16
 800190c:	4698      	mov	r8, r3
 800190e:	19a4      	adds	r4, r4, r6
 8001910:	4444      	add	r4, r8
 8001912:	444a      	add	r2, r9
 8001914:	9703      	str	r7, [sp, #12]
 8001916:	42a6      	cmp	r6, r4
 8001918:	d904      	bls.n	8001924 <__aeabi_dmul+0x1d4>
 800191a:	2380      	movs	r3, #128	; 0x80
 800191c:	025b      	lsls	r3, r3, #9
 800191e:	4698      	mov	r8, r3
 8001920:	4447      	add	r7, r8
 8001922:	9703      	str	r7, [sp, #12]
 8001924:	0423      	lsls	r3, r4, #16
 8001926:	9e02      	ldr	r6, [sp, #8]
 8001928:	469a      	mov	sl, r3
 800192a:	9b05      	ldr	r3, [sp, #20]
 800192c:	445e      	add	r6, fp
 800192e:	4698      	mov	r8, r3
 8001930:	42ae      	cmp	r6, r5
 8001932:	41ad      	sbcs	r5, r5
 8001934:	1876      	adds	r6, r6, r1
 8001936:	428e      	cmp	r6, r1
 8001938:	4189      	sbcs	r1, r1
 800193a:	0400      	lsls	r0, r0, #16
 800193c:	0c00      	lsrs	r0, r0, #16
 800193e:	4450      	add	r0, sl
 8001940:	4440      	add	r0, r8
 8001942:	426d      	negs	r5, r5
 8001944:	1947      	adds	r7, r0, r5
 8001946:	46b8      	mov	r8, r7
 8001948:	4693      	mov	fp, r2
 800194a:	4249      	negs	r1, r1
 800194c:	4689      	mov	r9, r1
 800194e:	44c3      	add	fp, r8
 8001950:	44d9      	add	r9, fp
 8001952:	4298      	cmp	r0, r3
 8001954:	4180      	sbcs	r0, r0
 8001956:	45a8      	cmp	r8, r5
 8001958:	41ad      	sbcs	r5, r5
 800195a:	4593      	cmp	fp, r2
 800195c:	4192      	sbcs	r2, r2
 800195e:	4589      	cmp	r9, r1
 8001960:	4189      	sbcs	r1, r1
 8001962:	426d      	negs	r5, r5
 8001964:	4240      	negs	r0, r0
 8001966:	4328      	orrs	r0, r5
 8001968:	0c24      	lsrs	r4, r4, #16
 800196a:	4252      	negs	r2, r2
 800196c:	4249      	negs	r1, r1
 800196e:	430a      	orrs	r2, r1
 8001970:	9b03      	ldr	r3, [sp, #12]
 8001972:	1900      	adds	r0, r0, r4
 8001974:	1880      	adds	r0, r0, r2
 8001976:	18c7      	adds	r7, r0, r3
 8001978:	464b      	mov	r3, r9
 800197a:	0ddc      	lsrs	r4, r3, #23
 800197c:	9b04      	ldr	r3, [sp, #16]
 800197e:	0275      	lsls	r5, r6, #9
 8001980:	431d      	orrs	r5, r3
 8001982:	1e6a      	subs	r2, r5, #1
 8001984:	4195      	sbcs	r5, r2
 8001986:	464b      	mov	r3, r9
 8001988:	0df6      	lsrs	r6, r6, #23
 800198a:	027f      	lsls	r7, r7, #9
 800198c:	4335      	orrs	r5, r6
 800198e:	025a      	lsls	r2, r3, #9
 8001990:	433c      	orrs	r4, r7
 8001992:	4315      	orrs	r5, r2
 8001994:	01fb      	lsls	r3, r7, #7
 8001996:	d400      	bmi.n	800199a <__aeabi_dmul+0x24a>
 8001998:	e11c      	b.n	8001bd4 <__aeabi_dmul+0x484>
 800199a:	2101      	movs	r1, #1
 800199c:	086a      	lsrs	r2, r5, #1
 800199e:	400d      	ands	r5, r1
 80019a0:	4315      	orrs	r5, r2
 80019a2:	07e2      	lsls	r2, r4, #31
 80019a4:	4315      	orrs	r5, r2
 80019a6:	0864      	lsrs	r4, r4, #1
 80019a8:	494f      	ldr	r1, [pc, #316]	; (8001ae8 <__aeabi_dmul+0x398>)
 80019aa:	4461      	add	r1, ip
 80019ac:	2900      	cmp	r1, #0
 80019ae:	dc00      	bgt.n	80019b2 <__aeabi_dmul+0x262>
 80019b0:	e0b0      	b.n	8001b14 <__aeabi_dmul+0x3c4>
 80019b2:	076b      	lsls	r3, r5, #29
 80019b4:	d009      	beq.n	80019ca <__aeabi_dmul+0x27a>
 80019b6:	220f      	movs	r2, #15
 80019b8:	402a      	ands	r2, r5
 80019ba:	2a04      	cmp	r2, #4
 80019bc:	d005      	beq.n	80019ca <__aeabi_dmul+0x27a>
 80019be:	1d2a      	adds	r2, r5, #4
 80019c0:	42aa      	cmp	r2, r5
 80019c2:	41ad      	sbcs	r5, r5
 80019c4:	426d      	negs	r5, r5
 80019c6:	1964      	adds	r4, r4, r5
 80019c8:	0015      	movs	r5, r2
 80019ca:	01e3      	lsls	r3, r4, #7
 80019cc:	d504      	bpl.n	80019d8 <__aeabi_dmul+0x288>
 80019ce:	2180      	movs	r1, #128	; 0x80
 80019d0:	4a46      	ldr	r2, [pc, #280]	; (8001aec <__aeabi_dmul+0x39c>)
 80019d2:	00c9      	lsls	r1, r1, #3
 80019d4:	4014      	ands	r4, r2
 80019d6:	4461      	add	r1, ip
 80019d8:	4a45      	ldr	r2, [pc, #276]	; (8001af0 <__aeabi_dmul+0x3a0>)
 80019da:	4291      	cmp	r1, r2
 80019dc:	dd00      	ble.n	80019e0 <__aeabi_dmul+0x290>
 80019de:	e726      	b.n	800182e <__aeabi_dmul+0xde>
 80019e0:	0762      	lsls	r2, r4, #29
 80019e2:	08ed      	lsrs	r5, r5, #3
 80019e4:	0264      	lsls	r4, r4, #9
 80019e6:	0549      	lsls	r1, r1, #21
 80019e8:	4315      	orrs	r5, r2
 80019ea:	0b24      	lsrs	r4, r4, #12
 80019ec:	0d4a      	lsrs	r2, r1, #21
 80019ee:	e710      	b.n	8001812 <__aeabi_dmul+0xc2>
 80019f0:	4652      	mov	r2, sl
 80019f2:	4332      	orrs	r2, r6
 80019f4:	d100      	bne.n	80019f8 <__aeabi_dmul+0x2a8>
 80019f6:	e07f      	b.n	8001af8 <__aeabi_dmul+0x3a8>
 80019f8:	2e00      	cmp	r6, #0
 80019fa:	d100      	bne.n	80019fe <__aeabi_dmul+0x2ae>
 80019fc:	e0dc      	b.n	8001bb8 <__aeabi_dmul+0x468>
 80019fe:	0030      	movs	r0, r6
 8001a00:	f000 fd8c 	bl	800251c <__clzsi2>
 8001a04:	0002      	movs	r2, r0
 8001a06:	3a0b      	subs	r2, #11
 8001a08:	231d      	movs	r3, #29
 8001a0a:	0001      	movs	r1, r0
 8001a0c:	1a9b      	subs	r3, r3, r2
 8001a0e:	4652      	mov	r2, sl
 8001a10:	3908      	subs	r1, #8
 8001a12:	40da      	lsrs	r2, r3
 8001a14:	408e      	lsls	r6, r1
 8001a16:	4316      	orrs	r6, r2
 8001a18:	4652      	mov	r2, sl
 8001a1a:	408a      	lsls	r2, r1
 8001a1c:	9b00      	ldr	r3, [sp, #0]
 8001a1e:	4935      	ldr	r1, [pc, #212]	; (8001af4 <__aeabi_dmul+0x3a4>)
 8001a20:	1a18      	subs	r0, r3, r0
 8001a22:	0003      	movs	r3, r0
 8001a24:	468c      	mov	ip, r1
 8001a26:	4463      	add	r3, ip
 8001a28:	2000      	movs	r0, #0
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	e6d3      	b.n	80017d6 <__aeabi_dmul+0x86>
 8001a2e:	0025      	movs	r5, r4
 8001a30:	4305      	orrs	r5, r0
 8001a32:	d04a      	beq.n	8001aca <__aeabi_dmul+0x37a>
 8001a34:	2c00      	cmp	r4, #0
 8001a36:	d100      	bne.n	8001a3a <__aeabi_dmul+0x2ea>
 8001a38:	e0b0      	b.n	8001b9c <__aeabi_dmul+0x44c>
 8001a3a:	0020      	movs	r0, r4
 8001a3c:	f000 fd6e 	bl	800251c <__clzsi2>
 8001a40:	0001      	movs	r1, r0
 8001a42:	0002      	movs	r2, r0
 8001a44:	390b      	subs	r1, #11
 8001a46:	231d      	movs	r3, #29
 8001a48:	0010      	movs	r0, r2
 8001a4a:	1a5b      	subs	r3, r3, r1
 8001a4c:	0031      	movs	r1, r6
 8001a4e:	0035      	movs	r5, r6
 8001a50:	3808      	subs	r0, #8
 8001a52:	4084      	lsls	r4, r0
 8001a54:	40d9      	lsrs	r1, r3
 8001a56:	4085      	lsls	r5, r0
 8001a58:	430c      	orrs	r4, r1
 8001a5a:	4826      	ldr	r0, [pc, #152]	; (8001af4 <__aeabi_dmul+0x3a4>)
 8001a5c:	1a83      	subs	r3, r0, r2
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	2300      	movs	r3, #0
 8001a62:	4699      	mov	r9, r3
 8001a64:	469b      	mov	fp, r3
 8001a66:	e697      	b.n	8001798 <__aeabi_dmul+0x48>
 8001a68:	0005      	movs	r5, r0
 8001a6a:	4325      	orrs	r5, r4
 8001a6c:	d126      	bne.n	8001abc <__aeabi_dmul+0x36c>
 8001a6e:	2208      	movs	r2, #8
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	2302      	movs	r3, #2
 8001a74:	2400      	movs	r4, #0
 8001a76:	4691      	mov	r9, r2
 8001a78:	469b      	mov	fp, r3
 8001a7a:	e68d      	b.n	8001798 <__aeabi_dmul+0x48>
 8001a7c:	4652      	mov	r2, sl
 8001a7e:	9b00      	ldr	r3, [sp, #0]
 8001a80:	4332      	orrs	r2, r6
 8001a82:	d110      	bne.n	8001aa6 <__aeabi_dmul+0x356>
 8001a84:	4915      	ldr	r1, [pc, #84]	; (8001adc <__aeabi_dmul+0x38c>)
 8001a86:	2600      	movs	r6, #0
 8001a88:	468c      	mov	ip, r1
 8001a8a:	4463      	add	r3, ip
 8001a8c:	4649      	mov	r1, r9
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	2302      	movs	r3, #2
 8001a92:	4319      	orrs	r1, r3
 8001a94:	4689      	mov	r9, r1
 8001a96:	2002      	movs	r0, #2
 8001a98:	e69d      	b.n	80017d6 <__aeabi_dmul+0x86>
 8001a9a:	465b      	mov	r3, fp
 8001a9c:	9701      	str	r7, [sp, #4]
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d000      	beq.n	8001aa4 <__aeabi_dmul+0x354>
 8001aa2:	e6ad      	b.n	8001800 <__aeabi_dmul+0xb0>
 8001aa4:	e6c3      	b.n	800182e <__aeabi_dmul+0xde>
 8001aa6:	4a0d      	ldr	r2, [pc, #52]	; (8001adc <__aeabi_dmul+0x38c>)
 8001aa8:	2003      	movs	r0, #3
 8001aaa:	4694      	mov	ip, r2
 8001aac:	4463      	add	r3, ip
 8001aae:	464a      	mov	r2, r9
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	4691      	mov	r9, r2
 8001ab8:	4652      	mov	r2, sl
 8001aba:	e68c      	b.n	80017d6 <__aeabi_dmul+0x86>
 8001abc:	220c      	movs	r2, #12
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	0005      	movs	r5, r0
 8001ac4:	4691      	mov	r9, r2
 8001ac6:	469b      	mov	fp, r3
 8001ac8:	e666      	b.n	8001798 <__aeabi_dmul+0x48>
 8001aca:	2304      	movs	r3, #4
 8001acc:	4699      	mov	r9, r3
 8001ace:	2300      	movs	r3, #0
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	2400      	movs	r4, #0
 8001ad6:	469b      	mov	fp, r3
 8001ad8:	e65e      	b.n	8001798 <__aeabi_dmul+0x48>
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	000007ff 	.word	0x000007ff
 8001ae0:	fffffc01 	.word	0xfffffc01
 8001ae4:	08005f80 	.word	0x08005f80
 8001ae8:	000003ff 	.word	0x000003ff
 8001aec:	feffffff 	.word	0xfeffffff
 8001af0:	000007fe 	.word	0x000007fe
 8001af4:	fffffc0d 	.word	0xfffffc0d
 8001af8:	4649      	mov	r1, r9
 8001afa:	2301      	movs	r3, #1
 8001afc:	4319      	orrs	r1, r3
 8001afe:	4689      	mov	r9, r1
 8001b00:	2600      	movs	r6, #0
 8001b02:	2001      	movs	r0, #1
 8001b04:	e667      	b.n	80017d6 <__aeabi_dmul+0x86>
 8001b06:	2300      	movs	r3, #0
 8001b08:	2480      	movs	r4, #128	; 0x80
 8001b0a:	2500      	movs	r5, #0
 8001b0c:	4a43      	ldr	r2, [pc, #268]	; (8001c1c <__aeabi_dmul+0x4cc>)
 8001b0e:	9301      	str	r3, [sp, #4]
 8001b10:	0324      	lsls	r4, r4, #12
 8001b12:	e67e      	b.n	8001812 <__aeabi_dmul+0xc2>
 8001b14:	2001      	movs	r0, #1
 8001b16:	1a40      	subs	r0, r0, r1
 8001b18:	2838      	cmp	r0, #56	; 0x38
 8001b1a:	dd00      	ble.n	8001b1e <__aeabi_dmul+0x3ce>
 8001b1c:	e676      	b.n	800180c <__aeabi_dmul+0xbc>
 8001b1e:	281f      	cmp	r0, #31
 8001b20:	dd5b      	ble.n	8001bda <__aeabi_dmul+0x48a>
 8001b22:	221f      	movs	r2, #31
 8001b24:	0023      	movs	r3, r4
 8001b26:	4252      	negs	r2, r2
 8001b28:	1a51      	subs	r1, r2, r1
 8001b2a:	40cb      	lsrs	r3, r1
 8001b2c:	0019      	movs	r1, r3
 8001b2e:	2820      	cmp	r0, #32
 8001b30:	d003      	beq.n	8001b3a <__aeabi_dmul+0x3ea>
 8001b32:	4a3b      	ldr	r2, [pc, #236]	; (8001c20 <__aeabi_dmul+0x4d0>)
 8001b34:	4462      	add	r2, ip
 8001b36:	4094      	lsls	r4, r2
 8001b38:	4325      	orrs	r5, r4
 8001b3a:	1e6a      	subs	r2, r5, #1
 8001b3c:	4195      	sbcs	r5, r2
 8001b3e:	002a      	movs	r2, r5
 8001b40:	430a      	orrs	r2, r1
 8001b42:	2107      	movs	r1, #7
 8001b44:	000d      	movs	r5, r1
 8001b46:	2400      	movs	r4, #0
 8001b48:	4015      	ands	r5, r2
 8001b4a:	4211      	tst	r1, r2
 8001b4c:	d05b      	beq.n	8001c06 <__aeabi_dmul+0x4b6>
 8001b4e:	210f      	movs	r1, #15
 8001b50:	2400      	movs	r4, #0
 8001b52:	4011      	ands	r1, r2
 8001b54:	2904      	cmp	r1, #4
 8001b56:	d053      	beq.n	8001c00 <__aeabi_dmul+0x4b0>
 8001b58:	1d11      	adds	r1, r2, #4
 8001b5a:	4291      	cmp	r1, r2
 8001b5c:	4192      	sbcs	r2, r2
 8001b5e:	4252      	negs	r2, r2
 8001b60:	18a4      	adds	r4, r4, r2
 8001b62:	000a      	movs	r2, r1
 8001b64:	0223      	lsls	r3, r4, #8
 8001b66:	d54b      	bpl.n	8001c00 <__aeabi_dmul+0x4b0>
 8001b68:	2201      	movs	r2, #1
 8001b6a:	2400      	movs	r4, #0
 8001b6c:	2500      	movs	r5, #0
 8001b6e:	e650      	b.n	8001812 <__aeabi_dmul+0xc2>
 8001b70:	2380      	movs	r3, #128	; 0x80
 8001b72:	031b      	lsls	r3, r3, #12
 8001b74:	421c      	tst	r4, r3
 8001b76:	d009      	beq.n	8001b8c <__aeabi_dmul+0x43c>
 8001b78:	421e      	tst	r6, r3
 8001b7a:	d107      	bne.n	8001b8c <__aeabi_dmul+0x43c>
 8001b7c:	4333      	orrs	r3, r6
 8001b7e:	031c      	lsls	r4, r3, #12
 8001b80:	4643      	mov	r3, r8
 8001b82:	0015      	movs	r5, r2
 8001b84:	0b24      	lsrs	r4, r4, #12
 8001b86:	4a25      	ldr	r2, [pc, #148]	; (8001c1c <__aeabi_dmul+0x4cc>)
 8001b88:	9301      	str	r3, [sp, #4]
 8001b8a:	e642      	b.n	8001812 <__aeabi_dmul+0xc2>
 8001b8c:	2280      	movs	r2, #128	; 0x80
 8001b8e:	0312      	lsls	r2, r2, #12
 8001b90:	4314      	orrs	r4, r2
 8001b92:	0324      	lsls	r4, r4, #12
 8001b94:	4a21      	ldr	r2, [pc, #132]	; (8001c1c <__aeabi_dmul+0x4cc>)
 8001b96:	0b24      	lsrs	r4, r4, #12
 8001b98:	9701      	str	r7, [sp, #4]
 8001b9a:	e63a      	b.n	8001812 <__aeabi_dmul+0xc2>
 8001b9c:	f000 fcbe 	bl	800251c <__clzsi2>
 8001ba0:	0001      	movs	r1, r0
 8001ba2:	0002      	movs	r2, r0
 8001ba4:	3115      	adds	r1, #21
 8001ba6:	3220      	adds	r2, #32
 8001ba8:	291c      	cmp	r1, #28
 8001baa:	dc00      	bgt.n	8001bae <__aeabi_dmul+0x45e>
 8001bac:	e74b      	b.n	8001a46 <__aeabi_dmul+0x2f6>
 8001bae:	0034      	movs	r4, r6
 8001bb0:	3808      	subs	r0, #8
 8001bb2:	2500      	movs	r5, #0
 8001bb4:	4084      	lsls	r4, r0
 8001bb6:	e750      	b.n	8001a5a <__aeabi_dmul+0x30a>
 8001bb8:	f000 fcb0 	bl	800251c <__clzsi2>
 8001bbc:	0003      	movs	r3, r0
 8001bbe:	001a      	movs	r2, r3
 8001bc0:	3215      	adds	r2, #21
 8001bc2:	3020      	adds	r0, #32
 8001bc4:	2a1c      	cmp	r2, #28
 8001bc6:	dc00      	bgt.n	8001bca <__aeabi_dmul+0x47a>
 8001bc8:	e71e      	b.n	8001a08 <__aeabi_dmul+0x2b8>
 8001bca:	4656      	mov	r6, sl
 8001bcc:	3b08      	subs	r3, #8
 8001bce:	2200      	movs	r2, #0
 8001bd0:	409e      	lsls	r6, r3
 8001bd2:	e723      	b.n	8001a1c <__aeabi_dmul+0x2cc>
 8001bd4:	9b00      	ldr	r3, [sp, #0]
 8001bd6:	469c      	mov	ip, r3
 8001bd8:	e6e6      	b.n	80019a8 <__aeabi_dmul+0x258>
 8001bda:	4912      	ldr	r1, [pc, #72]	; (8001c24 <__aeabi_dmul+0x4d4>)
 8001bdc:	0022      	movs	r2, r4
 8001bde:	4461      	add	r1, ip
 8001be0:	002e      	movs	r6, r5
 8001be2:	408d      	lsls	r5, r1
 8001be4:	408a      	lsls	r2, r1
 8001be6:	40c6      	lsrs	r6, r0
 8001be8:	1e69      	subs	r1, r5, #1
 8001bea:	418d      	sbcs	r5, r1
 8001bec:	4332      	orrs	r2, r6
 8001bee:	432a      	orrs	r2, r5
 8001bf0:	40c4      	lsrs	r4, r0
 8001bf2:	0753      	lsls	r3, r2, #29
 8001bf4:	d0b6      	beq.n	8001b64 <__aeabi_dmul+0x414>
 8001bf6:	210f      	movs	r1, #15
 8001bf8:	4011      	ands	r1, r2
 8001bfa:	2904      	cmp	r1, #4
 8001bfc:	d1ac      	bne.n	8001b58 <__aeabi_dmul+0x408>
 8001bfe:	e7b1      	b.n	8001b64 <__aeabi_dmul+0x414>
 8001c00:	0765      	lsls	r5, r4, #29
 8001c02:	0264      	lsls	r4, r4, #9
 8001c04:	0b24      	lsrs	r4, r4, #12
 8001c06:	08d2      	lsrs	r2, r2, #3
 8001c08:	4315      	orrs	r5, r2
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	e601      	b.n	8001812 <__aeabi_dmul+0xc2>
 8001c0e:	2280      	movs	r2, #128	; 0x80
 8001c10:	0312      	lsls	r2, r2, #12
 8001c12:	4314      	orrs	r4, r2
 8001c14:	0324      	lsls	r4, r4, #12
 8001c16:	4a01      	ldr	r2, [pc, #4]	; (8001c1c <__aeabi_dmul+0x4cc>)
 8001c18:	0b24      	lsrs	r4, r4, #12
 8001c1a:	e5fa      	b.n	8001812 <__aeabi_dmul+0xc2>
 8001c1c:	000007ff 	.word	0x000007ff
 8001c20:	0000043e 	.word	0x0000043e
 8001c24:	0000041e 	.word	0x0000041e

08001c28 <__aeabi_dsub>:
 8001c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c2a:	4657      	mov	r7, sl
 8001c2c:	464e      	mov	r6, r9
 8001c2e:	4645      	mov	r5, r8
 8001c30:	46de      	mov	lr, fp
 8001c32:	b5e0      	push	{r5, r6, r7, lr}
 8001c34:	001e      	movs	r6, r3
 8001c36:	0017      	movs	r7, r2
 8001c38:	004a      	lsls	r2, r1, #1
 8001c3a:	030b      	lsls	r3, r1, #12
 8001c3c:	0d52      	lsrs	r2, r2, #21
 8001c3e:	0a5b      	lsrs	r3, r3, #9
 8001c40:	4690      	mov	r8, r2
 8001c42:	0f42      	lsrs	r2, r0, #29
 8001c44:	431a      	orrs	r2, r3
 8001c46:	0fcd      	lsrs	r5, r1, #31
 8001c48:	4ccd      	ldr	r4, [pc, #820]	; (8001f80 <__aeabi_dsub+0x358>)
 8001c4a:	0331      	lsls	r1, r6, #12
 8001c4c:	00c3      	lsls	r3, r0, #3
 8001c4e:	4694      	mov	ip, r2
 8001c50:	0070      	lsls	r0, r6, #1
 8001c52:	0f7a      	lsrs	r2, r7, #29
 8001c54:	0a49      	lsrs	r1, r1, #9
 8001c56:	00ff      	lsls	r7, r7, #3
 8001c58:	469a      	mov	sl, r3
 8001c5a:	46b9      	mov	r9, r7
 8001c5c:	0d40      	lsrs	r0, r0, #21
 8001c5e:	0ff6      	lsrs	r6, r6, #31
 8001c60:	4311      	orrs	r1, r2
 8001c62:	42a0      	cmp	r0, r4
 8001c64:	d100      	bne.n	8001c68 <__aeabi_dsub+0x40>
 8001c66:	e0b1      	b.n	8001dcc <__aeabi_dsub+0x1a4>
 8001c68:	2201      	movs	r2, #1
 8001c6a:	4056      	eors	r6, r2
 8001c6c:	46b3      	mov	fp, r6
 8001c6e:	42b5      	cmp	r5, r6
 8001c70:	d100      	bne.n	8001c74 <__aeabi_dsub+0x4c>
 8001c72:	e088      	b.n	8001d86 <__aeabi_dsub+0x15e>
 8001c74:	4642      	mov	r2, r8
 8001c76:	1a12      	subs	r2, r2, r0
 8001c78:	2a00      	cmp	r2, #0
 8001c7a:	dc00      	bgt.n	8001c7e <__aeabi_dsub+0x56>
 8001c7c:	e0ae      	b.n	8001ddc <__aeabi_dsub+0x1b4>
 8001c7e:	2800      	cmp	r0, #0
 8001c80:	d100      	bne.n	8001c84 <__aeabi_dsub+0x5c>
 8001c82:	e0c1      	b.n	8001e08 <__aeabi_dsub+0x1e0>
 8001c84:	48be      	ldr	r0, [pc, #760]	; (8001f80 <__aeabi_dsub+0x358>)
 8001c86:	4580      	cmp	r8, r0
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dsub+0x64>
 8001c8a:	e151      	b.n	8001f30 <__aeabi_dsub+0x308>
 8001c8c:	2080      	movs	r0, #128	; 0x80
 8001c8e:	0400      	lsls	r0, r0, #16
 8001c90:	4301      	orrs	r1, r0
 8001c92:	2a38      	cmp	r2, #56	; 0x38
 8001c94:	dd00      	ble.n	8001c98 <__aeabi_dsub+0x70>
 8001c96:	e17b      	b.n	8001f90 <__aeabi_dsub+0x368>
 8001c98:	2a1f      	cmp	r2, #31
 8001c9a:	dd00      	ble.n	8001c9e <__aeabi_dsub+0x76>
 8001c9c:	e1ee      	b.n	800207c <__aeabi_dsub+0x454>
 8001c9e:	2020      	movs	r0, #32
 8001ca0:	003e      	movs	r6, r7
 8001ca2:	1a80      	subs	r0, r0, r2
 8001ca4:	000c      	movs	r4, r1
 8001ca6:	40d6      	lsrs	r6, r2
 8001ca8:	40d1      	lsrs	r1, r2
 8001caa:	4087      	lsls	r7, r0
 8001cac:	4662      	mov	r2, ip
 8001cae:	4084      	lsls	r4, r0
 8001cb0:	1a52      	subs	r2, r2, r1
 8001cb2:	1e78      	subs	r0, r7, #1
 8001cb4:	4187      	sbcs	r7, r0
 8001cb6:	4694      	mov	ip, r2
 8001cb8:	4334      	orrs	r4, r6
 8001cba:	4327      	orrs	r7, r4
 8001cbc:	1bdc      	subs	r4, r3, r7
 8001cbe:	42a3      	cmp	r3, r4
 8001cc0:	419b      	sbcs	r3, r3
 8001cc2:	4662      	mov	r2, ip
 8001cc4:	425b      	negs	r3, r3
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	4699      	mov	r9, r3
 8001cca:	464b      	mov	r3, r9
 8001ccc:	021b      	lsls	r3, r3, #8
 8001cce:	d400      	bmi.n	8001cd2 <__aeabi_dsub+0xaa>
 8001cd0:	e118      	b.n	8001f04 <__aeabi_dsub+0x2dc>
 8001cd2:	464b      	mov	r3, r9
 8001cd4:	0258      	lsls	r0, r3, #9
 8001cd6:	0a43      	lsrs	r3, r0, #9
 8001cd8:	4699      	mov	r9, r3
 8001cda:	464b      	mov	r3, r9
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d100      	bne.n	8001ce2 <__aeabi_dsub+0xba>
 8001ce0:	e137      	b.n	8001f52 <__aeabi_dsub+0x32a>
 8001ce2:	4648      	mov	r0, r9
 8001ce4:	f000 fc1a 	bl	800251c <__clzsi2>
 8001ce8:	0001      	movs	r1, r0
 8001cea:	3908      	subs	r1, #8
 8001cec:	2320      	movs	r3, #32
 8001cee:	0022      	movs	r2, r4
 8001cf0:	4648      	mov	r0, r9
 8001cf2:	1a5b      	subs	r3, r3, r1
 8001cf4:	40da      	lsrs	r2, r3
 8001cf6:	4088      	lsls	r0, r1
 8001cf8:	408c      	lsls	r4, r1
 8001cfa:	4643      	mov	r3, r8
 8001cfc:	4310      	orrs	r0, r2
 8001cfe:	4588      	cmp	r8, r1
 8001d00:	dd00      	ble.n	8001d04 <__aeabi_dsub+0xdc>
 8001d02:	e136      	b.n	8001f72 <__aeabi_dsub+0x34a>
 8001d04:	1ac9      	subs	r1, r1, r3
 8001d06:	1c4b      	adds	r3, r1, #1
 8001d08:	2b1f      	cmp	r3, #31
 8001d0a:	dd00      	ble.n	8001d0e <__aeabi_dsub+0xe6>
 8001d0c:	e0ea      	b.n	8001ee4 <__aeabi_dsub+0x2bc>
 8001d0e:	2220      	movs	r2, #32
 8001d10:	0026      	movs	r6, r4
 8001d12:	1ad2      	subs	r2, r2, r3
 8001d14:	0001      	movs	r1, r0
 8001d16:	4094      	lsls	r4, r2
 8001d18:	40de      	lsrs	r6, r3
 8001d1a:	40d8      	lsrs	r0, r3
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	4091      	lsls	r1, r2
 8001d20:	1e62      	subs	r2, r4, #1
 8001d22:	4194      	sbcs	r4, r2
 8001d24:	4681      	mov	r9, r0
 8001d26:	4698      	mov	r8, r3
 8001d28:	4331      	orrs	r1, r6
 8001d2a:	430c      	orrs	r4, r1
 8001d2c:	0763      	lsls	r3, r4, #29
 8001d2e:	d009      	beq.n	8001d44 <__aeabi_dsub+0x11c>
 8001d30:	230f      	movs	r3, #15
 8001d32:	4023      	ands	r3, r4
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d005      	beq.n	8001d44 <__aeabi_dsub+0x11c>
 8001d38:	1d23      	adds	r3, r4, #4
 8001d3a:	42a3      	cmp	r3, r4
 8001d3c:	41a4      	sbcs	r4, r4
 8001d3e:	4264      	negs	r4, r4
 8001d40:	44a1      	add	r9, r4
 8001d42:	001c      	movs	r4, r3
 8001d44:	464b      	mov	r3, r9
 8001d46:	021b      	lsls	r3, r3, #8
 8001d48:	d400      	bmi.n	8001d4c <__aeabi_dsub+0x124>
 8001d4a:	e0de      	b.n	8001f0a <__aeabi_dsub+0x2e2>
 8001d4c:	4641      	mov	r1, r8
 8001d4e:	4b8c      	ldr	r3, [pc, #560]	; (8001f80 <__aeabi_dsub+0x358>)
 8001d50:	3101      	adds	r1, #1
 8001d52:	4299      	cmp	r1, r3
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dsub+0x130>
 8001d56:	e0e7      	b.n	8001f28 <__aeabi_dsub+0x300>
 8001d58:	464b      	mov	r3, r9
 8001d5a:	488a      	ldr	r0, [pc, #552]	; (8001f84 <__aeabi_dsub+0x35c>)
 8001d5c:	08e4      	lsrs	r4, r4, #3
 8001d5e:	4003      	ands	r3, r0
 8001d60:	0018      	movs	r0, r3
 8001d62:	0549      	lsls	r1, r1, #21
 8001d64:	075b      	lsls	r3, r3, #29
 8001d66:	0240      	lsls	r0, r0, #9
 8001d68:	4323      	orrs	r3, r4
 8001d6a:	0d4a      	lsrs	r2, r1, #21
 8001d6c:	0b04      	lsrs	r4, r0, #12
 8001d6e:	0512      	lsls	r2, r2, #20
 8001d70:	07ed      	lsls	r5, r5, #31
 8001d72:	4322      	orrs	r2, r4
 8001d74:	432a      	orrs	r2, r5
 8001d76:	0018      	movs	r0, r3
 8001d78:	0011      	movs	r1, r2
 8001d7a:	bcf0      	pop	{r4, r5, r6, r7}
 8001d7c:	46bb      	mov	fp, r7
 8001d7e:	46b2      	mov	sl, r6
 8001d80:	46a9      	mov	r9, r5
 8001d82:	46a0      	mov	r8, r4
 8001d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d86:	4642      	mov	r2, r8
 8001d88:	1a12      	subs	r2, r2, r0
 8001d8a:	2a00      	cmp	r2, #0
 8001d8c:	dd52      	ble.n	8001e34 <__aeabi_dsub+0x20c>
 8001d8e:	2800      	cmp	r0, #0
 8001d90:	d100      	bne.n	8001d94 <__aeabi_dsub+0x16c>
 8001d92:	e09c      	b.n	8001ece <__aeabi_dsub+0x2a6>
 8001d94:	45a0      	cmp	r8, r4
 8001d96:	d100      	bne.n	8001d9a <__aeabi_dsub+0x172>
 8001d98:	e0ca      	b.n	8001f30 <__aeabi_dsub+0x308>
 8001d9a:	2080      	movs	r0, #128	; 0x80
 8001d9c:	0400      	lsls	r0, r0, #16
 8001d9e:	4301      	orrs	r1, r0
 8001da0:	2a38      	cmp	r2, #56	; 0x38
 8001da2:	dd00      	ble.n	8001da6 <__aeabi_dsub+0x17e>
 8001da4:	e149      	b.n	800203a <__aeabi_dsub+0x412>
 8001da6:	2a1f      	cmp	r2, #31
 8001da8:	dc00      	bgt.n	8001dac <__aeabi_dsub+0x184>
 8001daa:	e197      	b.n	80020dc <__aeabi_dsub+0x4b4>
 8001dac:	0010      	movs	r0, r2
 8001dae:	000e      	movs	r6, r1
 8001db0:	3820      	subs	r0, #32
 8001db2:	40c6      	lsrs	r6, r0
 8001db4:	2a20      	cmp	r2, #32
 8001db6:	d004      	beq.n	8001dc2 <__aeabi_dsub+0x19a>
 8001db8:	2040      	movs	r0, #64	; 0x40
 8001dba:	1a82      	subs	r2, r0, r2
 8001dbc:	4091      	lsls	r1, r2
 8001dbe:	430f      	orrs	r7, r1
 8001dc0:	46b9      	mov	r9, r7
 8001dc2:	464c      	mov	r4, r9
 8001dc4:	1e62      	subs	r2, r4, #1
 8001dc6:	4194      	sbcs	r4, r2
 8001dc8:	4334      	orrs	r4, r6
 8001dca:	e13a      	b.n	8002042 <__aeabi_dsub+0x41a>
 8001dcc:	000a      	movs	r2, r1
 8001dce:	433a      	orrs	r2, r7
 8001dd0:	d028      	beq.n	8001e24 <__aeabi_dsub+0x1fc>
 8001dd2:	46b3      	mov	fp, r6
 8001dd4:	42b5      	cmp	r5, r6
 8001dd6:	d02b      	beq.n	8001e30 <__aeabi_dsub+0x208>
 8001dd8:	4a6b      	ldr	r2, [pc, #428]	; (8001f88 <__aeabi_dsub+0x360>)
 8001dda:	4442      	add	r2, r8
 8001ddc:	2a00      	cmp	r2, #0
 8001dde:	d05d      	beq.n	8001e9c <__aeabi_dsub+0x274>
 8001de0:	4642      	mov	r2, r8
 8001de2:	4644      	mov	r4, r8
 8001de4:	1a82      	subs	r2, r0, r2
 8001de6:	2c00      	cmp	r4, #0
 8001de8:	d000      	beq.n	8001dec <__aeabi_dsub+0x1c4>
 8001dea:	e0f5      	b.n	8001fd8 <__aeabi_dsub+0x3b0>
 8001dec:	4665      	mov	r5, ip
 8001dee:	431d      	orrs	r5, r3
 8001df0:	d100      	bne.n	8001df4 <__aeabi_dsub+0x1cc>
 8001df2:	e19c      	b.n	800212e <__aeabi_dsub+0x506>
 8001df4:	1e55      	subs	r5, r2, #1
 8001df6:	2a01      	cmp	r2, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x1d4>
 8001dfa:	e1fb      	b.n	80021f4 <__aeabi_dsub+0x5cc>
 8001dfc:	4c60      	ldr	r4, [pc, #384]	; (8001f80 <__aeabi_dsub+0x358>)
 8001dfe:	42a2      	cmp	r2, r4
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x1dc>
 8001e02:	e1bd      	b.n	8002180 <__aeabi_dsub+0x558>
 8001e04:	002a      	movs	r2, r5
 8001e06:	e0f0      	b.n	8001fea <__aeabi_dsub+0x3c2>
 8001e08:	0008      	movs	r0, r1
 8001e0a:	4338      	orrs	r0, r7
 8001e0c:	d100      	bne.n	8001e10 <__aeabi_dsub+0x1e8>
 8001e0e:	e0c3      	b.n	8001f98 <__aeabi_dsub+0x370>
 8001e10:	1e50      	subs	r0, r2, #1
 8001e12:	2a01      	cmp	r2, #1
 8001e14:	d100      	bne.n	8001e18 <__aeabi_dsub+0x1f0>
 8001e16:	e1a8      	b.n	800216a <__aeabi_dsub+0x542>
 8001e18:	4c59      	ldr	r4, [pc, #356]	; (8001f80 <__aeabi_dsub+0x358>)
 8001e1a:	42a2      	cmp	r2, r4
 8001e1c:	d100      	bne.n	8001e20 <__aeabi_dsub+0x1f8>
 8001e1e:	e087      	b.n	8001f30 <__aeabi_dsub+0x308>
 8001e20:	0002      	movs	r2, r0
 8001e22:	e736      	b.n	8001c92 <__aeabi_dsub+0x6a>
 8001e24:	2201      	movs	r2, #1
 8001e26:	4056      	eors	r6, r2
 8001e28:	46b3      	mov	fp, r6
 8001e2a:	42b5      	cmp	r5, r6
 8001e2c:	d000      	beq.n	8001e30 <__aeabi_dsub+0x208>
 8001e2e:	e721      	b.n	8001c74 <__aeabi_dsub+0x4c>
 8001e30:	4a55      	ldr	r2, [pc, #340]	; (8001f88 <__aeabi_dsub+0x360>)
 8001e32:	4442      	add	r2, r8
 8001e34:	2a00      	cmp	r2, #0
 8001e36:	d100      	bne.n	8001e3a <__aeabi_dsub+0x212>
 8001e38:	e0b5      	b.n	8001fa6 <__aeabi_dsub+0x37e>
 8001e3a:	4642      	mov	r2, r8
 8001e3c:	4644      	mov	r4, r8
 8001e3e:	1a82      	subs	r2, r0, r2
 8001e40:	2c00      	cmp	r4, #0
 8001e42:	d100      	bne.n	8001e46 <__aeabi_dsub+0x21e>
 8001e44:	e138      	b.n	80020b8 <__aeabi_dsub+0x490>
 8001e46:	4e4e      	ldr	r6, [pc, #312]	; (8001f80 <__aeabi_dsub+0x358>)
 8001e48:	42b0      	cmp	r0, r6
 8001e4a:	d100      	bne.n	8001e4e <__aeabi_dsub+0x226>
 8001e4c:	e1de      	b.n	800220c <__aeabi_dsub+0x5e4>
 8001e4e:	2680      	movs	r6, #128	; 0x80
 8001e50:	4664      	mov	r4, ip
 8001e52:	0436      	lsls	r6, r6, #16
 8001e54:	4334      	orrs	r4, r6
 8001e56:	46a4      	mov	ip, r4
 8001e58:	2a38      	cmp	r2, #56	; 0x38
 8001e5a:	dd00      	ble.n	8001e5e <__aeabi_dsub+0x236>
 8001e5c:	e196      	b.n	800218c <__aeabi_dsub+0x564>
 8001e5e:	2a1f      	cmp	r2, #31
 8001e60:	dd00      	ble.n	8001e64 <__aeabi_dsub+0x23c>
 8001e62:	e224      	b.n	80022ae <__aeabi_dsub+0x686>
 8001e64:	2620      	movs	r6, #32
 8001e66:	1ab4      	subs	r4, r6, r2
 8001e68:	46a2      	mov	sl, r4
 8001e6a:	4664      	mov	r4, ip
 8001e6c:	4656      	mov	r6, sl
 8001e6e:	40b4      	lsls	r4, r6
 8001e70:	46a1      	mov	r9, r4
 8001e72:	001c      	movs	r4, r3
 8001e74:	464e      	mov	r6, r9
 8001e76:	40d4      	lsrs	r4, r2
 8001e78:	4326      	orrs	r6, r4
 8001e7a:	0034      	movs	r4, r6
 8001e7c:	4656      	mov	r6, sl
 8001e7e:	40b3      	lsls	r3, r6
 8001e80:	1e5e      	subs	r6, r3, #1
 8001e82:	41b3      	sbcs	r3, r6
 8001e84:	431c      	orrs	r4, r3
 8001e86:	4663      	mov	r3, ip
 8001e88:	40d3      	lsrs	r3, r2
 8001e8a:	18c9      	adds	r1, r1, r3
 8001e8c:	19e4      	adds	r4, r4, r7
 8001e8e:	42bc      	cmp	r4, r7
 8001e90:	41bf      	sbcs	r7, r7
 8001e92:	427f      	negs	r7, r7
 8001e94:	46b9      	mov	r9, r7
 8001e96:	4680      	mov	r8, r0
 8001e98:	4489      	add	r9, r1
 8001e9a:	e0d8      	b.n	800204e <__aeabi_dsub+0x426>
 8001e9c:	4640      	mov	r0, r8
 8001e9e:	4c3b      	ldr	r4, [pc, #236]	; (8001f8c <__aeabi_dsub+0x364>)
 8001ea0:	3001      	adds	r0, #1
 8001ea2:	4220      	tst	r0, r4
 8001ea4:	d000      	beq.n	8001ea8 <__aeabi_dsub+0x280>
 8001ea6:	e0b4      	b.n	8002012 <__aeabi_dsub+0x3ea>
 8001ea8:	4640      	mov	r0, r8
 8001eaa:	2800      	cmp	r0, #0
 8001eac:	d000      	beq.n	8001eb0 <__aeabi_dsub+0x288>
 8001eae:	e144      	b.n	800213a <__aeabi_dsub+0x512>
 8001eb0:	4660      	mov	r0, ip
 8001eb2:	4318      	orrs	r0, r3
 8001eb4:	d100      	bne.n	8001eb8 <__aeabi_dsub+0x290>
 8001eb6:	e190      	b.n	80021da <__aeabi_dsub+0x5b2>
 8001eb8:	0008      	movs	r0, r1
 8001eba:	4338      	orrs	r0, r7
 8001ebc:	d000      	beq.n	8001ec0 <__aeabi_dsub+0x298>
 8001ebe:	e1aa      	b.n	8002216 <__aeabi_dsub+0x5ee>
 8001ec0:	4661      	mov	r1, ip
 8001ec2:	08db      	lsrs	r3, r3, #3
 8001ec4:	0749      	lsls	r1, r1, #29
 8001ec6:	430b      	orrs	r3, r1
 8001ec8:	4661      	mov	r1, ip
 8001eca:	08cc      	lsrs	r4, r1, #3
 8001ecc:	e027      	b.n	8001f1e <__aeabi_dsub+0x2f6>
 8001ece:	0008      	movs	r0, r1
 8001ed0:	4338      	orrs	r0, r7
 8001ed2:	d061      	beq.n	8001f98 <__aeabi_dsub+0x370>
 8001ed4:	1e50      	subs	r0, r2, #1
 8001ed6:	2a01      	cmp	r2, #1
 8001ed8:	d100      	bne.n	8001edc <__aeabi_dsub+0x2b4>
 8001eda:	e139      	b.n	8002150 <__aeabi_dsub+0x528>
 8001edc:	42a2      	cmp	r2, r4
 8001ede:	d027      	beq.n	8001f30 <__aeabi_dsub+0x308>
 8001ee0:	0002      	movs	r2, r0
 8001ee2:	e75d      	b.n	8001da0 <__aeabi_dsub+0x178>
 8001ee4:	0002      	movs	r2, r0
 8001ee6:	391f      	subs	r1, #31
 8001ee8:	40ca      	lsrs	r2, r1
 8001eea:	0011      	movs	r1, r2
 8001eec:	2b20      	cmp	r3, #32
 8001eee:	d003      	beq.n	8001ef8 <__aeabi_dsub+0x2d0>
 8001ef0:	2240      	movs	r2, #64	; 0x40
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	4098      	lsls	r0, r3
 8001ef6:	4304      	orrs	r4, r0
 8001ef8:	1e63      	subs	r3, r4, #1
 8001efa:	419c      	sbcs	r4, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	4699      	mov	r9, r3
 8001f00:	4698      	mov	r8, r3
 8001f02:	430c      	orrs	r4, r1
 8001f04:	0763      	lsls	r3, r4, #29
 8001f06:	d000      	beq.n	8001f0a <__aeabi_dsub+0x2e2>
 8001f08:	e712      	b.n	8001d30 <__aeabi_dsub+0x108>
 8001f0a:	464b      	mov	r3, r9
 8001f0c:	464a      	mov	r2, r9
 8001f0e:	08e4      	lsrs	r4, r4, #3
 8001f10:	075b      	lsls	r3, r3, #29
 8001f12:	4323      	orrs	r3, r4
 8001f14:	08d4      	lsrs	r4, r2, #3
 8001f16:	4642      	mov	r2, r8
 8001f18:	4919      	ldr	r1, [pc, #100]	; (8001f80 <__aeabi_dsub+0x358>)
 8001f1a:	428a      	cmp	r2, r1
 8001f1c:	d00e      	beq.n	8001f3c <__aeabi_dsub+0x314>
 8001f1e:	0324      	lsls	r4, r4, #12
 8001f20:	0552      	lsls	r2, r2, #21
 8001f22:	0b24      	lsrs	r4, r4, #12
 8001f24:	0d52      	lsrs	r2, r2, #21
 8001f26:	e722      	b.n	8001d6e <__aeabi_dsub+0x146>
 8001f28:	000a      	movs	r2, r1
 8001f2a:	2400      	movs	r4, #0
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	e71e      	b.n	8001d6e <__aeabi_dsub+0x146>
 8001f30:	08db      	lsrs	r3, r3, #3
 8001f32:	4662      	mov	r2, ip
 8001f34:	0752      	lsls	r2, r2, #29
 8001f36:	4313      	orrs	r3, r2
 8001f38:	4662      	mov	r2, ip
 8001f3a:	08d4      	lsrs	r4, r2, #3
 8001f3c:	001a      	movs	r2, r3
 8001f3e:	4322      	orrs	r2, r4
 8001f40:	d100      	bne.n	8001f44 <__aeabi_dsub+0x31c>
 8001f42:	e1fc      	b.n	800233e <__aeabi_dsub+0x716>
 8001f44:	2280      	movs	r2, #128	; 0x80
 8001f46:	0312      	lsls	r2, r2, #12
 8001f48:	4314      	orrs	r4, r2
 8001f4a:	0324      	lsls	r4, r4, #12
 8001f4c:	4a0c      	ldr	r2, [pc, #48]	; (8001f80 <__aeabi_dsub+0x358>)
 8001f4e:	0b24      	lsrs	r4, r4, #12
 8001f50:	e70d      	b.n	8001d6e <__aeabi_dsub+0x146>
 8001f52:	0020      	movs	r0, r4
 8001f54:	f000 fae2 	bl	800251c <__clzsi2>
 8001f58:	0001      	movs	r1, r0
 8001f5a:	3118      	adds	r1, #24
 8001f5c:	291f      	cmp	r1, #31
 8001f5e:	dc00      	bgt.n	8001f62 <__aeabi_dsub+0x33a>
 8001f60:	e6c4      	b.n	8001cec <__aeabi_dsub+0xc4>
 8001f62:	3808      	subs	r0, #8
 8001f64:	4084      	lsls	r4, r0
 8001f66:	4643      	mov	r3, r8
 8001f68:	0020      	movs	r0, r4
 8001f6a:	2400      	movs	r4, #0
 8001f6c:	4588      	cmp	r8, r1
 8001f6e:	dc00      	bgt.n	8001f72 <__aeabi_dsub+0x34a>
 8001f70:	e6c8      	b.n	8001d04 <__aeabi_dsub+0xdc>
 8001f72:	4a04      	ldr	r2, [pc, #16]	; (8001f84 <__aeabi_dsub+0x35c>)
 8001f74:	1a5b      	subs	r3, r3, r1
 8001f76:	4010      	ands	r0, r2
 8001f78:	4698      	mov	r8, r3
 8001f7a:	4681      	mov	r9, r0
 8001f7c:	e6d6      	b.n	8001d2c <__aeabi_dsub+0x104>
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	000007ff 	.word	0x000007ff
 8001f84:	ff7fffff 	.word	0xff7fffff
 8001f88:	fffff801 	.word	0xfffff801
 8001f8c:	000007fe 	.word	0x000007fe
 8001f90:	430f      	orrs	r7, r1
 8001f92:	1e7a      	subs	r2, r7, #1
 8001f94:	4197      	sbcs	r7, r2
 8001f96:	e691      	b.n	8001cbc <__aeabi_dsub+0x94>
 8001f98:	4661      	mov	r1, ip
 8001f9a:	08db      	lsrs	r3, r3, #3
 8001f9c:	0749      	lsls	r1, r1, #29
 8001f9e:	430b      	orrs	r3, r1
 8001fa0:	4661      	mov	r1, ip
 8001fa2:	08cc      	lsrs	r4, r1, #3
 8001fa4:	e7b8      	b.n	8001f18 <__aeabi_dsub+0x2f0>
 8001fa6:	4640      	mov	r0, r8
 8001fa8:	4cd3      	ldr	r4, [pc, #844]	; (80022f8 <__aeabi_dsub+0x6d0>)
 8001faa:	3001      	adds	r0, #1
 8001fac:	4220      	tst	r0, r4
 8001fae:	d000      	beq.n	8001fb2 <__aeabi_dsub+0x38a>
 8001fb0:	e0a2      	b.n	80020f8 <__aeabi_dsub+0x4d0>
 8001fb2:	4640      	mov	r0, r8
 8001fb4:	2800      	cmp	r0, #0
 8001fb6:	d000      	beq.n	8001fba <__aeabi_dsub+0x392>
 8001fb8:	e101      	b.n	80021be <__aeabi_dsub+0x596>
 8001fba:	4660      	mov	r0, ip
 8001fbc:	4318      	orrs	r0, r3
 8001fbe:	d100      	bne.n	8001fc2 <__aeabi_dsub+0x39a>
 8001fc0:	e15e      	b.n	8002280 <__aeabi_dsub+0x658>
 8001fc2:	0008      	movs	r0, r1
 8001fc4:	4338      	orrs	r0, r7
 8001fc6:	d000      	beq.n	8001fca <__aeabi_dsub+0x3a2>
 8001fc8:	e15f      	b.n	800228a <__aeabi_dsub+0x662>
 8001fca:	4661      	mov	r1, ip
 8001fcc:	08db      	lsrs	r3, r3, #3
 8001fce:	0749      	lsls	r1, r1, #29
 8001fd0:	430b      	orrs	r3, r1
 8001fd2:	4661      	mov	r1, ip
 8001fd4:	08cc      	lsrs	r4, r1, #3
 8001fd6:	e7a2      	b.n	8001f1e <__aeabi_dsub+0x2f6>
 8001fd8:	4dc8      	ldr	r5, [pc, #800]	; (80022fc <__aeabi_dsub+0x6d4>)
 8001fda:	42a8      	cmp	r0, r5
 8001fdc:	d100      	bne.n	8001fe0 <__aeabi_dsub+0x3b8>
 8001fde:	e0cf      	b.n	8002180 <__aeabi_dsub+0x558>
 8001fe0:	2580      	movs	r5, #128	; 0x80
 8001fe2:	4664      	mov	r4, ip
 8001fe4:	042d      	lsls	r5, r5, #16
 8001fe6:	432c      	orrs	r4, r5
 8001fe8:	46a4      	mov	ip, r4
 8001fea:	2a38      	cmp	r2, #56	; 0x38
 8001fec:	dc56      	bgt.n	800209c <__aeabi_dsub+0x474>
 8001fee:	2a1f      	cmp	r2, #31
 8001ff0:	dd00      	ble.n	8001ff4 <__aeabi_dsub+0x3cc>
 8001ff2:	e0d1      	b.n	8002198 <__aeabi_dsub+0x570>
 8001ff4:	2520      	movs	r5, #32
 8001ff6:	001e      	movs	r6, r3
 8001ff8:	1aad      	subs	r5, r5, r2
 8001ffa:	4664      	mov	r4, ip
 8001ffc:	40ab      	lsls	r3, r5
 8001ffe:	40ac      	lsls	r4, r5
 8002000:	40d6      	lsrs	r6, r2
 8002002:	1e5d      	subs	r5, r3, #1
 8002004:	41ab      	sbcs	r3, r5
 8002006:	4334      	orrs	r4, r6
 8002008:	4323      	orrs	r3, r4
 800200a:	4664      	mov	r4, ip
 800200c:	40d4      	lsrs	r4, r2
 800200e:	1b09      	subs	r1, r1, r4
 8002010:	e049      	b.n	80020a6 <__aeabi_dsub+0x47e>
 8002012:	4660      	mov	r0, ip
 8002014:	1bdc      	subs	r4, r3, r7
 8002016:	1a46      	subs	r6, r0, r1
 8002018:	42a3      	cmp	r3, r4
 800201a:	4180      	sbcs	r0, r0
 800201c:	4240      	negs	r0, r0
 800201e:	4681      	mov	r9, r0
 8002020:	0030      	movs	r0, r6
 8002022:	464e      	mov	r6, r9
 8002024:	1b80      	subs	r0, r0, r6
 8002026:	4681      	mov	r9, r0
 8002028:	0200      	lsls	r0, r0, #8
 800202a:	d476      	bmi.n	800211a <__aeabi_dsub+0x4f2>
 800202c:	464b      	mov	r3, r9
 800202e:	4323      	orrs	r3, r4
 8002030:	d000      	beq.n	8002034 <__aeabi_dsub+0x40c>
 8002032:	e652      	b.n	8001cda <__aeabi_dsub+0xb2>
 8002034:	2400      	movs	r4, #0
 8002036:	2500      	movs	r5, #0
 8002038:	e771      	b.n	8001f1e <__aeabi_dsub+0x2f6>
 800203a:	4339      	orrs	r1, r7
 800203c:	000c      	movs	r4, r1
 800203e:	1e62      	subs	r2, r4, #1
 8002040:	4194      	sbcs	r4, r2
 8002042:	18e4      	adds	r4, r4, r3
 8002044:	429c      	cmp	r4, r3
 8002046:	419b      	sbcs	r3, r3
 8002048:	425b      	negs	r3, r3
 800204a:	4463      	add	r3, ip
 800204c:	4699      	mov	r9, r3
 800204e:	464b      	mov	r3, r9
 8002050:	021b      	lsls	r3, r3, #8
 8002052:	d400      	bmi.n	8002056 <__aeabi_dsub+0x42e>
 8002054:	e756      	b.n	8001f04 <__aeabi_dsub+0x2dc>
 8002056:	2301      	movs	r3, #1
 8002058:	469c      	mov	ip, r3
 800205a:	4ba8      	ldr	r3, [pc, #672]	; (80022fc <__aeabi_dsub+0x6d4>)
 800205c:	44e0      	add	r8, ip
 800205e:	4598      	cmp	r8, r3
 8002060:	d038      	beq.n	80020d4 <__aeabi_dsub+0x4ac>
 8002062:	464b      	mov	r3, r9
 8002064:	48a6      	ldr	r0, [pc, #664]	; (8002300 <__aeabi_dsub+0x6d8>)
 8002066:	2201      	movs	r2, #1
 8002068:	4003      	ands	r3, r0
 800206a:	0018      	movs	r0, r3
 800206c:	0863      	lsrs	r3, r4, #1
 800206e:	4014      	ands	r4, r2
 8002070:	431c      	orrs	r4, r3
 8002072:	07c3      	lsls	r3, r0, #31
 8002074:	431c      	orrs	r4, r3
 8002076:	0843      	lsrs	r3, r0, #1
 8002078:	4699      	mov	r9, r3
 800207a:	e657      	b.n	8001d2c <__aeabi_dsub+0x104>
 800207c:	0010      	movs	r0, r2
 800207e:	000e      	movs	r6, r1
 8002080:	3820      	subs	r0, #32
 8002082:	40c6      	lsrs	r6, r0
 8002084:	2a20      	cmp	r2, #32
 8002086:	d004      	beq.n	8002092 <__aeabi_dsub+0x46a>
 8002088:	2040      	movs	r0, #64	; 0x40
 800208a:	1a82      	subs	r2, r0, r2
 800208c:	4091      	lsls	r1, r2
 800208e:	430f      	orrs	r7, r1
 8002090:	46b9      	mov	r9, r7
 8002092:	464f      	mov	r7, r9
 8002094:	1e7a      	subs	r2, r7, #1
 8002096:	4197      	sbcs	r7, r2
 8002098:	4337      	orrs	r7, r6
 800209a:	e60f      	b.n	8001cbc <__aeabi_dsub+0x94>
 800209c:	4662      	mov	r2, ip
 800209e:	431a      	orrs	r2, r3
 80020a0:	0013      	movs	r3, r2
 80020a2:	1e5a      	subs	r2, r3, #1
 80020a4:	4193      	sbcs	r3, r2
 80020a6:	1afc      	subs	r4, r7, r3
 80020a8:	42a7      	cmp	r7, r4
 80020aa:	41bf      	sbcs	r7, r7
 80020ac:	427f      	negs	r7, r7
 80020ae:	1bcb      	subs	r3, r1, r7
 80020b0:	4699      	mov	r9, r3
 80020b2:	465d      	mov	r5, fp
 80020b4:	4680      	mov	r8, r0
 80020b6:	e608      	b.n	8001cca <__aeabi_dsub+0xa2>
 80020b8:	4666      	mov	r6, ip
 80020ba:	431e      	orrs	r6, r3
 80020bc:	d100      	bne.n	80020c0 <__aeabi_dsub+0x498>
 80020be:	e0be      	b.n	800223e <__aeabi_dsub+0x616>
 80020c0:	1e56      	subs	r6, r2, #1
 80020c2:	2a01      	cmp	r2, #1
 80020c4:	d100      	bne.n	80020c8 <__aeabi_dsub+0x4a0>
 80020c6:	e109      	b.n	80022dc <__aeabi_dsub+0x6b4>
 80020c8:	4c8c      	ldr	r4, [pc, #560]	; (80022fc <__aeabi_dsub+0x6d4>)
 80020ca:	42a2      	cmp	r2, r4
 80020cc:	d100      	bne.n	80020d0 <__aeabi_dsub+0x4a8>
 80020ce:	e119      	b.n	8002304 <__aeabi_dsub+0x6dc>
 80020d0:	0032      	movs	r2, r6
 80020d2:	e6c1      	b.n	8001e58 <__aeabi_dsub+0x230>
 80020d4:	4642      	mov	r2, r8
 80020d6:	2400      	movs	r4, #0
 80020d8:	2300      	movs	r3, #0
 80020da:	e648      	b.n	8001d6e <__aeabi_dsub+0x146>
 80020dc:	2020      	movs	r0, #32
 80020de:	000c      	movs	r4, r1
 80020e0:	1a80      	subs	r0, r0, r2
 80020e2:	003e      	movs	r6, r7
 80020e4:	4087      	lsls	r7, r0
 80020e6:	4084      	lsls	r4, r0
 80020e8:	40d6      	lsrs	r6, r2
 80020ea:	1e78      	subs	r0, r7, #1
 80020ec:	4187      	sbcs	r7, r0
 80020ee:	40d1      	lsrs	r1, r2
 80020f0:	4334      	orrs	r4, r6
 80020f2:	433c      	orrs	r4, r7
 80020f4:	448c      	add	ip, r1
 80020f6:	e7a4      	b.n	8002042 <__aeabi_dsub+0x41a>
 80020f8:	4a80      	ldr	r2, [pc, #512]	; (80022fc <__aeabi_dsub+0x6d4>)
 80020fa:	4290      	cmp	r0, r2
 80020fc:	d100      	bne.n	8002100 <__aeabi_dsub+0x4d8>
 80020fe:	e0e9      	b.n	80022d4 <__aeabi_dsub+0x6ac>
 8002100:	19df      	adds	r7, r3, r7
 8002102:	429f      	cmp	r7, r3
 8002104:	419b      	sbcs	r3, r3
 8002106:	4461      	add	r1, ip
 8002108:	425b      	negs	r3, r3
 800210a:	18c9      	adds	r1, r1, r3
 800210c:	07cc      	lsls	r4, r1, #31
 800210e:	087f      	lsrs	r7, r7, #1
 8002110:	084b      	lsrs	r3, r1, #1
 8002112:	4699      	mov	r9, r3
 8002114:	4680      	mov	r8, r0
 8002116:	433c      	orrs	r4, r7
 8002118:	e6f4      	b.n	8001f04 <__aeabi_dsub+0x2dc>
 800211a:	1afc      	subs	r4, r7, r3
 800211c:	42a7      	cmp	r7, r4
 800211e:	41bf      	sbcs	r7, r7
 8002120:	4663      	mov	r3, ip
 8002122:	427f      	negs	r7, r7
 8002124:	1ac9      	subs	r1, r1, r3
 8002126:	1bcb      	subs	r3, r1, r7
 8002128:	4699      	mov	r9, r3
 800212a:	465d      	mov	r5, fp
 800212c:	e5d5      	b.n	8001cda <__aeabi_dsub+0xb2>
 800212e:	08ff      	lsrs	r7, r7, #3
 8002130:	074b      	lsls	r3, r1, #29
 8002132:	465d      	mov	r5, fp
 8002134:	433b      	orrs	r3, r7
 8002136:	08cc      	lsrs	r4, r1, #3
 8002138:	e6ee      	b.n	8001f18 <__aeabi_dsub+0x2f0>
 800213a:	4662      	mov	r2, ip
 800213c:	431a      	orrs	r2, r3
 800213e:	d000      	beq.n	8002142 <__aeabi_dsub+0x51a>
 8002140:	e082      	b.n	8002248 <__aeabi_dsub+0x620>
 8002142:	000b      	movs	r3, r1
 8002144:	433b      	orrs	r3, r7
 8002146:	d11b      	bne.n	8002180 <__aeabi_dsub+0x558>
 8002148:	2480      	movs	r4, #128	; 0x80
 800214a:	2500      	movs	r5, #0
 800214c:	0324      	lsls	r4, r4, #12
 800214e:	e6f9      	b.n	8001f44 <__aeabi_dsub+0x31c>
 8002150:	19dc      	adds	r4, r3, r7
 8002152:	429c      	cmp	r4, r3
 8002154:	419b      	sbcs	r3, r3
 8002156:	4461      	add	r1, ip
 8002158:	4689      	mov	r9, r1
 800215a:	425b      	negs	r3, r3
 800215c:	4499      	add	r9, r3
 800215e:	464b      	mov	r3, r9
 8002160:	021b      	lsls	r3, r3, #8
 8002162:	d444      	bmi.n	80021ee <__aeabi_dsub+0x5c6>
 8002164:	2301      	movs	r3, #1
 8002166:	4698      	mov	r8, r3
 8002168:	e6cc      	b.n	8001f04 <__aeabi_dsub+0x2dc>
 800216a:	1bdc      	subs	r4, r3, r7
 800216c:	4662      	mov	r2, ip
 800216e:	42a3      	cmp	r3, r4
 8002170:	419b      	sbcs	r3, r3
 8002172:	1a51      	subs	r1, r2, r1
 8002174:	425b      	negs	r3, r3
 8002176:	1acb      	subs	r3, r1, r3
 8002178:	4699      	mov	r9, r3
 800217a:	2301      	movs	r3, #1
 800217c:	4698      	mov	r8, r3
 800217e:	e5a4      	b.n	8001cca <__aeabi_dsub+0xa2>
 8002180:	08ff      	lsrs	r7, r7, #3
 8002182:	074b      	lsls	r3, r1, #29
 8002184:	465d      	mov	r5, fp
 8002186:	433b      	orrs	r3, r7
 8002188:	08cc      	lsrs	r4, r1, #3
 800218a:	e6d7      	b.n	8001f3c <__aeabi_dsub+0x314>
 800218c:	4662      	mov	r2, ip
 800218e:	431a      	orrs	r2, r3
 8002190:	0014      	movs	r4, r2
 8002192:	1e63      	subs	r3, r4, #1
 8002194:	419c      	sbcs	r4, r3
 8002196:	e679      	b.n	8001e8c <__aeabi_dsub+0x264>
 8002198:	0015      	movs	r5, r2
 800219a:	4664      	mov	r4, ip
 800219c:	3d20      	subs	r5, #32
 800219e:	40ec      	lsrs	r4, r5
 80021a0:	46a0      	mov	r8, r4
 80021a2:	2a20      	cmp	r2, #32
 80021a4:	d005      	beq.n	80021b2 <__aeabi_dsub+0x58a>
 80021a6:	2540      	movs	r5, #64	; 0x40
 80021a8:	4664      	mov	r4, ip
 80021aa:	1aaa      	subs	r2, r5, r2
 80021ac:	4094      	lsls	r4, r2
 80021ae:	4323      	orrs	r3, r4
 80021b0:	469a      	mov	sl, r3
 80021b2:	4654      	mov	r4, sl
 80021b4:	1e63      	subs	r3, r4, #1
 80021b6:	419c      	sbcs	r4, r3
 80021b8:	4643      	mov	r3, r8
 80021ba:	4323      	orrs	r3, r4
 80021bc:	e773      	b.n	80020a6 <__aeabi_dsub+0x47e>
 80021be:	4662      	mov	r2, ip
 80021c0:	431a      	orrs	r2, r3
 80021c2:	d023      	beq.n	800220c <__aeabi_dsub+0x5e4>
 80021c4:	000a      	movs	r2, r1
 80021c6:	433a      	orrs	r2, r7
 80021c8:	d000      	beq.n	80021cc <__aeabi_dsub+0x5a4>
 80021ca:	e0a0      	b.n	800230e <__aeabi_dsub+0x6e6>
 80021cc:	4662      	mov	r2, ip
 80021ce:	08db      	lsrs	r3, r3, #3
 80021d0:	0752      	lsls	r2, r2, #29
 80021d2:	4313      	orrs	r3, r2
 80021d4:	4662      	mov	r2, ip
 80021d6:	08d4      	lsrs	r4, r2, #3
 80021d8:	e6b0      	b.n	8001f3c <__aeabi_dsub+0x314>
 80021da:	000b      	movs	r3, r1
 80021dc:	433b      	orrs	r3, r7
 80021de:	d100      	bne.n	80021e2 <__aeabi_dsub+0x5ba>
 80021e0:	e728      	b.n	8002034 <__aeabi_dsub+0x40c>
 80021e2:	08ff      	lsrs	r7, r7, #3
 80021e4:	074b      	lsls	r3, r1, #29
 80021e6:	465d      	mov	r5, fp
 80021e8:	433b      	orrs	r3, r7
 80021ea:	08cc      	lsrs	r4, r1, #3
 80021ec:	e697      	b.n	8001f1e <__aeabi_dsub+0x2f6>
 80021ee:	2302      	movs	r3, #2
 80021f0:	4698      	mov	r8, r3
 80021f2:	e736      	b.n	8002062 <__aeabi_dsub+0x43a>
 80021f4:	1afc      	subs	r4, r7, r3
 80021f6:	42a7      	cmp	r7, r4
 80021f8:	41bf      	sbcs	r7, r7
 80021fa:	4663      	mov	r3, ip
 80021fc:	427f      	negs	r7, r7
 80021fe:	1ac9      	subs	r1, r1, r3
 8002200:	1bcb      	subs	r3, r1, r7
 8002202:	4699      	mov	r9, r3
 8002204:	2301      	movs	r3, #1
 8002206:	465d      	mov	r5, fp
 8002208:	4698      	mov	r8, r3
 800220a:	e55e      	b.n	8001cca <__aeabi_dsub+0xa2>
 800220c:	074b      	lsls	r3, r1, #29
 800220e:	08ff      	lsrs	r7, r7, #3
 8002210:	433b      	orrs	r3, r7
 8002212:	08cc      	lsrs	r4, r1, #3
 8002214:	e692      	b.n	8001f3c <__aeabi_dsub+0x314>
 8002216:	1bdc      	subs	r4, r3, r7
 8002218:	4660      	mov	r0, ip
 800221a:	42a3      	cmp	r3, r4
 800221c:	41b6      	sbcs	r6, r6
 800221e:	1a40      	subs	r0, r0, r1
 8002220:	4276      	negs	r6, r6
 8002222:	1b80      	subs	r0, r0, r6
 8002224:	4681      	mov	r9, r0
 8002226:	0200      	lsls	r0, r0, #8
 8002228:	d560      	bpl.n	80022ec <__aeabi_dsub+0x6c4>
 800222a:	1afc      	subs	r4, r7, r3
 800222c:	42a7      	cmp	r7, r4
 800222e:	41bf      	sbcs	r7, r7
 8002230:	4663      	mov	r3, ip
 8002232:	427f      	negs	r7, r7
 8002234:	1ac9      	subs	r1, r1, r3
 8002236:	1bcb      	subs	r3, r1, r7
 8002238:	4699      	mov	r9, r3
 800223a:	465d      	mov	r5, fp
 800223c:	e576      	b.n	8001d2c <__aeabi_dsub+0x104>
 800223e:	08ff      	lsrs	r7, r7, #3
 8002240:	074b      	lsls	r3, r1, #29
 8002242:	433b      	orrs	r3, r7
 8002244:	08cc      	lsrs	r4, r1, #3
 8002246:	e667      	b.n	8001f18 <__aeabi_dsub+0x2f0>
 8002248:	000a      	movs	r2, r1
 800224a:	08db      	lsrs	r3, r3, #3
 800224c:	433a      	orrs	r2, r7
 800224e:	d100      	bne.n	8002252 <__aeabi_dsub+0x62a>
 8002250:	e66f      	b.n	8001f32 <__aeabi_dsub+0x30a>
 8002252:	4662      	mov	r2, ip
 8002254:	0752      	lsls	r2, r2, #29
 8002256:	4313      	orrs	r3, r2
 8002258:	4662      	mov	r2, ip
 800225a:	08d4      	lsrs	r4, r2, #3
 800225c:	2280      	movs	r2, #128	; 0x80
 800225e:	0312      	lsls	r2, r2, #12
 8002260:	4214      	tst	r4, r2
 8002262:	d007      	beq.n	8002274 <__aeabi_dsub+0x64c>
 8002264:	08c8      	lsrs	r0, r1, #3
 8002266:	4210      	tst	r0, r2
 8002268:	d104      	bne.n	8002274 <__aeabi_dsub+0x64c>
 800226a:	465d      	mov	r5, fp
 800226c:	0004      	movs	r4, r0
 800226e:	08fb      	lsrs	r3, r7, #3
 8002270:	0749      	lsls	r1, r1, #29
 8002272:	430b      	orrs	r3, r1
 8002274:	0f5a      	lsrs	r2, r3, #29
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	08db      	lsrs	r3, r3, #3
 800227a:	0752      	lsls	r2, r2, #29
 800227c:	4313      	orrs	r3, r2
 800227e:	e65d      	b.n	8001f3c <__aeabi_dsub+0x314>
 8002280:	074b      	lsls	r3, r1, #29
 8002282:	08ff      	lsrs	r7, r7, #3
 8002284:	433b      	orrs	r3, r7
 8002286:	08cc      	lsrs	r4, r1, #3
 8002288:	e649      	b.n	8001f1e <__aeabi_dsub+0x2f6>
 800228a:	19dc      	adds	r4, r3, r7
 800228c:	429c      	cmp	r4, r3
 800228e:	419b      	sbcs	r3, r3
 8002290:	4461      	add	r1, ip
 8002292:	4689      	mov	r9, r1
 8002294:	425b      	negs	r3, r3
 8002296:	4499      	add	r9, r3
 8002298:	464b      	mov	r3, r9
 800229a:	021b      	lsls	r3, r3, #8
 800229c:	d400      	bmi.n	80022a0 <__aeabi_dsub+0x678>
 800229e:	e631      	b.n	8001f04 <__aeabi_dsub+0x2dc>
 80022a0:	464a      	mov	r2, r9
 80022a2:	4b17      	ldr	r3, [pc, #92]	; (8002300 <__aeabi_dsub+0x6d8>)
 80022a4:	401a      	ands	r2, r3
 80022a6:	2301      	movs	r3, #1
 80022a8:	4691      	mov	r9, r2
 80022aa:	4698      	mov	r8, r3
 80022ac:	e62a      	b.n	8001f04 <__aeabi_dsub+0x2dc>
 80022ae:	0016      	movs	r6, r2
 80022b0:	4664      	mov	r4, ip
 80022b2:	3e20      	subs	r6, #32
 80022b4:	40f4      	lsrs	r4, r6
 80022b6:	46a0      	mov	r8, r4
 80022b8:	2a20      	cmp	r2, #32
 80022ba:	d005      	beq.n	80022c8 <__aeabi_dsub+0x6a0>
 80022bc:	2640      	movs	r6, #64	; 0x40
 80022be:	4664      	mov	r4, ip
 80022c0:	1ab2      	subs	r2, r6, r2
 80022c2:	4094      	lsls	r4, r2
 80022c4:	4323      	orrs	r3, r4
 80022c6:	469a      	mov	sl, r3
 80022c8:	4654      	mov	r4, sl
 80022ca:	1e63      	subs	r3, r4, #1
 80022cc:	419c      	sbcs	r4, r3
 80022ce:	4643      	mov	r3, r8
 80022d0:	431c      	orrs	r4, r3
 80022d2:	e5db      	b.n	8001e8c <__aeabi_dsub+0x264>
 80022d4:	0002      	movs	r2, r0
 80022d6:	2400      	movs	r4, #0
 80022d8:	2300      	movs	r3, #0
 80022da:	e548      	b.n	8001d6e <__aeabi_dsub+0x146>
 80022dc:	19dc      	adds	r4, r3, r7
 80022de:	42bc      	cmp	r4, r7
 80022e0:	41bf      	sbcs	r7, r7
 80022e2:	4461      	add	r1, ip
 80022e4:	4689      	mov	r9, r1
 80022e6:	427f      	negs	r7, r7
 80022e8:	44b9      	add	r9, r7
 80022ea:	e738      	b.n	800215e <__aeabi_dsub+0x536>
 80022ec:	464b      	mov	r3, r9
 80022ee:	4323      	orrs	r3, r4
 80022f0:	d100      	bne.n	80022f4 <__aeabi_dsub+0x6cc>
 80022f2:	e69f      	b.n	8002034 <__aeabi_dsub+0x40c>
 80022f4:	e606      	b.n	8001f04 <__aeabi_dsub+0x2dc>
 80022f6:	46c0      	nop			; (mov r8, r8)
 80022f8:	000007fe 	.word	0x000007fe
 80022fc:	000007ff 	.word	0x000007ff
 8002300:	ff7fffff 	.word	0xff7fffff
 8002304:	08ff      	lsrs	r7, r7, #3
 8002306:	074b      	lsls	r3, r1, #29
 8002308:	433b      	orrs	r3, r7
 800230a:	08cc      	lsrs	r4, r1, #3
 800230c:	e616      	b.n	8001f3c <__aeabi_dsub+0x314>
 800230e:	4662      	mov	r2, ip
 8002310:	08db      	lsrs	r3, r3, #3
 8002312:	0752      	lsls	r2, r2, #29
 8002314:	4313      	orrs	r3, r2
 8002316:	4662      	mov	r2, ip
 8002318:	08d4      	lsrs	r4, r2, #3
 800231a:	2280      	movs	r2, #128	; 0x80
 800231c:	0312      	lsls	r2, r2, #12
 800231e:	4214      	tst	r4, r2
 8002320:	d007      	beq.n	8002332 <__aeabi_dsub+0x70a>
 8002322:	08c8      	lsrs	r0, r1, #3
 8002324:	4210      	tst	r0, r2
 8002326:	d104      	bne.n	8002332 <__aeabi_dsub+0x70a>
 8002328:	465d      	mov	r5, fp
 800232a:	0004      	movs	r4, r0
 800232c:	08fb      	lsrs	r3, r7, #3
 800232e:	0749      	lsls	r1, r1, #29
 8002330:	430b      	orrs	r3, r1
 8002332:	0f5a      	lsrs	r2, r3, #29
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	0752      	lsls	r2, r2, #29
 8002338:	08db      	lsrs	r3, r3, #3
 800233a:	4313      	orrs	r3, r2
 800233c:	e5fe      	b.n	8001f3c <__aeabi_dsub+0x314>
 800233e:	2300      	movs	r3, #0
 8002340:	4a01      	ldr	r2, [pc, #4]	; (8002348 <__aeabi_dsub+0x720>)
 8002342:	001c      	movs	r4, r3
 8002344:	e513      	b.n	8001d6e <__aeabi_dsub+0x146>
 8002346:	46c0      	nop			; (mov r8, r8)
 8002348:	000007ff 	.word	0x000007ff

0800234c <__aeabi_ui2d>:
 800234c:	b510      	push	{r4, lr}
 800234e:	1e04      	subs	r4, r0, #0
 8002350:	d010      	beq.n	8002374 <__aeabi_ui2d+0x28>
 8002352:	f000 f8e3 	bl	800251c <__clzsi2>
 8002356:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <__aeabi_ui2d+0x48>)
 8002358:	1a1b      	subs	r3, r3, r0
 800235a:	280a      	cmp	r0, #10
 800235c:	dc11      	bgt.n	8002382 <__aeabi_ui2d+0x36>
 800235e:	220b      	movs	r2, #11
 8002360:	0021      	movs	r1, r4
 8002362:	1a12      	subs	r2, r2, r0
 8002364:	40d1      	lsrs	r1, r2
 8002366:	3015      	adds	r0, #21
 8002368:	030a      	lsls	r2, r1, #12
 800236a:	055b      	lsls	r3, r3, #21
 800236c:	4084      	lsls	r4, r0
 800236e:	0b12      	lsrs	r2, r2, #12
 8002370:	0d5b      	lsrs	r3, r3, #21
 8002372:	e001      	b.n	8002378 <__aeabi_ui2d+0x2c>
 8002374:	2300      	movs	r3, #0
 8002376:	2200      	movs	r2, #0
 8002378:	051b      	lsls	r3, r3, #20
 800237a:	4313      	orrs	r3, r2
 800237c:	0020      	movs	r0, r4
 800237e:	0019      	movs	r1, r3
 8002380:	bd10      	pop	{r4, pc}
 8002382:	0022      	movs	r2, r4
 8002384:	380b      	subs	r0, #11
 8002386:	4082      	lsls	r2, r0
 8002388:	055b      	lsls	r3, r3, #21
 800238a:	0312      	lsls	r2, r2, #12
 800238c:	2400      	movs	r4, #0
 800238e:	0b12      	lsrs	r2, r2, #12
 8002390:	0d5b      	lsrs	r3, r3, #21
 8002392:	e7f1      	b.n	8002378 <__aeabi_ui2d+0x2c>
 8002394:	0000041e 	.word	0x0000041e

08002398 <__aeabi_d2f>:
 8002398:	0002      	movs	r2, r0
 800239a:	004b      	lsls	r3, r1, #1
 800239c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800239e:	0d5b      	lsrs	r3, r3, #21
 80023a0:	030c      	lsls	r4, r1, #12
 80023a2:	4e3d      	ldr	r6, [pc, #244]	; (8002498 <__aeabi_d2f+0x100>)
 80023a4:	0a64      	lsrs	r4, r4, #9
 80023a6:	0f40      	lsrs	r0, r0, #29
 80023a8:	1c5f      	adds	r7, r3, #1
 80023aa:	0fc9      	lsrs	r1, r1, #31
 80023ac:	4304      	orrs	r4, r0
 80023ae:	00d5      	lsls	r5, r2, #3
 80023b0:	4237      	tst	r7, r6
 80023b2:	d00a      	beq.n	80023ca <__aeabi_d2f+0x32>
 80023b4:	4839      	ldr	r0, [pc, #228]	; (800249c <__aeabi_d2f+0x104>)
 80023b6:	181e      	adds	r6, r3, r0
 80023b8:	2efe      	cmp	r6, #254	; 0xfe
 80023ba:	dd16      	ble.n	80023ea <__aeabi_d2f+0x52>
 80023bc:	20ff      	movs	r0, #255	; 0xff
 80023be:	2400      	movs	r4, #0
 80023c0:	05c0      	lsls	r0, r0, #23
 80023c2:	4320      	orrs	r0, r4
 80023c4:	07c9      	lsls	r1, r1, #31
 80023c6:	4308      	orrs	r0, r1
 80023c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d106      	bne.n	80023dc <__aeabi_d2f+0x44>
 80023ce:	432c      	orrs	r4, r5
 80023d0:	d026      	beq.n	8002420 <__aeabi_d2f+0x88>
 80023d2:	2205      	movs	r2, #5
 80023d4:	0192      	lsls	r2, r2, #6
 80023d6:	0a54      	lsrs	r4, r2, #9
 80023d8:	b2d8      	uxtb	r0, r3
 80023da:	e7f1      	b.n	80023c0 <__aeabi_d2f+0x28>
 80023dc:	4325      	orrs	r5, r4
 80023de:	d0ed      	beq.n	80023bc <__aeabi_d2f+0x24>
 80023e0:	2080      	movs	r0, #128	; 0x80
 80023e2:	03c0      	lsls	r0, r0, #15
 80023e4:	4304      	orrs	r4, r0
 80023e6:	20ff      	movs	r0, #255	; 0xff
 80023e8:	e7ea      	b.n	80023c0 <__aeabi_d2f+0x28>
 80023ea:	2e00      	cmp	r6, #0
 80023ec:	dd1b      	ble.n	8002426 <__aeabi_d2f+0x8e>
 80023ee:	0192      	lsls	r2, r2, #6
 80023f0:	1e53      	subs	r3, r2, #1
 80023f2:	419a      	sbcs	r2, r3
 80023f4:	00e4      	lsls	r4, r4, #3
 80023f6:	0f6d      	lsrs	r5, r5, #29
 80023f8:	4322      	orrs	r2, r4
 80023fa:	432a      	orrs	r2, r5
 80023fc:	0753      	lsls	r3, r2, #29
 80023fe:	d048      	beq.n	8002492 <__aeabi_d2f+0xfa>
 8002400:	230f      	movs	r3, #15
 8002402:	4013      	ands	r3, r2
 8002404:	2b04      	cmp	r3, #4
 8002406:	d000      	beq.n	800240a <__aeabi_d2f+0x72>
 8002408:	3204      	adds	r2, #4
 800240a:	2380      	movs	r3, #128	; 0x80
 800240c:	04db      	lsls	r3, r3, #19
 800240e:	4013      	ands	r3, r2
 8002410:	d03f      	beq.n	8002492 <__aeabi_d2f+0xfa>
 8002412:	1c70      	adds	r0, r6, #1
 8002414:	2efe      	cmp	r6, #254	; 0xfe
 8002416:	d0d1      	beq.n	80023bc <__aeabi_d2f+0x24>
 8002418:	0192      	lsls	r2, r2, #6
 800241a:	0a54      	lsrs	r4, r2, #9
 800241c:	b2c0      	uxtb	r0, r0
 800241e:	e7cf      	b.n	80023c0 <__aeabi_d2f+0x28>
 8002420:	2000      	movs	r0, #0
 8002422:	2400      	movs	r4, #0
 8002424:	e7cc      	b.n	80023c0 <__aeabi_d2f+0x28>
 8002426:	0032      	movs	r2, r6
 8002428:	3217      	adds	r2, #23
 800242a:	db22      	blt.n	8002472 <__aeabi_d2f+0xda>
 800242c:	2080      	movs	r0, #128	; 0x80
 800242e:	0400      	lsls	r0, r0, #16
 8002430:	4320      	orrs	r0, r4
 8002432:	241e      	movs	r4, #30
 8002434:	1ba4      	subs	r4, r4, r6
 8002436:	2c1f      	cmp	r4, #31
 8002438:	dd1d      	ble.n	8002476 <__aeabi_d2f+0xde>
 800243a:	2202      	movs	r2, #2
 800243c:	4252      	negs	r2, r2
 800243e:	1b96      	subs	r6, r2, r6
 8002440:	0002      	movs	r2, r0
 8002442:	40f2      	lsrs	r2, r6
 8002444:	0016      	movs	r6, r2
 8002446:	2c20      	cmp	r4, #32
 8002448:	d004      	beq.n	8002454 <__aeabi_d2f+0xbc>
 800244a:	4a15      	ldr	r2, [pc, #84]	; (80024a0 <__aeabi_d2f+0x108>)
 800244c:	4694      	mov	ip, r2
 800244e:	4463      	add	r3, ip
 8002450:	4098      	lsls	r0, r3
 8002452:	4305      	orrs	r5, r0
 8002454:	002a      	movs	r2, r5
 8002456:	1e53      	subs	r3, r2, #1
 8002458:	419a      	sbcs	r2, r3
 800245a:	4332      	orrs	r2, r6
 800245c:	2600      	movs	r6, #0
 800245e:	0753      	lsls	r3, r2, #29
 8002460:	d1ce      	bne.n	8002400 <__aeabi_d2f+0x68>
 8002462:	2480      	movs	r4, #128	; 0x80
 8002464:	0013      	movs	r3, r2
 8002466:	04e4      	lsls	r4, r4, #19
 8002468:	2001      	movs	r0, #1
 800246a:	4023      	ands	r3, r4
 800246c:	4222      	tst	r2, r4
 800246e:	d1d3      	bne.n	8002418 <__aeabi_d2f+0x80>
 8002470:	e7b0      	b.n	80023d4 <__aeabi_d2f+0x3c>
 8002472:	2300      	movs	r3, #0
 8002474:	e7ad      	b.n	80023d2 <__aeabi_d2f+0x3a>
 8002476:	4a0b      	ldr	r2, [pc, #44]	; (80024a4 <__aeabi_d2f+0x10c>)
 8002478:	4694      	mov	ip, r2
 800247a:	002a      	movs	r2, r5
 800247c:	40e2      	lsrs	r2, r4
 800247e:	0014      	movs	r4, r2
 8002480:	002a      	movs	r2, r5
 8002482:	4463      	add	r3, ip
 8002484:	409a      	lsls	r2, r3
 8002486:	4098      	lsls	r0, r3
 8002488:	1e55      	subs	r5, r2, #1
 800248a:	41aa      	sbcs	r2, r5
 800248c:	4302      	orrs	r2, r0
 800248e:	4322      	orrs	r2, r4
 8002490:	e7e4      	b.n	800245c <__aeabi_d2f+0xc4>
 8002492:	0033      	movs	r3, r6
 8002494:	e79e      	b.n	80023d4 <__aeabi_d2f+0x3c>
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	000007fe 	.word	0x000007fe
 800249c:	fffffc80 	.word	0xfffffc80
 80024a0:	fffffca2 	.word	0xfffffca2
 80024a4:	fffffc82 	.word	0xfffffc82

080024a8 <__aeabi_cfrcmple>:
 80024a8:	4684      	mov	ip, r0
 80024aa:	0008      	movs	r0, r1
 80024ac:	4661      	mov	r1, ip
 80024ae:	e7ff      	b.n	80024b0 <__aeabi_cfcmpeq>

080024b0 <__aeabi_cfcmpeq>:
 80024b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80024b2:	f000 f8bd 	bl	8002630 <__lesf2>
 80024b6:	2800      	cmp	r0, #0
 80024b8:	d401      	bmi.n	80024be <__aeabi_cfcmpeq+0xe>
 80024ba:	2100      	movs	r1, #0
 80024bc:	42c8      	cmn	r0, r1
 80024be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080024c0 <__aeabi_fcmpeq>:
 80024c0:	b510      	push	{r4, lr}
 80024c2:	f000 f849 	bl	8002558 <__eqsf2>
 80024c6:	4240      	negs	r0, r0
 80024c8:	3001      	adds	r0, #1
 80024ca:	bd10      	pop	{r4, pc}

080024cc <__aeabi_fcmplt>:
 80024cc:	b510      	push	{r4, lr}
 80024ce:	f000 f8af 	bl	8002630 <__lesf2>
 80024d2:	2800      	cmp	r0, #0
 80024d4:	db01      	blt.n	80024da <__aeabi_fcmplt+0xe>
 80024d6:	2000      	movs	r0, #0
 80024d8:	bd10      	pop	{r4, pc}
 80024da:	2001      	movs	r0, #1
 80024dc:	bd10      	pop	{r4, pc}
 80024de:	46c0      	nop			; (mov r8, r8)

080024e0 <__aeabi_fcmple>:
 80024e0:	b510      	push	{r4, lr}
 80024e2:	f000 f8a5 	bl	8002630 <__lesf2>
 80024e6:	2800      	cmp	r0, #0
 80024e8:	dd01      	ble.n	80024ee <__aeabi_fcmple+0xe>
 80024ea:	2000      	movs	r0, #0
 80024ec:	bd10      	pop	{r4, pc}
 80024ee:	2001      	movs	r0, #1
 80024f0:	bd10      	pop	{r4, pc}
 80024f2:	46c0      	nop			; (mov r8, r8)

080024f4 <__aeabi_fcmpgt>:
 80024f4:	b510      	push	{r4, lr}
 80024f6:	f000 f855 	bl	80025a4 <__gesf2>
 80024fa:	2800      	cmp	r0, #0
 80024fc:	dc01      	bgt.n	8002502 <__aeabi_fcmpgt+0xe>
 80024fe:	2000      	movs	r0, #0
 8002500:	bd10      	pop	{r4, pc}
 8002502:	2001      	movs	r0, #1
 8002504:	bd10      	pop	{r4, pc}
 8002506:	46c0      	nop			; (mov r8, r8)

08002508 <__aeabi_fcmpge>:
 8002508:	b510      	push	{r4, lr}
 800250a:	f000 f84b 	bl	80025a4 <__gesf2>
 800250e:	2800      	cmp	r0, #0
 8002510:	da01      	bge.n	8002516 <__aeabi_fcmpge+0xe>
 8002512:	2000      	movs	r0, #0
 8002514:	bd10      	pop	{r4, pc}
 8002516:	2001      	movs	r0, #1
 8002518:	bd10      	pop	{r4, pc}
 800251a:	46c0      	nop			; (mov r8, r8)

0800251c <__clzsi2>:
 800251c:	211c      	movs	r1, #28
 800251e:	2301      	movs	r3, #1
 8002520:	041b      	lsls	r3, r3, #16
 8002522:	4298      	cmp	r0, r3
 8002524:	d301      	bcc.n	800252a <__clzsi2+0xe>
 8002526:	0c00      	lsrs	r0, r0, #16
 8002528:	3910      	subs	r1, #16
 800252a:	0a1b      	lsrs	r3, r3, #8
 800252c:	4298      	cmp	r0, r3
 800252e:	d301      	bcc.n	8002534 <__clzsi2+0x18>
 8002530:	0a00      	lsrs	r0, r0, #8
 8002532:	3908      	subs	r1, #8
 8002534:	091b      	lsrs	r3, r3, #4
 8002536:	4298      	cmp	r0, r3
 8002538:	d301      	bcc.n	800253e <__clzsi2+0x22>
 800253a:	0900      	lsrs	r0, r0, #4
 800253c:	3904      	subs	r1, #4
 800253e:	a202      	add	r2, pc, #8	; (adr r2, 8002548 <__clzsi2+0x2c>)
 8002540:	5c10      	ldrb	r0, [r2, r0]
 8002542:	1840      	adds	r0, r0, r1
 8002544:	4770      	bx	lr
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	02020304 	.word	0x02020304
 800254c:	01010101 	.word	0x01010101
	...

08002558 <__eqsf2>:
 8002558:	b570      	push	{r4, r5, r6, lr}
 800255a:	0042      	lsls	r2, r0, #1
 800255c:	0245      	lsls	r5, r0, #9
 800255e:	024e      	lsls	r6, r1, #9
 8002560:	004c      	lsls	r4, r1, #1
 8002562:	0fc3      	lsrs	r3, r0, #31
 8002564:	0a6d      	lsrs	r5, r5, #9
 8002566:	2001      	movs	r0, #1
 8002568:	0e12      	lsrs	r2, r2, #24
 800256a:	0a76      	lsrs	r6, r6, #9
 800256c:	0e24      	lsrs	r4, r4, #24
 800256e:	0fc9      	lsrs	r1, r1, #31
 8002570:	2aff      	cmp	r2, #255	; 0xff
 8002572:	d006      	beq.n	8002582 <__eqsf2+0x2a>
 8002574:	2cff      	cmp	r4, #255	; 0xff
 8002576:	d003      	beq.n	8002580 <__eqsf2+0x28>
 8002578:	42a2      	cmp	r2, r4
 800257a:	d101      	bne.n	8002580 <__eqsf2+0x28>
 800257c:	42b5      	cmp	r5, r6
 800257e:	d006      	beq.n	800258e <__eqsf2+0x36>
 8002580:	bd70      	pop	{r4, r5, r6, pc}
 8002582:	2d00      	cmp	r5, #0
 8002584:	d1fc      	bne.n	8002580 <__eqsf2+0x28>
 8002586:	2cff      	cmp	r4, #255	; 0xff
 8002588:	d1fa      	bne.n	8002580 <__eqsf2+0x28>
 800258a:	2e00      	cmp	r6, #0
 800258c:	d1f8      	bne.n	8002580 <__eqsf2+0x28>
 800258e:	428b      	cmp	r3, r1
 8002590:	d006      	beq.n	80025a0 <__eqsf2+0x48>
 8002592:	2001      	movs	r0, #1
 8002594:	2a00      	cmp	r2, #0
 8002596:	d1f3      	bne.n	8002580 <__eqsf2+0x28>
 8002598:	0028      	movs	r0, r5
 800259a:	1e43      	subs	r3, r0, #1
 800259c:	4198      	sbcs	r0, r3
 800259e:	e7ef      	b.n	8002580 <__eqsf2+0x28>
 80025a0:	2000      	movs	r0, #0
 80025a2:	e7ed      	b.n	8002580 <__eqsf2+0x28>

080025a4 <__gesf2>:
 80025a4:	b570      	push	{r4, r5, r6, lr}
 80025a6:	0042      	lsls	r2, r0, #1
 80025a8:	0245      	lsls	r5, r0, #9
 80025aa:	024e      	lsls	r6, r1, #9
 80025ac:	004c      	lsls	r4, r1, #1
 80025ae:	0fc3      	lsrs	r3, r0, #31
 80025b0:	0a6d      	lsrs	r5, r5, #9
 80025b2:	0e12      	lsrs	r2, r2, #24
 80025b4:	0a76      	lsrs	r6, r6, #9
 80025b6:	0e24      	lsrs	r4, r4, #24
 80025b8:	0fc8      	lsrs	r0, r1, #31
 80025ba:	2aff      	cmp	r2, #255	; 0xff
 80025bc:	d01b      	beq.n	80025f6 <__gesf2+0x52>
 80025be:	2cff      	cmp	r4, #255	; 0xff
 80025c0:	d00e      	beq.n	80025e0 <__gesf2+0x3c>
 80025c2:	2a00      	cmp	r2, #0
 80025c4:	d11b      	bne.n	80025fe <__gesf2+0x5a>
 80025c6:	2c00      	cmp	r4, #0
 80025c8:	d101      	bne.n	80025ce <__gesf2+0x2a>
 80025ca:	2e00      	cmp	r6, #0
 80025cc:	d01c      	beq.n	8002608 <__gesf2+0x64>
 80025ce:	2d00      	cmp	r5, #0
 80025d0:	d00c      	beq.n	80025ec <__gesf2+0x48>
 80025d2:	4283      	cmp	r3, r0
 80025d4:	d01c      	beq.n	8002610 <__gesf2+0x6c>
 80025d6:	2102      	movs	r1, #2
 80025d8:	1e58      	subs	r0, r3, #1
 80025da:	4008      	ands	r0, r1
 80025dc:	3801      	subs	r0, #1
 80025de:	bd70      	pop	{r4, r5, r6, pc}
 80025e0:	2e00      	cmp	r6, #0
 80025e2:	d122      	bne.n	800262a <__gesf2+0x86>
 80025e4:	2a00      	cmp	r2, #0
 80025e6:	d1f4      	bne.n	80025d2 <__gesf2+0x2e>
 80025e8:	2d00      	cmp	r5, #0
 80025ea:	d1f2      	bne.n	80025d2 <__gesf2+0x2e>
 80025ec:	2800      	cmp	r0, #0
 80025ee:	d1f6      	bne.n	80025de <__gesf2+0x3a>
 80025f0:	2001      	movs	r0, #1
 80025f2:	4240      	negs	r0, r0
 80025f4:	e7f3      	b.n	80025de <__gesf2+0x3a>
 80025f6:	2d00      	cmp	r5, #0
 80025f8:	d117      	bne.n	800262a <__gesf2+0x86>
 80025fa:	2cff      	cmp	r4, #255	; 0xff
 80025fc:	d0f0      	beq.n	80025e0 <__gesf2+0x3c>
 80025fe:	2c00      	cmp	r4, #0
 8002600:	d1e7      	bne.n	80025d2 <__gesf2+0x2e>
 8002602:	2e00      	cmp	r6, #0
 8002604:	d1e5      	bne.n	80025d2 <__gesf2+0x2e>
 8002606:	e7e6      	b.n	80025d6 <__gesf2+0x32>
 8002608:	2000      	movs	r0, #0
 800260a:	2d00      	cmp	r5, #0
 800260c:	d0e7      	beq.n	80025de <__gesf2+0x3a>
 800260e:	e7e2      	b.n	80025d6 <__gesf2+0x32>
 8002610:	42a2      	cmp	r2, r4
 8002612:	dc05      	bgt.n	8002620 <__gesf2+0x7c>
 8002614:	dbea      	blt.n	80025ec <__gesf2+0x48>
 8002616:	42b5      	cmp	r5, r6
 8002618:	d802      	bhi.n	8002620 <__gesf2+0x7c>
 800261a:	d3e7      	bcc.n	80025ec <__gesf2+0x48>
 800261c:	2000      	movs	r0, #0
 800261e:	e7de      	b.n	80025de <__gesf2+0x3a>
 8002620:	4243      	negs	r3, r0
 8002622:	4158      	adcs	r0, r3
 8002624:	0040      	lsls	r0, r0, #1
 8002626:	3801      	subs	r0, #1
 8002628:	e7d9      	b.n	80025de <__gesf2+0x3a>
 800262a:	2002      	movs	r0, #2
 800262c:	4240      	negs	r0, r0
 800262e:	e7d6      	b.n	80025de <__gesf2+0x3a>

08002630 <__lesf2>:
 8002630:	b570      	push	{r4, r5, r6, lr}
 8002632:	0042      	lsls	r2, r0, #1
 8002634:	0245      	lsls	r5, r0, #9
 8002636:	024e      	lsls	r6, r1, #9
 8002638:	004c      	lsls	r4, r1, #1
 800263a:	0fc3      	lsrs	r3, r0, #31
 800263c:	0a6d      	lsrs	r5, r5, #9
 800263e:	0e12      	lsrs	r2, r2, #24
 8002640:	0a76      	lsrs	r6, r6, #9
 8002642:	0e24      	lsrs	r4, r4, #24
 8002644:	0fc8      	lsrs	r0, r1, #31
 8002646:	2aff      	cmp	r2, #255	; 0xff
 8002648:	d00b      	beq.n	8002662 <__lesf2+0x32>
 800264a:	2cff      	cmp	r4, #255	; 0xff
 800264c:	d00d      	beq.n	800266a <__lesf2+0x3a>
 800264e:	2a00      	cmp	r2, #0
 8002650:	d11f      	bne.n	8002692 <__lesf2+0x62>
 8002652:	2c00      	cmp	r4, #0
 8002654:	d116      	bne.n	8002684 <__lesf2+0x54>
 8002656:	2e00      	cmp	r6, #0
 8002658:	d114      	bne.n	8002684 <__lesf2+0x54>
 800265a:	2000      	movs	r0, #0
 800265c:	2d00      	cmp	r5, #0
 800265e:	d010      	beq.n	8002682 <__lesf2+0x52>
 8002660:	e009      	b.n	8002676 <__lesf2+0x46>
 8002662:	2d00      	cmp	r5, #0
 8002664:	d10c      	bne.n	8002680 <__lesf2+0x50>
 8002666:	2cff      	cmp	r4, #255	; 0xff
 8002668:	d113      	bne.n	8002692 <__lesf2+0x62>
 800266a:	2e00      	cmp	r6, #0
 800266c:	d108      	bne.n	8002680 <__lesf2+0x50>
 800266e:	2a00      	cmp	r2, #0
 8002670:	d008      	beq.n	8002684 <__lesf2+0x54>
 8002672:	4283      	cmp	r3, r0
 8002674:	d012      	beq.n	800269c <__lesf2+0x6c>
 8002676:	2102      	movs	r1, #2
 8002678:	1e58      	subs	r0, r3, #1
 800267a:	4008      	ands	r0, r1
 800267c:	3801      	subs	r0, #1
 800267e:	e000      	b.n	8002682 <__lesf2+0x52>
 8002680:	2002      	movs	r0, #2
 8002682:	bd70      	pop	{r4, r5, r6, pc}
 8002684:	2d00      	cmp	r5, #0
 8002686:	d1f4      	bne.n	8002672 <__lesf2+0x42>
 8002688:	2800      	cmp	r0, #0
 800268a:	d1fa      	bne.n	8002682 <__lesf2+0x52>
 800268c:	2001      	movs	r0, #1
 800268e:	4240      	negs	r0, r0
 8002690:	e7f7      	b.n	8002682 <__lesf2+0x52>
 8002692:	2c00      	cmp	r4, #0
 8002694:	d1ed      	bne.n	8002672 <__lesf2+0x42>
 8002696:	2e00      	cmp	r6, #0
 8002698:	d1eb      	bne.n	8002672 <__lesf2+0x42>
 800269a:	e7ec      	b.n	8002676 <__lesf2+0x46>
 800269c:	42a2      	cmp	r2, r4
 800269e:	dc05      	bgt.n	80026ac <__lesf2+0x7c>
 80026a0:	dbf2      	blt.n	8002688 <__lesf2+0x58>
 80026a2:	42b5      	cmp	r5, r6
 80026a4:	d802      	bhi.n	80026ac <__lesf2+0x7c>
 80026a6:	d3ef      	bcc.n	8002688 <__lesf2+0x58>
 80026a8:	2000      	movs	r0, #0
 80026aa:	e7ea      	b.n	8002682 <__lesf2+0x52>
 80026ac:	4243      	negs	r3, r0
 80026ae:	4158      	adcs	r0, r3
 80026b0:	0040      	lsls	r0, r0, #1
 80026b2:	3801      	subs	r0, #1
 80026b4:	e7e5      	b.n	8002682 <__lesf2+0x52>
 80026b6:	46c0      	nop			; (mov r8, r8)

080026b8 <get_temp>:
#define VSENSE 3.3/4096 // VSENSE value
#define Avg_Slope .0043 // 4.3mV from datasheet


float get_temp (uint32_t variable)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 return (((V25 - (variable*VSENSE)) / Avg_Slope) + 25); // formula from datasheet
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7ff fe43 	bl	800234c <__aeabi_ui2d>
 80026c6:	4a16      	ldr	r2, [pc, #88]	; (8002720 <get_temp+0x68>)
 80026c8:	4b16      	ldr	r3, [pc, #88]	; (8002724 <get_temp+0x6c>)
 80026ca:	f7ff f841 	bl	8001750 <__aeabi_dmul>
 80026ce:	0002      	movs	r2, r0
 80026d0:	000b      	movs	r3, r1
 80026d2:	0010      	movs	r0, r2
 80026d4:	0019      	movs	r1, r3
 80026d6:	2200      	movs	r2, #0
 80026d8:	4b13      	ldr	r3, [pc, #76]	; (8002728 <get_temp+0x70>)
 80026da:	f7fe fd43 	bl	8001164 <__aeabi_ddiv>
 80026de:	0002      	movs	r2, r0
 80026e0:	000b      	movs	r3, r1
 80026e2:	4812      	ldr	r0, [pc, #72]	; (800272c <get_temp+0x74>)
 80026e4:	4912      	ldr	r1, [pc, #72]	; (8002730 <get_temp+0x78>)
 80026e6:	f7ff fa9f 	bl	8001c28 <__aeabi_dsub>
 80026ea:	0002      	movs	r2, r0
 80026ec:	000b      	movs	r3, r1
 80026ee:	0010      	movs	r0, r2
 80026f0:	0019      	movs	r1, r3
 80026f2:	4a10      	ldr	r2, [pc, #64]	; (8002734 <get_temp+0x7c>)
 80026f4:	4b10      	ldr	r3, [pc, #64]	; (8002738 <get_temp+0x80>)
 80026f6:	f7fe fd35 	bl	8001164 <__aeabi_ddiv>
 80026fa:	0002      	movs	r2, r0
 80026fc:	000b      	movs	r3, r1
 80026fe:	0010      	movs	r0, r2
 8002700:	0019      	movs	r1, r3
 8002702:	2200      	movs	r2, #0
 8002704:	4b0d      	ldr	r3, [pc, #52]	; (800273c <get_temp+0x84>)
 8002706:	f7fe f9f1 	bl	8000aec <__aeabi_dadd>
 800270a:	0002      	movs	r2, r0
 800270c:	000b      	movs	r3, r1
 800270e:	0010      	movs	r0, r2
 8002710:	0019      	movs	r1, r3
 8002712:	f7ff fe41 	bl	8002398 <__aeabi_d2f>
 8002716:	1c03      	adds	r3, r0, #0
}
 8002718:	1c18      	adds	r0, r3, #0
 800271a:	46bd      	mov	sp, r7
 800271c:	b002      	add	sp, #8
 800271e:	bd80      	pop	{r7, pc}
 8002720:	66666666 	.word	0x66666666
 8002724:	400a6666 	.word	0x400a6666
 8002728:	40b00000 	.word	0x40b00000
 800272c:	ae147ae1 	.word	0xae147ae1
 8002730:	3ff6e147 	.word	0x3ff6e147
 8002734:	75f6fd22 	.word	0x75f6fd22
 8002738:	3f719ce0 	.word	0x3f719ce0
 800273c:	40390000 	.word	0x40390000

08002740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002740:	b5b0      	push	{r4, r5, r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002744:	f000 fbb8 	bl	8002eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002748:	f000 f870 	bl	800282c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800274c:	f000 f9d2 	bl	8002af4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002750:	f000 f9b2 	bl	8002ab8 <MX_DMA_Init>
  MX_ADC_Init();
 8002754:	f000 f8ba 	bl	80028cc <MX_ADC_Init>
  MX_TIM3_Init();
 8002758:	f000 f92e 	bl	80029b8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // pwm başlatıldı
 800275c:	4b2a      	ldr	r3, [pc, #168]	; (8002808 <main+0xc8>)
 800275e:	2108      	movs	r1, #8
 8002760:	0018      	movs	r0, r3
 8002762:	f002 fc0d 	bl	8004f80 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(100);
 8002766:	2064      	movs	r0, #100	; 0x64
 8002768:	f000 fc0a 	bl	8002f80 <HAL_Delay>

	  HAL_ADC_Start(&hadc);
 800276c:	4b27      	ldr	r3, [pc, #156]	; (800280c <main+0xcc>)
 800276e:	0018      	movs	r0, r3
 8002770:	f000 fd6a 	bl	8003248 <HAL_ADC_Start>
	  HAL_ADC_Start_DMA(&hdma_adc, value, 3);
 8002774:	4926      	ldr	r1, [pc, #152]	; (8002810 <main+0xd0>)
 8002776:	4b27      	ldr	r3, [pc, #156]	; (8002814 <main+0xd4>)
 8002778:	2203      	movs	r2, #3
 800277a:	0018      	movs	r0, r3
 800277c:	f000 fdf8 	bl	8003370 <HAL_ADC_Start_DMA>

	  val = HAL_ADC_GetValue(&hdma_adc);
 8002780:	4b24      	ldr	r3, [pc, #144]	; (8002814 <main+0xd4>)
 8002782:	0018      	movs	r0, r3
 8002784:	f000 feec 	bl	8003560 <HAL_ADC_GetValue>
 8002788:	0003      	movs	r3, r0
 800278a:	0018      	movs	r0, r3
 800278c:	f7fe f96c 	bl	8000a68 <__aeabi_ui2f>
 8002790:	1c02      	adds	r2, r0, #0
 8002792:	4b21      	ldr	r3, [pc, #132]	; (8002818 <main+0xd8>)
 8002794:	601a      	str	r2, [r3, #0]

	  tempDeger = get_temp(val); //sıcaklık sensorundeki veri alındı
 8002796:	4b20      	ldr	r3, [pc, #128]	; (8002818 <main+0xd8>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	1c18      	adds	r0, r3, #0
 800279c:	f7fd fd40 	bl	8000220 <__aeabi_f2uiz>
 80027a0:	0003      	movs	r3, r0
 80027a2:	0018      	movs	r0, r3
 80027a4:	f7ff ff88 	bl	80026b8 <get_temp>
 80027a8:	1c02      	adds	r2, r0, #0
 80027aa:	4b1c      	ldr	r3, [pc, #112]	; (800281c <main+0xdc>)
 80027ac:	601a      	str	r2, [r3, #0]

	  potDeger = HAL_ADC_GetValue(&hadc); //potdaki anlık değer alındı
 80027ae:	4b17      	ldr	r3, [pc, #92]	; (800280c <main+0xcc>)
 80027b0:	0018      	movs	r0, r3
 80027b2:	f000 fed5 	bl	8003560 <HAL_ADC_GetValue>
 80027b6:	0003      	movs	r3, r0
 80027b8:	0018      	movs	r0, r3
 80027ba:	f7fe f955 	bl	8000a68 <__aeabi_ui2f>
 80027be:	1c02      	adds	r2, r0, #0
 80027c0:	4b17      	ldr	r3, [pc, #92]	; (8002820 <main+0xe0>)
 80027c2:	601a      	str	r2, [r3, #0]
	  scale = (potDeger/4096)*100;
 80027c4:	4b16      	ldr	r3, [pc, #88]	; (8002820 <main+0xe0>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	218b      	movs	r1, #139	; 0x8b
 80027ca:	05c9      	lsls	r1, r1, #23
 80027cc:	1c18      	adds	r0, r3, #0
 80027ce:	f7fd fd3f 	bl	8000250 <__aeabi_fdiv>
 80027d2:	1c03      	adds	r3, r0, #0
 80027d4:	4913      	ldr	r1, [pc, #76]	; (8002824 <main+0xe4>)
 80027d6:	1c18      	adds	r0, r3, #0
 80027d8:	f7fd fe52 	bl	8000480 <__aeabi_fmul>
 80027dc:	1c03      	adds	r3, r0, #0
 80027de:	1c1a      	adds	r2, r3, #0
 80027e0:	4b11      	ldr	r3, [pc, #68]	; (8002828 <main+0xe8>)
 80027e2:	601a      	str	r2, [r3, #0]

	  HAL_ADC_Stop(&hadc);
 80027e4:	4b09      	ldr	r3, [pc, #36]	; (800280c <main+0xcc>)
 80027e6:	0018      	movs	r0, r3
 80027e8:	f000 fd82 	bl	80032f0 <HAL_ADC_Stop>
	  HAL_ADC_Stop_DMA(&hdma_adc);
 80027ec:	4b09      	ldr	r3, [pc, #36]	; (8002814 <main+0xd4>)
 80027ee:	0018      	movs	r0, r3
 80027f0:	f000 fe40 	bl	8003474 <HAL_ADC_Stop_DMA>

	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,scale); //pot degerine göre duty cycle değişiyor
 80027f4:	4b0c      	ldr	r3, [pc, #48]	; (8002828 <main+0xe8>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	4b03      	ldr	r3, [pc, #12]	; (8002808 <main+0xc8>)
 80027fa:	681c      	ldr	r4, [r3, #0]
 80027fc:	1c10      	adds	r0, r2, #0
 80027fe:	f7fd fd0f 	bl	8000220 <__aeabi_f2uiz>
 8002802:	0003      	movs	r3, r0
 8002804:	63e3      	str	r3, [r4, #60]	; 0x3c
	  HAL_Delay(100);
 8002806:	e7ae      	b.n	8002766 <main+0x26>
 8002808:	200000ac 	.word	0x200000ac
 800280c:	20000028 	.word	0x20000028
 8002810:	20000104 	.word	0x20000104
 8002814:	20000068 	.word	0x20000068
 8002818:	20000100 	.word	0x20000100
 800281c:	200000f8 	.word	0x200000f8
 8002820:	200000f4 	.word	0x200000f4
 8002824:	42c80000 	.word	0x42c80000
 8002828:	200000fc 	.word	0x200000fc

0800282c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800282c:	b590      	push	{r4, r7, lr}
 800282e:	b091      	sub	sp, #68	; 0x44
 8002830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002832:	2410      	movs	r4, #16
 8002834:	193b      	adds	r3, r7, r4
 8002836:	0018      	movs	r0, r3
 8002838:	2330      	movs	r3, #48	; 0x30
 800283a:	001a      	movs	r2, r3
 800283c:	2100      	movs	r1, #0
 800283e:	f003 fafb 	bl	8005e38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002842:	003b      	movs	r3, r7
 8002844:	0018      	movs	r0, r3
 8002846:	2310      	movs	r3, #16
 8002848:	001a      	movs	r2, r3
 800284a:	2100      	movs	r1, #0
 800284c:	f003 faf4 	bl	8005e38 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 8002850:	0021      	movs	r1, r4
 8002852:	187b      	adds	r3, r7, r1
 8002854:	2211      	movs	r2, #17
 8002856:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002858:	187b      	adds	r3, r7, r1
 800285a:	2201      	movs	r2, #1
 800285c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800285e:	187b      	adds	r3, r7, r1
 8002860:	2201      	movs	r2, #1
 8002862:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002864:	187b      	adds	r3, r7, r1
 8002866:	2210      	movs	r2, #16
 8002868:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800286a:	187b      	adds	r3, r7, r1
 800286c:	2202      	movs	r2, #2
 800286e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002870:	187b      	adds	r3, r7, r1
 8002872:	2280      	movs	r2, #128	; 0x80
 8002874:	0252      	lsls	r2, r2, #9
 8002876:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002878:	187b      	adds	r3, r7, r1
 800287a:	22a0      	movs	r2, #160	; 0xa0
 800287c:	0392      	lsls	r2, r2, #14
 800287e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002880:	187b      	adds	r3, r7, r1
 8002882:	2200      	movs	r2, #0
 8002884:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002886:	187b      	adds	r3, r7, r1
 8002888:	0018      	movs	r0, r3
 800288a:	f001 fe5d 	bl	8004548 <HAL_RCC_OscConfig>
 800288e:	1e03      	subs	r3, r0, #0
 8002890:	d001      	beq.n	8002896 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002892:	f000 f999 	bl	8002bc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002896:	003b      	movs	r3, r7
 8002898:	2207      	movs	r2, #7
 800289a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800289c:	003b      	movs	r3, r7
 800289e:	2202      	movs	r2, #2
 80028a0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80028a2:	003b      	movs	r3, r7
 80028a4:	2280      	movs	r2, #128	; 0x80
 80028a6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028a8:	003b      	movs	r3, r7
 80028aa:	2200      	movs	r2, #0
 80028ac:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80028ae:	003b      	movs	r3, r7
 80028b0:	2101      	movs	r1, #1
 80028b2:	0018      	movs	r0, r3
 80028b4:	f002 f962 	bl	8004b7c <HAL_RCC_ClockConfig>
 80028b8:	1e03      	subs	r3, r0, #0
 80028ba:	d001      	beq.n	80028c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80028bc:	f000 f984 	bl	8002bc8 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80028c0:	f002 fa2a 	bl	8004d18 <HAL_RCC_EnableCSS>
}
 80028c4:	46c0      	nop			; (mov r8, r8)
 80028c6:	46bd      	mov	sp, r7
 80028c8:	b011      	add	sp, #68	; 0x44
 80028ca:	bd90      	pop	{r4, r7, pc}

080028cc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80028d2:	1d3b      	adds	r3, r7, #4
 80028d4:	0018      	movs	r0, r3
 80028d6:	230c      	movs	r3, #12
 80028d8:	001a      	movs	r2, r3
 80028da:	2100      	movs	r1, #0
 80028dc:	f003 faac 	bl	8005e38 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80028e0:	4b33      	ldr	r3, [pc, #204]	; (80029b0 <MX_ADC_Init+0xe4>)
 80028e2:	4a34      	ldr	r2, [pc, #208]	; (80029b4 <MX_ADC_Init+0xe8>)
 80028e4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80028e6:	4b32      	ldr	r3, [pc, #200]	; (80029b0 <MX_ADC_Init+0xe4>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80028ec:	4b30      	ldr	r3, [pc, #192]	; (80029b0 <MX_ADC_Init+0xe4>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80028f2:	4b2f      	ldr	r3, [pc, #188]	; (80029b0 <MX_ADC_Init+0xe4>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80028f8:	4b2d      	ldr	r3, [pc, #180]	; (80029b0 <MX_ADC_Init+0xe4>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80028fe:	4b2c      	ldr	r3, [pc, #176]	; (80029b0 <MX_ADC_Init+0xe4>)
 8002900:	2204      	movs	r2, #4
 8002902:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002904:	4b2a      	ldr	r3, [pc, #168]	; (80029b0 <MX_ADC_Init+0xe4>)
 8002906:	2200      	movs	r2, #0
 8002908:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800290a:	4b29      	ldr	r3, [pc, #164]	; (80029b0 <MX_ADC_Init+0xe4>)
 800290c:	2200      	movs	r2, #0
 800290e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8002910:	4b27      	ldr	r3, [pc, #156]	; (80029b0 <MX_ADC_Init+0xe4>)
 8002912:	2201      	movs	r2, #1
 8002914:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002916:	4b26      	ldr	r3, [pc, #152]	; (80029b0 <MX_ADC_Init+0xe4>)
 8002918:	2200      	movs	r2, #0
 800291a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800291c:	4b24      	ldr	r3, [pc, #144]	; (80029b0 <MX_ADC_Init+0xe4>)
 800291e:	22c2      	movs	r2, #194	; 0xc2
 8002920:	32ff      	adds	r2, #255	; 0xff
 8002922:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002924:	4b22      	ldr	r3, [pc, #136]	; (80029b0 <MX_ADC_Init+0xe4>)
 8002926:	2200      	movs	r2, #0
 8002928:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 800292a:	4b21      	ldr	r3, [pc, #132]	; (80029b0 <MX_ADC_Init+0xe4>)
 800292c:	2224      	movs	r2, #36	; 0x24
 800292e:	2101      	movs	r1, #1
 8002930:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002932:	4b1f      	ldr	r3, [pc, #124]	; (80029b0 <MX_ADC_Init+0xe4>)
 8002934:	2201      	movs	r2, #1
 8002936:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002938:	4b1d      	ldr	r3, [pc, #116]	; (80029b0 <MX_ADC_Init+0xe4>)
 800293a:	0018      	movs	r0, r3
 800293c:	f000 fb44 	bl	8002fc8 <HAL_ADC_Init>
 8002940:	1e03      	subs	r3, r0, #0
 8002942:	d001      	beq.n	8002948 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002944:	f000 f940 	bl	8002bc8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002948:	1d3b      	adds	r3, r7, #4
 800294a:	2205      	movs	r2, #5
 800294c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800294e:	1d3b      	adds	r3, r7, #4
 8002950:	2280      	movs	r2, #128	; 0x80
 8002952:	0152      	lsls	r2, r2, #5
 8002954:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002956:	1d3b      	adds	r3, r7, #4
 8002958:	2280      	movs	r2, #128	; 0x80
 800295a:	0552      	lsls	r2, r2, #21
 800295c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800295e:	1d3a      	adds	r2, r7, #4
 8002960:	4b13      	ldr	r3, [pc, #76]	; (80029b0 <MX_ADC_Init+0xe4>)
 8002962:	0011      	movs	r1, r2
 8002964:	0018      	movs	r0, r3
 8002966:	f000 fedf 	bl	8003728 <HAL_ADC_ConfigChannel>
 800296a:	1e03      	subs	r3, r0, #0
 800296c:	d001      	beq.n	8002972 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800296e:	f000 f92b 	bl	8002bc8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002972:	1d3b      	adds	r3, r7, #4
 8002974:	2206      	movs	r2, #6
 8002976:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002978:	1d3a      	adds	r2, r7, #4
 800297a:	4b0d      	ldr	r3, [pc, #52]	; (80029b0 <MX_ADC_Init+0xe4>)
 800297c:	0011      	movs	r1, r2
 800297e:	0018      	movs	r0, r3
 8002980:	f000 fed2 	bl	8003728 <HAL_ADC_ConfigChannel>
 8002984:	1e03      	subs	r3, r0, #0
 8002986:	d001      	beq.n	800298c <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8002988:	f000 f91e 	bl	8002bc8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800298c:	1d3b      	adds	r3, r7, #4
 800298e:	2210      	movs	r2, #16
 8002990:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002992:	1d3a      	adds	r2, r7, #4
 8002994:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <MX_ADC_Init+0xe4>)
 8002996:	0011      	movs	r1, r2
 8002998:	0018      	movs	r0, r3
 800299a:	f000 fec5 	bl	8003728 <HAL_ADC_ConfigChannel>
 800299e:	1e03      	subs	r3, r0, #0
 80029a0:	d001      	beq.n	80029a6 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 80029a2:	f000 f911 	bl	8002bc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b004      	add	sp, #16
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	20000028 	.word	0x20000028
 80029b4:	40012400 	.word	0x40012400

080029b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08e      	sub	sp, #56	; 0x38
 80029bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029be:	2328      	movs	r3, #40	; 0x28
 80029c0:	18fb      	adds	r3, r7, r3
 80029c2:	0018      	movs	r0, r3
 80029c4:	2310      	movs	r3, #16
 80029c6:	001a      	movs	r2, r3
 80029c8:	2100      	movs	r1, #0
 80029ca:	f003 fa35 	bl	8005e38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029ce:	2320      	movs	r3, #32
 80029d0:	18fb      	adds	r3, r7, r3
 80029d2:	0018      	movs	r0, r3
 80029d4:	2308      	movs	r3, #8
 80029d6:	001a      	movs	r2, r3
 80029d8:	2100      	movs	r1, #0
 80029da:	f003 fa2d 	bl	8005e38 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029de:	1d3b      	adds	r3, r7, #4
 80029e0:	0018      	movs	r0, r3
 80029e2:	231c      	movs	r3, #28
 80029e4:	001a      	movs	r2, r3
 80029e6:	2100      	movs	r1, #0
 80029e8:	f003 fa26 	bl	8005e38 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80029ec:	4b30      	ldr	r3, [pc, #192]	; (8002ab0 <MX_TIM3_Init+0xf8>)
 80029ee:	4a31      	ldr	r2, [pc, #196]	; (8002ab4 <MX_TIM3_Init+0xfc>)
 80029f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 80029f2:	4b2f      	ldr	r3, [pc, #188]	; (8002ab0 <MX_TIM3_Init+0xf8>)
 80029f4:	222f      	movs	r2, #47	; 0x2f
 80029f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029f8:	4b2d      	ldr	r3, [pc, #180]	; (8002ab0 <MX_TIM3_Init+0xf8>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80029fe:	4b2c      	ldr	r3, [pc, #176]	; (8002ab0 <MX_TIM3_Init+0xf8>)
 8002a00:	22fa      	movs	r2, #250	; 0xfa
 8002a02:	0092      	lsls	r2, r2, #2
 8002a04:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a06:	4b2a      	ldr	r3, [pc, #168]	; (8002ab0 <MX_TIM3_Init+0xf8>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a0c:	4b28      	ldr	r3, [pc, #160]	; (8002ab0 <MX_TIM3_Init+0xf8>)
 8002a0e:	2280      	movs	r2, #128	; 0x80
 8002a10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a12:	4b27      	ldr	r3, [pc, #156]	; (8002ab0 <MX_TIM3_Init+0xf8>)
 8002a14:	0018      	movs	r0, r3
 8002a16:	f002 fa0a 	bl	8004e2e <HAL_TIM_Base_Init>
 8002a1a:	1e03      	subs	r3, r0, #0
 8002a1c:	d001      	beq.n	8002a22 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8002a1e:	f000 f8d3 	bl	8002bc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a22:	2128      	movs	r1, #40	; 0x28
 8002a24:	187b      	adds	r3, r7, r1
 8002a26:	2280      	movs	r2, #128	; 0x80
 8002a28:	0152      	lsls	r2, r2, #5
 8002a2a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a2c:	187a      	adds	r2, r7, r1
 8002a2e:	4b20      	ldr	r3, [pc, #128]	; (8002ab0 <MX_TIM3_Init+0xf8>)
 8002a30:	0011      	movs	r1, r2
 8002a32:	0018      	movs	r0, r3
 8002a34:	f002 fd38 	bl	80054a8 <HAL_TIM_ConfigClockSource>
 8002a38:	1e03      	subs	r3, r0, #0
 8002a3a:	d001      	beq.n	8002a40 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002a3c:	f000 f8c4 	bl	8002bc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a40:	4b1b      	ldr	r3, [pc, #108]	; (8002ab0 <MX_TIM3_Init+0xf8>)
 8002a42:	0018      	movs	r0, r3
 8002a44:	f002 fa43 	bl	8004ece <HAL_TIM_PWM_Init>
 8002a48:	1e03      	subs	r3, r0, #0
 8002a4a:	d001      	beq.n	8002a50 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002a4c:	f000 f8bc 	bl	8002bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a50:	2120      	movs	r1, #32
 8002a52:	187b      	adds	r3, r7, r1
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a58:	187b      	adds	r3, r7, r1
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a5e:	187a      	adds	r2, r7, r1
 8002a60:	4b13      	ldr	r3, [pc, #76]	; (8002ab0 <MX_TIM3_Init+0xf8>)
 8002a62:	0011      	movs	r1, r2
 8002a64:	0018      	movs	r0, r3
 8002a66:	f003 f955 	bl	8005d14 <HAL_TIMEx_MasterConfigSynchronization>
 8002a6a:	1e03      	subs	r3, r0, #0
 8002a6c:	d001      	beq.n	8002a72 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8002a6e:	f000 f8ab 	bl	8002bc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a72:	1d3b      	adds	r3, r7, #4
 8002a74:	2260      	movs	r2, #96	; 0x60
 8002a76:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002a78:	1d3b      	adds	r3, r7, #4
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a7e:	1d3b      	adds	r3, r7, #4
 8002a80:	2200      	movs	r2, #0
 8002a82:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a84:	1d3b      	adds	r3, r7, #4
 8002a86:	2200      	movs	r2, #0
 8002a88:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a8a:	1d39      	adds	r1, r7, #4
 8002a8c:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <MX_TIM3_Init+0xf8>)
 8002a8e:	2208      	movs	r2, #8
 8002a90:	0018      	movs	r0, r3
 8002a92:	f002 fc43 	bl	800531c <HAL_TIM_PWM_ConfigChannel>
 8002a96:	1e03      	subs	r3, r0, #0
 8002a98:	d001      	beq.n	8002a9e <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8002a9a:	f000 f895 	bl	8002bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002a9e:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <MX_TIM3_Init+0xf8>)
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f000 f95b 	bl	8002d5c <HAL_TIM_MspPostInit>

}
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	b00e      	add	sp, #56	; 0x38
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	200000ac 	.word	0x200000ac
 8002ab4:	40000400 	.word	0x40000400

08002ab8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002abe:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <MX_DMA_Init+0x38>)
 8002ac0:	695a      	ldr	r2, [r3, #20]
 8002ac2:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <MX_DMA_Init+0x38>)
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	615a      	str	r2, [r3, #20]
 8002aca:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <MX_DMA_Init+0x38>)
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	607b      	str	r3, [r7, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2100      	movs	r1, #0
 8002ada:	2009      	movs	r0, #9
 8002adc:	f001 f9a4 	bl	8003e28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002ae0:	2009      	movs	r0, #9
 8002ae2:	f001 f9b6 	bl	8003e52 <HAL_NVIC_EnableIRQ>

}
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	b002      	add	sp, #8
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	40021000 	.word	0x40021000

08002af4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002af4:	b590      	push	{r4, r7, lr}
 8002af6:	b089      	sub	sp, #36	; 0x24
 8002af8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afa:	240c      	movs	r4, #12
 8002afc:	193b      	adds	r3, r7, r4
 8002afe:	0018      	movs	r0, r3
 8002b00:	2314      	movs	r3, #20
 8002b02:	001a      	movs	r2, r3
 8002b04:	2100      	movs	r1, #0
 8002b06:	f003 f997 	bl	8005e38 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b0a:	4b2d      	ldr	r3, [pc, #180]	; (8002bc0 <MX_GPIO_Init+0xcc>)
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	4b2c      	ldr	r3, [pc, #176]	; (8002bc0 <MX_GPIO_Init+0xcc>)
 8002b10:	2180      	movs	r1, #128	; 0x80
 8002b12:	03c9      	lsls	r1, r1, #15
 8002b14:	430a      	orrs	r2, r1
 8002b16:	615a      	str	r2, [r3, #20]
 8002b18:	4b29      	ldr	r3, [pc, #164]	; (8002bc0 <MX_GPIO_Init+0xcc>)
 8002b1a:	695a      	ldr	r2, [r3, #20]
 8002b1c:	2380      	movs	r3, #128	; 0x80
 8002b1e:	03db      	lsls	r3, r3, #15
 8002b20:	4013      	ands	r3, r2
 8002b22:	60bb      	str	r3, [r7, #8]
 8002b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b26:	4b26      	ldr	r3, [pc, #152]	; (8002bc0 <MX_GPIO_Init+0xcc>)
 8002b28:	695a      	ldr	r2, [r3, #20]
 8002b2a:	4b25      	ldr	r3, [pc, #148]	; (8002bc0 <MX_GPIO_Init+0xcc>)
 8002b2c:	2180      	movs	r1, #128	; 0x80
 8002b2e:	0289      	lsls	r1, r1, #10
 8002b30:	430a      	orrs	r2, r1
 8002b32:	615a      	str	r2, [r3, #20]
 8002b34:	4b22      	ldr	r3, [pc, #136]	; (8002bc0 <MX_GPIO_Init+0xcc>)
 8002b36:	695a      	ldr	r2, [r3, #20]
 8002b38:	2380      	movs	r3, #128	; 0x80
 8002b3a:	029b      	lsls	r3, r3, #10
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	607b      	str	r3, [r7, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b42:	4b1f      	ldr	r3, [pc, #124]	; (8002bc0 <MX_GPIO_Init+0xcc>)
 8002b44:	695a      	ldr	r2, [r3, #20]
 8002b46:	4b1e      	ldr	r3, [pc, #120]	; (8002bc0 <MX_GPIO_Init+0xcc>)
 8002b48:	2180      	movs	r1, #128	; 0x80
 8002b4a:	0309      	lsls	r1, r1, #12
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	615a      	str	r2, [r3, #20]
 8002b50:	4b1b      	ldr	r3, [pc, #108]	; (8002bc0 <MX_GPIO_Init+0xcc>)
 8002b52:	695a      	ldr	r2, [r3, #20]
 8002b54:	2380      	movs	r3, #128	; 0x80
 8002b56:	031b      	lsls	r3, r3, #12
 8002b58:	4013      	ands	r3, r2
 8002b5a:	603b      	str	r3, [r7, #0]
 8002b5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002b5e:	2380      	movs	r3, #128	; 0x80
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4818      	ldr	r0, [pc, #96]	; (8002bc4 <MX_GPIO_Init+0xd0>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	0019      	movs	r1, r3
 8002b68:	f001 fcd0 	bl	800450c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b6c:	193b      	adds	r3, r7, r4
 8002b6e:	2201      	movs	r2, #1
 8002b70:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002b72:	193b      	adds	r3, r7, r4
 8002b74:	2290      	movs	r2, #144	; 0x90
 8002b76:	0352      	lsls	r2, r2, #13
 8002b78:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7a:	193b      	adds	r3, r7, r4
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b80:	193a      	adds	r2, r7, r4
 8002b82:	2390      	movs	r3, #144	; 0x90
 8002b84:	05db      	lsls	r3, r3, #23
 8002b86:	0011      	movs	r1, r2
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f001 fb4f 	bl	800422c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8002b8e:	0021      	movs	r1, r4
 8002b90:	187b      	adds	r3, r7, r1
 8002b92:	2280      	movs	r2, #128	; 0x80
 8002b94:	0092      	lsls	r2, r2, #2
 8002b96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b98:	187b      	adds	r3, r7, r1
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9e:	187b      	adds	r3, r7, r1
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba4:	187b      	adds	r3, r7, r1
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8002baa:	187b      	adds	r3, r7, r1
 8002bac:	4a05      	ldr	r2, [pc, #20]	; (8002bc4 <MX_GPIO_Init+0xd0>)
 8002bae:	0019      	movs	r1, r3
 8002bb0:	0010      	movs	r0, r2
 8002bb2:	f001 fb3b 	bl	800422c <HAL_GPIO_Init>

}
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	b009      	add	sp, #36	; 0x24
 8002bbc:	bd90      	pop	{r4, r7, pc}
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	48000800 	.word	0x48000800

08002bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bcc:	b672      	cpsid	i
}
 8002bce:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bd0:	e7fe      	b.n	8002bd0 <Error_Handler+0x8>
	...

08002bd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bda:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <HAL_MspInit+0x44>)
 8002bdc:	699a      	ldr	r2, [r3, #24]
 8002bde:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <HAL_MspInit+0x44>)
 8002be0:	2101      	movs	r1, #1
 8002be2:	430a      	orrs	r2, r1
 8002be4:	619a      	str	r2, [r3, #24]
 8002be6:	4b0c      	ldr	r3, [pc, #48]	; (8002c18 <HAL_MspInit+0x44>)
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	2201      	movs	r2, #1
 8002bec:	4013      	ands	r3, r2
 8002bee:	607b      	str	r3, [r7, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bf2:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <HAL_MspInit+0x44>)
 8002bf4:	69da      	ldr	r2, [r3, #28]
 8002bf6:	4b08      	ldr	r3, [pc, #32]	; (8002c18 <HAL_MspInit+0x44>)
 8002bf8:	2180      	movs	r1, #128	; 0x80
 8002bfa:	0549      	lsls	r1, r1, #21
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	61da      	str	r2, [r3, #28]
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <HAL_MspInit+0x44>)
 8002c02:	69da      	ldr	r2, [r3, #28]
 8002c04:	2380      	movs	r3, #128	; 0x80
 8002c06:	055b      	lsls	r3, r3, #21
 8002c08:	4013      	ands	r3, r2
 8002c0a:	603b      	str	r3, [r7, #0]
 8002c0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	46bd      	mov	sp, r7
 8002c12:	b002      	add	sp, #8
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	40021000 	.word	0x40021000

08002c1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c1c:	b590      	push	{r4, r7, lr}
 8002c1e:	b08b      	sub	sp, #44	; 0x2c
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c24:	2414      	movs	r4, #20
 8002c26:	193b      	adds	r3, r7, r4
 8002c28:	0018      	movs	r0, r3
 8002c2a:	2314      	movs	r3, #20
 8002c2c:	001a      	movs	r2, r3
 8002c2e:	2100      	movs	r1, #0
 8002c30:	f003 f902 	bl	8005e38 <memset>
  if(hadc->Instance==ADC1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a31      	ldr	r2, [pc, #196]	; (8002d00 <HAL_ADC_MspInit+0xe4>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d15b      	bne.n	8002cf6 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c3e:	4b31      	ldr	r3, [pc, #196]	; (8002d04 <HAL_ADC_MspInit+0xe8>)
 8002c40:	699a      	ldr	r2, [r3, #24]
 8002c42:	4b30      	ldr	r3, [pc, #192]	; (8002d04 <HAL_ADC_MspInit+0xe8>)
 8002c44:	2180      	movs	r1, #128	; 0x80
 8002c46:	0089      	lsls	r1, r1, #2
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	619a      	str	r2, [r3, #24]
 8002c4c:	4b2d      	ldr	r3, [pc, #180]	; (8002d04 <HAL_ADC_MspInit+0xe8>)
 8002c4e:	699a      	ldr	r2, [r3, #24]
 8002c50:	2380      	movs	r3, #128	; 0x80
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4013      	ands	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]
 8002c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c5a:	4b2a      	ldr	r3, [pc, #168]	; (8002d04 <HAL_ADC_MspInit+0xe8>)
 8002c5c:	695a      	ldr	r2, [r3, #20]
 8002c5e:	4b29      	ldr	r3, [pc, #164]	; (8002d04 <HAL_ADC_MspInit+0xe8>)
 8002c60:	2180      	movs	r1, #128	; 0x80
 8002c62:	0289      	lsls	r1, r1, #10
 8002c64:	430a      	orrs	r2, r1
 8002c66:	615a      	str	r2, [r3, #20]
 8002c68:	4b26      	ldr	r3, [pc, #152]	; (8002d04 <HAL_ADC_MspInit+0xe8>)
 8002c6a:	695a      	ldr	r2, [r3, #20]
 8002c6c:	2380      	movs	r3, #128	; 0x80
 8002c6e:	029b      	lsls	r3, r3, #10
 8002c70:	4013      	ands	r3, r2
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002c76:	193b      	adds	r3, r7, r4
 8002c78:	2260      	movs	r2, #96	; 0x60
 8002c7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c7c:	193b      	adds	r3, r7, r4
 8002c7e:	2203      	movs	r2, #3
 8002c80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c82:	193b      	adds	r3, r7, r4
 8002c84:	2200      	movs	r2, #0
 8002c86:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c88:	193a      	adds	r2, r7, r4
 8002c8a:	2390      	movs	r3, #144	; 0x90
 8002c8c:	05db      	lsls	r3, r3, #23
 8002c8e:	0011      	movs	r1, r2
 8002c90:	0018      	movs	r0, r3
 8002c92:	f001 facb 	bl	800422c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8002c96:	4b1c      	ldr	r3, [pc, #112]	; (8002d08 <HAL_ADC_MspInit+0xec>)
 8002c98:	4a1c      	ldr	r2, [pc, #112]	; (8002d0c <HAL_ADC_MspInit+0xf0>)
 8002c9a:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c9c:	4b1a      	ldr	r3, [pc, #104]	; (8002d08 <HAL_ADC_MspInit+0xec>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ca2:	4b19      	ldr	r3, [pc, #100]	; (8002d08 <HAL_ADC_MspInit+0xec>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002ca8:	4b17      	ldr	r3, [pc, #92]	; (8002d08 <HAL_ADC_MspInit+0xec>)
 8002caa:	2280      	movs	r2, #128	; 0x80
 8002cac:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002cae:	4b16      	ldr	r3, [pc, #88]	; (8002d08 <HAL_ADC_MspInit+0xec>)
 8002cb0:	2280      	movs	r2, #128	; 0x80
 8002cb2:	0052      	lsls	r2, r2, #1
 8002cb4:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002cb6:	4b14      	ldr	r3, [pc, #80]	; (8002d08 <HAL_ADC_MspInit+0xec>)
 8002cb8:	2280      	movs	r2, #128	; 0x80
 8002cba:	00d2      	lsls	r2, r2, #3
 8002cbc:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8002cbe:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <HAL_ADC_MspInit+0xec>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002cc4:	4b10      	ldr	r3, [pc, #64]	; (8002d08 <HAL_ADC_MspInit+0xec>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002cca:	4b0f      	ldr	r3, [pc, #60]	; (8002d08 <HAL_ADC_MspInit+0xec>)
 8002ccc:	0018      	movs	r0, r3
 8002cce:	f001 f8dd 	bl	8003e8c <HAL_DMA_Init>
 8002cd2:	1e03      	subs	r3, r0, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8002cd6:	f7ff ff77 	bl	8002bc8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a0a      	ldr	r2, [pc, #40]	; (8002d08 <HAL_ADC_MspInit+0xec>)
 8002cde:	631a      	str	r2, [r3, #48]	; 0x30
 8002ce0:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <HAL_ADC_MspInit+0xec>)
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	625a      	str	r2, [r3, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2100      	movs	r1, #0
 8002cea:	200c      	movs	r0, #12
 8002cec:	f001 f89c 	bl	8003e28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8002cf0:	200c      	movs	r0, #12
 8002cf2:	f001 f8ae 	bl	8003e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	b00b      	add	sp, #44	; 0x2c
 8002cfc:	bd90      	pop	{r4, r7, pc}
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	40012400 	.word	0x40012400
 8002d04:	40021000 	.word	0x40021000
 8002d08:	20000068 	.word	0x20000068
 8002d0c:	40020008 	.word	0x40020008

08002d10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a0d      	ldr	r2, [pc, #52]	; (8002d54 <HAL_TIM_Base_MspInit+0x44>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d113      	bne.n	8002d4a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d22:	4b0d      	ldr	r3, [pc, #52]	; (8002d58 <HAL_TIM_Base_MspInit+0x48>)
 8002d24:	69da      	ldr	r2, [r3, #28]
 8002d26:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <HAL_TIM_Base_MspInit+0x48>)
 8002d28:	2102      	movs	r1, #2
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	61da      	str	r2, [r3, #28]
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <HAL_TIM_Base_MspInit+0x48>)
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	2202      	movs	r2, #2
 8002d34:	4013      	ands	r3, r2
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	2010      	movs	r0, #16
 8002d40:	f001 f872 	bl	8003e28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d44:	2010      	movs	r0, #16
 8002d46:	f001 f884 	bl	8003e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	b004      	add	sp, #16
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	40000400 	.word	0x40000400
 8002d58:	40021000 	.word	0x40021000

08002d5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d5c:	b590      	push	{r4, r7, lr}
 8002d5e:	b089      	sub	sp, #36	; 0x24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d64:	240c      	movs	r4, #12
 8002d66:	193b      	adds	r3, r7, r4
 8002d68:	0018      	movs	r0, r3
 8002d6a:	2314      	movs	r3, #20
 8002d6c:	001a      	movs	r2, r3
 8002d6e:	2100      	movs	r1, #0
 8002d70:	f003 f862 	bl	8005e38 <memset>
  if(htim->Instance==TIM3)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a15      	ldr	r2, [pc, #84]	; (8002dd0 <HAL_TIM_MspPostInit+0x74>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d124      	bne.n	8002dc8 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d7e:	4b15      	ldr	r3, [pc, #84]	; (8002dd4 <HAL_TIM_MspPostInit+0x78>)
 8002d80:	695a      	ldr	r2, [r3, #20]
 8002d82:	4b14      	ldr	r3, [pc, #80]	; (8002dd4 <HAL_TIM_MspPostInit+0x78>)
 8002d84:	2180      	movs	r1, #128	; 0x80
 8002d86:	0309      	lsls	r1, r1, #12
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	615a      	str	r2, [r3, #20]
 8002d8c:	4b11      	ldr	r3, [pc, #68]	; (8002dd4 <HAL_TIM_MspPostInit+0x78>)
 8002d8e:	695a      	ldr	r2, [r3, #20]
 8002d90:	2380      	movs	r3, #128	; 0x80
 8002d92:	031b      	lsls	r3, r3, #12
 8002d94:	4013      	ands	r3, r2
 8002d96:	60bb      	str	r3, [r7, #8]
 8002d98:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002d9a:	193b      	adds	r3, r7, r4
 8002d9c:	2280      	movs	r2, #128	; 0x80
 8002d9e:	0052      	lsls	r2, r2, #1
 8002da0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da2:	0021      	movs	r1, r4
 8002da4:	187b      	adds	r3, r7, r1
 8002da6:	2202      	movs	r2, #2
 8002da8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002daa:	187b      	adds	r3, r7, r1
 8002dac:	2200      	movs	r2, #0
 8002dae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db0:	187b      	adds	r3, r7, r1
 8002db2:	2200      	movs	r2, #0
 8002db4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002db6:	187b      	adds	r3, r7, r1
 8002db8:	2201      	movs	r2, #1
 8002dba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dbc:	187b      	adds	r3, r7, r1
 8002dbe:	4a06      	ldr	r2, [pc, #24]	; (8002dd8 <HAL_TIM_MspPostInit+0x7c>)
 8002dc0:	0019      	movs	r1, r3
 8002dc2:	0010      	movs	r0, r2
 8002dc4:	f001 fa32 	bl	800422c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002dc8:	46c0      	nop			; (mov r8, r8)
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	b009      	add	sp, #36	; 0x24
 8002dce:	bd90      	pop	{r4, r7, pc}
 8002dd0:	40000400 	.word	0x40000400
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	48000800 	.word	0x48000800

08002ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002de0:	f002 f80c 	bl	8004dfc <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002de4:	e7fe      	b.n	8002de4 <NMI_Handler+0x8>

08002de6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dea:	e7fe      	b.n	8002dea <HardFault_Handler+0x4>

08002dec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002df0:	46c0      	nop			; (mov r8, r8)
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e04:	f000 f8a0 	bl	8002f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e08:	46c0      	nop			; (mov r8, r8)
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
	...

08002e10 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002e14:	4b03      	ldr	r3, [pc, #12]	; (8002e24 <DMA1_Channel1_IRQHandler+0x14>)
 8002e16:	0018      	movs	r0, r3
 8002e18:	f001 f91e 	bl	8004058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002e1c:	46c0      	nop			; (mov r8, r8)
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	20000068 	.word	0x20000068

08002e28 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8002e2c:	4b03      	ldr	r3, [pc, #12]	; (8002e3c <ADC1_COMP_IRQHandler+0x14>)
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f000 fba2 	bl	8003578 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8002e34:	46c0      	nop			; (mov r8, r8)
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	46c0      	nop			; (mov r8, r8)
 8002e3c:	20000028 	.word	0x20000028

08002e40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e44:	4b03      	ldr	r3, [pc, #12]	; (8002e54 <TIM3_IRQHandler+0x14>)
 8002e46:	0018      	movs	r0, r3
 8002e48:	f002 f952 	bl	80050f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e4c:	46c0      	nop			; (mov r8, r8)
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	200000ac 	.word	0x200000ac

08002e58 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002e5c:	46c0      	nop			; (mov r8, r8)
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
	...

08002e64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e64:	480d      	ldr	r0, [pc, #52]	; (8002e9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e66:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e68:	480d      	ldr	r0, [pc, #52]	; (8002ea0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e6a:	490e      	ldr	r1, [pc, #56]	; (8002ea4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e6c:	4a0e      	ldr	r2, [pc, #56]	; (8002ea8 <LoopForever+0xe>)
  movs r3, #0
 8002e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e70:	e002      	b.n	8002e78 <LoopCopyDataInit>

08002e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e76:	3304      	adds	r3, #4

08002e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e7c:	d3f9      	bcc.n	8002e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e7e:	4a0b      	ldr	r2, [pc, #44]	; (8002eac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e80:	4c0b      	ldr	r4, [pc, #44]	; (8002eb0 <LoopForever+0x16>)
  movs r3, #0
 8002e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e84:	e001      	b.n	8002e8a <LoopFillZerobss>

08002e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e88:	3204      	adds	r2, #4

08002e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e8c:	d3fb      	bcc.n	8002e86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002e8e:	f7ff ffe3 	bl	8002e58 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002e92:	f002 ffad 	bl	8005df0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e96:	f7ff fc53 	bl	8002740 <main>

08002e9a <LoopForever>:

LoopForever:
    b LoopForever
 8002e9a:	e7fe      	b.n	8002e9a <LoopForever>
  ldr   r0, =_estack
 8002e9c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ea4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002ea8:	08005fd8 	.word	0x08005fd8
  ldr r2, =_sbss
 8002eac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002eb0:	20000114 	.word	0x20000114

08002eb4 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002eb4:	e7fe      	b.n	8002eb4 <CEC_CAN_IRQHandler>
	...

08002eb8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ebc:	4b07      	ldr	r3, [pc, #28]	; (8002edc <HAL_Init+0x24>)
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	4b06      	ldr	r3, [pc, #24]	; (8002edc <HAL_Init+0x24>)
 8002ec2:	2110      	movs	r1, #16
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002ec8:	2000      	movs	r0, #0
 8002eca:	f000 f809 	bl	8002ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ece:	f7ff fe81 	bl	8002bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	40022000 	.word	0x40022000

08002ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ee0:	b590      	push	{r4, r7, lr}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ee8:	4b14      	ldr	r3, [pc, #80]	; (8002f3c <HAL_InitTick+0x5c>)
 8002eea:	681c      	ldr	r4, [r3, #0]
 8002eec:	4b14      	ldr	r3, [pc, #80]	; (8002f40 <HAL_InitTick+0x60>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	0019      	movs	r1, r3
 8002ef2:	23fa      	movs	r3, #250	; 0xfa
 8002ef4:	0098      	lsls	r0, r3, #2
 8002ef6:	f7fd f907 	bl	8000108 <__udivsi3>
 8002efa:	0003      	movs	r3, r0
 8002efc:	0019      	movs	r1, r3
 8002efe:	0020      	movs	r0, r4
 8002f00:	f7fd f902 	bl	8000108 <__udivsi3>
 8002f04:	0003      	movs	r3, r0
 8002f06:	0018      	movs	r0, r3
 8002f08:	f000 ffb3 	bl	8003e72 <HAL_SYSTICK_Config>
 8002f0c:	1e03      	subs	r3, r0, #0
 8002f0e:	d001      	beq.n	8002f14 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e00f      	b.n	8002f34 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b03      	cmp	r3, #3
 8002f18:	d80b      	bhi.n	8002f32 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	425b      	negs	r3, r3
 8002f20:	2200      	movs	r2, #0
 8002f22:	0018      	movs	r0, r3
 8002f24:	f000 ff80 	bl	8003e28 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f28:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <HAL_InitTick+0x64>)
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	e000      	b.n	8002f34 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
}
 8002f34:	0018      	movs	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	b003      	add	sp, #12
 8002f3a:	bd90      	pop	{r4, r7, pc}
 8002f3c:	20000000 	.word	0x20000000
 8002f40:	20000008 	.word	0x20000008
 8002f44:	20000004 	.word	0x20000004

08002f48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f4c:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <HAL_IncTick+0x1c>)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	001a      	movs	r2, r3
 8002f52:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <HAL_IncTick+0x20>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	18d2      	adds	r2, r2, r3
 8002f58:	4b03      	ldr	r3, [pc, #12]	; (8002f68 <HAL_IncTick+0x20>)
 8002f5a:	601a      	str	r2, [r3, #0]
}
 8002f5c:	46c0      	nop			; (mov r8, r8)
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	20000008 	.word	0x20000008
 8002f68:	20000110 	.word	0x20000110

08002f6c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f70:	4b02      	ldr	r3, [pc, #8]	; (8002f7c <HAL_GetTick+0x10>)
 8002f72:	681b      	ldr	r3, [r3, #0]
}
 8002f74:	0018      	movs	r0, r3
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	20000110 	.word	0x20000110

08002f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f88:	f7ff fff0 	bl	8002f6c <HAL_GetTick>
 8002f8c:	0003      	movs	r3, r0
 8002f8e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	3301      	adds	r3, #1
 8002f98:	d005      	beq.n	8002fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f9a:	4b0a      	ldr	r3, [pc, #40]	; (8002fc4 <HAL_Delay+0x44>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	001a      	movs	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	189b      	adds	r3, r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	f7ff ffe0 	bl	8002f6c <HAL_GetTick>
 8002fac:	0002      	movs	r2, r0
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d8f7      	bhi.n	8002fa8 <HAL_Delay+0x28>
  {
  }
}
 8002fb8:	46c0      	nop			; (mov r8, r8)
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b004      	add	sp, #16
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	20000008 	.word	0x20000008

08002fc8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fd0:	230f      	movs	r3, #15
 8002fd2:	18fb      	adds	r3, r7, r3
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e125      	b.n	8003232 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10a      	bne.n	8003004 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2234      	movs	r2, #52	; 0x34
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	0018      	movs	r0, r3
 8003000:	f7ff fe0c 	bl	8002c1c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003008:	2210      	movs	r2, #16
 800300a:	4013      	ands	r3, r2
 800300c:	d000      	beq.n	8003010 <HAL_ADC_Init+0x48>
 800300e:	e103      	b.n	8003218 <HAL_ADC_Init+0x250>
 8003010:	230f      	movs	r3, #15
 8003012:	18fb      	adds	r3, r7, r3
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d000      	beq.n	800301c <HAL_ADC_Init+0x54>
 800301a:	e0fd      	b.n	8003218 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	2204      	movs	r2, #4
 8003024:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8003026:	d000      	beq.n	800302a <HAL_ADC_Init+0x62>
 8003028:	e0f6      	b.n	8003218 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302e:	4a83      	ldr	r2, [pc, #524]	; (800323c <HAL_ADC_Init+0x274>)
 8003030:	4013      	ands	r3, r2
 8003032:	2202      	movs	r2, #2
 8003034:	431a      	orrs	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	2203      	movs	r2, #3
 8003042:	4013      	ands	r3, r2
 8003044:	2b01      	cmp	r3, #1
 8003046:	d112      	bne.n	800306e <HAL_ADC_Init+0xa6>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2201      	movs	r2, #1
 8003050:	4013      	ands	r3, r2
 8003052:	2b01      	cmp	r3, #1
 8003054:	d009      	beq.n	800306a <HAL_ADC_Init+0xa2>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	2380      	movs	r3, #128	; 0x80
 800305e:	021b      	lsls	r3, r3, #8
 8003060:	401a      	ands	r2, r3
 8003062:	2380      	movs	r3, #128	; 0x80
 8003064:	021b      	lsls	r3, r3, #8
 8003066:	429a      	cmp	r2, r3
 8003068:	d101      	bne.n	800306e <HAL_ADC_Init+0xa6>
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <HAL_ADC_Init+0xa8>
 800306e:	2300      	movs	r3, #0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d116      	bne.n	80030a2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	2218      	movs	r2, #24
 800307c:	4393      	bics	r3, r2
 800307e:	0019      	movs	r1, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	0899      	lsrs	r1, r3, #2
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68da      	ldr	r2, [r3, #12]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4964      	ldr	r1, [pc, #400]	; (8003240 <HAL_ADC_Init+0x278>)
 80030ae:	400a      	ands	r2, r1
 80030b0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	7e1b      	ldrb	r3, [r3, #24]
 80030b6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	7e5b      	ldrb	r3, [r3, #25]
 80030bc:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030be:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	7e9b      	ldrb	r3, [r3, #26]
 80030c4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80030c6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d002      	beq.n	80030d6 <HAL_ADC_Init+0x10e>
 80030d0:	2380      	movs	r3, #128	; 0x80
 80030d2:	015b      	lsls	r3, r3, #5
 80030d4:	e000      	b.n	80030d8 <HAL_ADC_Init+0x110>
 80030d6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80030d8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80030de:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d101      	bne.n	80030ec <HAL_ADC_Init+0x124>
 80030e8:	2304      	movs	r3, #4
 80030ea:	e000      	b.n	80030ee <HAL_ADC_Init+0x126>
 80030ec:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80030ee:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2124      	movs	r1, #36	; 0x24
 80030f4:	5c5b      	ldrb	r3, [r3, r1]
 80030f6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80030f8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	7edb      	ldrb	r3, [r3, #27]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d115      	bne.n	8003134 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	7e9b      	ldrb	r3, [r3, #26]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d105      	bne.n	800311c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2280      	movs	r2, #128	; 0x80
 8003114:	0252      	lsls	r2, r2, #9
 8003116:	4313      	orrs	r3, r2
 8003118:	60bb      	str	r3, [r7, #8]
 800311a:	e00b      	b.n	8003134 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003120:	2220      	movs	r2, #32
 8003122:	431a      	orrs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312c:	2201      	movs	r2, #1
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	69da      	ldr	r2, [r3, #28]
 8003138:	23c2      	movs	r3, #194	; 0xc2
 800313a:	33ff      	adds	r3, #255	; 0xff
 800313c:	429a      	cmp	r2, r3
 800313e:	d007      	beq.n	8003150 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003148:	4313      	orrs	r3, r2
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	4313      	orrs	r3, r2
 800314e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68d9      	ldr	r1, [r3, #12]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	430a      	orrs	r2, r1
 800315e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003164:	2380      	movs	r3, #128	; 0x80
 8003166:	055b      	lsls	r3, r3, #21
 8003168:	429a      	cmp	r2, r3
 800316a:	d01b      	beq.n	80031a4 <HAL_ADC_Init+0x1dc>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	2b01      	cmp	r3, #1
 8003172:	d017      	beq.n	80031a4 <HAL_ADC_Init+0x1dc>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003178:	2b02      	cmp	r3, #2
 800317a:	d013      	beq.n	80031a4 <HAL_ADC_Init+0x1dc>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	2b03      	cmp	r3, #3
 8003182:	d00f      	beq.n	80031a4 <HAL_ADC_Init+0x1dc>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003188:	2b04      	cmp	r3, #4
 800318a:	d00b      	beq.n	80031a4 <HAL_ADC_Init+0x1dc>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003190:	2b05      	cmp	r3, #5
 8003192:	d007      	beq.n	80031a4 <HAL_ADC_Init+0x1dc>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003198:	2b06      	cmp	r3, #6
 800319a:	d003      	beq.n	80031a4 <HAL_ADC_Init+0x1dc>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a0:	2b07      	cmp	r3, #7
 80031a2:	d112      	bne.n	80031ca <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695a      	ldr	r2, [r3, #20]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2107      	movs	r1, #7
 80031b0:	438a      	bics	r2, r1
 80031b2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6959      	ldr	r1, [r3, #20]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031be:	2207      	movs	r2, #7
 80031c0:	401a      	ands	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	4a1c      	ldr	r2, [pc, #112]	; (8003244 <HAL_ADC_Init+0x27c>)
 80031d2:	4013      	ands	r3, r2
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d10b      	bne.n	80031f2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e4:	2203      	movs	r2, #3
 80031e6:	4393      	bics	r3, r2
 80031e8:	2201      	movs	r2, #1
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80031f0:	e01c      	b.n	800322c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f6:	2212      	movs	r2, #18
 80031f8:	4393      	bics	r3, r2
 80031fa:	2210      	movs	r2, #16
 80031fc:	431a      	orrs	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003206:	2201      	movs	r2, #1
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800320e:	230f      	movs	r3, #15
 8003210:	18fb      	adds	r3, r7, r3
 8003212:	2201      	movs	r2, #1
 8003214:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003216:	e009      	b.n	800322c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321c:	2210      	movs	r2, #16
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003224:	230f      	movs	r3, #15
 8003226:	18fb      	adds	r3, r7, r3
 8003228:	2201      	movs	r2, #1
 800322a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800322c:	230f      	movs	r3, #15
 800322e:	18fb      	adds	r3, r7, r3
 8003230:	781b      	ldrb	r3, [r3, #0]
}
 8003232:	0018      	movs	r0, r3
 8003234:	46bd      	mov	sp, r7
 8003236:	b004      	add	sp, #16
 8003238:	bd80      	pop	{r7, pc}
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	fffffefd 	.word	0xfffffefd
 8003240:	fffe0219 	.word	0xfffe0219
 8003244:	833fffe7 	.word	0x833fffe7

08003248 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003248:	b590      	push	{r4, r7, lr}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003250:	230f      	movs	r3, #15
 8003252:	18fb      	adds	r3, r7, r3
 8003254:	2200      	movs	r2, #0
 8003256:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2204      	movs	r2, #4
 8003260:	4013      	ands	r3, r2
 8003262:	d138      	bne.n	80032d6 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2234      	movs	r2, #52	; 0x34
 8003268:	5c9b      	ldrb	r3, [r3, r2]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d101      	bne.n	8003272 <HAL_ADC_Start+0x2a>
 800326e:	2302      	movs	r3, #2
 8003270:	e038      	b.n	80032e4 <HAL_ADC_Start+0x9c>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2234      	movs	r2, #52	; 0x34
 8003276:	2101      	movs	r1, #1
 8003278:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	7e5b      	ldrb	r3, [r3, #25]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d007      	beq.n	8003292 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003282:	230f      	movs	r3, #15
 8003284:	18fc      	adds	r4, r7, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	0018      	movs	r0, r3
 800328a:	f000 fb5b 	bl	8003944 <ADC_Enable>
 800328e:	0003      	movs	r3, r0
 8003290:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003292:	230f      	movs	r3, #15
 8003294:	18fb      	adds	r3, r7, r3
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d120      	bne.n	80032de <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a0:	4a12      	ldr	r2, [pc, #72]	; (80032ec <HAL_ADC_Start+0xa4>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	2280      	movs	r2, #128	; 0x80
 80032a6:	0052      	lsls	r2, r2, #1
 80032a8:	431a      	orrs	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2234      	movs	r2, #52	; 0x34
 80032b8:	2100      	movs	r1, #0
 80032ba:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	221c      	movs	r2, #28
 80032c2:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689a      	ldr	r2, [r3, #8]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2104      	movs	r1, #4
 80032d0:	430a      	orrs	r2, r1
 80032d2:	609a      	str	r2, [r3, #8]
 80032d4:	e003      	b.n	80032de <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80032d6:	230f      	movs	r3, #15
 80032d8:	18fb      	adds	r3, r7, r3
 80032da:	2202      	movs	r2, #2
 80032dc:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80032de:	230f      	movs	r3, #15
 80032e0:	18fb      	adds	r3, r7, r3
 80032e2:	781b      	ldrb	r3, [r3, #0]
}
 80032e4:	0018      	movs	r0, r3
 80032e6:	46bd      	mov	sp, r7
 80032e8:	b005      	add	sp, #20
 80032ea:	bd90      	pop	{r4, r7, pc}
 80032ec:	fffff0fe 	.word	0xfffff0fe

080032f0 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 80032f0:	b5b0      	push	{r4, r5, r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032f8:	230f      	movs	r3, #15
 80032fa:	18fb      	adds	r3, r7, r3
 80032fc:	2200      	movs	r2, #0
 80032fe:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2234      	movs	r2, #52	; 0x34
 8003304:	5c9b      	ldrb	r3, [r3, r2]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d101      	bne.n	800330e <HAL_ADC_Stop+0x1e>
 800330a:	2302      	movs	r3, #2
 800330c:	e029      	b.n	8003362 <HAL_ADC_Stop+0x72>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2234      	movs	r2, #52	; 0x34
 8003312:	2101      	movs	r1, #1
 8003314:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003316:	250f      	movs	r5, #15
 8003318:	197c      	adds	r4, r7, r5
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	0018      	movs	r0, r3
 800331e:	f000 fc06 	bl	8003b2e <ADC_ConversionStop>
 8003322:	0003      	movs	r3, r0
 8003324:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003326:	197b      	adds	r3, r7, r5
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d112      	bne.n	8003354 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800332e:	197c      	adds	r4, r7, r5
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	0018      	movs	r0, r3
 8003334:	f000 fb8a 	bl	8003a4c <ADC_Disable>
 8003338:	0003      	movs	r3, r0
 800333a:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800333c:	197b      	adds	r3, r7, r5
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d107      	bne.n	8003354 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003348:	4a08      	ldr	r2, [pc, #32]	; (800336c <HAL_ADC_Stop+0x7c>)
 800334a:	4013      	ands	r3, r2
 800334c:	2201      	movs	r2, #1
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2234      	movs	r2, #52	; 0x34
 8003358:	2100      	movs	r1, #0
 800335a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800335c:	230f      	movs	r3, #15
 800335e:	18fb      	adds	r3, r7, r3
 8003360:	781b      	ldrb	r3, [r3, #0]
}
 8003362:	0018      	movs	r0, r3
 8003364:	46bd      	mov	sp, r7
 8003366:	b004      	add	sp, #16
 8003368:	bdb0      	pop	{r4, r5, r7, pc}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	fffffefe 	.word	0xfffffefe

08003370 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003370:	b590      	push	{r4, r7, lr}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800337c:	2317      	movs	r3, #23
 800337e:	18fb      	adds	r3, r7, r3
 8003380:	2200      	movs	r2, #0
 8003382:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2204      	movs	r2, #4
 800338c:	4013      	ands	r3, r2
 800338e:	d15e      	bne.n	800344e <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2234      	movs	r2, #52	; 0x34
 8003394:	5c9b      	ldrb	r3, [r3, r2]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d101      	bne.n	800339e <HAL_ADC_Start_DMA+0x2e>
 800339a:	2302      	movs	r3, #2
 800339c:	e05e      	b.n	800345c <HAL_ADC_Start_DMA+0xec>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2234      	movs	r2, #52	; 0x34
 80033a2:	2101      	movs	r1, #1
 80033a4:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	7e5b      	ldrb	r3, [r3, #25]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d007      	beq.n	80033be <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80033ae:	2317      	movs	r3, #23
 80033b0:	18fc      	adds	r4, r7, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	0018      	movs	r0, r3
 80033b6:	f000 fac5 	bl	8003944 <ADC_Enable>
 80033ba:	0003      	movs	r3, r0
 80033bc:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80033be:	2317      	movs	r3, #23
 80033c0:	18fb      	adds	r3, r7, r3
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d146      	bne.n	8003456 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033cc:	4a25      	ldr	r2, [pc, #148]	; (8003464 <HAL_ADC_Start_DMA+0xf4>)
 80033ce:	4013      	ands	r3, r2
 80033d0:	2280      	movs	r2, #128	; 0x80
 80033d2:	0052      	lsls	r2, r2, #1
 80033d4:	431a      	orrs	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2234      	movs	r2, #52	; 0x34
 80033e4:	2100      	movs	r1, #0
 80033e6:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ec:	4a1e      	ldr	r2, [pc, #120]	; (8003468 <HAL_ADC_Start_DMA+0xf8>)
 80033ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	4a1d      	ldr	r2, [pc, #116]	; (800346c <HAL_ADC_Start_DMA+0xfc>)
 80033f6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fc:	4a1c      	ldr	r2, [pc, #112]	; (8003470 <HAL_ADC_Start_DMA+0x100>)
 80033fe:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	221c      	movs	r2, #28
 8003406:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2110      	movs	r1, #16
 8003414:	430a      	orrs	r2, r1
 8003416:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2101      	movs	r1, #1
 8003424:	430a      	orrs	r2, r1
 8003426:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	3340      	adds	r3, #64	; 0x40
 8003432:	0019      	movs	r1, r3
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f000 fd70 	bl	8003f1c <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689a      	ldr	r2, [r3, #8]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2104      	movs	r1, #4
 8003448:	430a      	orrs	r2, r1
 800344a:	609a      	str	r2, [r3, #8]
 800344c:	e003      	b.n	8003456 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800344e:	2317      	movs	r3, #23
 8003450:	18fb      	adds	r3, r7, r3
 8003452:	2202      	movs	r2, #2
 8003454:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003456:	2317      	movs	r3, #23
 8003458:	18fb      	adds	r3, r7, r3
 800345a:	781b      	ldrb	r3, [r3, #0]
}
 800345c:	0018      	movs	r0, r3
 800345e:	46bd      	mov	sp, r7
 8003460:	b007      	add	sp, #28
 8003462:	bd90      	pop	{r4, r7, pc}
 8003464:	fffff0fe 	.word	0xfffff0fe
 8003468:	08003bc9 	.word	0x08003bc9
 800346c:	08003c7d 	.word	0x08003c7d
 8003470:	08003c9b 	.word	0x08003c9b

08003474 <HAL_ADC_Stop_DMA>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8003474:	b5b0      	push	{r4, r5, r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800347c:	230f      	movs	r3, #15
 800347e:	18fb      	adds	r3, r7, r3
 8003480:	2200      	movs	r2, #0
 8003482:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2234      	movs	r2, #52	; 0x34
 8003488:	5c9b      	ldrb	r3, [r3, r2]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d101      	bne.n	8003492 <HAL_ADC_Stop_DMA+0x1e>
 800348e:	2302      	movs	r3, #2
 8003490:	e05f      	b.n	8003552 <HAL_ADC_Stop_DMA+0xde>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2234      	movs	r2, #52	; 0x34
 8003496:	2101      	movs	r1, #1
 8003498:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800349a:	250f      	movs	r5, #15
 800349c:	197c      	adds	r4, r7, r5
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	0018      	movs	r0, r3
 80034a2:	f000 fb44 	bl	8003b2e <ADC_ConversionStop>
 80034a6:	0003      	movs	r3, r0
 80034a8:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80034aa:	0028      	movs	r0, r5
 80034ac:	183b      	adds	r3, r7, r0
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d147      	bne.n	8003544 <HAL_ADC_Stop_DMA+0xd0>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    hadc->Instance->CFGR1 &= ~ADC_CFGR1_DMAEN;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2101      	movs	r1, #1
 80034c0:	438a      	bics	r2, r1
 80034c2:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c8:	2221      	movs	r2, #33	; 0x21
 80034ca:	5c9b      	ldrb	r3, [r3, r2]
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d112      	bne.n	80034f8 <HAL_ADC_Stop_DMA+0x84>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	0005      	movs	r5, r0
 80034d8:	183c      	adds	r4, r7, r0
 80034da:	0018      	movs	r0, r3
 80034dc:	f000 fd84 	bl	8003fe8 <HAL_DMA_Abort>
 80034e0:	0003      	movs	r3, r0
 80034e2:	7023      	strb	r3, [r4, #0]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80034e4:	197b      	adds	r3, r7, r5
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d005      	beq.n	80034f8 <HAL_ADC_Stop_DMA+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f0:	2240      	movs	r2, #64	; 0x40
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2110      	movs	r1, #16
 8003504:	438a      	bics	r2, r1
 8003506:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep  */
    /* in memory a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8003508:	220f      	movs	r2, #15
 800350a:	18bb      	adds	r3, r7, r2
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d107      	bne.n	8003522 <HAL_ADC_Stop_DMA+0xae>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003512:	18bc      	adds	r4, r7, r2
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	0018      	movs	r0, r3
 8003518:	f000 fa98 	bl	8003a4c <ADC_Disable>
 800351c:	0003      	movs	r3, r0
 800351e:	7023      	strb	r3, [r4, #0]
 8003520:	e003      	b.n	800352a <HAL_ADC_Stop_DMA+0xb6>
    }
    else
    {
      ADC_Disable(hadc);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	0018      	movs	r0, r3
 8003526:	f000 fa91 	bl	8003a4c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800352a:	230f      	movs	r3, #15
 800352c:	18fb      	adds	r3, r7, r3
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d107      	bne.n	8003544 <HAL_ADC_Stop_DMA+0xd0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003538:	4a08      	ldr	r2, [pc, #32]	; (800355c <HAL_ADC_Stop_DMA+0xe8>)
 800353a:	4013      	ands	r3, r2
 800353c:	2201      	movs	r2, #1
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2234      	movs	r2, #52	; 0x34
 8003548:	2100      	movs	r1, #0
 800354a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800354c:	230f      	movs	r3, #15
 800354e:	18fb      	adds	r3, r7, r3
 8003550:	781b      	ldrb	r3, [r3, #0]
}
 8003552:	0018      	movs	r0, r3
 8003554:	46bd      	mov	sp, r7
 8003556:	b004      	add	sp, #16
 8003558:	bdb0      	pop	{r4, r5, r7, pc}
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	fffffefe 	.word	0xfffffefe

08003560 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800356e:	0018      	movs	r0, r3
 8003570:	46bd      	mov	sp, r7
 8003572:	b002      	add	sp, #8
 8003574:	bd80      	pop	{r7, pc}
	...

08003578 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2204      	movs	r2, #4
 8003588:	4013      	ands	r3, r2
 800358a:	2b04      	cmp	r3, #4
 800358c:	d106      	bne.n	800359c <HAL_ADC_IRQHandler+0x24>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2204      	movs	r2, #4
 8003596:	4013      	ands	r3, r2
 8003598:	2b04      	cmp	r3, #4
 800359a:	d00d      	beq.n	80035b8 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2208      	movs	r2, #8
 80035a4:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d14f      	bne.n	800364a <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2208      	movs	r2, #8
 80035b2:	4013      	ands	r3, r2
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d148      	bne.n	800364a <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035bc:	2210      	movs	r2, #16
 80035be:	4013      	ands	r3, r2
 80035c0:	d106      	bne.n	80035d0 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c6:	2280      	movs	r2, #128	; 0x80
 80035c8:	0092      	lsls	r2, r2, #2
 80035ca:	431a      	orrs	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	23c0      	movs	r3, #192	; 0xc0
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	4013      	ands	r3, r2
 80035dc:	d12d      	bne.n	800363a <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d129      	bne.n	800363a <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2208      	movs	r2, #8
 80035ee:	4013      	ands	r3, r2
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d122      	bne.n	800363a <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	2204      	movs	r2, #4
 80035fc:	4013      	ands	r3, r2
 80035fe:	d110      	bne.n	8003622 <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	210c      	movs	r1, #12
 800360c:	438a      	bics	r2, r1
 800360e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003614:	4a33      	ldr	r2, [pc, #204]	; (80036e4 <HAL_ADC_IRQHandler+0x16c>)
 8003616:	4013      	ands	r3, r2
 8003618:	2201      	movs	r2, #1
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	639a      	str	r2, [r3, #56]	; 0x38
 8003620:	e00b      	b.n	800363a <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003626:	2220      	movs	r2, #32
 8003628:	431a      	orrs	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003632:	2201      	movs	r2, #1
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	0018      	movs	r0, r3
 800363e:	f000 f853 	bl	80036e8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	220c      	movs	r2, #12
 8003648:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2280      	movs	r2, #128	; 0x80
 8003652:	4013      	ands	r3, r2
 8003654:	2b80      	cmp	r3, #128	; 0x80
 8003656:	d115      	bne.n	8003684 <HAL_ADC_IRQHandler+0x10c>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2280      	movs	r2, #128	; 0x80
 8003660:	4013      	ands	r3, r2
 8003662:	2b80      	cmp	r3, #128	; 0x80
 8003664:	d10e      	bne.n	8003684 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366a:	2280      	movs	r2, #128	; 0x80
 800366c:	0252      	lsls	r2, r2, #9
 800366e:	431a      	orrs	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	0018      	movs	r0, r3
 8003678:	f000 f846 	bl	8003708 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2280      	movs	r2, #128	; 0x80
 8003682:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2210      	movs	r2, #16
 800368c:	4013      	ands	r3, r2
 800368e:	2b10      	cmp	r3, #16
 8003690:	d123      	bne.n	80036da <HAL_ADC_IRQHandler+0x162>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	2210      	movs	r2, #16
 800369a:	4013      	ands	r3, r2
 800369c:	2b10      	cmp	r3, #16
 800369e:	d11c      	bne.n	80036da <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d006      	beq.n	80036b6 <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	2201      	movs	r2, #1
 80036b0:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d10d      	bne.n	80036d2 <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ba:	2202      	movs	r2, #2
 80036bc:	431a      	orrs	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2210      	movs	r2, #16
 80036c8:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	0018      	movs	r0, r3
 80036ce:	f000 f823 	bl	8003718 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2210      	movs	r2, #16
 80036d8:	601a      	str	r2, [r3, #0]
  }

}
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	46bd      	mov	sp, r7
 80036de:	b002      	add	sp, #8
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	fffffefe 	.word	0xfffffefe

080036e8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80036f0:	46c0      	nop			; (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b002      	add	sp, #8
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003700:	46c0      	nop			; (mov r8, r8)
 8003702:	46bd      	mov	sp, r7
 8003704:	b002      	add	sp, #8
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8003710:	46c0      	nop			; (mov r8, r8)
 8003712:	46bd      	mov	sp, r7
 8003714:	b002      	add	sp, #8
 8003716:	bd80      	pop	{r7, pc}

08003718 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003720:	46c0      	nop			; (mov r8, r8)
 8003722:	46bd      	mov	sp, r7
 8003724:	b002      	add	sp, #8
 8003726:	bd80      	pop	{r7, pc}

08003728 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003732:	230f      	movs	r3, #15
 8003734:	18fb      	adds	r3, r7, r3
 8003736:	2200      	movs	r2, #0
 8003738:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800373a:	2300      	movs	r3, #0
 800373c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003742:	2380      	movs	r3, #128	; 0x80
 8003744:	055b      	lsls	r3, r3, #21
 8003746:	429a      	cmp	r2, r3
 8003748:	d011      	beq.n	800376e <HAL_ADC_ConfigChannel+0x46>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374e:	2b01      	cmp	r3, #1
 8003750:	d00d      	beq.n	800376e <HAL_ADC_ConfigChannel+0x46>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003756:	2b02      	cmp	r3, #2
 8003758:	d009      	beq.n	800376e <HAL_ADC_ConfigChannel+0x46>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375e:	2b03      	cmp	r3, #3
 8003760:	d005      	beq.n	800376e <HAL_ADC_ConfigChannel+0x46>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003766:	2b04      	cmp	r3, #4
 8003768:	d001      	beq.n	800376e <HAL_ADC_ConfigChannel+0x46>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2234      	movs	r2, #52	; 0x34
 8003772:	5c9b      	ldrb	r3, [r3, r2]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <HAL_ADC_ConfigChannel+0x54>
 8003778:	2302      	movs	r3, #2
 800377a:	e0d0      	b.n	800391e <HAL_ADC_ConfigChannel+0x1f6>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2234      	movs	r2, #52	; 0x34
 8003780:	2101      	movs	r1, #1
 8003782:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	2204      	movs	r2, #4
 800378c:	4013      	ands	r3, r2
 800378e:	d000      	beq.n	8003792 <HAL_ADC_ConfigChannel+0x6a>
 8003790:	e0b4      	b.n	80038fc <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	4a64      	ldr	r2, [pc, #400]	; (8003928 <HAL_ADC_ConfigChannel+0x200>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d100      	bne.n	800379e <HAL_ADC_ConfigChannel+0x76>
 800379c:	e082      	b.n	80038a4 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2201      	movs	r2, #1
 80037aa:	409a      	lsls	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b8:	2380      	movs	r3, #128	; 0x80
 80037ba:	055b      	lsls	r3, r3, #21
 80037bc:	429a      	cmp	r2, r3
 80037be:	d037      	beq.n	8003830 <HAL_ADC_ConfigChannel+0x108>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d033      	beq.n	8003830 <HAL_ADC_ConfigChannel+0x108>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d02f      	beq.n	8003830 <HAL_ADC_ConfigChannel+0x108>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d4:	2b03      	cmp	r3, #3
 80037d6:	d02b      	beq.n	8003830 <HAL_ADC_ConfigChannel+0x108>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d027      	beq.n	8003830 <HAL_ADC_ConfigChannel+0x108>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e4:	2b05      	cmp	r3, #5
 80037e6:	d023      	beq.n	8003830 <HAL_ADC_ConfigChannel+0x108>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ec:	2b06      	cmp	r3, #6
 80037ee:	d01f      	beq.n	8003830 <HAL_ADC_ConfigChannel+0x108>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f4:	2b07      	cmp	r3, #7
 80037f6:	d01b      	beq.n	8003830 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	2107      	movs	r1, #7
 8003804:	400b      	ands	r3, r1
 8003806:	429a      	cmp	r2, r3
 8003808:	d012      	beq.n	8003830 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	695a      	ldr	r2, [r3, #20]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2107      	movs	r1, #7
 8003816:	438a      	bics	r2, r1
 8003818:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6959      	ldr	r1, [r3, #20]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	2207      	movs	r2, #7
 8003826:	401a      	ands	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2b10      	cmp	r3, #16
 8003836:	d007      	beq.n	8003848 <HAL_ADC_ConfigChannel+0x120>
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2b11      	cmp	r3, #17
 800383e:	d003      	beq.n	8003848 <HAL_ADC_ConfigChannel+0x120>
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2b12      	cmp	r3, #18
 8003846:	d163      	bne.n	8003910 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003848:	4b38      	ldr	r3, [pc, #224]	; (800392c <HAL_ADC_ConfigChannel+0x204>)
 800384a:	6819      	ldr	r1, [r3, #0]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2b10      	cmp	r3, #16
 8003852:	d009      	beq.n	8003868 <HAL_ADC_ConfigChannel+0x140>
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2b11      	cmp	r3, #17
 800385a:	d102      	bne.n	8003862 <HAL_ADC_ConfigChannel+0x13a>
 800385c:	2380      	movs	r3, #128	; 0x80
 800385e:	03db      	lsls	r3, r3, #15
 8003860:	e004      	b.n	800386c <HAL_ADC_ConfigChannel+0x144>
 8003862:	2380      	movs	r3, #128	; 0x80
 8003864:	045b      	lsls	r3, r3, #17
 8003866:	e001      	b.n	800386c <HAL_ADC_ConfigChannel+0x144>
 8003868:	2380      	movs	r3, #128	; 0x80
 800386a:	041b      	lsls	r3, r3, #16
 800386c:	4a2f      	ldr	r2, [pc, #188]	; (800392c <HAL_ADC_ConfigChannel+0x204>)
 800386e:	430b      	orrs	r3, r1
 8003870:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b10      	cmp	r3, #16
 8003878:	d14a      	bne.n	8003910 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800387a:	4b2d      	ldr	r3, [pc, #180]	; (8003930 <HAL_ADC_ConfigChannel+0x208>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	492d      	ldr	r1, [pc, #180]	; (8003934 <HAL_ADC_ConfigChannel+0x20c>)
 8003880:	0018      	movs	r0, r3
 8003882:	f7fc fc41 	bl	8000108 <__udivsi3>
 8003886:	0003      	movs	r3, r0
 8003888:	001a      	movs	r2, r3
 800388a:	0013      	movs	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	189b      	adds	r3, r3, r2
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003894:	e002      	b.n	800389c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	3b01      	subs	r3, #1
 800389a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1f9      	bne.n	8003896 <HAL_ADC_ConfigChannel+0x16e>
 80038a2:	e035      	b.n	8003910 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2101      	movs	r1, #1
 80038b0:	4099      	lsls	r1, r3
 80038b2:	000b      	movs	r3, r1
 80038b4:	43d9      	mvns	r1, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	400a      	ands	r2, r1
 80038bc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b10      	cmp	r3, #16
 80038c4:	d007      	beq.n	80038d6 <HAL_ADC_ConfigChannel+0x1ae>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2b11      	cmp	r3, #17
 80038cc:	d003      	beq.n	80038d6 <HAL_ADC_ConfigChannel+0x1ae>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2b12      	cmp	r3, #18
 80038d4:	d11c      	bne.n	8003910 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80038d6:	4b15      	ldr	r3, [pc, #84]	; (800392c <HAL_ADC_ConfigChannel+0x204>)
 80038d8:	6819      	ldr	r1, [r3, #0]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b10      	cmp	r3, #16
 80038e0:	d007      	beq.n	80038f2 <HAL_ADC_ConfigChannel+0x1ca>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b11      	cmp	r3, #17
 80038e8:	d101      	bne.n	80038ee <HAL_ADC_ConfigChannel+0x1c6>
 80038ea:	4b13      	ldr	r3, [pc, #76]	; (8003938 <HAL_ADC_ConfigChannel+0x210>)
 80038ec:	e002      	b.n	80038f4 <HAL_ADC_ConfigChannel+0x1cc>
 80038ee:	4b13      	ldr	r3, [pc, #76]	; (800393c <HAL_ADC_ConfigChannel+0x214>)
 80038f0:	e000      	b.n	80038f4 <HAL_ADC_ConfigChannel+0x1cc>
 80038f2:	4b13      	ldr	r3, [pc, #76]	; (8003940 <HAL_ADC_ConfigChannel+0x218>)
 80038f4:	4a0d      	ldr	r2, [pc, #52]	; (800392c <HAL_ADC_ConfigChannel+0x204>)
 80038f6:	400b      	ands	r3, r1
 80038f8:	6013      	str	r3, [r2, #0]
 80038fa:	e009      	b.n	8003910 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003900:	2220      	movs	r2, #32
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003908:	230f      	movs	r3, #15
 800390a:	18fb      	adds	r3, r7, r3
 800390c:	2201      	movs	r2, #1
 800390e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2234      	movs	r2, #52	; 0x34
 8003914:	2100      	movs	r1, #0
 8003916:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003918:	230f      	movs	r3, #15
 800391a:	18fb      	adds	r3, r7, r3
 800391c:	781b      	ldrb	r3, [r3, #0]
}
 800391e:	0018      	movs	r0, r3
 8003920:	46bd      	mov	sp, r7
 8003922:	b004      	add	sp, #16
 8003924:	bd80      	pop	{r7, pc}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	00001001 	.word	0x00001001
 800392c:	40012708 	.word	0x40012708
 8003930:	20000000 	.word	0x20000000
 8003934:	000f4240 	.word	0x000f4240
 8003938:	ffbfffff 	.word	0xffbfffff
 800393c:	feffffff 	.word	0xfeffffff
 8003940:	ff7fffff 	.word	0xff7fffff

08003944 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800394c:	2300      	movs	r3, #0
 800394e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003950:	2300      	movs	r3, #0
 8003952:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	2203      	movs	r2, #3
 800395c:	4013      	ands	r3, r2
 800395e:	2b01      	cmp	r3, #1
 8003960:	d112      	bne.n	8003988 <ADC_Enable+0x44>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2201      	movs	r2, #1
 800396a:	4013      	ands	r3, r2
 800396c:	2b01      	cmp	r3, #1
 800396e:	d009      	beq.n	8003984 <ADC_Enable+0x40>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68da      	ldr	r2, [r3, #12]
 8003976:	2380      	movs	r3, #128	; 0x80
 8003978:	021b      	lsls	r3, r3, #8
 800397a:	401a      	ands	r2, r3
 800397c:	2380      	movs	r3, #128	; 0x80
 800397e:	021b      	lsls	r3, r3, #8
 8003980:	429a      	cmp	r2, r3
 8003982:	d101      	bne.n	8003988 <ADC_Enable+0x44>
 8003984:	2301      	movs	r3, #1
 8003986:	e000      	b.n	800398a <ADC_Enable+0x46>
 8003988:	2300      	movs	r3, #0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d152      	bne.n	8003a34 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	4a2a      	ldr	r2, [pc, #168]	; (8003a40 <ADC_Enable+0xfc>)
 8003996:	4013      	ands	r3, r2
 8003998:	d00d      	beq.n	80039b6 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399e:	2210      	movs	r2, #16
 80039a0:	431a      	orrs	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039aa:	2201      	movs	r2, #1
 80039ac:	431a      	orrs	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e03f      	b.n	8003a36 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2101      	movs	r1, #1
 80039c2:	430a      	orrs	r2, r1
 80039c4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80039c6:	4b1f      	ldr	r3, [pc, #124]	; (8003a44 <ADC_Enable+0x100>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	491f      	ldr	r1, [pc, #124]	; (8003a48 <ADC_Enable+0x104>)
 80039cc:	0018      	movs	r0, r3
 80039ce:	f7fc fb9b 	bl	8000108 <__udivsi3>
 80039d2:	0003      	movs	r3, r0
 80039d4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80039d6:	e002      	b.n	80039de <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	3b01      	subs	r3, #1
 80039dc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1f9      	bne.n	80039d8 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80039e4:	f7ff fac2 	bl	8002f6c <HAL_GetTick>
 80039e8:	0003      	movs	r3, r0
 80039ea:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80039ec:	e01b      	b.n	8003a26 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80039ee:	f7ff fabd 	bl	8002f6c <HAL_GetTick>
 80039f2:	0002      	movs	r2, r0
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d914      	bls.n	8003a26 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2201      	movs	r2, #1
 8003a04:	4013      	ands	r3, r2
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d00d      	beq.n	8003a26 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0e:	2210      	movs	r2, #16
 8003a10:	431a      	orrs	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e007      	b.n	8003a36 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	4013      	ands	r3, r2
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d1dc      	bne.n	80039ee <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	0018      	movs	r0, r3
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	b004      	add	sp, #16
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	46c0      	nop			; (mov r8, r8)
 8003a40:	80000017 	.word	0x80000017
 8003a44:	20000000 	.word	0x20000000
 8003a48:	000f4240 	.word	0x000f4240

08003a4c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	2203      	movs	r2, #3
 8003a60:	4013      	ands	r3, r2
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d112      	bne.n	8003a8c <ADC_Disable+0x40>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	4013      	ands	r3, r2
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d009      	beq.n	8003a88 <ADC_Disable+0x3c>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68da      	ldr	r2, [r3, #12]
 8003a7a:	2380      	movs	r3, #128	; 0x80
 8003a7c:	021b      	lsls	r3, r3, #8
 8003a7e:	401a      	ands	r2, r3
 8003a80:	2380      	movs	r3, #128	; 0x80
 8003a82:	021b      	lsls	r3, r3, #8
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d101      	bne.n	8003a8c <ADC_Disable+0x40>
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e000      	b.n	8003a8e <ADC_Disable+0x42>
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d048      	beq.n	8003b24 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	2205      	movs	r2, #5
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d110      	bne.n	8003ac2 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2102      	movs	r1, #2
 8003aac:	430a      	orrs	r2, r1
 8003aae:	609a      	str	r2, [r3, #8]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2203      	movs	r2, #3
 8003ab6:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ab8:	f7ff fa58 	bl	8002f6c <HAL_GetTick>
 8003abc:	0003      	movs	r3, r0
 8003abe:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003ac0:	e029      	b.n	8003b16 <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac6:	2210      	movs	r2, #16
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e023      	b.n	8003b26 <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ade:	f7ff fa45 	bl	8002f6c <HAL_GetTick>
 8003ae2:	0002      	movs	r2, r0
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d914      	bls.n	8003b16 <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	2201      	movs	r2, #1
 8003af4:	4013      	ands	r3, r2
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d10d      	bne.n	8003b16 <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afe:	2210      	movs	r2, #16
 8003b00:	431a      	orrs	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e007      	b.n	8003b26 <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	4013      	ands	r3, r2
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d0dc      	beq.n	8003ade <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	0018      	movs	r0, r3
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	b004      	add	sp, #16
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b084      	sub	sp, #16
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	2204      	movs	r2, #4
 8003b42:	4013      	ands	r3, r2
 8003b44:	d03a      	beq.n	8003bbc <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	2204      	movs	r2, #4
 8003b4e:	4013      	ands	r3, r2
 8003b50:	2b04      	cmp	r3, #4
 8003b52:	d10d      	bne.n	8003b70 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003b5e:	d107      	bne.n	8003b70 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689a      	ldr	r2, [r3, #8]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2110      	movs	r1, #16
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b70:	f7ff f9fc 	bl	8002f6c <HAL_GetTick>
 8003b74:	0003      	movs	r3, r0
 8003b76:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003b78:	e01a      	b.n	8003bb0 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003b7a:	f7ff f9f7 	bl	8002f6c <HAL_GetTick>
 8003b7e:	0002      	movs	r2, r0
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d913      	bls.n	8003bb0 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	2204      	movs	r2, #4
 8003b90:	4013      	ands	r3, r2
 8003b92:	d00d      	beq.n	8003bb0 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b98:	2210      	movs	r2, #16
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e006      	b.n	8003bbe <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	2204      	movs	r2, #4
 8003bb8:	4013      	ands	r3, r2
 8003bba:	d1de      	bne.n	8003b7a <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	b004      	add	sp, #16
 8003bc4:	bd80      	pop	{r7, pc}
	...

08003bc8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bda:	2250      	movs	r2, #80	; 0x50
 8003bdc:	4013      	ands	r3, r2
 8003bde:	d140      	bne.n	8003c62 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be4:	2280      	movs	r2, #128	; 0x80
 8003be6:	0092      	lsls	r2, r2, #2
 8003be8:	431a      	orrs	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	23c0      	movs	r3, #192	; 0xc0
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	d12d      	bne.n	8003c58 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d129      	bne.n	8003c58 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2208      	movs	r2, #8
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d122      	bne.n	8003c58 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	2204      	movs	r2, #4
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	d110      	bne.n	8003c40 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	210c      	movs	r1, #12
 8003c2a:	438a      	bics	r2, r1
 8003c2c:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c32:	4a11      	ldr	r2, [pc, #68]	; (8003c78 <ADC_DMAConvCplt+0xb0>)
 8003c34:	4013      	ands	r3, r2
 8003c36:	2201      	movs	r2, #1
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	639a      	str	r2, [r3, #56]	; 0x38
 8003c3e:	e00b      	b.n	8003c58 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c44:	2220      	movs	r2, #32
 8003c46:	431a      	orrs	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c50:	2201      	movs	r2, #1
 8003c52:	431a      	orrs	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	f7ff fd44 	bl	80036e8 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8003c60:	e005      	b.n	8003c6e <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	0010      	movs	r0, r2
 8003c6c:	4798      	blx	r3
}
 8003c6e:	46c0      	nop			; (mov r8, r8)
 8003c70:	46bd      	mov	sp, r7
 8003c72:	b004      	add	sp, #16
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	46c0      	nop			; (mov r8, r8)
 8003c78:	fffffefe 	.word	0xfffffefe

08003c7c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	0018      	movs	r0, r3
 8003c8e:	f7ff fd33 	bl	80036f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c92:	46c0      	nop			; (mov r8, r8)
 8003c94:	46bd      	mov	sp, r7
 8003c96:	b004      	add	sp, #16
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b084      	sub	sp, #16
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cac:	2240      	movs	r2, #64	; 0x40
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb8:	2204      	movs	r2, #4
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	f7ff fd28 	bl	8003718 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cc8:	46c0      	nop			; (mov r8, r8)
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	b004      	add	sp, #16
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	0002      	movs	r2, r0
 8003cd8:	1dfb      	adds	r3, r7, #7
 8003cda:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003cdc:	1dfb      	adds	r3, r7, #7
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	2b7f      	cmp	r3, #127	; 0x7f
 8003ce2:	d809      	bhi.n	8003cf8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ce4:	1dfb      	adds	r3, r7, #7
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	001a      	movs	r2, r3
 8003cea:	231f      	movs	r3, #31
 8003cec:	401a      	ands	r2, r3
 8003cee:	4b04      	ldr	r3, [pc, #16]	; (8003d00 <__NVIC_EnableIRQ+0x30>)
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	4091      	lsls	r1, r2
 8003cf4:	000a      	movs	r2, r1
 8003cf6:	601a      	str	r2, [r3, #0]
  }
}
 8003cf8:	46c0      	nop			; (mov r8, r8)
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	b002      	add	sp, #8
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	e000e100 	.word	0xe000e100

08003d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d04:	b590      	push	{r4, r7, lr}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	0002      	movs	r2, r0
 8003d0c:	6039      	str	r1, [r7, #0]
 8003d0e:	1dfb      	adds	r3, r7, #7
 8003d10:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003d12:	1dfb      	adds	r3, r7, #7
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2b7f      	cmp	r3, #127	; 0x7f
 8003d18:	d828      	bhi.n	8003d6c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d1a:	4a2f      	ldr	r2, [pc, #188]	; (8003dd8 <__NVIC_SetPriority+0xd4>)
 8003d1c:	1dfb      	adds	r3, r7, #7
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	b25b      	sxtb	r3, r3
 8003d22:	089b      	lsrs	r3, r3, #2
 8003d24:	33c0      	adds	r3, #192	; 0xc0
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	589b      	ldr	r3, [r3, r2]
 8003d2a:	1dfa      	adds	r2, r7, #7
 8003d2c:	7812      	ldrb	r2, [r2, #0]
 8003d2e:	0011      	movs	r1, r2
 8003d30:	2203      	movs	r2, #3
 8003d32:	400a      	ands	r2, r1
 8003d34:	00d2      	lsls	r2, r2, #3
 8003d36:	21ff      	movs	r1, #255	; 0xff
 8003d38:	4091      	lsls	r1, r2
 8003d3a:	000a      	movs	r2, r1
 8003d3c:	43d2      	mvns	r2, r2
 8003d3e:	401a      	ands	r2, r3
 8003d40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	019b      	lsls	r3, r3, #6
 8003d46:	22ff      	movs	r2, #255	; 0xff
 8003d48:	401a      	ands	r2, r3
 8003d4a:	1dfb      	adds	r3, r7, #7
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	0018      	movs	r0, r3
 8003d50:	2303      	movs	r3, #3
 8003d52:	4003      	ands	r3, r0
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d58:	481f      	ldr	r0, [pc, #124]	; (8003dd8 <__NVIC_SetPriority+0xd4>)
 8003d5a:	1dfb      	adds	r3, r7, #7
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	b25b      	sxtb	r3, r3
 8003d60:	089b      	lsrs	r3, r3, #2
 8003d62:	430a      	orrs	r2, r1
 8003d64:	33c0      	adds	r3, #192	; 0xc0
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003d6a:	e031      	b.n	8003dd0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d6c:	4a1b      	ldr	r2, [pc, #108]	; (8003ddc <__NVIC_SetPriority+0xd8>)
 8003d6e:	1dfb      	adds	r3, r7, #7
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	0019      	movs	r1, r3
 8003d74:	230f      	movs	r3, #15
 8003d76:	400b      	ands	r3, r1
 8003d78:	3b08      	subs	r3, #8
 8003d7a:	089b      	lsrs	r3, r3, #2
 8003d7c:	3306      	adds	r3, #6
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	18d3      	adds	r3, r2, r3
 8003d82:	3304      	adds	r3, #4
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	1dfa      	adds	r2, r7, #7
 8003d88:	7812      	ldrb	r2, [r2, #0]
 8003d8a:	0011      	movs	r1, r2
 8003d8c:	2203      	movs	r2, #3
 8003d8e:	400a      	ands	r2, r1
 8003d90:	00d2      	lsls	r2, r2, #3
 8003d92:	21ff      	movs	r1, #255	; 0xff
 8003d94:	4091      	lsls	r1, r2
 8003d96:	000a      	movs	r2, r1
 8003d98:	43d2      	mvns	r2, r2
 8003d9a:	401a      	ands	r2, r3
 8003d9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	019b      	lsls	r3, r3, #6
 8003da2:	22ff      	movs	r2, #255	; 0xff
 8003da4:	401a      	ands	r2, r3
 8003da6:	1dfb      	adds	r3, r7, #7
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	0018      	movs	r0, r3
 8003dac:	2303      	movs	r3, #3
 8003dae:	4003      	ands	r3, r0
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003db4:	4809      	ldr	r0, [pc, #36]	; (8003ddc <__NVIC_SetPriority+0xd8>)
 8003db6:	1dfb      	adds	r3, r7, #7
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	001c      	movs	r4, r3
 8003dbc:	230f      	movs	r3, #15
 8003dbe:	4023      	ands	r3, r4
 8003dc0:	3b08      	subs	r3, #8
 8003dc2:	089b      	lsrs	r3, r3, #2
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	3306      	adds	r3, #6
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	18c3      	adds	r3, r0, r3
 8003dcc:	3304      	adds	r3, #4
 8003dce:	601a      	str	r2, [r3, #0]
}
 8003dd0:	46c0      	nop			; (mov r8, r8)
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	b003      	add	sp, #12
 8003dd6:	bd90      	pop	{r4, r7, pc}
 8003dd8:	e000e100 	.word	0xe000e100
 8003ddc:	e000ed00 	.word	0xe000ed00

08003de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	1e5a      	subs	r2, r3, #1
 8003dec:	2380      	movs	r3, #128	; 0x80
 8003dee:	045b      	lsls	r3, r3, #17
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d301      	bcc.n	8003df8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003df4:	2301      	movs	r3, #1
 8003df6:	e010      	b.n	8003e1a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003df8:	4b0a      	ldr	r3, [pc, #40]	; (8003e24 <SysTick_Config+0x44>)
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	3a01      	subs	r2, #1
 8003dfe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e00:	2301      	movs	r3, #1
 8003e02:	425b      	negs	r3, r3
 8003e04:	2103      	movs	r1, #3
 8003e06:	0018      	movs	r0, r3
 8003e08:	f7ff ff7c 	bl	8003d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e0c:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <SysTick_Config+0x44>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e12:	4b04      	ldr	r3, [pc, #16]	; (8003e24 <SysTick_Config+0x44>)
 8003e14:	2207      	movs	r2, #7
 8003e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	b002      	add	sp, #8
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	46c0      	nop			; (mov r8, r8)
 8003e24:	e000e010 	.word	0xe000e010

08003e28 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60b9      	str	r1, [r7, #8]
 8003e30:	607a      	str	r2, [r7, #4]
 8003e32:	210f      	movs	r1, #15
 8003e34:	187b      	adds	r3, r7, r1
 8003e36:	1c02      	adds	r2, r0, #0
 8003e38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	187b      	adds	r3, r7, r1
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	b25b      	sxtb	r3, r3
 8003e42:	0011      	movs	r1, r2
 8003e44:	0018      	movs	r0, r3
 8003e46:	f7ff ff5d 	bl	8003d04 <__NVIC_SetPriority>
}
 8003e4a:	46c0      	nop			; (mov r8, r8)
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	b004      	add	sp, #16
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b082      	sub	sp, #8
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	0002      	movs	r2, r0
 8003e5a:	1dfb      	adds	r3, r7, #7
 8003e5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e5e:	1dfb      	adds	r3, r7, #7
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	b25b      	sxtb	r3, r3
 8003e64:	0018      	movs	r0, r3
 8003e66:	f7ff ff33 	bl	8003cd0 <__NVIC_EnableIRQ>
}
 8003e6a:	46c0      	nop			; (mov r8, r8)
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	b002      	add	sp, #8
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b082      	sub	sp, #8
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	f7ff ffaf 	bl	8003de0 <SysTick_Config>
 8003e82:	0003      	movs	r3, r0
}
 8003e84:	0018      	movs	r0, r3
 8003e86:	46bd      	mov	sp, r7
 8003e88:	b002      	add	sp, #8
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d101      	bne.n	8003ea2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e036      	b.n	8003f10 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2221      	movs	r2, #33	; 0x21
 8003ea6:	2102      	movs	r1, #2
 8003ea8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	4a18      	ldr	r2, [pc, #96]	; (8003f18 <HAL_DMA_Init+0x8c>)
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003ec2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ece:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	f000 f97e 	bl	80041f4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2221      	movs	r2, #33	; 0x21
 8003f02:	2101      	movs	r1, #1
 8003f04:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}  
 8003f10:	0018      	movs	r0, r3
 8003f12:	46bd      	mov	sp, r7
 8003f14:	b004      	add	sp, #16
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	ffffc00f 	.word	0xffffc00f

08003f1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
 8003f28:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003f2a:	2317      	movs	r3, #23
 8003f2c:	18fb      	adds	r3, r7, r3
 8003f2e:	2200      	movs	r2, #0
 8003f30:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2220      	movs	r2, #32
 8003f36:	5c9b      	ldrb	r3, [r3, r2]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d101      	bne.n	8003f40 <HAL_DMA_Start_IT+0x24>
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	e04f      	b.n	8003fe0 <HAL_DMA_Start_IT+0xc4>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2220      	movs	r2, #32
 8003f44:	2101      	movs	r1, #1
 8003f46:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2221      	movs	r2, #33	; 0x21
 8003f4c:	5c9b      	ldrb	r3, [r3, r2]
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d13a      	bne.n	8003fca <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2221      	movs	r2, #33	; 0x21
 8003f58:	2102      	movs	r1, #2
 8003f5a:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2101      	movs	r1, #1
 8003f6e:	438a      	bics	r2, r1
 8003f70:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	68b9      	ldr	r1, [r7, #8]
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f000 f90f 	bl	800419c <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d008      	beq.n	8003f98 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	210e      	movs	r1, #14
 8003f92:	430a      	orrs	r2, r1
 8003f94:	601a      	str	r2, [r3, #0]
 8003f96:	e00f      	b.n	8003fb8 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	210a      	movs	r1, #10
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2104      	movs	r1, #4
 8003fb4:	438a      	bics	r2, r1
 8003fb6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	e007      	b.n	8003fda <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	2100      	movs	r1, #0
 8003fd0:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003fd2:	2317      	movs	r3, #23
 8003fd4:	18fb      	adds	r3, r7, r3
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8003fda:	2317      	movs	r3, #23
 8003fdc:	18fb      	adds	r3, r7, r3
 8003fde:	781b      	ldrb	r3, [r3, #0]
} 
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	b006      	add	sp, #24
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2221      	movs	r2, #33	; 0x21
 8003ff4:	5c9b      	ldrb	r3, [r3, r2]
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d008      	beq.n	800400e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2204      	movs	r2, #4
 8004000:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2220      	movs	r2, #32
 8004006:	2100      	movs	r1, #0
 8004008:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e020      	b.n	8004050 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	210e      	movs	r1, #14
 800401a:	438a      	bics	r2, r1
 800401c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2101      	movs	r1, #1
 800402a:	438a      	bics	r2, r1
 800402c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004036:	2101      	movs	r1, #1
 8004038:	4091      	lsls	r1, r2
 800403a:	000a      	movs	r2, r1
 800403c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2221      	movs	r2, #33	; 0x21
 8004042:	2101      	movs	r1, #1
 8004044:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2220      	movs	r2, #32
 800404a:	2100      	movs	r1, #0
 800404c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	0018      	movs	r0, r3
 8004052:	46bd      	mov	sp, r7
 8004054:	b002      	add	sp, #8
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004074:	2204      	movs	r2, #4
 8004076:	409a      	lsls	r2, r3
 8004078:	0013      	movs	r3, r2
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	4013      	ands	r3, r2
 800407e:	d024      	beq.n	80040ca <HAL_DMA_IRQHandler+0x72>
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	2204      	movs	r2, #4
 8004084:	4013      	ands	r3, r2
 8004086:	d020      	beq.n	80040ca <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2220      	movs	r2, #32
 8004090:	4013      	ands	r3, r2
 8004092:	d107      	bne.n	80040a4 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2104      	movs	r1, #4
 80040a0:	438a      	bics	r2, r1
 80040a2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ac:	2104      	movs	r1, #4
 80040ae:	4091      	lsls	r1, r2
 80040b0:	000a      	movs	r2, r1
 80040b2:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d100      	bne.n	80040be <HAL_DMA_IRQHandler+0x66>
 80040bc:	e06a      	b.n	8004194 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	0010      	movs	r0, r2
 80040c6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80040c8:	e064      	b.n	8004194 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	2202      	movs	r2, #2
 80040d0:	409a      	lsls	r2, r3
 80040d2:	0013      	movs	r3, r2
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	4013      	ands	r3, r2
 80040d8:	d02b      	beq.n	8004132 <HAL_DMA_IRQHandler+0xda>
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	2202      	movs	r2, #2
 80040de:	4013      	ands	r3, r2
 80040e0:	d027      	beq.n	8004132 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2220      	movs	r2, #32
 80040ea:	4013      	ands	r3, r2
 80040ec:	d10b      	bne.n	8004106 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	210a      	movs	r1, #10
 80040fa:	438a      	bics	r2, r1
 80040fc:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2221      	movs	r2, #33	; 0x21
 8004102:	2101      	movs	r1, #1
 8004104:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410e:	2102      	movs	r1, #2
 8004110:	4091      	lsls	r1, r2
 8004112:	000a      	movs	r2, r1
 8004114:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2220      	movs	r2, #32
 800411a:	2100      	movs	r1, #0
 800411c:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004122:	2b00      	cmp	r3, #0
 8004124:	d036      	beq.n	8004194 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	0010      	movs	r0, r2
 800412e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004130:	e030      	b.n	8004194 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	2208      	movs	r2, #8
 8004138:	409a      	lsls	r2, r3
 800413a:	0013      	movs	r3, r2
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	4013      	ands	r3, r2
 8004140:	d028      	beq.n	8004194 <HAL_DMA_IRQHandler+0x13c>
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2208      	movs	r2, #8
 8004146:	4013      	ands	r3, r2
 8004148:	d024      	beq.n	8004194 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	210e      	movs	r1, #14
 8004156:	438a      	bics	r2, r1
 8004158:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004162:	2101      	movs	r1, #1
 8004164:	4091      	lsls	r1, r2
 8004166:	000a      	movs	r2, r1
 8004168:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2221      	movs	r2, #33	; 0x21
 8004174:	2101      	movs	r1, #1
 8004176:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2220      	movs	r2, #32
 800417c:	2100      	movs	r1, #0
 800417e:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	0010      	movs	r0, r2
 8004190:	4798      	blx	r3
    }
   }
}  
 8004192:	e7ff      	b.n	8004194 <HAL_DMA_IRQHandler+0x13c>
 8004194:	46c0      	nop			; (mov r8, r8)
 8004196:	46bd      	mov	sp, r7
 8004198:	b004      	add	sp, #16
 800419a:	bd80      	pop	{r7, pc}

0800419c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
 80041a8:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b2:	2101      	movs	r1, #1
 80041b4:	4091      	lsls	r1, r2
 80041b6:	000a      	movs	r2, r1
 80041b8:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2b10      	cmp	r3, #16
 80041c8:	d108      	bne.n	80041dc <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80041da:	e007      	b.n	80041ec <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	60da      	str	r2, [r3, #12]
}
 80041ec:	46c0      	nop			; (mov r8, r8)
 80041ee:	46bd      	mov	sp, r7
 80041f0:	b004      	add	sp, #16
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a08      	ldr	r2, [pc, #32]	; (8004224 <DMA_CalcBaseAndBitshift+0x30>)
 8004202:	4694      	mov	ip, r2
 8004204:	4463      	add	r3, ip
 8004206:	2114      	movs	r1, #20
 8004208:	0018      	movs	r0, r3
 800420a:	f7fb ff7d 	bl	8000108 <__udivsi3>
 800420e:	0003      	movs	r3, r0
 8004210:	009a      	lsls	r2, r3, #2
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a03      	ldr	r2, [pc, #12]	; (8004228 <DMA_CalcBaseAndBitshift+0x34>)
 800421a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800421c:	46c0      	nop			; (mov r8, r8)
 800421e:	46bd      	mov	sp, r7
 8004220:	b002      	add	sp, #8
 8004222:	bd80      	pop	{r7, pc}
 8004224:	bffdfff8 	.word	0xbffdfff8
 8004228:	40020000 	.word	0x40020000

0800422c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004236:	2300      	movs	r3, #0
 8004238:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800423a:	e14f      	b.n	80044dc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2101      	movs	r1, #1
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	4091      	lsls	r1, r2
 8004246:	000a      	movs	r2, r1
 8004248:	4013      	ands	r3, r2
 800424a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d100      	bne.n	8004254 <HAL_GPIO_Init+0x28>
 8004252:	e140      	b.n	80044d6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	2203      	movs	r2, #3
 800425a:	4013      	ands	r3, r2
 800425c:	2b01      	cmp	r3, #1
 800425e:	d005      	beq.n	800426c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2203      	movs	r2, #3
 8004266:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004268:	2b02      	cmp	r3, #2
 800426a:	d130      	bne.n	80042ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	2203      	movs	r2, #3
 8004278:	409a      	lsls	r2, r3
 800427a:	0013      	movs	r3, r2
 800427c:	43da      	mvns	r2, r3
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	4013      	ands	r3, r2
 8004282:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	68da      	ldr	r2, [r3, #12]
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	005b      	lsls	r3, r3, #1
 800428c:	409a      	lsls	r2, r3
 800428e:	0013      	movs	r3, r2
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	4313      	orrs	r3, r2
 8004294:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042a2:	2201      	movs	r2, #1
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	409a      	lsls	r2, r3
 80042a8:	0013      	movs	r3, r2
 80042aa:	43da      	mvns	r2, r3
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	4013      	ands	r3, r2
 80042b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	091b      	lsrs	r3, r3, #4
 80042b8:	2201      	movs	r2, #1
 80042ba:	401a      	ands	r2, r3
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	409a      	lsls	r2, r3
 80042c0:	0013      	movs	r3, r2
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2203      	movs	r2, #3
 80042d4:	4013      	ands	r3, r2
 80042d6:	2b03      	cmp	r3, #3
 80042d8:	d017      	beq.n	800430a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	2203      	movs	r2, #3
 80042e6:	409a      	lsls	r2, r3
 80042e8:	0013      	movs	r3, r2
 80042ea:	43da      	mvns	r2, r3
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	4013      	ands	r3, r2
 80042f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	689a      	ldr	r2, [r3, #8]
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	409a      	lsls	r2, r3
 80042fc:	0013      	movs	r3, r2
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	4313      	orrs	r3, r2
 8004302:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2203      	movs	r2, #3
 8004310:	4013      	ands	r3, r2
 8004312:	2b02      	cmp	r3, #2
 8004314:	d123      	bne.n	800435e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	08da      	lsrs	r2, r3, #3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	3208      	adds	r2, #8
 800431e:	0092      	lsls	r2, r2, #2
 8004320:	58d3      	ldr	r3, [r2, r3]
 8004322:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	2207      	movs	r2, #7
 8004328:	4013      	ands	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	220f      	movs	r2, #15
 800432e:	409a      	lsls	r2, r3
 8004330:	0013      	movs	r3, r2
 8004332:	43da      	mvns	r2, r3
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	4013      	ands	r3, r2
 8004338:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	691a      	ldr	r2, [r3, #16]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	2107      	movs	r1, #7
 8004342:	400b      	ands	r3, r1
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	409a      	lsls	r2, r3
 8004348:	0013      	movs	r3, r2
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	4313      	orrs	r3, r2
 800434e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	08da      	lsrs	r2, r3, #3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3208      	adds	r2, #8
 8004358:	0092      	lsls	r2, r2, #2
 800435a:	6939      	ldr	r1, [r7, #16]
 800435c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	2203      	movs	r2, #3
 800436a:	409a      	lsls	r2, r3
 800436c:	0013      	movs	r3, r2
 800436e:	43da      	mvns	r2, r3
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	4013      	ands	r3, r2
 8004374:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	2203      	movs	r2, #3
 800437c:	401a      	ands	r2, r3
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	409a      	lsls	r2, r3
 8004384:	0013      	movs	r3, r2
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	4313      	orrs	r3, r2
 800438a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	23c0      	movs	r3, #192	; 0xc0
 8004398:	029b      	lsls	r3, r3, #10
 800439a:	4013      	ands	r3, r2
 800439c:	d100      	bne.n	80043a0 <HAL_GPIO_Init+0x174>
 800439e:	e09a      	b.n	80044d6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043a0:	4b54      	ldr	r3, [pc, #336]	; (80044f4 <HAL_GPIO_Init+0x2c8>)
 80043a2:	699a      	ldr	r2, [r3, #24]
 80043a4:	4b53      	ldr	r3, [pc, #332]	; (80044f4 <HAL_GPIO_Init+0x2c8>)
 80043a6:	2101      	movs	r1, #1
 80043a8:	430a      	orrs	r2, r1
 80043aa:	619a      	str	r2, [r3, #24]
 80043ac:	4b51      	ldr	r3, [pc, #324]	; (80044f4 <HAL_GPIO_Init+0x2c8>)
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	2201      	movs	r2, #1
 80043b2:	4013      	ands	r3, r2
 80043b4:	60bb      	str	r3, [r7, #8]
 80043b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80043b8:	4a4f      	ldr	r2, [pc, #316]	; (80044f8 <HAL_GPIO_Init+0x2cc>)
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	089b      	lsrs	r3, r3, #2
 80043be:	3302      	adds	r3, #2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	589b      	ldr	r3, [r3, r2]
 80043c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2203      	movs	r2, #3
 80043ca:	4013      	ands	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	220f      	movs	r2, #15
 80043d0:	409a      	lsls	r2, r3
 80043d2:	0013      	movs	r3, r2
 80043d4:	43da      	mvns	r2, r3
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	4013      	ands	r3, r2
 80043da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	2390      	movs	r3, #144	; 0x90
 80043e0:	05db      	lsls	r3, r3, #23
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d013      	beq.n	800440e <HAL_GPIO_Init+0x1e2>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a44      	ldr	r2, [pc, #272]	; (80044fc <HAL_GPIO_Init+0x2d0>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d00d      	beq.n	800440a <HAL_GPIO_Init+0x1de>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a43      	ldr	r2, [pc, #268]	; (8004500 <HAL_GPIO_Init+0x2d4>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d007      	beq.n	8004406 <HAL_GPIO_Init+0x1da>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a42      	ldr	r2, [pc, #264]	; (8004504 <HAL_GPIO_Init+0x2d8>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d101      	bne.n	8004402 <HAL_GPIO_Init+0x1d6>
 80043fe:	2303      	movs	r3, #3
 8004400:	e006      	b.n	8004410 <HAL_GPIO_Init+0x1e4>
 8004402:	2305      	movs	r3, #5
 8004404:	e004      	b.n	8004410 <HAL_GPIO_Init+0x1e4>
 8004406:	2302      	movs	r3, #2
 8004408:	e002      	b.n	8004410 <HAL_GPIO_Init+0x1e4>
 800440a:	2301      	movs	r3, #1
 800440c:	e000      	b.n	8004410 <HAL_GPIO_Init+0x1e4>
 800440e:	2300      	movs	r3, #0
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	2103      	movs	r1, #3
 8004414:	400a      	ands	r2, r1
 8004416:	0092      	lsls	r2, r2, #2
 8004418:	4093      	lsls	r3, r2
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	4313      	orrs	r3, r2
 800441e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004420:	4935      	ldr	r1, [pc, #212]	; (80044f8 <HAL_GPIO_Init+0x2cc>)
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	089b      	lsrs	r3, r3, #2
 8004426:	3302      	adds	r3, #2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800442e:	4b36      	ldr	r3, [pc, #216]	; (8004508 <HAL_GPIO_Init+0x2dc>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	43da      	mvns	r2, r3
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	4013      	ands	r3, r2
 800443c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	2380      	movs	r3, #128	; 0x80
 8004444:	025b      	lsls	r3, r3, #9
 8004446:	4013      	ands	r3, r2
 8004448:	d003      	beq.n	8004452 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4313      	orrs	r3, r2
 8004450:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004452:	4b2d      	ldr	r3, [pc, #180]	; (8004508 <HAL_GPIO_Init+0x2dc>)
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004458:	4b2b      	ldr	r3, [pc, #172]	; (8004508 <HAL_GPIO_Init+0x2dc>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	43da      	mvns	r2, r3
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	4013      	ands	r3, r2
 8004466:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	2380      	movs	r3, #128	; 0x80
 800446e:	029b      	lsls	r3, r3, #10
 8004470:	4013      	ands	r3, r2
 8004472:	d003      	beq.n	800447c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	4313      	orrs	r3, r2
 800447a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800447c:	4b22      	ldr	r3, [pc, #136]	; (8004508 <HAL_GPIO_Init+0x2dc>)
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004482:	4b21      	ldr	r3, [pc, #132]	; (8004508 <HAL_GPIO_Init+0x2dc>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	43da      	mvns	r2, r3
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	4013      	ands	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	2380      	movs	r3, #128	; 0x80
 8004498:	035b      	lsls	r3, r3, #13
 800449a:	4013      	ands	r3, r2
 800449c:	d003      	beq.n	80044a6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80044a6:	4b18      	ldr	r3, [pc, #96]	; (8004508 <HAL_GPIO_Init+0x2dc>)
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80044ac:	4b16      	ldr	r3, [pc, #88]	; (8004508 <HAL_GPIO_Init+0x2dc>)
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	43da      	mvns	r2, r3
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	4013      	ands	r3, r2
 80044ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	2380      	movs	r3, #128	; 0x80
 80044c2:	039b      	lsls	r3, r3, #14
 80044c4:	4013      	ands	r3, r2
 80044c6:	d003      	beq.n	80044d0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80044d0:	4b0d      	ldr	r3, [pc, #52]	; (8004508 <HAL_GPIO_Init+0x2dc>)
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	3301      	adds	r3, #1
 80044da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	40da      	lsrs	r2, r3
 80044e4:	1e13      	subs	r3, r2, #0
 80044e6:	d000      	beq.n	80044ea <HAL_GPIO_Init+0x2be>
 80044e8:	e6a8      	b.n	800423c <HAL_GPIO_Init+0x10>
  } 
}
 80044ea:	46c0      	nop			; (mov r8, r8)
 80044ec:	46c0      	nop			; (mov r8, r8)
 80044ee:	46bd      	mov	sp, r7
 80044f0:	b006      	add	sp, #24
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	40021000 	.word	0x40021000
 80044f8:	40010000 	.word	0x40010000
 80044fc:	48000400 	.word	0x48000400
 8004500:	48000800 	.word	0x48000800
 8004504:	48000c00 	.word	0x48000c00
 8004508:	40010400 	.word	0x40010400

0800450c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	0008      	movs	r0, r1
 8004516:	0011      	movs	r1, r2
 8004518:	1cbb      	adds	r3, r7, #2
 800451a:	1c02      	adds	r2, r0, #0
 800451c:	801a      	strh	r2, [r3, #0]
 800451e:	1c7b      	adds	r3, r7, #1
 8004520:	1c0a      	adds	r2, r1, #0
 8004522:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004524:	1c7b      	adds	r3, r7, #1
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d004      	beq.n	8004536 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800452c:	1cbb      	adds	r3, r7, #2
 800452e:	881a      	ldrh	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004534:	e003      	b.n	800453e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004536:	1cbb      	adds	r3, r7, #2
 8004538:	881a      	ldrh	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800453e:	46c0      	nop			; (mov r8, r8)
 8004540:	46bd      	mov	sp, r7
 8004542:	b002      	add	sp, #8
 8004544:	bd80      	pop	{r7, pc}
	...

08004548 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b088      	sub	sp, #32
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e301      	b.n	8004b5e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2201      	movs	r2, #1
 8004560:	4013      	ands	r3, r2
 8004562:	d100      	bne.n	8004566 <HAL_RCC_OscConfig+0x1e>
 8004564:	e08d      	b.n	8004682 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004566:	4bc3      	ldr	r3, [pc, #780]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	220c      	movs	r2, #12
 800456c:	4013      	ands	r3, r2
 800456e:	2b04      	cmp	r3, #4
 8004570:	d00e      	beq.n	8004590 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004572:	4bc0      	ldr	r3, [pc, #768]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	220c      	movs	r2, #12
 8004578:	4013      	ands	r3, r2
 800457a:	2b08      	cmp	r3, #8
 800457c:	d116      	bne.n	80045ac <HAL_RCC_OscConfig+0x64>
 800457e:	4bbd      	ldr	r3, [pc, #756]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	2380      	movs	r3, #128	; 0x80
 8004584:	025b      	lsls	r3, r3, #9
 8004586:	401a      	ands	r2, r3
 8004588:	2380      	movs	r3, #128	; 0x80
 800458a:	025b      	lsls	r3, r3, #9
 800458c:	429a      	cmp	r2, r3
 800458e:	d10d      	bne.n	80045ac <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004590:	4bb8      	ldr	r3, [pc, #736]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	2380      	movs	r3, #128	; 0x80
 8004596:	029b      	lsls	r3, r3, #10
 8004598:	4013      	ands	r3, r2
 800459a:	d100      	bne.n	800459e <HAL_RCC_OscConfig+0x56>
 800459c:	e070      	b.n	8004680 <HAL_RCC_OscConfig+0x138>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d000      	beq.n	80045a8 <HAL_RCC_OscConfig+0x60>
 80045a6:	e06b      	b.n	8004680 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e2d8      	b.n	8004b5e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d107      	bne.n	80045c4 <HAL_RCC_OscConfig+0x7c>
 80045b4:	4baf      	ldr	r3, [pc, #700]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	4bae      	ldr	r3, [pc, #696]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 80045ba:	2180      	movs	r1, #128	; 0x80
 80045bc:	0249      	lsls	r1, r1, #9
 80045be:	430a      	orrs	r2, r1
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	e02f      	b.n	8004624 <HAL_RCC_OscConfig+0xdc>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10c      	bne.n	80045e6 <HAL_RCC_OscConfig+0x9e>
 80045cc:	4ba9      	ldr	r3, [pc, #676]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	4ba8      	ldr	r3, [pc, #672]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 80045d2:	49a9      	ldr	r1, [pc, #676]	; (8004878 <HAL_RCC_OscConfig+0x330>)
 80045d4:	400a      	ands	r2, r1
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	4ba6      	ldr	r3, [pc, #664]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	4ba5      	ldr	r3, [pc, #660]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 80045de:	49a7      	ldr	r1, [pc, #668]	; (800487c <HAL_RCC_OscConfig+0x334>)
 80045e0:	400a      	ands	r2, r1
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	e01e      	b.n	8004624 <HAL_RCC_OscConfig+0xdc>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2b05      	cmp	r3, #5
 80045ec:	d10e      	bne.n	800460c <HAL_RCC_OscConfig+0xc4>
 80045ee:	4ba1      	ldr	r3, [pc, #644]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	4ba0      	ldr	r3, [pc, #640]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 80045f4:	2180      	movs	r1, #128	; 0x80
 80045f6:	02c9      	lsls	r1, r1, #11
 80045f8:	430a      	orrs	r2, r1
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	4b9d      	ldr	r3, [pc, #628]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	4b9c      	ldr	r3, [pc, #624]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 8004602:	2180      	movs	r1, #128	; 0x80
 8004604:	0249      	lsls	r1, r1, #9
 8004606:	430a      	orrs	r2, r1
 8004608:	601a      	str	r2, [r3, #0]
 800460a:	e00b      	b.n	8004624 <HAL_RCC_OscConfig+0xdc>
 800460c:	4b99      	ldr	r3, [pc, #612]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	4b98      	ldr	r3, [pc, #608]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 8004612:	4999      	ldr	r1, [pc, #612]	; (8004878 <HAL_RCC_OscConfig+0x330>)
 8004614:	400a      	ands	r2, r1
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	4b96      	ldr	r3, [pc, #600]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	4b95      	ldr	r3, [pc, #596]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 800461e:	4997      	ldr	r1, [pc, #604]	; (800487c <HAL_RCC_OscConfig+0x334>)
 8004620:	400a      	ands	r2, r1
 8004622:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d014      	beq.n	8004656 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462c:	f7fe fc9e 	bl	8002f6c <HAL_GetTick>
 8004630:	0003      	movs	r3, r0
 8004632:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004634:	e008      	b.n	8004648 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004636:	f7fe fc99 	bl	8002f6c <HAL_GetTick>
 800463a:	0002      	movs	r2, r0
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b64      	cmp	r3, #100	; 0x64
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e28a      	b.n	8004b5e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004648:	4b8a      	ldr	r3, [pc, #552]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	2380      	movs	r3, #128	; 0x80
 800464e:	029b      	lsls	r3, r3, #10
 8004650:	4013      	ands	r3, r2
 8004652:	d0f0      	beq.n	8004636 <HAL_RCC_OscConfig+0xee>
 8004654:	e015      	b.n	8004682 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004656:	f7fe fc89 	bl	8002f6c <HAL_GetTick>
 800465a:	0003      	movs	r3, r0
 800465c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004660:	f7fe fc84 	bl	8002f6c <HAL_GetTick>
 8004664:	0002      	movs	r2, r0
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b64      	cmp	r3, #100	; 0x64
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e275      	b.n	8004b5e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004672:	4b80      	ldr	r3, [pc, #512]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	2380      	movs	r3, #128	; 0x80
 8004678:	029b      	lsls	r3, r3, #10
 800467a:	4013      	ands	r3, r2
 800467c:	d1f0      	bne.n	8004660 <HAL_RCC_OscConfig+0x118>
 800467e:	e000      	b.n	8004682 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004680:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2202      	movs	r2, #2
 8004688:	4013      	ands	r3, r2
 800468a:	d100      	bne.n	800468e <HAL_RCC_OscConfig+0x146>
 800468c:	e069      	b.n	8004762 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800468e:	4b79      	ldr	r3, [pc, #484]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	220c      	movs	r2, #12
 8004694:	4013      	ands	r3, r2
 8004696:	d00b      	beq.n	80046b0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004698:	4b76      	ldr	r3, [pc, #472]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	220c      	movs	r2, #12
 800469e:	4013      	ands	r3, r2
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	d11c      	bne.n	80046de <HAL_RCC_OscConfig+0x196>
 80046a4:	4b73      	ldr	r3, [pc, #460]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	2380      	movs	r3, #128	; 0x80
 80046aa:	025b      	lsls	r3, r3, #9
 80046ac:	4013      	ands	r3, r2
 80046ae:	d116      	bne.n	80046de <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046b0:	4b70      	ldr	r3, [pc, #448]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2202      	movs	r2, #2
 80046b6:	4013      	ands	r3, r2
 80046b8:	d005      	beq.n	80046c6 <HAL_RCC_OscConfig+0x17e>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d001      	beq.n	80046c6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e24b      	b.n	8004b5e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c6:	4b6b      	ldr	r3, [pc, #428]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	22f8      	movs	r2, #248	; 0xf8
 80046cc:	4393      	bics	r3, r2
 80046ce:	0019      	movs	r1, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	00da      	lsls	r2, r3, #3
 80046d6:	4b67      	ldr	r3, [pc, #412]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 80046d8:	430a      	orrs	r2, r1
 80046da:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046dc:	e041      	b.n	8004762 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d024      	beq.n	8004730 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046e6:	4b63      	ldr	r3, [pc, #396]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	4b62      	ldr	r3, [pc, #392]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 80046ec:	2101      	movs	r1, #1
 80046ee:	430a      	orrs	r2, r1
 80046f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f2:	f7fe fc3b 	bl	8002f6c <HAL_GetTick>
 80046f6:	0003      	movs	r3, r0
 80046f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046fc:	f7fe fc36 	bl	8002f6c <HAL_GetTick>
 8004700:	0002      	movs	r2, r0
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e227      	b.n	8004b5e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800470e:	4b59      	ldr	r3, [pc, #356]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2202      	movs	r2, #2
 8004714:	4013      	ands	r3, r2
 8004716:	d0f1      	beq.n	80046fc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004718:	4b56      	ldr	r3, [pc, #344]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	22f8      	movs	r2, #248	; 0xf8
 800471e:	4393      	bics	r3, r2
 8004720:	0019      	movs	r1, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	00da      	lsls	r2, r3, #3
 8004728:	4b52      	ldr	r3, [pc, #328]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 800472a:	430a      	orrs	r2, r1
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	e018      	b.n	8004762 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004730:	4b50      	ldr	r3, [pc, #320]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	4b4f      	ldr	r3, [pc, #316]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 8004736:	2101      	movs	r1, #1
 8004738:	438a      	bics	r2, r1
 800473a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800473c:	f7fe fc16 	bl	8002f6c <HAL_GetTick>
 8004740:	0003      	movs	r3, r0
 8004742:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004744:	e008      	b.n	8004758 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004746:	f7fe fc11 	bl	8002f6c <HAL_GetTick>
 800474a:	0002      	movs	r2, r0
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d901      	bls.n	8004758 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e202      	b.n	8004b5e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004758:	4b46      	ldr	r3, [pc, #280]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2202      	movs	r2, #2
 800475e:	4013      	ands	r3, r2
 8004760:	d1f1      	bne.n	8004746 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2208      	movs	r2, #8
 8004768:	4013      	ands	r3, r2
 800476a:	d036      	beq.n	80047da <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	69db      	ldr	r3, [r3, #28]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d019      	beq.n	80047a8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004774:	4b3f      	ldr	r3, [pc, #252]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 8004776:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004778:	4b3e      	ldr	r3, [pc, #248]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 800477a:	2101      	movs	r1, #1
 800477c:	430a      	orrs	r2, r1
 800477e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004780:	f7fe fbf4 	bl	8002f6c <HAL_GetTick>
 8004784:	0003      	movs	r3, r0
 8004786:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004788:	e008      	b.n	800479c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800478a:	f7fe fbef 	bl	8002f6c <HAL_GetTick>
 800478e:	0002      	movs	r2, r0
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e1e0      	b.n	8004b5e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800479c:	4b35      	ldr	r3, [pc, #212]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 800479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a0:	2202      	movs	r2, #2
 80047a2:	4013      	ands	r3, r2
 80047a4:	d0f1      	beq.n	800478a <HAL_RCC_OscConfig+0x242>
 80047a6:	e018      	b.n	80047da <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047a8:	4b32      	ldr	r3, [pc, #200]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 80047aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047ac:	4b31      	ldr	r3, [pc, #196]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 80047ae:	2101      	movs	r1, #1
 80047b0:	438a      	bics	r2, r1
 80047b2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047b4:	f7fe fbda 	bl	8002f6c <HAL_GetTick>
 80047b8:	0003      	movs	r3, r0
 80047ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047bc:	e008      	b.n	80047d0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047be:	f7fe fbd5 	bl	8002f6c <HAL_GetTick>
 80047c2:	0002      	movs	r2, r0
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e1c6      	b.n	8004b5e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047d0:	4b28      	ldr	r3, [pc, #160]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	2202      	movs	r2, #2
 80047d6:	4013      	ands	r3, r2
 80047d8:	d1f1      	bne.n	80047be <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2204      	movs	r2, #4
 80047e0:	4013      	ands	r3, r2
 80047e2:	d100      	bne.n	80047e6 <HAL_RCC_OscConfig+0x29e>
 80047e4:	e0b4      	b.n	8004950 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047e6:	201f      	movs	r0, #31
 80047e8:	183b      	adds	r3, r7, r0
 80047ea:	2200      	movs	r2, #0
 80047ec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ee:	4b21      	ldr	r3, [pc, #132]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 80047f0:	69da      	ldr	r2, [r3, #28]
 80047f2:	2380      	movs	r3, #128	; 0x80
 80047f4:	055b      	lsls	r3, r3, #21
 80047f6:	4013      	ands	r3, r2
 80047f8:	d110      	bne.n	800481c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047fa:	4b1e      	ldr	r3, [pc, #120]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 80047fc:	69da      	ldr	r2, [r3, #28]
 80047fe:	4b1d      	ldr	r3, [pc, #116]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 8004800:	2180      	movs	r1, #128	; 0x80
 8004802:	0549      	lsls	r1, r1, #21
 8004804:	430a      	orrs	r2, r1
 8004806:	61da      	str	r2, [r3, #28]
 8004808:	4b1a      	ldr	r3, [pc, #104]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 800480a:	69da      	ldr	r2, [r3, #28]
 800480c:	2380      	movs	r3, #128	; 0x80
 800480e:	055b      	lsls	r3, r3, #21
 8004810:	4013      	ands	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]
 8004814:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004816:	183b      	adds	r3, r7, r0
 8004818:	2201      	movs	r2, #1
 800481a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800481c:	4b18      	ldr	r3, [pc, #96]	; (8004880 <HAL_RCC_OscConfig+0x338>)
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	2380      	movs	r3, #128	; 0x80
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	4013      	ands	r3, r2
 8004826:	d11a      	bne.n	800485e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004828:	4b15      	ldr	r3, [pc, #84]	; (8004880 <HAL_RCC_OscConfig+0x338>)
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	4b14      	ldr	r3, [pc, #80]	; (8004880 <HAL_RCC_OscConfig+0x338>)
 800482e:	2180      	movs	r1, #128	; 0x80
 8004830:	0049      	lsls	r1, r1, #1
 8004832:	430a      	orrs	r2, r1
 8004834:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004836:	f7fe fb99 	bl	8002f6c <HAL_GetTick>
 800483a:	0003      	movs	r3, r0
 800483c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004840:	f7fe fb94 	bl	8002f6c <HAL_GetTick>
 8004844:	0002      	movs	r2, r0
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b64      	cmp	r3, #100	; 0x64
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e185      	b.n	8004b5e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004852:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <HAL_RCC_OscConfig+0x338>)
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	2380      	movs	r3, #128	; 0x80
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	4013      	ands	r3, r2
 800485c:	d0f0      	beq.n	8004840 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d10e      	bne.n	8004884 <HAL_RCC_OscConfig+0x33c>
 8004866:	4b03      	ldr	r3, [pc, #12]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 8004868:	6a1a      	ldr	r2, [r3, #32]
 800486a:	4b02      	ldr	r3, [pc, #8]	; (8004874 <HAL_RCC_OscConfig+0x32c>)
 800486c:	2101      	movs	r1, #1
 800486e:	430a      	orrs	r2, r1
 8004870:	621a      	str	r2, [r3, #32]
 8004872:	e035      	b.n	80048e0 <HAL_RCC_OscConfig+0x398>
 8004874:	40021000 	.word	0x40021000
 8004878:	fffeffff 	.word	0xfffeffff
 800487c:	fffbffff 	.word	0xfffbffff
 8004880:	40007000 	.word	0x40007000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10c      	bne.n	80048a6 <HAL_RCC_OscConfig+0x35e>
 800488c:	4bb6      	ldr	r3, [pc, #728]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 800488e:	6a1a      	ldr	r2, [r3, #32]
 8004890:	4bb5      	ldr	r3, [pc, #724]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 8004892:	2101      	movs	r1, #1
 8004894:	438a      	bics	r2, r1
 8004896:	621a      	str	r2, [r3, #32]
 8004898:	4bb3      	ldr	r3, [pc, #716]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 800489a:	6a1a      	ldr	r2, [r3, #32]
 800489c:	4bb2      	ldr	r3, [pc, #712]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 800489e:	2104      	movs	r1, #4
 80048a0:	438a      	bics	r2, r1
 80048a2:	621a      	str	r2, [r3, #32]
 80048a4:	e01c      	b.n	80048e0 <HAL_RCC_OscConfig+0x398>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	2b05      	cmp	r3, #5
 80048ac:	d10c      	bne.n	80048c8 <HAL_RCC_OscConfig+0x380>
 80048ae:	4bae      	ldr	r3, [pc, #696]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 80048b0:	6a1a      	ldr	r2, [r3, #32]
 80048b2:	4bad      	ldr	r3, [pc, #692]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 80048b4:	2104      	movs	r1, #4
 80048b6:	430a      	orrs	r2, r1
 80048b8:	621a      	str	r2, [r3, #32]
 80048ba:	4bab      	ldr	r3, [pc, #684]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 80048bc:	6a1a      	ldr	r2, [r3, #32]
 80048be:	4baa      	ldr	r3, [pc, #680]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 80048c0:	2101      	movs	r1, #1
 80048c2:	430a      	orrs	r2, r1
 80048c4:	621a      	str	r2, [r3, #32]
 80048c6:	e00b      	b.n	80048e0 <HAL_RCC_OscConfig+0x398>
 80048c8:	4ba7      	ldr	r3, [pc, #668]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 80048ca:	6a1a      	ldr	r2, [r3, #32]
 80048cc:	4ba6      	ldr	r3, [pc, #664]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 80048ce:	2101      	movs	r1, #1
 80048d0:	438a      	bics	r2, r1
 80048d2:	621a      	str	r2, [r3, #32]
 80048d4:	4ba4      	ldr	r3, [pc, #656]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 80048d6:	6a1a      	ldr	r2, [r3, #32]
 80048d8:	4ba3      	ldr	r3, [pc, #652]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 80048da:	2104      	movs	r1, #4
 80048dc:	438a      	bics	r2, r1
 80048de:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d014      	beq.n	8004912 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048e8:	f7fe fb40 	bl	8002f6c <HAL_GetTick>
 80048ec:	0003      	movs	r3, r0
 80048ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048f0:	e009      	b.n	8004906 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048f2:	f7fe fb3b 	bl	8002f6c <HAL_GetTick>
 80048f6:	0002      	movs	r2, r0
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	4a9b      	ldr	r2, [pc, #620]	; (8004b6c <HAL_RCC_OscConfig+0x624>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e12b      	b.n	8004b5e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004906:	4b98      	ldr	r3, [pc, #608]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	2202      	movs	r2, #2
 800490c:	4013      	ands	r3, r2
 800490e:	d0f0      	beq.n	80048f2 <HAL_RCC_OscConfig+0x3aa>
 8004910:	e013      	b.n	800493a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004912:	f7fe fb2b 	bl	8002f6c <HAL_GetTick>
 8004916:	0003      	movs	r3, r0
 8004918:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800491a:	e009      	b.n	8004930 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800491c:	f7fe fb26 	bl	8002f6c <HAL_GetTick>
 8004920:	0002      	movs	r2, r0
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	4a91      	ldr	r2, [pc, #580]	; (8004b6c <HAL_RCC_OscConfig+0x624>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d901      	bls.n	8004930 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e116      	b.n	8004b5e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004930:	4b8d      	ldr	r3, [pc, #564]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	2202      	movs	r2, #2
 8004936:	4013      	ands	r3, r2
 8004938:	d1f0      	bne.n	800491c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800493a:	231f      	movs	r3, #31
 800493c:	18fb      	adds	r3, r7, r3
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d105      	bne.n	8004950 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004944:	4b88      	ldr	r3, [pc, #544]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 8004946:	69da      	ldr	r2, [r3, #28]
 8004948:	4b87      	ldr	r3, [pc, #540]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 800494a:	4989      	ldr	r1, [pc, #548]	; (8004b70 <HAL_RCC_OscConfig+0x628>)
 800494c:	400a      	ands	r2, r1
 800494e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2210      	movs	r2, #16
 8004956:	4013      	ands	r3, r2
 8004958:	d063      	beq.n	8004a22 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d12a      	bne.n	80049b8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004962:	4b81      	ldr	r3, [pc, #516]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 8004964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004966:	4b80      	ldr	r3, [pc, #512]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 8004968:	2104      	movs	r1, #4
 800496a:	430a      	orrs	r2, r1
 800496c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800496e:	4b7e      	ldr	r3, [pc, #504]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 8004970:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004972:	4b7d      	ldr	r3, [pc, #500]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 8004974:	2101      	movs	r1, #1
 8004976:	430a      	orrs	r2, r1
 8004978:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800497a:	f7fe faf7 	bl	8002f6c <HAL_GetTick>
 800497e:	0003      	movs	r3, r0
 8004980:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004984:	f7fe faf2 	bl	8002f6c <HAL_GetTick>
 8004988:	0002      	movs	r2, r0
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e0e3      	b.n	8004b5e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004996:	4b74      	ldr	r3, [pc, #464]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 8004998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800499a:	2202      	movs	r2, #2
 800499c:	4013      	ands	r3, r2
 800499e:	d0f1      	beq.n	8004984 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80049a0:	4b71      	ldr	r3, [pc, #452]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 80049a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a4:	22f8      	movs	r2, #248	; 0xf8
 80049a6:	4393      	bics	r3, r2
 80049a8:	0019      	movs	r1, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	00da      	lsls	r2, r3, #3
 80049b0:	4b6d      	ldr	r3, [pc, #436]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 80049b2:	430a      	orrs	r2, r1
 80049b4:	635a      	str	r2, [r3, #52]	; 0x34
 80049b6:	e034      	b.n	8004a22 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	3305      	adds	r3, #5
 80049be:	d111      	bne.n	80049e4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80049c0:	4b69      	ldr	r3, [pc, #420]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 80049c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049c4:	4b68      	ldr	r3, [pc, #416]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 80049c6:	2104      	movs	r1, #4
 80049c8:	438a      	bics	r2, r1
 80049ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80049cc:	4b66      	ldr	r3, [pc, #408]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 80049ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d0:	22f8      	movs	r2, #248	; 0xf8
 80049d2:	4393      	bics	r3, r2
 80049d4:	0019      	movs	r1, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	00da      	lsls	r2, r3, #3
 80049dc:	4b62      	ldr	r3, [pc, #392]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 80049de:	430a      	orrs	r2, r1
 80049e0:	635a      	str	r2, [r3, #52]	; 0x34
 80049e2:	e01e      	b.n	8004a22 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80049e4:	4b60      	ldr	r3, [pc, #384]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 80049e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049e8:	4b5f      	ldr	r3, [pc, #380]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 80049ea:	2104      	movs	r1, #4
 80049ec:	430a      	orrs	r2, r1
 80049ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80049f0:	4b5d      	ldr	r3, [pc, #372]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 80049f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049f4:	4b5c      	ldr	r3, [pc, #368]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 80049f6:	2101      	movs	r1, #1
 80049f8:	438a      	bics	r2, r1
 80049fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049fc:	f7fe fab6 	bl	8002f6c <HAL_GetTick>
 8004a00:	0003      	movs	r3, r0
 8004a02:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004a04:	e008      	b.n	8004a18 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004a06:	f7fe fab1 	bl	8002f6c <HAL_GetTick>
 8004a0a:	0002      	movs	r2, r0
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d901      	bls.n	8004a18 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e0a2      	b.n	8004b5e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004a18:	4b53      	ldr	r3, [pc, #332]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 8004a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a1c:	2202      	movs	r2, #2
 8004a1e:	4013      	ands	r3, r2
 8004a20:	d1f1      	bne.n	8004a06 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d100      	bne.n	8004a2c <HAL_RCC_OscConfig+0x4e4>
 8004a2a:	e097      	b.n	8004b5c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a2c:	4b4e      	ldr	r3, [pc, #312]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	220c      	movs	r2, #12
 8004a32:	4013      	ands	r3, r2
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d100      	bne.n	8004a3a <HAL_RCC_OscConfig+0x4f2>
 8004a38:	e06b      	b.n	8004b12 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d14c      	bne.n	8004adc <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a42:	4b49      	ldr	r3, [pc, #292]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	4b48      	ldr	r3, [pc, #288]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 8004a48:	494a      	ldr	r1, [pc, #296]	; (8004b74 <HAL_RCC_OscConfig+0x62c>)
 8004a4a:	400a      	ands	r2, r1
 8004a4c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a4e:	f7fe fa8d 	bl	8002f6c <HAL_GetTick>
 8004a52:	0003      	movs	r3, r0
 8004a54:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a58:	f7fe fa88 	bl	8002f6c <HAL_GetTick>
 8004a5c:	0002      	movs	r2, r0
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e079      	b.n	8004b5e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a6a:	4b3f      	ldr	r3, [pc, #252]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	2380      	movs	r3, #128	; 0x80
 8004a70:	049b      	lsls	r3, r3, #18
 8004a72:	4013      	ands	r3, r2
 8004a74:	d1f0      	bne.n	8004a58 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a76:	4b3c      	ldr	r3, [pc, #240]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 8004a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7a:	220f      	movs	r2, #15
 8004a7c:	4393      	bics	r3, r2
 8004a7e:	0019      	movs	r1, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a84:	4b38      	ldr	r3, [pc, #224]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 8004a86:	430a      	orrs	r2, r1
 8004a88:	62da      	str	r2, [r3, #44]	; 0x2c
 8004a8a:	4b37      	ldr	r3, [pc, #220]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	4a3a      	ldr	r2, [pc, #232]	; (8004b78 <HAL_RCC_OscConfig+0x630>)
 8004a90:	4013      	ands	r3, r2
 8004a92:	0019      	movs	r1, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	4b32      	ldr	r3, [pc, #200]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004aa4:	4b30      	ldr	r3, [pc, #192]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	4b2f      	ldr	r3, [pc, #188]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 8004aaa:	2180      	movs	r1, #128	; 0x80
 8004aac:	0449      	lsls	r1, r1, #17
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab2:	f7fe fa5b 	bl	8002f6c <HAL_GetTick>
 8004ab6:	0003      	movs	r3, r0
 8004ab8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004abc:	f7fe fa56 	bl	8002f6c <HAL_GetTick>
 8004ac0:	0002      	movs	r2, r0
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e047      	b.n	8004b5e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ace:	4b26      	ldr	r3, [pc, #152]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	2380      	movs	r3, #128	; 0x80
 8004ad4:	049b      	lsls	r3, r3, #18
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	d0f0      	beq.n	8004abc <HAL_RCC_OscConfig+0x574>
 8004ada:	e03f      	b.n	8004b5c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004adc:	4b22      	ldr	r3, [pc, #136]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	4b21      	ldr	r3, [pc, #132]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 8004ae2:	4924      	ldr	r1, [pc, #144]	; (8004b74 <HAL_RCC_OscConfig+0x62c>)
 8004ae4:	400a      	ands	r2, r1
 8004ae6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae8:	f7fe fa40 	bl	8002f6c <HAL_GetTick>
 8004aec:	0003      	movs	r3, r0
 8004aee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004af0:	e008      	b.n	8004b04 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004af2:	f7fe fa3b 	bl	8002f6c <HAL_GetTick>
 8004af6:	0002      	movs	r2, r0
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e02c      	b.n	8004b5e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b04:	4b18      	ldr	r3, [pc, #96]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	2380      	movs	r3, #128	; 0x80
 8004b0a:	049b      	lsls	r3, r3, #18
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	d1f0      	bne.n	8004af2 <HAL_RCC_OscConfig+0x5aa>
 8004b10:	e024      	b.n	8004b5c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d101      	bne.n	8004b1e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e01f      	b.n	8004b5e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004b1e:	4b12      	ldr	r3, [pc, #72]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004b24:	4b10      	ldr	r3, [pc, #64]	; (8004b68 <HAL_RCC_OscConfig+0x620>)
 8004b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b28:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	2380      	movs	r3, #128	; 0x80
 8004b2e:	025b      	lsls	r3, r3, #9
 8004b30:	401a      	ands	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d10e      	bne.n	8004b58 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	220f      	movs	r2, #15
 8004b3e:	401a      	ands	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d107      	bne.n	8004b58 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	23f0      	movs	r3, #240	; 0xf0
 8004b4c:	039b      	lsls	r3, r3, #14
 8004b4e:	401a      	ands	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d001      	beq.n	8004b5c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e000      	b.n	8004b5e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	0018      	movs	r0, r3
 8004b60:	46bd      	mov	sp, r7
 8004b62:	b008      	add	sp, #32
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	46c0      	nop			; (mov r8, r8)
 8004b68:	40021000 	.word	0x40021000
 8004b6c:	00001388 	.word	0x00001388
 8004b70:	efffffff 	.word	0xefffffff
 8004b74:	feffffff 	.word	0xfeffffff
 8004b78:	ffc2ffff 	.word	0xffc2ffff

08004b7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e0b3      	b.n	8004cf8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b90:	4b5b      	ldr	r3, [pc, #364]	; (8004d00 <HAL_RCC_ClockConfig+0x184>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2201      	movs	r2, #1
 8004b96:	4013      	ands	r3, r2
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d911      	bls.n	8004bc2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b9e:	4b58      	ldr	r3, [pc, #352]	; (8004d00 <HAL_RCC_ClockConfig+0x184>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	4393      	bics	r3, r2
 8004ba6:	0019      	movs	r1, r3
 8004ba8:	4b55      	ldr	r3, [pc, #340]	; (8004d00 <HAL_RCC_ClockConfig+0x184>)
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	430a      	orrs	r2, r1
 8004bae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb0:	4b53      	ldr	r3, [pc, #332]	; (8004d00 <HAL_RCC_ClockConfig+0x184>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d001      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e09a      	b.n	8004cf8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	4013      	ands	r3, r2
 8004bca:	d015      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2204      	movs	r2, #4
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	d006      	beq.n	8004be4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004bd6:	4b4b      	ldr	r3, [pc, #300]	; (8004d04 <HAL_RCC_ClockConfig+0x188>)
 8004bd8:	685a      	ldr	r2, [r3, #4]
 8004bda:	4b4a      	ldr	r3, [pc, #296]	; (8004d04 <HAL_RCC_ClockConfig+0x188>)
 8004bdc:	21e0      	movs	r1, #224	; 0xe0
 8004bde:	00c9      	lsls	r1, r1, #3
 8004be0:	430a      	orrs	r2, r1
 8004be2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004be4:	4b47      	ldr	r3, [pc, #284]	; (8004d04 <HAL_RCC_ClockConfig+0x188>)
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	22f0      	movs	r2, #240	; 0xf0
 8004bea:	4393      	bics	r3, r2
 8004bec:	0019      	movs	r1, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	689a      	ldr	r2, [r3, #8]
 8004bf2:	4b44      	ldr	r3, [pc, #272]	; (8004d04 <HAL_RCC_ClockConfig+0x188>)
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	4013      	ands	r3, r2
 8004c00:	d040      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d107      	bne.n	8004c1a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c0a:	4b3e      	ldr	r3, [pc, #248]	; (8004d04 <HAL_RCC_ClockConfig+0x188>)
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	2380      	movs	r3, #128	; 0x80
 8004c10:	029b      	lsls	r3, r3, #10
 8004c12:	4013      	ands	r3, r2
 8004c14:	d114      	bne.n	8004c40 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e06e      	b.n	8004cf8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d107      	bne.n	8004c32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c22:	4b38      	ldr	r3, [pc, #224]	; (8004d04 <HAL_RCC_ClockConfig+0x188>)
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	2380      	movs	r3, #128	; 0x80
 8004c28:	049b      	lsls	r3, r3, #18
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	d108      	bne.n	8004c40 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e062      	b.n	8004cf8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c32:	4b34      	ldr	r3, [pc, #208]	; (8004d04 <HAL_RCC_ClockConfig+0x188>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2202      	movs	r2, #2
 8004c38:	4013      	ands	r3, r2
 8004c3a:	d101      	bne.n	8004c40 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e05b      	b.n	8004cf8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c40:	4b30      	ldr	r3, [pc, #192]	; (8004d04 <HAL_RCC_ClockConfig+0x188>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	2203      	movs	r2, #3
 8004c46:	4393      	bics	r3, r2
 8004c48:	0019      	movs	r1, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	4b2d      	ldr	r3, [pc, #180]	; (8004d04 <HAL_RCC_ClockConfig+0x188>)
 8004c50:	430a      	orrs	r2, r1
 8004c52:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c54:	f7fe f98a 	bl	8002f6c <HAL_GetTick>
 8004c58:	0003      	movs	r3, r0
 8004c5a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c5c:	e009      	b.n	8004c72 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c5e:	f7fe f985 	bl	8002f6c <HAL_GetTick>
 8004c62:	0002      	movs	r2, r0
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	4a27      	ldr	r2, [pc, #156]	; (8004d08 <HAL_RCC_ClockConfig+0x18c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e042      	b.n	8004cf8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c72:	4b24      	ldr	r3, [pc, #144]	; (8004d04 <HAL_RCC_ClockConfig+0x188>)
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	220c      	movs	r2, #12
 8004c78:	401a      	ands	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d1ec      	bne.n	8004c5e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c84:	4b1e      	ldr	r3, [pc, #120]	; (8004d00 <HAL_RCC_ClockConfig+0x184>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d211      	bcs.n	8004cb6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c92:	4b1b      	ldr	r3, [pc, #108]	; (8004d00 <HAL_RCC_ClockConfig+0x184>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2201      	movs	r2, #1
 8004c98:	4393      	bics	r3, r2
 8004c9a:	0019      	movs	r1, r3
 8004c9c:	4b18      	ldr	r3, [pc, #96]	; (8004d00 <HAL_RCC_ClockConfig+0x184>)
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ca4:	4b16      	ldr	r3, [pc, #88]	; (8004d00 <HAL_RCC_ClockConfig+0x184>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	4013      	ands	r3, r2
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d001      	beq.n	8004cb6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e020      	b.n	8004cf8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2204      	movs	r2, #4
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	d009      	beq.n	8004cd4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004cc0:	4b10      	ldr	r3, [pc, #64]	; (8004d04 <HAL_RCC_ClockConfig+0x188>)
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	4a11      	ldr	r2, [pc, #68]	; (8004d0c <HAL_RCC_ClockConfig+0x190>)
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	0019      	movs	r1, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68da      	ldr	r2, [r3, #12]
 8004cce:	4b0d      	ldr	r3, [pc, #52]	; (8004d04 <HAL_RCC_ClockConfig+0x188>)
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004cd4:	f000 f82e 	bl	8004d34 <HAL_RCC_GetSysClockFreq>
 8004cd8:	0001      	movs	r1, r0
 8004cda:	4b0a      	ldr	r3, [pc, #40]	; (8004d04 <HAL_RCC_ClockConfig+0x188>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	091b      	lsrs	r3, r3, #4
 8004ce0:	220f      	movs	r2, #15
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	4a0a      	ldr	r2, [pc, #40]	; (8004d10 <HAL_RCC_ClockConfig+0x194>)
 8004ce6:	5cd3      	ldrb	r3, [r2, r3]
 8004ce8:	000a      	movs	r2, r1
 8004cea:	40da      	lsrs	r2, r3
 8004cec:	4b09      	ldr	r3, [pc, #36]	; (8004d14 <HAL_RCC_ClockConfig+0x198>)
 8004cee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004cf0:	2000      	movs	r0, #0
 8004cf2:	f7fe f8f5 	bl	8002ee0 <HAL_InitTick>
  
  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	0018      	movs	r0, r3
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	b004      	add	sp, #16
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	40022000 	.word	0x40022000
 8004d04:	40021000 	.word	0x40021000
 8004d08:	00001388 	.word	0x00001388
 8004d0c:	fffff8ff 	.word	0xfffff8ff
 8004d10:	08005fc0 	.word	0x08005fc0
 8004d14:	20000000 	.word	0x20000000

08004d18 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M0 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8004d1c:	4b04      	ldr	r3, [pc, #16]	; (8004d30 <HAL_RCC_EnableCSS+0x18>)
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	4b03      	ldr	r3, [pc, #12]	; (8004d30 <HAL_RCC_EnableCSS+0x18>)
 8004d22:	2180      	movs	r1, #128	; 0x80
 8004d24:	0309      	lsls	r1, r1, #12
 8004d26:	430a      	orrs	r2, r1
 8004d28:	601a      	str	r2, [r3, #0]
}
 8004d2a:	46c0      	nop			; (mov r8, r8)
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	40021000 	.word	0x40021000

08004d34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d34:	b590      	push	{r4, r7, lr}
 8004d36:	b08f      	sub	sp, #60	; 0x3c
 8004d38:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004d3a:	2314      	movs	r3, #20
 8004d3c:	18fb      	adds	r3, r7, r3
 8004d3e:	4a2b      	ldr	r2, [pc, #172]	; (8004dec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d40:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004d42:	c313      	stmia	r3!, {r0, r1, r4}
 8004d44:	6812      	ldr	r2, [r2, #0]
 8004d46:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004d48:	1d3b      	adds	r3, r7, #4
 8004d4a:	4a29      	ldr	r2, [pc, #164]	; (8004df0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d4c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004d4e:	c313      	stmia	r3!, {r0, r1, r4}
 8004d50:	6812      	ldr	r2, [r2, #0]
 8004d52:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d54:	2300      	movs	r3, #0
 8004d56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d58:	2300      	movs	r3, #0
 8004d5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	637b      	str	r3, [r7, #52]	; 0x34
 8004d60:	2300      	movs	r3, #0
 8004d62:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004d68:	4b22      	ldr	r3, [pc, #136]	; (8004df4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d70:	220c      	movs	r2, #12
 8004d72:	4013      	ands	r3, r2
 8004d74:	2b04      	cmp	r3, #4
 8004d76:	d002      	beq.n	8004d7e <HAL_RCC_GetSysClockFreq+0x4a>
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d003      	beq.n	8004d84 <HAL_RCC_GetSysClockFreq+0x50>
 8004d7c:	e02d      	b.n	8004dda <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d7e:	4b1e      	ldr	r3, [pc, #120]	; (8004df8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004d80:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004d82:	e02d      	b.n	8004de0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d86:	0c9b      	lsrs	r3, r3, #18
 8004d88:	220f      	movs	r2, #15
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	2214      	movs	r2, #20
 8004d8e:	18ba      	adds	r2, r7, r2
 8004d90:	5cd3      	ldrb	r3, [r2, r3]
 8004d92:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004d94:	4b17      	ldr	r3, [pc, #92]	; (8004df4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d98:	220f      	movs	r2, #15
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	1d3a      	adds	r2, r7, #4
 8004d9e:	5cd3      	ldrb	r3, [r2, r3]
 8004da0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004da2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004da4:	2380      	movs	r3, #128	; 0x80
 8004da6:	025b      	lsls	r3, r3, #9
 8004da8:	4013      	ands	r3, r2
 8004daa:	d009      	beq.n	8004dc0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004dac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dae:	4812      	ldr	r0, [pc, #72]	; (8004df8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004db0:	f7fb f9aa 	bl	8000108 <__udivsi3>
 8004db4:	0003      	movs	r3, r0
 8004db6:	001a      	movs	r2, r3
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	4353      	muls	r3, r2
 8004dbc:	637b      	str	r3, [r7, #52]	; 0x34
 8004dbe:	e009      	b.n	8004dd4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004dc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dc2:	000a      	movs	r2, r1
 8004dc4:	0152      	lsls	r2, r2, #5
 8004dc6:	1a52      	subs	r2, r2, r1
 8004dc8:	0193      	lsls	r3, r2, #6
 8004dca:	1a9b      	subs	r3, r3, r2
 8004dcc:	00db      	lsls	r3, r3, #3
 8004dce:	185b      	adds	r3, r3, r1
 8004dd0:	021b      	lsls	r3, r3, #8
 8004dd2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004dd8:	e002      	b.n	8004de0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004dda:	4b07      	ldr	r3, [pc, #28]	; (8004df8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004ddc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004dde:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004de2:	0018      	movs	r0, r3
 8004de4:	46bd      	mov	sp, r7
 8004de6:	b00f      	add	sp, #60	; 0x3c
 8004de8:	bd90      	pop	{r4, r7, pc}
 8004dea:	46c0      	nop			; (mov r8, r8)
 8004dec:	08005e60 	.word	0x08005e60
 8004df0:	08005e70 	.word	0x08005e70
 8004df4:	40021000 	.word	0x40021000
 8004df8:	007a1200 	.word	0x007a1200

08004dfc <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004e00:	4b06      	ldr	r3, [pc, #24]	; (8004e1c <HAL_RCC_NMI_IRQHandler+0x20>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	2280      	movs	r2, #128	; 0x80
 8004e06:	4013      	ands	r3, r2
 8004e08:	2b80      	cmp	r3, #128	; 0x80
 8004e0a:	d104      	bne.n	8004e16 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004e0c:	f000 f80a 	bl	8004e24 <HAL_RCC_CSSCallback>
    
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004e10:	4b03      	ldr	r3, [pc, #12]	; (8004e20 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004e12:	2280      	movs	r2, #128	; 0x80
 8004e14:	701a      	strb	r2, [r3, #0]
  }
}
 8004e16:	46c0      	nop			; (mov r8, r8)
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	40021000 	.word	0x40021000
 8004e20:	4002100a 	.word	0x4002100a

08004e24 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 8004e28:	46c0      	nop			; (mov r8, r8)
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b082      	sub	sp, #8
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e042      	b.n	8004ec6 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	223d      	movs	r2, #61	; 0x3d
 8004e44:	5c9b      	ldrb	r3, [r3, r2]
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d107      	bne.n	8004e5c <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	223c      	movs	r2, #60	; 0x3c
 8004e50:	2100      	movs	r1, #0
 8004e52:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	0018      	movs	r0, r3
 8004e58:	f7fd ff5a 	bl	8002d10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	223d      	movs	r2, #61	; 0x3d
 8004e60:	2102      	movs	r1, #2
 8004e62:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	0019      	movs	r1, r3
 8004e6e:	0010      	movs	r0, r2
 8004e70:	f000 fc16 	bl	80056a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2246      	movs	r2, #70	; 0x46
 8004e78:	2101      	movs	r1, #1
 8004e7a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	223e      	movs	r2, #62	; 0x3e
 8004e80:	2101      	movs	r1, #1
 8004e82:	5499      	strb	r1, [r3, r2]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	223f      	movs	r2, #63	; 0x3f
 8004e88:	2101      	movs	r1, #1
 8004e8a:	5499      	strb	r1, [r3, r2]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2240      	movs	r2, #64	; 0x40
 8004e90:	2101      	movs	r1, #1
 8004e92:	5499      	strb	r1, [r3, r2]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2241      	movs	r2, #65	; 0x41
 8004e98:	2101      	movs	r1, #1
 8004e9a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2242      	movs	r2, #66	; 0x42
 8004ea0:	2101      	movs	r1, #1
 8004ea2:	5499      	strb	r1, [r3, r2]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2243      	movs	r2, #67	; 0x43
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	5499      	strb	r1, [r3, r2]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2244      	movs	r2, #68	; 0x44
 8004eb0:	2101      	movs	r1, #1
 8004eb2:	5499      	strb	r1, [r3, r2]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2245      	movs	r2, #69	; 0x45
 8004eb8:	2101      	movs	r1, #1
 8004eba:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	223d      	movs	r2, #61	; 0x3d
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	0018      	movs	r0, r3
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	b002      	add	sp, #8
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b082      	sub	sp, #8
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e042      	b.n	8004f66 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	223d      	movs	r2, #61	; 0x3d
 8004ee4:	5c9b      	ldrb	r3, [r3, r2]
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d107      	bne.n	8004efc <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	223c      	movs	r2, #60	; 0x3c
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	0018      	movs	r0, r3
 8004ef8:	f000 f839 	bl	8004f6e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	223d      	movs	r2, #61	; 0x3d
 8004f00:	2102      	movs	r1, #2
 8004f02:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	3304      	adds	r3, #4
 8004f0c:	0019      	movs	r1, r3
 8004f0e:	0010      	movs	r0, r2
 8004f10:	f000 fbc6 	bl	80056a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2246      	movs	r2, #70	; 0x46
 8004f18:	2101      	movs	r1, #1
 8004f1a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	223e      	movs	r2, #62	; 0x3e
 8004f20:	2101      	movs	r1, #1
 8004f22:	5499      	strb	r1, [r3, r2]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	223f      	movs	r2, #63	; 0x3f
 8004f28:	2101      	movs	r1, #1
 8004f2a:	5499      	strb	r1, [r3, r2]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2240      	movs	r2, #64	; 0x40
 8004f30:	2101      	movs	r1, #1
 8004f32:	5499      	strb	r1, [r3, r2]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2241      	movs	r2, #65	; 0x41
 8004f38:	2101      	movs	r1, #1
 8004f3a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2242      	movs	r2, #66	; 0x42
 8004f40:	2101      	movs	r1, #1
 8004f42:	5499      	strb	r1, [r3, r2]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2243      	movs	r2, #67	; 0x43
 8004f48:	2101      	movs	r1, #1
 8004f4a:	5499      	strb	r1, [r3, r2]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2244      	movs	r2, #68	; 0x44
 8004f50:	2101      	movs	r1, #1
 8004f52:	5499      	strb	r1, [r3, r2]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2245      	movs	r2, #69	; 0x45
 8004f58:	2101      	movs	r1, #1
 8004f5a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	223d      	movs	r2, #61	; 0x3d
 8004f60:	2101      	movs	r1, #1
 8004f62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	0018      	movs	r0, r3
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	b002      	add	sp, #8
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b082      	sub	sp, #8
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f76:	46c0      	nop			; (mov r8, r8)
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	b002      	add	sp, #8
 8004f7c:	bd80      	pop	{r7, pc}
	...

08004f80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d108      	bne.n	8004fa2 <HAL_TIM_PWM_Start+0x22>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	223e      	movs	r2, #62	; 0x3e
 8004f94:	5c9b      	ldrb	r3, [r3, r2]
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	1e5a      	subs	r2, r3, #1
 8004f9c:	4193      	sbcs	r3, r2
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	e01f      	b.n	8004fe2 <HAL_TIM_PWM_Start+0x62>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d108      	bne.n	8004fba <HAL_TIM_PWM_Start+0x3a>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	223f      	movs	r2, #63	; 0x3f
 8004fac:	5c9b      	ldrb	r3, [r3, r2]
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	1e5a      	subs	r2, r3, #1
 8004fb4:	4193      	sbcs	r3, r2
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	e013      	b.n	8004fe2 <HAL_TIM_PWM_Start+0x62>
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b08      	cmp	r3, #8
 8004fbe:	d108      	bne.n	8004fd2 <HAL_TIM_PWM_Start+0x52>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2240      	movs	r2, #64	; 0x40
 8004fc4:	5c9b      	ldrb	r3, [r3, r2]
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	1e5a      	subs	r2, r3, #1
 8004fcc:	4193      	sbcs	r3, r2
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	e007      	b.n	8004fe2 <HAL_TIM_PWM_Start+0x62>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2241      	movs	r2, #65	; 0x41
 8004fd6:	5c9b      	ldrb	r3, [r3, r2]
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	1e5a      	subs	r2, r3, #1
 8004fde:	4193      	sbcs	r3, r2
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e074      	b.n	80050d4 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d104      	bne.n	8004ffa <HAL_TIM_PWM_Start+0x7a>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	223e      	movs	r2, #62	; 0x3e
 8004ff4:	2102      	movs	r1, #2
 8004ff6:	5499      	strb	r1, [r3, r2]
 8004ff8:	e013      	b.n	8005022 <HAL_TIM_PWM_Start+0xa2>
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b04      	cmp	r3, #4
 8004ffe:	d104      	bne.n	800500a <HAL_TIM_PWM_Start+0x8a>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	223f      	movs	r2, #63	; 0x3f
 8005004:	2102      	movs	r1, #2
 8005006:	5499      	strb	r1, [r3, r2]
 8005008:	e00b      	b.n	8005022 <HAL_TIM_PWM_Start+0xa2>
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2b08      	cmp	r3, #8
 800500e:	d104      	bne.n	800501a <HAL_TIM_PWM_Start+0x9a>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2240      	movs	r2, #64	; 0x40
 8005014:	2102      	movs	r1, #2
 8005016:	5499      	strb	r1, [r3, r2]
 8005018:	e003      	b.n	8005022 <HAL_TIM_PWM_Start+0xa2>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2241      	movs	r2, #65	; 0x41
 800501e:	2102      	movs	r1, #2
 8005020:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6839      	ldr	r1, [r7, #0]
 8005028:	2201      	movs	r2, #1
 800502a:	0018      	movs	r0, r3
 800502c:	f000 fe4e 	bl	8005ccc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a29      	ldr	r2, [pc, #164]	; (80050dc <HAL_TIM_PWM_Start+0x15c>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d00e      	beq.n	8005058 <HAL_TIM_PWM_Start+0xd8>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a28      	ldr	r2, [pc, #160]	; (80050e0 <HAL_TIM_PWM_Start+0x160>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d009      	beq.n	8005058 <HAL_TIM_PWM_Start+0xd8>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a26      	ldr	r2, [pc, #152]	; (80050e4 <HAL_TIM_PWM_Start+0x164>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d004      	beq.n	8005058 <HAL_TIM_PWM_Start+0xd8>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a25      	ldr	r2, [pc, #148]	; (80050e8 <HAL_TIM_PWM_Start+0x168>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d101      	bne.n	800505c <HAL_TIM_PWM_Start+0xdc>
 8005058:	2301      	movs	r3, #1
 800505a:	e000      	b.n	800505e <HAL_TIM_PWM_Start+0xde>
 800505c:	2300      	movs	r3, #0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d008      	beq.n	8005074 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2180      	movs	r1, #128	; 0x80
 800506e:	0209      	lsls	r1, r1, #8
 8005070:	430a      	orrs	r2, r1
 8005072:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a18      	ldr	r2, [pc, #96]	; (80050dc <HAL_TIM_PWM_Start+0x15c>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00f      	beq.n	800509e <HAL_TIM_PWM_Start+0x11e>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	2380      	movs	r3, #128	; 0x80
 8005084:	05db      	lsls	r3, r3, #23
 8005086:	429a      	cmp	r2, r3
 8005088:	d009      	beq.n	800509e <HAL_TIM_PWM_Start+0x11e>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a17      	ldr	r2, [pc, #92]	; (80050ec <HAL_TIM_PWM_Start+0x16c>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d004      	beq.n	800509e <HAL_TIM_PWM_Start+0x11e>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a11      	ldr	r2, [pc, #68]	; (80050e0 <HAL_TIM_PWM_Start+0x160>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d111      	bne.n	80050c2 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	2207      	movs	r2, #7
 80050a6:	4013      	ands	r3, r2
 80050a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2b06      	cmp	r3, #6
 80050ae:	d010      	beq.n	80050d2 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2101      	movs	r1, #1
 80050bc:	430a      	orrs	r2, r1
 80050be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c0:	e007      	b.n	80050d2 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2101      	movs	r1, #1
 80050ce:	430a      	orrs	r2, r1
 80050d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	0018      	movs	r0, r3
 80050d6:	46bd      	mov	sp, r7
 80050d8:	b004      	add	sp, #16
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	40012c00 	.word	0x40012c00
 80050e0:	40014000 	.word	0x40014000
 80050e4:	40014400 	.word	0x40014400
 80050e8:	40014800 	.word	0x40014800
 80050ec:	40000400 	.word	0x40000400

080050f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	2202      	movs	r2, #2
 8005100:	4013      	ands	r3, r2
 8005102:	2b02      	cmp	r3, #2
 8005104:	d124      	bne.n	8005150 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	2202      	movs	r2, #2
 800510e:	4013      	ands	r3, r2
 8005110:	2b02      	cmp	r3, #2
 8005112:	d11d      	bne.n	8005150 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2203      	movs	r2, #3
 800511a:	4252      	negs	r2, r2
 800511c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	2203      	movs	r2, #3
 800512c:	4013      	ands	r3, r2
 800512e:	d004      	beq.n	800513a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	0018      	movs	r0, r3
 8005134:	f000 fa9c 	bl	8005670 <HAL_TIM_IC_CaptureCallback>
 8005138:	e007      	b.n	800514a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	0018      	movs	r0, r3
 800513e:	f000 fa8f 	bl	8005660 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	0018      	movs	r0, r3
 8005146:	f000 fa9b 	bl	8005680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	2204      	movs	r2, #4
 8005158:	4013      	ands	r3, r2
 800515a:	2b04      	cmp	r3, #4
 800515c:	d125      	bne.n	80051aa <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	2204      	movs	r2, #4
 8005166:	4013      	ands	r3, r2
 8005168:	2b04      	cmp	r3, #4
 800516a:	d11e      	bne.n	80051aa <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2205      	movs	r2, #5
 8005172:	4252      	negs	r2, r2
 8005174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2202      	movs	r2, #2
 800517a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	699a      	ldr	r2, [r3, #24]
 8005182:	23c0      	movs	r3, #192	; 0xc0
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4013      	ands	r3, r2
 8005188:	d004      	beq.n	8005194 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	0018      	movs	r0, r3
 800518e:	f000 fa6f 	bl	8005670 <HAL_TIM_IC_CaptureCallback>
 8005192:	e007      	b.n	80051a4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	0018      	movs	r0, r3
 8005198:	f000 fa62 	bl	8005660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	0018      	movs	r0, r3
 80051a0:	f000 fa6e 	bl	8005680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	2208      	movs	r2, #8
 80051b2:	4013      	ands	r3, r2
 80051b4:	2b08      	cmp	r3, #8
 80051b6:	d124      	bne.n	8005202 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	2208      	movs	r2, #8
 80051c0:	4013      	ands	r3, r2
 80051c2:	2b08      	cmp	r3, #8
 80051c4:	d11d      	bne.n	8005202 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2209      	movs	r2, #9
 80051cc:	4252      	negs	r2, r2
 80051ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2204      	movs	r2, #4
 80051d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	69db      	ldr	r3, [r3, #28]
 80051dc:	2203      	movs	r2, #3
 80051de:	4013      	ands	r3, r2
 80051e0:	d004      	beq.n	80051ec <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	0018      	movs	r0, r3
 80051e6:	f000 fa43 	bl	8005670 <HAL_TIM_IC_CaptureCallback>
 80051ea:	e007      	b.n	80051fc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	0018      	movs	r0, r3
 80051f0:	f000 fa36 	bl	8005660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	0018      	movs	r0, r3
 80051f8:	f000 fa42 	bl	8005680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	2210      	movs	r2, #16
 800520a:	4013      	ands	r3, r2
 800520c:	2b10      	cmp	r3, #16
 800520e:	d125      	bne.n	800525c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	2210      	movs	r2, #16
 8005218:	4013      	ands	r3, r2
 800521a:	2b10      	cmp	r3, #16
 800521c:	d11e      	bne.n	800525c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2211      	movs	r2, #17
 8005224:	4252      	negs	r2, r2
 8005226:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2208      	movs	r2, #8
 800522c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69da      	ldr	r2, [r3, #28]
 8005234:	23c0      	movs	r3, #192	; 0xc0
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4013      	ands	r3, r2
 800523a:	d004      	beq.n	8005246 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	0018      	movs	r0, r3
 8005240:	f000 fa16 	bl	8005670 <HAL_TIM_IC_CaptureCallback>
 8005244:	e007      	b.n	8005256 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	0018      	movs	r0, r3
 800524a:	f000 fa09 	bl	8005660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	0018      	movs	r0, r3
 8005252:	f000 fa15 	bl	8005680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	2201      	movs	r2, #1
 8005264:	4013      	ands	r3, r2
 8005266:	2b01      	cmp	r3, #1
 8005268:	d10f      	bne.n	800528a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	2201      	movs	r2, #1
 8005272:	4013      	ands	r3, r2
 8005274:	2b01      	cmp	r3, #1
 8005276:	d108      	bne.n	800528a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2202      	movs	r2, #2
 800527e:	4252      	negs	r2, r2
 8005280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	0018      	movs	r0, r3
 8005286:	f000 f9e3 	bl	8005650 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	2280      	movs	r2, #128	; 0x80
 8005292:	4013      	ands	r3, r2
 8005294:	2b80      	cmp	r3, #128	; 0x80
 8005296:	d10f      	bne.n	80052b8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	2280      	movs	r2, #128	; 0x80
 80052a0:	4013      	ands	r3, r2
 80052a2:	2b80      	cmp	r3, #128	; 0x80
 80052a4:	d108      	bne.n	80052b8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2281      	movs	r2, #129	; 0x81
 80052ac:	4252      	negs	r2, r2
 80052ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	0018      	movs	r0, r3
 80052b4:	f000 fd94 	bl	8005de0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	2240      	movs	r2, #64	; 0x40
 80052c0:	4013      	ands	r3, r2
 80052c2:	2b40      	cmp	r3, #64	; 0x40
 80052c4:	d10f      	bne.n	80052e6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	2240      	movs	r2, #64	; 0x40
 80052ce:	4013      	ands	r3, r2
 80052d0:	2b40      	cmp	r3, #64	; 0x40
 80052d2:	d108      	bne.n	80052e6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2241      	movs	r2, #65	; 0x41
 80052da:	4252      	negs	r2, r2
 80052dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	0018      	movs	r0, r3
 80052e2:	f000 f9d5 	bl	8005690 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	2220      	movs	r2, #32
 80052ee:	4013      	ands	r3, r2
 80052f0:	2b20      	cmp	r3, #32
 80052f2:	d10f      	bne.n	8005314 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	2220      	movs	r2, #32
 80052fc:	4013      	ands	r3, r2
 80052fe:	2b20      	cmp	r3, #32
 8005300:	d108      	bne.n	8005314 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2221      	movs	r2, #33	; 0x21
 8005308:	4252      	negs	r2, r2
 800530a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	0018      	movs	r0, r3
 8005310:	f000 fd5e 	bl	8005dd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005314:	46c0      	nop			; (mov r8, r8)
 8005316:	46bd      	mov	sp, r7
 8005318:	b002      	add	sp, #8
 800531a:	bd80      	pop	{r7, pc}

0800531c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005328:	2317      	movs	r3, #23
 800532a:	18fb      	adds	r3, r7, r3
 800532c:	2200      	movs	r2, #0
 800532e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	223c      	movs	r2, #60	; 0x3c
 8005334:	5c9b      	ldrb	r3, [r3, r2]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d101      	bne.n	800533e <HAL_TIM_PWM_ConfigChannel+0x22>
 800533a:	2302      	movs	r3, #2
 800533c:	e0ad      	b.n	800549a <HAL_TIM_PWM_ConfigChannel+0x17e>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	223c      	movs	r2, #60	; 0x3c
 8005342:	2101      	movs	r1, #1
 8005344:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b0c      	cmp	r3, #12
 800534a:	d100      	bne.n	800534e <HAL_TIM_PWM_ConfigChannel+0x32>
 800534c:	e076      	b.n	800543c <HAL_TIM_PWM_ConfigChannel+0x120>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b0c      	cmp	r3, #12
 8005352:	d900      	bls.n	8005356 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8005354:	e095      	b.n	8005482 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b08      	cmp	r3, #8
 800535a:	d04e      	beq.n	80053fa <HAL_TIM_PWM_ConfigChannel+0xde>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b08      	cmp	r3, #8
 8005360:	d900      	bls.n	8005364 <HAL_TIM_PWM_ConfigChannel+0x48>
 8005362:	e08e      	b.n	8005482 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <HAL_TIM_PWM_ConfigChannel+0x56>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b04      	cmp	r3, #4
 800536e:	d021      	beq.n	80053b4 <HAL_TIM_PWM_ConfigChannel+0x98>
 8005370:	e087      	b.n	8005482 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	0011      	movs	r1, r2
 800537a:	0018      	movs	r0, r3
 800537c:	f000 fa10 	bl	80057a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	699a      	ldr	r2, [r3, #24]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2108      	movs	r1, #8
 800538c:	430a      	orrs	r2, r1
 800538e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	699a      	ldr	r2, [r3, #24]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2104      	movs	r1, #4
 800539c:	438a      	bics	r2, r1
 800539e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6999      	ldr	r1, [r3, #24]
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	691a      	ldr	r2, [r3, #16]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	430a      	orrs	r2, r1
 80053b0:	619a      	str	r2, [r3, #24]
      break;
 80053b2:	e06b      	b.n	800548c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	0011      	movs	r1, r2
 80053bc:	0018      	movs	r0, r3
 80053be:	f000 fa77 	bl	80058b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	699a      	ldr	r2, [r3, #24]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2180      	movs	r1, #128	; 0x80
 80053ce:	0109      	lsls	r1, r1, #4
 80053d0:	430a      	orrs	r2, r1
 80053d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699a      	ldr	r2, [r3, #24]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4931      	ldr	r1, [pc, #196]	; (80054a4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80053e0:	400a      	ands	r2, r1
 80053e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6999      	ldr	r1, [r3, #24]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	021a      	lsls	r2, r3, #8
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	430a      	orrs	r2, r1
 80053f6:	619a      	str	r2, [r3, #24]
      break;
 80053f8:	e048      	b.n	800548c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68ba      	ldr	r2, [r7, #8]
 8005400:	0011      	movs	r1, r2
 8005402:	0018      	movs	r0, r3
 8005404:	f000 fad8 	bl	80059b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	69da      	ldr	r2, [r3, #28]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2108      	movs	r1, #8
 8005414:	430a      	orrs	r2, r1
 8005416:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	69da      	ldr	r2, [r3, #28]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2104      	movs	r1, #4
 8005424:	438a      	bics	r2, r1
 8005426:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	69d9      	ldr	r1, [r3, #28]
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	691a      	ldr	r2, [r3, #16]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	61da      	str	r2, [r3, #28]
      break;
 800543a:	e027      	b.n	800548c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68ba      	ldr	r2, [r7, #8]
 8005442:	0011      	movs	r1, r2
 8005444:	0018      	movs	r0, r3
 8005446:	f000 fb3d 	bl	8005ac4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	69da      	ldr	r2, [r3, #28]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2180      	movs	r1, #128	; 0x80
 8005456:	0109      	lsls	r1, r1, #4
 8005458:	430a      	orrs	r2, r1
 800545a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	69da      	ldr	r2, [r3, #28]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	490f      	ldr	r1, [pc, #60]	; (80054a4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005468:	400a      	ands	r2, r1
 800546a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	69d9      	ldr	r1, [r3, #28]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	021a      	lsls	r2, r3, #8
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	61da      	str	r2, [r3, #28]
      break;
 8005480:	e004      	b.n	800548c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8005482:	2317      	movs	r3, #23
 8005484:	18fb      	adds	r3, r7, r3
 8005486:	2201      	movs	r2, #1
 8005488:	701a      	strb	r2, [r3, #0]
      break;
 800548a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	223c      	movs	r2, #60	; 0x3c
 8005490:	2100      	movs	r1, #0
 8005492:	5499      	strb	r1, [r3, r2]

  return status;
 8005494:	2317      	movs	r3, #23
 8005496:	18fb      	adds	r3, r7, r3
 8005498:	781b      	ldrb	r3, [r3, #0]
}
 800549a:	0018      	movs	r0, r3
 800549c:	46bd      	mov	sp, r7
 800549e:	b006      	add	sp, #24
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	46c0      	nop			; (mov r8, r8)
 80054a4:	fffffbff 	.word	0xfffffbff

080054a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054b2:	230f      	movs	r3, #15
 80054b4:	18fb      	adds	r3, r7, r3
 80054b6:	2200      	movs	r2, #0
 80054b8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	223c      	movs	r2, #60	; 0x3c
 80054be:	5c9b      	ldrb	r3, [r3, r2]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d101      	bne.n	80054c8 <HAL_TIM_ConfigClockSource+0x20>
 80054c4:	2302      	movs	r3, #2
 80054c6:	e0bc      	b.n	8005642 <HAL_TIM_ConfigClockSource+0x19a>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	223c      	movs	r2, #60	; 0x3c
 80054cc:	2101      	movs	r1, #1
 80054ce:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	223d      	movs	r2, #61	; 0x3d
 80054d4:	2102      	movs	r1, #2
 80054d6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	2277      	movs	r2, #119	; 0x77
 80054e4:	4393      	bics	r3, r2
 80054e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	4a58      	ldr	r2, [pc, #352]	; (800564c <HAL_TIM_ConfigClockSource+0x1a4>)
 80054ec:	4013      	ands	r3, r2
 80054ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2280      	movs	r2, #128	; 0x80
 80054fe:	0192      	lsls	r2, r2, #6
 8005500:	4293      	cmp	r3, r2
 8005502:	d040      	beq.n	8005586 <HAL_TIM_ConfigClockSource+0xde>
 8005504:	2280      	movs	r2, #128	; 0x80
 8005506:	0192      	lsls	r2, r2, #6
 8005508:	4293      	cmp	r3, r2
 800550a:	d900      	bls.n	800550e <HAL_TIM_ConfigClockSource+0x66>
 800550c:	e088      	b.n	8005620 <HAL_TIM_ConfigClockSource+0x178>
 800550e:	2280      	movs	r2, #128	; 0x80
 8005510:	0152      	lsls	r2, r2, #5
 8005512:	4293      	cmp	r3, r2
 8005514:	d100      	bne.n	8005518 <HAL_TIM_ConfigClockSource+0x70>
 8005516:	e088      	b.n	800562a <HAL_TIM_ConfigClockSource+0x182>
 8005518:	2280      	movs	r2, #128	; 0x80
 800551a:	0152      	lsls	r2, r2, #5
 800551c:	4293      	cmp	r3, r2
 800551e:	d900      	bls.n	8005522 <HAL_TIM_ConfigClockSource+0x7a>
 8005520:	e07e      	b.n	8005620 <HAL_TIM_ConfigClockSource+0x178>
 8005522:	2b70      	cmp	r3, #112	; 0x70
 8005524:	d018      	beq.n	8005558 <HAL_TIM_ConfigClockSource+0xb0>
 8005526:	d900      	bls.n	800552a <HAL_TIM_ConfigClockSource+0x82>
 8005528:	e07a      	b.n	8005620 <HAL_TIM_ConfigClockSource+0x178>
 800552a:	2b60      	cmp	r3, #96	; 0x60
 800552c:	d04f      	beq.n	80055ce <HAL_TIM_ConfigClockSource+0x126>
 800552e:	d900      	bls.n	8005532 <HAL_TIM_ConfigClockSource+0x8a>
 8005530:	e076      	b.n	8005620 <HAL_TIM_ConfigClockSource+0x178>
 8005532:	2b50      	cmp	r3, #80	; 0x50
 8005534:	d03b      	beq.n	80055ae <HAL_TIM_ConfigClockSource+0x106>
 8005536:	d900      	bls.n	800553a <HAL_TIM_ConfigClockSource+0x92>
 8005538:	e072      	b.n	8005620 <HAL_TIM_ConfigClockSource+0x178>
 800553a:	2b40      	cmp	r3, #64	; 0x40
 800553c:	d057      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x146>
 800553e:	d900      	bls.n	8005542 <HAL_TIM_ConfigClockSource+0x9a>
 8005540:	e06e      	b.n	8005620 <HAL_TIM_ConfigClockSource+0x178>
 8005542:	2b30      	cmp	r3, #48	; 0x30
 8005544:	d063      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x166>
 8005546:	d86b      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x178>
 8005548:	2b20      	cmp	r3, #32
 800554a:	d060      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x166>
 800554c:	d868      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x178>
 800554e:	2b00      	cmp	r3, #0
 8005550:	d05d      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x166>
 8005552:	2b10      	cmp	r3, #16
 8005554:	d05b      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x166>
 8005556:	e063      	b.n	8005620 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6818      	ldr	r0, [r3, #0]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	6899      	ldr	r1, [r3, #8]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685a      	ldr	r2, [r3, #4]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f000 fb90 	bl	8005c8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2277      	movs	r2, #119	; 0x77
 8005578:	4313      	orrs	r3, r2
 800557a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	609a      	str	r2, [r3, #8]
      break;
 8005584:	e052      	b.n	800562c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6818      	ldr	r0, [r3, #0]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	6899      	ldr	r1, [r3, #8]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	f000 fb79 	bl	8005c8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	689a      	ldr	r2, [r3, #8]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2180      	movs	r1, #128	; 0x80
 80055a6:	01c9      	lsls	r1, r1, #7
 80055a8:	430a      	orrs	r2, r1
 80055aa:	609a      	str	r2, [r3, #8]
      break;
 80055ac:	e03e      	b.n	800562c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6818      	ldr	r0, [r3, #0]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	6859      	ldr	r1, [r3, #4]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	001a      	movs	r2, r3
 80055bc:	f000 faec 	bl	8005b98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2150      	movs	r1, #80	; 0x50
 80055c6:	0018      	movs	r0, r3
 80055c8:	f000 fb46 	bl	8005c58 <TIM_ITRx_SetConfig>
      break;
 80055cc:	e02e      	b.n	800562c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6818      	ldr	r0, [r3, #0]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	6859      	ldr	r1, [r3, #4]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	001a      	movs	r2, r3
 80055dc:	f000 fb0a 	bl	8005bf4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2160      	movs	r1, #96	; 0x60
 80055e6:	0018      	movs	r0, r3
 80055e8:	f000 fb36 	bl	8005c58 <TIM_ITRx_SetConfig>
      break;
 80055ec:	e01e      	b.n	800562c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6818      	ldr	r0, [r3, #0]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	6859      	ldr	r1, [r3, #4]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	001a      	movs	r2, r3
 80055fc:	f000 facc 	bl	8005b98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2140      	movs	r1, #64	; 0x40
 8005606:	0018      	movs	r0, r3
 8005608:	f000 fb26 	bl	8005c58 <TIM_ITRx_SetConfig>
      break;
 800560c:	e00e      	b.n	800562c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	0019      	movs	r1, r3
 8005618:	0010      	movs	r0, r2
 800561a:	f000 fb1d 	bl	8005c58 <TIM_ITRx_SetConfig>
      break;
 800561e:	e005      	b.n	800562c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005620:	230f      	movs	r3, #15
 8005622:	18fb      	adds	r3, r7, r3
 8005624:	2201      	movs	r2, #1
 8005626:	701a      	strb	r2, [r3, #0]
      break;
 8005628:	e000      	b.n	800562c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800562a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	223d      	movs	r2, #61	; 0x3d
 8005630:	2101      	movs	r1, #1
 8005632:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	223c      	movs	r2, #60	; 0x3c
 8005638:	2100      	movs	r1, #0
 800563a:	5499      	strb	r1, [r3, r2]

  return status;
 800563c:	230f      	movs	r3, #15
 800563e:	18fb      	adds	r3, r7, r3
 8005640:	781b      	ldrb	r3, [r3, #0]
}
 8005642:	0018      	movs	r0, r3
 8005644:	46bd      	mov	sp, r7
 8005646:	b004      	add	sp, #16
 8005648:	bd80      	pop	{r7, pc}
 800564a:	46c0      	nop			; (mov r8, r8)
 800564c:	ffff00ff 	.word	0xffff00ff

08005650 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005658:	46c0      	nop			; (mov r8, r8)
 800565a:	46bd      	mov	sp, r7
 800565c:	b002      	add	sp, #8
 800565e:	bd80      	pop	{r7, pc}

08005660 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005668:	46c0      	nop			; (mov r8, r8)
 800566a:	46bd      	mov	sp, r7
 800566c:	b002      	add	sp, #8
 800566e:	bd80      	pop	{r7, pc}

08005670 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005678:	46c0      	nop			; (mov r8, r8)
 800567a:	46bd      	mov	sp, r7
 800567c:	b002      	add	sp, #8
 800567e:	bd80      	pop	{r7, pc}

08005680 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005688:	46c0      	nop			; (mov r8, r8)
 800568a:	46bd      	mov	sp, r7
 800568c:	b002      	add	sp, #8
 800568e:	bd80      	pop	{r7, pc}

08005690 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005698:	46c0      	nop			; (mov r8, r8)
 800569a:	46bd      	mov	sp, r7
 800569c:	b002      	add	sp, #8
 800569e:	bd80      	pop	{r7, pc}

080056a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a34      	ldr	r2, [pc, #208]	; (8005784 <TIM_Base_SetConfig+0xe4>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d008      	beq.n	80056ca <TIM_Base_SetConfig+0x2a>
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	2380      	movs	r3, #128	; 0x80
 80056bc:	05db      	lsls	r3, r3, #23
 80056be:	429a      	cmp	r2, r3
 80056c0:	d003      	beq.n	80056ca <TIM_Base_SetConfig+0x2a>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a30      	ldr	r2, [pc, #192]	; (8005788 <TIM_Base_SetConfig+0xe8>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d108      	bne.n	80056dc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2270      	movs	r2, #112	; 0x70
 80056ce:	4393      	bics	r3, r2
 80056d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	4313      	orrs	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a29      	ldr	r2, [pc, #164]	; (8005784 <TIM_Base_SetConfig+0xe4>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d018      	beq.n	8005716 <TIM_Base_SetConfig+0x76>
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	2380      	movs	r3, #128	; 0x80
 80056e8:	05db      	lsls	r3, r3, #23
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d013      	beq.n	8005716 <TIM_Base_SetConfig+0x76>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a25      	ldr	r2, [pc, #148]	; (8005788 <TIM_Base_SetConfig+0xe8>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00f      	beq.n	8005716 <TIM_Base_SetConfig+0x76>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a24      	ldr	r2, [pc, #144]	; (800578c <TIM_Base_SetConfig+0xec>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d00b      	beq.n	8005716 <TIM_Base_SetConfig+0x76>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a23      	ldr	r2, [pc, #140]	; (8005790 <TIM_Base_SetConfig+0xf0>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d007      	beq.n	8005716 <TIM_Base_SetConfig+0x76>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a22      	ldr	r2, [pc, #136]	; (8005794 <TIM_Base_SetConfig+0xf4>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d003      	beq.n	8005716 <TIM_Base_SetConfig+0x76>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a21      	ldr	r2, [pc, #132]	; (8005798 <TIM_Base_SetConfig+0xf8>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d108      	bne.n	8005728 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	4a20      	ldr	r2, [pc, #128]	; (800579c <TIM_Base_SetConfig+0xfc>)
 800571a:	4013      	ands	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	4313      	orrs	r3, r2
 8005726:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2280      	movs	r2, #128	; 0x80
 800572c:	4393      	bics	r3, r2
 800572e:	001a      	movs	r2, r3
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	4313      	orrs	r3, r2
 8005736:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	689a      	ldr	r2, [r3, #8]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a0c      	ldr	r2, [pc, #48]	; (8005784 <TIM_Base_SetConfig+0xe4>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d00b      	beq.n	800576e <TIM_Base_SetConfig+0xce>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a0d      	ldr	r2, [pc, #52]	; (8005790 <TIM_Base_SetConfig+0xf0>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d007      	beq.n	800576e <TIM_Base_SetConfig+0xce>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a0c      	ldr	r2, [pc, #48]	; (8005794 <TIM_Base_SetConfig+0xf4>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d003      	beq.n	800576e <TIM_Base_SetConfig+0xce>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a0b      	ldr	r2, [pc, #44]	; (8005798 <TIM_Base_SetConfig+0xf8>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d103      	bne.n	8005776 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	691a      	ldr	r2, [r3, #16]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	615a      	str	r2, [r3, #20]
}
 800577c:	46c0      	nop			; (mov r8, r8)
 800577e:	46bd      	mov	sp, r7
 8005780:	b004      	add	sp, #16
 8005782:	bd80      	pop	{r7, pc}
 8005784:	40012c00 	.word	0x40012c00
 8005788:	40000400 	.word	0x40000400
 800578c:	40002000 	.word	0x40002000
 8005790:	40014000 	.word	0x40014000
 8005794:	40014400 	.word	0x40014400
 8005798:	40014800 	.word	0x40014800
 800579c:	fffffcff 	.word	0xfffffcff

080057a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	2201      	movs	r2, #1
 80057b0:	4393      	bics	r3, r2
 80057b2:	001a      	movs	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a1b      	ldr	r3, [r3, #32]
 80057bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2270      	movs	r2, #112	; 0x70
 80057ce:	4393      	bics	r3, r2
 80057d0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2203      	movs	r2, #3
 80057d6:	4393      	bics	r3, r2
 80057d8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	2202      	movs	r2, #2
 80057e8:	4393      	bics	r3, r2
 80057ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a27      	ldr	r2, [pc, #156]	; (8005898 <TIM_OC1_SetConfig+0xf8>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d00b      	beq.n	8005816 <TIM_OC1_SetConfig+0x76>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a26      	ldr	r2, [pc, #152]	; (800589c <TIM_OC1_SetConfig+0xfc>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d007      	beq.n	8005816 <TIM_OC1_SetConfig+0x76>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a25      	ldr	r2, [pc, #148]	; (80058a0 <TIM_OC1_SetConfig+0x100>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d003      	beq.n	8005816 <TIM_OC1_SetConfig+0x76>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a24      	ldr	r2, [pc, #144]	; (80058a4 <TIM_OC1_SetConfig+0x104>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d10c      	bne.n	8005830 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2208      	movs	r2, #8
 800581a:	4393      	bics	r3, r2
 800581c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	4313      	orrs	r3, r2
 8005826:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	2204      	movs	r2, #4
 800582c:	4393      	bics	r3, r2
 800582e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a19      	ldr	r2, [pc, #100]	; (8005898 <TIM_OC1_SetConfig+0xf8>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d00b      	beq.n	8005850 <TIM_OC1_SetConfig+0xb0>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a18      	ldr	r2, [pc, #96]	; (800589c <TIM_OC1_SetConfig+0xfc>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d007      	beq.n	8005850 <TIM_OC1_SetConfig+0xb0>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a17      	ldr	r2, [pc, #92]	; (80058a0 <TIM_OC1_SetConfig+0x100>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d003      	beq.n	8005850 <TIM_OC1_SetConfig+0xb0>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a16      	ldr	r2, [pc, #88]	; (80058a4 <TIM_OC1_SetConfig+0x104>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d111      	bne.n	8005874 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	4a15      	ldr	r2, [pc, #84]	; (80058a8 <TIM_OC1_SetConfig+0x108>)
 8005854:	4013      	ands	r3, r2
 8005856:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	4a14      	ldr	r2, [pc, #80]	; (80058ac <TIM_OC1_SetConfig+0x10c>)
 800585c:	4013      	ands	r3, r2
 800585e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	4313      	orrs	r3, r2
 8005868:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	4313      	orrs	r3, r2
 8005872:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	621a      	str	r2, [r3, #32]
}
 800588e:	46c0      	nop			; (mov r8, r8)
 8005890:	46bd      	mov	sp, r7
 8005892:	b006      	add	sp, #24
 8005894:	bd80      	pop	{r7, pc}
 8005896:	46c0      	nop			; (mov r8, r8)
 8005898:	40012c00 	.word	0x40012c00
 800589c:	40014000 	.word	0x40014000
 80058a0:	40014400 	.word	0x40014400
 80058a4:	40014800 	.word	0x40014800
 80058a8:	fffffeff 	.word	0xfffffeff
 80058ac:	fffffdff 	.word	0xfffffdff

080058b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	2210      	movs	r2, #16
 80058c0:	4393      	bics	r3, r2
 80058c2:	001a      	movs	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	4a2e      	ldr	r2, [pc, #184]	; (8005998 <TIM_OC2_SetConfig+0xe8>)
 80058de:	4013      	ands	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	4a2d      	ldr	r2, [pc, #180]	; (800599c <TIM_OC2_SetConfig+0xec>)
 80058e6:	4013      	ands	r3, r2
 80058e8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	021b      	lsls	r3, r3, #8
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2220      	movs	r2, #32
 80058fa:	4393      	bics	r3, r2
 80058fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	011b      	lsls	r3, r3, #4
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	4313      	orrs	r3, r2
 8005908:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a24      	ldr	r2, [pc, #144]	; (80059a0 <TIM_OC2_SetConfig+0xf0>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d10d      	bne.n	800592e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	2280      	movs	r2, #128	; 0x80
 8005916:	4393      	bics	r3, r2
 8005918:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	011b      	lsls	r3, r3, #4
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	4313      	orrs	r3, r2
 8005924:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	2240      	movs	r2, #64	; 0x40
 800592a:	4393      	bics	r3, r2
 800592c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a1b      	ldr	r2, [pc, #108]	; (80059a0 <TIM_OC2_SetConfig+0xf0>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d00b      	beq.n	800594e <TIM_OC2_SetConfig+0x9e>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a1a      	ldr	r2, [pc, #104]	; (80059a4 <TIM_OC2_SetConfig+0xf4>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d007      	beq.n	800594e <TIM_OC2_SetConfig+0x9e>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a19      	ldr	r2, [pc, #100]	; (80059a8 <TIM_OC2_SetConfig+0xf8>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d003      	beq.n	800594e <TIM_OC2_SetConfig+0x9e>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a18      	ldr	r2, [pc, #96]	; (80059ac <TIM_OC2_SetConfig+0xfc>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d113      	bne.n	8005976 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	4a17      	ldr	r2, [pc, #92]	; (80059b0 <TIM_OC2_SetConfig+0x100>)
 8005952:	4013      	ands	r3, r2
 8005954:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	4a16      	ldr	r2, [pc, #88]	; (80059b4 <TIM_OC2_SetConfig+0x104>)
 800595a:	4013      	ands	r3, r2
 800595c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	4313      	orrs	r3, r2
 8005968:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	4313      	orrs	r3, r2
 8005974:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	621a      	str	r2, [r3, #32]
}
 8005990:	46c0      	nop			; (mov r8, r8)
 8005992:	46bd      	mov	sp, r7
 8005994:	b006      	add	sp, #24
 8005996:	bd80      	pop	{r7, pc}
 8005998:	ffff8fff 	.word	0xffff8fff
 800599c:	fffffcff 	.word	0xfffffcff
 80059a0:	40012c00 	.word	0x40012c00
 80059a4:	40014000 	.word	0x40014000
 80059a8:	40014400 	.word	0x40014400
 80059ac:	40014800 	.word	0x40014800
 80059b0:	fffffbff 	.word	0xfffffbff
 80059b4:	fffff7ff 	.word	0xfffff7ff

080059b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b086      	sub	sp, #24
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	4a35      	ldr	r2, [pc, #212]	; (8005a9c <TIM_OC3_SetConfig+0xe4>)
 80059c8:	401a      	ands	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2270      	movs	r2, #112	; 0x70
 80059e4:	4393      	bics	r3, r2
 80059e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2203      	movs	r2, #3
 80059ec:	4393      	bics	r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	4a28      	ldr	r2, [pc, #160]	; (8005aa0 <TIM_OC3_SetConfig+0xe8>)
 80059fe:	4013      	ands	r3, r2
 8005a00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	021b      	lsls	r3, r3, #8
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a24      	ldr	r2, [pc, #144]	; (8005aa4 <TIM_OC3_SetConfig+0xec>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d10d      	bne.n	8005a32 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	4a23      	ldr	r2, [pc, #140]	; (8005aa8 <TIM_OC3_SetConfig+0xf0>)
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	021b      	lsls	r3, r3, #8
 8005a24:	697a      	ldr	r2, [r7, #20]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	4a1f      	ldr	r2, [pc, #124]	; (8005aac <TIM_OC3_SetConfig+0xf4>)
 8005a2e:	4013      	ands	r3, r2
 8005a30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a1b      	ldr	r2, [pc, #108]	; (8005aa4 <TIM_OC3_SetConfig+0xec>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d00b      	beq.n	8005a52 <TIM_OC3_SetConfig+0x9a>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a1c      	ldr	r2, [pc, #112]	; (8005ab0 <TIM_OC3_SetConfig+0xf8>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d007      	beq.n	8005a52 <TIM_OC3_SetConfig+0x9a>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a1b      	ldr	r2, [pc, #108]	; (8005ab4 <TIM_OC3_SetConfig+0xfc>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d003      	beq.n	8005a52 <TIM_OC3_SetConfig+0x9a>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a1a      	ldr	r2, [pc, #104]	; (8005ab8 <TIM_OC3_SetConfig+0x100>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d113      	bne.n	8005a7a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	4a19      	ldr	r2, [pc, #100]	; (8005abc <TIM_OC3_SetConfig+0x104>)
 8005a56:	4013      	ands	r3, r2
 8005a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	4a18      	ldr	r2, [pc, #96]	; (8005ac0 <TIM_OC3_SetConfig+0x108>)
 8005a5e:	4013      	ands	r3, r2
 8005a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	011b      	lsls	r3, r3, #4
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	011b      	lsls	r3, r3, #4
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	685a      	ldr	r2, [r3, #4]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	621a      	str	r2, [r3, #32]
}
 8005a94:	46c0      	nop			; (mov r8, r8)
 8005a96:	46bd      	mov	sp, r7
 8005a98:	b006      	add	sp, #24
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	fffffeff 	.word	0xfffffeff
 8005aa0:	fffffdff 	.word	0xfffffdff
 8005aa4:	40012c00 	.word	0x40012c00
 8005aa8:	fffff7ff 	.word	0xfffff7ff
 8005aac:	fffffbff 	.word	0xfffffbff
 8005ab0:	40014000 	.word	0x40014000
 8005ab4:	40014400 	.word	0x40014400
 8005ab8:	40014800 	.word	0x40014800
 8005abc:	ffffefff 	.word	0xffffefff
 8005ac0:	ffffdfff 	.word	0xffffdfff

08005ac4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	4a28      	ldr	r2, [pc, #160]	; (8005b74 <TIM_OC4_SetConfig+0xb0>)
 8005ad4:	401a      	ands	r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4a22      	ldr	r2, [pc, #136]	; (8005b78 <TIM_OC4_SetConfig+0xb4>)
 8005af0:	4013      	ands	r3, r2
 8005af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4a21      	ldr	r2, [pc, #132]	; (8005b7c <TIM_OC4_SetConfig+0xb8>)
 8005af8:	4013      	ands	r3, r2
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	021b      	lsls	r3, r3, #8
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	4a1d      	ldr	r2, [pc, #116]	; (8005b80 <TIM_OC4_SetConfig+0xbc>)
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	031b      	lsls	r3, r3, #12
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a19      	ldr	r2, [pc, #100]	; (8005b84 <TIM_OC4_SetConfig+0xc0>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d00b      	beq.n	8005b3c <TIM_OC4_SetConfig+0x78>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a18      	ldr	r2, [pc, #96]	; (8005b88 <TIM_OC4_SetConfig+0xc4>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d007      	beq.n	8005b3c <TIM_OC4_SetConfig+0x78>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a17      	ldr	r2, [pc, #92]	; (8005b8c <TIM_OC4_SetConfig+0xc8>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d003      	beq.n	8005b3c <TIM_OC4_SetConfig+0x78>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a16      	ldr	r2, [pc, #88]	; (8005b90 <TIM_OC4_SetConfig+0xcc>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d109      	bne.n	8005b50 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	4a15      	ldr	r2, [pc, #84]	; (8005b94 <TIM_OC4_SetConfig+0xd0>)
 8005b40:	4013      	ands	r3, r2
 8005b42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	019b      	lsls	r3, r3, #6
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	621a      	str	r2, [r3, #32]
}
 8005b6a:	46c0      	nop			; (mov r8, r8)
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	b006      	add	sp, #24
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	46c0      	nop			; (mov r8, r8)
 8005b74:	ffffefff 	.word	0xffffefff
 8005b78:	ffff8fff 	.word	0xffff8fff
 8005b7c:	fffffcff 	.word	0xfffffcff
 8005b80:	ffffdfff 	.word	0xffffdfff
 8005b84:	40012c00 	.word	0x40012c00
 8005b88:	40014000 	.word	0x40014000
 8005b8c:	40014400 	.word	0x40014400
 8005b90:	40014800 	.word	0x40014800
 8005b94:	ffffbfff 	.word	0xffffbfff

08005b98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6a1b      	ldr	r3, [r3, #32]
 8005ba8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	4393      	bics	r3, r2
 8005bb2:	001a      	movs	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	22f0      	movs	r2, #240	; 0xf0
 8005bc2:	4393      	bics	r3, r2
 8005bc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	011b      	lsls	r3, r3, #4
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	220a      	movs	r2, #10
 8005bd4:	4393      	bics	r3, r2
 8005bd6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	621a      	str	r2, [r3, #32]
}
 8005bec:	46c0      	nop			; (mov r8, r8)
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	b006      	add	sp, #24
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b086      	sub	sp, #24
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6a1b      	ldr	r3, [r3, #32]
 8005c04:	2210      	movs	r2, #16
 8005c06:	4393      	bics	r3, r2
 8005c08:	001a      	movs	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6a1b      	ldr	r3, [r3, #32]
 8005c18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	4a0d      	ldr	r2, [pc, #52]	; (8005c54 <TIM_TI2_ConfigInputStage+0x60>)
 8005c1e:	4013      	ands	r3, r2
 8005c20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	031b      	lsls	r3, r3, #12
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	22a0      	movs	r2, #160	; 0xa0
 8005c30:	4393      	bics	r3, r2
 8005c32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	011b      	lsls	r3, r3, #4
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	621a      	str	r2, [r3, #32]
}
 8005c4a:	46c0      	nop			; (mov r8, r8)
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	b006      	add	sp, #24
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	46c0      	nop			; (mov r8, r8)
 8005c54:	ffff0fff 	.word	0xffff0fff

08005c58 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2270      	movs	r2, #112	; 0x70
 8005c6c:	4393      	bics	r3, r2
 8005c6e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c70:	683a      	ldr	r2, [r7, #0]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	2207      	movs	r2, #7
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	609a      	str	r2, [r3, #8]
}
 8005c82:	46c0      	nop			; (mov r8, r8)
 8005c84:	46bd      	mov	sp, r7
 8005c86:	b004      	add	sp, #16
 8005c88:	bd80      	pop	{r7, pc}
	...

08005c8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
 8005c98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	4a09      	ldr	r2, [pc, #36]	; (8005cc8 <TIM_ETR_SetConfig+0x3c>)
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	021a      	lsls	r2, r3, #8
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	431a      	orrs	r2, r3
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	609a      	str	r2, [r3, #8]
}
 8005cc0:	46c0      	nop			; (mov r8, r8)
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	b006      	add	sp, #24
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	ffff00ff 	.word	0xffff00ff

08005ccc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	221f      	movs	r2, #31
 8005cdc:	4013      	ands	r3, r2
 8005cde:	2201      	movs	r2, #1
 8005ce0:	409a      	lsls	r2, r3
 8005ce2:	0013      	movs	r3, r2
 8005ce4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	43d2      	mvns	r2, r2
 8005cee:	401a      	ands	r2, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6a1a      	ldr	r2, [r3, #32]
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	211f      	movs	r1, #31
 8005cfc:	400b      	ands	r3, r1
 8005cfe:	6879      	ldr	r1, [r7, #4]
 8005d00:	4099      	lsls	r1, r3
 8005d02:	000b      	movs	r3, r1
 8005d04:	431a      	orrs	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	621a      	str	r2, [r3, #32]
}
 8005d0a:	46c0      	nop			; (mov r8, r8)
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	b006      	add	sp, #24
 8005d10:	bd80      	pop	{r7, pc}
	...

08005d14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	223c      	movs	r2, #60	; 0x3c
 8005d22:	5c9b      	ldrb	r3, [r3, r2]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d101      	bne.n	8005d2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d28:	2302      	movs	r3, #2
 8005d2a:	e047      	b.n	8005dbc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	223c      	movs	r2, #60	; 0x3c
 8005d30:	2101      	movs	r1, #1
 8005d32:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	223d      	movs	r2, #61	; 0x3d
 8005d38:	2102      	movs	r1, #2
 8005d3a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2270      	movs	r2, #112	; 0x70
 8005d50:	4393      	bics	r3, r2
 8005d52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a16      	ldr	r2, [pc, #88]	; (8005dc4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d00f      	beq.n	8005d90 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	2380      	movs	r3, #128	; 0x80
 8005d76:	05db      	lsls	r3, r3, #23
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d009      	beq.n	8005d90 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a11      	ldr	r2, [pc, #68]	; (8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d004      	beq.n	8005d90 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a10      	ldr	r2, [pc, #64]	; (8005dcc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d10c      	bne.n	8005daa <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	2280      	movs	r2, #128	; 0x80
 8005d94:	4393      	bics	r3, r2
 8005d96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	68ba      	ldr	r2, [r7, #8]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	223d      	movs	r2, #61	; 0x3d
 8005dae:	2101      	movs	r1, #1
 8005db0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	223c      	movs	r2, #60	; 0x3c
 8005db6:	2100      	movs	r1, #0
 8005db8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	0018      	movs	r0, r3
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	b004      	add	sp, #16
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	40012c00 	.word	0x40012c00
 8005dc8:	40000400 	.word	0x40000400
 8005dcc:	40014000 	.word	0x40014000

08005dd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005dd8:	46c0      	nop			; (mov r8, r8)
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	b002      	add	sp, #8
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005de8:	46c0      	nop			; (mov r8, r8)
 8005dea:	46bd      	mov	sp, r7
 8005dec:	b002      	add	sp, #8
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <__libc_init_array>:
 8005df0:	b570      	push	{r4, r5, r6, lr}
 8005df2:	2600      	movs	r6, #0
 8005df4:	4d0c      	ldr	r5, [pc, #48]	; (8005e28 <__libc_init_array+0x38>)
 8005df6:	4c0d      	ldr	r4, [pc, #52]	; (8005e2c <__libc_init_array+0x3c>)
 8005df8:	1b64      	subs	r4, r4, r5
 8005dfa:	10a4      	asrs	r4, r4, #2
 8005dfc:	42a6      	cmp	r6, r4
 8005dfe:	d109      	bne.n	8005e14 <__libc_init_array+0x24>
 8005e00:	2600      	movs	r6, #0
 8005e02:	f000 f821 	bl	8005e48 <_init>
 8005e06:	4d0a      	ldr	r5, [pc, #40]	; (8005e30 <__libc_init_array+0x40>)
 8005e08:	4c0a      	ldr	r4, [pc, #40]	; (8005e34 <__libc_init_array+0x44>)
 8005e0a:	1b64      	subs	r4, r4, r5
 8005e0c:	10a4      	asrs	r4, r4, #2
 8005e0e:	42a6      	cmp	r6, r4
 8005e10:	d105      	bne.n	8005e1e <__libc_init_array+0x2e>
 8005e12:	bd70      	pop	{r4, r5, r6, pc}
 8005e14:	00b3      	lsls	r3, r6, #2
 8005e16:	58eb      	ldr	r3, [r5, r3]
 8005e18:	4798      	blx	r3
 8005e1a:	3601      	adds	r6, #1
 8005e1c:	e7ee      	b.n	8005dfc <__libc_init_array+0xc>
 8005e1e:	00b3      	lsls	r3, r6, #2
 8005e20:	58eb      	ldr	r3, [r5, r3]
 8005e22:	4798      	blx	r3
 8005e24:	3601      	adds	r6, #1
 8005e26:	e7f2      	b.n	8005e0e <__libc_init_array+0x1e>
 8005e28:	08005fd0 	.word	0x08005fd0
 8005e2c:	08005fd0 	.word	0x08005fd0
 8005e30:	08005fd0 	.word	0x08005fd0
 8005e34:	08005fd4 	.word	0x08005fd4

08005e38 <memset>:
 8005e38:	0003      	movs	r3, r0
 8005e3a:	1882      	adds	r2, r0, r2
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d100      	bne.n	8005e42 <memset+0xa>
 8005e40:	4770      	bx	lr
 8005e42:	7019      	strb	r1, [r3, #0]
 8005e44:	3301      	adds	r3, #1
 8005e46:	e7f9      	b.n	8005e3c <memset+0x4>

08005e48 <_init>:
 8005e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e4a:	46c0      	nop			; (mov r8, r8)
 8005e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e4e:	bc08      	pop	{r3}
 8005e50:	469e      	mov	lr, r3
 8005e52:	4770      	bx	lr

08005e54 <_fini>:
 8005e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e56:	46c0      	nop			; (mov r8, r8)
 8005e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e5a:	bc08      	pop	{r3}
 8005e5c:	469e      	mov	lr, r3
 8005e5e:	4770      	bx	lr
