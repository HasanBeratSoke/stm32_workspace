
RTC-LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003554  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003614  08003614  00013614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036a0  080036a0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080036a0  080036a0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036a0  080036a0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036a0  080036a0  000136a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036a4  080036a4  000136a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080036a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000070  08003718  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08003718  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000846d  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a3e  00000000  00000000  00028505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000808  00000000  00000000  00029f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000720  00000000  00000000  0002a750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012073  00000000  00000000  0002ae70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ac54  00000000  00000000  0003cee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006a110  00000000  00000000  00047b37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b1c47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ef0  00000000  00000000  000b1c98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080035fc 	.word	0x080035fc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080035fc 	.word	0x080035fc

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	b087      	sub	sp, #28
 8000238:	af02      	add	r7, sp, #8
 800023a:	0002      	movs	r2, r0
 800023c:	1dfb      	adds	r3, r7, #7
 800023e:	701a      	strb	r2, [r3, #0]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000240:	200f      	movs	r0, #15
 8000242:	183b      	adds	r3, r7, r0
 8000244:	1dfa      	adds	r2, r7, #7
 8000246:	7812      	ldrb	r2, [r2, #0]
 8000248:	210f      	movs	r1, #15
 800024a:	438a      	bics	r2, r1
 800024c:	701a      	strb	r2, [r3, #0]
	data_l = ((cmd<<4)&0xf0);
 800024e:	1dfb      	adds	r3, r7, #7
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	011a      	lsls	r2, r3, #4
 8000254:	240e      	movs	r4, #14
 8000256:	193b      	adds	r3, r7, r4
 8000258:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800025a:	183b      	adds	r3, r7, r0
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	220c      	movs	r2, #12
 8000260:	4313      	orrs	r3, r2
 8000262:	b2da      	uxtb	r2, r3
 8000264:	2108      	movs	r1, #8
 8000266:	187b      	adds	r3, r7, r1
 8000268:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800026a:	183b      	adds	r3, r7, r0
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	2208      	movs	r2, #8
 8000270:	4313      	orrs	r3, r2
 8000272:	b2da      	uxtb	r2, r3
 8000274:	187b      	adds	r3, r7, r1
 8000276:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000278:	193b      	adds	r3, r7, r4
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	220c      	movs	r2, #12
 800027e:	4313      	orrs	r3, r2
 8000280:	b2da      	uxtb	r2, r3
 8000282:	187b      	adds	r3, r7, r1
 8000284:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000286:	193b      	adds	r3, r7, r4
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	2208      	movs	r2, #8
 800028c:	4313      	orrs	r3, r2
 800028e:	b2da      	uxtb	r2, r3
 8000290:	187b      	adds	r3, r7, r1
 8000292:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000294:	187a      	adds	r2, r7, r1
 8000296:	4805      	ldr	r0, [pc, #20]	; (80002ac <lcd_send_cmd+0x78>)
 8000298:	2364      	movs	r3, #100	; 0x64
 800029a:	9300      	str	r3, [sp, #0]
 800029c:	2304      	movs	r3, #4
 800029e:	214e      	movs	r1, #78	; 0x4e
 80002a0:	f001 f85e 	bl	8001360 <HAL_I2C_Master_Transmit>
}
 80002a4:	46c0      	nop			; (mov r8, r8)
 80002a6:	46bd      	mov	sp, r7
 80002a8:	b005      	add	sp, #20
 80002aa:	bd90      	pop	{r4, r7, pc}
 80002ac:	2000008c 	.word	0x2000008c

080002b0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80002b0:	b590      	push	{r4, r7, lr}
 80002b2:	b087      	sub	sp, #28
 80002b4:	af02      	add	r7, sp, #8
 80002b6:	0002      	movs	r2, r0
 80002b8:	1dfb      	adds	r3, r7, #7
 80002ba:	701a      	strb	r2, [r3, #0]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80002bc:	200f      	movs	r0, #15
 80002be:	183b      	adds	r3, r7, r0
 80002c0:	1dfa      	adds	r2, r7, #7
 80002c2:	7812      	ldrb	r2, [r2, #0]
 80002c4:	210f      	movs	r1, #15
 80002c6:	438a      	bics	r2, r1
 80002c8:	701a      	strb	r2, [r3, #0]
	data_l = ((data<<4)&0xf0);
 80002ca:	1dfb      	adds	r3, r7, #7
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	011a      	lsls	r2, r3, #4
 80002d0:	240e      	movs	r4, #14
 80002d2:	193b      	adds	r3, r7, r4
 80002d4:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80002d6:	183b      	adds	r3, r7, r0
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	220d      	movs	r2, #13
 80002dc:	4313      	orrs	r3, r2
 80002de:	b2da      	uxtb	r2, r3
 80002e0:	2108      	movs	r1, #8
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80002e6:	183b      	adds	r3, r7, r0
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	2209      	movs	r2, #9
 80002ec:	4313      	orrs	r3, r2
 80002ee:	b2da      	uxtb	r2, r3
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80002f4:	193b      	adds	r3, r7, r4
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	220d      	movs	r2, #13
 80002fa:	4313      	orrs	r3, r2
 80002fc:	b2da      	uxtb	r2, r3
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000302:	193b      	adds	r3, r7, r4
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	2209      	movs	r2, #9
 8000308:	4313      	orrs	r3, r2
 800030a:	b2da      	uxtb	r2, r3
 800030c:	187b      	adds	r3, r7, r1
 800030e:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000310:	187a      	adds	r2, r7, r1
 8000312:	4805      	ldr	r0, [pc, #20]	; (8000328 <lcd_send_data+0x78>)
 8000314:	2364      	movs	r3, #100	; 0x64
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	2304      	movs	r3, #4
 800031a:	214e      	movs	r1, #78	; 0x4e
 800031c:	f001 f820 	bl	8001360 <HAL_I2C_Master_Transmit>
}
 8000320:	46c0      	nop			; (mov r8, r8)
 8000322:	46bd      	mov	sp, r7
 8000324:	b005      	add	sp, #20
 8000326:	bd90      	pop	{r4, r7, pc}
 8000328:	2000008c 	.word	0x2000008c

0800032c <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	6039      	str	r1, [r7, #0]
    switch (row)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d003      	beq.n	8000344 <lcd_put_cur+0x18>
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	2b01      	cmp	r3, #1
 8000340:	d005      	beq.n	800034e <lcd_put_cur+0x22>
 8000342:	e009      	b.n	8000358 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	2280      	movs	r2, #128	; 0x80
 8000348:	4313      	orrs	r3, r2
 800034a:	603b      	str	r3, [r7, #0]
            break;
 800034c:	e004      	b.n	8000358 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	22c0      	movs	r2, #192	; 0xc0
 8000352:	4313      	orrs	r3, r2
 8000354:	603b      	str	r3, [r7, #0]
            break;
 8000356:	46c0      	nop			; (mov r8, r8)
    }

    lcd_send_cmd (col);
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	b2db      	uxtb	r3, r3
 800035c:	0018      	movs	r0, r3
 800035e:	f7ff ff69 	bl	8000234 <lcd_send_cmd>
}
 8000362:	46c0      	nop			; (mov r8, r8)
 8000364:	46bd      	mov	sp, r7
 8000366:	b002      	add	sp, #8
 8000368:	bd80      	pop	{r7, pc}

0800036a <lcd_init>:


void lcd_init (void)
{
 800036a:	b580      	push	{r7, lr}
 800036c:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800036e:	2032      	movs	r0, #50	; 0x32
 8000370:	f000 fcb4 	bl	8000cdc <HAL_Delay>
	lcd_send_cmd (0x30);
 8000374:	2030      	movs	r0, #48	; 0x30
 8000376:	f7ff ff5d 	bl	8000234 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800037a:	2005      	movs	r0, #5
 800037c:	f000 fcae 	bl	8000cdc <HAL_Delay>
	lcd_send_cmd (0x30);
 8000380:	2030      	movs	r0, #48	; 0x30
 8000382:	f7ff ff57 	bl	8000234 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000386:	2001      	movs	r0, #1
 8000388:	f000 fca8 	bl	8000cdc <HAL_Delay>
	lcd_send_cmd (0x30);
 800038c:	2030      	movs	r0, #48	; 0x30
 800038e:	f7ff ff51 	bl	8000234 <lcd_send_cmd>
	HAL_Delay(10);
 8000392:	200a      	movs	r0, #10
 8000394:	f000 fca2 	bl	8000cdc <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000398:	2020      	movs	r0, #32
 800039a:	f7ff ff4b 	bl	8000234 <lcd_send_cmd>
	HAL_Delay(10);
 800039e:	200a      	movs	r0, #10
 80003a0:	f000 fc9c 	bl	8000cdc <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80003a4:	2028      	movs	r0, #40	; 0x28
 80003a6:	f7ff ff45 	bl	8000234 <lcd_send_cmd>
	HAL_Delay(1);
 80003aa:	2001      	movs	r0, #1
 80003ac:	f000 fc96 	bl	8000cdc <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80003b0:	2008      	movs	r0, #8
 80003b2:	f7ff ff3f 	bl	8000234 <lcd_send_cmd>
	HAL_Delay(1);
 80003b6:	2001      	movs	r0, #1
 80003b8:	f000 fc90 	bl	8000cdc <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80003bc:	2001      	movs	r0, #1
 80003be:	f7ff ff39 	bl	8000234 <lcd_send_cmd>
	HAL_Delay(1);
 80003c2:	2001      	movs	r0, #1
 80003c4:	f000 fc8a 	bl	8000cdc <HAL_Delay>
	HAL_Delay(1);
 80003c8:	2001      	movs	r0, #1
 80003ca:	f000 fc87 	bl	8000cdc <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80003ce:	2006      	movs	r0, #6
 80003d0:	f7ff ff30 	bl	8000234 <lcd_send_cmd>
	HAL_Delay(1);
 80003d4:	2001      	movs	r0, #1
 80003d6:	f000 fc81 	bl	8000cdc <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80003da:	200c      	movs	r0, #12
 80003dc:	f7ff ff2a 	bl	8000234 <lcd_send_cmd>
}
 80003e0:	46c0      	nop			; (mov r8, r8)
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}

080003e6 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80003e6:	b580      	push	{r7, lr}
 80003e8:	b082      	sub	sp, #8
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80003ee:	e006      	b.n	80003fe <lcd_send_string+0x18>
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	1c5a      	adds	r2, r3, #1
 80003f4:	607a      	str	r2, [r7, #4]
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	0018      	movs	r0, r3
 80003fa:	f7ff ff59 	bl	80002b0 <lcd_send_data>
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d1f4      	bne.n	80003f0 <lcd_send_string+0xa>
}
 8000406:	46c0      	nop			; (mov r8, r8)
 8000408:	46c0      	nop			; (mov r8, r8)
 800040a:	46bd      	mov	sp, r7
 800040c:	b002      	add	sp, #8
 800040e:	bd80      	pop	{r7, pc}

08000410 <set_time>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_time(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b086      	sub	sp, #24
 8000414:	af00      	add	r7, sp, #0
	  RTC_TimeTypeDef sTime = {0};
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	0018      	movs	r0, r3
 800041a:	2314      	movs	r3, #20
 800041c:	001a      	movs	r2, r3
 800041e:	2100      	movs	r1, #0
 8000420:	f002 fc7a 	bl	8002d18 <memset>
	  RTC_DateTypeDef sDate = {0};
 8000424:	003b      	movs	r3, r7
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]

	  sTime.Hours = 0x00;
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	2200      	movs	r2, #0
 800042e:	701a      	strb	r2, [r3, #0]
	  sTime.Minutes = 0x00;
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	2200      	movs	r2, #0
 8000434:	705a      	strb	r2, [r3, #1]
	  sTime.Seconds = 0x00;
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	2200      	movs	r2, #0
 800043a:	709a      	strb	r2, [r3, #2]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	2200      	movs	r2, #0
 8000440:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	2200      	movs	r2, #0
 8000446:	611a      	str	r2, [r3, #16]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000448:	1d39      	adds	r1, r7, #4
 800044a:	4b11      	ldr	r3, [pc, #68]	; (8000490 <set_time+0x80>)
 800044c:	2201      	movs	r2, #1
 800044e:	0018      	movs	r0, r3
 8000450:	f002 f870 	bl	8002534 <HAL_RTC_SetTime>
 8000454:	1e03      	subs	r3, r0, #0
 8000456:	d001      	beq.n	800045c <set_time+0x4c>
	  {
	    Error_Handler();
 8000458:	f000 faba 	bl	80009d0 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800045c:	003b      	movs	r3, r7
 800045e:	2201      	movs	r2, #1
 8000460:	701a      	strb	r2, [r3, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 8000462:	003b      	movs	r3, r7
 8000464:	2201      	movs	r2, #1
 8000466:	705a      	strb	r2, [r3, #1]
	  sDate.Date = 0x9;
 8000468:	003b      	movs	r3, r7
 800046a:	2209      	movs	r2, #9
 800046c:	709a      	strb	r2, [r3, #2]
	  sDate.Year = 0x22;
 800046e:	003b      	movs	r3, r7
 8000470:	2222      	movs	r2, #34	; 0x22
 8000472:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000474:	0039      	movs	r1, r7
 8000476:	4b06      	ldr	r3, [pc, #24]	; (8000490 <set_time+0x80>)
 8000478:	2201      	movs	r2, #1
 800047a:	0018      	movs	r0, r3
 800047c:	f002 f974 	bl	8002768 <HAL_RTC_SetDate>
 8000480:	1e03      	subs	r3, r0, #0
 8000482:	d001      	beq.n	8000488 <set_time+0x78>
	  {
	    Error_Handler();
 8000484:	f000 faa4 	bl	80009d0 <Error_Handler>
	  }

}
 8000488:	46c0      	nop			; (mov r8, r8)
 800048a:	46bd      	mov	sp, r7
 800048c:	b006      	add	sp, #24
 800048e:	bd80      	pop	{r7, pc}
 8000490:	200000d8 	.word	0x200000d8

08000494 <set_alarm>:

void set_alarm(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b08a      	sub	sp, #40	; 0x28
 8000498:	af00      	add	r7, sp, #0
	  RTC_AlarmTypeDef sAlarm = {0};
 800049a:	003b      	movs	r3, r7
 800049c:	0018      	movs	r0, r3
 800049e:	2328      	movs	r3, #40	; 0x28
 80004a0:	001a      	movs	r2, r3
 80004a2:	2100      	movs	r1, #0
 80004a4:	f002 fc38 	bl	8002d18 <memset>

	  sAlarm.AlarmTime.Hours = 0x0;
 80004a8:	003b      	movs	r3, r7
 80004aa:	2200      	movs	r2, #0
 80004ac:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = 0x0;
 80004ae:	003b      	movs	r3, r7
 80004b0:	2200      	movs	r2, #0
 80004b2:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = 0x10;
 80004b4:	003b      	movs	r3, r7
 80004b6:	2210      	movs	r2, #16
 80004b8:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 80004ba:	003b      	movs	r3, r7
 80004bc:	2200      	movs	r2, #0
 80004be:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80004c0:	003b      	movs	r3, r7
 80004c2:	2200      	movs	r2, #0
 80004c4:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80004c6:	003b      	movs	r3, r7
 80004c8:	2200      	movs	r2, #0
 80004ca:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80004cc:	003b      	movs	r3, r7
 80004ce:	2200      	movs	r2, #0
 80004d0:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80004d2:	003b      	movs	r3, r7
 80004d4:	2200      	movs	r2, #0
 80004d6:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80004d8:	003b      	movs	r3, r7
 80004da:	2200      	movs	r2, #0
 80004dc:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x9;
 80004de:	003b      	movs	r3, r7
 80004e0:	2220      	movs	r2, #32
 80004e2:	2109      	movs	r1, #9
 80004e4:	5499      	strb	r1, [r3, r2]
	  sAlarm.Alarm = RTC_ALARM_A;
 80004e6:	003b      	movs	r3, r7
 80004e8:	2280      	movs	r2, #128	; 0x80
 80004ea:	0052      	lsls	r2, r2, #1
 80004ec:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80004ee:	0039      	movs	r1, r7
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <set_alarm+0x78>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	0018      	movs	r0, r3
 80004f6:	f002 fa2d 	bl	8002954 <HAL_RTC_SetAlarm_IT>
 80004fa:	1e03      	subs	r3, r0, #0
 80004fc:	d001      	beq.n	8000502 <set_alarm+0x6e>
	  {
	    Error_Handler();
 80004fe:	f000 fa67 	bl	80009d0 <Error_Handler>
	  }
}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	46bd      	mov	sp, r7
 8000506:	b00a      	add	sp, #40	; 0x28
 8000508:	bd80      	pop	{r7, pc}
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	200000d8 	.word	0x200000d8

08000510 <get_time>:

void get_time()
{
 8000510:	b5b0      	push	{r4, r5, r7, lr}
 8000512:	b088      	sub	sp, #32
 8000514:	af02      	add	r7, sp, #8
	 RTC_DateTypeDef gDate;
	 RTC_TimeTypeDef gTime;

	 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8000516:	0039      	movs	r1, r7
 8000518:	4b17      	ldr	r3, [pc, #92]	; (8000578 <get_time+0x68>)
 800051a:	2200      	movs	r2, #0
 800051c:	0018      	movs	r0, r3
 800051e:	f002 f8c5 	bl	80026ac <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8000522:	2514      	movs	r5, #20
 8000524:	1979      	adds	r1, r7, r5
 8000526:	4b14      	ldr	r3, [pc, #80]	; (8000578 <get_time+0x68>)
 8000528:	2200      	movs	r2, #0
 800052a:	0018      	movs	r0, r3
 800052c:	f002 f9c2 	bl	80028b4 <HAL_RTC_GetDate>

	 sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8000530:	003b      	movs	r3, r7
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	001a      	movs	r2, r3
 8000536:	003b      	movs	r3, r7
 8000538:	785b      	ldrb	r3, [r3, #1]
 800053a:	001c      	movs	r4, r3
 800053c:	003b      	movs	r3, r7
 800053e:	789b      	ldrb	r3, [r3, #2]
 8000540:	490e      	ldr	r1, [pc, #56]	; (800057c <get_time+0x6c>)
 8000542:	480f      	ldr	r0, [pc, #60]	; (8000580 <get_time+0x70>)
 8000544:	9300      	str	r3, [sp, #0]
 8000546:	0023      	movs	r3, r4
 8000548:	f002 fbee 	bl	8002d28 <siprintf>
	 sprintf((char*)date,"%02d-%02d-%2d",gDate.Date, gDate.Month, 2000 + gDate.Year);
 800054c:	197b      	adds	r3, r7, r5
 800054e:	789b      	ldrb	r3, [r3, #2]
 8000550:	001a      	movs	r2, r3
 8000552:	197b      	adds	r3, r7, r5
 8000554:	785b      	ldrb	r3, [r3, #1]
 8000556:	001c      	movs	r4, r3
 8000558:	197b      	adds	r3, r7, r5
 800055a:	78db      	ldrb	r3, [r3, #3]
 800055c:	21fa      	movs	r1, #250	; 0xfa
 800055e:	00c9      	lsls	r1, r1, #3
 8000560:	468c      	mov	ip, r1
 8000562:	4463      	add	r3, ip
 8000564:	4907      	ldr	r1, [pc, #28]	; (8000584 <get_time+0x74>)
 8000566:	4808      	ldr	r0, [pc, #32]	; (8000588 <get_time+0x78>)
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	0023      	movs	r3, r4
 800056c:	f002 fbdc 	bl	8002d28 <siprintf>
}
 8000570:	46c0      	nop			; (mov r8, r8)
 8000572:	46bd      	mov	sp, r7
 8000574:	b006      	add	sp, #24
 8000576:	bdb0      	pop	{r4, r5, r7, pc}
 8000578:	200000d8 	.word	0x200000d8
 800057c:	08003614 	.word	0x08003614
 8000580:	200000f8 	.word	0x200000f8
 8000584:	08003624 	.word	0x08003624
 8000588:	20000104 	.word	0x20000104

0800058c <display_time>:

void display_time (void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
 lcd_send_cmd (0x80); // send cursor to 0,0
 8000590:	2080      	movs	r0, #128	; 0x80
 8000592:	f7ff fe4f 	bl	8000234 <lcd_send_cmd>
 lcd_send_string (time);
 8000596:	4b03      	ldr	r3, [pc, #12]	; (80005a4 <display_time+0x18>)
 8000598:	0018      	movs	r0, r3
 800059a:	f7ff ff24 	bl	80003e6 <lcd_send_string>
 //lcd_send_cmd (0xc0); // send cursor to 1,0
 //lcd_send_string (date);
}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200000f8 	.word	0x200000f8

080005a8 <HAL_RTC_AlarmAEventCallback>:


void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	alarm = 1;
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <HAL_RTC_AlarmAEventCallback+0x18>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	701a      	strb	r2, [r3, #0]
}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	46bd      	mov	sp, r7
 80005ba:	b002      	add	sp, #8
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	2000010e 	.word	0x2000010e

080005c4 <alarm_todo>:

void alarm_todo()
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, SET);
 80005c8:	2380      	movs	r3, #128	; 0x80
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	4807      	ldr	r0, [pc, #28]	; (80005ec <alarm_todo+0x28>)
 80005ce:	2201      	movs	r2, #1
 80005d0:	0019      	movs	r1, r3
 80005d2:	f000 fe12 	bl	80011fa <HAL_GPIO_WritePin>

	lcd_put_cur(1, 11);
 80005d6:	210b      	movs	r1, #11
 80005d8:	2001      	movs	r0, #1
 80005da:	f7ff fea7 	bl	800032c <lcd_put_cur>
	lcd_send_string("alarm");
 80005de:	4b04      	ldr	r3, [pc, #16]	; (80005f0 <alarm_todo+0x2c>)
 80005e0:	0018      	movs	r0, r3
 80005e2:	f7ff ff00 	bl	80003e6 <lcd_send_string>
	//HAL_Delay(2000);
}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	48000800 	.word	0x48000800
 80005f0:	08003634 	.word	0x08003634

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f000 fb0c 	bl	8000c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f82c 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 f96e 	bl	80008e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000604:	f000 f892 	bl	800072c <MX_I2C1_Init>
  MX_RTC_Init();
 8000608:	f000 f8d0 	bl	80007ac <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  lcd_init();
 800060c:	f7ff fead 	bl	800036a <lcd_init>
// HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2

  set_time();
 8000610:	f7ff fefe 	bl	8000410 <set_time>

  set_alarm();
 8000614:	f7ff ff3e 	bl	8000494 <set_alarm>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  get_time();
 8000618:	f7ff ff7a 	bl	8000510 <get_time>
	  display_time();
 800061c:	f7ff ffb6 	bl	800058c <display_time>

	  if (alarm == 1)
 8000620:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <main+0x5c>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b01      	cmp	r3, #1
 8000626:	d101      	bne.n	800062c <main+0x38>
	  {
		  alarm_todo();
 8000628:	f7ff ffcc 	bl	80005c4 <alarm_todo>
	  }


	  if(HAL_GPIO_ReadPin(GPIOA, B1_Pin))
 800062c:	2390      	movs	r3, #144	; 0x90
 800062e:	05db      	lsls	r3, r3, #23
 8000630:	2101      	movs	r1, #1
 8000632:	0018      	movs	r0, r3
 8000634:	f000 fdc4 	bl	80011c0 <HAL_GPIO_ReadPin>
 8000638:	1e03      	subs	r3, r0, #0
 800063a:	d0ed      	beq.n	8000618 <main+0x24>
	  {
		  lcd_put_cur(1, 0);
 800063c:	2100      	movs	r1, #0
 800063e:	2001      	movs	r0, #1
 8000640:	f7ff fe74 	bl	800032c <lcd_put_cur>
		  lcd_send_string(time);
 8000644:	4b03      	ldr	r3, [pc, #12]	; (8000654 <main+0x60>)
 8000646:	0018      	movs	r0, r3
 8000648:	f7ff fecd 	bl	80003e6 <lcd_send_string>
	  get_time();
 800064c:	e7e4      	b.n	8000618 <main+0x24>
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	2000010e 	.word	0x2000010e
 8000654:	200000f8 	.word	0x200000f8

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b097      	sub	sp, #92	; 0x5c
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	2428      	movs	r4, #40	; 0x28
 8000660:	193b      	adds	r3, r7, r4
 8000662:	0018      	movs	r0, r3
 8000664:	2330      	movs	r3, #48	; 0x30
 8000666:	001a      	movs	r2, r3
 8000668:	2100      	movs	r1, #0
 800066a:	f002 fb55 	bl	8002d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066e:	2318      	movs	r3, #24
 8000670:	18fb      	adds	r3, r7, r3
 8000672:	0018      	movs	r0, r3
 8000674:	2310      	movs	r3, #16
 8000676:	001a      	movs	r2, r3
 8000678:	2100      	movs	r1, #0
 800067a:	f002 fb4d 	bl	8002d18 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	0018      	movs	r0, r3
 8000682:	2314      	movs	r3, #20
 8000684:	001a      	movs	r2, r3
 8000686:	2100      	movs	r1, #0
 8000688:	f002 fb46 	bl	8002d18 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800068c:	0021      	movs	r1, r4
 800068e:	187b      	adds	r3, r7, r1
 8000690:	220a      	movs	r2, #10
 8000692:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000694:	187b      	adds	r3, r7, r1
 8000696:	2201      	movs	r2, #1
 8000698:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2210      	movs	r2, #16
 800069e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2201      	movs	r2, #1
 80006a4:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2202      	movs	r2, #2
 80006aa:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2200      	movs	r2, #0
 80006b0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	22a0      	movs	r2, #160	; 0xa0
 80006b6:	0392      	lsls	r2, r2, #14
 80006b8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2200      	movs	r2, #0
 80006be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	0018      	movs	r0, r3
 80006c4:	f001 f978 	bl	80019b8 <HAL_RCC_OscConfig>
 80006c8:	1e03      	subs	r3, r0, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80006cc:	f000 f980 	bl	80009d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d0:	2118      	movs	r1, #24
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2207      	movs	r2, #7
 80006d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2202      	movs	r2, #2
 80006dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2100      	movs	r1, #0
 80006ee:	0018      	movs	r0, r3
 80006f0:	f001 fc7c 	bl	8001fec <HAL_RCC_ClockConfig>
 80006f4:	1e03      	subs	r3, r0, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80006f8:	f000 f96a 	bl	80009d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	4a0a      	ldr	r2, [pc, #40]	; (8000728 <SystemClock_Config+0xd0>)
 8000700:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	2280      	movs	r2, #128	; 0x80
 800070c:	0092      	lsls	r2, r2, #2
 800070e:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	0018      	movs	r0, r3
 8000714:	f001 fd9c 	bl	8002250 <HAL_RCCEx_PeriphCLKConfig>
 8000718:	1e03      	subs	r3, r0, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800071c:	f000 f958 	bl	80009d0 <Error_Handler>
  }
}
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	b017      	add	sp, #92	; 0x5c
 8000726:	bd90      	pop	{r4, r7, pc}
 8000728:	00010020 	.word	0x00010020

0800072c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000730:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000732:	4a1c      	ldr	r2, [pc, #112]	; (80007a4 <MX_I2C1_Init+0x78>)
 8000734:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000736:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000738:	4a1b      	ldr	r2, [pc, #108]	; (80007a8 <MX_I2C1_Init+0x7c>)
 800073a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800073c:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <MX_I2C1_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000744:	2201      	movs	r2, #1
 8000746:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000748:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <MX_I2C1_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_I2C1_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000768:	0018      	movs	r0, r3
 800076a:	f000 fd63 	bl	8001234 <HAL_I2C_Init>
 800076e:	1e03      	subs	r3, r0, #0
 8000770:	d001      	beq.n	8000776 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000772:	f000 f92d 	bl	80009d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000776:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000778:	2100      	movs	r1, #0
 800077a:	0018      	movs	r0, r3
 800077c:	f001 f884 	bl	8001888 <HAL_I2CEx_ConfigAnalogFilter>
 8000780:	1e03      	subs	r3, r0, #0
 8000782:	d001      	beq.n	8000788 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000784:	f000 f924 	bl	80009d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <MX_I2C1_Init+0x74>)
 800078a:	2100      	movs	r1, #0
 800078c:	0018      	movs	r0, r3
 800078e:	f001 f8c7 	bl	8001920 <HAL_I2CEx_ConfigDigitalFilter>
 8000792:	1e03      	subs	r3, r0, #0
 8000794:	d001      	beq.n	800079a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000796:	f000 f91b 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	2000008c 	.word	0x2000008c
 80007a4:	40005400 	.word	0x40005400
 80007a8:	0000020b 	.word	0x0000020b

080007ac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b090      	sub	sp, #64	; 0x40
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80007b2:	232c      	movs	r3, #44	; 0x2c
 80007b4:	18fb      	adds	r3, r7, r3
 80007b6:	0018      	movs	r0, r3
 80007b8:	2314      	movs	r3, #20
 80007ba:	001a      	movs	r2, r3
 80007bc:	2100      	movs	r1, #0
 80007be:	f002 faab 	bl	8002d18 <memset>
  RTC_DateTypeDef sDate = {0};
 80007c2:	2328      	movs	r3, #40	; 0x28
 80007c4:	18fb      	adds	r3, r7, r3
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80007ca:	003b      	movs	r3, r7
 80007cc:	0018      	movs	r0, r3
 80007ce:	2328      	movs	r3, #40	; 0x28
 80007d0:	001a      	movs	r2, r3
 80007d2:	2100      	movs	r1, #0
 80007d4:	f002 faa0 	bl	8002d18 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007d8:	4b3f      	ldr	r3, [pc, #252]	; (80008d8 <MX_RTC_Init+0x12c>)
 80007da:	4a40      	ldr	r2, [pc, #256]	; (80008dc <MX_RTC_Init+0x130>)
 80007dc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007de:	4b3e      	ldr	r3, [pc, #248]	; (80008d8 <MX_RTC_Init+0x12c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007e4:	4b3c      	ldr	r3, [pc, #240]	; (80008d8 <MX_RTC_Init+0x12c>)
 80007e6:	227f      	movs	r2, #127	; 0x7f
 80007e8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 310;
 80007ea:	4b3b      	ldr	r3, [pc, #236]	; (80008d8 <MX_RTC_Init+0x12c>)
 80007ec:	229b      	movs	r2, #155	; 0x9b
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007f2:	4b39      	ldr	r3, [pc, #228]	; (80008d8 <MX_RTC_Init+0x12c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007f8:	4b37      	ldr	r3, [pc, #220]	; (80008d8 <MX_RTC_Init+0x12c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007fe:	4b36      	ldr	r3, [pc, #216]	; (80008d8 <MX_RTC_Init+0x12c>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000804:	4b34      	ldr	r3, [pc, #208]	; (80008d8 <MX_RTC_Init+0x12c>)
 8000806:	0018      	movs	r0, r3
 8000808:	f001 fe00 	bl	800240c <HAL_RTC_Init>
 800080c:	1e03      	subs	r3, r0, #0
 800080e:	d001      	beq.n	8000814 <MX_RTC_Init+0x68>
  {
    Error_Handler();
 8000810:	f000 f8de 	bl	80009d0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000814:	212c      	movs	r1, #44	; 0x2c
 8000816:	187b      	adds	r3, r7, r1
 8000818:	2200      	movs	r2, #0
 800081a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 800081c:	187b      	adds	r3, r7, r1
 800081e:	2200      	movs	r2, #0
 8000820:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000822:	187b      	adds	r3, r7, r1
 8000824:	2200      	movs	r2, #0
 8000826:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000828:	187b      	adds	r3, r7, r1
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000834:	1879      	adds	r1, r7, r1
 8000836:	4b28      	ldr	r3, [pc, #160]	; (80008d8 <MX_RTC_Init+0x12c>)
 8000838:	2201      	movs	r2, #1
 800083a:	0018      	movs	r0, r3
 800083c:	f001 fe7a 	bl	8002534 <HAL_RTC_SetTime>
 8000840:	1e03      	subs	r3, r0, #0
 8000842:	d001      	beq.n	8000848 <MX_RTC_Init+0x9c>
  {
    Error_Handler();
 8000844:	f000 f8c4 	bl	80009d0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000848:	2128      	movs	r1, #40	; 0x28
 800084a:	187b      	adds	r3, r7, r1
 800084c:	2201      	movs	r2, #1
 800084e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000850:	187b      	adds	r3, r7, r1
 8000852:	2201      	movs	r2, #1
 8000854:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x9;
 8000856:	187b      	adds	r3, r7, r1
 8000858:	2209      	movs	r2, #9
 800085a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x22;
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2222      	movs	r2, #34	; 0x22
 8000860:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000862:	1879      	adds	r1, r7, r1
 8000864:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <MX_RTC_Init+0x12c>)
 8000866:	2201      	movs	r2, #1
 8000868:	0018      	movs	r0, r3
 800086a:	f001 ff7d 	bl	8002768 <HAL_RTC_SetDate>
 800086e:	1e03      	subs	r3, r0, #0
 8000870:	d001      	beq.n	8000876 <MX_RTC_Init+0xca>
  {
    Error_Handler();
 8000872:	f000 f8ad 	bl	80009d0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000876:	003b      	movs	r3, r7
 8000878:	2200      	movs	r2, #0
 800087a:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800087c:	003b      	movs	r3, r7
 800087e:	2200      	movs	r2, #0
 8000880:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x10;
 8000882:	003b      	movs	r3, r7
 8000884:	2210      	movs	r2, #16
 8000886:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000888:	003b      	movs	r3, r7
 800088a:	2200      	movs	r2, #0
 800088c:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800088e:	003b      	movs	r3, r7
 8000890:	2200      	movs	r2, #0
 8000892:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000894:	003b      	movs	r3, r7
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800089a:	003b      	movs	r3, r7
 800089c:	2200      	movs	r2, #0
 800089e:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80008a0:	003b      	movs	r3, r7
 80008a2:	2200      	movs	r2, #0
 80008a4:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80008a6:	003b      	movs	r3, r7
 80008a8:	2200      	movs	r2, #0
 80008aa:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x9;
 80008ac:	003b      	movs	r3, r7
 80008ae:	2220      	movs	r2, #32
 80008b0:	2109      	movs	r1, #9
 80008b2:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80008b4:	003b      	movs	r3, r7
 80008b6:	2280      	movs	r2, #128	; 0x80
 80008b8:	0052      	lsls	r2, r2, #1
 80008ba:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80008bc:	0039      	movs	r1, r7
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_RTC_Init+0x12c>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	0018      	movs	r0, r3
 80008c4:	f002 f846 	bl	8002954 <HAL_RTC_SetAlarm_IT>
 80008c8:	1e03      	subs	r3, r0, #0
 80008ca:	d001      	beq.n	80008d0 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 80008cc:	f000 f880 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008d0:	46c0      	nop			; (mov r8, r8)
 80008d2:	46bd      	mov	sp, r7
 80008d4:	b010      	add	sp, #64	; 0x40
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	200000d8 	.word	0x200000d8
 80008dc:	40002800 	.word	0x40002800

080008e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e0:	b590      	push	{r4, r7, lr}
 80008e2:	b08b      	sub	sp, #44	; 0x2c
 80008e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	2414      	movs	r4, #20
 80008e8:	193b      	adds	r3, r7, r4
 80008ea:	0018      	movs	r0, r3
 80008ec:	2314      	movs	r3, #20
 80008ee:	001a      	movs	r2, r3
 80008f0:	2100      	movs	r1, #0
 80008f2:	f002 fa11 	bl	8002d18 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	4b34      	ldr	r3, [pc, #208]	; (80009c8 <MX_GPIO_Init+0xe8>)
 80008f8:	695a      	ldr	r2, [r3, #20]
 80008fa:	4b33      	ldr	r3, [pc, #204]	; (80009c8 <MX_GPIO_Init+0xe8>)
 80008fc:	2180      	movs	r1, #128	; 0x80
 80008fe:	0309      	lsls	r1, r1, #12
 8000900:	430a      	orrs	r2, r1
 8000902:	615a      	str	r2, [r3, #20]
 8000904:	4b30      	ldr	r3, [pc, #192]	; (80009c8 <MX_GPIO_Init+0xe8>)
 8000906:	695a      	ldr	r2, [r3, #20]
 8000908:	2380      	movs	r3, #128	; 0x80
 800090a:	031b      	lsls	r3, r3, #12
 800090c:	4013      	ands	r3, r2
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000912:	4b2d      	ldr	r3, [pc, #180]	; (80009c8 <MX_GPIO_Init+0xe8>)
 8000914:	695a      	ldr	r2, [r3, #20]
 8000916:	4b2c      	ldr	r3, [pc, #176]	; (80009c8 <MX_GPIO_Init+0xe8>)
 8000918:	2180      	movs	r1, #128	; 0x80
 800091a:	03c9      	lsls	r1, r1, #15
 800091c:	430a      	orrs	r2, r1
 800091e:	615a      	str	r2, [r3, #20]
 8000920:	4b29      	ldr	r3, [pc, #164]	; (80009c8 <MX_GPIO_Init+0xe8>)
 8000922:	695a      	ldr	r2, [r3, #20]
 8000924:	2380      	movs	r3, #128	; 0x80
 8000926:	03db      	lsls	r3, r3, #15
 8000928:	4013      	ands	r3, r2
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b26      	ldr	r3, [pc, #152]	; (80009c8 <MX_GPIO_Init+0xe8>)
 8000930:	695a      	ldr	r2, [r3, #20]
 8000932:	4b25      	ldr	r3, [pc, #148]	; (80009c8 <MX_GPIO_Init+0xe8>)
 8000934:	2180      	movs	r1, #128	; 0x80
 8000936:	0289      	lsls	r1, r1, #10
 8000938:	430a      	orrs	r2, r1
 800093a:	615a      	str	r2, [r3, #20]
 800093c:	4b22      	ldr	r3, [pc, #136]	; (80009c8 <MX_GPIO_Init+0xe8>)
 800093e:	695a      	ldr	r2, [r3, #20]
 8000940:	2380      	movs	r3, #128	; 0x80
 8000942:	029b      	lsls	r3, r3, #10
 8000944:	4013      	ands	r3, r2
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <MX_GPIO_Init+0xe8>)
 800094c:	695a      	ldr	r2, [r3, #20]
 800094e:	4b1e      	ldr	r3, [pc, #120]	; (80009c8 <MX_GPIO_Init+0xe8>)
 8000950:	2180      	movs	r1, #128	; 0x80
 8000952:	02c9      	lsls	r1, r1, #11
 8000954:	430a      	orrs	r2, r1
 8000956:	615a      	str	r2, [r3, #20]
 8000958:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <MX_GPIO_Init+0xe8>)
 800095a:	695a      	ldr	r2, [r3, #20]
 800095c:	2380      	movs	r3, #128	; 0x80
 800095e:	02db      	lsls	r3, r3, #11
 8000960:	4013      	ands	r3, r2
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000966:	23c0      	movs	r3, #192	; 0xc0
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	4818      	ldr	r0, [pc, #96]	; (80009cc <MX_GPIO_Init+0xec>)
 800096c:	2200      	movs	r2, #0
 800096e:	0019      	movs	r1, r3
 8000970:	f000 fc43 	bl	80011fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000974:	193b      	adds	r3, r7, r4
 8000976:	2201      	movs	r2, #1
 8000978:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800097a:	193b      	adds	r3, r7, r4
 800097c:	2290      	movs	r2, #144	; 0x90
 800097e:	0352      	lsls	r2, r2, #13
 8000980:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	193b      	adds	r3, r7, r4
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000988:	193a      	adds	r2, r7, r4
 800098a:	2390      	movs	r3, #144	; 0x90
 800098c:	05db      	lsls	r3, r3, #23
 800098e:	0011      	movs	r1, r2
 8000990:	0018      	movs	r0, r3
 8000992:	f000 faa5 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000996:	0021      	movs	r1, r4
 8000998:	187b      	adds	r3, r7, r1
 800099a:	22c0      	movs	r2, #192	; 0xc0
 800099c:	0092      	lsls	r2, r2, #2
 800099e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a0:	187b      	adds	r3, r7, r1
 80009a2:	2201      	movs	r2, #1
 80009a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	4a05      	ldr	r2, [pc, #20]	; (80009cc <MX_GPIO_Init+0xec>)
 80009b6:	0019      	movs	r1, r3
 80009b8:	0010      	movs	r0, r2
 80009ba:	f000 fa91 	bl	8000ee0 <HAL_GPIO_Init>

}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	b00b      	add	sp, #44	; 0x2c
 80009c4:	bd90      	pop	{r4, r7, pc}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	40021000 	.word	0x40021000
 80009cc:	48000800 	.word	0x48000800

080009d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d4:	b672      	cpsid	i
}
 80009d6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <Error_Handler+0x8>
	...

080009dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e2:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <HAL_MspInit+0x44>)
 80009e4:	699a      	ldr	r2, [r3, #24]
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <HAL_MspInit+0x44>)
 80009e8:	2101      	movs	r1, #1
 80009ea:	430a      	orrs	r2, r1
 80009ec:	619a      	str	r2, [r3, #24]
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <HAL_MspInit+0x44>)
 80009f0:	699b      	ldr	r3, [r3, #24]
 80009f2:	2201      	movs	r2, #1
 80009f4:	4013      	ands	r3, r2
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <HAL_MspInit+0x44>)
 80009fc:	69da      	ldr	r2, [r3, #28]
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <HAL_MspInit+0x44>)
 8000a00:	2180      	movs	r1, #128	; 0x80
 8000a02:	0549      	lsls	r1, r1, #21
 8000a04:	430a      	orrs	r2, r1
 8000a06:	61da      	str	r2, [r3, #28]
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <HAL_MspInit+0x44>)
 8000a0a:	69da      	ldr	r2, [r3, #28]
 8000a0c:	2380      	movs	r3, #128	; 0x80
 8000a0e:	055b      	lsls	r3, r3, #21
 8000a10:	4013      	ands	r3, r2
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	b002      	add	sp, #8
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	40021000 	.word	0x40021000

08000a24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a24:	b590      	push	{r4, r7, lr}
 8000a26:	b08b      	sub	sp, #44	; 0x2c
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	2414      	movs	r4, #20
 8000a2e:	193b      	adds	r3, r7, r4
 8000a30:	0018      	movs	r0, r3
 8000a32:	2314      	movs	r3, #20
 8000a34:	001a      	movs	r2, r3
 8000a36:	2100      	movs	r1, #0
 8000a38:	f002 f96e 	bl	8002d18 <memset>
  if(hi2c->Instance==I2C1)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a1c      	ldr	r2, [pc, #112]	; (8000ab4 <HAL_I2C_MspInit+0x90>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d131      	bne.n	8000aaa <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a46:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <HAL_I2C_MspInit+0x94>)
 8000a48:	695a      	ldr	r2, [r3, #20]
 8000a4a:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <HAL_I2C_MspInit+0x94>)
 8000a4c:	2180      	movs	r1, #128	; 0x80
 8000a4e:	02c9      	lsls	r1, r1, #11
 8000a50:	430a      	orrs	r2, r1
 8000a52:	615a      	str	r2, [r3, #20]
 8000a54:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <HAL_I2C_MspInit+0x94>)
 8000a56:	695a      	ldr	r2, [r3, #20]
 8000a58:	2380      	movs	r3, #128	; 0x80
 8000a5a:	02db      	lsls	r3, r3, #11
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a62:	0021      	movs	r1, r4
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	22c0      	movs	r2, #192	; 0xc0
 8000a68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	2212      	movs	r2, #18
 8000a6e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	2203      	movs	r2, #3
 8000a7a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2201      	movs	r2, #1
 8000a80:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	4a0d      	ldr	r2, [pc, #52]	; (8000abc <HAL_I2C_MspInit+0x98>)
 8000a86:	0019      	movs	r1, r3
 8000a88:	0010      	movs	r0, r2
 8000a8a:	f000 fa29 	bl	8000ee0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <HAL_I2C_MspInit+0x94>)
 8000a90:	69da      	ldr	r2, [r3, #28]
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <HAL_I2C_MspInit+0x94>)
 8000a94:	2180      	movs	r1, #128	; 0x80
 8000a96:	0389      	lsls	r1, r1, #14
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	61da      	str	r2, [r3, #28]
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_I2C_MspInit+0x94>)
 8000a9e:	69da      	ldr	r2, [r3, #28]
 8000aa0:	2380      	movs	r3, #128	; 0x80
 8000aa2:	039b      	lsls	r3, r3, #14
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	46bd      	mov	sp, r7
 8000aae:	b00b      	add	sp, #44	; 0x2c
 8000ab0:	bd90      	pop	{r4, r7, pc}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	40005400 	.word	0x40005400
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	48000400 	.word	0x48000400

08000ac0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <HAL_RTC_MspInit+0x38>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d10e      	bne.n	8000af0 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <HAL_RTC_MspInit+0x3c>)
 8000ad4:	6a1a      	ldr	r2, [r3, #32]
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <HAL_RTC_MspInit+0x3c>)
 8000ad8:	2180      	movs	r1, #128	; 0x80
 8000ada:	0209      	lsls	r1, r1, #8
 8000adc:	430a      	orrs	r2, r1
 8000ade:	621a      	str	r2, [r3, #32]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	2002      	movs	r0, #2
 8000ae6:	f000 f9c9 	bl	8000e7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000aea:	2002      	movs	r0, #2
 8000aec:	f000 f9db 	bl	8000ea6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000af0:	46c0      	nop			; (mov r8, r8)
 8000af2:	46bd      	mov	sp, r7
 8000af4:	b002      	add	sp, #8
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40002800 	.word	0x40002800
 8000afc:	40021000 	.word	0x40021000

08000b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <NMI_Handler+0x4>

08000b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <HardFault_Handler+0x4>

08000b0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b10:	46c0      	nop			; (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b24:	f000 f8be 	bl	8000ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20.
  */
void RTC_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000b34:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <RTC_IRQHandler+0x14>)
 8000b36:	0018      	movs	r0, r3
 8000b38:	f001 fffe 	bl	8002b38 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000b3c:	46c0      	nop			; (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	200000d8 	.word	0x200000d8

08000b48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b50:	4a14      	ldr	r2, [pc, #80]	; (8000ba4 <_sbrk+0x5c>)
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <_sbrk+0x60>)
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b5c:	4b13      	ldr	r3, [pc, #76]	; (8000bac <_sbrk+0x64>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d102      	bne.n	8000b6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <_sbrk+0x64>)
 8000b66:	4a12      	ldr	r2, [pc, #72]	; (8000bb0 <_sbrk+0x68>)
 8000b68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <_sbrk+0x64>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	18d3      	adds	r3, r2, r3
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d207      	bcs.n	8000b88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b78:	f002 f8a4 	bl	8002cc4 <__errno>
 8000b7c:	0003      	movs	r3, r0
 8000b7e:	220c      	movs	r2, #12
 8000b80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b82:	2301      	movs	r3, #1
 8000b84:	425b      	negs	r3, r3
 8000b86:	e009      	b.n	8000b9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <_sbrk+0x64>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b8e:	4b07      	ldr	r3, [pc, #28]	; (8000bac <_sbrk+0x64>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	18d2      	adds	r2, r2, r3
 8000b96:	4b05      	ldr	r3, [pc, #20]	; (8000bac <_sbrk+0x64>)
 8000b98:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
}
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	b006      	add	sp, #24
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20002000 	.word	0x20002000
 8000ba8:	00000400 	.word	0x00000400
 8000bac:	20000110 	.word	0x20000110
 8000bb0:	20000128 	.word	0x20000128

08000bb4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000bb8:	46c0      	nop			; (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bc0:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bc2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc4:	480d      	ldr	r0, [pc, #52]	; (8000bfc <LoopForever+0x6>)
  ldr r1, =_edata
 8000bc6:	490e      	ldr	r1, [pc, #56]	; (8000c00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bc8:	4a0e      	ldr	r2, [pc, #56]	; (8000c04 <LoopForever+0xe>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bcc:	e002      	b.n	8000bd4 <LoopCopyDataInit>

08000bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd2:	3304      	adds	r3, #4

08000bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd8:	d3f9      	bcc.n	8000bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bda:	4a0b      	ldr	r2, [pc, #44]	; (8000c08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bdc:	4c0b      	ldr	r4, [pc, #44]	; (8000c0c <LoopForever+0x16>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be0:	e001      	b.n	8000be6 <LoopFillZerobss>

08000be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be4:	3204      	adds	r2, #4

08000be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be8:	d3fb      	bcc.n	8000be2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bea:	f7ff ffe3 	bl	8000bb4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000bee:	f002 f86f 	bl	8002cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bf2:	f7ff fcff 	bl	80005f4 <main>

08000bf6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bf6:	e7fe      	b.n	8000bf6 <LoopForever>
  ldr   r0, =_estack
 8000bf8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c00:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c04:	080036a8 	.word	0x080036a8
  ldr r2, =_sbss
 8000c08:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c0c:	20000128 	.word	0x20000128

08000c10 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC1_COMP_IRQHandler>
	...

08000c14 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c18:	4b07      	ldr	r3, [pc, #28]	; (8000c38 <HAL_Init+0x24>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_Init+0x24>)
 8000c1e:	2110      	movs	r1, #16
 8000c20:	430a      	orrs	r2, r1
 8000c22:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000c24:	2000      	movs	r0, #0
 8000c26:	f000 f809 	bl	8000c3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c2a:	f7ff fed7 	bl	80009dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c2e:	2300      	movs	r3, #0
}
 8000c30:	0018      	movs	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	40022000 	.word	0x40022000

08000c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c3c:	b590      	push	{r4, r7, lr}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c44:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <HAL_InitTick+0x5c>)
 8000c46:	681c      	ldr	r4, [r3, #0]
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <HAL_InitTick+0x60>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	0019      	movs	r1, r3
 8000c4e:	23fa      	movs	r3, #250	; 0xfa
 8000c50:	0098      	lsls	r0, r3, #2
 8000c52:	f7ff fa63 	bl	800011c <__udivsi3>
 8000c56:	0003      	movs	r3, r0
 8000c58:	0019      	movs	r1, r3
 8000c5a:	0020      	movs	r0, r4
 8000c5c:	f7ff fa5e 	bl	800011c <__udivsi3>
 8000c60:	0003      	movs	r3, r0
 8000c62:	0018      	movs	r0, r3
 8000c64:	f000 f92f 	bl	8000ec6 <HAL_SYSTICK_Config>
 8000c68:	1e03      	subs	r3, r0, #0
 8000c6a:	d001      	beq.n	8000c70 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e00f      	b.n	8000c90 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2b03      	cmp	r3, #3
 8000c74:	d80b      	bhi.n	8000c8e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	2301      	movs	r3, #1
 8000c7a:	425b      	negs	r3, r3
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f000 f8fc 	bl	8000e7c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_InitTick+0x64>)
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e000      	b.n	8000c90 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
}
 8000c90:	0018      	movs	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b003      	add	sp, #12
 8000c96:	bd90      	pop	{r4, r7, pc}
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	20000008 	.word	0x20000008
 8000ca0:	20000004 	.word	0x20000004

08000ca4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <HAL_IncTick+0x1c>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	001a      	movs	r2, r3
 8000cae:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <HAL_IncTick+0x20>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	18d2      	adds	r2, r2, r3
 8000cb4:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <HAL_IncTick+0x20>)
 8000cb6:	601a      	str	r2, [r3, #0]
}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	20000114 	.word	0x20000114

08000cc8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ccc:	4b02      	ldr	r3, [pc, #8]	; (8000cd8 <HAL_GetTick+0x10>)
 8000cce:	681b      	ldr	r3, [r3, #0]
}
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	20000114 	.word	0x20000114

08000cdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce4:	f7ff fff0 	bl	8000cc8 <HAL_GetTick>
 8000ce8:	0003      	movs	r3, r0
 8000cea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	d005      	beq.n	8000d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <HAL_Delay+0x44>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	001a      	movs	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	189b      	adds	r3, r3, r2
 8000d00:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	f7ff ffe0 	bl	8000cc8 <HAL_GetTick>
 8000d08:	0002      	movs	r2, r0
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d8f7      	bhi.n	8000d04 <HAL_Delay+0x28>
  {
  }
}
 8000d14:	46c0      	nop			; (mov r8, r8)
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b004      	add	sp, #16
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	20000008 	.word	0x20000008

08000d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	0002      	movs	r2, r0
 8000d2c:	1dfb      	adds	r3, r7, #7
 8000d2e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d30:	1dfb      	adds	r3, r7, #7
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b7f      	cmp	r3, #127	; 0x7f
 8000d36:	d809      	bhi.n	8000d4c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d38:	1dfb      	adds	r3, r7, #7
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	001a      	movs	r2, r3
 8000d3e:	231f      	movs	r3, #31
 8000d40:	401a      	ands	r2, r3
 8000d42:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <__NVIC_EnableIRQ+0x30>)
 8000d44:	2101      	movs	r1, #1
 8000d46:	4091      	lsls	r1, r2
 8000d48:	000a      	movs	r2, r1
 8000d4a:	601a      	str	r2, [r3, #0]
  }
}
 8000d4c:	46c0      	nop			; (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b002      	add	sp, #8
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	e000e100 	.word	0xe000e100

08000d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	0002      	movs	r2, r0
 8000d60:	6039      	str	r1, [r7, #0]
 8000d62:	1dfb      	adds	r3, r7, #7
 8000d64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d66:	1dfb      	adds	r3, r7, #7
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b7f      	cmp	r3, #127	; 0x7f
 8000d6c:	d828      	bhi.n	8000dc0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d6e:	4a2f      	ldr	r2, [pc, #188]	; (8000e2c <__NVIC_SetPriority+0xd4>)
 8000d70:	1dfb      	adds	r3, r7, #7
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	b25b      	sxtb	r3, r3
 8000d76:	089b      	lsrs	r3, r3, #2
 8000d78:	33c0      	adds	r3, #192	; 0xc0
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	589b      	ldr	r3, [r3, r2]
 8000d7e:	1dfa      	adds	r2, r7, #7
 8000d80:	7812      	ldrb	r2, [r2, #0]
 8000d82:	0011      	movs	r1, r2
 8000d84:	2203      	movs	r2, #3
 8000d86:	400a      	ands	r2, r1
 8000d88:	00d2      	lsls	r2, r2, #3
 8000d8a:	21ff      	movs	r1, #255	; 0xff
 8000d8c:	4091      	lsls	r1, r2
 8000d8e:	000a      	movs	r2, r1
 8000d90:	43d2      	mvns	r2, r2
 8000d92:	401a      	ands	r2, r3
 8000d94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	019b      	lsls	r3, r3, #6
 8000d9a:	22ff      	movs	r2, #255	; 0xff
 8000d9c:	401a      	ands	r2, r3
 8000d9e:	1dfb      	adds	r3, r7, #7
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	0018      	movs	r0, r3
 8000da4:	2303      	movs	r3, #3
 8000da6:	4003      	ands	r3, r0
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dac:	481f      	ldr	r0, [pc, #124]	; (8000e2c <__NVIC_SetPriority+0xd4>)
 8000dae:	1dfb      	adds	r3, r7, #7
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	b25b      	sxtb	r3, r3
 8000db4:	089b      	lsrs	r3, r3, #2
 8000db6:	430a      	orrs	r2, r1
 8000db8:	33c0      	adds	r3, #192	; 0xc0
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000dbe:	e031      	b.n	8000e24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dc0:	4a1b      	ldr	r2, [pc, #108]	; (8000e30 <__NVIC_SetPriority+0xd8>)
 8000dc2:	1dfb      	adds	r3, r7, #7
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	0019      	movs	r1, r3
 8000dc8:	230f      	movs	r3, #15
 8000dca:	400b      	ands	r3, r1
 8000dcc:	3b08      	subs	r3, #8
 8000dce:	089b      	lsrs	r3, r3, #2
 8000dd0:	3306      	adds	r3, #6
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	18d3      	adds	r3, r2, r3
 8000dd6:	3304      	adds	r3, #4
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	1dfa      	adds	r2, r7, #7
 8000ddc:	7812      	ldrb	r2, [r2, #0]
 8000dde:	0011      	movs	r1, r2
 8000de0:	2203      	movs	r2, #3
 8000de2:	400a      	ands	r2, r1
 8000de4:	00d2      	lsls	r2, r2, #3
 8000de6:	21ff      	movs	r1, #255	; 0xff
 8000de8:	4091      	lsls	r1, r2
 8000dea:	000a      	movs	r2, r1
 8000dec:	43d2      	mvns	r2, r2
 8000dee:	401a      	ands	r2, r3
 8000df0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	019b      	lsls	r3, r3, #6
 8000df6:	22ff      	movs	r2, #255	; 0xff
 8000df8:	401a      	ands	r2, r3
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	0018      	movs	r0, r3
 8000e00:	2303      	movs	r3, #3
 8000e02:	4003      	ands	r3, r0
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e08:	4809      	ldr	r0, [pc, #36]	; (8000e30 <__NVIC_SetPriority+0xd8>)
 8000e0a:	1dfb      	adds	r3, r7, #7
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	001c      	movs	r4, r3
 8000e10:	230f      	movs	r3, #15
 8000e12:	4023      	ands	r3, r4
 8000e14:	3b08      	subs	r3, #8
 8000e16:	089b      	lsrs	r3, r3, #2
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	3306      	adds	r3, #6
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	18c3      	adds	r3, r0, r3
 8000e20:	3304      	adds	r3, #4
 8000e22:	601a      	str	r2, [r3, #0]
}
 8000e24:	46c0      	nop			; (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b003      	add	sp, #12
 8000e2a:	bd90      	pop	{r4, r7, pc}
 8000e2c:	e000e100 	.word	0xe000e100
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	1e5a      	subs	r2, r3, #1
 8000e40:	2380      	movs	r3, #128	; 0x80
 8000e42:	045b      	lsls	r3, r3, #17
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d301      	bcc.n	8000e4c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e48:	2301      	movs	r3, #1
 8000e4a:	e010      	b.n	8000e6e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4c:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <SysTick_Config+0x44>)
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	3a01      	subs	r2, #1
 8000e52:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e54:	2301      	movs	r3, #1
 8000e56:	425b      	negs	r3, r3
 8000e58:	2103      	movs	r1, #3
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f7ff ff7c 	bl	8000d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <SysTick_Config+0x44>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e66:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <SysTick_Config+0x44>)
 8000e68:	2207      	movs	r2, #7
 8000e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	0018      	movs	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	b002      	add	sp, #8
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	e000e010 	.word	0xe000e010

08000e7c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60b9      	str	r1, [r7, #8]
 8000e84:	607a      	str	r2, [r7, #4]
 8000e86:	210f      	movs	r1, #15
 8000e88:	187b      	adds	r3, r7, r1
 8000e8a:	1c02      	adds	r2, r0, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	187b      	adds	r3, r7, r1
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	b25b      	sxtb	r3, r3
 8000e96:	0011      	movs	r1, r2
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f7ff ff5d 	bl	8000d58 <__NVIC_SetPriority>
}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b004      	add	sp, #16
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	0002      	movs	r2, r0
 8000eae:	1dfb      	adds	r3, r7, #7
 8000eb0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb2:	1dfb      	adds	r3, r7, #7
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	b25b      	sxtb	r3, r3
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f7ff ff33 	bl	8000d24 <__NVIC_EnableIRQ>
}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b002      	add	sp, #8
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f7ff ffaf 	bl	8000e34 <SysTick_Config>
 8000ed6:	0003      	movs	r3, r0
}
 8000ed8:	0018      	movs	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	b002      	add	sp, #8
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eee:	e14f      	b.n	8001190 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	4091      	lsls	r1, r2
 8000efa:	000a      	movs	r2, r1
 8000efc:	4013      	ands	r3, r2
 8000efe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d100      	bne.n	8000f08 <HAL_GPIO_Init+0x28>
 8000f06:	e140      	b.n	800118a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	4013      	ands	r3, r2
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d005      	beq.n	8000f20 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	2203      	movs	r2, #3
 8000f1a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d130      	bne.n	8000f82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	409a      	lsls	r2, r3
 8000f2e:	0013      	movs	r3, r2
 8000f30:	43da      	mvns	r2, r3
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	68da      	ldr	r2, [r3, #12]
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	409a      	lsls	r2, r3
 8000f42:	0013      	movs	r3, r2
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f56:	2201      	movs	r2, #1
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	409a      	lsls	r2, r3
 8000f5c:	0013      	movs	r3, r2
 8000f5e:	43da      	mvns	r2, r3
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	4013      	ands	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	091b      	lsrs	r3, r3, #4
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	401a      	ands	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	409a      	lsls	r2, r3
 8000f74:	0013      	movs	r3, r2
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	2203      	movs	r2, #3
 8000f88:	4013      	ands	r3, r2
 8000f8a:	2b03      	cmp	r3, #3
 8000f8c:	d017      	beq.n	8000fbe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	2203      	movs	r2, #3
 8000f9a:	409a      	lsls	r2, r3
 8000f9c:	0013      	movs	r3, r2
 8000f9e:	43da      	mvns	r2, r3
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	689a      	ldr	r2, [r3, #8]
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	409a      	lsls	r2, r3
 8000fb0:	0013      	movs	r3, r2
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d123      	bne.n	8001012 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	08da      	lsrs	r2, r3, #3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3208      	adds	r2, #8
 8000fd2:	0092      	lsls	r2, r2, #2
 8000fd4:	58d3      	ldr	r3, [r2, r3]
 8000fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	2207      	movs	r2, #7
 8000fdc:	4013      	ands	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	220f      	movs	r2, #15
 8000fe2:	409a      	lsls	r2, r3
 8000fe4:	0013      	movs	r3, r2
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	691a      	ldr	r2, [r3, #16]
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	2107      	movs	r1, #7
 8000ff6:	400b      	ands	r3, r1
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	409a      	lsls	r2, r3
 8000ffc:	0013      	movs	r3, r2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	08da      	lsrs	r2, r3, #3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3208      	adds	r2, #8
 800100c:	0092      	lsls	r2, r2, #2
 800100e:	6939      	ldr	r1, [r7, #16]
 8001010:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	2203      	movs	r2, #3
 800101e:	409a      	lsls	r2, r3
 8001020:	0013      	movs	r3, r2
 8001022:	43da      	mvns	r2, r3
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	2203      	movs	r2, #3
 8001030:	401a      	ands	r2, r3
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	409a      	lsls	r2, r3
 8001038:	0013      	movs	r3, r2
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4313      	orrs	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685a      	ldr	r2, [r3, #4]
 800104a:	23c0      	movs	r3, #192	; 0xc0
 800104c:	029b      	lsls	r3, r3, #10
 800104e:	4013      	ands	r3, r2
 8001050:	d100      	bne.n	8001054 <HAL_GPIO_Init+0x174>
 8001052:	e09a      	b.n	800118a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001054:	4b54      	ldr	r3, [pc, #336]	; (80011a8 <HAL_GPIO_Init+0x2c8>)
 8001056:	699a      	ldr	r2, [r3, #24]
 8001058:	4b53      	ldr	r3, [pc, #332]	; (80011a8 <HAL_GPIO_Init+0x2c8>)
 800105a:	2101      	movs	r1, #1
 800105c:	430a      	orrs	r2, r1
 800105e:	619a      	str	r2, [r3, #24]
 8001060:	4b51      	ldr	r3, [pc, #324]	; (80011a8 <HAL_GPIO_Init+0x2c8>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	2201      	movs	r2, #1
 8001066:	4013      	ands	r3, r2
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800106c:	4a4f      	ldr	r2, [pc, #316]	; (80011ac <HAL_GPIO_Init+0x2cc>)
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	089b      	lsrs	r3, r3, #2
 8001072:	3302      	adds	r3, #2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	589b      	ldr	r3, [r3, r2]
 8001078:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	2203      	movs	r2, #3
 800107e:	4013      	ands	r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	220f      	movs	r2, #15
 8001084:	409a      	lsls	r2, r3
 8001086:	0013      	movs	r3, r2
 8001088:	43da      	mvns	r2, r3
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	2390      	movs	r3, #144	; 0x90
 8001094:	05db      	lsls	r3, r3, #23
 8001096:	429a      	cmp	r2, r3
 8001098:	d013      	beq.n	80010c2 <HAL_GPIO_Init+0x1e2>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a44      	ldr	r2, [pc, #272]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d00d      	beq.n	80010be <HAL_GPIO_Init+0x1de>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a43      	ldr	r2, [pc, #268]	; (80011b4 <HAL_GPIO_Init+0x2d4>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d007      	beq.n	80010ba <HAL_GPIO_Init+0x1da>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a42      	ldr	r2, [pc, #264]	; (80011b8 <HAL_GPIO_Init+0x2d8>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d101      	bne.n	80010b6 <HAL_GPIO_Init+0x1d6>
 80010b2:	2303      	movs	r3, #3
 80010b4:	e006      	b.n	80010c4 <HAL_GPIO_Init+0x1e4>
 80010b6:	2305      	movs	r3, #5
 80010b8:	e004      	b.n	80010c4 <HAL_GPIO_Init+0x1e4>
 80010ba:	2302      	movs	r3, #2
 80010bc:	e002      	b.n	80010c4 <HAL_GPIO_Init+0x1e4>
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <HAL_GPIO_Init+0x1e4>
 80010c2:	2300      	movs	r3, #0
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	2103      	movs	r1, #3
 80010c8:	400a      	ands	r2, r1
 80010ca:	0092      	lsls	r2, r2, #2
 80010cc:	4093      	lsls	r3, r2
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010d4:	4935      	ldr	r1, [pc, #212]	; (80011ac <HAL_GPIO_Init+0x2cc>)
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	089b      	lsrs	r3, r3, #2
 80010da:	3302      	adds	r3, #2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010e2:	4b36      	ldr	r3, [pc, #216]	; (80011bc <HAL_GPIO_Init+0x2dc>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	43da      	mvns	r2, r3
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	4013      	ands	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	2380      	movs	r3, #128	; 0x80
 80010f8:	025b      	lsls	r3, r3, #9
 80010fa:	4013      	ands	r3, r2
 80010fc:	d003      	beq.n	8001106 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	4313      	orrs	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001106:	4b2d      	ldr	r3, [pc, #180]	; (80011bc <HAL_GPIO_Init+0x2dc>)
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800110c:	4b2b      	ldr	r3, [pc, #172]	; (80011bc <HAL_GPIO_Init+0x2dc>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	43da      	mvns	r2, r3
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	4013      	ands	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	2380      	movs	r3, #128	; 0x80
 8001122:	029b      	lsls	r3, r3, #10
 8001124:	4013      	ands	r3, r2
 8001126:	d003      	beq.n	8001130 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001130:	4b22      	ldr	r3, [pc, #136]	; (80011bc <HAL_GPIO_Init+0x2dc>)
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001136:	4b21      	ldr	r3, [pc, #132]	; (80011bc <HAL_GPIO_Init+0x2dc>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	43da      	mvns	r2, r3
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	4013      	ands	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685a      	ldr	r2, [r3, #4]
 800114a:	2380      	movs	r3, #128	; 0x80
 800114c:	035b      	lsls	r3, r3, #13
 800114e:	4013      	ands	r3, r2
 8001150:	d003      	beq.n	800115a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4313      	orrs	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800115a:	4b18      	ldr	r3, [pc, #96]	; (80011bc <HAL_GPIO_Init+0x2dc>)
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001160:	4b16      	ldr	r3, [pc, #88]	; (80011bc <HAL_GPIO_Init+0x2dc>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	43da      	mvns	r2, r3
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685a      	ldr	r2, [r3, #4]
 8001174:	2380      	movs	r3, #128	; 0x80
 8001176:	039b      	lsls	r3, r3, #14
 8001178:	4013      	ands	r3, r2
 800117a:	d003      	beq.n	8001184 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	4313      	orrs	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001184:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <HAL_GPIO_Init+0x2dc>)
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	3301      	adds	r3, #1
 800118e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	40da      	lsrs	r2, r3
 8001198:	1e13      	subs	r3, r2, #0
 800119a:	d000      	beq.n	800119e <HAL_GPIO_Init+0x2be>
 800119c:	e6a8      	b.n	8000ef0 <HAL_GPIO_Init+0x10>
  } 
}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	46c0      	nop			; (mov r8, r8)
 80011a2:	46bd      	mov	sp, r7
 80011a4:	b006      	add	sp, #24
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40010000 	.word	0x40010000
 80011b0:	48000400 	.word	0x48000400
 80011b4:	48000800 	.word	0x48000800
 80011b8:	48000c00 	.word	0x48000c00
 80011bc:	40010400 	.word	0x40010400

080011c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	000a      	movs	r2, r1
 80011ca:	1cbb      	adds	r3, r7, #2
 80011cc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	1cba      	adds	r2, r7, #2
 80011d4:	8812      	ldrh	r2, [r2, #0]
 80011d6:	4013      	ands	r3, r2
 80011d8:	d004      	beq.n	80011e4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80011da:	230f      	movs	r3, #15
 80011dc:	18fb      	adds	r3, r7, r3
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
 80011e2:	e003      	b.n	80011ec <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011e4:	230f      	movs	r3, #15
 80011e6:	18fb      	adds	r3, r7, r3
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80011ec:	230f      	movs	r3, #15
 80011ee:	18fb      	adds	r3, r7, r3
 80011f0:	781b      	ldrb	r3, [r3, #0]
  }
 80011f2:	0018      	movs	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	b004      	add	sp, #16
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
 8001202:	0008      	movs	r0, r1
 8001204:	0011      	movs	r1, r2
 8001206:	1cbb      	adds	r3, r7, #2
 8001208:	1c02      	adds	r2, r0, #0
 800120a:	801a      	strh	r2, [r3, #0]
 800120c:	1c7b      	adds	r3, r7, #1
 800120e:	1c0a      	adds	r2, r1, #0
 8001210:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001212:	1c7b      	adds	r3, r7, #1
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d004      	beq.n	8001224 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800121a:	1cbb      	adds	r3, r7, #2
 800121c:	881a      	ldrh	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001222:	e003      	b.n	800122c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001224:	1cbb      	adds	r3, r7, #2
 8001226:	881a      	ldrh	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800122c:	46c0      	nop			; (mov r8, r8)
 800122e:	46bd      	mov	sp, r7
 8001230:	b002      	add	sp, #8
 8001232:	bd80      	pop	{r7, pc}

08001234 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e082      	b.n	800134c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2241      	movs	r2, #65	; 0x41
 800124a:	5c9b      	ldrb	r3, [r3, r2]
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	d107      	bne.n	8001262 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2240      	movs	r2, #64	; 0x40
 8001256:	2100      	movs	r1, #0
 8001258:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	0018      	movs	r0, r3
 800125e:	f7ff fbe1 	bl	8000a24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2241      	movs	r2, #65	; 0x41
 8001266:	2124      	movs	r1, #36	; 0x24
 8001268:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2101      	movs	r1, #1
 8001276:	438a      	bics	r2, r1
 8001278:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685a      	ldr	r2, [r3, #4]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4934      	ldr	r1, [pc, #208]	; (8001354 <HAL_I2C_Init+0x120>)
 8001284:	400a      	ands	r2, r1
 8001286:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	689a      	ldr	r2, [r3, #8]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4931      	ldr	r1, [pc, #196]	; (8001358 <HAL_I2C_Init+0x124>)
 8001294:	400a      	ands	r2, r1
 8001296:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d108      	bne.n	80012b2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2180      	movs	r1, #128	; 0x80
 80012aa:	0209      	lsls	r1, r1, #8
 80012ac:	430a      	orrs	r2, r1
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	e007      	b.n	80012c2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2184      	movs	r1, #132	; 0x84
 80012bc:	0209      	lsls	r1, r1, #8
 80012be:	430a      	orrs	r2, r1
 80012c0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d104      	bne.n	80012d4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2280      	movs	r2, #128	; 0x80
 80012d0:	0112      	lsls	r2, r2, #4
 80012d2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	491f      	ldr	r1, [pc, #124]	; (800135c <HAL_I2C_Init+0x128>)
 80012e0:	430a      	orrs	r2, r1
 80012e2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	68da      	ldr	r2, [r3, #12]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	491a      	ldr	r1, [pc, #104]	; (8001358 <HAL_I2C_Init+0x124>)
 80012f0:	400a      	ands	r2, r1
 80012f2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	691a      	ldr	r2, [r3, #16]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	695b      	ldr	r3, [r3, #20]
 80012fc:	431a      	orrs	r2, r3
 80012fe:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	430a      	orrs	r2, r1
 800130c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69d9      	ldr	r1, [r3, #28]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a1a      	ldr	r2, [r3, #32]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	430a      	orrs	r2, r1
 800131c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2101      	movs	r1, #1
 800132a:	430a      	orrs	r2, r1
 800132c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2241      	movs	r2, #65	; 0x41
 8001338:	2120      	movs	r1, #32
 800133a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2242      	movs	r2, #66	; 0x42
 8001346:	2100      	movs	r1, #0
 8001348:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800134a:	2300      	movs	r3, #0
}
 800134c:	0018      	movs	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	b002      	add	sp, #8
 8001352:	bd80      	pop	{r7, pc}
 8001354:	f0ffffff 	.word	0xf0ffffff
 8001358:	ffff7fff 	.word	0xffff7fff
 800135c:	02008000 	.word	0x02008000

08001360 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b089      	sub	sp, #36	; 0x24
 8001364:	af02      	add	r7, sp, #8
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	0008      	movs	r0, r1
 800136a:	607a      	str	r2, [r7, #4]
 800136c:	0019      	movs	r1, r3
 800136e:	230a      	movs	r3, #10
 8001370:	18fb      	adds	r3, r7, r3
 8001372:	1c02      	adds	r2, r0, #0
 8001374:	801a      	strh	r2, [r3, #0]
 8001376:	2308      	movs	r3, #8
 8001378:	18fb      	adds	r3, r7, r3
 800137a:	1c0a      	adds	r2, r1, #0
 800137c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2241      	movs	r2, #65	; 0x41
 8001382:	5c9b      	ldrb	r3, [r3, r2]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b20      	cmp	r3, #32
 8001388:	d000      	beq.n	800138c <HAL_I2C_Master_Transmit+0x2c>
 800138a:	e0e7      	b.n	800155c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2240      	movs	r2, #64	; 0x40
 8001390:	5c9b      	ldrb	r3, [r3, r2]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d101      	bne.n	800139a <HAL_I2C_Master_Transmit+0x3a>
 8001396:	2302      	movs	r3, #2
 8001398:	e0e1      	b.n	800155e <HAL_I2C_Master_Transmit+0x1fe>
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2240      	movs	r2, #64	; 0x40
 800139e:	2101      	movs	r1, #1
 80013a0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80013a2:	f7ff fc91 	bl	8000cc8 <HAL_GetTick>
 80013a6:	0003      	movs	r3, r0
 80013a8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80013aa:	2380      	movs	r3, #128	; 0x80
 80013ac:	0219      	lsls	r1, r3, #8
 80013ae:	68f8      	ldr	r0, [r7, #12]
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	2319      	movs	r3, #25
 80013b6:	2201      	movs	r2, #1
 80013b8:	f000 f8fc 	bl	80015b4 <I2C_WaitOnFlagUntilTimeout>
 80013bc:	1e03      	subs	r3, r0, #0
 80013be:	d001      	beq.n	80013c4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e0cc      	b.n	800155e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2241      	movs	r2, #65	; 0x41
 80013c8:	2121      	movs	r1, #33	; 0x21
 80013ca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2242      	movs	r2, #66	; 0x42
 80013d0:	2110      	movs	r1, #16
 80013d2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2200      	movs	r2, #0
 80013d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2208      	movs	r2, #8
 80013e4:	18ba      	adds	r2, r7, r2
 80013e6:	8812      	ldrh	r2, [r2, #0]
 80013e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2200      	movs	r2, #0
 80013ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	2bff      	cmp	r3, #255	; 0xff
 80013f8:	d911      	bls.n	800141e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	22ff      	movs	r2, #255	; 0xff
 80013fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001404:	b2da      	uxtb	r2, r3
 8001406:	2380      	movs	r3, #128	; 0x80
 8001408:	045c      	lsls	r4, r3, #17
 800140a:	230a      	movs	r3, #10
 800140c:	18fb      	adds	r3, r7, r3
 800140e:	8819      	ldrh	r1, [r3, #0]
 8001410:	68f8      	ldr	r0, [r7, #12]
 8001412:	4b55      	ldr	r3, [pc, #340]	; (8001568 <HAL_I2C_Master_Transmit+0x208>)
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	0023      	movs	r3, r4
 8001418:	f000 fa00 	bl	800181c <I2C_TransferConfig>
 800141c:	e075      	b.n	800150a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001422:	b29a      	uxth	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800142c:	b2da      	uxtb	r2, r3
 800142e:	2380      	movs	r3, #128	; 0x80
 8001430:	049c      	lsls	r4, r3, #18
 8001432:	230a      	movs	r3, #10
 8001434:	18fb      	adds	r3, r7, r3
 8001436:	8819      	ldrh	r1, [r3, #0]
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	4b4b      	ldr	r3, [pc, #300]	; (8001568 <HAL_I2C_Master_Transmit+0x208>)
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	0023      	movs	r3, r4
 8001440:	f000 f9ec 	bl	800181c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001444:	e061      	b.n	800150a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	0018      	movs	r0, r3
 800144e:	f000 f8f0 	bl	8001632 <I2C_WaitOnTXISFlagUntilTimeout>
 8001452:	1e03      	subs	r3, r0, #0
 8001454:	d001      	beq.n	800145a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e081      	b.n	800155e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145e:	781a      	ldrb	r2, [r3, #0]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146a:	1c5a      	adds	r2, r3, #1
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001474:	b29b      	uxth	r3, r3
 8001476:	3b01      	subs	r3, #1
 8001478:	b29a      	uxth	r2, r3
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001482:	3b01      	subs	r3, #1
 8001484:	b29a      	uxth	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800148e:	b29b      	uxth	r3, r3
 8001490:	2b00      	cmp	r3, #0
 8001492:	d03a      	beq.n	800150a <HAL_I2C_Master_Transmit+0x1aa>
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001498:	2b00      	cmp	r3, #0
 800149a:	d136      	bne.n	800150a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800149c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	0013      	movs	r3, r2
 80014a6:	2200      	movs	r2, #0
 80014a8:	2180      	movs	r1, #128	; 0x80
 80014aa:	f000 f883 	bl	80015b4 <I2C_WaitOnFlagUntilTimeout>
 80014ae:	1e03      	subs	r3, r0, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e053      	b.n	800155e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	2bff      	cmp	r3, #255	; 0xff
 80014be:	d911      	bls.n	80014e4 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	22ff      	movs	r2, #255	; 0xff
 80014c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	2380      	movs	r3, #128	; 0x80
 80014ce:	045c      	lsls	r4, r3, #17
 80014d0:	230a      	movs	r3, #10
 80014d2:	18fb      	adds	r3, r7, r3
 80014d4:	8819      	ldrh	r1, [r3, #0]
 80014d6:	68f8      	ldr	r0, [r7, #12]
 80014d8:	2300      	movs	r3, #0
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	0023      	movs	r3, r4
 80014de:	f000 f99d 	bl	800181c <I2C_TransferConfig>
 80014e2:	e012      	b.n	800150a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	2380      	movs	r3, #128	; 0x80
 80014f6:	049c      	lsls	r4, r3, #18
 80014f8:	230a      	movs	r3, #10
 80014fa:	18fb      	adds	r3, r7, r3
 80014fc:	8819      	ldrh	r1, [r3, #0]
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	2300      	movs	r3, #0
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	0023      	movs	r3, r4
 8001506:	f000 f989 	bl	800181c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800150e:	b29b      	uxth	r3, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	d198      	bne.n	8001446 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	0018      	movs	r0, r3
 800151c:	f000 f8c8 	bl	80016b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001520:	1e03      	subs	r3, r0, #0
 8001522:	d001      	beq.n	8001528 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e01a      	b.n	800155e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2220      	movs	r2, #32
 800152e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	490c      	ldr	r1, [pc, #48]	; (800156c <HAL_I2C_Master_Transmit+0x20c>)
 800153c:	400a      	ands	r2, r1
 800153e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2241      	movs	r2, #65	; 0x41
 8001544:	2120      	movs	r1, #32
 8001546:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2242      	movs	r2, #66	; 0x42
 800154c:	2100      	movs	r1, #0
 800154e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2240      	movs	r2, #64	; 0x40
 8001554:	2100      	movs	r1, #0
 8001556:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001558:	2300      	movs	r3, #0
 800155a:	e000      	b.n	800155e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800155c:	2302      	movs	r3, #2
  }
}
 800155e:	0018      	movs	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	b007      	add	sp, #28
 8001564:	bd90      	pop	{r4, r7, pc}
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	80002000 	.word	0x80002000
 800156c:	fe00e800 	.word	0xfe00e800

08001570 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	2202      	movs	r2, #2
 8001580:	4013      	ands	r3, r2
 8001582:	2b02      	cmp	r3, #2
 8001584:	d103      	bne.n	800158e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2200      	movs	r2, #0
 800158c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	2201      	movs	r2, #1
 8001596:	4013      	ands	r3, r2
 8001598:	2b01      	cmp	r3, #1
 800159a:	d007      	beq.n	80015ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	699a      	ldr	r2, [r3, #24]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2101      	movs	r1, #1
 80015a8:	430a      	orrs	r2, r1
 80015aa:	619a      	str	r2, [r3, #24]
  }
}
 80015ac:	46c0      	nop			; (mov r8, r8)
 80015ae:	46bd      	mov	sp, r7
 80015b0:	b002      	add	sp, #8
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	1dfb      	adds	r3, r7, #7
 80015c2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015c4:	e021      	b.n	800160a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	3301      	adds	r3, #1
 80015ca:	d01e      	beq.n	800160a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015cc:	f7ff fb7c 	bl	8000cc8 <HAL_GetTick>
 80015d0:	0002      	movs	r2, r0
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d302      	bcc.n	80015e2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d113      	bne.n	800160a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	2220      	movs	r2, #32
 80015e8:	431a      	orrs	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2241      	movs	r2, #65	; 0x41
 80015f2:	2120      	movs	r1, #32
 80015f4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2242      	movs	r2, #66	; 0x42
 80015fa:	2100      	movs	r1, #0
 80015fc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2240      	movs	r2, #64	; 0x40
 8001602:	2100      	movs	r1, #0
 8001604:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e00f      	b.n	800162a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	68ba      	ldr	r2, [r7, #8]
 8001612:	4013      	ands	r3, r2
 8001614:	68ba      	ldr	r2, [r7, #8]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	425a      	negs	r2, r3
 800161a:	4153      	adcs	r3, r2
 800161c:	b2db      	uxtb	r3, r3
 800161e:	001a      	movs	r2, r3
 8001620:	1dfb      	adds	r3, r7, #7
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	429a      	cmp	r2, r3
 8001626:	d0ce      	beq.n	80015c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	0018      	movs	r0, r3
 800162c:	46bd      	mov	sp, r7
 800162e:	b004      	add	sp, #16
 8001630:	bd80      	pop	{r7, pc}

08001632 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b084      	sub	sp, #16
 8001636:	af00      	add	r7, sp, #0
 8001638:	60f8      	str	r0, [r7, #12]
 800163a:	60b9      	str	r1, [r7, #8]
 800163c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800163e:	e02b      	b.n	8001698 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	68b9      	ldr	r1, [r7, #8]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	0018      	movs	r0, r3
 8001648:	f000 f86e 	bl	8001728 <I2C_IsAcknowledgeFailed>
 800164c:	1e03      	subs	r3, r0, #0
 800164e:	d001      	beq.n	8001654 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e029      	b.n	80016a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	3301      	adds	r3, #1
 8001658:	d01e      	beq.n	8001698 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800165a:	f7ff fb35 	bl	8000cc8 <HAL_GetTick>
 800165e:	0002      	movs	r2, r0
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	429a      	cmp	r2, r3
 8001668:	d302      	bcc.n	8001670 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d113      	bne.n	8001698 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001674:	2220      	movs	r2, #32
 8001676:	431a      	orrs	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2241      	movs	r2, #65	; 0x41
 8001680:	2120      	movs	r1, #32
 8001682:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2242      	movs	r2, #66	; 0x42
 8001688:	2100      	movs	r1, #0
 800168a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2240      	movs	r2, #64	; 0x40
 8001690:	2100      	movs	r1, #0
 8001692:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e007      	b.n	80016a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	2202      	movs	r2, #2
 80016a0:	4013      	ands	r3, r2
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d1cc      	bne.n	8001640 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	0018      	movs	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	b004      	add	sp, #16
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016bc:	e028      	b.n	8001710 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	68b9      	ldr	r1, [r7, #8]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	0018      	movs	r0, r3
 80016c6:	f000 f82f 	bl	8001728 <I2C_IsAcknowledgeFailed>
 80016ca:	1e03      	subs	r3, r0, #0
 80016cc:	d001      	beq.n	80016d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e026      	b.n	8001720 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016d2:	f7ff faf9 	bl	8000cc8 <HAL_GetTick>
 80016d6:	0002      	movs	r2, r0
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	68ba      	ldr	r2, [r7, #8]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d302      	bcc.n	80016e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d113      	bne.n	8001710 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ec:	2220      	movs	r2, #32
 80016ee:	431a      	orrs	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2241      	movs	r2, #65	; 0x41
 80016f8:	2120      	movs	r1, #32
 80016fa:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2242      	movs	r2, #66	; 0x42
 8001700:	2100      	movs	r1, #0
 8001702:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2240      	movs	r2, #64	; 0x40
 8001708:	2100      	movs	r1, #0
 800170a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e007      	b.n	8001720 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	2220      	movs	r2, #32
 8001718:	4013      	ands	r3, r2
 800171a:	2b20      	cmp	r3, #32
 800171c:	d1cf      	bne.n	80016be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	0018      	movs	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	b004      	add	sp, #16
 8001726:	bd80      	pop	{r7, pc}

08001728 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	2210      	movs	r2, #16
 800173c:	4013      	ands	r3, r2
 800173e:	2b10      	cmp	r3, #16
 8001740:	d164      	bne.n	800180c <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	049b      	lsls	r3, r3, #18
 800174c:	401a      	ands	r2, r3
 800174e:	2380      	movs	r3, #128	; 0x80
 8001750:	049b      	lsls	r3, r3, #18
 8001752:	429a      	cmp	r2, r3
 8001754:	d02b      	beq.n	80017ae <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2180      	movs	r1, #128	; 0x80
 8001762:	01c9      	lsls	r1, r1, #7
 8001764:	430a      	orrs	r2, r1
 8001766:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001768:	e021      	b.n	80017ae <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	3301      	adds	r3, #1
 800176e:	d01e      	beq.n	80017ae <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001770:	f7ff faaa 	bl	8000cc8 <HAL_GetTick>
 8001774:	0002      	movs	r2, r0
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	429a      	cmp	r2, r3
 800177e:	d302      	bcc.n	8001786 <I2C_IsAcknowledgeFailed+0x5e>
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d113      	bne.n	80017ae <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178a:	2220      	movs	r2, #32
 800178c:	431a      	orrs	r2, r3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2241      	movs	r2, #65	; 0x41
 8001796:	2120      	movs	r1, #32
 8001798:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2242      	movs	r2, #66	; 0x42
 800179e:	2100      	movs	r1, #0
 80017a0:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2240      	movs	r2, #64	; 0x40
 80017a6:	2100      	movs	r1, #0
 80017a8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e02f      	b.n	800180e <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	2220      	movs	r2, #32
 80017b6:	4013      	ands	r3, r2
 80017b8:	2b20      	cmp	r3, #32
 80017ba:	d1d6      	bne.n	800176a <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2210      	movs	r2, #16
 80017c2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2220      	movs	r2, #32
 80017ca:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	0018      	movs	r0, r3
 80017d0:	f7ff fece 	bl	8001570 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	490e      	ldr	r1, [pc, #56]	; (8001818 <I2C_IsAcknowledgeFailed+0xf0>)
 80017e0:	400a      	ands	r2, r1
 80017e2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e8:	2204      	movs	r2, #4
 80017ea:	431a      	orrs	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2241      	movs	r2, #65	; 0x41
 80017f4:	2120      	movs	r1, #32
 80017f6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2242      	movs	r2, #66	; 0x42
 80017fc:	2100      	movs	r1, #0
 80017fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2240      	movs	r2, #64	; 0x40
 8001804:	2100      	movs	r1, #0
 8001806:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e000      	b.n	800180e <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	0018      	movs	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	b004      	add	sp, #16
 8001814:	bd80      	pop	{r7, pc}
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	fe00e800 	.word	0xfe00e800

0800181c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800181c:	b590      	push	{r4, r7, lr}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	0008      	movs	r0, r1
 8001826:	0011      	movs	r1, r2
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	240a      	movs	r4, #10
 800182c:	193b      	adds	r3, r7, r4
 800182e:	1c02      	adds	r2, r0, #0
 8001830:	801a      	strh	r2, [r3, #0]
 8001832:	2009      	movs	r0, #9
 8001834:	183b      	adds	r3, r7, r0
 8001836:	1c0a      	adds	r2, r1, #0
 8001838:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	6a3a      	ldr	r2, [r7, #32]
 8001842:	0d51      	lsrs	r1, r2, #21
 8001844:	2280      	movs	r2, #128	; 0x80
 8001846:	00d2      	lsls	r2, r2, #3
 8001848:	400a      	ands	r2, r1
 800184a:	490e      	ldr	r1, [pc, #56]	; (8001884 <I2C_TransferConfig+0x68>)
 800184c:	430a      	orrs	r2, r1
 800184e:	43d2      	mvns	r2, r2
 8001850:	401a      	ands	r2, r3
 8001852:	0011      	movs	r1, r2
 8001854:	193b      	adds	r3, r7, r4
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	059b      	lsls	r3, r3, #22
 800185a:	0d9a      	lsrs	r2, r3, #22
 800185c:	183b      	adds	r3, r7, r0
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	0418      	lsls	r0, r3, #16
 8001862:	23ff      	movs	r3, #255	; 0xff
 8001864:	041b      	lsls	r3, r3, #16
 8001866:	4003      	ands	r3, r0
 8001868:	431a      	orrs	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	431a      	orrs	r2, r3
 800186e:	6a3b      	ldr	r3, [r7, #32]
 8001870:	431a      	orrs	r2, r3
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	46bd      	mov	sp, r7
 800187e:	b005      	add	sp, #20
 8001880:	bd90      	pop	{r4, r7, pc}
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	03ff63ff 	.word	0x03ff63ff

08001888 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2241      	movs	r2, #65	; 0x41
 8001896:	5c9b      	ldrb	r3, [r3, r2]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b20      	cmp	r3, #32
 800189c:	d138      	bne.n	8001910 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2240      	movs	r2, #64	; 0x40
 80018a2:	5c9b      	ldrb	r3, [r3, r2]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d101      	bne.n	80018ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80018a8:	2302      	movs	r3, #2
 80018aa:	e032      	b.n	8001912 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2240      	movs	r2, #64	; 0x40
 80018b0:	2101      	movs	r1, #1
 80018b2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2241      	movs	r2, #65	; 0x41
 80018b8:	2124      	movs	r1, #36	; 0x24
 80018ba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2101      	movs	r1, #1
 80018c8:	438a      	bics	r2, r1
 80018ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4911      	ldr	r1, [pc, #68]	; (800191c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80018d8:	400a      	ands	r2, r1
 80018da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6819      	ldr	r1, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2101      	movs	r1, #1
 80018f8:	430a      	orrs	r2, r1
 80018fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2241      	movs	r2, #65	; 0x41
 8001900:	2120      	movs	r1, #32
 8001902:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2240      	movs	r2, #64	; 0x40
 8001908:	2100      	movs	r1, #0
 800190a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800190c:	2300      	movs	r3, #0
 800190e:	e000      	b.n	8001912 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001910:	2302      	movs	r3, #2
  }
}
 8001912:	0018      	movs	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	b002      	add	sp, #8
 8001918:	bd80      	pop	{r7, pc}
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	ffffefff 	.word	0xffffefff

08001920 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2241      	movs	r2, #65	; 0x41
 800192e:	5c9b      	ldrb	r3, [r3, r2]
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b20      	cmp	r3, #32
 8001934:	d139      	bne.n	80019aa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2240      	movs	r2, #64	; 0x40
 800193a:	5c9b      	ldrb	r3, [r3, r2]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d101      	bne.n	8001944 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001940:	2302      	movs	r3, #2
 8001942:	e033      	b.n	80019ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2240      	movs	r2, #64	; 0x40
 8001948:	2101      	movs	r1, #1
 800194a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2241      	movs	r2, #65	; 0x41
 8001950:	2124      	movs	r1, #36	; 0x24
 8001952:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2101      	movs	r1, #1
 8001960:	438a      	bics	r2, r1
 8001962:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4a11      	ldr	r2, [pc, #68]	; (80019b4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001970:	4013      	ands	r3, r2
 8001972:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	021b      	lsls	r3, r3, #8
 8001978:	68fa      	ldr	r2, [r7, #12]
 800197a:	4313      	orrs	r3, r2
 800197c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2101      	movs	r1, #1
 8001992:	430a      	orrs	r2, r1
 8001994:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2241      	movs	r2, #65	; 0x41
 800199a:	2120      	movs	r1, #32
 800199c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2240      	movs	r2, #64	; 0x40
 80019a2:	2100      	movs	r1, #0
 80019a4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80019a6:	2300      	movs	r3, #0
 80019a8:	e000      	b.n	80019ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80019aa:	2302      	movs	r3, #2
  }
}
 80019ac:	0018      	movs	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	b004      	add	sp, #16
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	fffff0ff 	.word	0xfffff0ff

080019b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e301      	b.n	8001fce <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2201      	movs	r2, #1
 80019d0:	4013      	ands	r3, r2
 80019d2:	d100      	bne.n	80019d6 <HAL_RCC_OscConfig+0x1e>
 80019d4:	e08d      	b.n	8001af2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019d6:	4bc3      	ldr	r3, [pc, #780]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	220c      	movs	r2, #12
 80019dc:	4013      	ands	r3, r2
 80019de:	2b04      	cmp	r3, #4
 80019e0:	d00e      	beq.n	8001a00 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019e2:	4bc0      	ldr	r3, [pc, #768]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	220c      	movs	r2, #12
 80019e8:	4013      	ands	r3, r2
 80019ea:	2b08      	cmp	r3, #8
 80019ec:	d116      	bne.n	8001a1c <HAL_RCC_OscConfig+0x64>
 80019ee:	4bbd      	ldr	r3, [pc, #756]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 80019f0:	685a      	ldr	r2, [r3, #4]
 80019f2:	2380      	movs	r3, #128	; 0x80
 80019f4:	025b      	lsls	r3, r3, #9
 80019f6:	401a      	ands	r2, r3
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	025b      	lsls	r3, r3, #9
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d10d      	bne.n	8001a1c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a00:	4bb8      	ldr	r3, [pc, #736]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	029b      	lsls	r3, r3, #10
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d100      	bne.n	8001a0e <HAL_RCC_OscConfig+0x56>
 8001a0c:	e070      	b.n	8001af0 <HAL_RCC_OscConfig+0x138>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d000      	beq.n	8001a18 <HAL_RCC_OscConfig+0x60>
 8001a16:	e06b      	b.n	8001af0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e2d8      	b.n	8001fce <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d107      	bne.n	8001a34 <HAL_RCC_OscConfig+0x7c>
 8001a24:	4baf      	ldr	r3, [pc, #700]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4bae      	ldr	r3, [pc, #696]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a2a:	2180      	movs	r1, #128	; 0x80
 8001a2c:	0249      	lsls	r1, r1, #9
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	e02f      	b.n	8001a94 <HAL_RCC_OscConfig+0xdc>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d10c      	bne.n	8001a56 <HAL_RCC_OscConfig+0x9e>
 8001a3c:	4ba9      	ldr	r3, [pc, #676]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4ba8      	ldr	r3, [pc, #672]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a42:	49a9      	ldr	r1, [pc, #676]	; (8001ce8 <HAL_RCC_OscConfig+0x330>)
 8001a44:	400a      	ands	r2, r1
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	4ba6      	ldr	r3, [pc, #664]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4ba5      	ldr	r3, [pc, #660]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a4e:	49a7      	ldr	r1, [pc, #668]	; (8001cec <HAL_RCC_OscConfig+0x334>)
 8001a50:	400a      	ands	r2, r1
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	e01e      	b.n	8001a94 <HAL_RCC_OscConfig+0xdc>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b05      	cmp	r3, #5
 8001a5c:	d10e      	bne.n	8001a7c <HAL_RCC_OscConfig+0xc4>
 8001a5e:	4ba1      	ldr	r3, [pc, #644]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	4ba0      	ldr	r3, [pc, #640]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a64:	2180      	movs	r1, #128	; 0x80
 8001a66:	02c9      	lsls	r1, r1, #11
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	4b9d      	ldr	r3, [pc, #628]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b9c      	ldr	r3, [pc, #624]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a72:	2180      	movs	r1, #128	; 0x80
 8001a74:	0249      	lsls	r1, r1, #9
 8001a76:	430a      	orrs	r2, r1
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	e00b      	b.n	8001a94 <HAL_RCC_OscConfig+0xdc>
 8001a7c:	4b99      	ldr	r3, [pc, #612]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b98      	ldr	r3, [pc, #608]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a82:	4999      	ldr	r1, [pc, #612]	; (8001ce8 <HAL_RCC_OscConfig+0x330>)
 8001a84:	400a      	ands	r2, r1
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	4b96      	ldr	r3, [pc, #600]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4b95      	ldr	r3, [pc, #596]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a8e:	4997      	ldr	r1, [pc, #604]	; (8001cec <HAL_RCC_OscConfig+0x334>)
 8001a90:	400a      	ands	r2, r1
 8001a92:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d014      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9c:	f7ff f914 	bl	8000cc8 <HAL_GetTick>
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aa6:	f7ff f90f 	bl	8000cc8 <HAL_GetTick>
 8001aaa:	0002      	movs	r2, r0
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b64      	cmp	r3, #100	; 0x64
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e28a      	b.n	8001fce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab8:	4b8a      	ldr	r3, [pc, #552]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	2380      	movs	r3, #128	; 0x80
 8001abe:	029b      	lsls	r3, r3, #10
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d0f0      	beq.n	8001aa6 <HAL_RCC_OscConfig+0xee>
 8001ac4:	e015      	b.n	8001af2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac6:	f7ff f8ff 	bl	8000cc8 <HAL_GetTick>
 8001aca:	0003      	movs	r3, r0
 8001acc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ad0:	f7ff f8fa 	bl	8000cc8 <HAL_GetTick>
 8001ad4:	0002      	movs	r2, r0
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b64      	cmp	r3, #100	; 0x64
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e275      	b.n	8001fce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae2:	4b80      	ldr	r3, [pc, #512]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	2380      	movs	r3, #128	; 0x80
 8001ae8:	029b      	lsls	r3, r3, #10
 8001aea:	4013      	ands	r3, r2
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x118>
 8001aee:	e000      	b.n	8001af2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2202      	movs	r2, #2
 8001af8:	4013      	ands	r3, r2
 8001afa:	d100      	bne.n	8001afe <HAL_RCC_OscConfig+0x146>
 8001afc:	e069      	b.n	8001bd2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001afe:	4b79      	ldr	r3, [pc, #484]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	220c      	movs	r2, #12
 8001b04:	4013      	ands	r3, r2
 8001b06:	d00b      	beq.n	8001b20 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b08:	4b76      	ldr	r3, [pc, #472]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	220c      	movs	r2, #12
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	d11c      	bne.n	8001b4e <HAL_RCC_OscConfig+0x196>
 8001b14:	4b73      	ldr	r3, [pc, #460]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	025b      	lsls	r3, r3, #9
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d116      	bne.n	8001b4e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b20:	4b70      	ldr	r3, [pc, #448]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2202      	movs	r2, #2
 8001b26:	4013      	ands	r3, r2
 8001b28:	d005      	beq.n	8001b36 <HAL_RCC_OscConfig+0x17e>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d001      	beq.n	8001b36 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e24b      	b.n	8001fce <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b36:	4b6b      	ldr	r3, [pc, #428]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	22f8      	movs	r2, #248	; 0xf8
 8001b3c:	4393      	bics	r3, r2
 8001b3e:	0019      	movs	r1, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	00da      	lsls	r2, r3, #3
 8001b46:	4b67      	ldr	r3, [pc, #412]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b4c:	e041      	b.n	8001bd2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d024      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b56:	4b63      	ldr	r3, [pc, #396]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	4b62      	ldr	r3, [pc, #392]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b62:	f7ff f8b1 	bl	8000cc8 <HAL_GetTick>
 8001b66:	0003      	movs	r3, r0
 8001b68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b6c:	f7ff f8ac 	bl	8000cc8 <HAL_GetTick>
 8001b70:	0002      	movs	r2, r0
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e227      	b.n	8001fce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7e:	4b59      	ldr	r3, [pc, #356]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2202      	movs	r2, #2
 8001b84:	4013      	ands	r3, r2
 8001b86:	d0f1      	beq.n	8001b6c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b88:	4b56      	ldr	r3, [pc, #344]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	22f8      	movs	r2, #248	; 0xf8
 8001b8e:	4393      	bics	r3, r2
 8001b90:	0019      	movs	r1, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	00da      	lsls	r2, r3, #3
 8001b98:	4b52      	ldr	r3, [pc, #328]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	e018      	b.n	8001bd2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ba0:	4b50      	ldr	r3, [pc, #320]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b4f      	ldr	r3, [pc, #316]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	438a      	bics	r2, r1
 8001baa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bac:	f7ff f88c 	bl	8000cc8 <HAL_GetTick>
 8001bb0:	0003      	movs	r3, r0
 8001bb2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bb6:	f7ff f887 	bl	8000cc8 <HAL_GetTick>
 8001bba:	0002      	movs	r2, r0
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e202      	b.n	8001fce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc8:	4b46      	ldr	r3, [pc, #280]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2202      	movs	r2, #2
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d1f1      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2208      	movs	r2, #8
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d036      	beq.n	8001c4a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d019      	beq.n	8001c18 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001be4:	4b3f      	ldr	r3, [pc, #252]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001be6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001be8:	4b3e      	ldr	r3, [pc, #248]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001bea:	2101      	movs	r1, #1
 8001bec:	430a      	orrs	r2, r1
 8001bee:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf0:	f7ff f86a 	bl	8000cc8 <HAL_GetTick>
 8001bf4:	0003      	movs	r3, r0
 8001bf6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bfa:	f7ff f865 	bl	8000cc8 <HAL_GetTick>
 8001bfe:	0002      	movs	r2, r0
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e1e0      	b.n	8001fce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c0c:	4b35      	ldr	r3, [pc, #212]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	2202      	movs	r2, #2
 8001c12:	4013      	ands	r3, r2
 8001c14:	d0f1      	beq.n	8001bfa <HAL_RCC_OscConfig+0x242>
 8001c16:	e018      	b.n	8001c4a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c18:	4b32      	ldr	r3, [pc, #200]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001c1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c1c:	4b31      	ldr	r3, [pc, #196]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001c1e:	2101      	movs	r1, #1
 8001c20:	438a      	bics	r2, r1
 8001c22:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c24:	f7ff f850 	bl	8000cc8 <HAL_GetTick>
 8001c28:	0003      	movs	r3, r0
 8001c2a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c2e:	f7ff f84b 	bl	8000cc8 <HAL_GetTick>
 8001c32:	0002      	movs	r2, r0
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e1c6      	b.n	8001fce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c40:	4b28      	ldr	r3, [pc, #160]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c44:	2202      	movs	r2, #2
 8001c46:	4013      	ands	r3, r2
 8001c48:	d1f1      	bne.n	8001c2e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2204      	movs	r2, #4
 8001c50:	4013      	ands	r3, r2
 8001c52:	d100      	bne.n	8001c56 <HAL_RCC_OscConfig+0x29e>
 8001c54:	e0b4      	b.n	8001dc0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c56:	201f      	movs	r0, #31
 8001c58:	183b      	adds	r3, r7, r0
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c5e:	4b21      	ldr	r3, [pc, #132]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001c60:	69da      	ldr	r2, [r3, #28]
 8001c62:	2380      	movs	r3, #128	; 0x80
 8001c64:	055b      	lsls	r3, r3, #21
 8001c66:	4013      	ands	r3, r2
 8001c68:	d110      	bne.n	8001c8c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001c6c:	69da      	ldr	r2, [r3, #28]
 8001c6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001c70:	2180      	movs	r1, #128	; 0x80
 8001c72:	0549      	lsls	r1, r1, #21
 8001c74:	430a      	orrs	r2, r1
 8001c76:	61da      	str	r2, [r3, #28]
 8001c78:	4b1a      	ldr	r3, [pc, #104]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001c7a:	69da      	ldr	r2, [r3, #28]
 8001c7c:	2380      	movs	r3, #128	; 0x80
 8001c7e:	055b      	lsls	r3, r3, #21
 8001c80:	4013      	ands	r3, r2
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c86:	183b      	adds	r3, r7, r0
 8001c88:	2201      	movs	r2, #1
 8001c8a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8c:	4b18      	ldr	r3, [pc, #96]	; (8001cf0 <HAL_RCC_OscConfig+0x338>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	2380      	movs	r3, #128	; 0x80
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	4013      	ands	r3, r2
 8001c96:	d11a      	bne.n	8001cce <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c98:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <HAL_RCC_OscConfig+0x338>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <HAL_RCC_OscConfig+0x338>)
 8001c9e:	2180      	movs	r1, #128	; 0x80
 8001ca0:	0049      	lsls	r1, r1, #1
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ca6:	f7ff f80f 	bl	8000cc8 <HAL_GetTick>
 8001caa:	0003      	movs	r3, r0
 8001cac:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb0:	f7ff f80a 	bl	8000cc8 <HAL_GetTick>
 8001cb4:	0002      	movs	r2, r0
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b64      	cmp	r3, #100	; 0x64
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e185      	b.n	8001fce <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <HAL_RCC_OscConfig+0x338>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	2380      	movs	r3, #128	; 0x80
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	4013      	ands	r3, r2
 8001ccc:	d0f0      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d10e      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x33c>
 8001cd6:	4b03      	ldr	r3, [pc, #12]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001cd8:	6a1a      	ldr	r2, [r3, #32]
 8001cda:	4b02      	ldr	r3, [pc, #8]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001cdc:	2101      	movs	r1, #1
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	621a      	str	r2, [r3, #32]
 8001ce2:	e035      	b.n	8001d50 <HAL_RCC_OscConfig+0x398>
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	fffeffff 	.word	0xfffeffff
 8001cec:	fffbffff 	.word	0xfffbffff
 8001cf0:	40007000 	.word	0x40007000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d10c      	bne.n	8001d16 <HAL_RCC_OscConfig+0x35e>
 8001cfc:	4bb6      	ldr	r3, [pc, #728]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001cfe:	6a1a      	ldr	r2, [r3, #32]
 8001d00:	4bb5      	ldr	r3, [pc, #724]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001d02:	2101      	movs	r1, #1
 8001d04:	438a      	bics	r2, r1
 8001d06:	621a      	str	r2, [r3, #32]
 8001d08:	4bb3      	ldr	r3, [pc, #716]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001d0a:	6a1a      	ldr	r2, [r3, #32]
 8001d0c:	4bb2      	ldr	r3, [pc, #712]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001d0e:	2104      	movs	r1, #4
 8001d10:	438a      	bics	r2, r1
 8001d12:	621a      	str	r2, [r3, #32]
 8001d14:	e01c      	b.n	8001d50 <HAL_RCC_OscConfig+0x398>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	2b05      	cmp	r3, #5
 8001d1c:	d10c      	bne.n	8001d38 <HAL_RCC_OscConfig+0x380>
 8001d1e:	4bae      	ldr	r3, [pc, #696]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001d20:	6a1a      	ldr	r2, [r3, #32]
 8001d22:	4bad      	ldr	r3, [pc, #692]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001d24:	2104      	movs	r1, #4
 8001d26:	430a      	orrs	r2, r1
 8001d28:	621a      	str	r2, [r3, #32]
 8001d2a:	4bab      	ldr	r3, [pc, #684]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001d2c:	6a1a      	ldr	r2, [r3, #32]
 8001d2e:	4baa      	ldr	r3, [pc, #680]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001d30:	2101      	movs	r1, #1
 8001d32:	430a      	orrs	r2, r1
 8001d34:	621a      	str	r2, [r3, #32]
 8001d36:	e00b      	b.n	8001d50 <HAL_RCC_OscConfig+0x398>
 8001d38:	4ba7      	ldr	r3, [pc, #668]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001d3a:	6a1a      	ldr	r2, [r3, #32]
 8001d3c:	4ba6      	ldr	r3, [pc, #664]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001d3e:	2101      	movs	r1, #1
 8001d40:	438a      	bics	r2, r1
 8001d42:	621a      	str	r2, [r3, #32]
 8001d44:	4ba4      	ldr	r3, [pc, #656]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001d46:	6a1a      	ldr	r2, [r3, #32]
 8001d48:	4ba3      	ldr	r3, [pc, #652]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001d4a:	2104      	movs	r1, #4
 8001d4c:	438a      	bics	r2, r1
 8001d4e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d014      	beq.n	8001d82 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d58:	f7fe ffb6 	bl	8000cc8 <HAL_GetTick>
 8001d5c:	0003      	movs	r3, r0
 8001d5e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d60:	e009      	b.n	8001d76 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d62:	f7fe ffb1 	bl	8000cc8 <HAL_GetTick>
 8001d66:	0002      	movs	r2, r0
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	4a9b      	ldr	r2, [pc, #620]	; (8001fdc <HAL_RCC_OscConfig+0x624>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e12b      	b.n	8001fce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d76:	4b98      	ldr	r3, [pc, #608]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d0f0      	beq.n	8001d62 <HAL_RCC_OscConfig+0x3aa>
 8001d80:	e013      	b.n	8001daa <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d82:	f7fe ffa1 	bl	8000cc8 <HAL_GetTick>
 8001d86:	0003      	movs	r3, r0
 8001d88:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d8a:	e009      	b.n	8001da0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d8c:	f7fe ff9c 	bl	8000cc8 <HAL_GetTick>
 8001d90:	0002      	movs	r2, r0
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	4a91      	ldr	r2, [pc, #580]	; (8001fdc <HAL_RCC_OscConfig+0x624>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e116      	b.n	8001fce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da0:	4b8d      	ldr	r3, [pc, #564]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	2202      	movs	r2, #2
 8001da6:	4013      	ands	r3, r2
 8001da8:	d1f0      	bne.n	8001d8c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001daa:	231f      	movs	r3, #31
 8001dac:	18fb      	adds	r3, r7, r3
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d105      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db4:	4b88      	ldr	r3, [pc, #544]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001db6:	69da      	ldr	r2, [r3, #28]
 8001db8:	4b87      	ldr	r3, [pc, #540]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001dba:	4989      	ldr	r1, [pc, #548]	; (8001fe0 <HAL_RCC_OscConfig+0x628>)
 8001dbc:	400a      	ands	r2, r1
 8001dbe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2210      	movs	r2, #16
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d063      	beq.n	8001e92 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d12a      	bne.n	8001e28 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001dd2:	4b81      	ldr	r3, [pc, #516]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001dd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dd6:	4b80      	ldr	r3, [pc, #512]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001dd8:	2104      	movs	r1, #4
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001dde:	4b7e      	ldr	r3, [pc, #504]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001de0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001de2:	4b7d      	ldr	r3, [pc, #500]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001de4:	2101      	movs	r1, #1
 8001de6:	430a      	orrs	r2, r1
 8001de8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dea:	f7fe ff6d 	bl	8000cc8 <HAL_GetTick>
 8001dee:	0003      	movs	r3, r0
 8001df0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001df4:	f7fe ff68 	bl	8000cc8 <HAL_GetTick>
 8001df8:	0002      	movs	r2, r0
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e0e3      	b.n	8001fce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e06:	4b74      	ldr	r3, [pc, #464]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d0f1      	beq.n	8001df4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e10:	4b71      	ldr	r3, [pc, #452]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e14:	22f8      	movs	r2, #248	; 0xf8
 8001e16:	4393      	bics	r3, r2
 8001e18:	0019      	movs	r1, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	00da      	lsls	r2, r3, #3
 8001e20:	4b6d      	ldr	r3, [pc, #436]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001e22:	430a      	orrs	r2, r1
 8001e24:	635a      	str	r2, [r3, #52]	; 0x34
 8001e26:	e034      	b.n	8001e92 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	3305      	adds	r3, #5
 8001e2e:	d111      	bne.n	8001e54 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001e30:	4b69      	ldr	r3, [pc, #420]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001e32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e34:	4b68      	ldr	r3, [pc, #416]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001e36:	2104      	movs	r1, #4
 8001e38:	438a      	bics	r2, r1
 8001e3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e3c:	4b66      	ldr	r3, [pc, #408]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e40:	22f8      	movs	r2, #248	; 0xf8
 8001e42:	4393      	bics	r3, r2
 8001e44:	0019      	movs	r1, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	00da      	lsls	r2, r3, #3
 8001e4c:	4b62      	ldr	r3, [pc, #392]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	635a      	str	r2, [r3, #52]	; 0x34
 8001e52:	e01e      	b.n	8001e92 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e54:	4b60      	ldr	r3, [pc, #384]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001e56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e58:	4b5f      	ldr	r3, [pc, #380]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001e5a:	2104      	movs	r1, #4
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001e60:	4b5d      	ldr	r3, [pc, #372]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001e62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e64:	4b5c      	ldr	r3, [pc, #368]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001e66:	2101      	movs	r1, #1
 8001e68:	438a      	bics	r2, r1
 8001e6a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6c:	f7fe ff2c 	bl	8000cc8 <HAL_GetTick>
 8001e70:	0003      	movs	r3, r0
 8001e72:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e76:	f7fe ff27 	bl	8000cc8 <HAL_GetTick>
 8001e7a:	0002      	movs	r2, r0
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e0a2      	b.n	8001fce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e88:	4b53      	ldr	r3, [pc, #332]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d1f1      	bne.n	8001e76 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d100      	bne.n	8001e9c <HAL_RCC_OscConfig+0x4e4>
 8001e9a:	e097      	b.n	8001fcc <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e9c:	4b4e      	ldr	r3, [pc, #312]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	220c      	movs	r2, #12
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d100      	bne.n	8001eaa <HAL_RCC_OscConfig+0x4f2>
 8001ea8:	e06b      	b.n	8001f82 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d14c      	bne.n	8001f4c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb2:	4b49      	ldr	r3, [pc, #292]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	4b48      	ldr	r3, [pc, #288]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001eb8:	494a      	ldr	r1, [pc, #296]	; (8001fe4 <HAL_RCC_OscConfig+0x62c>)
 8001eba:	400a      	ands	r2, r1
 8001ebc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebe:	f7fe ff03 	bl	8000cc8 <HAL_GetTick>
 8001ec2:	0003      	movs	r3, r0
 8001ec4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec8:	f7fe fefe 	bl	8000cc8 <HAL_GetTick>
 8001ecc:	0002      	movs	r2, r0
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e079      	b.n	8001fce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eda:	4b3f      	ldr	r3, [pc, #252]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	2380      	movs	r3, #128	; 0x80
 8001ee0:	049b      	lsls	r3, r3, #18
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ee6:	4b3c      	ldr	r3, [pc, #240]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eea:	220f      	movs	r2, #15
 8001eec:	4393      	bics	r3, r2
 8001eee:	0019      	movs	r1, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ef4:	4b38      	ldr	r3, [pc, #224]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001efa:	4b37      	ldr	r3, [pc, #220]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	4a3a      	ldr	r2, [pc, #232]	; (8001fe8 <HAL_RCC_OscConfig+0x630>)
 8001f00:	4013      	ands	r3, r2
 8001f02:	0019      	movs	r1, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	4b32      	ldr	r3, [pc, #200]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001f10:	430a      	orrs	r2, r1
 8001f12:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f14:	4b30      	ldr	r3, [pc, #192]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4b2f      	ldr	r3, [pc, #188]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001f1a:	2180      	movs	r1, #128	; 0x80
 8001f1c:	0449      	lsls	r1, r1, #17
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f22:	f7fe fed1 	bl	8000cc8 <HAL_GetTick>
 8001f26:	0003      	movs	r3, r0
 8001f28:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f2c:	f7fe fecc 	bl	8000cc8 <HAL_GetTick>
 8001f30:	0002      	movs	r2, r0
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e047      	b.n	8001fce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f3e:	4b26      	ldr	r3, [pc, #152]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	2380      	movs	r3, #128	; 0x80
 8001f44:	049b      	lsls	r3, r3, #18
 8001f46:	4013      	ands	r3, r2
 8001f48:	d0f0      	beq.n	8001f2c <HAL_RCC_OscConfig+0x574>
 8001f4a:	e03f      	b.n	8001fcc <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f4c:	4b22      	ldr	r3, [pc, #136]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	4b21      	ldr	r3, [pc, #132]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001f52:	4924      	ldr	r1, [pc, #144]	; (8001fe4 <HAL_RCC_OscConfig+0x62c>)
 8001f54:	400a      	ands	r2, r1
 8001f56:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7fe feb6 	bl	8000cc8 <HAL_GetTick>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f62:	f7fe feb1 	bl	8000cc8 <HAL_GetTick>
 8001f66:	0002      	movs	r2, r0
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e02c      	b.n	8001fce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f74:	4b18      	ldr	r3, [pc, #96]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	2380      	movs	r3, #128	; 0x80
 8001f7a:	049b      	lsls	r3, r3, #18
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d1f0      	bne.n	8001f62 <HAL_RCC_OscConfig+0x5aa>
 8001f80:	e024      	b.n	8001fcc <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e01f      	b.n	8001fce <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001f8e:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001f94:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f98:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	2380      	movs	r3, #128	; 0x80
 8001f9e:	025b      	lsls	r3, r3, #9
 8001fa0:	401a      	ands	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d10e      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	220f      	movs	r2, #15
 8001fae:	401a      	ands	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d107      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	23f0      	movs	r3, #240	; 0xf0
 8001fbc:	039b      	lsls	r3, r3, #14
 8001fbe:	401a      	ands	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d001      	beq.n	8001fcc <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e000      	b.n	8001fce <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	0018      	movs	r0, r3
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	b008      	add	sp, #32
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	00001388 	.word	0x00001388
 8001fe0:	efffffff 	.word	0xefffffff
 8001fe4:	feffffff 	.word	0xfeffffff
 8001fe8:	ffc2ffff 	.word	0xffc2ffff

08001fec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e0b3      	b.n	8002168 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002000:	4b5b      	ldr	r3, [pc, #364]	; (8002170 <HAL_RCC_ClockConfig+0x184>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2201      	movs	r2, #1
 8002006:	4013      	ands	r3, r2
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	429a      	cmp	r2, r3
 800200c:	d911      	bls.n	8002032 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200e:	4b58      	ldr	r3, [pc, #352]	; (8002170 <HAL_RCC_ClockConfig+0x184>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2201      	movs	r2, #1
 8002014:	4393      	bics	r3, r2
 8002016:	0019      	movs	r1, r3
 8002018:	4b55      	ldr	r3, [pc, #340]	; (8002170 <HAL_RCC_ClockConfig+0x184>)
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002020:	4b53      	ldr	r3, [pc, #332]	; (8002170 <HAL_RCC_ClockConfig+0x184>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2201      	movs	r2, #1
 8002026:	4013      	ands	r3, r2
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	429a      	cmp	r2, r3
 800202c:	d001      	beq.n	8002032 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e09a      	b.n	8002168 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2202      	movs	r2, #2
 8002038:	4013      	ands	r3, r2
 800203a:	d015      	beq.n	8002068 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2204      	movs	r2, #4
 8002042:	4013      	ands	r3, r2
 8002044:	d006      	beq.n	8002054 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002046:	4b4b      	ldr	r3, [pc, #300]	; (8002174 <HAL_RCC_ClockConfig+0x188>)
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	4b4a      	ldr	r3, [pc, #296]	; (8002174 <HAL_RCC_ClockConfig+0x188>)
 800204c:	21e0      	movs	r1, #224	; 0xe0
 800204e:	00c9      	lsls	r1, r1, #3
 8002050:	430a      	orrs	r2, r1
 8002052:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002054:	4b47      	ldr	r3, [pc, #284]	; (8002174 <HAL_RCC_ClockConfig+0x188>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	22f0      	movs	r2, #240	; 0xf0
 800205a:	4393      	bics	r3, r2
 800205c:	0019      	movs	r1, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	4b44      	ldr	r3, [pc, #272]	; (8002174 <HAL_RCC_ClockConfig+0x188>)
 8002064:	430a      	orrs	r2, r1
 8002066:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2201      	movs	r2, #1
 800206e:	4013      	ands	r3, r2
 8002070:	d040      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d107      	bne.n	800208a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207a:	4b3e      	ldr	r3, [pc, #248]	; (8002174 <HAL_RCC_ClockConfig+0x188>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	2380      	movs	r3, #128	; 0x80
 8002080:	029b      	lsls	r3, r3, #10
 8002082:	4013      	ands	r3, r2
 8002084:	d114      	bne.n	80020b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e06e      	b.n	8002168 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b02      	cmp	r3, #2
 8002090:	d107      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002092:	4b38      	ldr	r3, [pc, #224]	; (8002174 <HAL_RCC_ClockConfig+0x188>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	2380      	movs	r3, #128	; 0x80
 8002098:	049b      	lsls	r3, r3, #18
 800209a:	4013      	ands	r3, r2
 800209c:	d108      	bne.n	80020b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e062      	b.n	8002168 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a2:	4b34      	ldr	r3, [pc, #208]	; (8002174 <HAL_RCC_ClockConfig+0x188>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2202      	movs	r2, #2
 80020a8:	4013      	ands	r3, r2
 80020aa:	d101      	bne.n	80020b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e05b      	b.n	8002168 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020b0:	4b30      	ldr	r3, [pc, #192]	; (8002174 <HAL_RCC_ClockConfig+0x188>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2203      	movs	r2, #3
 80020b6:	4393      	bics	r3, r2
 80020b8:	0019      	movs	r1, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	4b2d      	ldr	r3, [pc, #180]	; (8002174 <HAL_RCC_ClockConfig+0x188>)
 80020c0:	430a      	orrs	r2, r1
 80020c2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020c4:	f7fe fe00 	bl	8000cc8 <HAL_GetTick>
 80020c8:	0003      	movs	r3, r0
 80020ca:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020cc:	e009      	b.n	80020e2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ce:	f7fe fdfb 	bl	8000cc8 <HAL_GetTick>
 80020d2:	0002      	movs	r2, r0
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	4a27      	ldr	r2, [pc, #156]	; (8002178 <HAL_RCC_ClockConfig+0x18c>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e042      	b.n	8002168 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e2:	4b24      	ldr	r3, [pc, #144]	; (8002174 <HAL_RCC_ClockConfig+0x188>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	220c      	movs	r2, #12
 80020e8:	401a      	ands	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d1ec      	bne.n	80020ce <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020f4:	4b1e      	ldr	r3, [pc, #120]	; (8002170 <HAL_RCC_ClockConfig+0x184>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2201      	movs	r2, #1
 80020fa:	4013      	ands	r3, r2
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d211      	bcs.n	8002126 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002102:	4b1b      	ldr	r3, [pc, #108]	; (8002170 <HAL_RCC_ClockConfig+0x184>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2201      	movs	r2, #1
 8002108:	4393      	bics	r3, r2
 800210a:	0019      	movs	r1, r3
 800210c:	4b18      	ldr	r3, [pc, #96]	; (8002170 <HAL_RCC_ClockConfig+0x184>)
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	430a      	orrs	r2, r1
 8002112:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002114:	4b16      	ldr	r3, [pc, #88]	; (8002170 <HAL_RCC_ClockConfig+0x184>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2201      	movs	r2, #1
 800211a:	4013      	ands	r3, r2
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	429a      	cmp	r2, r3
 8002120:	d001      	beq.n	8002126 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e020      	b.n	8002168 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2204      	movs	r2, #4
 800212c:	4013      	ands	r3, r2
 800212e:	d009      	beq.n	8002144 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002130:	4b10      	ldr	r3, [pc, #64]	; (8002174 <HAL_RCC_ClockConfig+0x188>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	4a11      	ldr	r2, [pc, #68]	; (800217c <HAL_RCC_ClockConfig+0x190>)
 8002136:	4013      	ands	r3, r2
 8002138:	0019      	movs	r1, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	4b0d      	ldr	r3, [pc, #52]	; (8002174 <HAL_RCC_ClockConfig+0x188>)
 8002140:	430a      	orrs	r2, r1
 8002142:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002144:	f000 f820 	bl	8002188 <HAL_RCC_GetSysClockFreq>
 8002148:	0001      	movs	r1, r0
 800214a:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <HAL_RCC_ClockConfig+0x188>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	091b      	lsrs	r3, r3, #4
 8002150:	220f      	movs	r2, #15
 8002152:	4013      	ands	r3, r2
 8002154:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <HAL_RCC_ClockConfig+0x194>)
 8002156:	5cd3      	ldrb	r3, [r2, r3]
 8002158:	000a      	movs	r2, r1
 800215a:	40da      	lsrs	r2, r3
 800215c:	4b09      	ldr	r3, [pc, #36]	; (8002184 <HAL_RCC_ClockConfig+0x198>)
 800215e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002160:	2000      	movs	r0, #0
 8002162:	f7fe fd6b 	bl	8000c3c <HAL_InitTick>
  
  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	0018      	movs	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	b004      	add	sp, #16
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40022000 	.word	0x40022000
 8002174:	40021000 	.word	0x40021000
 8002178:	00001388 	.word	0x00001388
 800217c:	fffff8ff 	.word	0xfffff8ff
 8002180:	0800365c 	.word	0x0800365c
 8002184:	20000000 	.word	0x20000000

08002188 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002188:	b590      	push	{r4, r7, lr}
 800218a:	b08f      	sub	sp, #60	; 0x3c
 800218c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800218e:	2314      	movs	r3, #20
 8002190:	18fb      	adds	r3, r7, r3
 8002192:	4a2b      	ldr	r2, [pc, #172]	; (8002240 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002194:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002196:	c313      	stmia	r3!, {r0, r1, r4}
 8002198:	6812      	ldr	r2, [r2, #0]
 800219a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800219c:	1d3b      	adds	r3, r7, #4
 800219e:	4a29      	ldr	r2, [pc, #164]	; (8002244 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021a0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80021a2:	c313      	stmia	r3!, {r0, r1, r4}
 80021a4:	6812      	ldr	r2, [r2, #0]
 80021a6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021ac:	2300      	movs	r3, #0
 80021ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80021b0:	2300      	movs	r3, #0
 80021b2:	637b      	str	r3, [r7, #52]	; 0x34
 80021b4:	2300      	movs	r3, #0
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80021bc:	4b22      	ldr	r3, [pc, #136]	; (8002248 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c4:	220c      	movs	r2, #12
 80021c6:	4013      	ands	r3, r2
 80021c8:	2b04      	cmp	r3, #4
 80021ca:	d002      	beq.n	80021d2 <HAL_RCC_GetSysClockFreq+0x4a>
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d003      	beq.n	80021d8 <HAL_RCC_GetSysClockFreq+0x50>
 80021d0:	e02d      	b.n	800222e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021d2:	4b1e      	ldr	r3, [pc, #120]	; (800224c <HAL_RCC_GetSysClockFreq+0xc4>)
 80021d4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80021d6:	e02d      	b.n	8002234 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80021d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021da:	0c9b      	lsrs	r3, r3, #18
 80021dc:	220f      	movs	r2, #15
 80021de:	4013      	ands	r3, r2
 80021e0:	2214      	movs	r2, #20
 80021e2:	18ba      	adds	r2, r7, r2
 80021e4:	5cd3      	ldrb	r3, [r2, r3]
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80021e8:	4b17      	ldr	r3, [pc, #92]	; (8002248 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ec:	220f      	movs	r2, #15
 80021ee:	4013      	ands	r3, r2
 80021f0:	1d3a      	adds	r2, r7, #4
 80021f2:	5cd3      	ldrb	r3, [r2, r3]
 80021f4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80021f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	025b      	lsls	r3, r3, #9
 80021fc:	4013      	ands	r3, r2
 80021fe:	d009      	beq.n	8002214 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002200:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002202:	4812      	ldr	r0, [pc, #72]	; (800224c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002204:	f7fd ff8a 	bl	800011c <__udivsi3>
 8002208:	0003      	movs	r3, r0
 800220a:	001a      	movs	r2, r3
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	4353      	muls	r3, r2
 8002210:	637b      	str	r3, [r7, #52]	; 0x34
 8002212:	e009      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002214:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002216:	000a      	movs	r2, r1
 8002218:	0152      	lsls	r2, r2, #5
 800221a:	1a52      	subs	r2, r2, r1
 800221c:	0193      	lsls	r3, r2, #6
 800221e:	1a9b      	subs	r3, r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	185b      	adds	r3, r3, r1
 8002224:	021b      	lsls	r3, r3, #8
 8002226:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800222a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800222c:	e002      	b.n	8002234 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800222e:	4b07      	ldr	r3, [pc, #28]	; (800224c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002230:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002232:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002236:	0018      	movs	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	b00f      	add	sp, #60	; 0x3c
 800223c:	bd90      	pop	{r4, r7, pc}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	0800363c 	.word	0x0800363c
 8002244:	0800364c 	.word	0x0800364c
 8002248:	40021000 	.word	0x40021000
 800224c:	007a1200 	.word	0x007a1200

08002250 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	025b      	lsls	r3, r3, #9
 8002268:	4013      	ands	r3, r2
 800226a:	d100      	bne.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800226c:	e08e      	b.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800226e:	2017      	movs	r0, #23
 8002270:	183b      	adds	r3, r7, r0
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002276:	4b5f      	ldr	r3, [pc, #380]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002278:	69da      	ldr	r2, [r3, #28]
 800227a:	2380      	movs	r3, #128	; 0x80
 800227c:	055b      	lsls	r3, r3, #21
 800227e:	4013      	ands	r3, r2
 8002280:	d110      	bne.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002282:	4b5c      	ldr	r3, [pc, #368]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002284:	69da      	ldr	r2, [r3, #28]
 8002286:	4b5b      	ldr	r3, [pc, #364]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002288:	2180      	movs	r1, #128	; 0x80
 800228a:	0549      	lsls	r1, r1, #21
 800228c:	430a      	orrs	r2, r1
 800228e:	61da      	str	r2, [r3, #28]
 8002290:	4b58      	ldr	r3, [pc, #352]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002292:	69da      	ldr	r2, [r3, #28]
 8002294:	2380      	movs	r3, #128	; 0x80
 8002296:	055b      	lsls	r3, r3, #21
 8002298:	4013      	ands	r3, r2
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800229e:	183b      	adds	r3, r7, r0
 80022a0:	2201      	movs	r2, #1
 80022a2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a4:	4b54      	ldr	r3, [pc, #336]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	2380      	movs	r3, #128	; 0x80
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4013      	ands	r3, r2
 80022ae:	d11a      	bne.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022b0:	4b51      	ldr	r3, [pc, #324]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4b50      	ldr	r3, [pc, #320]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80022b6:	2180      	movs	r1, #128	; 0x80
 80022b8:	0049      	lsls	r1, r1, #1
 80022ba:	430a      	orrs	r2, r1
 80022bc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022be:	f7fe fd03 	bl	8000cc8 <HAL_GetTick>
 80022c2:	0003      	movs	r3, r0
 80022c4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c6:	e008      	b.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022c8:	f7fe fcfe 	bl	8000cc8 <HAL_GetTick>
 80022cc:	0002      	movs	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b64      	cmp	r3, #100	; 0x64
 80022d4:	d901      	bls.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e087      	b.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022da:	4b47      	ldr	r3, [pc, #284]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	2380      	movs	r3, #128	; 0x80
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	4013      	ands	r3, r2
 80022e4:	d0f0      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022e6:	4b43      	ldr	r3, [pc, #268]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80022e8:	6a1a      	ldr	r2, [r3, #32]
 80022ea:	23c0      	movs	r3, #192	; 0xc0
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4013      	ands	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d034      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	23c0      	movs	r3, #192	; 0xc0
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4013      	ands	r3, r2
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	429a      	cmp	r2, r3
 8002306:	d02c      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002308:	4b3a      	ldr	r3, [pc, #232]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	4a3b      	ldr	r2, [pc, #236]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800230e:	4013      	ands	r3, r2
 8002310:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002312:	4b38      	ldr	r3, [pc, #224]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002314:	6a1a      	ldr	r2, [r3, #32]
 8002316:	4b37      	ldr	r3, [pc, #220]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002318:	2180      	movs	r1, #128	; 0x80
 800231a:	0249      	lsls	r1, r1, #9
 800231c:	430a      	orrs	r2, r1
 800231e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002320:	4b34      	ldr	r3, [pc, #208]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002322:	6a1a      	ldr	r2, [r3, #32]
 8002324:	4b33      	ldr	r3, [pc, #204]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002326:	4936      	ldr	r1, [pc, #216]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002328:	400a      	ands	r2, r1
 800232a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800232c:	4b31      	ldr	r3, [pc, #196]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2201      	movs	r2, #1
 8002336:	4013      	ands	r3, r2
 8002338:	d013      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233a:	f7fe fcc5 	bl	8000cc8 <HAL_GetTick>
 800233e:	0003      	movs	r3, r0
 8002340:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002342:	e009      	b.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002344:	f7fe fcc0 	bl	8000cc8 <HAL_GetTick>
 8002348:	0002      	movs	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	4a2d      	ldr	r2, [pc, #180]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d901      	bls.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e048      	b.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002358:	4b26      	ldr	r3, [pc, #152]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	2202      	movs	r2, #2
 800235e:	4013      	ands	r3, r2
 8002360:	d0f0      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002362:	4b24      	ldr	r3, [pc, #144]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	4a25      	ldr	r2, [pc, #148]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002368:	4013      	ands	r3, r2
 800236a:	0019      	movs	r1, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002372:	430a      	orrs	r2, r1
 8002374:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002376:	2317      	movs	r3, #23
 8002378:	18fb      	adds	r3, r7, r3
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d105      	bne.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002380:	4b1c      	ldr	r3, [pc, #112]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002382:	69da      	ldr	r2, [r3, #28]
 8002384:	4b1b      	ldr	r3, [pc, #108]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002386:	4920      	ldr	r1, [pc, #128]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002388:	400a      	ands	r2, r1
 800238a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2201      	movs	r2, #1
 8002392:	4013      	ands	r3, r2
 8002394:	d009      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002396:	4b17      	ldr	r3, [pc, #92]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	2203      	movs	r2, #3
 800239c:	4393      	bics	r3, r2
 800239e:	0019      	movs	r1, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	4b13      	ldr	r3, [pc, #76]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80023a6:	430a      	orrs	r2, r1
 80023a8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2220      	movs	r2, #32
 80023b0:	4013      	ands	r3, r2
 80023b2:	d009      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023b4:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80023b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b8:	2210      	movs	r2, #16
 80023ba:	4393      	bics	r3, r2
 80023bc:	0019      	movs	r1, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80023c4:	430a      	orrs	r2, r1
 80023c6:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	2380      	movs	r3, #128	; 0x80
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	4013      	ands	r3, r2
 80023d2:	d009      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80023d4:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	2240      	movs	r2, #64	; 0x40
 80023da:	4393      	bics	r3, r2
 80023dc:	0019      	movs	r1, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691a      	ldr	r2, [r3, #16]
 80023e2:	4b04      	ldr	r3, [pc, #16]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80023e4:	430a      	orrs	r2, r1
 80023e6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	0018      	movs	r0, r3
 80023ec:	46bd      	mov	sp, r7
 80023ee:	b006      	add	sp, #24
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	46c0      	nop			; (mov r8, r8)
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40007000 	.word	0x40007000
 80023fc:	fffffcff 	.word	0xfffffcff
 8002400:	fffeffff 	.word	0xfffeffff
 8002404:	00001388 	.word	0x00001388
 8002408:	efffffff 	.word	0xefffffff

0800240c <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e081      	b.n	8002522 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	7f5b      	ldrb	r3, [r3, #29]
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b00      	cmp	r3, #0
 8002426:	d106      	bne.n	8002436 <HAL_RTC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	0018      	movs	r0, r3
 8002432:	f7fe fb45 	bl	8000ac0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2202      	movs	r2, #2
 800243a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	22ca      	movs	r2, #202	; 0xca
 8002442:	625a      	str	r2, [r3, #36]	; 0x24
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2253      	movs	r2, #83	; 0x53
 800244a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	0018      	movs	r0, r3
 8002450:	f000 fbcb 	bl	8002bea <RTC_EnterInitMode>
 8002454:	1e03      	subs	r3, r0, #0
 8002456:	d008      	beq.n	800246a <HAL_RTC_Init+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	22ff      	movs	r2, #255	; 0xff
 800245e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2204      	movs	r2, #4
 8002464:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e05b      	b.n	8002522 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	492d      	ldr	r1, [pc, #180]	; (800252c <HAL_RTC_Init+0x120>)
 8002476:	400a      	ands	r2, r1
 8002478:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6899      	ldr	r1, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	431a      	orrs	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	68d2      	ldr	r2, [r2, #12]
 80024a0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6919      	ldr	r1, [r3, #16]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	041a      	lsls	r2, r3, #16
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68da      	ldr	r2, [r3, #12]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2180      	movs	r1, #128	; 0x80
 80024c2:	438a      	bics	r2, r1
 80024c4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	2220      	movs	r2, #32
 80024ce:	4013      	ands	r3, r2
 80024d0:	d10e      	bne.n	80024f0 <HAL_RTC_Init+0xe4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	0018      	movs	r0, r3
 80024d6:	f000 fb5f 	bl	8002b98 <HAL_RTC_WaitForSynchro>
 80024da:	1e03      	subs	r3, r0, #0
 80024dc:	d008      	beq.n	80024f0 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	22ff      	movs	r2, #255	; 0xff
 80024e4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2204      	movs	r2, #4
 80024ea:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e018      	b.n	8002522 <HAL_RTC_Init+0x116>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	490d      	ldr	r1, [pc, #52]	; (8002530 <HAL_RTC_Init+0x124>)
 80024fc:	400a      	ands	r2, r1
 80024fe:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	699a      	ldr	r2, [r3, #24]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	430a      	orrs	r2, r1
 8002510:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	22ff      	movs	r2, #255	; 0xff
 8002518:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002520:	2300      	movs	r3, #0
  }
}
 8002522:	0018      	movs	r0, r3
 8002524:	46bd      	mov	sp, r7
 8002526:	b002      	add	sp, #8
 8002528:	bd80      	pop	{r7, pc}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	ff8fffbf 	.word	0xff8fffbf
 8002530:	fffbffff 	.word	0xfffbffff

08002534 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002534:	b590      	push	{r4, r7, lr}
 8002536:	b087      	sub	sp, #28
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	7f1b      	ldrb	r3, [r3, #28]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <HAL_RTC_SetTime+0x1c>
 800254c:	2302      	movs	r3, #2
 800254e:	e0a5      	b.n	800269c <HAL_RTC_SetTime+0x168>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2201      	movs	r2, #1
 8002554:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2202      	movs	r2, #2
 800255a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d125      	bne.n	80025ae <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	2240      	movs	r2, #64	; 0x40
 800256a:	4013      	ands	r3, r2
 800256c:	d102      	bne.n	8002574 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2200      	movs	r2, #0
 8002572:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	0018      	movs	r0, r3
 800257a:	f000 fb62 	bl	8002c42 <RTC_ByteToBcd2>
 800257e:	0003      	movs	r3, r0
 8002580:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	785b      	ldrb	r3, [r3, #1]
 8002586:	0018      	movs	r0, r3
 8002588:	f000 fb5b 	bl	8002c42 <RTC_ByteToBcd2>
 800258c:	0003      	movs	r3, r0
 800258e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002590:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	789b      	ldrb	r3, [r3, #2]
 8002596:	0018      	movs	r0, r3
 8002598:	f000 fb53 	bl	8002c42 <RTC_ByteToBcd2>
 800259c:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800259e:	0022      	movs	r2, r4
 80025a0:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	78db      	ldrb	r3, [r3, #3]
 80025a6:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80025a8:	4313      	orrs	r3, r2
 80025aa:	617b      	str	r3, [r7, #20]
 80025ac:	e017      	b.n	80025de <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	2240      	movs	r2, #64	; 0x40
 80025b6:	4013      	ands	r3, r2
 80025b8:	d102      	bne.n	80025c0 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2200      	movs	r2, #0
 80025be:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	785b      	ldrb	r3, [r3, #1]
 80025ca:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80025cc:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80025d2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	78db      	ldrb	r3, [r3, #3]
 80025d8:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80025da:	4313      	orrs	r3, r2
 80025dc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	22ca      	movs	r2, #202	; 0xca
 80025e4:	625a      	str	r2, [r3, #36]	; 0x24
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2253      	movs	r2, #83	; 0x53
 80025ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	0018      	movs	r0, r3
 80025f2:	f000 fafa 	bl	8002bea <RTC_EnterInitMode>
 80025f6:	1e03      	subs	r3, r0, #0
 80025f8:	d00b      	beq.n	8002612 <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	22ff      	movs	r2, #255	; 0xff
 8002600:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2204      	movs	r2, #4
 8002606:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e044      	b.n	800269c <HAL_RTC_SetTime+0x168>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	4922      	ldr	r1, [pc, #136]	; (80026a4 <HAL_RTC_SetTime+0x170>)
 800261a:	400a      	ands	r2, r1
 800261c:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	491f      	ldr	r1, [pc, #124]	; (80026a8 <HAL_RTC_SetTime+0x174>)
 800262a:	400a      	ands	r2, r1
 800262c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6899      	ldr	r1, [r3, #8]
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	431a      	orrs	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68da      	ldr	r2, [r3, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2180      	movs	r1, #128	; 0x80
 8002652:	438a      	bics	r2, r1
 8002654:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	2220      	movs	r2, #32
 800265e:	4013      	ands	r3, r2
 8002660:	d111      	bne.n	8002686 <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	0018      	movs	r0, r3
 8002666:	f000 fa97 	bl	8002b98 <HAL_RTC_WaitForSynchro>
 800266a:	1e03      	subs	r3, r0, #0
 800266c:	d00b      	beq.n	8002686 <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	22ff      	movs	r2, #255	; 0xff
 8002674:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2204      	movs	r2, #4
 800267a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e00a      	b.n	800269c <HAL_RTC_SetTime+0x168>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	22ff      	movs	r2, #255	; 0xff
 800268c:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2201      	movs	r2, #1
 8002692:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800269a:	2300      	movs	r3, #0
  }
}
 800269c:	0018      	movs	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	b007      	add	sp, #28
 80026a2:	bd90      	pop	{r4, r7, pc}
 80026a4:	007f7f7f 	.word	0x007f7f7f
 80026a8:	fffbffff 	.word	0xfffbffff

080026ac <HAL_RTC_GetTime>:
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read
  * to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	045b      	lsls	r3, r3, #17
 80026ce:	0c5a      	lsrs	r2, r3, #17
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a22      	ldr	r2, [pc, #136]	; (8002764 <HAL_RTC_GetTime+0xb8>)
 80026dc:	4013      	ands	r3, r2
 80026de:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	0c1b      	lsrs	r3, r3, #16
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	223f      	movs	r2, #63	; 0x3f
 80026e8:	4013      	ands	r3, r2
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	0a1b      	lsrs	r3, r3, #8
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	227f      	movs	r2, #127	; 0x7f
 80026f8:	4013      	ands	r3, r2
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	b2db      	uxtb	r3, r3
 8002704:	227f      	movs	r2, #127	; 0x7f
 8002706:	4013      	ands	r3, r2
 8002708:	b2da      	uxtb	r2, r3
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	0c1b      	lsrs	r3, r3, #16
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2240      	movs	r2, #64	; 0x40
 8002716:	4013      	ands	r3, r2
 8002718:	b2da      	uxtb	r2, r3
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d11a      	bne.n	800275a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	0018      	movs	r0, r3
 800272a:	f000 faab 	bl	8002c84 <RTC_Bcd2ToByte>
 800272e:	0003      	movs	r3, r0
 8002730:	001a      	movs	r2, r3
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	785b      	ldrb	r3, [r3, #1]
 800273a:	0018      	movs	r0, r3
 800273c:	f000 faa2 	bl	8002c84 <RTC_Bcd2ToByte>
 8002740:	0003      	movs	r3, r0
 8002742:	001a      	movs	r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	789b      	ldrb	r3, [r3, #2]
 800274c:	0018      	movs	r0, r3
 800274e:	f000 fa99 	bl	8002c84 <RTC_Bcd2ToByte>
 8002752:	0003      	movs	r3, r0
 8002754:	001a      	movs	r2, r3
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	0018      	movs	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	b006      	add	sp, #24
 8002762:	bd80      	pop	{r7, pc}
 8002764:	007f7f7f 	.word	0x007f7f7f

08002768 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002768:	b590      	push	{r4, r7, lr}
 800276a:	b087      	sub	sp, #28
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002774:	2300      	movs	r3, #0
 8002776:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	7f1b      	ldrb	r3, [r3, #28]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_RTC_SetDate+0x1c>
 8002780:	2302      	movs	r3, #2
 8002782:	e091      	b.n	80028a8 <HAL_RTC_SetDate+0x140>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2201      	movs	r2, #1
 8002788:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2202      	movs	r2, #2
 800278e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10e      	bne.n	80027b4 <HAL_RTC_SetDate+0x4c>
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	785b      	ldrb	r3, [r3, #1]
 800279a:	001a      	movs	r2, r3
 800279c:	2310      	movs	r3, #16
 800279e:	4013      	ands	r3, r2
 80027a0:	d008      	beq.n	80027b4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	785b      	ldrb	r3, [r3, #1]
 80027a6:	2210      	movs	r2, #16
 80027a8:	4393      	bics	r3, r2
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	330a      	adds	r3, #10
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d11c      	bne.n	80027f4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	78db      	ldrb	r3, [r3, #3]
 80027be:	0018      	movs	r0, r3
 80027c0:	f000 fa3f 	bl	8002c42 <RTC_ByteToBcd2>
 80027c4:	0003      	movs	r3, r0
 80027c6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	785b      	ldrb	r3, [r3, #1]
 80027cc:	0018      	movs	r0, r3
 80027ce:	f000 fa38 	bl	8002c42 <RTC_ByteToBcd2>
 80027d2:	0003      	movs	r3, r0
 80027d4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80027d6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	789b      	ldrb	r3, [r3, #2]
 80027dc:	0018      	movs	r0, r3
 80027de:	f000 fa30 	bl	8002c42 <RTC_ByteToBcd2>
 80027e2:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80027e4:	0022      	movs	r2, r4
 80027e6:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80027ee:	4313      	orrs	r3, r2
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	e00e      	b.n	8002812 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	78db      	ldrb	r3, [r3, #3]
 80027f8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	785b      	ldrb	r3, [r3, #1]
 80027fe:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002800:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002806:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800280e:	4313      	orrs	r3, r2
 8002810:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	22ca      	movs	r2, #202	; 0xca
 8002818:	625a      	str	r2, [r3, #36]	; 0x24
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2253      	movs	r2, #83	; 0x53
 8002820:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	0018      	movs	r0, r3
 8002826:	f000 f9e0 	bl	8002bea <RTC_EnterInitMode>
 800282a:	1e03      	subs	r3, r0, #0
 800282c:	d00b      	beq.n	8002846 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	22ff      	movs	r2, #255	; 0xff
 8002834:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2204      	movs	r2, #4
 800283a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e030      	b.n	80028a8 <HAL_RTC_SetDate+0x140>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	4918      	ldr	r1, [pc, #96]	; (80028b0 <HAL_RTC_SetDate+0x148>)
 800284e:	400a      	ands	r2, r1
 8002850:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2180      	movs	r1, #128	; 0x80
 800285e:	438a      	bics	r2, r1
 8002860:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	2220      	movs	r2, #32
 800286a:	4013      	ands	r3, r2
 800286c:	d111      	bne.n	8002892 <HAL_RTC_SetDate+0x12a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	0018      	movs	r0, r3
 8002872:	f000 f991 	bl	8002b98 <HAL_RTC_WaitForSynchro>
 8002876:	1e03      	subs	r3, r0, #0
 8002878:	d00b      	beq.n	8002892 <HAL_RTC_SetDate+0x12a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	22ff      	movs	r2, #255	; 0xff
 8002880:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2204      	movs	r2, #4
 8002886:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e00a      	b.n	80028a8 <HAL_RTC_SetDate+0x140>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	22ff      	movs	r2, #255	; 0xff
 8002898:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2201      	movs	r2, #1
 800289e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80028a6:	2300      	movs	r3, #0
  }
}
 80028a8:	0018      	movs	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	b007      	add	sp, #28
 80028ae:	bd90      	pop	{r4, r7, pc}
 80028b0:	00ffff3f 	.word	0x00ffff3f

080028b4 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	4a21      	ldr	r2, [pc, #132]	; (8002950 <HAL_RTC_GetDate+0x9c>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	0c1b      	lsrs	r3, r3, #16
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	0a1b      	lsrs	r3, r3, #8
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	221f      	movs	r2, #31
 80028e2:	4013      	ands	r3, r2
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	223f      	movs	r2, #63	; 0x3f
 80028f0:	4013      	ands	r3, r2
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	0b5b      	lsrs	r3, r3, #13
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2207      	movs	r2, #7
 8002900:	4013      	ands	r3, r2
 8002902:	b2da      	uxtb	r2, r3
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d11a      	bne.n	8002944 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	78db      	ldrb	r3, [r3, #3]
 8002912:	0018      	movs	r0, r3
 8002914:	f000 f9b6 	bl	8002c84 <RTC_Bcd2ToByte>
 8002918:	0003      	movs	r3, r0
 800291a:	001a      	movs	r2, r3
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	785b      	ldrb	r3, [r3, #1]
 8002924:	0018      	movs	r0, r3
 8002926:	f000 f9ad 	bl	8002c84 <RTC_Bcd2ToByte>
 800292a:	0003      	movs	r3, r0
 800292c:	001a      	movs	r2, r3
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	789b      	ldrb	r3, [r3, #2]
 8002936:	0018      	movs	r0, r3
 8002938:	f000 f9a4 	bl	8002c84 <RTC_Bcd2ToByte>
 800293c:	0003      	movs	r3, r0
 800293e:	001a      	movs	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	0018      	movs	r0, r3
 8002948:	46bd      	mov	sp, r7
 800294a:	b006      	add	sp, #24
 800294c:	bd80      	pop	{r7, pc}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	00ffff3f 	.word	0x00ffff3f

08002954 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002954:	b590      	push	{r4, r7, lr}
 8002956:	b089      	sub	sp, #36	; 0x24
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	61fb      	str	r3, [r7, #28]
 8002968:	2300      	movs	r3, #0
 800296a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	7f1b      	ldrb	r3, [r3, #28]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d101      	bne.n	8002978 <HAL_RTC_SetAlarm_IT+0x24>
 8002974:	2302      	movs	r3, #2
 8002976:	e0d5      	b.n	8002b24 <HAL_RTC_SetAlarm_IT+0x1d0>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2201      	movs	r2, #1
 800297c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2202      	movs	r2, #2
 8002982:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d136      	bne.n	80029f8 <HAL_RTC_SetAlarm_IT+0xa4>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	2240      	movs	r2, #64	; 0x40
 8002992:	4013      	ands	r3, r2
 8002994:	d102      	bne.n	800299c <HAL_RTC_SetAlarm_IT+0x48>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	2200      	movs	r2, #0
 800299a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	0018      	movs	r0, r3
 80029a2:	f000 f94e 	bl	8002c42 <RTC_ByteToBcd2>
 80029a6:	0003      	movs	r3, r0
 80029a8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	785b      	ldrb	r3, [r3, #1]
 80029ae:	0018      	movs	r0, r3
 80029b0:	f000 f947 	bl	8002c42 <RTC_ByteToBcd2>
 80029b4:	0003      	movs	r3, r0
 80029b6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80029b8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	789b      	ldrb	r3, [r3, #2]
 80029be:	0018      	movs	r0, r3
 80029c0:	f000 f93f 	bl	8002c42 <RTC_ByteToBcd2>
 80029c4:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80029c6:	0022      	movs	r2, r4
 80029c8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	78db      	ldrb	r3, [r3, #3]
 80029ce:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80029d0:	431a      	orrs	r2, r3
 80029d2:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2220      	movs	r2, #32
 80029d8:	5c9b      	ldrb	r3, [r3, r2]
 80029da:	0018      	movs	r0, r3
 80029dc:	f000 f931 	bl	8002c42 <RTC_ByteToBcd2>
 80029e0:	0003      	movs	r3, r0
 80029e2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80029e4:	0022      	movs	r2, r4
 80029e6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80029ec:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61fb      	str	r3, [r7, #28]
 80029f6:	e022      	b.n	8002a3e <HAL_RTC_SetAlarm_IT+0xea>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	2240      	movs	r2, #64	; 0x40
 8002a00:	4013      	ands	r3, r2
 8002a02:	d102      	bne.n	8002a0a <HAL_RTC_SetAlarm_IT+0xb6>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2200      	movs	r2, #0
 8002a08:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	785b      	ldrb	r3, [r3, #1]
 8002a14:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002a16:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002a18:	68ba      	ldr	r2, [r7, #8]
 8002a1a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002a1c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	78db      	ldrb	r3, [r3, #3]
 8002a22:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002a24:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	2120      	movs	r1, #32
 8002a2a:	5c5b      	ldrb	r3, [r3, r1]
 8002a2c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002a2e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002a34:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	22ca      	movs	r2, #202	; 0xca
 8002a50:	625a      	str	r2, [r3, #36]	; 0x24
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2253      	movs	r2, #83	; 0x53
 8002a58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Alarm A interrupt */
  __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4931      	ldr	r1, [pc, #196]	; (8002b2c <HAL_RTC_SetAlarm_IT+0x1d8>)
 8002a66:	400a      	ands	r2, r1
 8002a68:	609a      	str	r2, [r3, #8]

  /* Clear flag alarm A */
  __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	22ff      	movs	r2, #255	; 0xff
 8002a72:	401a      	ands	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	492d      	ldr	r1, [pc, #180]	; (8002b30 <HAL_RTC_SetAlarm_IT+0x1dc>)
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002a7e:	f7fe f923 	bl	8000cc8 <HAL_GetTick>
 8002a82:	0003      	movs	r3, r0
 8002a84:	61bb      	str	r3, [r7, #24]

  /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8002a86:	e014      	b.n	8002ab2 <HAL_RTC_SetAlarm_IT+0x15e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002a88:	f7fe f91e 	bl	8000cc8 <HAL_GetTick>
 8002a8c:	0002      	movs	r2, r0
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	1ad2      	subs	r2, r2, r3
 8002a92:	23fa      	movs	r3, #250	; 0xfa
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d90b      	bls.n	8002ab2 <HAL_RTC_SetAlarm_IT+0x15e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	22ff      	movs	r2, #255	; 0xff
 8002aa0:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e038      	b.n	8002b24 <HAL_RTC_SetAlarm_IT+0x1d0>
  while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	4013      	ands	r3, r2
 8002abc:	d0e4      	beq.n	8002a88 <HAL_RTC_SetAlarm_IT+0x134>
    }
  }

  hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	69fa      	ldr	r2, [r7, #28]
 8002ac4:	61da      	str	r2, [r3, #28]
  /* Configure the Alarm A Sub Second register */
  hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Configure the Alarm state: Enable Alarm */
  __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2180      	movs	r1, #128	; 0x80
 8002ada:	0049      	lsls	r1, r1, #1
 8002adc:	430a      	orrs	r2, r1
 8002ade:	609a      	str	r2, [r3, #8]
  /* Configure the Alarm interrupt */
  __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2180      	movs	r1, #128	; 0x80
 8002aec:	0149      	lsls	r1, r1, #5
 8002aee:	430a      	orrs	r2, r1
 8002af0:	609a      	str	r2, [r3, #8]

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002af2:	4b10      	ldr	r3, [pc, #64]	; (8002b34 <HAL_RTC_SetAlarm_IT+0x1e0>)
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	4b0f      	ldr	r3, [pc, #60]	; (8002b34 <HAL_RTC_SetAlarm_IT+0x1e0>)
 8002af8:	2180      	movs	r1, #128	; 0x80
 8002afa:	0289      	lsls	r1, r1, #10
 8002afc:	430a      	orrs	r2, r1
 8002afe:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002b00:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <HAL_RTC_SetAlarm_IT+0x1e0>)
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <HAL_RTC_SetAlarm_IT+0x1e0>)
 8002b06:	2180      	movs	r1, #128	; 0x80
 8002b08:	0289      	lsls	r1, r1, #10
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	22ff      	movs	r2, #255	; 0xff
 8002b14:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	0018      	movs	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	b009      	add	sp, #36	; 0x24
 8002b2a:	bd90      	pop	{r4, r7, pc}
 8002b2c:	fffffeff 	.word	0xfffffeff
 8002b30:	fffffe7f 	.word	0xfffffe7f
 8002b34:	40010400 	.word	0x40010400

08002b38 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	2380      	movs	r3, #128	; 0x80
 8002b48:	015b      	lsls	r3, r3, #5
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d014      	beq.n	8002b78 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68da      	ldr	r2, [r3, #12]
 8002b54:	2380      	movs	r3, #128	; 0x80
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	4013      	ands	r3, r2
 8002b5a:	d00d      	beq.n	8002b78 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	0018      	movs	r0, r3
 8002b60:	f7fd fd22 	bl	80005a8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	22ff      	movs	r2, #255	; 0xff
 8002b6c:	401a      	ands	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4907      	ldr	r1, [pc, #28]	; (8002b90 <HAL_RTC_AlarmIRQHandler+0x58>)
 8002b74:	430a      	orrs	r2, r1
 8002b76:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002b78:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <HAL_RTC_AlarmIRQHandler+0x5c>)
 8002b7a:	2280      	movs	r2, #128	; 0x80
 8002b7c:	0292      	lsls	r2, r2, #10
 8002b7e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	775a      	strb	r2, [r3, #29]
}
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	b002      	add	sp, #8
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	fffffe7f 	.word	0xfffffe7f
 8002b94:	40010400 	.word	0x40010400

08002b98 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68da      	ldr	r2, [r3, #12]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	21a0      	movs	r1, #160	; 0xa0
 8002bb0:	438a      	bics	r2, r1
 8002bb2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002bb4:	f7fe f888 	bl	8000cc8 <HAL_GetTick>
 8002bb8:	0003      	movs	r3, r0
 8002bba:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002bbc:	e00a      	b.n	8002bd4 <HAL_RTC_WaitForSynchro+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002bbe:	f7fe f883 	bl	8000cc8 <HAL_GetTick>
 8002bc2:	0002      	movs	r2, r0
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	1ad2      	subs	r2, r2, r3
 8002bc8:	23fa      	movs	r3, #250	; 0xfa
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d901      	bls.n	8002bd4 <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e006      	b.n	8002be2 <HAL_RTC_WaitForSynchro+0x4a>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	4013      	ands	r3, r2
 8002bde:	d0ee      	beq.n	8002bbe <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	0018      	movs	r0, r3
 8002be4:	46bd      	mov	sp, r7
 8002be6:	b004      	add	sp, #16
 8002be8:	bd80      	pop	{r7, pc}

08002bea <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b084      	sub	sp, #16
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	2240      	movs	r2, #64	; 0x40
 8002bfe:	4013      	ands	r3, r2
 8002c00:	d11a      	bne.n	8002c38 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2201      	movs	r2, #1
 8002c08:	4252      	negs	r2, r2
 8002c0a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002c0c:	f7fe f85c 	bl	8000cc8 <HAL_GetTick>
 8002c10:	0003      	movs	r3, r0
 8002c12:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002c14:	e00a      	b.n	8002c2c <RTC_EnterInitMode+0x42>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002c16:	f7fe f857 	bl	8000cc8 <HAL_GetTick>
 8002c1a:	0002      	movs	r2, r0
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	1ad2      	subs	r2, r2, r3
 8002c20:	23fa      	movs	r3, #250	; 0xfa
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d901      	bls.n	8002c2c <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e006      	b.n	8002c3a <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	2240      	movs	r2, #64	; 0x40
 8002c34:	4013      	ands	r3, r2
 8002c36:	d0ee      	beq.n	8002c16 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	b004      	add	sp, #16
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b084      	sub	sp, #16
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	0002      	movs	r2, r0
 8002c4a:	1dfb      	adds	r3, r7, #7
 8002c4c:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8002c52:	e007      	b.n	8002c64 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	3301      	adds	r3, #1
 8002c58:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002c5a:	1dfb      	adds	r3, r7, #7
 8002c5c:	1dfa      	adds	r2, r7, #7
 8002c5e:	7812      	ldrb	r2, [r2, #0]
 8002c60:	3a0a      	subs	r2, #10
 8002c62:	701a      	strb	r2, [r3, #0]
  while (Value >= 10U)
 8002c64:	1dfb      	adds	r3, r7, #7
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b09      	cmp	r3, #9
 8002c6a:	d8f3      	bhi.n	8002c54 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	1dfb      	adds	r3, r7, #7
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	b2db      	uxtb	r3, r3
}
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	b004      	add	sp, #16
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	0002      	movs	r2, r0
 8002c8c:	1dfb      	adds	r3, r7, #7
 8002c8e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8002c94:	1dfb      	adds	r3, r7, #7
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	001a      	movs	r2, r3
 8002c9e:	0013      	movs	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	189b      	adds	r3, r3, r2
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8002ca8:	1dfb      	adds	r3, r7, #7
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	220f      	movs	r2, #15
 8002cae:	4013      	ands	r3, r2
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	18d3      	adds	r3, r2, r3
 8002cb8:	b2db      	uxtb	r3, r3
}
 8002cba:	0018      	movs	r0, r3
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	b004      	add	sp, #16
 8002cc0:	bd80      	pop	{r7, pc}
	...

08002cc4 <__errno>:
 8002cc4:	4b01      	ldr	r3, [pc, #4]	; (8002ccc <__errno+0x8>)
 8002cc6:	6818      	ldr	r0, [r3, #0]
 8002cc8:	4770      	bx	lr
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	2000000c 	.word	0x2000000c

08002cd0 <__libc_init_array>:
 8002cd0:	b570      	push	{r4, r5, r6, lr}
 8002cd2:	2600      	movs	r6, #0
 8002cd4:	4d0c      	ldr	r5, [pc, #48]	; (8002d08 <__libc_init_array+0x38>)
 8002cd6:	4c0d      	ldr	r4, [pc, #52]	; (8002d0c <__libc_init_array+0x3c>)
 8002cd8:	1b64      	subs	r4, r4, r5
 8002cda:	10a4      	asrs	r4, r4, #2
 8002cdc:	42a6      	cmp	r6, r4
 8002cde:	d109      	bne.n	8002cf4 <__libc_init_array+0x24>
 8002ce0:	2600      	movs	r6, #0
 8002ce2:	f000 fc8b 	bl	80035fc <_init>
 8002ce6:	4d0a      	ldr	r5, [pc, #40]	; (8002d10 <__libc_init_array+0x40>)
 8002ce8:	4c0a      	ldr	r4, [pc, #40]	; (8002d14 <__libc_init_array+0x44>)
 8002cea:	1b64      	subs	r4, r4, r5
 8002cec:	10a4      	asrs	r4, r4, #2
 8002cee:	42a6      	cmp	r6, r4
 8002cf0:	d105      	bne.n	8002cfe <__libc_init_array+0x2e>
 8002cf2:	bd70      	pop	{r4, r5, r6, pc}
 8002cf4:	00b3      	lsls	r3, r6, #2
 8002cf6:	58eb      	ldr	r3, [r5, r3]
 8002cf8:	4798      	blx	r3
 8002cfa:	3601      	adds	r6, #1
 8002cfc:	e7ee      	b.n	8002cdc <__libc_init_array+0xc>
 8002cfe:	00b3      	lsls	r3, r6, #2
 8002d00:	58eb      	ldr	r3, [r5, r3]
 8002d02:	4798      	blx	r3
 8002d04:	3601      	adds	r6, #1
 8002d06:	e7f2      	b.n	8002cee <__libc_init_array+0x1e>
 8002d08:	080036a0 	.word	0x080036a0
 8002d0c:	080036a0 	.word	0x080036a0
 8002d10:	080036a0 	.word	0x080036a0
 8002d14:	080036a4 	.word	0x080036a4

08002d18 <memset>:
 8002d18:	0003      	movs	r3, r0
 8002d1a:	1882      	adds	r2, r0, r2
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d100      	bne.n	8002d22 <memset+0xa>
 8002d20:	4770      	bx	lr
 8002d22:	7019      	strb	r1, [r3, #0]
 8002d24:	3301      	adds	r3, #1
 8002d26:	e7f9      	b.n	8002d1c <memset+0x4>

08002d28 <siprintf>:
 8002d28:	b40e      	push	{r1, r2, r3}
 8002d2a:	b500      	push	{lr}
 8002d2c:	490b      	ldr	r1, [pc, #44]	; (8002d5c <siprintf+0x34>)
 8002d2e:	b09c      	sub	sp, #112	; 0x70
 8002d30:	ab1d      	add	r3, sp, #116	; 0x74
 8002d32:	9002      	str	r0, [sp, #8]
 8002d34:	9006      	str	r0, [sp, #24]
 8002d36:	9107      	str	r1, [sp, #28]
 8002d38:	9104      	str	r1, [sp, #16]
 8002d3a:	4809      	ldr	r0, [pc, #36]	; (8002d60 <siprintf+0x38>)
 8002d3c:	4909      	ldr	r1, [pc, #36]	; (8002d64 <siprintf+0x3c>)
 8002d3e:	cb04      	ldmia	r3!, {r2}
 8002d40:	9105      	str	r1, [sp, #20]
 8002d42:	6800      	ldr	r0, [r0, #0]
 8002d44:	a902      	add	r1, sp, #8
 8002d46:	9301      	str	r3, [sp, #4]
 8002d48:	f000 f870 	bl	8002e2c <_svfiprintf_r>
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	9a02      	ldr	r2, [sp, #8]
 8002d50:	7013      	strb	r3, [r2, #0]
 8002d52:	b01c      	add	sp, #112	; 0x70
 8002d54:	bc08      	pop	{r3}
 8002d56:	b003      	add	sp, #12
 8002d58:	4718      	bx	r3
 8002d5a:	46c0      	nop			; (mov r8, r8)
 8002d5c:	7fffffff 	.word	0x7fffffff
 8002d60:	2000000c 	.word	0x2000000c
 8002d64:	ffff0208 	.word	0xffff0208

08002d68 <__ssputs_r>:
 8002d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d6a:	688e      	ldr	r6, [r1, #8]
 8002d6c:	b085      	sub	sp, #20
 8002d6e:	0007      	movs	r7, r0
 8002d70:	000c      	movs	r4, r1
 8002d72:	9203      	str	r2, [sp, #12]
 8002d74:	9301      	str	r3, [sp, #4]
 8002d76:	429e      	cmp	r6, r3
 8002d78:	d83c      	bhi.n	8002df4 <__ssputs_r+0x8c>
 8002d7a:	2390      	movs	r3, #144	; 0x90
 8002d7c:	898a      	ldrh	r2, [r1, #12]
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	421a      	tst	r2, r3
 8002d82:	d034      	beq.n	8002dee <__ssputs_r+0x86>
 8002d84:	6909      	ldr	r1, [r1, #16]
 8002d86:	6823      	ldr	r3, [r4, #0]
 8002d88:	6960      	ldr	r0, [r4, #20]
 8002d8a:	1a5b      	subs	r3, r3, r1
 8002d8c:	9302      	str	r3, [sp, #8]
 8002d8e:	2303      	movs	r3, #3
 8002d90:	4343      	muls	r3, r0
 8002d92:	0fdd      	lsrs	r5, r3, #31
 8002d94:	18ed      	adds	r5, r5, r3
 8002d96:	9b01      	ldr	r3, [sp, #4]
 8002d98:	9802      	ldr	r0, [sp, #8]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	181b      	adds	r3, r3, r0
 8002d9e:	106d      	asrs	r5, r5, #1
 8002da0:	42ab      	cmp	r3, r5
 8002da2:	d900      	bls.n	8002da6 <__ssputs_r+0x3e>
 8002da4:	001d      	movs	r5, r3
 8002da6:	0553      	lsls	r3, r2, #21
 8002da8:	d532      	bpl.n	8002e10 <__ssputs_r+0xa8>
 8002daa:	0029      	movs	r1, r5
 8002dac:	0038      	movs	r0, r7
 8002dae:	f000 fb53 	bl	8003458 <_malloc_r>
 8002db2:	1e06      	subs	r6, r0, #0
 8002db4:	d109      	bne.n	8002dca <__ssputs_r+0x62>
 8002db6:	230c      	movs	r3, #12
 8002db8:	603b      	str	r3, [r7, #0]
 8002dba:	2340      	movs	r3, #64	; 0x40
 8002dbc:	2001      	movs	r0, #1
 8002dbe:	89a2      	ldrh	r2, [r4, #12]
 8002dc0:	4240      	negs	r0, r0
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	81a3      	strh	r3, [r4, #12]
 8002dc6:	b005      	add	sp, #20
 8002dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dca:	9a02      	ldr	r2, [sp, #8]
 8002dcc:	6921      	ldr	r1, [r4, #16]
 8002dce:	f000 faba 	bl	8003346 <memcpy>
 8002dd2:	89a3      	ldrh	r3, [r4, #12]
 8002dd4:	4a14      	ldr	r2, [pc, #80]	; (8002e28 <__ssputs_r+0xc0>)
 8002dd6:	401a      	ands	r2, r3
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	81a3      	strh	r3, [r4, #12]
 8002dde:	9b02      	ldr	r3, [sp, #8]
 8002de0:	6126      	str	r6, [r4, #16]
 8002de2:	18f6      	adds	r6, r6, r3
 8002de4:	6026      	str	r6, [r4, #0]
 8002de6:	6165      	str	r5, [r4, #20]
 8002de8:	9e01      	ldr	r6, [sp, #4]
 8002dea:	1aed      	subs	r5, r5, r3
 8002dec:	60a5      	str	r5, [r4, #8]
 8002dee:	9b01      	ldr	r3, [sp, #4]
 8002df0:	429e      	cmp	r6, r3
 8002df2:	d900      	bls.n	8002df6 <__ssputs_r+0x8e>
 8002df4:	9e01      	ldr	r6, [sp, #4]
 8002df6:	0032      	movs	r2, r6
 8002df8:	9903      	ldr	r1, [sp, #12]
 8002dfa:	6820      	ldr	r0, [r4, #0]
 8002dfc:	f000 faac 	bl	8003358 <memmove>
 8002e00:	68a3      	ldr	r3, [r4, #8]
 8002e02:	2000      	movs	r0, #0
 8002e04:	1b9b      	subs	r3, r3, r6
 8002e06:	60a3      	str	r3, [r4, #8]
 8002e08:	6823      	ldr	r3, [r4, #0]
 8002e0a:	199e      	adds	r6, r3, r6
 8002e0c:	6026      	str	r6, [r4, #0]
 8002e0e:	e7da      	b.n	8002dc6 <__ssputs_r+0x5e>
 8002e10:	002a      	movs	r2, r5
 8002e12:	0038      	movs	r0, r7
 8002e14:	f000 fb96 	bl	8003544 <_realloc_r>
 8002e18:	1e06      	subs	r6, r0, #0
 8002e1a:	d1e0      	bne.n	8002dde <__ssputs_r+0x76>
 8002e1c:	0038      	movs	r0, r7
 8002e1e:	6921      	ldr	r1, [r4, #16]
 8002e20:	f000 faae 	bl	8003380 <_free_r>
 8002e24:	e7c7      	b.n	8002db6 <__ssputs_r+0x4e>
 8002e26:	46c0      	nop			; (mov r8, r8)
 8002e28:	fffffb7f 	.word	0xfffffb7f

08002e2c <_svfiprintf_r>:
 8002e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e2e:	b0a1      	sub	sp, #132	; 0x84
 8002e30:	9003      	str	r0, [sp, #12]
 8002e32:	001d      	movs	r5, r3
 8002e34:	898b      	ldrh	r3, [r1, #12]
 8002e36:	000f      	movs	r7, r1
 8002e38:	0016      	movs	r6, r2
 8002e3a:	061b      	lsls	r3, r3, #24
 8002e3c:	d511      	bpl.n	8002e62 <_svfiprintf_r+0x36>
 8002e3e:	690b      	ldr	r3, [r1, #16]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10e      	bne.n	8002e62 <_svfiprintf_r+0x36>
 8002e44:	2140      	movs	r1, #64	; 0x40
 8002e46:	f000 fb07 	bl	8003458 <_malloc_r>
 8002e4a:	6038      	str	r0, [r7, #0]
 8002e4c:	6138      	str	r0, [r7, #16]
 8002e4e:	2800      	cmp	r0, #0
 8002e50:	d105      	bne.n	8002e5e <_svfiprintf_r+0x32>
 8002e52:	230c      	movs	r3, #12
 8002e54:	9a03      	ldr	r2, [sp, #12]
 8002e56:	3801      	subs	r0, #1
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	b021      	add	sp, #132	; 0x84
 8002e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e5e:	2340      	movs	r3, #64	; 0x40
 8002e60:	617b      	str	r3, [r7, #20]
 8002e62:	2300      	movs	r3, #0
 8002e64:	ac08      	add	r4, sp, #32
 8002e66:	6163      	str	r3, [r4, #20]
 8002e68:	3320      	adds	r3, #32
 8002e6a:	7663      	strb	r3, [r4, #25]
 8002e6c:	3310      	adds	r3, #16
 8002e6e:	76a3      	strb	r3, [r4, #26]
 8002e70:	9507      	str	r5, [sp, #28]
 8002e72:	0035      	movs	r5, r6
 8002e74:	782b      	ldrb	r3, [r5, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <_svfiprintf_r+0x52>
 8002e7a:	2b25      	cmp	r3, #37	; 0x25
 8002e7c:	d147      	bne.n	8002f0e <_svfiprintf_r+0xe2>
 8002e7e:	1bab      	subs	r3, r5, r6
 8002e80:	9305      	str	r3, [sp, #20]
 8002e82:	42b5      	cmp	r5, r6
 8002e84:	d00c      	beq.n	8002ea0 <_svfiprintf_r+0x74>
 8002e86:	0032      	movs	r2, r6
 8002e88:	0039      	movs	r1, r7
 8002e8a:	9803      	ldr	r0, [sp, #12]
 8002e8c:	f7ff ff6c 	bl	8002d68 <__ssputs_r>
 8002e90:	1c43      	adds	r3, r0, #1
 8002e92:	d100      	bne.n	8002e96 <_svfiprintf_r+0x6a>
 8002e94:	e0ae      	b.n	8002ff4 <_svfiprintf_r+0x1c8>
 8002e96:	6962      	ldr	r2, [r4, #20]
 8002e98:	9b05      	ldr	r3, [sp, #20]
 8002e9a:	4694      	mov	ip, r2
 8002e9c:	4463      	add	r3, ip
 8002e9e:	6163      	str	r3, [r4, #20]
 8002ea0:	782b      	ldrb	r3, [r5, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d100      	bne.n	8002ea8 <_svfiprintf_r+0x7c>
 8002ea6:	e0a5      	b.n	8002ff4 <_svfiprintf_r+0x1c8>
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	2300      	movs	r3, #0
 8002eac:	4252      	negs	r2, r2
 8002eae:	6062      	str	r2, [r4, #4]
 8002eb0:	a904      	add	r1, sp, #16
 8002eb2:	3254      	adds	r2, #84	; 0x54
 8002eb4:	1852      	adds	r2, r2, r1
 8002eb6:	1c6e      	adds	r6, r5, #1
 8002eb8:	6023      	str	r3, [r4, #0]
 8002eba:	60e3      	str	r3, [r4, #12]
 8002ebc:	60a3      	str	r3, [r4, #8]
 8002ebe:	7013      	strb	r3, [r2, #0]
 8002ec0:	65a3      	str	r3, [r4, #88]	; 0x58
 8002ec2:	2205      	movs	r2, #5
 8002ec4:	7831      	ldrb	r1, [r6, #0]
 8002ec6:	4854      	ldr	r0, [pc, #336]	; (8003018 <_svfiprintf_r+0x1ec>)
 8002ec8:	f000 fa32 	bl	8003330 <memchr>
 8002ecc:	1c75      	adds	r5, r6, #1
 8002ece:	2800      	cmp	r0, #0
 8002ed0:	d11f      	bne.n	8002f12 <_svfiprintf_r+0xe6>
 8002ed2:	6822      	ldr	r2, [r4, #0]
 8002ed4:	06d3      	lsls	r3, r2, #27
 8002ed6:	d504      	bpl.n	8002ee2 <_svfiprintf_r+0xb6>
 8002ed8:	2353      	movs	r3, #83	; 0x53
 8002eda:	a904      	add	r1, sp, #16
 8002edc:	185b      	adds	r3, r3, r1
 8002ede:	2120      	movs	r1, #32
 8002ee0:	7019      	strb	r1, [r3, #0]
 8002ee2:	0713      	lsls	r3, r2, #28
 8002ee4:	d504      	bpl.n	8002ef0 <_svfiprintf_r+0xc4>
 8002ee6:	2353      	movs	r3, #83	; 0x53
 8002ee8:	a904      	add	r1, sp, #16
 8002eea:	185b      	adds	r3, r3, r1
 8002eec:	212b      	movs	r1, #43	; 0x2b
 8002eee:	7019      	strb	r1, [r3, #0]
 8002ef0:	7833      	ldrb	r3, [r6, #0]
 8002ef2:	2b2a      	cmp	r3, #42	; 0x2a
 8002ef4:	d016      	beq.n	8002f24 <_svfiprintf_r+0xf8>
 8002ef6:	0035      	movs	r5, r6
 8002ef8:	2100      	movs	r1, #0
 8002efa:	200a      	movs	r0, #10
 8002efc:	68e3      	ldr	r3, [r4, #12]
 8002efe:	782a      	ldrb	r2, [r5, #0]
 8002f00:	1c6e      	adds	r6, r5, #1
 8002f02:	3a30      	subs	r2, #48	; 0x30
 8002f04:	2a09      	cmp	r2, #9
 8002f06:	d94e      	bls.n	8002fa6 <_svfiprintf_r+0x17a>
 8002f08:	2900      	cmp	r1, #0
 8002f0a:	d111      	bne.n	8002f30 <_svfiprintf_r+0x104>
 8002f0c:	e017      	b.n	8002f3e <_svfiprintf_r+0x112>
 8002f0e:	3501      	adds	r5, #1
 8002f10:	e7b0      	b.n	8002e74 <_svfiprintf_r+0x48>
 8002f12:	4b41      	ldr	r3, [pc, #260]	; (8003018 <_svfiprintf_r+0x1ec>)
 8002f14:	6822      	ldr	r2, [r4, #0]
 8002f16:	1ac0      	subs	r0, r0, r3
 8002f18:	2301      	movs	r3, #1
 8002f1a:	4083      	lsls	r3, r0
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	002e      	movs	r6, r5
 8002f20:	6023      	str	r3, [r4, #0]
 8002f22:	e7ce      	b.n	8002ec2 <_svfiprintf_r+0x96>
 8002f24:	9b07      	ldr	r3, [sp, #28]
 8002f26:	1d19      	adds	r1, r3, #4
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	9107      	str	r1, [sp, #28]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	db01      	blt.n	8002f34 <_svfiprintf_r+0x108>
 8002f30:	930b      	str	r3, [sp, #44]	; 0x2c
 8002f32:	e004      	b.n	8002f3e <_svfiprintf_r+0x112>
 8002f34:	425b      	negs	r3, r3
 8002f36:	60e3      	str	r3, [r4, #12]
 8002f38:	2302      	movs	r3, #2
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	6023      	str	r3, [r4, #0]
 8002f3e:	782b      	ldrb	r3, [r5, #0]
 8002f40:	2b2e      	cmp	r3, #46	; 0x2e
 8002f42:	d10a      	bne.n	8002f5a <_svfiprintf_r+0x12e>
 8002f44:	786b      	ldrb	r3, [r5, #1]
 8002f46:	2b2a      	cmp	r3, #42	; 0x2a
 8002f48:	d135      	bne.n	8002fb6 <_svfiprintf_r+0x18a>
 8002f4a:	9b07      	ldr	r3, [sp, #28]
 8002f4c:	3502      	adds	r5, #2
 8002f4e:	1d1a      	adds	r2, r3, #4
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	9207      	str	r2, [sp, #28]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	db2b      	blt.n	8002fb0 <_svfiprintf_r+0x184>
 8002f58:	9309      	str	r3, [sp, #36]	; 0x24
 8002f5a:	4e30      	ldr	r6, [pc, #192]	; (800301c <_svfiprintf_r+0x1f0>)
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	0030      	movs	r0, r6
 8002f60:	7829      	ldrb	r1, [r5, #0]
 8002f62:	f000 f9e5 	bl	8003330 <memchr>
 8002f66:	2800      	cmp	r0, #0
 8002f68:	d006      	beq.n	8002f78 <_svfiprintf_r+0x14c>
 8002f6a:	2340      	movs	r3, #64	; 0x40
 8002f6c:	1b80      	subs	r0, r0, r6
 8002f6e:	4083      	lsls	r3, r0
 8002f70:	6822      	ldr	r2, [r4, #0]
 8002f72:	3501      	adds	r5, #1
 8002f74:	4313      	orrs	r3, r2
 8002f76:	6023      	str	r3, [r4, #0]
 8002f78:	7829      	ldrb	r1, [r5, #0]
 8002f7a:	2206      	movs	r2, #6
 8002f7c:	4828      	ldr	r0, [pc, #160]	; (8003020 <_svfiprintf_r+0x1f4>)
 8002f7e:	1c6e      	adds	r6, r5, #1
 8002f80:	7621      	strb	r1, [r4, #24]
 8002f82:	f000 f9d5 	bl	8003330 <memchr>
 8002f86:	2800      	cmp	r0, #0
 8002f88:	d03c      	beq.n	8003004 <_svfiprintf_r+0x1d8>
 8002f8a:	4b26      	ldr	r3, [pc, #152]	; (8003024 <_svfiprintf_r+0x1f8>)
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d125      	bne.n	8002fdc <_svfiprintf_r+0x1b0>
 8002f90:	2207      	movs	r2, #7
 8002f92:	9b07      	ldr	r3, [sp, #28]
 8002f94:	3307      	adds	r3, #7
 8002f96:	4393      	bics	r3, r2
 8002f98:	3308      	adds	r3, #8
 8002f9a:	9307      	str	r3, [sp, #28]
 8002f9c:	6963      	ldr	r3, [r4, #20]
 8002f9e:	9a04      	ldr	r2, [sp, #16]
 8002fa0:	189b      	adds	r3, r3, r2
 8002fa2:	6163      	str	r3, [r4, #20]
 8002fa4:	e765      	b.n	8002e72 <_svfiprintf_r+0x46>
 8002fa6:	4343      	muls	r3, r0
 8002fa8:	0035      	movs	r5, r6
 8002faa:	2101      	movs	r1, #1
 8002fac:	189b      	adds	r3, r3, r2
 8002fae:	e7a6      	b.n	8002efe <_svfiprintf_r+0xd2>
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	425b      	negs	r3, r3
 8002fb4:	e7d0      	b.n	8002f58 <_svfiprintf_r+0x12c>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	200a      	movs	r0, #10
 8002fba:	001a      	movs	r2, r3
 8002fbc:	3501      	adds	r5, #1
 8002fbe:	6063      	str	r3, [r4, #4]
 8002fc0:	7829      	ldrb	r1, [r5, #0]
 8002fc2:	1c6e      	adds	r6, r5, #1
 8002fc4:	3930      	subs	r1, #48	; 0x30
 8002fc6:	2909      	cmp	r1, #9
 8002fc8:	d903      	bls.n	8002fd2 <_svfiprintf_r+0x1a6>
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0c5      	beq.n	8002f5a <_svfiprintf_r+0x12e>
 8002fce:	9209      	str	r2, [sp, #36]	; 0x24
 8002fd0:	e7c3      	b.n	8002f5a <_svfiprintf_r+0x12e>
 8002fd2:	4342      	muls	r2, r0
 8002fd4:	0035      	movs	r5, r6
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	1852      	adds	r2, r2, r1
 8002fda:	e7f1      	b.n	8002fc0 <_svfiprintf_r+0x194>
 8002fdc:	ab07      	add	r3, sp, #28
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	003a      	movs	r2, r7
 8002fe2:	0021      	movs	r1, r4
 8002fe4:	4b10      	ldr	r3, [pc, #64]	; (8003028 <_svfiprintf_r+0x1fc>)
 8002fe6:	9803      	ldr	r0, [sp, #12]
 8002fe8:	e000      	b.n	8002fec <_svfiprintf_r+0x1c0>
 8002fea:	bf00      	nop
 8002fec:	9004      	str	r0, [sp, #16]
 8002fee:	9b04      	ldr	r3, [sp, #16]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	d1d3      	bne.n	8002f9c <_svfiprintf_r+0x170>
 8002ff4:	89bb      	ldrh	r3, [r7, #12]
 8002ff6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002ff8:	065b      	lsls	r3, r3, #25
 8002ffa:	d400      	bmi.n	8002ffe <_svfiprintf_r+0x1d2>
 8002ffc:	e72d      	b.n	8002e5a <_svfiprintf_r+0x2e>
 8002ffe:	2001      	movs	r0, #1
 8003000:	4240      	negs	r0, r0
 8003002:	e72a      	b.n	8002e5a <_svfiprintf_r+0x2e>
 8003004:	ab07      	add	r3, sp, #28
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	003a      	movs	r2, r7
 800300a:	0021      	movs	r1, r4
 800300c:	4b06      	ldr	r3, [pc, #24]	; (8003028 <_svfiprintf_r+0x1fc>)
 800300e:	9803      	ldr	r0, [sp, #12]
 8003010:	f000 f87c 	bl	800310c <_printf_i>
 8003014:	e7ea      	b.n	8002fec <_svfiprintf_r+0x1c0>
 8003016:	46c0      	nop			; (mov r8, r8)
 8003018:	0800366c 	.word	0x0800366c
 800301c:	08003672 	.word	0x08003672
 8003020:	08003676 	.word	0x08003676
 8003024:	00000000 	.word	0x00000000
 8003028:	08002d69 	.word	0x08002d69

0800302c <_printf_common>:
 800302c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800302e:	0015      	movs	r5, r2
 8003030:	9301      	str	r3, [sp, #4]
 8003032:	688a      	ldr	r2, [r1, #8]
 8003034:	690b      	ldr	r3, [r1, #16]
 8003036:	000c      	movs	r4, r1
 8003038:	9000      	str	r0, [sp, #0]
 800303a:	4293      	cmp	r3, r2
 800303c:	da00      	bge.n	8003040 <_printf_common+0x14>
 800303e:	0013      	movs	r3, r2
 8003040:	0022      	movs	r2, r4
 8003042:	602b      	str	r3, [r5, #0]
 8003044:	3243      	adds	r2, #67	; 0x43
 8003046:	7812      	ldrb	r2, [r2, #0]
 8003048:	2a00      	cmp	r2, #0
 800304a:	d001      	beq.n	8003050 <_printf_common+0x24>
 800304c:	3301      	adds	r3, #1
 800304e:	602b      	str	r3, [r5, #0]
 8003050:	6823      	ldr	r3, [r4, #0]
 8003052:	069b      	lsls	r3, r3, #26
 8003054:	d502      	bpl.n	800305c <_printf_common+0x30>
 8003056:	682b      	ldr	r3, [r5, #0]
 8003058:	3302      	adds	r3, #2
 800305a:	602b      	str	r3, [r5, #0]
 800305c:	6822      	ldr	r2, [r4, #0]
 800305e:	2306      	movs	r3, #6
 8003060:	0017      	movs	r7, r2
 8003062:	401f      	ands	r7, r3
 8003064:	421a      	tst	r2, r3
 8003066:	d027      	beq.n	80030b8 <_printf_common+0x8c>
 8003068:	0023      	movs	r3, r4
 800306a:	3343      	adds	r3, #67	; 0x43
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	1e5a      	subs	r2, r3, #1
 8003070:	4193      	sbcs	r3, r2
 8003072:	6822      	ldr	r2, [r4, #0]
 8003074:	0692      	lsls	r2, r2, #26
 8003076:	d430      	bmi.n	80030da <_printf_common+0xae>
 8003078:	0022      	movs	r2, r4
 800307a:	9901      	ldr	r1, [sp, #4]
 800307c:	9800      	ldr	r0, [sp, #0]
 800307e:	9e08      	ldr	r6, [sp, #32]
 8003080:	3243      	adds	r2, #67	; 0x43
 8003082:	47b0      	blx	r6
 8003084:	1c43      	adds	r3, r0, #1
 8003086:	d025      	beq.n	80030d4 <_printf_common+0xa8>
 8003088:	2306      	movs	r3, #6
 800308a:	6820      	ldr	r0, [r4, #0]
 800308c:	682a      	ldr	r2, [r5, #0]
 800308e:	68e1      	ldr	r1, [r4, #12]
 8003090:	2500      	movs	r5, #0
 8003092:	4003      	ands	r3, r0
 8003094:	2b04      	cmp	r3, #4
 8003096:	d103      	bne.n	80030a0 <_printf_common+0x74>
 8003098:	1a8d      	subs	r5, r1, r2
 800309a:	43eb      	mvns	r3, r5
 800309c:	17db      	asrs	r3, r3, #31
 800309e:	401d      	ands	r5, r3
 80030a0:	68a3      	ldr	r3, [r4, #8]
 80030a2:	6922      	ldr	r2, [r4, #16]
 80030a4:	4293      	cmp	r3, r2
 80030a6:	dd01      	ble.n	80030ac <_printf_common+0x80>
 80030a8:	1a9b      	subs	r3, r3, r2
 80030aa:	18ed      	adds	r5, r5, r3
 80030ac:	2700      	movs	r7, #0
 80030ae:	42bd      	cmp	r5, r7
 80030b0:	d120      	bne.n	80030f4 <_printf_common+0xc8>
 80030b2:	2000      	movs	r0, #0
 80030b4:	e010      	b.n	80030d8 <_printf_common+0xac>
 80030b6:	3701      	adds	r7, #1
 80030b8:	68e3      	ldr	r3, [r4, #12]
 80030ba:	682a      	ldr	r2, [r5, #0]
 80030bc:	1a9b      	subs	r3, r3, r2
 80030be:	42bb      	cmp	r3, r7
 80030c0:	ddd2      	ble.n	8003068 <_printf_common+0x3c>
 80030c2:	0022      	movs	r2, r4
 80030c4:	2301      	movs	r3, #1
 80030c6:	9901      	ldr	r1, [sp, #4]
 80030c8:	9800      	ldr	r0, [sp, #0]
 80030ca:	9e08      	ldr	r6, [sp, #32]
 80030cc:	3219      	adds	r2, #25
 80030ce:	47b0      	blx	r6
 80030d0:	1c43      	adds	r3, r0, #1
 80030d2:	d1f0      	bne.n	80030b6 <_printf_common+0x8a>
 80030d4:	2001      	movs	r0, #1
 80030d6:	4240      	negs	r0, r0
 80030d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80030da:	2030      	movs	r0, #48	; 0x30
 80030dc:	18e1      	adds	r1, r4, r3
 80030de:	3143      	adds	r1, #67	; 0x43
 80030e0:	7008      	strb	r0, [r1, #0]
 80030e2:	0021      	movs	r1, r4
 80030e4:	1c5a      	adds	r2, r3, #1
 80030e6:	3145      	adds	r1, #69	; 0x45
 80030e8:	7809      	ldrb	r1, [r1, #0]
 80030ea:	18a2      	adds	r2, r4, r2
 80030ec:	3243      	adds	r2, #67	; 0x43
 80030ee:	3302      	adds	r3, #2
 80030f0:	7011      	strb	r1, [r2, #0]
 80030f2:	e7c1      	b.n	8003078 <_printf_common+0x4c>
 80030f4:	0022      	movs	r2, r4
 80030f6:	2301      	movs	r3, #1
 80030f8:	9901      	ldr	r1, [sp, #4]
 80030fa:	9800      	ldr	r0, [sp, #0]
 80030fc:	9e08      	ldr	r6, [sp, #32]
 80030fe:	321a      	adds	r2, #26
 8003100:	47b0      	blx	r6
 8003102:	1c43      	adds	r3, r0, #1
 8003104:	d0e6      	beq.n	80030d4 <_printf_common+0xa8>
 8003106:	3701      	adds	r7, #1
 8003108:	e7d1      	b.n	80030ae <_printf_common+0x82>
	...

0800310c <_printf_i>:
 800310c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800310e:	b08b      	sub	sp, #44	; 0x2c
 8003110:	9206      	str	r2, [sp, #24]
 8003112:	000a      	movs	r2, r1
 8003114:	3243      	adds	r2, #67	; 0x43
 8003116:	9307      	str	r3, [sp, #28]
 8003118:	9005      	str	r0, [sp, #20]
 800311a:	9204      	str	r2, [sp, #16]
 800311c:	7e0a      	ldrb	r2, [r1, #24]
 800311e:	000c      	movs	r4, r1
 8003120:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003122:	2a78      	cmp	r2, #120	; 0x78
 8003124:	d807      	bhi.n	8003136 <_printf_i+0x2a>
 8003126:	2a62      	cmp	r2, #98	; 0x62
 8003128:	d809      	bhi.n	800313e <_printf_i+0x32>
 800312a:	2a00      	cmp	r2, #0
 800312c:	d100      	bne.n	8003130 <_printf_i+0x24>
 800312e:	e0c1      	b.n	80032b4 <_printf_i+0x1a8>
 8003130:	2a58      	cmp	r2, #88	; 0x58
 8003132:	d100      	bne.n	8003136 <_printf_i+0x2a>
 8003134:	e08c      	b.n	8003250 <_printf_i+0x144>
 8003136:	0026      	movs	r6, r4
 8003138:	3642      	adds	r6, #66	; 0x42
 800313a:	7032      	strb	r2, [r6, #0]
 800313c:	e022      	b.n	8003184 <_printf_i+0x78>
 800313e:	0010      	movs	r0, r2
 8003140:	3863      	subs	r0, #99	; 0x63
 8003142:	2815      	cmp	r0, #21
 8003144:	d8f7      	bhi.n	8003136 <_printf_i+0x2a>
 8003146:	f7fc ffdf 	bl	8000108 <__gnu_thumb1_case_shi>
 800314a:	0016      	.short	0x0016
 800314c:	fff6001f 	.word	0xfff6001f
 8003150:	fff6fff6 	.word	0xfff6fff6
 8003154:	001ffff6 	.word	0x001ffff6
 8003158:	fff6fff6 	.word	0xfff6fff6
 800315c:	fff6fff6 	.word	0xfff6fff6
 8003160:	003600a8 	.word	0x003600a8
 8003164:	fff6009a 	.word	0xfff6009a
 8003168:	00b9fff6 	.word	0x00b9fff6
 800316c:	0036fff6 	.word	0x0036fff6
 8003170:	fff6fff6 	.word	0xfff6fff6
 8003174:	009e      	.short	0x009e
 8003176:	0026      	movs	r6, r4
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	3642      	adds	r6, #66	; 0x42
 800317c:	1d11      	adds	r1, r2, #4
 800317e:	6019      	str	r1, [r3, #0]
 8003180:	6813      	ldr	r3, [r2, #0]
 8003182:	7033      	strb	r3, [r6, #0]
 8003184:	2301      	movs	r3, #1
 8003186:	e0a7      	b.n	80032d8 <_printf_i+0x1cc>
 8003188:	6808      	ldr	r0, [r1, #0]
 800318a:	6819      	ldr	r1, [r3, #0]
 800318c:	1d0a      	adds	r2, r1, #4
 800318e:	0605      	lsls	r5, r0, #24
 8003190:	d50b      	bpl.n	80031aa <_printf_i+0x9e>
 8003192:	680d      	ldr	r5, [r1, #0]
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	2d00      	cmp	r5, #0
 8003198:	da03      	bge.n	80031a2 <_printf_i+0x96>
 800319a:	232d      	movs	r3, #45	; 0x2d
 800319c:	9a04      	ldr	r2, [sp, #16]
 800319e:	426d      	negs	r5, r5
 80031a0:	7013      	strb	r3, [r2, #0]
 80031a2:	4b61      	ldr	r3, [pc, #388]	; (8003328 <_printf_i+0x21c>)
 80031a4:	270a      	movs	r7, #10
 80031a6:	9303      	str	r3, [sp, #12]
 80031a8:	e01b      	b.n	80031e2 <_printf_i+0xd6>
 80031aa:	680d      	ldr	r5, [r1, #0]
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	0641      	lsls	r1, r0, #25
 80031b0:	d5f1      	bpl.n	8003196 <_printf_i+0x8a>
 80031b2:	b22d      	sxth	r5, r5
 80031b4:	e7ef      	b.n	8003196 <_printf_i+0x8a>
 80031b6:	680d      	ldr	r5, [r1, #0]
 80031b8:	6819      	ldr	r1, [r3, #0]
 80031ba:	1d08      	adds	r0, r1, #4
 80031bc:	6018      	str	r0, [r3, #0]
 80031be:	062e      	lsls	r6, r5, #24
 80031c0:	d501      	bpl.n	80031c6 <_printf_i+0xba>
 80031c2:	680d      	ldr	r5, [r1, #0]
 80031c4:	e003      	b.n	80031ce <_printf_i+0xc2>
 80031c6:	066d      	lsls	r5, r5, #25
 80031c8:	d5fb      	bpl.n	80031c2 <_printf_i+0xb6>
 80031ca:	680d      	ldr	r5, [r1, #0]
 80031cc:	b2ad      	uxth	r5, r5
 80031ce:	4b56      	ldr	r3, [pc, #344]	; (8003328 <_printf_i+0x21c>)
 80031d0:	2708      	movs	r7, #8
 80031d2:	9303      	str	r3, [sp, #12]
 80031d4:	2a6f      	cmp	r2, #111	; 0x6f
 80031d6:	d000      	beq.n	80031da <_printf_i+0xce>
 80031d8:	3702      	adds	r7, #2
 80031da:	0023      	movs	r3, r4
 80031dc:	2200      	movs	r2, #0
 80031de:	3343      	adds	r3, #67	; 0x43
 80031e0:	701a      	strb	r2, [r3, #0]
 80031e2:	6863      	ldr	r3, [r4, #4]
 80031e4:	60a3      	str	r3, [r4, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	db03      	blt.n	80031f2 <_printf_i+0xe6>
 80031ea:	2204      	movs	r2, #4
 80031ec:	6821      	ldr	r1, [r4, #0]
 80031ee:	4391      	bics	r1, r2
 80031f0:	6021      	str	r1, [r4, #0]
 80031f2:	2d00      	cmp	r5, #0
 80031f4:	d102      	bne.n	80031fc <_printf_i+0xf0>
 80031f6:	9e04      	ldr	r6, [sp, #16]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00c      	beq.n	8003216 <_printf_i+0x10a>
 80031fc:	9e04      	ldr	r6, [sp, #16]
 80031fe:	0028      	movs	r0, r5
 8003200:	0039      	movs	r1, r7
 8003202:	f7fd f811 	bl	8000228 <__aeabi_uidivmod>
 8003206:	9b03      	ldr	r3, [sp, #12]
 8003208:	3e01      	subs	r6, #1
 800320a:	5c5b      	ldrb	r3, [r3, r1]
 800320c:	7033      	strb	r3, [r6, #0]
 800320e:	002b      	movs	r3, r5
 8003210:	0005      	movs	r5, r0
 8003212:	429f      	cmp	r7, r3
 8003214:	d9f3      	bls.n	80031fe <_printf_i+0xf2>
 8003216:	2f08      	cmp	r7, #8
 8003218:	d109      	bne.n	800322e <_printf_i+0x122>
 800321a:	6823      	ldr	r3, [r4, #0]
 800321c:	07db      	lsls	r3, r3, #31
 800321e:	d506      	bpl.n	800322e <_printf_i+0x122>
 8003220:	6863      	ldr	r3, [r4, #4]
 8003222:	6922      	ldr	r2, [r4, #16]
 8003224:	4293      	cmp	r3, r2
 8003226:	dc02      	bgt.n	800322e <_printf_i+0x122>
 8003228:	2330      	movs	r3, #48	; 0x30
 800322a:	3e01      	subs	r6, #1
 800322c:	7033      	strb	r3, [r6, #0]
 800322e:	9b04      	ldr	r3, [sp, #16]
 8003230:	1b9b      	subs	r3, r3, r6
 8003232:	6123      	str	r3, [r4, #16]
 8003234:	9b07      	ldr	r3, [sp, #28]
 8003236:	0021      	movs	r1, r4
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	9805      	ldr	r0, [sp, #20]
 800323c:	9b06      	ldr	r3, [sp, #24]
 800323e:	aa09      	add	r2, sp, #36	; 0x24
 8003240:	f7ff fef4 	bl	800302c <_printf_common>
 8003244:	1c43      	adds	r3, r0, #1
 8003246:	d14c      	bne.n	80032e2 <_printf_i+0x1d6>
 8003248:	2001      	movs	r0, #1
 800324a:	4240      	negs	r0, r0
 800324c:	b00b      	add	sp, #44	; 0x2c
 800324e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003250:	3145      	adds	r1, #69	; 0x45
 8003252:	700a      	strb	r2, [r1, #0]
 8003254:	4a34      	ldr	r2, [pc, #208]	; (8003328 <_printf_i+0x21c>)
 8003256:	9203      	str	r2, [sp, #12]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	6821      	ldr	r1, [r4, #0]
 800325c:	ca20      	ldmia	r2!, {r5}
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	0608      	lsls	r0, r1, #24
 8003262:	d516      	bpl.n	8003292 <_printf_i+0x186>
 8003264:	07cb      	lsls	r3, r1, #31
 8003266:	d502      	bpl.n	800326e <_printf_i+0x162>
 8003268:	2320      	movs	r3, #32
 800326a:	4319      	orrs	r1, r3
 800326c:	6021      	str	r1, [r4, #0]
 800326e:	2710      	movs	r7, #16
 8003270:	2d00      	cmp	r5, #0
 8003272:	d1b2      	bne.n	80031da <_printf_i+0xce>
 8003274:	2320      	movs	r3, #32
 8003276:	6822      	ldr	r2, [r4, #0]
 8003278:	439a      	bics	r2, r3
 800327a:	6022      	str	r2, [r4, #0]
 800327c:	e7ad      	b.n	80031da <_printf_i+0xce>
 800327e:	2220      	movs	r2, #32
 8003280:	6809      	ldr	r1, [r1, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	6022      	str	r2, [r4, #0]
 8003286:	0022      	movs	r2, r4
 8003288:	2178      	movs	r1, #120	; 0x78
 800328a:	3245      	adds	r2, #69	; 0x45
 800328c:	7011      	strb	r1, [r2, #0]
 800328e:	4a27      	ldr	r2, [pc, #156]	; (800332c <_printf_i+0x220>)
 8003290:	e7e1      	b.n	8003256 <_printf_i+0x14a>
 8003292:	0648      	lsls	r0, r1, #25
 8003294:	d5e6      	bpl.n	8003264 <_printf_i+0x158>
 8003296:	b2ad      	uxth	r5, r5
 8003298:	e7e4      	b.n	8003264 <_printf_i+0x158>
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	680d      	ldr	r5, [r1, #0]
 800329e:	1d10      	adds	r0, r2, #4
 80032a0:	6949      	ldr	r1, [r1, #20]
 80032a2:	6018      	str	r0, [r3, #0]
 80032a4:	6813      	ldr	r3, [r2, #0]
 80032a6:	062e      	lsls	r6, r5, #24
 80032a8:	d501      	bpl.n	80032ae <_printf_i+0x1a2>
 80032aa:	6019      	str	r1, [r3, #0]
 80032ac:	e002      	b.n	80032b4 <_printf_i+0x1a8>
 80032ae:	066d      	lsls	r5, r5, #25
 80032b0:	d5fb      	bpl.n	80032aa <_printf_i+0x19e>
 80032b2:	8019      	strh	r1, [r3, #0]
 80032b4:	2300      	movs	r3, #0
 80032b6:	9e04      	ldr	r6, [sp, #16]
 80032b8:	6123      	str	r3, [r4, #16]
 80032ba:	e7bb      	b.n	8003234 <_printf_i+0x128>
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	1d11      	adds	r1, r2, #4
 80032c0:	6019      	str	r1, [r3, #0]
 80032c2:	6816      	ldr	r6, [r2, #0]
 80032c4:	2100      	movs	r1, #0
 80032c6:	0030      	movs	r0, r6
 80032c8:	6862      	ldr	r2, [r4, #4]
 80032ca:	f000 f831 	bl	8003330 <memchr>
 80032ce:	2800      	cmp	r0, #0
 80032d0:	d001      	beq.n	80032d6 <_printf_i+0x1ca>
 80032d2:	1b80      	subs	r0, r0, r6
 80032d4:	6060      	str	r0, [r4, #4]
 80032d6:	6863      	ldr	r3, [r4, #4]
 80032d8:	6123      	str	r3, [r4, #16]
 80032da:	2300      	movs	r3, #0
 80032dc:	9a04      	ldr	r2, [sp, #16]
 80032de:	7013      	strb	r3, [r2, #0]
 80032e0:	e7a8      	b.n	8003234 <_printf_i+0x128>
 80032e2:	6923      	ldr	r3, [r4, #16]
 80032e4:	0032      	movs	r2, r6
 80032e6:	9906      	ldr	r1, [sp, #24]
 80032e8:	9805      	ldr	r0, [sp, #20]
 80032ea:	9d07      	ldr	r5, [sp, #28]
 80032ec:	47a8      	blx	r5
 80032ee:	1c43      	adds	r3, r0, #1
 80032f0:	d0aa      	beq.n	8003248 <_printf_i+0x13c>
 80032f2:	6823      	ldr	r3, [r4, #0]
 80032f4:	079b      	lsls	r3, r3, #30
 80032f6:	d415      	bmi.n	8003324 <_printf_i+0x218>
 80032f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032fa:	68e0      	ldr	r0, [r4, #12]
 80032fc:	4298      	cmp	r0, r3
 80032fe:	daa5      	bge.n	800324c <_printf_i+0x140>
 8003300:	0018      	movs	r0, r3
 8003302:	e7a3      	b.n	800324c <_printf_i+0x140>
 8003304:	0022      	movs	r2, r4
 8003306:	2301      	movs	r3, #1
 8003308:	9906      	ldr	r1, [sp, #24]
 800330a:	9805      	ldr	r0, [sp, #20]
 800330c:	9e07      	ldr	r6, [sp, #28]
 800330e:	3219      	adds	r2, #25
 8003310:	47b0      	blx	r6
 8003312:	1c43      	adds	r3, r0, #1
 8003314:	d098      	beq.n	8003248 <_printf_i+0x13c>
 8003316:	3501      	adds	r5, #1
 8003318:	68e3      	ldr	r3, [r4, #12]
 800331a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800331c:	1a9b      	subs	r3, r3, r2
 800331e:	42ab      	cmp	r3, r5
 8003320:	dcf0      	bgt.n	8003304 <_printf_i+0x1f8>
 8003322:	e7e9      	b.n	80032f8 <_printf_i+0x1ec>
 8003324:	2500      	movs	r5, #0
 8003326:	e7f7      	b.n	8003318 <_printf_i+0x20c>
 8003328:	0800367d 	.word	0x0800367d
 800332c:	0800368e 	.word	0x0800368e

08003330 <memchr>:
 8003330:	b2c9      	uxtb	r1, r1
 8003332:	1882      	adds	r2, r0, r2
 8003334:	4290      	cmp	r0, r2
 8003336:	d101      	bne.n	800333c <memchr+0xc>
 8003338:	2000      	movs	r0, #0
 800333a:	4770      	bx	lr
 800333c:	7803      	ldrb	r3, [r0, #0]
 800333e:	428b      	cmp	r3, r1
 8003340:	d0fb      	beq.n	800333a <memchr+0xa>
 8003342:	3001      	adds	r0, #1
 8003344:	e7f6      	b.n	8003334 <memchr+0x4>

08003346 <memcpy>:
 8003346:	2300      	movs	r3, #0
 8003348:	b510      	push	{r4, lr}
 800334a:	429a      	cmp	r2, r3
 800334c:	d100      	bne.n	8003350 <memcpy+0xa>
 800334e:	bd10      	pop	{r4, pc}
 8003350:	5ccc      	ldrb	r4, [r1, r3]
 8003352:	54c4      	strb	r4, [r0, r3]
 8003354:	3301      	adds	r3, #1
 8003356:	e7f8      	b.n	800334a <memcpy+0x4>

08003358 <memmove>:
 8003358:	b510      	push	{r4, lr}
 800335a:	4288      	cmp	r0, r1
 800335c:	d902      	bls.n	8003364 <memmove+0xc>
 800335e:	188b      	adds	r3, r1, r2
 8003360:	4298      	cmp	r0, r3
 8003362:	d303      	bcc.n	800336c <memmove+0x14>
 8003364:	2300      	movs	r3, #0
 8003366:	e007      	b.n	8003378 <memmove+0x20>
 8003368:	5c8b      	ldrb	r3, [r1, r2]
 800336a:	5483      	strb	r3, [r0, r2]
 800336c:	3a01      	subs	r2, #1
 800336e:	d2fb      	bcs.n	8003368 <memmove+0x10>
 8003370:	bd10      	pop	{r4, pc}
 8003372:	5ccc      	ldrb	r4, [r1, r3]
 8003374:	54c4      	strb	r4, [r0, r3]
 8003376:	3301      	adds	r3, #1
 8003378:	429a      	cmp	r2, r3
 800337a:	d1fa      	bne.n	8003372 <memmove+0x1a>
 800337c:	e7f8      	b.n	8003370 <memmove+0x18>
	...

08003380 <_free_r>:
 8003380:	b570      	push	{r4, r5, r6, lr}
 8003382:	0005      	movs	r5, r0
 8003384:	2900      	cmp	r1, #0
 8003386:	d010      	beq.n	80033aa <_free_r+0x2a>
 8003388:	1f0c      	subs	r4, r1, #4
 800338a:	6823      	ldr	r3, [r4, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	da00      	bge.n	8003392 <_free_r+0x12>
 8003390:	18e4      	adds	r4, r4, r3
 8003392:	0028      	movs	r0, r5
 8003394:	f000 f918 	bl	80035c8 <__malloc_lock>
 8003398:	4a1d      	ldr	r2, [pc, #116]	; (8003410 <_free_r+0x90>)
 800339a:	6813      	ldr	r3, [r2, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d105      	bne.n	80033ac <_free_r+0x2c>
 80033a0:	6063      	str	r3, [r4, #4]
 80033a2:	6014      	str	r4, [r2, #0]
 80033a4:	0028      	movs	r0, r5
 80033a6:	f000 f917 	bl	80035d8 <__malloc_unlock>
 80033aa:	bd70      	pop	{r4, r5, r6, pc}
 80033ac:	42a3      	cmp	r3, r4
 80033ae:	d908      	bls.n	80033c2 <_free_r+0x42>
 80033b0:	6821      	ldr	r1, [r4, #0]
 80033b2:	1860      	adds	r0, r4, r1
 80033b4:	4283      	cmp	r3, r0
 80033b6:	d1f3      	bne.n	80033a0 <_free_r+0x20>
 80033b8:	6818      	ldr	r0, [r3, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	1841      	adds	r1, r0, r1
 80033be:	6021      	str	r1, [r4, #0]
 80033c0:	e7ee      	b.n	80033a0 <_free_r+0x20>
 80033c2:	001a      	movs	r2, r3
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <_free_r+0x4e>
 80033ca:	42a3      	cmp	r3, r4
 80033cc:	d9f9      	bls.n	80033c2 <_free_r+0x42>
 80033ce:	6811      	ldr	r1, [r2, #0]
 80033d0:	1850      	adds	r0, r2, r1
 80033d2:	42a0      	cmp	r0, r4
 80033d4:	d10b      	bne.n	80033ee <_free_r+0x6e>
 80033d6:	6820      	ldr	r0, [r4, #0]
 80033d8:	1809      	adds	r1, r1, r0
 80033da:	1850      	adds	r0, r2, r1
 80033dc:	6011      	str	r1, [r2, #0]
 80033de:	4283      	cmp	r3, r0
 80033e0:	d1e0      	bne.n	80033a4 <_free_r+0x24>
 80033e2:	6818      	ldr	r0, [r3, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	1841      	adds	r1, r0, r1
 80033e8:	6011      	str	r1, [r2, #0]
 80033ea:	6053      	str	r3, [r2, #4]
 80033ec:	e7da      	b.n	80033a4 <_free_r+0x24>
 80033ee:	42a0      	cmp	r0, r4
 80033f0:	d902      	bls.n	80033f8 <_free_r+0x78>
 80033f2:	230c      	movs	r3, #12
 80033f4:	602b      	str	r3, [r5, #0]
 80033f6:	e7d5      	b.n	80033a4 <_free_r+0x24>
 80033f8:	6821      	ldr	r1, [r4, #0]
 80033fa:	1860      	adds	r0, r4, r1
 80033fc:	4283      	cmp	r3, r0
 80033fe:	d103      	bne.n	8003408 <_free_r+0x88>
 8003400:	6818      	ldr	r0, [r3, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	1841      	adds	r1, r0, r1
 8003406:	6021      	str	r1, [r4, #0]
 8003408:	6063      	str	r3, [r4, #4]
 800340a:	6054      	str	r4, [r2, #4]
 800340c:	e7ca      	b.n	80033a4 <_free_r+0x24>
 800340e:	46c0      	nop			; (mov r8, r8)
 8003410:	20000118 	.word	0x20000118

08003414 <sbrk_aligned>:
 8003414:	b570      	push	{r4, r5, r6, lr}
 8003416:	4e0f      	ldr	r6, [pc, #60]	; (8003454 <sbrk_aligned+0x40>)
 8003418:	000d      	movs	r5, r1
 800341a:	6831      	ldr	r1, [r6, #0]
 800341c:	0004      	movs	r4, r0
 800341e:	2900      	cmp	r1, #0
 8003420:	d102      	bne.n	8003428 <sbrk_aligned+0x14>
 8003422:	f000 f8bf 	bl	80035a4 <_sbrk_r>
 8003426:	6030      	str	r0, [r6, #0]
 8003428:	0029      	movs	r1, r5
 800342a:	0020      	movs	r0, r4
 800342c:	f000 f8ba 	bl	80035a4 <_sbrk_r>
 8003430:	1c43      	adds	r3, r0, #1
 8003432:	d00a      	beq.n	800344a <sbrk_aligned+0x36>
 8003434:	2303      	movs	r3, #3
 8003436:	1cc5      	adds	r5, r0, #3
 8003438:	439d      	bics	r5, r3
 800343a:	42a8      	cmp	r0, r5
 800343c:	d007      	beq.n	800344e <sbrk_aligned+0x3a>
 800343e:	1a29      	subs	r1, r5, r0
 8003440:	0020      	movs	r0, r4
 8003442:	f000 f8af 	bl	80035a4 <_sbrk_r>
 8003446:	1c43      	adds	r3, r0, #1
 8003448:	d101      	bne.n	800344e <sbrk_aligned+0x3a>
 800344a:	2501      	movs	r5, #1
 800344c:	426d      	negs	r5, r5
 800344e:	0028      	movs	r0, r5
 8003450:	bd70      	pop	{r4, r5, r6, pc}
 8003452:	46c0      	nop			; (mov r8, r8)
 8003454:	2000011c 	.word	0x2000011c

08003458 <_malloc_r>:
 8003458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800345a:	2203      	movs	r2, #3
 800345c:	1ccb      	adds	r3, r1, #3
 800345e:	4393      	bics	r3, r2
 8003460:	3308      	adds	r3, #8
 8003462:	0006      	movs	r6, r0
 8003464:	001f      	movs	r7, r3
 8003466:	2b0c      	cmp	r3, #12
 8003468:	d232      	bcs.n	80034d0 <_malloc_r+0x78>
 800346a:	270c      	movs	r7, #12
 800346c:	42b9      	cmp	r1, r7
 800346e:	d831      	bhi.n	80034d4 <_malloc_r+0x7c>
 8003470:	0030      	movs	r0, r6
 8003472:	f000 f8a9 	bl	80035c8 <__malloc_lock>
 8003476:	4d32      	ldr	r5, [pc, #200]	; (8003540 <_malloc_r+0xe8>)
 8003478:	682b      	ldr	r3, [r5, #0]
 800347a:	001c      	movs	r4, r3
 800347c:	2c00      	cmp	r4, #0
 800347e:	d12e      	bne.n	80034de <_malloc_r+0x86>
 8003480:	0039      	movs	r1, r7
 8003482:	0030      	movs	r0, r6
 8003484:	f7ff ffc6 	bl	8003414 <sbrk_aligned>
 8003488:	0004      	movs	r4, r0
 800348a:	1c43      	adds	r3, r0, #1
 800348c:	d11e      	bne.n	80034cc <_malloc_r+0x74>
 800348e:	682c      	ldr	r4, [r5, #0]
 8003490:	0025      	movs	r5, r4
 8003492:	2d00      	cmp	r5, #0
 8003494:	d14a      	bne.n	800352c <_malloc_r+0xd4>
 8003496:	6823      	ldr	r3, [r4, #0]
 8003498:	0029      	movs	r1, r5
 800349a:	18e3      	adds	r3, r4, r3
 800349c:	0030      	movs	r0, r6
 800349e:	9301      	str	r3, [sp, #4]
 80034a0:	f000 f880 	bl	80035a4 <_sbrk_r>
 80034a4:	9b01      	ldr	r3, [sp, #4]
 80034a6:	4283      	cmp	r3, r0
 80034a8:	d143      	bne.n	8003532 <_malloc_r+0xda>
 80034aa:	6823      	ldr	r3, [r4, #0]
 80034ac:	3703      	adds	r7, #3
 80034ae:	1aff      	subs	r7, r7, r3
 80034b0:	2303      	movs	r3, #3
 80034b2:	439f      	bics	r7, r3
 80034b4:	3708      	adds	r7, #8
 80034b6:	2f0c      	cmp	r7, #12
 80034b8:	d200      	bcs.n	80034bc <_malloc_r+0x64>
 80034ba:	270c      	movs	r7, #12
 80034bc:	0039      	movs	r1, r7
 80034be:	0030      	movs	r0, r6
 80034c0:	f7ff ffa8 	bl	8003414 <sbrk_aligned>
 80034c4:	1c43      	adds	r3, r0, #1
 80034c6:	d034      	beq.n	8003532 <_malloc_r+0xda>
 80034c8:	6823      	ldr	r3, [r4, #0]
 80034ca:	19df      	adds	r7, r3, r7
 80034cc:	6027      	str	r7, [r4, #0]
 80034ce:	e013      	b.n	80034f8 <_malloc_r+0xa0>
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	dacb      	bge.n	800346c <_malloc_r+0x14>
 80034d4:	230c      	movs	r3, #12
 80034d6:	2500      	movs	r5, #0
 80034d8:	6033      	str	r3, [r6, #0]
 80034da:	0028      	movs	r0, r5
 80034dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80034de:	6822      	ldr	r2, [r4, #0]
 80034e0:	1bd1      	subs	r1, r2, r7
 80034e2:	d420      	bmi.n	8003526 <_malloc_r+0xce>
 80034e4:	290b      	cmp	r1, #11
 80034e6:	d917      	bls.n	8003518 <_malloc_r+0xc0>
 80034e8:	19e2      	adds	r2, r4, r7
 80034ea:	6027      	str	r7, [r4, #0]
 80034ec:	42a3      	cmp	r3, r4
 80034ee:	d111      	bne.n	8003514 <_malloc_r+0xbc>
 80034f0:	602a      	str	r2, [r5, #0]
 80034f2:	6863      	ldr	r3, [r4, #4]
 80034f4:	6011      	str	r1, [r2, #0]
 80034f6:	6053      	str	r3, [r2, #4]
 80034f8:	0030      	movs	r0, r6
 80034fa:	0025      	movs	r5, r4
 80034fc:	f000 f86c 	bl	80035d8 <__malloc_unlock>
 8003500:	2207      	movs	r2, #7
 8003502:	350b      	adds	r5, #11
 8003504:	1d23      	adds	r3, r4, #4
 8003506:	4395      	bics	r5, r2
 8003508:	1aea      	subs	r2, r5, r3
 800350a:	429d      	cmp	r5, r3
 800350c:	d0e5      	beq.n	80034da <_malloc_r+0x82>
 800350e:	1b5b      	subs	r3, r3, r5
 8003510:	50a3      	str	r3, [r4, r2]
 8003512:	e7e2      	b.n	80034da <_malloc_r+0x82>
 8003514:	605a      	str	r2, [r3, #4]
 8003516:	e7ec      	b.n	80034f2 <_malloc_r+0x9a>
 8003518:	6862      	ldr	r2, [r4, #4]
 800351a:	42a3      	cmp	r3, r4
 800351c:	d101      	bne.n	8003522 <_malloc_r+0xca>
 800351e:	602a      	str	r2, [r5, #0]
 8003520:	e7ea      	b.n	80034f8 <_malloc_r+0xa0>
 8003522:	605a      	str	r2, [r3, #4]
 8003524:	e7e8      	b.n	80034f8 <_malloc_r+0xa0>
 8003526:	0023      	movs	r3, r4
 8003528:	6864      	ldr	r4, [r4, #4]
 800352a:	e7a7      	b.n	800347c <_malloc_r+0x24>
 800352c:	002c      	movs	r4, r5
 800352e:	686d      	ldr	r5, [r5, #4]
 8003530:	e7af      	b.n	8003492 <_malloc_r+0x3a>
 8003532:	230c      	movs	r3, #12
 8003534:	0030      	movs	r0, r6
 8003536:	6033      	str	r3, [r6, #0]
 8003538:	f000 f84e 	bl	80035d8 <__malloc_unlock>
 800353c:	e7cd      	b.n	80034da <_malloc_r+0x82>
 800353e:	46c0      	nop			; (mov r8, r8)
 8003540:	20000118 	.word	0x20000118

08003544 <_realloc_r>:
 8003544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003546:	0007      	movs	r7, r0
 8003548:	000e      	movs	r6, r1
 800354a:	0014      	movs	r4, r2
 800354c:	2900      	cmp	r1, #0
 800354e:	d105      	bne.n	800355c <_realloc_r+0x18>
 8003550:	0011      	movs	r1, r2
 8003552:	f7ff ff81 	bl	8003458 <_malloc_r>
 8003556:	0005      	movs	r5, r0
 8003558:	0028      	movs	r0, r5
 800355a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800355c:	2a00      	cmp	r2, #0
 800355e:	d103      	bne.n	8003568 <_realloc_r+0x24>
 8003560:	f7ff ff0e 	bl	8003380 <_free_r>
 8003564:	0025      	movs	r5, r4
 8003566:	e7f7      	b.n	8003558 <_realloc_r+0x14>
 8003568:	f000 f83e 	bl	80035e8 <_malloc_usable_size_r>
 800356c:	9001      	str	r0, [sp, #4]
 800356e:	4284      	cmp	r4, r0
 8003570:	d803      	bhi.n	800357a <_realloc_r+0x36>
 8003572:	0035      	movs	r5, r6
 8003574:	0843      	lsrs	r3, r0, #1
 8003576:	42a3      	cmp	r3, r4
 8003578:	d3ee      	bcc.n	8003558 <_realloc_r+0x14>
 800357a:	0021      	movs	r1, r4
 800357c:	0038      	movs	r0, r7
 800357e:	f7ff ff6b 	bl	8003458 <_malloc_r>
 8003582:	1e05      	subs	r5, r0, #0
 8003584:	d0e8      	beq.n	8003558 <_realloc_r+0x14>
 8003586:	9b01      	ldr	r3, [sp, #4]
 8003588:	0022      	movs	r2, r4
 800358a:	429c      	cmp	r4, r3
 800358c:	d900      	bls.n	8003590 <_realloc_r+0x4c>
 800358e:	001a      	movs	r2, r3
 8003590:	0031      	movs	r1, r6
 8003592:	0028      	movs	r0, r5
 8003594:	f7ff fed7 	bl	8003346 <memcpy>
 8003598:	0031      	movs	r1, r6
 800359a:	0038      	movs	r0, r7
 800359c:	f7ff fef0 	bl	8003380 <_free_r>
 80035a0:	e7da      	b.n	8003558 <_realloc_r+0x14>
	...

080035a4 <_sbrk_r>:
 80035a4:	2300      	movs	r3, #0
 80035a6:	b570      	push	{r4, r5, r6, lr}
 80035a8:	4d06      	ldr	r5, [pc, #24]	; (80035c4 <_sbrk_r+0x20>)
 80035aa:	0004      	movs	r4, r0
 80035ac:	0008      	movs	r0, r1
 80035ae:	602b      	str	r3, [r5, #0]
 80035b0:	f7fd faca 	bl	8000b48 <_sbrk>
 80035b4:	1c43      	adds	r3, r0, #1
 80035b6:	d103      	bne.n	80035c0 <_sbrk_r+0x1c>
 80035b8:	682b      	ldr	r3, [r5, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d000      	beq.n	80035c0 <_sbrk_r+0x1c>
 80035be:	6023      	str	r3, [r4, #0]
 80035c0:	bd70      	pop	{r4, r5, r6, pc}
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	20000120 	.word	0x20000120

080035c8 <__malloc_lock>:
 80035c8:	b510      	push	{r4, lr}
 80035ca:	4802      	ldr	r0, [pc, #8]	; (80035d4 <__malloc_lock+0xc>)
 80035cc:	f000 f814 	bl	80035f8 <__retarget_lock_acquire_recursive>
 80035d0:	bd10      	pop	{r4, pc}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	20000124 	.word	0x20000124

080035d8 <__malloc_unlock>:
 80035d8:	b510      	push	{r4, lr}
 80035da:	4802      	ldr	r0, [pc, #8]	; (80035e4 <__malloc_unlock+0xc>)
 80035dc:	f000 f80d 	bl	80035fa <__retarget_lock_release_recursive>
 80035e0:	bd10      	pop	{r4, pc}
 80035e2:	46c0      	nop			; (mov r8, r8)
 80035e4:	20000124 	.word	0x20000124

080035e8 <_malloc_usable_size_r>:
 80035e8:	1f0b      	subs	r3, r1, #4
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	1f18      	subs	r0, r3, #4
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	da01      	bge.n	80035f6 <_malloc_usable_size_r+0xe>
 80035f2:	580b      	ldr	r3, [r1, r0]
 80035f4:	18c0      	adds	r0, r0, r3
 80035f6:	4770      	bx	lr

080035f8 <__retarget_lock_acquire_recursive>:
 80035f8:	4770      	bx	lr

080035fa <__retarget_lock_release_recursive>:
 80035fa:	4770      	bx	lr

080035fc <_init>:
 80035fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035fe:	46c0      	nop			; (mov r8, r8)
 8003600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003602:	bc08      	pop	{r3}
 8003604:	469e      	mov	lr, r3
 8003606:	4770      	bx	lr

08003608 <_fini>:
 8003608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800360a:	46c0      	nop			; (mov r8, r8)
 800360c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800360e:	bc08      	pop	{r3}
 8003610:	469e      	mov	lr, r3
 8003612:	4770      	bx	lr
